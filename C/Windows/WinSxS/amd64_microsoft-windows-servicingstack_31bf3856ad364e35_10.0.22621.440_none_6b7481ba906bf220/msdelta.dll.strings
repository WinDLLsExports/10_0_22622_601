!This program cannot be run in DOS mode.
wRich
.text
`.rdata
@.data
.pdata
@.rsrc
@.reloc
VWAVH
 A^_^
WAVAWH
@A_A^_
f9Q8v.
fD9x8veH
fD9p8w
+D$(D
XpE9K<
WAVAWH
0A_A^_
f9X8v
D$@D;L$H
D$ L9
D$ L9
t$ WATAUAVAWH
f9p8vQH
        H
.idata  H
 A_A^A]A\_
C94(t
G @8p8
Gx@8q
GPH9p
f;H(t;
T$(fE;
D$@E+
|$ ATAVAWA
|$8A_A^A\
UVWAVAWH
fD9p8vc
;~hs-H
f9X8w
D9xpvgH
0A_A^_^]
f9_8v/
        H
.reloc  H;
f9Q8v
fD9x8vqH
fD9p8w
L$(H;
YpE9C<
f;H(u
USVWATAUAVAWH
uoH9u
A_A^A]A\_^[]
VAVAWH
 A_A^^
|$ UATAUAVAWH
A_A^A]A\]
USVWATAUAVAWH
uoH9u
A_A^A]A\_^[]
$vIIk
UVWATAUAVAWH
H;x(s
 A_A^A]A\_^]
x ATAVAWH
0A_A^A\
l$ VH
|$ AVH
t$HH;
UVWATAUAVAWH
A_A^A]A\_^]
H;T$PtZ
H;T$Pt2
x ATAVAWH
 A_A^A\
UVWATAUAVAWH
t$pH9u
L+D$pI
0A_A^A]A\_^]
x AWH
C0H9C8
C0H9C8
l$ VWATAVAWH
]`+|$`tV
0A_A^A\_^
WATAUAVAWH
0A_A^A]A\_
@SUVWATAUAVAWH
H+K`D
H+K`D
HA_A^A]A\_^][
@SUVWATAUAVAWH
H+K`D
H+K`D
HA_A^A]A\_^][
WAVAWH
0A_A^_
l$ VWATAVAWH
]`+|$`tV
0A_A^A\_^
UVWAVAWH
fD9p8vc
;~hs-H
f9X8w
D9xpvgH
0A_A^_^]
@USVWATAUAVAWH
d$ E3
A_A^A]A\_^[]
I0L+I(I
x AVH
C H9C
L$ E3
WAVAWH
A_A^_
\$h9~
WAVAWH
 A_A^_
@VAWH
VWAVH
 A^_^
H;~(t
@VAUAWH
8+L$(
`A_A]^
8+L$(
t3fff
SVWAVH
A^_^[
t$ E3
A^_^[
@VWATAVAWH
H9S(u
A_A^A\_^
C H9C
H9s(L
H9s(L
WATAUAVAWH
t$ E3
A_A^A]A\_
L$pL+
N(I+N H
T$PI9R
l$0L+
D$PL9H
l$0L+
T$xH;
T$xH;
D$PH9P
UVWATAVH
0A^A\_^]
D#K0L
H!D$(
UVWATAUAVAWH
@A_A^A]A\_^]
D$ M+
|$ AVH
WATAUAVAWH
A_A^A]A\_
SVWATAUAVAWH
H9P(v
l$8M9n
T$@8Q 
H9s(v7I;
D$ D8L
H9P(v
A_A^A]A\_^[
l$8I9\$(v4M9n
@ D8L
H9Z(v'H
@VWAVH
SVWAVAWH
A_A^_^[
D$hE3
D$hD8H
Y(M;Y(
v1I9I
v%M9A(
|$ UH
H9Q(vjH
H9p(roL
@ @8t
L$ E3
I A+A<A
W(H9W tjL
H+W H
@SVWAVAWH
A_A^_^[
D$ E3
!t$ L
H!t$ E3
!t$ L
A(L;B(uPH
H WATAUAVAWH
T$ E3
A_A^A]A\_
K(H+K H
8PA19
8PA19
L$0H9
x AVH
H AVH
WAVAWH
@A_A^_
H9P(v
SVWATAUAVAWH
D$8H9=
A_A^A]A\_^[
8PA19
AUAVAWH
A_A^A]
8PA19
AUAVAWH
D$pE3
A_A^A]
sHH9{@v2H
t$ WATAUAVAWH
H9w@v1H
H9w@w
A_A^A]A\_
VWAVH
WATAUAVAWH
L$HH3
(|$PI
A_A^A]A\_
SVWATAUAVAWH
A_A^A]A\_^[
SVWATAUAVAWH
0A_A^A]A\_^[
@WATAUAVAWH
0A_A^A]A\_
@WATAUAVAWH
|$`I;
0A_A^A]A\_
@USWATAUAWH
uVL9ewu3H
A_A]A\_[]
SUVWATAUAWH
3H;H(
D$(M9X
T$ L;
PA_A]A\_^][
U/H;U'tN
L;E't,
UATAUAVAWH
l$ E3
A_A^A]A\]
VWAVH
I8H+K(H
C8H+C(H
@A^_^
PRSMH
H;U'tD
H;U't9
x AVH
C0H9C8
WATAUAVAWH
A_A^A]A\_
x ATAVAWH
 A_A^A\
@USVWATAUAVAWH
HA_A^A]A\_^[]
D;uHv:A
D;uXr8I
D;uHw
D;uHr`I
9D>tr
w=9Q,vb;
yk;E(
;E wkH
x ATAUAVAWD
]A+P@A+P 
A+P A
|$@A_A^A]A\
WATAUAVAWH
H9L$(
A_A^A]A\_
UVWATAUAVAWH
0A_A^A]A\_^]
O(H+O 
O(H+O 
H WATAUAVAWH
A_A^A]A\_
p8^4*
C0H9C8tmH
@USVWATAUAVAWH
t$@E3
A_A^A]A\_^[]
@UWAUAVAWH
0A_A^A]_]
@UVWAVAWH
++k@H
PA_A^_^]
@SUVWH
8_^][
s@@8s
@VWATAVAWH
@A_A^A\_^
t$ UWAUAVAWH
A_A^A]_]
@UVWAUAVH
0A^A]_^]
UVWAVAWH
A_A^_^]
D$@E3
A#A0M
x AVH
L97v>H
VATAVH
A^A\^
@VATAUAVAWH
0A_A^A]A\^
UVWATAUAVAWH
PA_A^A]A\_^]
t3fff
SUVWATAUAVAWH
T$8E3
L$HL;
D$8M;
l$ H;
A_A^A]A\_^][
D$HE3
f9~8v)
f9Q8w1H
=PRSMu
SUVWATAUAVAWH
HA_A^A]A\_^][
v2L9f
SVWATAUAVAWH
@A_A^A]A\_^[
@USVWAVH
A^_^[]
@WATAUAVAWH
0A_A^A]A\_
UWATAVAWH
d$ E3
A_A^A\_]
VWATAVAWH
0A_A^A\_^
H WATAUAVAWH
 A_A^A]A\_
WATAUAVAWH
 A_A^A]A\_
WATAUAVAWH
A_A^A]A\_
T$ E3
|$ AVH
|$(A^
D$XE3
L$XH3
UVWAVAWH
I9QPv
@A_A^_^]
@UVWH
8H9QPv
WAVAWH
@A_A^_
|$ E3
WAVAWH
A_A^_
C0H9{(v
H9{(w
H9NPu
@VWAVH
@A^_^
ATAVAWH
CPI9G
L9sPv1H
A_A^A\
SVWATAUAVAWH
L;axA
l$XE3
A_A^A]A\_^[
UWATAVAWH
A_A^A\_]
@UVWATAUAVAWH
@:0t!
@A_A^A]A\_^]
gfffffff
WAVAWH
 A_A^_
tkD8Q 
u/H9A
8A t)A
L9@(v?
q[W<N6
WATAUAVAWH
0A_A^A]A\_
q[W<N6
WATAUAVAWH
0A_A^A]A\_
@UATAUH
4(tjH
@A]A\]
@ D8H
C0H9C8tCH
gfffffff
H97t*A
UWAVH
H9A(v
UATAUAVAWH
t$ E3
t$ E3
t$ E3
t$ E3
t$ E3
t$ E3
t$ E3
t$ E3
t$ E3
t$ E3
t$ E3
t$ E3
t$ E3
t$ E3
t$ E3
t$ E3
t$ E3
t$ E3
t$ E3
t$ E3
A_A^A]A\]
UVWATAUAVAWH
M9&v)H
D$@E3
I9>v;H
I9>v6H
A_A^A]A\_^]
H9i t1
H9{Pv
x ATH
H+L$(H
WAVAWH
H+K`D
H+K`D
H+K`D
 A_A^_
uyD9A
usD9A umD9A$ugD9A(uaD9A,u[D9A0uUD9A4uOD9A8uID9A<uCD9A@u=D9ADu7D9AHu1D8ALu+D8AMu%D8ANu
L9APu
x AUAVAWH
 A_A^A]
t$ WH
D$ H;
x ATAVAWH
0A_A^A\
p[W<N6
p[W<N6
H9Q8t L
A@H9A8u
WATAUAVAWH
L$HL9
l$@E3
D$XL9
D$XL9
L$HL9
D$@H9D$p
A_A^A]A\_
D$@H9D$p
H9H(v0A
H9H(v0A
H9H(v0A
@(H9B(
WATAUAVAWH
D$pH;
|$ E3
F@H9~0
A_A^A]A\_
L$hH;
C@I9C8u
\$0H;
I9C8u
x ATAVAWH
p[W<N6
 A_A^A\H
@8<0u
#GUIu
#StringsH+
<1#US
#Blou
9{4ujD
9{Du:D
x ATAVAWH
p[W<N6
 A_A^A\H
@8<0u
#Blou
#GUIu
#StringsH+
9{$uaD
<1#US
9{,uND
9{DuID
SVWATAUAVAWH
@A_A^A]A\_^[
VWATAUAWH
 A_A]A\_^
D$0E3
VWATAVAWH
0A_A^A\_^
WATAUAVAWH
 A_A^A]A\_
H9A(v
u0H!D$(
x AVH
p[W<N6
WAVAWH
 A_A^_
WATAVH
p[W<N6
 A^A\_H
H(H9O0t*A
H9O0v
x AVH
D$0H;
t$ WAVAWH
t%H;w(t_H
w(8_8
 A_A^_
l$ E3
@(I9@(w H
ATAVAWH
A_A^A\
USVWATAUAVAWH
xA_A^A]A\_^[]
@USVWATAUAVAWH
x(M;x(t(A
q(L;q(t(A
D;eot(A
A_A^A]A\_^[]
@USVWATAUAVAWH
x(M;x(t(A
q(L;q(t(A
d$ E3
D;egt(A
A_A^A]A\_^[]
WATAUAVAWH
A_A^A]A\_
L$@H3
x ATAVAWH
0A_A^A\
L$PH3
L$PH3
q0R^G'
q0R^G'
q:_0#
|$ AVH
VWAVH
p:_0#
p:_0#
p:_0#
@A^_^
q:_0#
SVWAVH
8A^_^[
WAVAWH
\$8H;
A_A^_
WAVAWH
0A_A^_
\$ UH
M H1E
 H3E H3E
p:_0#
@SVWH
ntelA
ineID
VWAVH
VWAVH
SVWATAUAVAWH
A_A^A]A\_^[
SVWATAUAVAWH
A_A^A]A\_^[
WATAUAVAWH
L;p(t*A
A_A^A]A\_
ATAVAWH
A_A^A\
\$@L+
UWAVH
u59}0u
@A^_]
taH;\$XuZ
L$pH3
VWAVH
@w@E3
H9|$(u
WAVAWH
@wAE3
D$@H+
H9|$(u
A_A^_
H@H+H8H
H@H+H8I
@SVWATAUAWH
l$ E3
D8o u
HA_A]A\_^[
:NULLuTH
C@H9C8t*A
|$ UATAUAVAWH
@uiL9
8HEX(
G@H9G8
0A_A^A]A\]
D$PH9D$Hu
VWAVH
(D$@f
`A^_^
H9|$ u
UWATAVAWH
D$HH9D$@u*A
C L9c
D$0H;
D$0H;
D$0H;
{@D8c9
D$0H;
A_A^A\_]
ATAVAWH
C@@8w9tKL
L9w@v8H
0A_A^A\
@WAVAWH
D$PE3
0A_A^_
q8^4*
L$XH3
WAVAWH
<,t)A
<,t)A
S(H+S0H
A_A^_
I0H9J(u*A
L$XH3
@UVWAVAWH
<,t*A
<,t*A
S(H+S0H
@A_A^_^]
UWAVH
D$@E3
H!}`H
D$@E3
H!\$ L
@UVWH
H9|$Hu
UWAWH
L$XH3
UVWAVAWH
PA_A^_^]
H9\$Hu
|$ UH
t$ WH
L$XH3
@VWAVH
@A^_^
` UAVAWH
A_A^]
WAVAWH
D$PE3
0A_A^_
@SVWATAUAVAWH
H9y uZH9yPuTH9
@A_A^A]A\_^[
@WAVAWH
0A_A^_
@SUVWAVH
<,ulH
<,u+I
@A^_^][
@WAVAWH
<,t)A
S(H+S0H
PA_A^_
W0H+W
@WAVAWH
<,t)A
S(H+S0H
@A_A^_
x ATAVAWH
0A_A^A\
ATAVAWH
0A_A^A\
x AVH
H+^0H
WATAUAVAWH
"t,A+
L9o0u
L9o0u
 A_A^A]A\_
>NULLu
H+_0H
VWAVH
(D$@f
`A^_^
|$ UAVAWH
p[W<N6
A_A^]H
p AWH
@8nLA
@8nMA
@8nNA
x AVH
@8{LD
@8{MD
@8{ND
@UWAVH
<,t(A
S(H+S0H
O(H+O H
@A^_]
WATAUAVAWH
A_A^A]A\_
W H+P H
@UVWAVAWH
<,t*A
W(H+W0H
@A_A^_^]
UATAUAVAWH
A_A^A]A\]
WAVAWH
0A_A^_
@USVWATAVAWH
f;H(t(A
0A_A^A\_^[]
UVWATAUAVAWH
fA9DL
A_A^A]A\_^]
VWAVH
 A^_^
f;H(t*A
q t3H
@H9y(w
T$0L+
x ATAVAWH
0A_A^A\
WATAUAVAWH
0A_A^A]A\_
WATAUAVAWH
A_A^A]A\_
@SUVWATAUAVAWH
t$HE3
I;(|U3
hA_A^A]A\_^][
SVWATAUAVAWH
|$8E3
D$hL9P
L;;|YE3
D9L$Lv)
D$hH9X
L$pA;
A_A^A]A\_^[
@WAVAWH
0A_A^_
WATAUAVAWH
;\$@r
9D$@v
L$8D;
|$hD;
D$HD9T$@v
D+\$<E
l$XA;
t$HD9L$@vSA
\$8D;
A_A^A]A\_
@SUVWATAUAVAWH
f;P(u
A f;P(
HA_A^A]A\_^][
x ATAVAWH
f;H(t*A
@A_A^A\
UVWATAUAVAWH
A_A^A]A\_^]
UAVAWH
A_A^]
@VWATAVAWH
0A_A^A\_^
SUVWATAUAVAWH
8A_A^A]A\_^][
SUVWATAUAVAWH
H+\$ H+t$(t
HA_A^A]A\_^][
l$ VWATAVAWH
D$P;D$Xu
 A_A^A\_^
l$ VWATAVAWH
D$P;D$Xu
 A_A^A\_^
UVWATAUAVAWH
`A_A^A]A\_^]
UVWATAUAVAWH
`A_A^A]A\_^]
UVWATAUAVAWH
t7x.I
0A_A^A]A\_^]
UVWATAUAVAWH
t9x0I
0A_A^A]A\_^]
A fD;@(u
P fD;B(u
f;H(t*A
y tfH
f;H(t*A
q t3H
VWAVH
A(L9E
0A^_^
USVWATAUAVAWH
xA_A^A]A\_^[]
UVWATAUAVAWH
8A9D8
x,~6I
]PA;z
 L9}Hw
pA_A^A]A\_^]
UVWATAUAVAWH
D$XH9D$Pt
D$XH9D$P
D$`L;
A_A^A]A\_^]
WAVAWH
D$PH9D$HtPH
A_A^_
x UATAUAVAWH
f;H(t(A
A_A^A]A\]
H;Q(t(A
9OXs(A
9GXs(A
WATAUAVAWH
 A_A^A]A\_
x AVH
x AVH
WATAUAVAWH
fD9`8
H f9i8vlH
B fD9x8
D9 tvH
D9 tNI
 A_A^A]A\_
T$0L+
x ATAVAWH
0A_A^A\
x ATAVAWH
0A_A^A\
WATAUAVAWH
0A_A^A]A\_
WATAUAVAWH
A_A^A]A\_
@SUVWATAUAVAWH
t$HE3
I;(|U3
hA_A^A]A\_^][
SVWATAUAVAWH
|$8E3
D$hL9P
L;;|YE3
D9L$Lv)
D$hH9X
L$pA;
A_A^A]A\_^[
@WAVAWH
0A_A^_
WATAUAVAWH
;\$@r
9D$@v
L$8D;
|$hD;
D$HD9T$@v
D+\$<E
l$XA;
t$HD9L$@vSA
\$8D;
A_A^A]A\_
A(f9B(u
gfffffffy;I
D$AM+
L$HH3
YGy5I
D$AL+
L$HH3
D$HE3
f9~8v)
f9G8vT
f;A(t*A
|$ UAVAWH
p[W<N6
A_A^]H
x AVH
@8{LD
@8{MD
@8{ND
WAVAWH
D$PE3
0A_A^_
fD3D$
WAVAWH
|$ E3
A_A^_
UVWATAUAVAWH
t<D9d
 A_A^A]A\_^]
t$ WATAUAVAWH
tJD9t
0A_A^A]A\_
VWAVH
0A^_^
x ATAUAVAW
FafA#
uffD#
u fA9i
|$@A_A^A]A\
wnt)A
wrt$E
x AVH
SUVWH
SUVWAVAWH
H9q(vJH
H9q(w
H9x(vAH
H9x(w
SUVWH
SUVWAVH
TypeDefOrRef
HasConstant
HasCustomAttribute
HasFieldMarshal
HasDeclSecurity
MemberRefParent
HasSemantic
MethodDefOrRef
MemberForwarded
Implementation
CustomAttributeType
ResolutionScope
TypeOrMethodDef
Module
TypeRef
TypeDef
FieldPtr
Field
MethodPtr
Method
ParamPtr
Param
InterfaceImpl
MemberRef
Constant
CustomAttribute
FieldMarshal
DeclSecurity
ClassLayout
FieldLayout
StandAloneSig
EventMap
EventPtr
Event
PropertyMap
PropertyPtr
Property
MethodSemantics
MethodImpl
ModuleRef
TypeSpec
ImplMap
FieldRVA
ENCLog
ENCMap
Assembly
AssemblyProcessor
AssemblyOS
AssemblyRef
AssemblyRefProcessor
AssemblyRefOS
ExportedType
ManifestResource
NestedClass
GenericParam
MethodSpec
GenericParamConstraint
Table0x2D
Table0x2E
Table0x2F
Table0x30
Table0x31
Table0x32
Table0x33
Table0x34
Table0x35
Table0x36
Table0x37
Table0x38
Table0x39
Table0x3A
Table0x3B
Table0x3C
Table0x3D
Table0x3E
Table0x3F
Qkkbal
wn>Jj
RiftTransformRelocations
Module
TypeRef
TypeDef
FieldPtr
Field
MethodPtr
Method
ParamPtr
Param
InterfaceImpl
MemberRef
Constant
CustomAttribute
FieldMarshal
DeclSecurity
ClassLayout
FieldLayout
StandAloneSig
EventMap
EventPtr
Event
PropertyMap
PropertyPtr
Property
MethodSemantics
MethodImpl
ModuleRef
TypeSpec
ImplMap
FieldRVA
ENCLog
ENCMap
Assembly
AssemblyProcessor
AssemblyOS
AssemblyRef
AssemblyRefProcessor
AssemblyRefOS
ExportedType
ManifestResource
NestedClass
GenericParam
MethodSpec
GenericParamConstraint
Table0x2D
Table0x2E
Table0x2F
Table0x30
Table0x31
Table0x32
Table0x33
Table0x34
Table0x35
Table0x36
Table0x37
Table0x38
Table0x39
Table0x3A
Table0x3B
Table0x3C
Table0x3D
Table0x3E
Table0x3F
input
output
ApplyPreProcessSource_I386
code( CopyInt ): input[ 0 ];flagsInt( CopyInt ): input[ 1 ];source( PassBuffer ): input[ 2 ];bitReader( PassBitReader ): input[ 3 ];targetBuffer( PassBuffer ): input[ 4 ];reverseRequested( CopyInt ): input[ 5 ];sourceSize( BufferSize ): source[ 0 ];targetSize( BufferSize ): targetBuffer[ 0 ];preProcessBuffer( BitReadBuffer ): bitReader[ 0 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];applyPreProcessSourceName( Concat ): "ApplyPreProcessSource_", codeMnemonic[ 0 ];applyPreProcessSource( ApplyPreProcessSource_RAW / applyPreProcessSourceName[ 0 ] ): code[ 0 ], flagsInt[ 0 ], source[ 0 ], preProcessBuffer[ 1 ], targetSize[ 0 ];debugWritePreProcessSource( DebugWriteFile ): "preProcessSource.apply.image", applyPreProcessSource[ 0 ];compressionRiftTable5( PassRiftTable ): applyPreProcessSource[ 1 ];debugWriteCompression5( DebugWriteFileRiftTable ): "compression5.apply.rift", compressionRiftTable5[ 0 ];compressionRiftTable6( CreateEmptyRiftTable ):;compressionRiftTable7( AddRiftEntry ): compressionRiftTable6[ 0 ], sourceSize[ 0 ], 0;debugWriteCompression7( DebugWriteFileRiftTable ): "compression7.apply.rift", compressionRiftTable7[ 0 ];compressionRiftTable8( MultiplyRiftTables ): compressionRiftTable7[ 0 ], compressionRiftTable5[ 0 ];debugWriteCompression8( DebugWriteFileRiftTable ): "compression8.apply.rift", compressionRiftTable8[ 0 ]; compressionRiftTable9( ReduceRiftTable ): compressionRiftTable8[ 0 ];debugWriteCompression9( DebugWriteFileRiftTable ): "compression9.apply.rift", compressionRiftTable9[ 0 ];patchBuffer( BitReadBuffer ): preProcessBuffer[ 0 ];target1( ApplyPseudoLzxPatchTargetBufferProvided ): applyPreProcessSource[ 0 ], patchBuffer[ 1 ], targetBuffer[ 0 ], compressionRiftTable9[ 0 ], reverseRequested[ 0 ];debugWritePreProcessTarget( DebugWriteFile ): "preProcessTarget.create.image", target1[ 0 ];target( ApplyPostProcessTarget ): flagsInt[ 0 ], target1[ 0 ];output: patchBuffer[ 0 ], target[ 0 ], target1[ 1 ];
flagsInt( InputSharedInt ): input[ 0 ];output( RiftTransform ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];
UnbindPortableExecutable
AddRiftEntry
CreateEmptyCli4Metadata
PassBitWriter
DebugWriteFileCompositeFormat
BitWritePortableExecutableInfoCli4
source( PassBuffer ): input[ 0 ];patch( PassBuffer ): input[ 1 ];split( SplitPatchHeader ): patch[ 0 ];targetSize( CopyInt ): split[ 4 ];targetBuffer( CreateBuffer ): split[ 4 ];reverse( ApplyReversalData ): source[ 0 ], split[ 0 ], targetSize[ 0 ];hash( CalculateHash ): split[ 6 ], reverse[ 0 ];checkHashIdentity( CheckBuffersIdentity ): hash[ 0 ], split[ 7 ], 0x040302;output: reverse[ 0 ];
Concat
BitReadPortableExecutableInfoCli4
GetCheckSum
CreateEmptyCliMetadata
BitWriteBuffer
PostProcessI386E8
ApplyPreProcessSource_AMD64
CopyCliMap
CreateEmptyPortableExecutableInfo
PassRiftTable
GetPortableExecutableInfoCli4
InputSharedIniReader
BitWriteRiftTable
BitReaderClose
InputExclusiveInt
InputSharedBitReader
InputSharedRiftTable
RiftTransform_CLI4_AMD64
wrap( AsciiToUnicode ):;
code( CopyInt ): input[ 0 ];targetCode( CopyInt ): input[ 1 ];flagsInt( CopyInt ): input[ 2 ];flags( GetBits ): flagsInt[ 0 ];source( PassBuffer ): input[ 3 ];target( CopyBuffer ): input[ 4 ];sourceIni( PassIniReader ): input[ 5 ];targetIni( PassIniReader ): input[ 6 ];patchIni( PassIniReader ): input[ 7 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];sourceSize( BufferSize ): source[ 0 ];sourcePe0( PortableExecutableFromBuffer ): source[ 0 ], 1;checkSourcePe0( CheckIntsIdentity ): sourcePe0[ 1 ], 1, 0x041F02;sourcePe( PassPe / flags[ 13 ] ? "UnbindPortableExecutable" : "PassPe" ): sourcePe0[ 0 ];sourceOffsetToRva( ExtractImageOffsetToRva ): sourcePe[ 0 ];debugWriteSourceOffsetToRva( DebugWriteFileRiftTable ): "sourceOffsetToRva.create.rift", sourceOffsetToRva[ 0 ];sourceCliMetadata( ExtractCliMetadata ): sourcePe[ 0 ];sourceImageBase( GetImageBase ): sourcePe[ 0 ];iniRiftTable( RiftTableFromIniSection ): patchIni[ 0 ], "OldRvaToNewRvaMap", 1;debugWriteIniRiftTable( DebugWriteFileRiftTable ): "ini.create.rift", iniRiftTable[ 0 ];compareCodes( CompareInts ): code[ 0 ], targetCode[ 0 ];targetPeContainer( TargetRealPeContainer / compareCodes[ 0 ] ? "TargetStubPeContainer" : "TargetRealPeContainer" ): code[ 0 ], flagsInt[ 0 ], source[ 0 ], target[ 0 ], sourceIni[ 0 ], targetIni[ 0 ], patchIni[ 0 ];targetInfo( PassPortableExecutableInfo ): targetPeContainer[ 0 ];targetInfoSplit( SplitPortableExecutableInfo ): targetInfo[ 0 ];targetImageBase( PassInt ): targetInfoSplit[ 0 ];targetGlobalPointer( PassInt ): targetInfoSplit[ 1 ];targetTimeStamp( PassInt ): targetInfoSplit[ 2 ];targetRvaToOffset( PassRiftTable ): targetInfoSplit[ 3 ];debugWriteTargetRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "targetRvaToOffset.create.rift", targetRvaToOffset[ 0 ];targetCliMetadata( PassCliMetadata ): targetInfoSplit[ 4 ];pesRiftTable( PassRiftTable ): targetPeContainer[ 1 ];debugWritePesRiftTable( DebugWriteFileRiftTable ): "pes.create.rift", pesRiftTable[ 0 ];basicBlockRiftTable( PassRiftTable ): targetPeContainer[ 2 ];debugWriteBasicBlockRiftTable( DebugWriteFileRiftTable ): "basicBlock.create.rift", basicBlockRiftTable[ 0 ];psymsRiftTable( PassRiftTable ): targetPeContainer[ 3 ];debugWritePsymsRiftTable( DebugWriteFileRiftTable ): "psyms.create.rift", psymsRiftTable[ 0 ];cliMap( PassCliMap ): targetPeContainer[ 4 ];cliMapRiftTable( PassRiftTable ): targetPeContainer[ 5 ];debugWriteCliMapRiftTable( DebugWriteFileRiftTable ): "cliMap.create.rift", cliMapRiftTable[ 0 ];riftTable0( SumRiftTables ): pesRiftTable[ 0 ], cliMapRiftTable[ 0 ], 0;riftTable1( SumRiftTables ): riftTable0[ 0 ], basicBlockRiftTable[ 0 ], 0;riftTable2( SumRiftTables ): riftTable1[ 0 ], psymsRiftTable[ 0 ], 0;unreducedRiftTable( SumRiftTables ): iniRiftTable[ 0 ], riftTable2[ 0 ], 0;debugWriteUnreducedRiftTable( DebugWriteFileRiftTable ): "unreduced.create.rift", unreducedRiftTable[ 0 ];reducedRiftTable( ReduceRiftTable ): unreducedRiftTable[ 0 ];debugWriteReducedRiftTable( DebugWriteFileRiftTable ): "reduced.create.rift", reducedRiftTable[ 0 ];targetSize( BufferSize ): target[ 0 ];preWriter( BitWriterOpen ):;writeTargetInfo( BitWritePortableExecutableInfo ): preWriter[ 0 ], targetInfo[ 0 ];hintBuffer0( CreateHintBuffer ): sourcePe[ 0 ];usageBuffer0( CreateRiftUsageBuffer ): reducedRiftTable[ 0 ];emptyRelative( CreateEmptyRiftTable ):;riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceRiftTransformed( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], hintBuffer0[ 0 ], reducedRiftTable[ 0 ], usageBuffer0[ 0 ], cliMap[ 0 ], targetInfo[ 0 ], 1, emptyRelative[ 0 ];hintBuffer( PassBuffer ): sourceRiftTransformed[ 1 ];usageBuffer( RiftTableMap ): reducedRiftTable[ 0 ], 0, sourceRiftTransformed[ 2 ];debugWriteHintBuffer( DebugWriteFile ): "hint.map", hintBuffer[ 0 ];debugWriteUsageBuffer( DebugWriteFile ): "usage.map", usageBuffer[ 1 ];usedRiftTable( RemoveUnusedRiftEntries ): reducedRiftTable[ 0 ], usageBuffer[ 1 ];debugWriteUsedRiftTable( DebugWriteFileRiftTable ): "used.create.rift", usedRiftTable[ 0 ];setImageBase( SetImageBase ): sourceRiftTransformed[ 0 ], targetImageBase[ 0 ];setGlobalPointer( SetGlobalPointer ): setImageBase[ 0 ], targetGlobalPointer[ 0 ];setTimeStamp( SetTimeStamp ): setGlobalPointer[ 0 ], targetTimeStamp[ 0 ];setCheckSum( SetCheckSum ): setTimeStamp[ 0 ], 0; writeRiftTable( BitWriteRiftTable ): writeTargetInfo[ 0 ], usedRiftTable[ 0 ];writeCliMap( BitWriteCliMap ): writeRiftTable[ 0 ], cliMap[ 0 ];preBuffer( BitWriterClose ): writeCliMap[ 0 ];transformedSource( PortableExecutableToBuffer ): setCheckSum[ 0 ];compressionRiftTable0( MultiplyRiftTables ): sourceOffsetToRva[ 0 ], usedRiftTable[ 0 ];debugWriteCompression0( DebugWriteFileRiftTable ): "compression0.create.rift", compressionRiftTable0[ 0 ];compressionRiftTable1( MultiplyRiftTables ): compressionRiftTable0[ 0 ], targetRvaToOffset[ 0 ];debugWriteCompression1( DebugWriteFileRiftTable ): "compression1.create.rift", compressionRiftTable1[ 0 ];compressionRiftTable2( ReverseRiftTable ): compressionRiftTable1[ 0 ], 0; debugWriteCompression2( DebugWriteFileRiftTable ): "compression2.create.rift", compressionRiftTable2[ 0 ];cliMapCompressionRiftTable( CompressionRiftTableFromCliMap ): sourceCliMetadata[ 0 ], targetCliMetadata[ 0 ], cliMap[ 0 ], transformedSource[ 0 ];debugWriteCliMapCompressionRiftTable( DebugWriteFileRiftTable ): "cliMapCompression.create.rift", cliMapCompressionRiftTable[ 0 ];compressionRiftTable3( SumRiftTables ): compressionRiftTable2[ 0 ], cliMapCompressionRiftTable[ 0 ], 1;debugWriteCompression3( DebugWriteFileRiftTable ): "compression3.create.rift", compressionRiftTable3[ 0 ];output: transformedSource[ 0 ], preBuffer[ 0 ], compressionRiftTable3[ 0 ];
CreateEmptyRiftTable
GetGlobalPointer
TToAscii
RiftTransform_CLI4_ARM
SetTimeStamp
OutputRiftTable
ApplyPatchTargetBufferProvided
wrap( CreatePreProcessSourcePeCli4 ):;
CreateBuffer
CompressionRiftTableFromCli4Map
ResetCompositeFormatStatistics
CreatePreProcessSource_RAW
CopyRiftTable
ClearRelocations
MarkNonExe
DestroyEmptyBufferList
BitReadRiftTable
ExtractCli4Metadata
BitWritePortableExecutableInfo
InputSharedCliMetadata
code( CopyInt ): input[ 0 ];flagsInt( CopyInt ): input[ 1 ];sourcePe( PortableExecutableFromBuffer ): input[ 2 ], 1;targetPe( PortableExecutableFromBuffer ): input[ 3 ], 1;patchIni( InputSharedIniReader ): input[ 6 ];targetInfo( GetPortableExecutableInfo ): targetPe[ 0 ];cliMap( CliMapFromPes ): sourcePe[ 0 ], targetPe[ 0 ];pesRiftTable( RiftTableFromPes ): flagsInt[ 0 ], sourcePe[ 0 ], targetPe[ 0 ], cliMap[ 0 ];psymsRiftTable( RiftTableFromPsyms ): code[ 0 ], flagsInt[ 0 ], sourcePe[ 0 ], targetPe[ 0 ], input[ 4 ], input[ 5 ];sourceRvaToImageOffset( ExtractRvaToImageOffset ): sourcePe[ 0 ];targetRvaToImageOffset( ExtractRvaToImageOffset ): targetPe[ 0 ];debugWriteSourceRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "sourceRvaToOffset.create.rift", sourceRvaToImageOffset[ 0 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceHintBuffer( CreateHintBuffer ): sourcePe[ 0 ];targetHintBuffer( CreateHintBuffer ): targetPe[ 0 ];emptyCliMap( CreateEmptyCliMap ):;emptyRiftTable( CreateEmptyRiftTable ):;emptyPeInfo( CreateEmptyPortableExecutableInfo ):;sourceRelative( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], sourceHintBuffer[ 0 ], emptyRiftTable[ 0 ], "", emptyCliMap[ 0 ], emptyPeInfo[ 0 ], 0, emptyRiftTable[ 0 ];targetRelative( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], targetPe[ 0 ], targetHintBuffer[ 0 ], emptyRiftTable[ 0 ], "", emptyCliMap[ 0 ], emptyPeInfo[ 0 ], 0, emptyRiftTable[ 0 ];sourceZero( PortableExecutableToBuffer ): sourceRelative[ 0 ];targetZero( PortableExecutableToBuffer ): targetRelative[ 0 ];debugWriteSourceZero( DebugWriteFile ): "sourceZero.create.image", sourceZero[ 0 ];debugWriteTargetZero( DebugWriteFile ): "targetZero.create.image", targetZero[ 0 ];debugWriteSourceRelative( DebugWriteFileRiftTable ): "sourceRelative.create.rift", sourceRelative[ 3 ];debugWriteTargetRelative( DebugWriteFileRiftTable ): "targetRelative.create.rift", targetRelative[ 3 ];basicBlockRiftTable( CreateBasicBlockRiftTable ): sourceZero[ 0 ], targetZero[ 0 ], sourceRelative[ 3 ], targetRelative[ 3 ], sourceRvaToImageOffset[ 0 ], targetRvaToImageOffset[ 0 ];output: targetInfo[ 0 ], pesRiftTable[ 0 ], basicBlockRiftTable[ 0 ], psymsRiftTable[ 0 ], cliMap[ 0 ], cliMap[ 1 ];
PreProcessI386E8
code( InputSharedInt ): input[ 0 ];flags( GetBits ): input[ 1 ];options( InputSharedIniReader ): input[ 2 ];pe( PortableExecutableFromBuffer ): input[ 3 ], 1;clearBinding( UnbindPortableExecutable ): pe[ 0 ];clearRelocations( PassPe / flags[ 5 ] ? "PassPe" : "ClearRelocations" ): clearBinding[ 0 ];clearImageBase( SetImageBase ): clearRelocations[ 0 ], 0;clearTimeStamp( SetTimeStamp ): clearImageBase[ 0 ], 0; clearCheckSum( SetCheckSum ): clearTimeStamp[ 0 ], 0;output( PortableExecutableToBuffer ): clearCheckSum[ 0 ];
CopyBuffer
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExe" : "RiftTransform" ): input[ 1 ] , input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];debugWriteTransformed0( DebugWriteFilePe ): "riftTransformed0.image", riftTransformed0[ 0 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];debugWriteTransformed1( DebugWriteFilePe ): "riftTransformed1.image", riftTransformed1[ 0 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];debugWriteTransformed2( DebugWriteFilePe ): "riftTransformed2.image", riftTransformed2[ 0 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];debugWriteTransformed3( DebugWriteFilePe ): "riftTransformed3.image", riftTransformed3[ 0 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocationsI386" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];debugWriteTransformed4( DebugWriteFilePe ): "riftTransformed4.image", riftTransformed4[ 0 ];riftTransformed6( RiftTransform / flags[ 14 ] ? "RiftTransformCliDisasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];debugWriteTransformed6( DebugWriteFilePe ): "riftTransformed6.image", riftTransformed6[ 0 ];riftTransformed7( RiftTransform / flags[ 15 ] ? "RiftTransformCliMetadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];debugWriteTransformed7( DebugWriteFilePe ): "riftTransformed7.image", riftTransformed7[ 0 ];smashed( PassPe / flags[ 6 ] ?  "SmashLockPrefixesI386" : "PassPe" ): riftTransformed7[ 0 ];debugWriteSmashed( DebugWriteFilePe ): "smashed.image", smashed[ 0 ];riftTransformed8( RiftTransform / flags[ 7 ] ? "RiftTransformRelativeJmpsI386" : "RiftTransform" ): smashed[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];debugWriteTransformed8( DebugWriteFilePe ): "riftTransformed8.image", riftTransformed8[ 0 ];riftTransformed9( RiftTransform / flags[ 8 ] ? "RiftTransformRelativeCallsI386" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];debugWriteTransformed9( DebugWriteFilePe ): "riftTransformed9.image", riftTransformed9[ 0 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
CopyBufferList
sourceSize( BufferSize ): input[ 0 ];targetSize( BufferSize ): input[ 1 ];fullBuffer( Concat ): input[ 0 ], input[ 1 ];baseRiftTable( CreateCompressionRiftTable ): fullBuffer[ 0 ], sourceSize[ 0 ], targetSize[ 0 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ];riftTable( SumRiftTables ): baseRiftTable[ 0 ], input[ 6 ], 0;defaultFormat( CreateDefaultCompositeFormat ):;defaultBitWriter( BitWriterOpen ):;writeBaseRiftTableDefault( BitWriteRiftTable ): defaultBitWriter[ 0 ], baseRiftTable[ 0 ];writeDefaultFormat( BitWriteCompositeFormat ): writeBaseRiftTableDefault[ 0 ], defaultFormat[ 0 ];defaultFormatWithStatistics( ResetCompositeFormatStatistics ): defaultFormat[ 0 ], 1;defaultCompress( PseudoLzxCompress ): defaultFormatWithStatistics[ 0 ], fullBuffer[ 0 ], riftTable[ 0 ], sourceSize[ 0 ], targetSize[ 0 ], writeDefaultFormat[ 0 ];defaultBuffer( BitWriterClose ): defaultCompress[ 2 ];optimalFormat( CreateOptimalCompositeFormat ): defaultCompress[ 0 ];optimalBitWriter( BitWriterOpen ):;writeBaseRiftTableOptimal( BitWriteRiftTable ): optimalBitWriter[ 0 ], baseRiftTable[ 0 ];writeOptimalFormat( BitWriteCompositeFormat ): writeBaseRiftTableOptimal[ 0 ], optimalFormat[ 1 ];defaultBitReader( BitReaderOpen ): defaultBuffer[ 0 ];copyBaseRiftTable( BitReadRiftTable ): defaultBitReader[ 0 ];copyDefaultFormat( BitReadCompositeFormat ): copyBaseRiftTable[ 0 ];optimalTranslate( TranslateCompression ): copyDefaultFormat[ 0 ], writeOptimalFormat[ 0 ], copyDefaultFormat[ 1 ], optimalFormat[ 1 ], sourceSize[ 0 ], defaultCompress[ 1 ];closeDefaultBitReader( BitReaderClose ): optimalTranslate[ 0 ], 1;optimalBuffer( BitWriterClose ): optimalTranslate[ 1 ];output( MinBuffer ): defaultBuffer[ 0 ], optimalBuffer[ 0 ];
TargetStubPeContainer
RiftTransformPdataIa64
DebugWriteFileRiftTable
MultiplyRiftTables
GetImageBase
CompareInts
CreateHintBuffer
NormalizeCodeSource_CLI4_I386
OutputBufferList
flags( GetBits ): input[ 0 ];output( PassBuffer / flags[ 0 ] ? "PostProcessI386E8" : "PassBuffer" ): input[ 1 ];
RiftTransform_AMD64
CreateRiftUsageBuffer
RiftTransformCliDisasm
OutputPortableExecutableInfo
OutputBuffer
CopyCompositeFormat
code( InputSharedInt ): input[ 0 ];flags( InputSharedInt ): input[ 1 ];sourceBuffer( InputExclusiveBuffer ): input[ 2 ];targetBuffer( InputExclusiveBuffer ): input[ 3 ];sourceIni( InputSharedIniReader ): input[ 4 ];targetIni( InputSharedIniReader ): input[ 5 ];patchIni( InputSharedIniReader ): input[ 6 ];targetInfo( CreateEmptyPortableExecutableInfoCli4 ):;cliMap( CreateEmptyCli4Map ):;cliMapRiftTable( CreateEmptyRiftTable ):;pesRiftTable( CreateEmptyRiftTable ):;basicBlockRiftTable( CreateEmptyRiftTable ):;psymsRiftTable( CreateEmptyRiftTable ):;output: targetInfo[ 0 ], pesRiftTable[ 0 ], basicBlockRiftTable[ 0 ], psymsRiftTable[ 0 ], cliMap[ 0 ], cliMapRiftTable[ 0 ];
CreateEmptyPortableExecutableInfoCli4
RiftTableFromExports
GetTimeStamp
InputExclusiveBuffer
PseudoLzxCompress
RiftTableMap
PassInt
ReverseRiftTable
RiftTransform_CLI4_I386
BitReaderOpen
SetGlobalPointer
SumRiftTables
NormalizeCodeSource_RAW
CreatePayload
RiftTransform_IA64
InputSharedBuffer
MinBuffer
RiftTransformPdataAmd64
AsciiToUnicode
DebugWriteFilePe
wrap( ApplyPreProcessSourcePe ):;
CopyCliMetadata
ApplyPayload
InputSharedPe
SplitPatchHeader
ApplyPreProcessSource_CLI4_I386
GetPortableExecutableInfo
InputExclusiveCompositeFormat
RiftTableFromPdatas
fileName( InputSharedBuffer ): input[ 0 ];compositeFormat( InputSharedCompositeFormat ): input[ 1 ];
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExe" : "RiftTransform" ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocations" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];riftTransformed6( RiftTransform / flags[ 14 ] ? "RiftTransformCliDisasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];riftTransformed7( RiftTransform / flags[ 15 ] ? "RiftTransformCliMetadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];riftTransformed8( RiftTransform / flags[ 9 ] ? "RiftTransformDisasmAmd64" : "RiftTransform" ): riftTransformed7[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];riftTransformed9( RiftTransform / flags[ 10 ] ? "RiftTransformPdataAmd64" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
Decompress
CreateEmptyBufferList
IntToFixedBuffer
NormalizeCodeSource_I386
PassPe
TranslateCompression
code( InputSharedInt ): input[ 0 ];flags( InputSharedInt ): input[ 1 ];sourceBuffer( InputExclusiveBuffer ): input[ 2 ];targetBuffer( InputExclusiveBuffer ): input[ 3 ];sourceIni( InputSharedIniReader ): input[ 4 ];targetIni( InputSharedIniReader ): input[ 5 ];patchIni( InputSharedIniReader ): input[ 6 ];targetInfo( CreateEmptyPortableExecutableInfo ):;cliMap( CreateEmptyCliMap ):;cliMapRiftTable( CreateEmptyRiftTable ):;pesRiftTable( CreateEmptyRiftTable ):;basicBlockRiftTable( CreateEmptyRiftTable ):;psymsRiftTable( CreateEmptyRiftTable ):;output: targetInfo[ 0 ], pesRiftTable[ 0 ], basicBlockRiftTable[ 0 ], psymsRiftTable[ 0 ], cliMap[ 0 ], cliMapRiftTable[ 0 ];
ApplyPatchGetReverse
emptyRiftTable( CreateEmptyRiftTable ):;riftTable0( RiftTableFromHeaders ): input[ 0 ], emptyRiftTable[ 0 ], input[ 1 ], input[ 2 ], input[ 3 ];debugWriteRiftTable0( DebugWriteFileRiftTable ): "pes0.create.rift", riftTable0[ 0 ];riftTable1( RiftTableFromImports ): input[ 0 ], riftTable0[ 0 ], input[ 1 ], input[ 2 ], input[ 3 ];debugWriteRiftTable1( DebugWriteFileRiftTable ): "pes1.create.rift", riftTable1[ 0 ];riftTable2( RiftTableFromExports ): input[ 0 ], riftTable1[ 0 ], input[ 1 ], input[ 2 ], input[ 3 ];debugWriteRiftTable2( DebugWriteFileRiftTable ): "pes2.create.rift", riftTable2[ 0 ];riftTable3( RiftTableFromResources ): input[ 0 ], riftTable2[ 0 ], input[ 1 ], input[ 2 ], input[ 3 ];debugWriteRiftTable3( DebugWriteFileRiftTable ): "pes3.create.rift", riftTable3[ 0 ];riftTable4( RiftTableFromPdatas ): input[ 0 ], riftTable3[ 0 ], input[ 1 ], input[ 2 ], input[ 3 ];debugWriteRiftTable4( DebugWriteFileRiftTable ): "pes4.create.rift", riftTable4[ 0 ];output: riftTable4[ 0 ];
PassCompositeFormat
RiftTransformDisasmARM64
PassPortableExecutableInfo
CaptureReversalData
CreatePreProcessSource_CLI4_I386
InputExclusiveRiftTable
PassIniReader
CreateCompressionRiftTable
OutputBitWriter
BitReadCliMetadata
CreatePreProcessSource_AMD64
UnicodeToT
CreatePreProcessSourcePeCli4
CalculateHash
RiftTransformPdataARM64
NormalizeCodeSource_CLI4_ARM
RiftTransform
RiftTransformDisasmIa64
RiftTransformResources
CreatePreProcessSourcePe
TargetRealPeContainerCli4
RiftTransform_CLI4_ARM64
Unconcat
CliMapFromPes
CreatePreProcessTarget
InputExclusiveCliMap
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExeCli4" : "RiftTransform" ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocations" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];riftTransformed6( RiftTransform / flags[ 21 ] ? "RiftTransformCli4Disasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];riftTransformed7( RiftTransform / flags[ 22 ] ? "RiftTransformCli4Metadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];riftTransformed8( RiftTransform / flags[ 19 ] ? "RiftTransformDisasmARM" : "RiftTransform" ): riftTransformed7[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];riftTransformed9( RiftTransform / flags[ 20 ] ? "RiftTransformPdataARM" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
fileName( InputSharedBuffer ): input[ 0 ];riftTable( InputSharedRiftTable ): input[ 1 ];
GetBits
MarkNonExeCli4
BufferListPushFront
NormalizeSource
PortableExecutableInfoFromBuffer
RiftTableFromHeaders
ExtractImageOffsetToRva
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExe" : "RiftTransform" ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocations" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];riftTransformed6( RiftTransform / flags[ 14 ] ? "RiftTransformCliDisasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];riftTransformed7( RiftTransform / flags[ 15 ] ? "RiftTransformCliMetadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];riftTransformed8( RiftTransform / flags[ 11 ] ? "RiftTransformDisasmIa64" : "RiftTransform" ): riftTransformed7[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];riftTransformed9( RiftTransform / flags[ 12 ] ? "RiftTransformPdataIa64" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
InputExclusiveBitReader
wrap( NormalizeCodeSource_I386 ):;
InputSharedBufferList
TToUnicode
CreatePreProcessSource_CLI4_ARM64
OutputPe
SplitPortableExecutableInfo
CopyPe
IntFromFixedBuffer
OutputBitReader
BitWriteInt
PassCliMetadata
BitReadPortableExecutableInfo
RiftTransformCli4Metadata
wrap( UnicodeToAscii ):;
RiftTransform_I386
source( PassBuffer ): input[ 0 ];bitReader( BitReaderOpen ): input[ 1 ];target0( PassBuffer ): input[ 2 ];reverseRequested( CopyInt ): input[ 4 ];sourceSize( BufferSize ): source[ 0 ];targetSize( BufferSize ): target0[ 0 ];baseRiftTable( BitReadRiftTable ): bitReader[ 0 ];riftTable( SumRiftTables ): baseRiftTable[ 1 ], input[ 3 ], 0;format( BitReadCompositeFormat ): baseRiftTable[ 0 ];debugWriteCompositeFormat( DebugWriteFileCompositeFormat ): "compositeFormat.apply.txt", format[ 1 ];bufferList0( CreateEmptyBufferList ):;bufferList1( BufferListPushBack ): bufferList0[ 0 ], source[ 0 ];bufferList2( BufferListPushBack ): bufferList1[ 0 ], target0[ 0 ];decompress( Decompress ): format[ 0 ], format[ 1 ], bufferList2[ 0 ], riftTable[ 0 ], sourceSize[ 0 ], targetSize[ 0 ], -1, reverseRequested[ 0 ];target1( BufferListPopBack ): decompress[ 1 ];closeBitReader( BitReaderClose ): decompress[ 0 ], 1;output: target1[ 1 ], decompress[ 2 ];
CreatePatch
CreateReversePatch
version( CopyInt ): input[ 0 ];code( CopyInt ): input[ 1 ];targetCode( CopyInt ): input[ 2 ];flagsInt( CopyInt ): input[ 3 ];source( PassBuffer ): input[ 4 ];target( PassBuffer ): input[ 5 ];sourceIni( PassIniReader ): input[ 6 ];targetIni( PassIniReader ): input[ 7 ];patchIni( PassIniReader ): input[ 8 ];fileTime( CopyInt ): input[ 9 ];hashAlgId( CopyInt ): input[ 10 ];asciiPatchSignature( TToAscii ): "PA30";fileTimeBuffer( IntToFixedBuffer ): fileTime[ 0 ];hash( CalculateHash ): hashAlgId[ 0 ], target[ 0 ];header( Concat ): asciiPatchSignature[ 0 ], fileTimeBuffer[ 0 ];bitWriter( BitWriterOpen ):;writeVersion( BitWriteInt ): bitWriter[ 0 ], version[ 0 ];writeCode( BitWriteInt ): writeVersion[ 0 ], code[ 0 ];targetSize( BufferSize ): target[ 0 ];writeFlagsInt( BitWriteInt ): writeCode[ 0 ], flagsInt[ 0 ];writeTargetSize( BitWriteInt ): writeFlagsInt[ 0 ], targetSize[ 0 ]; writeHashAlgId( BitWriteInt ): writeTargetSize[ 0 ], hashAlgId[ 0 ];writeHash( BitWriteBuffer ): writeHashAlgId[ 0 ], hash[ 0 ];create( CreatePayload ): code[ 0 ], targetCode[ 0 ], flagsInt[ 0 ], writeHash[ 0 ], source[ 0 ], target[ 0 ], sourceIni[ 0 ], targetIni[ 0 ], patchIni[ 0 ];created( BitWriterClose ): create[ 0 ];patch( Concat ): header[ 0 ], created[ 0 ];apply( ApplyPatch ): source[ 0 ], patch[ 0 ];testApply( CheckBuffersIdentity ): target[ 0 ], apply[ 0 ], 0x041B01;output: patch[ 0 ];
BufferListPopBack
BufferListPopFront
code( InputSharedInt ): input[ 0 ];flagsInt( InputSharedInt ): input[ 1 ];source( PassBuffer ): input[ 2 ];preProcessBuffer( InputSharedBuffer ): input[ 3 ];targetSize( InputSharedInt ): input[ 4 ];riftTable( CreateEmptyRiftTable ):;compressionRiftTable( CreateEmptyRiftTable ):;output: source[ 0 ], compressionRiftTable[ 0 ];
InputExclusiveCliMetadata
source( PassBuffer ): input[ 0 ];sourceCopy( CopyBuffer ): input[ 0 ];patch( PassBuffer ): input[ 1 ];sourceFileTime( CopyInt ): input[ 2 ];hashAlgId( CopyInt ): input[ 3 ];code( CopyInt ): input[ 4 ];split( SplitPatchHeader ): patch[ 0 ];targetBuffer( CreateBuffer ): split[ 4 ];apply( ApplyPayload ): split[ 2 ], split[ 3 ], source[ 0 ], split[ 0 ], targetBuffer[ 0 ], 1;bitReaderClose( BitReaderClose ): apply[ 0 ], 1;hash( CalculateHash ): split[ 6 ], apply[ 1 ];checkHashIdentity( CheckBuffersIdentity ): hash[ 0 ], split[ 7 ], 0x040302;reversePatch( CreateReversePatch ): sourceCopy[ 0 ], apply[ 1 ], apply[ 2 ], sourceFileTime[ 0 ], hashAlgId[ 0 ], code[ 0 ], split[ 2 ], split[ 3 ];output: apply[ 1 ], reversePatch [ 0 ];
InputExclusiveBufferList
InputExclusivePe
ApplyPreProcessSource_CLI4_ARM64
CalculateNormalizedSourceHash
RiftTransformRelocationsI386
ApplyPreProcessSource_CLI4_AMD64
RiftTransformDisasmARM
InputSharedCliMap
NormalizeCodeSource_CLI4_AMD64
wrap( CopyBuffer ):;
RiftTransformTemplate
code( InputSharedInt ): input[ 0 ];flags( GetBits ): input[ 1 ];options( InputSharedIniReader ): input[ 2 ];output( PassBuffer ): input[ 3 ];
ReduceRiftTable
RemoveUnusedRiftEntries
CopyInt
InputSharedBitWriter
ApplyPreProcessSource_RAW
InputSharedPortableExecutableInfo
BitWriterClose
BitReadCompositeFormat
OutputCompositeFormat
CreateCodeFlagsPatch
PseudoLzxCompressStatisticsOnly
RiftTransformExports
pe( PassPe ): input[ 0 ];hintMap( PassBuffer ): input[ 1 ];riftTable( InputSharedRiftTable ): input[ 2 ];riftUsage( PassBuffer ): input[ 3 ];cliMap( InputSharedCliMap ): input[ 4 ];targetInfo( InputSharedPortableExecutableInfo ): input[ 5 ];transformFlag( InputSharedInt ): input[ 6 ];relative( PassRiftTable ): input[ 7 ];output: pe[ 0 ], hintMap[ 0 ], riftUsage[ 0 ], relative[ 0 ];
PortableExecutableFromBuffer
RiftTransformPdataARM
CreatePseudoLzxPatch
fileName( InputSharedBuffer ): input[ 0 ];buffer( InputSharedBuffer ): input[ 1 ];
Cli4MapFromPes
fileTypeSet( CopyInt ): input[ 0 ];flags( CopyInt ): input[ 1 ];options( IniReaderFromBuffer ): input[ 2 ];source( PassBuffer ): input[ 3 ];code( DetermineFileType ): fileTypeSet[ 0 ], source[ 0 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];normalizeCodeSourceName( Concat ): "NormalizeCodeSource_", codeMnemonic[ 0 ];normalizeCodeSource( NormalizeCodeSource_RAW / normalizeCodeSourceName[ 0 ] ): code[ 0 ], flags[ 0 ], options[ 0 ], source[ 0 ];output: normalizeCodeSource[ 0 ];
CreatePreProcessSource_CLI4_AMD64
wrap( ApplyPreProcessSourcePeCli4 ):;
DetermineFileType
code( CopyInt ): input[ 0 ];flagsInt( CopyInt ): input[ 1 ];sourcePe( PortableExecutableFromBuffer ): input[ 2 ], 1;targetPe( PortableExecutableFromBuffer ): input[ 3 ], 1;patchIni( InputSharedIniReader ): input[ 6 ];targetInfo( GetPortableExecutableInfoCli4 ): targetPe[ 0 ];cliMap( Cli4MapFromPes ): sourcePe[ 0 ], targetPe[ 0 ];pesRiftTable( RiftTableFromPes ): flagsInt[ 0 ], sourcePe[ 0 ], targetPe[ 0 ], cliMap[ 0 ];psymsRiftTable( RiftTableFromPsyms ): code[ 0 ], flagsInt[ 0 ], sourcePe[ 0 ], targetPe[ 0 ], input[ 4 ], input[ 5 ];sourceRvaToImageOffset( ExtractRvaToImageOffset ): sourcePe[ 0 ];targetRvaToImageOffset( ExtractRvaToImageOffset ): targetPe[ 0 ];debugWriteSourceRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "sourceRvaToOffset.create.rift", sourceRvaToImageOffset[ 0 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceHintBuffer( CreateHintBuffer ): sourcePe[ 0 ];targetHintBuffer( CreateHintBuffer ): targetPe[ 0 ];emptyCliMap( CreateEmptyCli4Map ):;emptyRiftTable( CreateEmptyRiftTable ):;emptyPeInfo( CreateEmptyPortableExecutableInfoCli4 ):;sourceRelative( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], sourceHintBuffer[ 0 ], emptyRiftTable[ 0 ], "", emptyCliMap[ 0 ], emptyPeInfo[ 0 ], 0, emptyRiftTable[ 0 ];targetRelative( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], targetPe[ 0 ], targetHintBuffer[ 0 ], emptyRiftTable[ 0 ], "", emptyCliMap[ 0 ], emptyPeInfo[ 0 ], 0, emptyRiftTable[ 0 ];sourceZero( PortableExecutableToBuffer ): sourceRelative[ 0 ];targetZero( PortableExecutableToBuffer ): targetRelative[ 0 ];debugWriteSourceZero( DebugWriteFile ): "sourceZero.create.image", sourceZero[ 0 ];debugWriteTargetZero( DebugWriteFile ): "targetZero.create.image", targetZero[ 0 ];debugWriteSourceRelative( DebugWriteFileRiftTable ): "sourceRelative.create.rift", sourceRelative[ 3 ];debugWriteTargetRelative( DebugWriteFileRiftTable ): "targetRelative.create.rift", targetRelative[ 3 ];basicBlockRiftTable( CreateBasicBlockRiftTable ): sourceZero[ 0 ], targetZero[ 0 ], sourceRelative[ 3 ], targetRelative[ 3 ], sourceRvaToImageOffset[ 0 ], targetRvaToImageOffset[ 0 ];output: targetInfo[ 0 ], pesRiftTable[ 0 ], basicBlockRiftTable[ 0 ], psymsRiftTable[ 0 ], cliMap[ 0 ], cliMap[ 1 ];
code( CopyInt ): input[ 0 ];flagsInt( CopyInt ): input[ 1 ];flags( GetBits ): flagsInt[ 0 ];source( PassBuffer ): input[ 2 ];bitReader( BitReaderOpen ): input[ 3 ];targetSize( CopyInt ): input[ 4 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];sourceSize( BufferSize ): source[ 0 ];sourcePe0( PortableExecutableFromBuffer ): source[ 0 ], 1;checkSourcePe0( CheckIntsIdentity ): sourcePe0[ 1 ], 1, 0x040301;sourcePe( PassPe / flags[ 13 ] ? "UnbindPortableExecutable" : "PassPe" ): sourcePe0[ 0 ];sourceOffsetToRva( ExtractImageOffsetToRva ): sourcePe[ 0 ];debugWriteSourceOffsetToRva( DebugWriteFileRiftTable ): "sourceOffsetToRva.apply.rift", sourceOffsetToRva[ 0 ];sourceCliMetadata( ExtractCliMetadata ): sourcePe[ 0 ];sourceImageBase( GetImageBase ): sourcePe[ 0 ];targetInfo( BitReadPortableExecutableInfo ): bitReader[ 0 ];targetInfoSplit( SplitPortableExecutableInfo ): targetInfo[ 1 ];targetImageBase( PassInt ): targetInfoSplit[ 0 ];targetGlobalPointer( PassInt ): targetInfoSplit[ 1 ];targetTimeStamp( PassInt ): targetInfoSplit[ 2 ];targetRvaToOffset( PassRiftTable ): targetInfoSplit[ 3 ];debugWriteTargetRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "targetRvaToOffset.apply.rift", targetRvaToOffset[ 0 ];targetCliMetadata( PassCliMetadata ): targetInfoSplit[ 4 ];usedRiftTable( BitReadRiftTable ): targetInfo[ 0 ];debugWriteUsedRiftTable( DebugWriteFileRiftTable ): "used.apply.rift", usedRiftTable[ 1 ]; cliMap( BitReadCliMap ): usedRiftTable[ 0 ];bitReaderClose( BitReaderClose ): cliMap[ 0 ], 1;hintBuffer( CreateHintBuffer ): sourcePe[ 0 ];emptyRelative( CreateEmptyRiftTable ):;riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceRiftTransformed( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], hintBuffer[ 0 ], usedRiftTable[ 1 ], "", cliMap[ 1 ], targetInfo[ 1 ], 1, emptyRelative[ 0 ];setImageBase( SetImageBase ): sourceRiftTransformed[ 0 ], targetImageBase[ 0 ];setGlobalPointer( SetGlobalPointer ): setImageBase[ 0 ], targetGlobalPointer[ 0 ];setTimeStamp( SetTimeStamp ): setGlobalPointer[ 0 ], targetTimeStamp[ 0 ];setCheckSum( SetCheckSum ): setTimeStamp[ 0 ], 0; transformed( PortableExecutableToBuffer ): setCheckSum[ 0 ];compressionRiftTable0( MultiplyRiftTables ): sourceOffsetToRva[ 0 ], usedRiftTable[ 1 ];debugWriteCompression0( DebugWriteFileRiftTable ): "compression0.apply.rift", compressionRiftTable0[ 0 ];compressionRiftTable1( MultiplyRiftTables ): compressionRiftTable0[ 0 ], targetRvaToOffset[ 0 ];debugWriteCompression1( DebugWriteFileRiftTable ): "compression1.apply.rift", compressionRiftTable1[ 0 ];compressionRiftTable2( ReverseRiftTable ): compressionRiftTable1[ 0 ], 0;debugWriteCompression2( DebugWriteFileRiftTable ): "compression2.apply.rift", compressionRiftTable2[ 0 ];cliMapCompressionRiftTable( CompressionRiftTableFromCliMap ): sourceCliMetadata[ 0 ], targetCliMetadata[ 0 ], cliMap[ 1 ], transformed[ 0 ];debugWriteCliMapCompressionRiftTable( DebugWriteFileRiftTable ): "cliMapCompression.apply.rift", cliMapCompressionRiftTable[ 0 ];compressionRiftTable3( SumRiftTables ): compressionRiftTable2[ 0 ], cliMapCompressionRiftTable[ 0 ], 1;debugWriteCompression3( DebugWriteFileRiftTable ): "compression3.apply.rift", compressionRiftTable3[ 0 ];output: transformed[ 0 ], compressionRiftTable3[ 0 ];
RiftTransformCliMetadata
ExtendBuffer
CreateBasicBlockRiftTable
code( CopyInt ): input[ 0 ];flagsInt( CopyInt ): input[ 1 ];flags( GetBits ): flagsInt[ 0 ];source( PassBuffer ): input[ 2 ];bitReader( BitReaderOpen ): input[ 3 ];targetSize( CopyInt ): input[ 4 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];sourceSize( BufferSize ): source[ 0 ];sourcePe0( PortableExecutableFromBuffer ): source[ 0 ], 1;checkSourcePe0( CheckIntsIdentity ): sourcePe0[ 1 ], 1, 0x040301;sourcePe( PassPe / flags[ 13 ] ? "UnbindPortableExecutable" : "PassPe" ): sourcePe0[ 0 ];sourceOffsetToRva( ExtractImageOffsetToRva ): sourcePe[ 0 ];debugWriteSourceOffsetToRva( DebugWriteFileRiftTable ): "sourceOffsetToRva.apply.rift", sourceOffsetToRva[ 0 ];sourceCliMetadata( ExtractCli4Metadata ): sourcePe[ 0 ];sourceImageBase( GetImageBase ): sourcePe[ 0 ];targetInfo( BitReadPortableExecutableInfoCli4 ): bitReader[ 0 ];targetInfoSplit( SplitPortableExecutableInfo ): targetInfo[ 1 ];targetImageBase( PassInt ): targetInfoSplit[ 0 ];targetGlobalPointer( PassInt ): targetInfoSplit[ 1 ];targetTimeStamp( PassInt ): targetInfoSplit[ 2 ];targetRvaToOffset( PassRiftTable ): targetInfoSplit[ 3 ];debugWriteTargetRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "targetRvaToOffset.apply.rift", targetRvaToOffset[ 0 ];targetCliMetadata( PassCliMetadata ): targetInfoSplit[ 5 ];usedRiftTable( BitReadRiftTable ): targetInfo[ 0 ];debugWriteUsedRiftTable( DebugWriteFileRiftTable ): "used.apply.rift", usedRiftTable[ 1 ]; cliMap( BitReadCliMap ): usedRiftTable[ 0 ];bitReaderClose( BitReaderClose ): cliMap[ 0 ], 1;hintBuffer( CreateHintBuffer ): sourcePe[ 0 ];emptyRelative( CreateEmptyRiftTable ):;riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceRiftTransformed( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], hintBuffer[ 0 ], usedRiftTable[ 1 ], "", cliMap[ 1 ], targetInfo[ 1 ], 1, emptyRelative[ 0 ];setImageBase( SetImageBase ): sourceRiftTransformed[ 0 ], targetImageBase[ 0 ];setGlobalPointer( SetGlobalPointer ): setImageBase[ 0 ], targetGlobalPointer[ 0 ];setTimeStamp( SetTimeStamp ): setGlobalPointer[ 0 ], targetTimeStamp[ 0 ];setCheckSum( SetCheckSum ): setTimeStamp[ 0 ], 0; transformed( PortableExecutableToBuffer ): setCheckSum[ 0 ];compressionRiftTable0( MultiplyRiftTables ): sourceOffsetToRva[ 0 ], usedRiftTable[ 1 ];debugWriteCompression0( DebugWriteFileRiftTable ): "compression0.apply.rift", compressionRiftTable0[ 0 ];compressionRiftTable1( MultiplyRiftTables ): compressionRiftTable0[ 0 ], targetRvaToOffset[ 0 ];debugWriteCompression1( DebugWriteFileRiftTable ): "compression1.apply.rift", compressionRiftTable1[ 0 ];compressionRiftTable2( ReverseRiftTable ): compressionRiftTable1[ 0 ], 0;debugWriteCompression2( DebugWriteFileRiftTable ): "compression2.apply.rift", compressionRiftTable2[ 0 ];cliMapCompressionRiftTable( CompressionRiftTableFromCli4Map ): sourceCliMetadata[ 0 ], targetCliMetadata[ 0 ], cliMap[ 1 ], transformed[ 0 ];debugWriteCliMapCompressionRiftTable( DebugWriteFileRiftTable ): "cliMapCompression.apply.rift", cliMapCompressionRiftTable[ 0 ];compressionRiftTable3( SumRiftTables ): compressionRiftTable2[ 0 ], cliMapCompressionRiftTable[ 0 ], 1;debugWriteCompression3( DebugWriteFileRiftTable ): "compression3.apply.rift", compressionRiftTable3[ 0 ];output: transformed[ 0 ], compressionRiftTable3[ 0 ];
BitWriteCliMap
OutputInt
ApplyPostProcessTarget
CreatePreProcessSource_CLI4_ARM
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExeCli4" : "RiftTransform" ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocations" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];riftTransformed6( RiftTransform / flags[ 21 ] ? "RiftTransformCli4Disasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];riftTransformed7( RiftTransform / flags[ 22 ] ? "RiftTransformCli4Metadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];riftTransformed8( RiftTransform / flags[ 9 ] ? "RiftTransformDisasmAmd64" : "RiftTransform" ): riftTransformed7[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];riftTransformed9( RiftTransform / flags[ 10 ] ? "RiftTransformPdataAmd64" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
BitWriteCompositeFormat
TargetRealPeContainer
NormalizeCodeSource_IA64
RiftTransformCli4Disasm
code( CopyInt ): input[ 0 ];targetCode( CopyInt ): input[ 1 ];flagsInt( CopyInt ): input[ 2 ];bitWriter( PassBitWriter ): input[ 3 ];source( PassBuffer ): input[ 4 ];target( PassBuffer ): input[ 5 ];sourceSize( BufferSize ): source[ 0 ];targetSize( BufferSize ): target[ 0 ];sourceIni( PassIniReader ): input[ 6 ];targetIni( PassIniReader ): input[ 7 ];patchIni( PassIniReader ): input[ 8 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];createPreProcessSourceName( Concat ): "CreatePreProcessSource_", codeMnemonic[ 0 ];createPreProcessSource( CreatePreProcessSource_RAW / createPreProcessSourceName[ 0 ] ): code[ 0 ], targetCode[ 0 ], flagsInt[ 0 ], source[ 0 ], target[ 0 ], sourceIni[ 0 ], targetIni[ 0 ], patchIni[ 0 ];debugWritePreProcessSource( DebugWriteFile ): "preProcessSource.create.image", createPreProcessSource[ 0 ];createPreProcessTarget( CreatePreProcessTarget ): flagsInt[ 0 ], target[ 0 ];debugWritePreProcessTarget( DebugWriteFile ): "preProcessTarget.create.image", createPreProcessTarget[ 0 ];applyPreProcessSourceName( Concat ): "ApplyPreProcessSource_", codeMnemonic[ 0 ];applyPreProcessSource( ApplyPreProcessSource_RAW / applyPreProcessSourceName[ 0 ] ): code[ 0 ], flagsInt[ 0 ], source[ 0 ], createPreProcessSource[ 1 ], targetSize[ 0 ];checkPreProcessSourceIdentity( CheckBuffersIdentity ): createPreProcessSource[ 0 ], applyPreProcessSource[ 0 ], 0x041F04;checkCompressionRiftTableIdentity( CheckRiftTablesIdentity ): createPreProcessSource[ 2 ], applyPreProcessSource[ 1 ], 0x041F03;applyPostProcessTarget( ApplyPostProcessTarget ): flagsInt[ 0 ], createPreProcessTarget[ 0 ];checkPostProcessTargetIdentity( CheckBuffersIdentity ): target[ 0 ], applyPostProcessTarget[ 0 ], 0x041F01;writePreProcessBuffer( BitWriteBuffer ): bitWriter[ 0 ], createPreProcessSource[ 1 ];compressionRiftTable5( PassRiftTable ): createPreProcessSource[ 2 ];debugWriteCompression5( DebugWriteFileRiftTable ): "compression5.create.rift", compressionRiftTable5[ 0 ];compressionRiftTable6( CreateEmptyRiftTable ):;compressionRiftTable7( AddRiftEntry ): compressionRiftTable6[ 0 ], sourceSize[ 0 ], 0;debugWriteCompression7( DebugWriteFileRiftTable ): "compression7.create.rift", compressionRiftTable7[ 0 ];compressionRiftTable8( MultiplyRiftTables ): compressionRiftTable7[ 0 ], compressionRiftTable5[ 0 ];debugWriteCompression8( DebugWriteFileRiftTable ): "compression8.create.rift", compressionRiftTable8[ 0 ];compressionRiftTable9( ReduceRiftTable ): compressionRiftTable8[ 0 ];debugWriteCompression9( DebugWriteFileRiftTable ): "compression9.create.rift", compressionRiftTable9[ 0 ];create( CreatePseudoLzxPatch ): createPreProcessSource[ 0 ], createPreProcessTarget[ 0 ], flagsInt[ 0 ], sourceIni[ 0 ], targetIni[ 0 ], patchIni[ 0 ], compressionRiftTable9[ 0 ];writePatch( BitWriteBuffer ): writePreProcessBuffer[ 0 ], create[ 0 ];output: writePatch[ 0 ];
CreatePreProcessSource_I386
AsciiToT
NormalizeCodeSource_AMD64
CheckBuffersIdentity
BitWriterOpen
BitReadCliMap
GetFileTypeMnemonic
RiftTransformRelativeCallsI386
code( InputSharedInt ): input[ 0 ];targetCode( InputSharedInt ): input[ 1 ];flagsInt( InputSharedInt): input[ 2 ];source( PassBuffer ): input[ 3 ];target( InputSharedBuffer ): input[ 4 ];sourceIni( PassIniReader ): input[ 5 ];targetIni( PassIniReader ): input[ 6 ];patchIni( PassIniReader ): input[ 7 ];compressionRiftTable( CreateEmptyRiftTable ):;output: source[ 0 ], "", compressionRiftTable[ 0 ];
BitWriteCliMetadata
InputExclusiveBitWriter
fileName( InputSharedBuffer ): input[ 0 ];pe( InputSharedPe ): input[ 1 ]; 
SmashLockPrefixesI386
code( CopyInt ): input[ 0 ];targetCode( CopyInt ): input[ 1 ];flagsInt( CopyInt ): input[ 2 ];flags( GetBits ): flagsInt[ 0 ];source( PassBuffer ): input[ 3 ];target( CopyBuffer ): input[ 4 ];sourceIni( PassIniReader ): input[ 5 ];targetIni( PassIniReader ): input[ 6 ];patchIni( PassIniReader ): input[ 7 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];sourceSize( BufferSize ): source[ 0 ];sourcePe0( PortableExecutableFromBuffer ): source[ 0 ], 1;checkSourcePe0( CheckIntsIdentity ): sourcePe0[ 1 ], 1, 0x041F02;sourcePe( PassPe / flags[ 13 ] ? "UnbindPortableExecutable" : "PassPe" ): sourcePe0[ 0 ];sourceOffsetToRva( ExtractImageOffsetToRva ): sourcePe[ 0 ];debugWriteSourceOffsetToRva( DebugWriteFileRiftTable ): "sourceOffsetToRva.create.rift", sourceOffsetToRva[ 0 ];sourceCliMetadata( ExtractCli4Metadata ): sourcePe[ 0 ];sourceImageBase( GetImageBase ): sourcePe[ 0 ];iniRiftTable( RiftTableFromIniSection ): patchIni[ 0 ], "OldRvaToNewRvaMap", 1;debugWriteIniRiftTable( DebugWriteFileRiftTable ): "ini.create.rift", iniRiftTable[ 0 ];compareCodes( CompareInts ): code[ 0 ], targetCode[ 0 ];targetPeContainer( TargetRealPeContainerCli4 / compareCodes[ 0 ] ? "TargetStubPeContainerCli4" : "TargetRealPeContainerCli4" ): code[ 0 ], flagsInt[ 0 ], source[ 0 ], target[ 0 ], sourceIni[ 0 ], targetIni[ 0 ], patchIni[ 0 ];targetInfo( PassPortableExecutableInfo ): targetPeContainer[ 0 ];targetInfoSplit( SplitPortableExecutableInfo ): targetInfo[ 0 ];targetImageBase( PassInt ): targetInfoSplit[ 0 ];targetGlobalPointer( PassInt ): targetInfoSplit[ 1 ];targetTimeStamp( PassInt ): targetInfoSplit[ 2 ];targetRvaToOffset( PassRiftTable ): targetInfoSplit[ 3 ];debugWriteTargetRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "targetRvaToOffset.create.rift", targetRvaToOffset[ 0 ];targetCliMetadata( PassCliMetadata ): targetInfoSplit[ 5 ];pesRiftTable( PassRiftTable ): targetPeContainer[ 1 ];debugWritePesRiftTable( DebugWriteFileRiftTable ): "pes.create.rift", pesRiftTable[ 0 ];basicBlockRiftTable( PassRiftTable ): targetPeContainer[ 2 ];debugWriteBasicBlockRiftTable( DebugWriteFileRiftTable ): "basicBlock.create.rift", basicBlockRiftTable[ 0 ];psymsRiftTable( PassRiftTable ): targetPeContainer[ 3 ];debugWritePsymsRiftTable( DebugWriteFileRiftTable ): "psyms.create.rift", psymsRiftTable[ 0 ];cliMap( PassCliMap ): targetPeContainer[ 4 ];cliMapRiftTable( PassRiftTable ): targetPeContainer[ 5 ];debugWriteCliMapRiftTable( DebugWriteFileRiftTable ): "cliMap.create.rift", cliMapRiftTable[ 0 ];riftTable0( SumRiftTables ): pesRiftTable[ 0 ], cliMapRiftTable[ 0 ], 0;riftTable1( SumRiftTables ): riftTable0[ 0 ], basicBlockRiftTable[ 0 ], 0;riftTable2( SumRiftTables ): riftTable1[ 0 ], psymsRiftTable[ 0 ], 0;unreducedRiftTable( SumRiftTables ): iniRiftTable[ 0 ], riftTable2[ 0 ], 0;debugWriteUnreducedRiftTable( DebugWriteFileRiftTable ): "unreduced.create.rift", unreducedRiftTable[ 0 ];reducedRiftTable( ReduceRiftTable ): unreducedRiftTable[ 0 ];debugWriteReducedRiftTable( DebugWriteFileRiftTable ): "reduced.create.rift", reducedRiftTable[ 0 ];targetSize( BufferSize ): target[ 0 ];preWriter( BitWriterOpen ):;writeTargetInfo( BitWritePortableExecutableInfoCli4 ): preWriter[ 0 ], targetInfo[ 0 ];hintBuffer0( CreateHintBuffer ): sourcePe[ 0 ];usageBuffer0( CreateRiftUsageBuffer ): reducedRiftTable[ 0 ];emptyRelative( CreateEmptyRiftTable ):;riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceRiftTransformed( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], hintBuffer0[ 0 ], reducedRiftTable[ 0 ], usageBuffer0[ 0 ], cliMap[ 0 ], targetInfo[ 0 ], 1, emptyRelative[ 0 ];hintBuffer( PassBuffer ): sourceRiftTransformed[ 1 ];usageBuffer( RiftTableMap ): reducedRiftTable[ 0 ], 0, sourceRiftTransformed[ 2 ];debugWriteHintBuffer( DebugWriteFile ): "hint.map", hintBuffer[ 0 ];debugWriteUsageBuffer( DebugWriteFile ): "usage.map", usageBuffer[ 1 ];usedRiftTable( RemoveUnusedRiftEntries ): reducedRiftTable[ 0 ], usageBuffer[ 1 ];debugWriteUsedRiftTable( DebugWriteFileRiftTable ): "used.create.rift", usedRiftTable[ 0 ];setImageBase( SetImageBase ): sourceRiftTransformed[ 0 ], targetImageBase[ 0 ];setGlobalPointer( SetGlobalPointer ): setImageBase[ 0 ], targetGlobalPointer[ 0 ];setTimeStamp( SetTimeStamp ): setGlobalPointer[ 0 ], targetTimeStamp[ 0 ];setCheckSum( SetCheckSum ): setTimeStamp[ 0 ], 0; writeRiftTable( BitWriteRiftTable ): writeTargetInfo[ 0 ], usedRiftTable[ 0 ];writeCliMap( BitWriteCliMap ): writeRiftTable[ 0 ], cliMap[ 0 ];preBuffer( BitWriterClose ): writeCliMap[ 0 ];transformedSource( PortableExecutableToBuffer ): setCheckSum[ 0 ];compressionRiftTable0( MultiplyRiftTables ): sourceOffsetToRva[ 0 ], usedRiftTable[ 0 ];debugWriteCompression0( DebugWriteFileRiftTable ): "compression0.create.rift", compressionRiftTable0[ 0 ];compressionRiftTable1( MultiplyRiftTables ): compressionRiftTable0[ 0 ], targetRvaToOffset[ 0 ];debugWriteCompression1( DebugWriteFileRiftTable ): "compression1.create.rift", compressionRiftTable1[ 0 ];compressionRiftTable2( ReverseRiftTable ): compressionRiftTable1[ 0 ], 0; debugWriteCompression2( DebugWriteFileRiftTable ): "compression2.create.rift", compressionRiftTable2[ 0 ];cliMapCompressionRiftTable( CompressionRiftTableFromCli4Map ): sourceCliMetadata[ 0 ], targetCliMetadata[ 0 ], cliMap[ 0 ], transformedSource[ 0 ];debugWriteCliMapCompressionRiftTable( DebugWriteFileRiftTable ): "cliMapCompression.create.rift", cliMapCompressionRiftTable[ 0 ];compressionRiftTable3( SumRiftTables ): compressionRiftTable2[ 0 ], cliMapCompressionRiftTable[ 0 ], 1;debugWriteCompression3( DebugWriteFileRiftTable ): "compression3.create.rift", compressionRiftTable3[ 0 ];output: transformedSource[ 0 ], preBuffer[ 0 ], compressionRiftTable3[ 0 ];
ExtractRvaToImageOffset
IniReaderFromBuffer
PortableExecutableToBuffer
ApplyPatch
flags( GetBits ): input[ 0 ];output( PassBuffer / flags[ 0 ] ? "PreProcessI386E8" : "PassBuffer" ): input[ 1 ];
CopyIniReader
RiftTableFromResources
InputExclusiveIniReader
wrap( NormalizeCodeSource_AMD64 ):;
NormalizeCodeSource_CLI4_ARM64
code( InputSharedInt ): input[ 0 ];flags( GetBits ): input[ 1 ];options( InputSharedIniReader ): input[ 2 ];pe( PortableExecutableFromBuffer ): input[ 3 ], 1;clearBinding( UnbindPortableExecutable ): pe[ 0 ];clearLocks( SmashLockPrefixesI386 ): clearBinding[ 0 ];clearRelocations( PassPe / flags[ 5 ] ? "PassPe" : "ClearRelocations" ): clearLocks[ 0 ];clearImageBase( SetImageBase ): clearRelocations[ 0 ], 0;clearTimeStamp( SetTimeStamp ): clearImageBase[ 0 ], 0; clearCheckSum( SetCheckSum ): clearTimeStamp[ 0 ], 0;output( PortableExecutableToBuffer ): clearCheckSum[ 0 ];
CreateEmptyCli4Map
RiftTableFromPes
BufferListPushBack
CreateDefaultCompositeFormat
ApplyPreProcessSourcePeCli4
OutputIniReader
InputSharedCompositeFormat
source( PassBuffer ): input[ 0 ];patch( PassBuffer ): input[ 1 ];split( SplitPatchHeader ): patch[ 0 ];targetBuffer( CreateBuffer ): split[ 4 ];apply( ApplyPayload ): split[ 2 ], split[ 3 ], source[ 0 ], split[ 0 ], targetBuffer[ 0 ], 0;bitReaderClose( BitReaderClose ): apply[ 0 ], 1;hash( CalculateHash ): split[ 6 ], apply[ 1 ];checkHashIdentity( CheckBuffersIdentity ): hash[ 0 ], split[ 7 ], 0x040302;output: apply[ 1 ];
ApplyPreProcessSource_IA64
BitReadInt
InputSharedInt
DebugWriteFile
PassBufferList
ApplyReversePatch
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExeCli4" : "RiftTransform" ): input[ 1 ] , input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];debugWriteTransformed0( DebugWriteFilePe ): "riftTransformed0.image", riftTransformed0[ 0 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];debugWriteTransformed1( DebugWriteFilePe ): "riftTransformed1.image", riftTransformed1[ 0 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];debugWriteTransformed2( DebugWriteFilePe ): "riftTransformed2.image", riftTransformed2[ 0 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];debugWriteTransformed3( DebugWriteFilePe ): "riftTransformed3.image", riftTransformed3[ 0 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocationsI386" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];debugWriteTransformed4( DebugWriteFilePe ): "riftTransformed4.image", riftTransformed4[ 0 ];riftTransformed6( RiftTransform / flags[ 21 ] ? "RiftTransformCli4Disasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];debugWriteTransformed6( DebugWriteFilePe ): "riftTransformed6.image", riftTransformed6[ 0 ];riftTransformed7( RiftTransform / flags[ 22 ] ? "RiftTransformCli4Metadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];debugWriteTransformed7( DebugWriteFilePe ): "riftTransformed7.image", riftTransformed7[ 0 ];smashed( PassPe / flags[ 6 ] ?  "SmashLockPrefixesI386" : "PassPe" ): riftTransformed7[ 0 ];debugWriteSmashed( DebugWriteFilePe ): "smashed.image", smashed[ 0 ];riftTransformed8( RiftTransform / flags[ 7 ] ? "RiftTransformRelativeJmpsI386" : "RiftTransform" ): smashed[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];debugWriteTransformed8( DebugWriteFilePe ): "riftTransformed8.image", riftTransformed8[ 0 ];riftTransformed9( RiftTransform / flags[ 8 ] ? "RiftTransformRelativeCallsI386" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];debugWriteTransformed9( DebugWriteFilePe ): "riftTransformed9.image", riftTransformed9[ 0 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
ApplyPseudoLzxPatchTargetBufferProvided
CreatePreProcessSource_IA64
CopyPortableExecutableInfo
CompressionRiftTableFromCliMap
CheckIntsIdentity
BitReadBuffer
ExtractCliMetadata
full( CopyBuffer ): input[ 0 ];asciiPatchSignature( TToAscii ): "PA30";asciiPatchSignatureSize( BufferSize ): asciiPatchSignature[ 0 ];signature( Unconcat ): full[ 0 ], asciiPatchSignatureSize[ 0 ];checkSignature( CheckBuffersIdentity ): signature[ 0 ], asciiPatchSignature[ 0 ], 0x044601;intFixedBuffer( IntToFixedBuffer ): 0;intFixedBufferSize( BufferSize ): intFixedBuffer[ 0 ];fileTimeBuffer( Unconcat ): signature[ 1 ], intFixedBufferSize[ 0 ];fileTime( IntFromFixedBuffer ): fileTimeBuffer[ 0 ];bitReader( BitReaderOpen ): fileTimeBuffer[ 1 ];version( BitReadInt ): bitReader[ 0 ];code( BitReadInt ): version[ 0 ];flagsInt( BitReadInt ): code[ 0 ];targetSize( BitReadInt ): flagsInt[ 0 ];hashAlgId( BitReadInt ): targetSize[ 0 ];hash( BitReadBuffer ): hashAlgId[ 0 ];output: hash[ 0 ], version[ 1 ], code[ 1 ], flagsInt[ 1 ], targetSize[ 1 ], fileTime[ 0 ], hashAlgId[ 1 ], hash[ 1 ];
ApplyReversalData
wrap( CreatePreProcessSourcePe ):;
PassBuffer
RiftTableFromImports
CreateEmptyCliMap
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExeCli4" : "RiftTransform" ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocations" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];riftTransformed6( RiftTransform / flags[ 21 ] ? "RiftTransformCli4Disasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];riftTransformed7( RiftTransform / flags[ 22 ] ? "RiftTransformCli4Metadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];riftTransformed8( RiftTransform / flags[ 23 ] ? "RiftTransformDisasmARM64" : "RiftTransform" ): riftTransformed7[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];riftTransformed9( RiftTransform / flags[ 24 ] ? "RiftTransformPdataARM64" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
version( CopyInt ): input[ 0 ];hashAlgId( CopyInt ): input[ 1 ];source( PassBuffer ): input[ 2 ];flags( CopyInt ): 0;options( PassBuffer ): "";normalized( NormalizeSource ): version[ 0 ], flags[ 0 ], options[ 0 ], source[ 0 ];hash( CalculateHash ): hashAlgId[ 0 ], normalized[ 0 ];output: hash[ 0 ];
CheckRiftTablesIdentity
RiftTransformRelativeJmpsI386
source( PassBuffer ): input[ 0 ];patch( PassBuffer ): input[ 1 ];targetBuffer( PassBuffer ): input[ 2 ];split( SplitPatchHeader ): patch[ 0 ];targetBufferSize( BufferSize ): targetBuffer[ 0 ];checkTargetSize( CheckIntsIdentity ): split[ 4 ], targetBufferSize[ 0 ], 0x040303;apply( ApplyPayload ): split[ 2 ], split[ 3 ], source[ 0 ], split[ 0 ], targetBuffer[ 0 ], 0;bitReaderClose( BitReaderClose ): apply[ 0 ], 1;hash( CalculateHash ): split[ 6 ], apply[ 1 ];checkHashIdentity( CheckBuffersIdentity ): hash[ 0 ], split[ 7 ], 0x040302;output: apply[ 1 ];
TargetStubPeContainerCli4
ApplyPreProcessSourcePe
ApplyPreProcessSource_CLI4_ARM
SetCheckSum
RiftTransformDisasmAmd64
RiftTransformImports
asciiPatchSignature( TToAscii ): "PA30";source( PassBuffer ): input[ 0 ];patchedSource( PassBuffer ): input[ 1 ];lzxReversal( PassBuffer ): input[ 2 ];fileTime( CopyInt ): input[ 3 ];hashAlgId( CopyInt ): input[ 4 ];version( CopyInt ): input[ 5 ];code( CopyInt ): input[ 6 ];flagsInt( CopyInt ): input[ 7 ];fileTimeBuffer( IntToFixedBuffer ): fileTime[ 0 ];sourceHash( CalculateHash ): hashAlgId[ 0 ], source[ 0 ];sourceSize( BufferSize ): source[ 0 ];header( Concat ): asciiPatchSignature[ 0 ], fileTimeBuffer[ 0 ];bitWriter( BitWriterOpen ):;writeVersion( BitWriteInt ): bitWriter[ 0 ], version[ 0 ];writeCode( BitWriteInt ): writeVersion[ 0 ], code[ 0 ];writeFlagsInt( BitWriteInt ): writeCode[ 0 ], flagsInt[ 0 ];writeSourceSize( BitWriteInt ): writeFlagsInt[ 0 ], sourceSize[ 0 ]; writeHashAlgId( BitWriteInt ): writeSourceSize[ 0 ], hashAlgId[ 0 ];writeHash( BitWriteBuffer ): writeHashAlgId[ 0 ], sourceHash[ 0 ];reversalBuffer( CaptureReversalData ): source[ 0 ], patchedSource[ 0 ], lzxReversal[ 0 ];writeReversal( BitWriteBuffer ): writeHash[ 0 ], reversalBuffer[ 0 ];created( BitWriterClose ): writeReversal[ 0 ];patch( Concat ): header[ 0 ], created[ 0 ];output: patch[ 0 ];
PassBitReader
RiftTableFromIniSection
SetImageBase
RiftTableFromPsyms
RiftTransformHeaders
PassCliMap
InputExclusivePortableExecutableInfo
UnicodeToAscii
CreateOptimalCompositeFormat
CalculatePeCheckSum
BufferSize
CopyBitReader
CLI4_ARM64
CLI4_I386
CLI4_ARM
AMD64
CLI4_AMD64
mspatcha.dll
TestApplyPatchToFileByBuffers
ApplyPatchToFileByBuffers
CompositeFormat
Segments
AccumulateStatistics
SkipUnused
Blocks
OptimalSegments
PortableExecutableInfo
ImageBase
GlobalPointer
TimeStamp
RvaToImageOffset
CliMetadata
RiftTable
#Strings
#Blob
#GUID
HEX( 
0123456789abcdefStartOffset
BaseRva
StreamsNumber
StreamHeadersOffset
StringsStreamOffset
StringsStreamSize
UsStreamOffset
UsStreamSize
BlobStreamOffset
BlobStreamSize
GuidStreamOffset
GuidStreamSize
TablesStreamOffset
TablesStreamSize
LongStringsStream
LongGuidStream
LongBlobStream
Unknown exception
bad array new length
vector too long
Symbols
RSDSm+
msdelta.pdb
.text$lp00SPGO
.text$mn
.text$mn$00
.text$x
.rdata$brc
.idata$5
.00cfg
.CRT$XCA
.CRT$XCZ
.CRT$XIA
.CRT$XIC
.CRT$XIZ
.CRT$XPA
.CRT$XPZ
.CRT$XTA
.CRT$XTZ
.gehcont
.gfids
.giats
.rdata
.rdata$r
.rdata$voltmd
.rdata$zzzdbg
.rtc$IAA
.rtc$IZZ
.rtc$TAA
.rtc$TZZ
.xdata
.xdata$x
.edata
.idata$2
.idata$3
.idata$4
.idata$6
.data$r$brc
.data$rs$brc
.data
.pdata
.rsrc$01
.rsrc$02
msdelta.dll
ApplyDeltaA
ApplyDeltaB
ApplyDeltaGetReverseB
ApplyDeltaProvidedB
ApplyDeltaW
CreateDeltaA
CreateDeltaB
CreateDeltaW
DeltaFree
DeltaNormalizeProvidedB
GetDeltaInfoA
GetDeltaInfoB
GetDeltaInfoW
GetDeltaSignatureA
GetDeltaSignatureB
GetDeltaSignatureW
_initterm
_initterm_e
api-ms-win-crt-runtime-l1-1-0.dll
_o___std_exception_copy
_o___std_exception_destroy
_o___std_type_info_destroy_list
_o__cexit
_o__configure_narrow_argv
_o__errno
_o__execute_onexit_table
_o__initialize_narrow_environment
_o__initialize_onexit_table
_o__invalid_parameter_noinfo
_o__invalid_parameter_noinfo_noreturn
_o__purecall
_o__seh_filter_dll
_o_free
_o_log
_o_malloc
_o_qsort
_o_terminate
__CxxFrameHandler3
__std_type_info_compare
__C_specific_handler
__current_exception
__current_exception_context
memset
api-ms-win-crt-private-l1-1-0.dll
api-ms-win-crt-string-l1-1-0.dll
DisableThreadLibraryCalls
SetLastError
EnterCriticalSection
LoadLibraryExA
SetFileTime
LeaveCriticalSection
InitializeCriticalSection
CreateFileW
GetLastError
CreateFileA
CloseHandle
GetProcAddress
DeleteCriticalSection
SystemTimeToFileTime
FreeLibrary
GetSystemTime
GetFileTime
GetProcessHeap
ReadFile
WriteFile
SetFilePointer
SetEndOfFile
GetFileSize
CryptReleaseContext
CryptGetHashParam
CryptDestroyHash
CryptHashData
CryptCreateHash
CryptAcquireContextA
HeapFree
HeapReAlloc
HeapAlloc
QueryPerformanceCounter
GetCurrentProcessId
GetCurrentThreadId
GetSystemTimeAsFileTime
InitializeSListHead
RtlCaptureContext
RtlLookupFunctionEntry
RtlVirtualUnwind
IsDebuggerPresent
UnhandledExceptionFilter
SetUnhandledExceptionFilter
IsProcessorFeaturePresent
GetCurrentProcess
TerminateProcess
api-ms-win-core-libraryloader-l1-1-0.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-file-l1-1-0.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-timezone-l1-1-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-security-cryptoapi-l1-1-0.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-interlocked-l1-1-0.dll
api-ms-win-core-rtlsupport-l1-1-0.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
Cabinet.dll
ControlTraceW
UnregisterTraceGuids
RegisterTraceGuidsW
GetTraceEnableLevel
GetTraceEnableFlags
GetTraceLoggerHandle
TraceEvent
api-ms-win-eventing-controller-l1-1-0.dll
api-ms-win-eventing-classicprovider-l1-1-0.dll
_CxxThrowException
memcmp
memcpy
memmove
.?AVException@cdp@@
.?AVbad_alloc@std@@
.?AVexception@std@@
.?AVbad_array_new_length@std@@
.P6AHPEAUCOMPRESSOR_HANDLE__@@@Z
.?AVlength_error@std@@
.?AVlogic_error@std@@
.?AVtype_info@@
VS_VERSION_INFO
StringFileInfo
040904B0
CompanyName
Microsoft Corporation
FileDescription
Microsoft Patch Engine
FileVersion
5.00 (WinBuild.160101.0800)
InternalName
msdelta.dll
LegalCopyright
 Microsoft Corporation. All rights reserved.
OriginalFilename
msdelta.dll
ProductName
Microsoft
 Windows
 Operating System
ProductVersion
VarFileInfo
Translation
Washington1
Redmond1
Microsoft Corporation1.0,
%Microsoft Windows Production PCA 20110
210902182341Z
220901182341Z0p1
Washington1
Redmond1
Microsoft Corporation1
Microsoft Windows0
2y80T
I0G1-0+
$Microsoft Ireland Operations Limited1
229879+4675800
M0K0I
Chttp://www.microsoft.com/pkiops/crl/MicWinProPCA2011_2011-10-19.crl0a
U0S0Q
Ehttp://www.microsoft.com/pkiops/certs/MicWinProPCA2011_2011-10-19.crt0
Et,@8
Zof1G
WaNja
T^r|B
uOi@Y
Washington1
Redmond1
Microsoft Corporation1200
)Microsoft Root Certificate Authority 20100
111019184142Z
261019185142Z0
Washington1
Redmond1
Microsoft Corporation1.0,
%Microsoft Windows Production PCA 20110
O0M0K
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
N0L0J
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
TlP0X
R!s4Z
Washington1
Redmond1
Microsoft Corporation1.0,
%Microsoft Windows Production PCA 2011
,XJ/AF4H/APSeApDaxIuu8TFZyYJiGTwiK1txFZaUf60=0Z
"Microsoft Window
 http://www.microsoft.com/windows0
20220720040826.695Z0
Washington1
Redmond1
Microsoft Corporation1-0+
$Microsoft Ireland Operations Limited1&0$
Thales TSS ESN:86DF-4BBC-93351%0#
Microsoft Time-Stamp Service
bG6vf;
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
211028192744Z
230126192744Z0
Washington1
Redmond1
Microsoft Corporation1-0+
$Microsoft Ireland Operations Limited1&0$
Thales TSS ESN:86DF-4BBC-93351%0#
Microsoft Time-Stamp Service0
X0V0T
Nhttp://www.microsoft.com/pkiops/crl/Microsoft%20Time-Stamp%20PCA%202010(1).crl0l
`0^0\
Phttp://www.microsoft.com/pkiops/certs/Microsoft%20Time-Stamp%20PCA%202010(1).crt0
=ccgT
'];,|P
F-B7Y
m{"=4
Washington1
Redmond1
Microsoft Corporation1200
)Microsoft Root Certificate Authority 20100
210930182225Z
300930183225Z0|1
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
q\Q17
&S|9a
!]_0t
U0S0Q
3http://www.microsoft.com/pkiops/Docs/Repository.htm0
O0M0K
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
N0L0J
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
>NGdx
fg:SM
xSu$W
as.,k{n?,
J>f;O
!TkjE
Washington1
Redmond1
Microsoft Corporation1-0+
$Microsoft Ireland Operations Limited1&0$
Thales TSS ESN:86DF-4BBC-93351%0#
Microsoft Time-Stamp Service
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
20220720093643Z
20220721093643Z0w0=
1/0-0
1(0&0
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 2010
bG6vf;
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 2010
bG6vf;
uL<!m
@M)xx
6^%u,H
