!This program cannot be run in DOS mode.
.text
`.rsrc
@.reloc
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADP
g' Bp
AddContentAction
AddContentTarget
CommitAction
CopyToExistingPrompt 
CreateAction
DeleteHasChildrenPrompt
DeletePrompt
ItemNotFound
MoveItemDoesntExist
MoveItemInUse
NewDriveConfirmAction
NewDriveConfirmResourceTemplate
ParsePathFormatError
RemoveDriveConfirmAction
RemoveDriveConfirmResourceTemplate
RemoveDriveInUse
RemoveItemInUse
RemoveItemWithChildren
RenameItemDoesntExist
RenamedItemInUse
RollbackAction
SetContentAction
SetContentTarget
TransactionResource
Add Content
Path: {0}
Commit
lCannot copy because the specified destination already exists. Do you want to overwrite the existing content?
Begin
qThe specified path is a container that has child items. Do you want to delete this container and its child items?
)Do you want to delete the specified item?
oAn object at the specified path {0} does not exist, or has been filtered by the -Include or -Exclude parameter.
:Cannot move item because the item at '{0}' does not exist.
5Cannot move item because the item at '{0}' is in use.
New drive
!Name: {0} Provider: {1} Root: {2}
ICannot parse path because path '{0}' does not have a qualifier specified.
Remove Drive
!Name: {0} Provider: {1} Root: {2}
/Cannot remove drive '{0}' because it is in use.
5Cannot remove the item at '{0}' because it is in use.
The item at {0} has children and the Recurse parameter was not specified. If you continue, all children will be removed with the item. Are you sure you want to continue?
3Cannot rename because item at '{0}' does not exist.
5Cannot rename the item at '{0}' because it is in use.
Rollback
Set Content
Path: {0}
Current transaction9
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADP
AppendClipboardContent
AppendMultipleFilesToClipboard'
AppendSingleFileToClipboardK
ClipboardClearedp
InvalidHtmlCombine
InvalidRawCombine
InvalidTypeCombine
NoAppendableClipboardContent
SetClipboardContent
SetMultipleFilesToClipboard
SetSingleFileToClipboard
%Append string '{0}' to the clipboard.
"Append {0} files to the clipboard.
#Append file '{0}' to the clipboard.
The Clipboard has been cleared.
0Html can only be combined with Html Text format.
:Raw can only be combined with Text or FileDropList format.
5TextFormatType can only be combined with Text format.
kThere's no content in Clipboard or the content format is not compatible. Set input object to the Clipboard.
"Set string '{0}' to the clipboard.
Set {0} files to the clipboard.
 Set file '{0}' to the clipboard.
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADP.
ClearRecycleBinContent
ClearRecycleBinContentForDrive(
ClearRecycleBinProgressActivityd
ClearRecycleBinStatusDescriptionByDrivez
ClearRecycleBinStatusDescriptionForAllDrives
DriveNotFound
InvalidDriveNameFormat
InvalidDriveType
&All of the contents of the Recycle Bin
:All of the contents of the Recycle Bin for the '{0}' drive
Clearing Recycle Bin
for the '{0}' drive
for all drives
Cannot find drive. A drive with the name '{0}' does not exist. Please run the '{1}' cmdlet to see the available Fixed drives in the system.
JInvalid input. The following formats are supported: '{0}', '{1}' or '{2}'.
The drive with the name '{0}' is not a Fixed drive and does not support the Recyle Bin. Please run the '{1}' cmdlet to see the available Fixed drives in the system.
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADP
Description
Namek
Vendor
iThis Windows PowerShell Snap-In contains management cmdlets that are used to manage Windows components.  
Management PSSnapIn
Microsoft CorporationZ
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADP
WmiFilterInvalidClass
WmiInvalidClassk
WmiMethodNameForConfirmation
WmiNamespaceConnect
WmiParameterMissing
WmiQueryFailure
iThe class name {0} is invalid. Valid class names consist of letters, digits, '_', '?', '*', '-' and "[]".
Could not register for event. The class name is invalid. Valid class names consist of letters, digits and the underscore character.
{0} ({1})
-Could not get objects from namespace {0}. {1}
7Parameter {0} should be specified to compose the query.
{0}"{1}"/
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADPa
n0z!k
ControlPanelItemCmdletNotSupported
NoControlPanelItemFoundForGivenCanonicalName=
NoControlPanelItemFoundForGivenCanonicalNameWithCategory
NoControlPanelItemFoundForGivenCategory
NoControlPanelItemFoundForGivenInstance
NoControlPanelItemFoundForGivenName
NoControlPanelItemFoundForGivenNameWithCategory
NoControlPanelItemFoundWithNullCanonicalName
NoControlPanelItemFoundWithNullCanonicalNameWithCategory
VerbActionOpen
;The {0} cmdlet is not supported on this version of Windows.
ECannot find any Control Panel item with the given canonical name {0}.
kCannot find any control panel item with the given canonical name {0} that satisfies the specified category.
?Cannot find any control panel item with the given category {0}.
KCannot find the Control Panel item based on the given instance of type {0}.
;Cannot find any control panel item with the given name {0}.
aCannot find any Control Panel item with the given name {0} that satisfies the specified category.
=Cannot find any control panel item that has a canonical name.
bCannot find any Control Panel item that satisfies the specified category and has a canonical name.
&OpenB
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADP
NoEntriesFound
cCannot find the requested hotfix on the '{0}' computer. Verify the input and run the command again.
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADP
InvalidUri
NotSupportedU
SThe Uniform Resource Identifier (URI) cannot be null or empty. Provide a valid URI.
6The command is not supported on this operating system.
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADP>
TransactionTimedOut
6Cannot use transaction. The transaction has timed out.W
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADPa
AccessDenied
AccessIsDeniedJ
ClearEventLogWarning
InvalidArgument
InvalidOverflowAction
LimitEventLogWarning
LogDoesNotExist
LogReadError
NoAccess
NoEntriesFound
NotSupported
OSWritingError
PathDoesNotExist
PermissionDenied
RemoveEventLogWarning
RemoveSourceWarning
SourceDoesNotExist
SourceExistInComp
SourceExistWithLog
ValueOutofRange
HThe registry key for the log "{0}" for source "{2}" could not be opened.
Access is denied. Try running the command again in a session that has been opened with elevated user rights (that is, Run as Administrator).
9Do you want to clear the "{0}" log on the computer "{1}"?
7Specify a valid value for the number of retention days.
fRetention days is valid only if the overflow action is "OverwriteOlder". Please change  and try again.
LDo you want to change the properties of the "{0}" log on the "{1}" computer?
8The Log name "{0}" does not exist in the computer "{1}".
Log "{0}" could not be read to completion due to the following error. This may have occurred because the log was cleared while still being read. {1}
'Access to the "{1}" computer is denied.
No matches found
EThe command is not supported in this version of the operating system.
|The operating system reported an error when writing the event entry to the event log. A Windows error code is not available.
/The path to the "{1}" computer cannot be found.
MThe registry key for the log "{0}" could not be opened on the computer "{1}".
<Do you want to remove the "{0}" log from the "{1}" computer?
?Do you want to remove the "{0}" source from the "{1}" computer?
7The source name "{2}" does not exist on computer "{1}".
=The "{2}" source is already registered on the "{1}" computer.
:The "{2}" source is already registered with the "{0}" log.
The value supplied for MaximumSize parameter has to be in the range of 64 KB to 4GB with an increment of 64 KB. Please enter a proper value and then retry.
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADP
MultipleMatchingTimeZones
TimeZoneNameNotFoundU
SCannot set the local time zone because the name '{0}' resolves to multiple entries.
=The time zone name '{0}' was not found on the local computer.f
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADP
LoadingBiosInfo
LoadingComputerInfo
LoadingHotPatchInfo8
LoadingMotherboardInfoW
LoadingNetworkAdapterInfox
LoadingOperationSystemInfo
LoadingProcessorInfo
LoadingRegistryInfo
Loading BIOS information
Loading Computer information
Loading hot-patch information
Loading motherboard information
#Loading network adapter information
$Loading operating system information
Loading processor information
Loading registry information
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADP
J@JuMM
Qjy#Rn4
Vp%%[
AddComputerActionDomain
AddComputerActionWorkgroup
AddComputerToSameDomain/
AddComputerToSameWorkgroup
CannotCreateRestorePointWarning
CannotFindMachineAccountFromDomain
CannotFindMachineAccountFromServer
CannotGetOperatingSystemObject
CannotRenameMultipleComputers
CannotResolveComputerName
CannotResolveServerName
CannotWaitLocalComputer
ComputerNamesAreEqual
ComputerNotInDomain
DoubleComputerName
FailToConnectToComputer
FailToGetDomainInformation
FailToJoinDomainFromWorkgroup
FailToJoinNewDomainAfterUnjoinOldDomain
FailToJoinWorkGroup
FailToRename
FailToRenameAfterJoinDomain
FailToRenameAfterJoinWorkgroup
FailToResetPasswordOnDomain
FailToResetPasswordOnLocalMachine
FailToRetrieveLastRestorePoint
FailToSwitchFromDomainToWorkgroup
FailToTestSecureChannel
FailToUnjoinDomain
IncorrectNewNameNumber
InvalidComputerNameFormat
InvalidDomainNameFormat
InvalidDrive
InvalidJoinOptions
InvalidNewName
InvalidParameterDCOMNotSupported
InvalidParameterForCoreClr
InvalidParameterForDCOM
InvalidParameterForWSMan
InvalidParameterSetAsJob
InvalidRestorePoint
LocalShutdownPrivilege
NeedAdminPrivilegeToResetPassword
NetworkDown
NetworkPathNotFound
NewNameIsOldName
NoPingResult
NoResorePoint
NoSupportForCombinedServiceType
NoSystemDrive
NotDisabled
NotEnabled
NotSupported
NotValidDrive
OperationFailed
ParameterConfliction
ParameterUsage
PrivilegeNotEnabled
ProgressActivity
ProgressStatusCompleted
ProgressStatusCreatingRestorePoint
RemoteShutdownPrivilege
RemoveComputerConfirm
RenameCommandWsmanAuthParamConflict
RepairSecureChannelFail
RepairSecureChannelSucceed
ResetComputerMachinePassword
ResetComputerNotInDomain
RestartComplete
RestartComputerAction
RestartComputerInvalidParameter
RestartComputerSkipped
RestartMultipleComputersActivity
RestartNeeded
RestartSingleComputerActivity
RestartcomputerFailed
RestoreFailed
RestoreInterrupted
RestorePointNotCreated
RestoreSuceess
SecureChannelAlive
SecureChannelBroken
ServiceDisabled
StopCommandAuthProtcolConflict
StopCommandParamMessage
StopCommandParamWSManAuthConflict
StopCommandWSManAuthProtcolConflict
StopcomputerFailed
SystemRestoreNotSupported
SystemRestoreServiceDisabled
TestComputerNotInDomain
TimeoutError
TruncateNetBIOSName
TruncateNetBIOSNameCaption
VerifyRebootStage
WaitForMultipleComputers
WaitForPowerShell
WaitForRestartToBegin
WaitForWMI
WaitForWinRM
Join in domain '{0}'
Join in workgroup '{0}'
OCannot add computer '{0}' to domain '{1}' because it is already in that domain.
UCannot add computer '{0}' to workgroup '{1}' because it is already in that workgroup.
A new system restore point cannot be created because one has already been created within the past {0} minutes. The frequency of restore point creation can be changed by creating the DWORD value 'SystemRestorePointCreationFrequency' under the registry key 'HKLM\Software\Microsoft\Windows NT\CurrentVersion\SystemRestore'. The value of this registry key indicates the necessary time interval (in minutes) between two restore point creation. The default value is 1440 minutes (24 hours).
JCannot find the computer account for the local computer in the domain {0}.
WCannot find the computer account for the local computer from the domain controller {0}.
9The Win32_OperatingSystem WMI object cannot be retrieved.
hCannot rename multiple computers. The NewName parameter is valid only if a single computer is specified.
=Computer name {0} cannot be resolved with the exception: {1}.
1The specified server name {0} cannot be resolved.
rCannot wait for the local computer to restart. The local computer is ignored when the Wait parameter is specified.
The value specified for the NewComputerName parameter is the same as the value of the ComputerName parameter. Provide a different value for the NewComputerName parameter.
;Cannot remove computer '{0}' because it is not in a domain.
{0} ({1})
`Cannot establish the WMI connection to the computer '{0}' with the following error message: {1}.
_Cannot get domain information about the local computer because of the following exception: {0}.
nComputer '{0}' failed to join domain '{1}' from its current workgroup '{2}' with following error message: {3}.
Computer '{0}' was successfully unjoined from domain '{1}', but failed to join the new domain '{2}' with the following error message: {3}.
VFailed to join computer '{0}' to workgroup '{1}' with the following error message: {2}
KFail to rename computer '{0}' to '{1}' due to the following exception: {2}.
Computer '{0}' was successfully joined to the new domain '{1}', but renaming it to '{2}' failed with the following error message: {3}.
Computer '{0}' successfully joined the workgroup '{1}', but could not be renamed to '{2}' with the following error message: {3}.
Cannot reset the secure channel password for the computer account in the domain. Operation failed with the following exception: {0}.
jResetting the secure channel password for the local computer failed with the following error message: {0}.
Cannot validate the time interval for restore point creation. It failed to retrieve the last restore point with the following error message: {0}.
Computer '{0}' was successfully unjoined from the domain '{1}', but it failed to join the workgroup '{2}' with the following error message: {3}.
lCannot verify the secure channel for the local computer. Operation failed with the following exception: {0}.
XFailed to unjoin computer '{0}' from domain '{1}' with the following error message: {2}.
GThe number of new names is not equal to the number of target computers.
The following computer name is not valid: {0}. Make sure that the computer name is not longer than 255 characters, that it does not contain two or more consecutive dots, that it does not begin with a dot, that it does not contain only numeric characters, and that it does not contain any of the following characters:  
{{|}}~[\]^:;<=>?@!"#$%^`()+/,
zThe domain in computer name '{0}' is not valid. Make sure that the domain exists and that the name is a valid domain name.
The command cannot turn on the restore computer infrastructure on the specified computer because the supplied drive is not valid. Enter a valid drive in the Drive parameter, and then try again.
8The flag '{0}' is valid only if flag '{1}' is specified.
Skip computer '{0}' with new name '{1}' because the new name is not valid. The new computer name entered is not properly formatted. Standard names may contain letters (a-z, A-Z), numbers (0-9), and hyphens (-), but no spaces or periods (.). The name may not consist entirely of digits, and may not be longer than 63 characters.
LDcomAuthentication is not supported. Please use WsmanAuthentication instead.
/The {0} parameter is not supported for CoreCLR.
[Parameter WsmanAuthentication should not be specified when the DCOM protocol is in use. {0}
nParameters DcomAuthentication and Impersonation should not be specified when the WSMan protocol is in use. {0}
)The AsJob Parameter Set is not supported.
The command cannot restore the computer because "{0}" has not been set as valid restore point. Enter a valid restore point in the RestorePoint parameter, and then try again.
Local shutdown access rights
oAdministrator rights are required to reset the secure channel password on the local computer. Access is denied.
LCannot remove computer(s) from the domain because the local network is down.
Try below options and Run the command again.
1. Verify that the target computer('{0}') is running.
2. Specify full computer name of the target computer('{0}').
]Skip computer '{0}' with new name '{1}' because the new name is the same as the current name.
0Testing connection to computer '{0}' failed: {1}
tThe command cannot locate the "{0}" restore point. Verify the "{0}" sequence number, and then try the command again.
5The combined service types are not supported for now.
+Include System Drive in the list of Drives.
~The command cannot disable System Restore on the {0} drive. You may not have sufficient permissions to perform this operation.
Could not enable drive {0}.
=This functionality is not supported on this operating system.
The command cannot turn off the restore computer infrastructure because the supplied drive is not valid. Enter a valid drive in the Drive parameter, and then try again.
TThis command cannot be run on target computer('{1}') due to following error: {0}.{2}
uParameter WsmanAuthentication should not be specified with DcomAuthentication and Impersonation at the same time. {0}
Parameter WsmanAuthentication is valid only if the WSMan protocol is used. Parameters DcomAuthentication (Authentication) and Impersonation are valid only if the DCOM protocol is used.
`Failed to restart the computer {0}. Access rights {1} cannot be enabled for the calling process.
#Creating a system restore point ...
Completed.
2Creating a system restore point... {0}% Completed.
Remote shutdown access rights
After you leave the domain, you will need to know the password of the local Administrator account to log onto this computer. Do you wish to continue?
Parameter WsmanAuthentication cannot be specified with the DCOM protocol. Parameter WSManAuthentication is valid only when the WSMan protocol is used.
bThe attempt to repair the secure channel between the local computer and the domain {0} has failed.
[The secure channel between the local computer and the domain {0} was successfully repaired.
L"The password of the secure channel between '{0}' and '{1}' has been reset."
Cannot reset the secure channel password for the account of the local computer. The local computer is not currently part of a domain.
Restart is complete
(Enable the {0} and restart the computer.
[The parameters Timeout, For, and Delay are valid only when the parameter Wait is specified.
{The computer {0} is skipped. Fail to retrieve its LastBootUpTime via the WMI service with the following error message: {1}.
 Restarting computers...
@The changes will take effect after you restart the computer {1}.
 Restarting computer {0}
IFailed to restart the computer {0} with the following error message: {1}.
0The last attempt to restore the computer failed.
9The last attempt to restore the computer was interrupted.
@The system restore infrastructure cannot create a restore point.
>The computer has been restored to the specified restore point.
VThe secure channel between the local computer and the domain {0} is in good condition.
KThe secure channel between the local computer and the domain {0} is broken.
"SystemRestore service is disabled.
`Parameters DcomAuthentication and Impersonation cannot be specified with the WSMan protocol. {0}
Parameter WsmanAuthentication is valid only when the WSMan protocol is used. Parameters DcomAuthentication and Impersonation are valid only when the DCOM protocol is used.
jParameter WsmanAuthentication cannot be specified with DcomAuthentication or Impersonation parameters. {0}
MParameter WsmanAuthentication cannot be specified with the DCOM protocol. {0}
FFailed to stop the computer {0} with the following error message: {1}.
The operation cannot be performed because the system restore APIs are not supported on the Advanced RISC Machine (ARM) platform.
This command cannot be run due to the following error: the service cannot be started because it is disabled or does not have enabled devices associated with it.
wCannot verify the secure channel password for the local computer. The local computer is not currently part of a domain.
LThe computer did not finish restarting within the specified time-out period.
The NetBIOS name of the computer is limited to 15 bytes, which is 15 characters in this case. The NetBIOS name will be shortened to "{0}", which may cause conflicts under NetBIOS name resolution. Do you wish to continue?
NetBIOS name will be truncated.
1Verifying that the computer has been restarted...
Completed: {0}/{1}.
.Waiting for Windows PowerShell connectivity...
#Waiting for the restart to begin...
Waiting for WMI connectivity...
!Waiting for WinRM connectivity...
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADP
ComputerAccessDenied
CouldNotAccessDependentServices
CouldNotNewService
CouldNotNewServiceDescription
CouldNotResumeService
CouldNotResumeServiceNotRunning
CouldNotResumeServiceNotSupported
CouldNotSetService
CouldNotSetServiceDescription
CouldNotStartService
CouldNotStopService
CouldNotSuspendService
CouldNotSuspendServiceNotRunning
CouldNotSuspendServiceNotSupported
NoServiceFoundForGivenDisplayName
NoServiceFoundForGivenName
ResumeServiceFailed
ResumingService
ServiceHasDependentServices
ServiceHasDependentServicesNoForce
ServiceIsDependentOnNoForce
ServiceNameForConfirmation
StartServiceFailed
StartingService
StopServiceFailed
StoppingService
SuspendServiceFailed
SuspendingService
The command cannot be used to configure the service '{0}' because access to computer '{1}' is denied. Run Windows PowerShell as admin and run your command again.
0'Cannot access dependent services of '{1} ({0})'
EService '{1} ({0})' cannot be created due to the following error: {2}
iService '{1} ({0})' was created, but its description cannot be configured due to the following error: {2}
EService '{1} ({0})' cannot be resumed due to the following error: {2}
JService '{1} ({0})' cannot be resumed because it is not currently running.
fService '{1} ({0})' cannot be resumed because the service does not support being suspended or resumed.
HService '{1} ({0})' cannot be configured due to the following error: {2}
TService '{1} ({0})' description cannot be configured due to the following error: {2}
EService '{1} ({0})' cannot be started due to the following error: {2}
EService '{1} ({0})' cannot be stopped due to the following error: {2}
GService '{1} ({0})' cannot be suspended due to the following error: {2}
LService '{1} ({0})' cannot be suspended because it is not currently running.
hService '{1} ({0})' cannot be suspended because the service does not support being suspended or resumed.
0Cannot find any service with display name '{1}'.
0Cannot find any service with service name '{0}'.
"Service '{1} ({0})' resume failed.
,Waiting for service '{1} ({0})' to resume...
sCannot stop service '{1} ({0})' because it has dependent services. It can only be stopped if the Force flag is set.
BCannot stop service '{1} ({0})' because it has dependent services.
JCannot stop service '{1} ({0})' because it is dependent on other services.
{0} ({1})
$Failed to start service '{1} ({0})'.
+Waiting for service '{1} ({0})' to start...
 Service '{1} ({0})' stop failed.
*Waiting for service '{1} ({0})' to stop...
#Service '{1} ({0})' suspend failed.
-Waiting for service '{1} ({0})' to suspend...
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADP
AttachDebuggerReturnCode2
AttachDebuggerReturnCode21=
AttachDebuggerReturnCode3d
AttachDebuggerReturnCode8
AttachDebuggerReturnCode9
CannotStarttheProcess
ConfirmStopProcess
ContradictParametersSpecified
CouldNotDebugProcess
CouldNotStopProcess
CouldnotEnumerateFileVer
CouldnotEnumerateModuleFileVer
CouldnotEnumerateModules
DebuggerError
DuplicateEntry
IncludeUserNameRequiresElevation
InvalidApplication
InvalidInput
InvalidStartProcess
InvalidUserError
JoinNetworkFailed
NoComputerNameWithFileVersion
NoDebuggerFound
NoProcessFoundForGivenId
NoProcessFoundForGivenName
ParameterNotSupported
Process is not terminated
ProcessNameForConfirmation
ProcessNotTerminated
RedirectionParams
RemoveFailed
RenameFailed
UseShell
WaitOnIdleProcess
WaitOnItself
;The user does not have access to the requested information.
%The specified parameter is not valid.
,The user does not have sufficient privilege.
Unknown failure.
"The path specified does not exist.
bThis command cannot be run completely because the system cannot find all the information required.
\Are you sure you want to perform the Stop-Process operation on the following item: {0}({1})?
@Parameters "{0}" and "{1}" cannot be specified at the same time.
DCannot debug process "{0} ({1})" because of the following error: {2}
CCannot stop process "{0} ({1})" because of the following error: {2}
CCannot enumerate the file version information of the "{0}" process.
SCannot enumerate the modules and the file version information of the "{0}" process.
2Cannot enumerate the modules of the "{0}" process.
kThis command cannot attach the debugger to the process due to {0} because no default debugger is available.
nThis command cannot be run because "{0}" and "{1}" are same. Give different inputs and Run your command again.
The 'IncludeUserName' parameter requires elevated user rights. Try running the command again in a session that has been opened with elevated user rights (that is, Run as Administrator).
This command cannot be run because the input "{0}" is not a valid Application.  Give a valid application and run your command again.
This command cannot be run because either the parameter "{0}" has a value that is not valid or cannot be used with this command. Give a valid input and Run your command again.
1This command cannot be run due to the error: {0}.
This command cannot be run due to error 1783. The possible cause of this error can be using of a non-existing user "{0}". Please give a valid user and run your command again.
&Error adding '{0}' to the network: {1}
dException getting "Modules" or "FileVersion": "This feature is not supported for remote computers.".
This command cannot be run because the debugger cannot be attached to the process "{0} ({1})". Specify another process and Run your command.
6Cannot find a process with the process identifier {1}.
]Cannot find a process with the name "{0}". Verify the process name and call the cmdlet again.
UThe parameter '{0}' is not supported for the cmdlet '{1}' on this edition of Windows.
RThis command stopped operation of "{0} ({1})" because of the following error: {2}.
{0} ({1})
dThis command stopped operation because process "{0} ({1})" is not stopped in the specified time-out.
gThis command cannot be run because Redirection parameters cannot be used with UseShellExecute parameter
*Error removing '{0}' from the network: {1}
Error renaming '{0}': {1}
XThe specified path is not a valid win32 application. Try again with the UseShellExecute.
This command stopped operation because it cannot wait on 'System Idle' process. Specify another process and Run your command again.
tThis command stopped operation because it cannot wait on itself. Specify another process and Run your command again.
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADP
@wPG6lRqg
CimCmdletAdapter_DebugInquire
CimCmdletAdapter_RemoteDcomDoesntSupportExtendedSemantics
CimCmdletAdapter_WarningInquire
CimCmdletAdapter_WarningStop
CimConversion_CimIntrinsicValue
CimConversion_WqlQuery
CimJob_AssociationDescription
CimJob_BrokenSession
CimJob_ComputerNameConcatenationTemplate
CimJob_ErrorCodeFromMethod
CimJob_GenericCimFailure
CimJob_InvalidClassName
CimJob_InvalidOutputParameterName
CimJob_MethodDescription
CimJob_MismatchedTypeOfPropertyReturnedByQuery
CimJob_NotFound_ComplexCase
CimJob_NotFound_SimpleGranularCase_Equality
CimJob_NotFound_SimpleGranularCase_Wildcard
CimJob_SafeAssociationDescription
CimJob_SafeMethodDescription
CimJob_SafeQueryDescription
CimJob_SleepAndRetryVerboseMessage
CimJob_VerboseExecutionMessage
SessionBasedWrapper_ShouldProcessVsJobConflict
Xml_cmdletsOverObjectsXsd
The cmdlet does not fully support the Inquire action for debug messages.  Cmdlet operation will continue during the prompt.  Select a different action preference via -Debug switch or $DebugPreference variable, and try again.
b{0}: A CimSession to the CIM server uses the DCOM protocol, which does not support the {1} switch.
The cmdlet does not fully support the Inquire action for warnings.  Cmdlet operation will continue during the prompt.  Select a different action preference via -WarningAction parameter or $WarningPreference variable, and try again.
The cmdlet does not fully support the Stop action for warnings.  Cmdlet operation will be stopped with a delay.  Select a different action preference via -WarningAction parameter or $WarningPreference variable, and try again.
CIM intrinsic type
WQL literal
CIM query for enumerating instances of the {0} class on the {1} CIM server, that are associated with the following instance: {2}
!Cannot connect to CIM server. {0}
{0}: {1}
5The CIM method returned the following error code: {0}
Failed to run {1}.  {0}
Cannot find the {0} class on the {1} CIM server.  Verify the value of the ClassName xml attribute in Cmdlet Definition XML and retry. Valid class name example: ROOT\cimv2\Win32_Process.
Cannot find the {2} output parameter of the {1} method of the {0} CIM object.  Verify the value of the ParameterName attribute in Cmdlet Definition XML and retry.
$CIM method {1} on the {0} CIM object
wType of {0} property ({1}) doesn't match the CIM type ({2}) associated with the type declared in Cmdlet Definition XML.
HNo matching {1} objects found by {0}. Verify query parameters and retry.
eNo {2} objects found with property '{0}' equal to '{1}'.  Verify the value of the property and retry.
eNo {2} objects found with property '{0}' matching '{1}'.  Verify the value of the property and retry.
TCIM query for enumerating associated instance of the {0} class on the {1} CIM server
AThe {2} CIM method exposed by the {0} class on the {1} CIM server
CCIM query for instances of the {0} class on the {1} CIM server: {2}
The {0} command cannot complete, because the {1} server is currently busy.  The command will be automatically resumed in {2:f2} seconds.
%Running the following operation: {0}.
zCIM cmdlets do not support the {0} parameter together with the AsJob parameter.  Remove one of these parameters and retry.
<?xml version="1.0" encoding="utf-8"?>
<!-- ##################################################################
Copyright (c) Microsoft Corporation.  All rights reserved.
################################################################### -->
<!DOCTYPE schema [
  <!ENTITY csharpIdentifierLetterCharacterRegex "\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nl}">
  <!ENTITY csharpIdentifierFirstCharacterRegex "&csharpIdentifierLetterCharacterRegex;_">
  <!ENTITY csharpIdentifierOtherCharacterRegex "&csharpIdentifierLetterCharacterRegex;\p{Nd}_">
  <!ENTITY csharpIdentifierRegex "[&csharpIdentifierFirstCharacterRegex;][&csharpIdentifierOtherCharacterRegex;]{0,100}">
  <!ENTITY csharpNamespaceRegex "(&csharpIdentifierRegex;)(\.&csharpIdentifierRegex;){0,10}">
  <!ENTITY clrTypeSpecialCharacterRegex "\,\=\ \+\&amp;\*\[\]\.\\\-\&quot;">
  <!ENTITY clrTypeRegex "[&csharpIdentifierOtherCharacterRegex;&clrTypeSpecialCharacterRegex;]{1,1000}">
  <!ENTITY powerShellVerbCharacterRegex "\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Lm}">
  <!ENTITY powerShellNounCharacterRegex "&powerShellVerbCharacterRegex;\p{Nd}">
  <!ENTITY powerShellAliasCharacterRegex "&powerShellNounCharacterRegex;_-">
  <!ENTITY powerShellCmdletParameterCharacterRegex "&powerShellNounCharacterRegex;_">
  <!ENTITY powerShellVerbRegex  "[&powerShellVerbCharacterRegex;]{1,100}">
  <!ENTITY powerShellNounRegex  "[&powerShellNounCharacterRegex;]{1,100}">
  <!ENTITY powerShellAliasRegex "[&powerShellAliasCharacterRegex;]{1,100}">
  <!ENTITY powerShellCmdletParameterRegex "[&powerShellCmdletParameterCharacterRegex;]{1,100}">
  <!ENTITY powerShellParameterSetRegex "[^,;]{1,100}">
 csharpIdentifierRegex based on C# Language Specification 3.0, section 2.4.2 Idenfifiers
 - the C# spec allows \p{Pc}\p{Cf}\p{Mn}\{Mc} in csharpIdentifierOtherCharacterRegex, 
   but those characters classes seem risky wrt code injection attacks, so they were
   removed above.  
   - '_' (ASCII 95) is the only character in \p{Pc} class out of the first 0..255 characters
   - No characters in the first 0..255 characters belong to \p{Cf}, \p{Mn}, \p{Mc}
 clrTypeRegex and clrTypeSpecialCharacterRegex are based on http://msdn.microsoft.com/en-us/library/yfsftwz6.aspx
 clrTypeSpecialCharacterRegex includes the following characters;
   - ',' - part of ReflectionDimension and TypeName productions in BNF at http://msdn.microsoft.com/en-us/library/yfsftwz6.aspx
   - '=' - part of AssemblyProperty production in BNF at http://msdn.microsoft.com/en-us/library/yfsftwz6.aspx
   - ' ' - unspecified in the docs, but apparently allowed (i.e. between NamespaceTypeName and AssemblyNameSpec in the TypeName production
   - '+' - part of NestedTypeName production in BNF at http://msdn.microsoft.com/en-us/library/yfsftwz6.aspx
   - '&amp;' - part of ReferenceTypeSpec production in BNF at http://msdn.microsoft.com/en-us/library/yfsftwz6.aspx
   - '*' - part of ReflectionDimension production in BNF at http://msdn.microsoft.com/en-us/library/yfsftwz6.aspx
   - '[' and ']' - part of ArrayTypeSpec production in BNF at http://msdn.microsoft.com/en-us/library/yfsftwz6.aspx
   - '.' - part of ReflectionDimension and NamespaceTypeName productions in BNF at http://msdn.microsoft.com/en-us/library/yfsftwz6.aspx
   - '\' - an escape character specified at http://msdn.microsoft.com/en-us/library/yfsftwz6.aspx
   - '-' - required for Culture property of an Assembly.  
           RFC-1766 defines the format of a culture identifier as:
              Language-Tag = Primary-tag *( "-" Subtag )
              Primary-tag = 1*8ALPHA
              Subtag = 1*8ALPHA
   - '&quot;' - unspecified in the docs, but used in the examples at http://msdn.microsoft.com/en-us/library/yfsftwz6.aspx (i.e. Culture="")
        
<xsd:schema 
    elementFormDefault="qualified"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:cps="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"
    targetNamespace="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"
  <xsd:annotation>
    <xsd:documentation xml:lang="en-us">
      This schema defines the format of PowerShell CIM Modules.
      A PowerShell CIM Module defines a set of cmdlets that interact with a CIM class.      
      
      A PowerShell CIM Module needs to be saved in a file with ".cdxml" extension.
      A ".cdxml" file can be imported into a PowerShell session directly by Import-Module cmdlet,
      or by referring to the ".cdxml" file from NestedModules or RootModule entry of
      a module manifest (a ".psd1" file) and then importing the ".psd1" file by Import-Module cmdlet.
    </xsd:documentation>
  </xsd:annotation>
  <xsd:element name="PowerShellMetadata">
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="Class" type="cps:ClassMetadata" />
        <xsd:element name="Enums" type="cps:EnumMetadata" minOccurs="0" />
      </xsd:sequence>
    </xsd:complexType>
    <xsd:key name="UniqueNamesOfEnums">
      <xsd:selector xpath=".//cps:Enums/cps:Enum" />
      <xsd:field xpath="@EnumName" />
    </xsd:key>
    <xsd:unique name="UniqueCmdletAliases">
      <xsd:selector xpath=".//cps:CmdletMetadata" />
      <xsd:field xpath="@Aliases" />
    </xsd:unique>
  </xsd:element>
  <!-- ############################################################ -->
  <!-- # ENUM ##################################################### -->
  <xsd:complexType name="EnumMetadata">
    <xsd:sequence>
      <xsd:element name="Enum" maxOccurs="unbounded">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="Value" maxOccurs="unbounded">
              <xsd:complexType>
                <xsd:attribute name="Name" type="cps:EnumValueName" use="required" />
                <xsd:attribute name="Value" type="xsd:integer" use="required" />
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>
          
          <xsd:attribute name="EnumName" type="cps:EnumTypeName" use="required">
            <xsd:annotation>
              <xsd:documentation xml:lang="en-us">
                EnumName attribute specifies the name of a .NET enum.
                This is the name to use in a PSType attribute.
                
                The name should include a namespace to avoid naming conflicts 
                (i.e. the name should be "Networking.MyEnum" rather than "MyEnum").
                
                The system will prefix the name of the enum with the following namespace: "Microsoft.PowerShell.Cmdletization.GeneratedTypes"
                (i.e. "Networking.MyEnum" will become "Microsoft.PowerShell.Cmdletization.GeneratedTypes.Networking.MyEnum").
                When referring to the enum in types.ps1xml and format.ps1xml files, one has to use the full, prefixed name of the enum.
              </xsd:documentation>
            </xsd:annotation>
          </xsd:attribute>
          
          <xsd:attribute name="UnderlyingType" type="cps:PowerShellTypeIdentifier" use="optional">
            <xsd:annotation>
              <xsd:documentation xml:lang="en-us">
                Underlying type of the enum.
                
                C# Language Specification allows (in section 4.1.9 "Enumeration types") only the following
                underlying types: 
                byte (System.Byte), 
                sbyte (System.SByte), 
                short (System.Int16), 
                ushort (System.UInt16), 
                int (System.Int32), 
                uint (System.UInt32), 
                long (System.Int64),
                ulong (System.UInt64).
              </xsd:documentation>
            </xsd:annotation>
          </xsd:attribute>
          <xsd:attribute name="BitwiseFlags" type="xsd:boolean" use="optional">
            <xsd:annotation>
              <xsd:documentation xml:lang="en-us">
                BitwiseFlags attribute specifies if the .NET enum will be decorated with a System.FlagsAttribute.                
              </xsd:documentation>
            </xsd:annotation>
          </xsd:attribute>
        </xsd:complexType>
        <xsd:key name="UniqueNamesOfEnumValues">
          <xsd:selector xpath=".//cps:Value" />
          <xsd:field xpath="@Name" />
        </xsd:key>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <!-- ############################################################ -->
  <!-- # CLASS #################################################### -->
  <xsd:complexType name="ClassMetadata">
    <xsd:sequence>
      <xsd:element name="Version" type="cps:VersionString">
        <xsd:annotation>
          <xsd:documentation xml:lang="en-us">
            Version element is semantically equivalent to the ModuleVersion entry in a module manifest (psd1) file.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="DefaultNoun" type="cps:Noun">
        <xsd:annotation>
          <xsd:documentation>
            DefaultNoun element specified the default noun for cmdlets defined in this document.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="InstanceCmdlets" minOccurs="0">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="GetCmdletParameters" type="cps:GetCmdletParameters">
              <xsd:unique name="UniqueCmdletParameterNamesUnderGetCmdletParametersElement_1">
                <xsd:selector xpath=".//cps:CmdletParameterMetadata" />
                <xsd:field xpath="@PSName" />
              </xsd:unique>
              <xsd:unique name="UniqueCmdletParameterAliasesUnderGetCmdletParametersElement_1">
                <xsd:selector xpath=".//cps:CmdletParameterMetadata" />
                <xsd:field xpath="@Aliases" />
              </xsd:unique>
            </xsd:element>
            <xsd:element name="GetCmdlet" type="cps:GetCmdletMetadata" minOccurs="0" />
            <xsd:element name="Cmdlet" type="cps:InstanceCmdletMetadata" minOccurs="0" maxOccurs="unbounded" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      
      <xsd:element name="StaticCmdlets" minOccurs="0">
        <xsd:complexType>
          <xsd:choice maxOccurs="unbounded">
            <xsd:element name="Cmdlet" type="cps:StaticCmdletMetadata">
              <xsd:unique name="UniqueParameterSetNamesInStaticCmdlet">
                <xsd:selector xpath=".//cps:Method" />
                <xsd:field xpath="@CmdletParameterSet" />
              </xsd:unique>
              <xsd:keyref name="DefaultCmdletParameterSetKeyRef" refer="cps:UniqueParameterSetNamesInStaticCmdlet">
                <xsd:selector xpath=".//cps:CmdletMetadata" />
                <xsd:field xpath="@DefaultCmdletParameterSet" />
              </xsd:keyref>
            </xsd:element>
          </xsd:choice>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="CmdletAdapterPrivateData" minOccurs="0">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="Data" maxOccurs="unbounded">
              <xsd:complexType>
                <xsd:simpleContent>
                  <xsd:extension base="xsd:string">
                    <xsd:attribute name="Name" type="cps:NonEmptyString" use="required" />
                  </xsd:extension>
                </xsd:simpleContent>
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
        <xsd:key name="UniqueNamesOfPrivateDataElements">
          <xsd:selector xpath=".//cps:Data" />
          <xsd:field xpath="@Name" />
        </xsd:key>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="CmdletAdapter" type="cps:PowerShellTypeIdentifier" use="optional">
      <xsd:annotation>
        <xsd:documentation xml:lang="en-us">
          CmdletAdapter attribute specifies which .NET class is responsible for translating
          cmdlet invocations into queries and method invocations.  
          
          If this attribute is ommited, then by default the cmdlets are translated into WMI queries and method invocations. 
          
          The class specified here has to be derived from Microsoft.PowerShell.Cmdletization.CmdletAdapter class.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="ClassName" type="cps:NonEmptyString" use="required">
      <xsd:annotation>
        <xsd:documentation>
          ClassName attribute specified the class that the cmdlets work against.
          
          Example: "root/cimv2/Win32_Process"
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="ClassVersion" type="cps:NonEmptyString" use="optional">
      <xsd:annotation>
        <xsd:documentation>
          ClassVersion attribute describes the version of the implementation of the class from the ClassName attribute.
          Contents of the ClassVersion attribute are passed without interpretation inside
          WMI's custom operation option named "MI_OPERATIONOPTIONS_PROVIDERVERSION".
          WMI infrastructure will compare this value against the contents of the [ClassVersion] qualifier of the WMI class
          and provide descriptive error message if it cannot invoke the WMI provider - i.e. if the client attempts to use a non-existant method, property or parameter).
          If WMI infrastructure can invoke the WMI provider, then the provider is responsible for further versioning decisions.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <!-- ############################################################ -->
  <!-- # CMDLETS ################################################## -->
  <xsd:complexType name="InstanceCmdletMetadata">
    <xsd:annotation>
      <xsd:documentation xml:lang="en-us">
        Cmdlet element under InstanceCmdlets element defines a cmdlet that wraps an instance method.
        
        Cmdlet parameters of a cmdlet defined this way are a sum of 
        1) cmdlet parameters defined through GetCmdletParameters elements
        2) cmdlet parameters mapped to input parameters of the method defined by Method element
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="CmdletMetadata" type="cps:CommonCmdletMetadata" />
      <xsd:element name="Method" type="cps:InstanceMethodMetadata">
        <xsd:unique name="UniqueCmdletParameterNamesUnderMethodElement_1">
          <xsd:selector xpath=".//cps:CmdletParameterMetadata" />
          <xsd:field xpath="@PSName" />
        </xsd:unique>
      </xsd:element>
      <xsd:element name="GetCmdletParameters" type="cps:GetCmdletParameters" minOccurs="0">
        <xsd:unique name="UniqueCmdletParameterNamesUnderGetCmdletParametersElement_2">
          <xsd:selector xpath=".//cps:CmdletParameterMetadata" />
          <xsd:field xpath="@PSName" />
        </xsd:unique>
        <xsd:unique name="UniqueCmdletParameterAliasesUnderGetCmdletParametersElement_2">
          <xsd:selector xpath=".//cps:CmdletParameterMetadata" />
          <xsd:field xpath="@Aliases" />
        </xsd:unique>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="StaticCmdletMetadata">
    <xsd:annotation>
      <xsd:documentation xml:lang="en-us">
        Cmdlet element under StaticCmdlets element defines a cmdlet that wraps one or more static methods.
        
        Cmdlet parameters of a cmdlet defined this way are mapped to input parameters of methods defined by Method element
        Each wrapped method corresponds to a parameter set of the cmdlet.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="CmdletMetadata">
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="cps:CommonCmdletMetadata">
              <xsd:attribute name="DefaultCmdletParameterSet" type="cps:ParameterSetName" use="optional" />
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="Method" type="cps:StaticMethodMetadata" maxOccurs="unbounded">
        <xsd:unique name="UniqueCmdletParameterNamesUnderMethodElement_2">
          <xsd:selector xpath=".//cps:CmdletParameterMetadata" />
          <xsd:field xpath="@PSName" />
        </xsd:unique>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="GetCmdletMetadata">
    <xsd:annotation>
      <xsd:documentation xml:lang="en-us">
        GetCmdlet element defines cmdlet metadata for the cmdlet that queries for object instances.
        
        If GetCmdlet element is ommited, then the default verb (&quot;Get&quot;) and noun (based on &lt;DefaultNoun&gt; element) are going to be used.
        
        GetCmdlet element is typically used for one of the following items:
        - To allow the Get cmdlet to have different GetCmdletParameters than other cmdlets (for example to make all parameters optional for Get cmdlet, but make some parameters mandatory for other cmdlets)
        - To change the verb of the cmdlet (for example to use &quot;Find&quot; where appropriate)
        - To define aliases for the cmdlet
        - To use obsolete attribute for the cmdlet
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="CmdletMetadata" type="cps:CommonCmdletMetadata" />
      <xsd:element name="GetCmdletParameters" type="cps:GetCmdletParameters" minOccurs="0">
        <xsd:unique name="UniqueCmdletParameterNamesUnderGetCmdletParametersElement_3">
          <xsd:selector xpath=".//cps:CmdletParameterMetadata" />
          <xsd:field xpath="@PSName" />
        </xsd:unique>
        <xsd:unique name="UniqueCmdletParameterAliasesUnderGetCmdletParametersElement_3">
          <xsd:selector xpath=".//cps:CmdletParameterMetadata" />
          <xsd:field xpath="@Aliases" />
        </xsd:unique>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="CommonCmdletMetadata">
    <xsd:sequence>
      <xsd:element name="Obsolete" type="cps:ObsoleteAttributeMetadata" minOccurs="0" />
    </xsd:sequence>
    <xsd:attribute name="Verb" type="cps:Verb" use="required">
      <xsd:annotation>
        <xsd:documentation xml:lang="en-us">
          Verb attribute specifies the verb of the cmdlet.
          
          Please refer to Cmdlet Design Guidelines for a list of approved verbs.
          
          Verb attribute is equivalent to the verbName parameter of System.Management.Automation.CmdletAttribute constructor.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="Noun" type="cps:Noun" use="optional">
      <xsd:annotation>
        <xsd:documentation xml:lang="en-us">
          Noun attribute specifies the noun of the cmdlet.
          
          If the Noun attribute is ommited, then contents of the DefaultNoun element are used.
          
          Noun attribute is equivalent to the nounName parameter of System.Management.Automation.CmdletAttribute constructor.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="Aliases" type="cps:NonEmptyListOfAliases" use="optional">
      <xsd:annotation>
        <xsd:documentation xml:lang="en-us">
          Aliases attribute specifies a white-space separated list of aliases for the cmdlet.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="ConfirmImpact" type="cps:ConfirmImpact" use="optional">
      <xsd:annotation>
        <xsd:documentation xml:lang="en-us">
          ConfirmImpact attribute specifies the impact of the cmdlet.
          
          ConfirmImpact attribute determines the default -Confirm and -WhatIf behavior.
          
          ConfirmImpact attribute is equivalent to the ConfirmImpact property of System.Management.Automation.CmdletAttribute.
          Presence of the ConfirmImpact attribute is equivalent to setting to true the SupportsShouldProcess property of System.Management.Automation.CmdletAttribute.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="HelpUri" type="xsd:anyURI" use="optional">
      <xsd:annotation>
        <xsd:documentation xml:lang="en-us">
          HelpUri attribute specifies the URI with the help content.
          
          HelpUri attribute is used for the following help experience: Get-Help -Online &lt;cmdlet name&gt;
          
          HelpUri attribute is equivalent to the HelpUri property of System.Management.Automation.CmdletAttribute
          
          Example: "http://go.microsoft.com/fwlink/?LinkID=113309"
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <!-- ############################################################ -->
  <!-- # METHODS ################################################## -->
  <xsd:complexType name="StaticMethodMetadata">
    <xsd:complexContent>
      <xsd:extension base="cps:CommonMethodMetadata">
        <xsd:sequence>
          <xsd:element name="Parameters" minOccurs="0">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="Parameter" type="cps:StaticMethodParameterMetadata" maxOccurs="unbounded" />
              </xsd:sequence>
            </xsd:complexType>
            <xsd:key name="UniqueParameterNamesWithinStaticMethod">
              <xsd:selector xpath=".//cps:Parameter" />
              <xsd:field xpath="@ParameterName" />
            </xsd:key>
            <xsd:unique name="UniquePositionWithinStaticMethodParameters">
              <xsd:selector xpath=".//cps:CmdletParameterMetadata" />
              <xsd:field xpath="@Position" />
            </xsd:unique>
          </xsd:element>
        </xsd:sequence>
        
        <xsd:attribute name="CmdletParameterSet" type="cps:ParameterSetName" use="optional">
          <xsd:annotation>
            <xsd:documentation xml:lang="en-us">
              CmdletParameterSet attribute specifies the name of a cmdlet parameter set associated with the static method.
              
           If CmdletParameterSet is ommited, then the name of the cmdlet parameter set is auto-generated based on the name of the method.
            </xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="InstanceMethodMetadata">
    <xsd:complexContent>
      <xsd:extension base="cps:CommonMethodMetadata">
        <xsd:sequence>
          <xsd:element name="Parameters" minOccurs="0">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="Parameter" type="cps:InstanceMethodParameterMetadata" maxOccurs="unbounded" />
              </xsd:sequence>
            </xsd:complexType>
            <xsd:key name="UniqueParameterNamesWithinMethod">
              <xsd:selector xpath=".//cps:Parameter" />
              <xsd:field xpath="@ParameterName" />
            </xsd:key>
            <xsd:unique name="UniquePositionWithinMethodParameters">
              <xsd:selector xpath=".//cps:CmdletParameterMetadata" />
              <xsd:field xpath="@Position" />
            </xsd:unique>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="CommonMethodMetadata">
    <xsd:sequence>
      <xsd:element name="ReturnValue" minOccurs="0">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="Type" type="cps:TypeMetadata" />
            <xsd:element name="CmdletOutputMetadata" type="cps:CmdletOutputMetadata" minOccurs="0" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="MethodName" type="cps:NonEmptyString" use="required">
      <xsd:annotation>
        <xsd:documentation>
          MethodName attribute specified the name of the method that the cmdlet invocations are mapped to.
          
          Some method names are recognized and handled in a special way. 
          "cim:CreateInstance" is mapped to the WMI's static, intrinsic CreateInstance method.  Names of method parameters have to map to names of properties.
          "cim:ModifyInstance" is mapped to the WMI's instance, intrinsic ModifyInstance method.  Names of method parameters have to map to names of properties.
          "cim:DeleteInstance" is mapped to the WMI's instance, intrinsic DeleteInstance method.  All method parameters are ignored.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType name="StaticMethodParameterMetadata">
    <xsd:complexContent>
      <xsd:extension base="cps:CommonMethodParameterMetadata">
        <xsd:sequence>
          <xsd:element name="CmdletParameterMetadata" type="cps:CmdletParameterMetadataForStaticMethodParameter" minOccurs="0" />
          <xsd:element name="CmdletOutputMetadata" type="cps:CmdletOutputMetadata" minOccurs="0" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="InstanceMethodParameterMetadata">
    <xsd:complexContent>
      <xsd:extension base="cps:CommonMethodParameterMetadata">
        <xsd:sequence>
          <xsd:element name="CmdletParameterMetadata" type="cps:CmdletParameterMetadataForInstanceMethodParameter" minOccurs="0" />
          <xsd:element name="CmdletOutputMetadata" type="cps:CmdletOutputMetadata" minOccurs="0" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="CommonMethodParameterMetadata">
    <xsd:sequence>
      <xsd:element name="Type" type="cps:TypeMetadata" />
    </xsd:sequence>
    <xsd:attribute name="ParameterName" type="cps:NonEmptyString" use="required" />
    <xsd:attribute name="DefaultValue" type="xsd:string" use="optional" />
  </xsd:complexType>
  <!-- ############################################################ -->
  <!-- # PROPERTIES METADATA ###################################### -->
  <xsd:complexType name="GetCmdletParameters">
    <xsd:annotation>
      <xsd:documentation xml:lang="en-us">
        GetCmdletParameters element defines cmdlet parameters used to select object instances.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="QueryableProperties" minOccurs="0">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="Property" type="cps:PropertyMetadata" maxOccurs="unbounded" />
          </xsd:sequence>
        </xsd:complexType>
        <xsd:key name="PropertyNameUnderQueryableProperties">
          <xsd:selector xpath=".//cps:Property" />
          <xsd:field xpath="@PropertyName" />
        </xsd:key>
      </xsd:element>
      <xsd:element name="QueryableAssociations" minOccurs="0">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="Association" type="cps:Association" maxOccurs="unbounded" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="QueryOptions" minOccurs="0">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="Option" type="cps:QueryOption" maxOccurs="unbounded" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="DefaultCmdletParameterSet" type="cps:ParameterSetName" use="optional" />
  </xsd:complexType>
  <xsd:complexType name="QueryOption">
    <xsd:sequence>
      <xsd:element name="Type" type="cps:TypeMetadata" />
      <xsd:element name="CmdletParameterMetadata" type="cps:CmdletParameterMetadataForGetCmdletParameter" minOccurs="0" />
    </xsd:sequence>
    <xsd:attribute name="OptionName" type="cps:NonEmptyString" use="required" />
  </xsd:complexType>
  <xsd:complexType name="Association">
    <xsd:sequence>
      <xsd:element name="AssociatedInstance">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="Type" type="cps:TypeMetadata" />
            <xsd:element name="CmdletParameterMetadata" type="cps:CmdletParameterMetadataForGetCmdletFilteringParameter" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="Association" type="cps:NonEmptyString" use="required">
      <xsd:annotation>
        <xsd:documentation>
          Association attribute specifies the name of the association between the cmdlet argument and the instances the cmdlet acts against.
          
          Association attribute is equivalent to the associationClassName parameter of EnumerateAssociatedInstances method of Microsoft.Management.Infrastructure.CimSession class.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="SourceRole" type="cps:NonEmptyString" use="required">
      <xsd:annotation>
        <xsd:documentation>
          SourceRole attribute specifies the role of the cmdlet argument (in the association between the cmdlet argument and the instances the cmdlet acts against).
          SourceRole attribute is equivalent to the sourceRole parameter of EnumerateAssociatedInstances method of Microsoft.Management.Infrastructure.CimSession class.
          SourceRole should be the name of a property on the class specified in the Association attribute.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="ResultRole" type="cps:NonEmptyString" use="required">
      <xsd:annotation>
        <xsd:documentation>
          ResultRole attribute specifies the role of the cmdlet argument (in the association between the cmdlet argument and the instances the cmdlet acts against).
          ResultRole attribute is equivalent to the resultRole parameter of EnumerateAssociatedInstances method of Microsoft.Management.Infrastructure.CimSession class.
          ResultRole should be the name of a property on the class specified in the Association attribute.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType name="PropertyMetadata">
    <xsd:sequence>
      <xsd:element name="Type" type="cps:TypeMetadata" />
      <xsd:choice maxOccurs="unbounded">
        <xsd:element name="RegularQuery" type="cps:WildcardablePropertyQuery">
          <xsd:annotation>
            <xsd:documentation xml:lang="en-us">
              RegularQuery element defines a cmdlet parameter that limits which objects will be processed by the cmdlet
              - only objects with a property value equal to the cmdlet parameter argument will be processed.
              
              Comparison of strings and characters is always case-insensitive.
              
              Example for &lt;RegularQuery&gt; element that is applied to an ObjectId property:
                The following cmdlet invocation:
                  Get-MyObject -ObjectId 123,456
                will be translated into the following WQL query:
                  SELECT * FROM MyObject WHERE ((ObjectId = 123) OR (ObjectId = 456)) 
                  
              Example for &lt;RegularQuery AllowGlobbing=&quot;false&quot; &gt; element that is applied to a Name property:
                The following cmdlet invocation:
                  Get-MyObject -LiteralName p*,q* 
                will be translated into the following WQL query:
                  SELECT * FROM MyObject WHERE ((Name = &quot;p*&quot;) OR (Name = &quot;q*&quot;)) 
                  
              Example for &lt;RegularQuery AllowGlobbing=&quot;true&quot; &gt; element that is applied to a Name property:
                The following cmdlet invocation:
                  Get-MyObject -Name p*,q* 
                will be translated into the following WQL query:
                  SELECT * FROM MyObject WHERE ((Name like &quot;p%&quot;) OR (Name like &quot;q%&quot;)) 
            </xsd:documentation>
          </xsd:annotation>
        </xsd:element>
        
        <xsd:element name="ExcludeQuery" type="cps:WildcardablePropertyQuery">
          <xsd:annotation>
            <xsd:documentation xml:lang="en-us">
              ExcludeQuery element defines a cmdlet parameter that limits which objects will be processed by the cmdlet
              - only objects with a property value *not* equal to the cmdlet parameter argument will be processed.
              
              Comparison of strings and characters is always case-insensitive.
              
              Example for &lt;ExcludeQuery&gt; element that is applied to an ObjectId property:
                The following cmdlet invocation:
                  Get-MyObject -ExcludeObjectId 123,456
                will be translated into the following WQL query:
                  SELECT * FROM MyObject WHERE ((NOT Name = 123) AND (NOT Name = 456)) 
            </xsd:documentation>
          </xsd:annotation>
        </xsd:element>
        <xsd:element name="MinValueQuery" type="cps:PropertyQuery">
          <xsd:annotation>
            <xsd:documentation xml:lang="en-us">
              MinValueQuery element defines a cmdlet parameter that limits which objects will be processed by the cmdlet
              - only objects with a property value greater than or equal to the cmdlet parameter argument will be processed.
              
              Example for &lt;MinValueQuery&gt; element that is applied to an WorkingSet property:
                The following cmdlet invocation:
                  Get-MyObject -MinWorkingSet 123
                will be translated into the following WQL query:
                  SELECT * FROM MyObject WHERE (WorkingSet &gt;= 123)
            </xsd:documentation>
          </xsd:annotation>
        </xsd:element>
        <xsd:element name="MaxValueQuery" type="cps:PropertyQuery">
          <xsd:annotation>
            <xsd:documentation xml:lang="en-us">
              MaxValueQuery element defines a cmdlet parameter that limits which objects will be processed by the cmdlet
              - only objects with a property value less than or equal to the cmdlet parameter argument will be processed.
              Example for &lt;MaxValueQuery&gt; element that is applied to an WorkingSet property:
                The following cmdlet invocation:
                  Get-MyObject -MaxWorkingSet 123
                will be translated into the following WQL query:
                  SELECT * FROM MyObject WHERE (WorkingSet =&lt; 123)
            </xsd:documentation>
          </xsd:annotation>
        </xsd:element>
      </xsd:choice>
    </xsd:sequence>
    <xsd:attribute name="PropertyName" type="cps:NonEmptyString" use="required" />
  </xsd:complexType>
  <xsd:complexType name="WildcardablePropertyQuery">
    <xsd:complexContent>
      <xsd:extension base="cps:PropertyQuery">
        <xsd:attribute name="AllowGlobbing" type="xsd:boolean" use="optional">
          <xsd:annotation>
            <xsd:documentation xml:lang="en-us">
              AllowGlobbing attribute specifies if strings with globbing characters (wildcards) are supported.  
              
              Example of a wildcard: "foo*" (matches all strings beginning with "foo")
              
              If AllowGlobbing attribute is ommited then its value is based on the type of the filtered property.
            </xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PropertyQuery">
    <xsd:sequence>
      <xsd:element name="CmdletParameterMetadata" type="cps:CmdletParameterMetadataForGetCmdletFilteringParameter" minOccurs="0" />
    </xsd:sequence>
  </xsd:complexType>
  <!-- ############################################################ -->
  <!-- # COMMON PROPERTIES/PARAMETERS METADATA##################### -->
  <xsd:complexType name="CmdletParameterMetadataForStaticMethodParameter">
    <xsd:complexContent>
      <xsd:extension base="cps:CmdletParameterMetadata">
        <xsd:attribute name="ValueFromPipeline" type="xsd:boolean" use="optional" />
        <xsd:attribute name="ValueFromPipelineByPropertyName" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="CmdletParameterMetadataForInstanceMethodParameter">
    <xsd:complexContent>
      <xsd:extension base="cps:CmdletParameterMetadata">
        <xsd:attribute name="ValueFromPipelineByPropertyName" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="CmdletParameterMetadataForGetCmdletFilteringParameter">
    <xsd:complexContent>
      <xsd:extension base="cps:CmdletParameterMetadataForGetCmdletParameter">
        <xsd:attribute name="ErrorOnNoMatch" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="CmdletParameterMetadataForGetCmdletParameter">
    <xsd:complexContent>
      <xsd:extension base="cps:CmdletParameterMetadata">
        <xsd:attribute name="ValueFromPipeline" type="xsd:boolean" use="optional" />
        <xsd:attribute name="ValueFromPipelineByPropertyName" type="xsd:boolean" use="optional" />
        
        <xsd:attribute name="CmdletParameterSets" type="cps:NonEmptyListOfParameterSetNames" use="optional">
          <xsd:annotation>
            <xsd:documentation xml:lang="en-us">
              CmdletParameterSets attribute is a whitespace-separated list of names of parameter sets,
              that the cmdlet parameter should belong to.
              
              If this parameter is ommited, then the cmdlet parameter belongs to all parameter sets.
            </xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="CmdletParameterMetadata">
    <xsd:sequence>
      <xsd:element name="AllowEmptyCollection" minOccurs="0" />
      <xsd:element name="AllowEmptyString" minOccurs="0" />
      <xsd:element name="AllowNull" minOccurs="0" />
      <xsd:element name="ValidateNotNull" minOccurs="0" />
      <xsd:element name="ValidateNotNullOrEmpty" minOccurs="0" />
      <xsd:element name="ValidateCount" minOccurs="0">
        <xsd:complexType>
          <xsd:attribute name="Min" type="xsd:nonNegativeInteger" use="required" />
          <xsd:attribute name="Max" type="xsd:nonNegativeInteger" use="required" />
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="ValidateLength" minOccurs="0">
        <xsd:complexType>
          <xsd:attribute name="Min" type="xsd:nonNegativeInteger" use="required" />
          <xsd:attribute name="Max" type="xsd:nonNegativeInteger" use="required" />
        </xsd:complexType>
      </xsd:element>
      <!-- ValidatePattern omitted - CDXML does not allow DOS attacks against PS client --> 
      <xsd:element name="ValidateRange" minOccurs="0">
        <xsd:complexType>
          <xsd:attribute name="Min" type="xsd:integer" use="required" />
          <xsd:attribute name="Max" type="xsd:integer" use="required" />
        </xsd:complexType>
      </xsd:element>
      <!-- ValidateScript omitted - CDXML does not allow execution of arbitrary code in PS client --> 
      <xsd:element name="ValidateSet" minOccurs="0">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="AllowedValue" type="xsd:string" maxOccurs="unbounded" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="Obsolete" type="cps:ObsoleteAttributeMetadata" minOccurs="0" />
    </xsd:sequence>
    <xsd:attribute name="IsMandatory" type="xsd:boolean" use="optional" />
    <xsd:attribute name="Aliases" type="cps:NonEmptyListOfAliases" use="optional">
      <xsd:annotation>
        <xsd:documentation xml:lang="en-us">
          Aliases attribute specifies a white-space separated list of aliases for the cmdlet parameter.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="PSName" type="cps:CmdletParameterName" use="optional">
      <xsd:annotation>
        <xsd:documentation xml:lang="en-us">
          PSName attribute specifies the name of a cmdlet parameter.
          
          If PSName attribute is ommited then it is based on the contents of PropertyName or ParameterName or OptionName attribute (whichever one is applicable).
          
          Example:
            &lt;Property PropertyName=&quot;Name&quot;&gt;
              ...
              &lt;!-- &quot;Name&quot; is used as the cmdlet parameter name --&gt;
              &lt;RegularQuery AllowGlobbing=&quot;true&quot; /&gt;
              &lt;!-- &quot;LiteralName&quot; is used as the cmdlet parameter name --&gt;
              &lt;RegularQuery AllowGlobbing=&quot;false&quot;&gt;
                &lt;CmdletParameterMetadata PSName=&quot;LiteralName&quot; /&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="Position" type="xsd:nonNegativeInteger" use="optional">
      <xsd:annotation>
        <xsd:documentation xml:lang="en-us">
          Position attribute specifies position of the cmdlet parameter.
          
          If Position attribute is ommited, then the cmdlet parameter cannot be used positionally - the user always has to explicitly specify the name of the parameter.
          
          System may change relative parameter positions to guarantee that cmdlet parameters defined by GetCmdletParameters element are always
          before cmdlet parameters defined under Method element. 
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType name="CmdletOutputMetadata">
    <xsd:sequence>
      <xsd:element name="ErrorCode" minOccurs="0">
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="PSName" type="cps:CmdletOutputName" use="optional" />
  </xsd:complexType>
  <xsd:complexType name="ObsoleteAttributeMetadata">
    <xsd:attribute name="Message" type="cps:ObsoleteMessage" use="optional" />
  </xsd:complexType>
  <xsd:complexType name="TypeMetadata">
    <xsd:attribute name="PSType" type="cps:PowerShellTypeIdentifier" use="required">
      <xsd:annotation>
        <xsd:documentation xml:lang="en-us">
          PSType attribute specifies the name of the .NET type of the cmdlet parameter.
          
          Example: "System.String"
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="ETSType" type="cps:NonEmptyString" use="optional">
      <xsd:annotation>
        <xsd:documentation xml:lang="en-us">
          ETSType attribute specifies the PowerShell type name of the type of the cmdlet parameter.
          
          ETSType attribute is equivalent to System.Management.Automation.PSTypeNameAttribute.
          
          Example: "Microsoft.Management.Infrastructure.CimInstance#Win32_Process"
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <!-- ############################################################ -->
  <!-- # SIMPLE TYPES ############################################# -->
  <xsd:simpleType name="NonEmptyListOfParameterSetNames">
    <xsd:restriction>
      <xsd:simpleType>
        <xsd:list itemType="cps:ParameterSetName" />
      </xsd:simpleType>
      <xsd:minLength value="1" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="NonEmptyListOfAliases">
    <xsd:restriction>
      <xsd:simpleType>
        <xsd:list itemType="cps:Alias" />
      </xsd:simpleType>
      <xsd:minLength value="1" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="VersionString">
    <xsd:annotation>
      <xsd:documentation>
        Represents a version number that consist of two to four components: major, minor, build, and revision.
        String representation of a version is "major.minor[.build[.revision]]" (optional components are shown in square brackets).
        All defined components MUST be integers greater than or equal to 0.
        For example, if the major number is 6, the minor number is 2, the build number is 1, and the revision number is 3, then string representation of the version would be "6.2.1.3".
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[12]?[0-9]{1,9}\.[12]?[0-9]{1,9}(\.[12]?[0-9]{1,9}(\.[12]?[0-9]{1,9})?)?" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="EnumValueName">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1" />
      <xsd:maxLength value="100" />
      <xsd:pattern value="&csharpIdentifierRegex;" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="EnumTypeName">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1" />
      <xsd:maxLength value="200" />
      <xsd:pattern value="&csharpNamespaceRegex;" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="PowerShellTypeIdentifier">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1" />
      <xsd:maxLength value="1000" />
      <xsd:pattern value="&clrTypeRegex;" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="NonEmptyString">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="Verb">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1" />
      <xsd:maxLength value="100" />
      <xsd:pattern value="&powerShellVerbRegex;" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="Noun">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1" />
      <xsd:maxLength value="100" />
      <xsd:pattern value="&powerShellNounRegex;" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="Alias">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1" />
      <xsd:maxLength value="100" />
      <xsd:pattern value="&powerShellAliasRegex;" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="ParameterSetName">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1" />
      <xsd:maxLength value="100" />
      <xsd:pattern value="&powerShellParameterSetRegex;" /> 
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="ObsoleteMessage">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1" />
      <xsd:maxLength value="100" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="CmdletParameterName">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1" />
      <xsd:maxLength value="100" />
      <xsd:pattern value="&powerShellCmdletParameterRegex;" /> 
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="CmdletOutputName">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1" />
      <xsd:maxLength value="100" />
      <xsd:pattern value="&powerShellCmdletParameterRegex;" /> 
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="ConfirmImpact">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="None" />
      <xsd:enumeration value="Low" />
      <xsd:enumeration value="Medium" />
      <xsd:enumeration value="High" />
    </xsd:restriction>
  </xsd:simpleType>
</xsd:schema>
v4.0.30319
#Strings
#GUID
#Blob
<Module>
Microsoft.PowerShell.Commands.Management.resources
NavigationResources.en.resources
ClipboardResources.en.resources
ClearRecycleBinResources.en.resources
ManagementMshSnapInResources.en.resources
WmiResources.en.resources
ControlPanelResources.en.resources
HotFixResources.en.resources
WebServiceResources.en.resources
TransactionResources.en.resources
EventlogResources.en.resources
TimeZoneResources.en.resources
ComputerInfoResources.en.resources
ComputerResources.en.resources
ServiceResources.en.resources
ProcessResources.en.resources
CmdletizationResources.en.resources
Microsoft.PowerShell.Commands.Management.resources.dll
_CorDllMain
mscoree.dll
VS_VERSION_INFO
VarFileInfo
Translation
StringFileInfo
040904b0
CompanyName
Microsoft Corporation
FileDescription
FileVersion
10.0.22621.1
InternalName
Microsoft.PowerShell.Commands.Management.resources.dll
LegalCopyright
Copyright (c) Microsoft Corporation. All rights reserved.
OriginalFilename
Microsoft.PowerShell.Commands.Management.resources.dll
ProductName
Microsoft (R) Windows (R) Operating System
ProductVersion
10.0.22621.1
