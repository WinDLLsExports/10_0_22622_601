!This program cannot be run in DOS mode.
.text
`.rdata
@.data
.pdata
@.didat
.rsrc
@.reloc
L$ SVWAVH
(A^_^[
R$fA;Z*
fA9Z*v$A
L$ E3
@SUVWATAUAVAWH
L$pH3
A_A^A]A\_^][
@USVWATAUAVAWH
A_A^A]A\_^[]
@USVWATAUAVAWH
A_A^A]A\_^[]
L$XH3
@SVWATAVAWH
L$XH3
hA_A^A\_^[
L$XH3
@SVWH
L$XH3
@SVWAVAWH
L$XH3
`A_A^_^[
@SVWATAUAVAWH
A_A^A]A\_^[
@SVWATAUAVAWH
L$hH3
pA_A^A]A\_^[
@SVWATAUAVAWH
L$hH3
pA_A^A]A\_^[
UWAWH
L9?t,A
L$XH3
\$ UVWH
@USVWATAUAVAWH
A_A^A]A\_^[]
@USVWAVH
A^_^[]
@USVWAVH
A^_^[]
L$@H3
\$ UVWH
L$XH3
L$XH3
UWAVH
UVWATAUAVAWH
A_A^A]A\_^]
fA9,Qu
fA9,Qu
x AVH
SVWATAUAVAWH
0A_A^A]A\_^[
x ATAVAWH
 A_A^A\
H WATAUAVAWH
 A_A^A]A\_
WAVAWH
 A_A^_
@USVWATAUAVAWH
A_A^A]A\_^[]
UVWATAUAVAWH
;Ewt/@
(L$PL
A_A^A]A\_^]
L9L$ps(
D9D$0t(
UVWAVAWH
D99w/
D9:w/
`A_A^_^]
T$0E3
UVWAVAWH
D99w,
D9?w/
A_A^_^]
D$ E3
T$8E3
VWAVH
!\$XI
0A^_^
@USVWAVH
@A^_^[]
@SVWATAUAVAWH
A_A^A]A\_^[
L9d$`H
L9d$`
D$PH;
L;d$pt
D$`L;
UVWAVAWH
\$`E3
L$pE3
fF9<Fu
A_A^_^]
\$ UVWATAUAVAWH
fD9)H
D9l$(|
D$,D8-i
t(D8-
L$ SUVWH
L$hH+
f9,Cu
(_^][
\$ UVWAVAWH
t,D8=2}
L9{Hu
A_A^_^]
UVWATAUAVAWH
@8=Hx
ty@8=
t"@8=
fA9>u
@A_A^A]A\_^]
@USVWATAVAWH
fD9!H
D9d$(
D8%jt
D8%)t
t(D8%
A_A^A\_^[]
f9,Ou
WAVAWH
0A_A^_
@USVWAVH
L91t/A
0A^_^[]
[ VWATAVAWH
D$xfD
CD$hI
rD9d$Tt@H
A_A^A\_^
SVWAVAWH
D$pfE
CD$`I
A_A^_^[
@SVWATAUAVAWH
tCM9<$t:
A_A^A]A\_^[
SVWATAUAVAWH
t=M9}
D$hH#
A_A^A]A\_^[
SVWATAUAVAWH
t=M9}
D$hH#
A_A^A]A\_^[
SVWATAUAVAWH
 M9f@
M9fHu
M9fPu
A_A^A]A\_^[
D9d$8u
D$<A;
l$`M9f
t3E9&u
L$8D9d$dt
D9d$Pt
D9d$Tt
D9d$Xt
D9d$\t
D9d$`t
L$<M9
D9d$d
D9d$P
D9d$T
D9d$X
D9d$\
D9d$`
L$<A;Np
D9d$dt
D9d$Pt
D9d$Tt
D9d$Xt
D9d$\t
D9d$`t
SVWATAUAVAWH
A_A^A]A\_^[
UVWAVAWH
L9:t,A
A_A^_^]
SVWATAUAVAWH
A_A^A]A\_^[
@USVWATAUAVAWH
L97t/A
xA_A^A]A\_^[]
t$ UWATAVAWH
M9 t,A
A_A^A\_]
pj^XV
pAT^V.m
pAT^V.m
f9<Au
f9<Bu
D$XH!\$@H
T$pH!\$XE3
D$8E3
H!\$0H
!\$ H
D$ E3
t$ WH
t$ WH
t$ WH
t$ WH
t$ WH
t$ WH
UVWATAUAVAWH
A_A^A]A\_^]
t$ WH
9\$Hu
@SVWATAUAVAWH
D$ E3
f9D$x
l$D9|$dt(
L$@fD
A_A^A]A\_^[
@SVWATAUAVAWH
L$XE3
A_A^A]A\_^[
WATAUAVAWH
L$PE3
D$pL;
A_A^A]A\_
UVWATAUAVAWH
`A_A^A]A\_^]
UVWAVAWH
!}@!}0H
H!}HH
;E@s;H
PA_A^_^]
@SVWATAUAVAWH
0A_A^A]A\_^[
t$ UWATAVAWH
H9\$hu/A
A_A^A\_]
x AVH
\$ UVWH
D$0H;
L$ SVWH
t$ WATAUAVAWH
f9<Au
f9<Au
fD94Ou
tG9)u
|$(H;
|$0H;
|$8H;
|$HH;
|$pH;
t$XE3
t4E88t/H
E8<0u
 A_A^A]A\_
SVWAVAWH
`A_A^_^[
D$@E3
x UAVAWH
T$0H+
L$0fD
A_A^]
t/HcL$$A
HcD$ H
UVWATAUAVAWH
}HL9M@t
L97sKI
 A_A^A]A\_^]
x AVH
x AVH
uPH9i
u%H!\$8H
x AVH
t$ UWAVH
t$ WH
UVWATAUAVAWH
L$@H+
L$@fD
A_A^A]A\_^]
t:fA9(t4H
fA9,@u
VWAVH
D$PE3
0A^_^
s WATAUAVAWH
0A_A^A]A\_
WATAUAVAWH
fA;Tn
fA;Tn
fD9,B
0A_A^A]A\_
{ ATAVAWH
0A_A^A\
WATAUAVAWH
A_A^A]A\_
SVWATAUAVAWH
CT$`H
A_A^A]A\_^[
@USVWATAUAVAWH
A_A^A]A\_^[]
@SVWATAUAVAWH
A_A^A]A\_^[
@SVWATAUAVAWH
A_A^A]A\_^[
UVWATAUAVAWH
T$ E3
L$ E3
H9M v2H
H9M@v0H
L$LE3
vCL9N(
L$@E3
A_A^A]A\_^]
9;\$HtX
@SVWH
!\$XH
!\$`H
H!\$(H
D$ E3
VWAVH
0A^_^
{ ATAVAWH
CL$HL
L$xH3
A_A^A\
VWATAVAWH
fD9 t
fD9 t
fD9 t
0A_A^A\_^
H!\$ E3
D$(E3
!\$ H
WAVAWH
L$0E3
t$ E3
@A_A^_
!\$ H
D$(E3
WATAUAVAWH
 A_A^A]A\_
q0R^G'
q0R^G'
q:_0#
|$ AVH
VWAVH
p:_0#
p:_0#
p:_0#
@A^_^
q:_0#
\$ UH
M H1E
 H3E H3E
p:_0#
@SVWH
ntelA
ineID
oD$ f
oL$0f
oT$@f
o\$PH
x AVH
bad allocation
ext-ms-win-devmgmt-policy-l1-1-0
ext-ms-win-devmgmt-policy-l1-1-1
ext-ms-win-devmgmt-policy-l1-1-2
ext-ms-win-devmgmt-policy-l1-1-3
ext-ms-win-devmgmt-policy-l1-1-0.dll
"|Js0
FUnknown exception
bad array new length
string too long
CPR(pdwProfileId)
onecoreuap\shell\devicedirectory\mdmcommon\dll\dllmain.cpp
CPR(pdwRequestId)
CPR(pdwTimestamp)
CPR(ppbCommandData)
CPR(pcbCommandData)
CHR(MdmCommandParser::HandlePushNotification(wnfStateName, &pTaskRequest))
CPR(pbCommandDataCopy)
CBR(memcpy_s(pbCommandDataCopy, cbCommandData, pbCommandData, cbCommandData) == 0)
CPR(pbCommand)
CPR(pTaskRequestParser)
CHR(pTaskRequestParser->ParseNonEncryptedRequest( pbCommand, cbCommandSize, &pTaskRequest))
CPR(pbCurrentSecret)
CPR(pbUpdatingSecret)
CPR(pfUpdateSecret)
CHR(pTaskRequestParser->ParseEncryptedRequest( pbCommand, cbCommandSize, &pTaskRequest, dwCurrentSecretId, dwUpdatingSecretId, pbCurrentSecret, cbCurrentSecretSize, pbUpdatingSecret, cbUpdatingSecretSize, pfUpdateSecret))
CHR(MdmCommandParser::ParseCommandData(pbCommand, cbCommand, pCommandAndAcknowledgement))
CHR(MdmCommandParser::ParseLockCommand(pbCommand, cbCommand, ppwszPin, ppwszCpn, pfRingAfterLock, vCids))
CHR(MdmCommandParser::ParseLocateCommand(pbCommand, cbCommand, pfEnableLocation))
CHR(MdmHttpWrapper::RegisterDevice(pdwHttpStatus, pwszTicket, pParameters))
CPR(pfShouldRegister)
CHR(MdmHttpWrapper::CreateRegisterDeviceRequestBody( pParameters, wstrBody, wstrNotUsed, wstrNotUsed, wstrNotUsed, wstrNotUsed, wstrNotUsed, wstrNotUsed, wstrNotUsed, &fNotUsed))
CHR(MdmHttpWrapper::RegisterUserDevice( pdwHttpStatus, pwszUserTicket, eTrigger, pDeviceInfo, pUserInfo))
CHR(MdmHttpWrapper::UpdateStatus( pdwHttpStatus, pwszTicket, dwRequestId, eCommandStatus, eCommandSource, dwRetries, hrErrorCode, ftCommandReceived, pftWorkStarted, pftWorkFinished, pLocation, pAuthorizedCids, pAdmins, pDeviceOwners, pStandardUsers, pConnectedAdmins, pfMasterLocationSwitchOn, pfLocationSyncEnabled, pfMasterLocationEnabledByClient, pfLocationSyncEnabledByClient, ppwszBuffer))
CHR(MdmHttpWrapper::MdmSendRequestToCS( pwszMethod, pwszPath, pwszMainTicket, pwszSecondaryTicket, pRequestJsonObject, ppwszBuffer, pdwHttpStatus))
CHR(MdmHttpWrapper::MdmSendRequestToCSWithDelegation( pwszMethod, pwszPath, pwszDeviceTicket, pwszDelegationTicket, pRequestJsonObject, ppwszBuffer, pdwHttpStatus))
CPR(ppwszBuffer)
CBR(*ppwszBuffer == nullptr)
CHR(MdmSettings::GetServiceTarget(strServiceTarget))
CPR(pwszBuffer)
CHR(StringCchPrintfW(pwszBuffer, strServiceTarget.length() + 1, strServiceTarget.c_str()))
CHR(MdmLocationHelper::GetLocation(desiredAccuracy, pResult))
CPR(pfRegistered)
CHR(MdmSettings::HasRegisteredWithService(eDeviceType, &fRegistered, &fCurrentVersionRegistered))
CPR(pAdmins)
CPR(pDeviceOwners)
CPR(pStandardUsers)
CPR(pfChanged)
CHR(MdmSettings::GetConnectedAccountsHash(eDeviceType, wstrConnectedAccountsHashFromRegistry))
CHR(MdmHttpWrapper::CreateConnectedAccountsEntity(pAdmins, pDeviceOwners, pStandardUsers, pConnectedAdmins, pConnectedAccounts.GetAddressOf()))
CHR(pConnectedAccounts->Stringify(hstrConnectedAccounts.GetAddressOf()))
CHR(MdmCrypto::HashString(wstrConnectedAccounts, wstrConnectedAccountsNewHash))
CPR(pMobileNetworks)
CHR(MdmSettings::GetMobileNetworksHash(eDeviceType, wstrMobileNetworksHashFromRegistry))
CHR(pMobileNetworks->Stringify(hstrMobileNetworks.GetAddressOf()))
CHR(MdmCrypto::HashString(wstrMobileNetworks, wstrMobileNetworksNewHash))
CPR(pProtectionState)
CHR(MdmSettings::GetProtectionStateHash(eDeviceType, wstrProtectionStateHashFromRegistry))
CHR(pProtectionState->Stringify(hstrProtectionState.GetAddressOf()))
CHR(MdmCrypto::HashString(wstrProtectionState, wstrProtectionStateNewHash))
CPR(pfEnabled)
CPR(pfConfiguredByPolicy)
CHR(MdmSettings::IsUnmanagedFmdEnabled(pfEnabled))
CHR(hr)
CHR(((HRESULT)0x80070005L))
CHR(MdmAccountHelper::EnumerateConnectedUsers(pvAdmins, pvDeviceOwners, pvStandardUsers))
CHR(MdmAccountHelper::EnumerateAllUsers(pvAdmins, pvDeviceOwners, pvStandardUsers))
CHR(MdmAccountHelper::GetSidsByConnectedCids(vCids, vSids))
CHR(MdmAccountHelper::EnumerateAllUsers(&vAdmins, &vDeviceOwners, nullptr))
CBR(cMaxCount >= 1)
CPR(pcActualCount)
CPR(pcchCids)
CHR(MdmUsersAuthorizedToSeeLocation(&vCids))
CBR(cchCids >= cchNeeded)
CBR(wcscpy_s(pwszCids, cchCids, wstrCids.c_str()) == 0)
vector too long
Windows.Devices.Geolocation.Geolocator
Windows.Data.Json.JsonValue
Windows.Data.Json.JsonObject
JTk_S/
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmtaskrequestparserimpl.cpp
CBR(cbCommandSize > 0)
CPR(ppRequest)
CBR(*ppRequest == 0)
CBR(spRequest)
CHR(DecryptCommand( pbCommand, cbCommandSize, fIsSecureChannel, &blobDecryptedData, dwCurrentSecretId, dwUpdatingSecretId, pbCurrentSecret, cbCurrentSecretSize, pbUpdatingSecret, cbUpdatingSecretSize, pfUpdateSecret))
CHR(CopyBytes( blobDecryptedData.pbData, blobDecryptedData.cbData, c_rgdwCommandInfo[CmdInfo_ProfileId][1], c_rgdwCommandInfo[CmdInfo_ProfileId][0] - dwDataOffset, rgbData, (sizeof(*RtlpNumberOf(rgbData))) ))
CHR(CopyBytes( blobDecryptedData.pbData, blobDecryptedData.cbData, c_rgdwCommandInfo[CmdInfo_ReqId][1], c_rgdwCommandInfo[CmdInfo_ReqId][0] - dwDataOffset, rgbData, (sizeof(*RtlpNumberOf(rgbData))) ))
CHR(CopyBytes( blobDecryptedData.pbData, blobDecryptedData.cbData, c_rgdwCommandInfo[CmdInfo_Timestamp][1], c_rgdwCommandInfo[CmdInfo_Timestamp][0] - dwDataOffset, rgbData, (sizeof(*RtlpNumberOf(rgbData))) ))
CBR(dwSize >= 0 && dwSize < 2147483647L)
CHR(spRequest->SetCommandData( blobDecryptedData.pbData + c_rgdwCommandInfo[CmdInfo_Data][0] - dwDataOffset, dwSize))
CPR(pblobDecryptedData)
CHR(CopyBytes( pbCommand, cbCommandSize, c_rgdwCommandInfo[CmdInfo_MsgId][1], c_rgdwCommandInfo[CmdInfo_MsgId][0], rgbData, (sizeof(*RtlpNumberOf(rgbData))) ))
CBR((dwMsgFormat == c_bEncryptedNotification && !fIsSecureChannel) || (dwMsgFormat == c_bNon_EncryptedNotification && fIsSecureChannel))
CHR(CopyBytes( pbCommand, cbCommandSize, c_rgdwCommandInfo[CmdInfo_MsgSize][1], c_rgdwCommandInfo[CmdInfo_MsgSize][0], rgbData, (sizeof(*RtlpNumberOf(rgbData))) ))
CHR(CopyBytes( pbCommand, cbCommandSize, c_rgdwCommandInfo[CmdInfo_SecKeyId][1], c_rgdwCommandInfo[CmdInfo_SecKeyId][0], rgbData, (sizeof(*RtlpNumberOf(rgbData))) ))
CBR(dwSecKeyId == dwCurrentSecretId || dwSecKeyId == dwUpdatingSecretId)
CPR(blobSharedSecret.pbData)
CBR(memcpy_s(blobSharedSecret.pbData, cbCurrentSecretSize, pbCurrentSecret, cbCurrentSecretSize) == 0)
CBR(memcpy_s(blobSharedSecret.pbData, cbUpdatingSecretSize, pbUpdatingSecret, cbUpdatingSecretSize) == 0)
CHR(((HRESULT)0x80070057L))
CPR(blobEncryptedData.pbData)
CBR(c_rgdwCommandInfo[CmdInfo_Hash][0] < cbCommandSize)
CHR(MdmCrypto::DecryptData(blobEncryptedData, blobSharedSecret, &blobDecryptedData))
CPR(blobHash.pbData)
CHR(CopyBytes( blobDecryptedData.pbData, blobDecryptedData.cbData, c_rgdwCommandInfo[CmdInfo_Hash][1], c_rgdwCommandInfo[CmdInfo_Hash][0] - dwEncryptOffset, blobHash.pbData, c_rgdwCommandInfo[CmdInfo_Hash][1] ))
CPR(blobIntegrity.pbData)
CHR(CopyBytes( pbCommand, cbCommandSize, c_rgdwCommandInfo[CmdInfo_SecKeyId][1], c_rgdwCommandInfo[CmdInfo_SecKeyId][0], blobIntegrity.pbData, blobIntegrity.cbData ))
CHR(CopyBytes( blobDecryptedData.pbData, blobDecryptedData.cbData, blobDecryptedData.cbData - c_rgdwCommandInfo[CmdInfo_Hash][1], c_rgdwCommandInfo[CmdInfo_ProfileId][0] - dwEncryptOffset, blobIntegrity.pbData + c_rgdwCommandInfo[CmdInfo_SecKeyId][1], blobIntegrity.cbData - c_rgdwCommandInfo[CmdInfo_SecKeyId][1] ))
CHR(CheckDataIntegrity(blobHash, blobSharedSecret, blobIntegrity))
CPR(blobDecryptedData.pbData)
CHR(CopyBytes( pbCommand, cbCommandSize, dwCmdSize, c_rgdwCommandInfo[CmdInfo_SecKeyId][0], blobDecryptedData.pbData, blobDecryptedData.cbData ))
CPR(pbDataIn)
CBR(cbDataIn >= dwOffset + cbRead)
CPR(pbDataOut)
CBR(cbDataOut >= cbRead)
CBR(memcpy_s(pbDataOut, cbDataOut, pbDataIn + dwOffset, cbRead) == 0)
CBR(blobHash.cbData > 0)
CBR(blobSharedSecret.cbData > 0)
CBR(blobData.cbData > 0)
CHR(MdmCrypto::ComputeHMAC(blobData, blobSharedSecret, &blobHashed))
CBR(blobHashed.cbData == c_rgdwCommandInfo[CmdInfo_Hash][1])
CBR(0 == memcmp(blobHash.pbData, blobHashed.pbData, c_rgdwCommandInfo[CmdInfo_Hash][1]))
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmcrypto.cpp
CHR(GetProvider(&hProv))
CHR(CreateHash(hProv, ((4 << 13) | (0) | 12), &hHash))
CHR(UnprotectData(blobSharedSecret, &blobUnprotectedSecret))
CBR(blobUnprotectedSecret.cbData > 0)
CPR(blobPrefixedSecret.pbData)
CBR(memcpy_s(blobPrefixedSecret.pbData, c_cbCcpEncryptPrefix + blobUnprotectedSecret.cbData, c_szCcpEncryptPrefix, c_cbCcpEncryptPrefix) == 0)
CBR(memcpy_s(blobPrefixedSecret.pbData + c_cbCcpEncryptPrefix, blobUnprotectedSecret.cbData, blobUnprotectedSecret.pbData, blobUnprotectedSecret.cbData) == 0)
CHR(HashData(hHash, blobPrefixedSecret, 0))
CHR(DeriveKey(hProv, hHash, ((3 << 13)|(3 << 9)|15), &hKey))
CPR(blobEncrypted.pbData)
CBR(blobEncrypted.cbData > 0)
CPR(pblobDecrypted)
CHR(Decrypt(hKey, blobEncrypted, pblobDecrypted))
CPR(pDataOut)
CPR(blobDataIn.pbData)
CBR(blobDataIn.cbData > 0)
CBR(CryptUnprotectData(const_cast<DATA_BLOB*>(&blobDataIn), 0, 0, 0, 0, 0, pDataOut))
CPR(blobToHash.pbData)
CBR(blobToHash.cbData > 0)
CPR(pblobHMACHash)
CBR(memcpy_s(blobPrefixedSecret.pbData, c_cbCcpHmacPrefix + blobUnprotectedSecret.cbData, c_szCcpHmacPrefix, c_cbCcpHmacPrefix) == 0)
CBR(memcpy_s(blobPrefixedSecret.pbData + c_cbCcpHmacPrefix, blobUnprotectedSecret.cbData, blobUnprotectedSecret.pbData, blobUnprotectedSecret.cbData) == 0)
CBR(CryptDeriveKey(hProv, ((3 << 13)|(4 << 9)|1), hHash, 0x00800000, &hKey))
CBR(CryptCreateHash(hProv, ((4 << 13) | (0) | 9), hKey, 0, &hHMACHash))
CBR(CryptSetHashParam(hHMACHash, 0x0005, (BYTE*)&hmacInfo, 0))
CHR(HashData(hHMACHash, blobToHash, 0))
CBR(CryptGetHashParam(hHMACHash, 0x0002, 0, &pblobHMACHash->cbData, 0))
CBR(pblobHMACHash->cbData > 0)
CPR(pblobHMACHash->pbData)
CBR(CryptGetHashParam(hHMACHash, 0x0002, pblobHMACHash->pbData, &pblobHMACHash->cbData, 0))
CPR(phProv)
Microsoft Enhanced RSA and AES Cryptographic Provider
CBR(CryptAcquireContextA(phProv, 0, "Microsoft Enhanced RSA and AES Cryptographic Provider", 24, 0xF0000000 | 0x00000040))
CPR(phHash)
CBR(CryptCreateHash(hProv, algorithmId, 0, 0, phHash))
CHR(UnprotectData(blobToHash, &blobHash))
CBR(CryptHashData(hHash, blobHash.pbData, blobHash.cbData, 0))
CPR(phKey)
CBR(CryptDeriveKey(hProv, algorithmId, hBaseHash, 0, phKey))
CPR(pbTempData)
CBR(memcpy_s(pbTempData, dwSize, blobEncrypted.pbData, blobEncrypted.cbData) == 0)
CBR(CryptDecrypt(hKey, 0, 1, 0, pbTempData, &dwSize))
CBR(dwSize > 0)
CPR(pblobDecrypted->pbData)
CBR(memcpy_s(pblobDecrypted->pbData, dwSize, pbTempData, dwSize) == 0)
CBR(CryptHashData(hHash, (PBYTE)wstrString.c_str(), (DWORD)wstrString.length() * 2, 0))
CBR(CryptGetHashParam(hHash, 0x0002, 0, &cbBuffer, 0))
CBR(cbBuffer > 0)
CPR(pbBuffer)
CBR(CryptGetHashParam(hHash, 0x0002, pbBuffer, &cbBuffer, 0))
CHR(b64coder.Encode(pbBuffer, cbBuffer, wstrHash))
ENCRYPT
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmcommandparser.cpp
CPR(pCommandAndAcknowledgement)
CBR(cbCommand >= 1)
CPR(ppwszPin)
CBR(*ppwszPin == nullptr)
CPR(ppwszCpn)
CBR(*ppwszCpn == nullptr)
CPR(pfRingAfterLock)
CBR(cbCommand >= cbPin)
CHR(MdmConverters::ConvertMultiByteToWideChar(pbCommand, cbPin, &pwszPin))
CBR(cbCommand >= cbCpn)
CHR(MdmConverters::ConvertMultiByteToWideChar(pbCommand, cbCpn, &pwszCpn))
CBR(cbCommand >= 16)
CHR(MdmConverters::ConvertMultiByteToWideChar(pbCommand, 16, &pwszCid))
CPR(pfEnableLocation)
CHR(QueryWnfState(&wnfStateName, bBuffer, &cbBuffer))
CHR(MdmConverters::ConvertMultiByteToWideChar( bBuffer, cbBuffer, &pszData))
CHR(b64coder.Decode(pszData, wcslen(pszData)))
CHR(pTaskRequestParser->ParseNonEncryptedRequest( b64coder.DecodedMessage(), b64coder.DecodedLength(), &pTaskRequest))
Exception
ReturnNt
ReturnHr
LogNt
LogHr
FailFast
%hs(%u)\%hs!%p: 
%hs!%p: 
(caller: %p) 
%hs(%d) tid(%x) %08X %ws
Msg:[%ws] 
CallContext:[%hs] 
[%hs(%hs)]
[%hs]
CBR(pbCommandData)
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmtaskrequestimpl.cpp
Active
Passive
CPR(ppMdmTransport)
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmhttpwrapper.cpp
CBR(*ppMdmTransport == nullptr)
CPR(pMdmHttpRequest)
CHR(pMdmHttpRequest->QueryInterface(IID_IMdmTransport, (PVOID *)pMdmTransportLocal.GetAddressOf()))
CHR(CreateRegisterDeviceRequestBody( pParameters, wstrRequestBody, wstrCommandChannelHash, wstrMobileNetworksHash, wstrDeviceInfoHash, wstrHardwareInfoHash, wstrStorageInfoHash, wstrProtectionStateHash, wstrConnectedAccountsHash, &fProtectionSessionGuidIncluded))
CHR(MdmSettings::GetRegisterDevicePath(wstrPath))
CHR(CreateHttpRequest(pMdmTransport.GetAddressOf()))
CHR(pMdmTransport->SendRequestToCommandService( L"PUT", wstrPath.c_str(), pwszTicket, nullptr, wstrRequestBody, &dwHttpStatus, nullptr))
CHR(((HRESULT)0x80004005L))
CHR(MdmSettings::SetCommandChannelHash(pParameters->m_eDeviceContext, wstrCommandChannelHash))
CHR(MdmSettings::SetMobileNetworksHash(pParameters->m_eDeviceContext, wstrMobileNetworksHash))
CHR(MdmSettings::SetDeviceInfoHash(pParameters->m_eDeviceContext, wstrDeviceInfoHash))
CHR(MdmSettings::SetHardwareInfoHash(pParameters->m_eDeviceContext, wstrHardwareInfoHash))
CHR(MdmSettings::SetStorageInfoHash(pParameters->m_eDeviceContext, wstrStorageInfoHash))
CHR(MdmSettings::SetProtectionStateHash(pParameters->m_eDeviceContext, wstrProtectionStateHash))
CHR(MdmSettings::SetConnectedAccountsHash(pParameters->m_eDeviceContext, wstrConnectedAccountsHash))
CHR(MdmSettings::SetProtectionSessionLastSent(ftNow.ullTime))
CHR(MdmSettings::SetRegisteredWithService(pParameters->m_eDeviceContext, 1))
CHR(CreateRegisterUserDeviceRequestBody( eTrigger, pDeviceInfo, pUserInfo, wstrRequestBody))
CHR(MdmSettings::GetRegisterUserDevicePath(wstrPath))
CHR(CreateUpdateStatusBody( eCommandStatus, eCommandSource, dwRetries, hrErrorCode, ftCommandReceived, pftWorkStarted, pftWorkFinished, pLocation, pAuthorizedCids, pAdmins, pDeviceOwners, pStandardUsers, pConnectedAdmins, pfMasterLocationSwitchOn, pfLocationSyncEnabled, pfMasterLocationEnabledByClient, pfLocationSyncEnabledByClient, wstrRequestBody))
CHR(MdmSettings::GetUpdateStatusPath(wstrPath))
CHR(StringCchPrintfW(pwszPath, cchPath, wstrPath.c_str(), dwRequestId))
CHR(pMdmTransport->SendRequestToCommandService( L"PUT", pwszPath, pwszTicket, nullptr, wstrRequestBody, &dwHttpStatus, fReadResponse ? &pwszBuffer : nullptr ))
CPR(pwszMethod)
CPR(pwszPath)
CHR(pRequestJsonObjectLocal.As(&pRequestJsonObjectAsValue))
CHR(pRequestJsonObjectAsValue->Stringify(hstrBody.GetAddressOf()))
CHR(((HRESULT)0x8007000EL))
CHR(pMdmTransport->SendDelegationRequestToCommandService( pwszMethod, pwszPath, pwszDeviceTicket, pwszDelegationTicket, wstrRequestBody, &dwHttpStatus, fReadResponse ? &pwszBuffer : nullptr ))
CHR(pMdmTransport->SendRequestToCommandService( pwszMethod, pwszPath, pwszMainTicket, pwszSecondaryTicket, wstrRequestBody, &dwHttpStatus, fReadResponse ? &pwszBuffer : nullptr ))
CPR(pfProtectionSessionGuidIncluded)
CBR((pParameters->m_pAdmins == nullptr && pParameters->m_pDeviceOwners == nullptr && pParameters->m_pStandardUsers == nullptr && pParameters->m_pConnectedAdmins == nullptr) || (pParameters->m_pAdmins != nullptr && pParameters->m_pDeviceOwners != nullptr && pParameters->m_pStandardUsers != nullptr && pParameters->m_pConnectedAdmins != nullptr))
CHR(GetActualRegistrationTrigger(pParameters->m_eDeviceContext, pParameters->m_eTrigger, &eActualTrigger))
CHR(RegistrationTriggerToString(eActualTrigger, wstrTrigger))
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), pJsonObject.GetAddressOf()))
CHR(GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonValue).Get(), pJsonValueStatics.GetAddressOf()))
CHR(CreateCommandChannelEntity(pParameters->m_pwszChannelUrl, pCommandChannel.GetAddressOf()))
CHR(pCommandChannel->Stringify(hstrCommandChannel.GetAddressOf()))
CHR(MdmCrypto::HashString(wstrCommandChannel, wstrCommandChannelNewHash))
CHR(pParameters->m_pMobileNetworks->Stringify(hstrMobileNetworks.GetAddressOf()))
CHR(pParameters->m_pDeviceInfo->Stringify(hstrDeviceInfo.GetAddressOf()))
CHR(MdmCrypto::HashString(wstrDeviceInfo, wstrDeviceInfoNewHash))
CHR(pParameters->m_pHardwareInfo->Stringify(hstrHardwareInfo.GetAddressOf()))
CHR(MdmCrypto::HashString(wstrHardwareInfo, wstrHardwareInfoNewHash))
CHR(pParameters->m_pStorageInfo->Stringify(hstrStorageInfo.GetAddressOf()))
CHR(MdmCrypto::HashString(wstrStorageInfo, wstrStorageInfoNewHash))
CHR(pParameters->m_pProtectionState->Stringify(hstrProtectionState.GetAddressOf()))
CHR(CreateConnectedAccountsEntity(pParameters->m_pAdmins, pParameters->m_pDeviceOwners, pParameters->m_pStandardUsers, pParameters->m_pConnectedAdmins, pConnectedAccounts.GetAddressOf()))
CHR(MdmSettings::GetMobileNetworksHash(pParameters->m_eDeviceContext, wstrMobileNetworksHashFromRegistry))
CHR(MdmSettings::GetDeviceInfoHash(pParameters->m_eDeviceContext, wstrDeviceInfoHashFromRegistry))
CHR(MdmSettings::GetHardwareInfoHash(pParameters->m_eDeviceContext, wstrHardwareInfoHashFromRegistry))
CHR(MdmSettings::GetStorageInfoHash(pParameters->m_eDeviceContext, wstrStorageInfoHashFromRegistry))
CHR(MdmSettings::GetProtectionStateHash(pParameters->m_eDeviceContext, wstrProtectionStateHashFromRegistry))
CHR(MdmSettings::GetConnectedAccountsHash(pParameters->m_eDeviceContext, wstrConnectedAccountsHashFromRegistry))
CHR(MdmSettings::GetProtectionSessionLastSent(&ftProtectionSessionLastSent.ullTime))
CHR(MdmSettings::GetProtectionSessionUpdateFrequencyInMinutes(&dwProtectionSessionUpdateFrequencyInMinutes))
CommandChannel
CHR(pJsonObject->SetNamedValue(HStringReference(L"CommandChannel").Get(), pCommandChannel.Get()))
MobileNetworks
CHR(pJsonObject->SetNamedValue(HStringReference(L"MobileNetworks").Get(), pParameters->m_pMobileNetworks))
DeviceInfo
CHR(pJsonObject->SetNamedValue(HStringReference(L"DeviceInfo").Get(), pParameters->m_pDeviceInfo))
DeviceHardwareInfo
CHR(pJsonObject->SetNamedValue(HStringReference(L"DeviceHardwareInfo").Get(), pParameters->m_pHardwareInfo))
StorageInfo
CHR(pJsonObject->SetNamedValue(HStringReference(L"StorageInfo").Get(), pParameters->m_pStorageInfo))
ProtectionState
CHR(pJsonObject->SetNamedValue(HStringReference(L"ProtectionState").Get(), pParameters->m_pProtectionState))
ConnectedAccounts
CHR(pJsonObject->SetNamedValue(HStringReference(L"ConnectedAccounts").Get(), pConnectedAccounts.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pParameters->m_pwszProtectionSessionGuid).Get(), pJsonValue.ReleaseAndGetAddressOf()))
ProtectionSession
CHR(pJsonObject->SetNamedValue(HStringReference(L"ProtectionSession").Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(wstrTrigger.c_str()).Get(), pJsonValue.ReleaseAndGetAddressOf()))
RegistrationTrigger
CHR(pJsonObject->SetNamedValue(HStringReference(L"RegistrationTrigger").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(pParameters->m_ppwszAdditionalValuesNames[i]).Get(), pParameters->m_ppAdditionalValues[i]))
CHR(pJsonValueStatics->CreateNumberValue(6, pJsonValue.ReleaseAndGetAddressOf()))
ClientVersion
CHR(pJsonObject->SetNamedValue(HStringReference(L"ClientVersion").Get(), pJsonValue.Get()))
CHR(pJsonObject.As(&pJsonObjectAsValue))
CHR(pJsonObjectAsValue->Stringify(hstrBody.GetAddressOf()))
CHR(RegistrationTriggerToString(eTrigger, wstrTrigger))
CHR(pJsonObject->SetNamedValue(HStringReference(L"DeviceInfo").Get(), pDeviceInfo))
UserInfo
CHR(pJsonObject->SetNamedValue(HStringReference(L"UserInfo").Get(), pUserInfo))
CPR(ppJsonValue)
CBR(*ppJsonValue == nullptr)
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszChannelUrl).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CommandChannelUrl
CHR(pJsonObject->SetNamedValue(HStringReference(L"CommandChannelUrl").Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateBooleanValue(false, pJsonValue.ReleaseAndGetAddressOf()))
MpnsEnabled
CHR(pJsonObject->SetNamedValue(HStringReference(L"MpnsEnabled").Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateNumberValue(1, pJsonValue.ReleaseAndGetAddressOf()))
PushChannelType
CHR(pJsonObject->SetNamedValue(HStringReference(L"PushChannelType").Get(), pJsonValue.Get()))
CBR((pftWorkStarted != nullptr && pftWorkFinished != nullptr) || (pftWorkStarted == nullptr && pftWorkFinished == nullptr))
CHR(pJsonValueStatics->CreateNumberValue((DWORD)eCommandStatus, pJsonValue.ReleaseAndGetAddressOf()))
StatusCode
CHR(pJsonObject->SetNamedValue(HStringReference(L"StatusCode").Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateNumberValue((DWORD)eCommandSource, pJsonValue.ReleaseAndGetAddressOf()))
ChannelType
CHR(pJsonObject->SetNamedValue(HStringReference(L"ChannelType").Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateNumberValue(dwRetries, pJsonValue.ReleaseAndGetAddressOf()))
Retries
CHR(pJsonObject->SetNamedValue(HStringReference(L"Retries").Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateNumberValue((DWORD)hrErrorCode, pJsonValue.ReleaseAndGetAddressOf()))
ErrorCode
CHR(pJsonObject->SetNamedValue(HStringReference(L"ErrorCode").Get(), pJsonValue.Get()))
CHR(StringCchPrintfW(wszTimestamp, (sizeof(*RtlpNumberOf(wszTimestamp))), L"%llu", ftConverter.ullTime))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(wszTimestamp).Get(), pJsonValue.ReleaseAndGetAddressOf()))
ReceivedTime
CHR(pJsonObject->SetNamedValue(HStringReference(L"ReceivedTime").Get(), pJsonValue.Get()))
UpdatedTime
CHR(pJsonObject->SetNamedValue(HStringReference(L"UpdatedTime").Get(), pJsonValue.Get()))
WorkStartedTime
CHR(pJsonObject->SetNamedValue(HStringReference(L"WorkStartedTime").Get(), pJsonValue.Get()))
WorkFinishedTime
CHR(pJsonObject->SetNamedValue(HStringReference(L"WorkFinishedTime").Get(), pJsonValue.Get()))
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonValue).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(CreateLocationEntity(pLocation, MdmLocationTechnique_Active, pJsonLocation.GetAddressOf()))
Location
CHR(pJsonObject->SetNamedValue(HStringReference(L"Location").Get(), pJsonLocation.Get()))
CHR(pJsonValueStatics->CreateNumberValue(dBatteryLevel, pJsonValue.ReleaseAndGetAddressOf()))
BatteryLevel
CHR(pJsonObject->SetNamedValue(HStringReference(L"BatteryLevel").Get(), pJsonValue.Get()))
AuthorizedCids
CHR(pJsonObject->SetNamedValue(HStringReference(L"AuthorizedCids").Get(), pAuthorizedCids))
CHR(CreateConnectedAccountsEntity(pAdmins, pDeviceOwners, pStandardUsers, pConnectedAdmins, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"ConnectedAccounts").Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateNumberValue(dwStatusFlags, pJsonValue.ReleaseAndGetAddressOf()))
StatusFlags
CHR(pJsonObject->SetNamedValue(HStringReference(L"StatusFlags").Get(), pJsonValue.Get()))
CPR(pConnectedAdmins)
AdminCids
CHR(pJsonObject->SetNamedValue(HStringReference(L"AdminCids").Get(), pAdmins))
DeviceOwnerCids
CHR(pJsonObject->SetNamedValue(HStringReference(L"DeviceOwnerCids").Get(), pDeviceOwners))
StandardCids
CHR(pJsonObject->SetNamedValue(HStringReference(L"StandardCids").Get(), pStandardUsers))
ConnectedAdminCids
CHR(pJsonObject->SetNamedValue(HStringReference(L"ConnectedAdminCids").Get(), pConnectedAdmins))
CPR(pLocation)
CHR(pJsonValueStatics->CreateNumberValue(pLocation->m_dLatitude, pJsonValue.ReleaseAndGetAddressOf()))
Latitude
CHR(pJsonObject->SetNamedValue(HStringReference(L"Latitude").Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateNumberValue(pLocation->m_dLongitude, pJsonValue.ReleaseAndGetAddressOf()))
Longitude
CHR(pJsonObject->SetNamedValue(HStringReference(L"Longitude").Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateNumberValue(pLocation->m_dwPositionAccuracy, pJsonValue.ReleaseAndGetAddressOf()))
ErrorRadius
CHR(pJsonObject->SetNamedValue(HStringReference(L"ErrorRadius").Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateNumberValue(pLocation->m_dAltitude, pJsonValue.ReleaseAndGetAddressOf()))
Altitude
CHR(pJsonObject->SetNamedValue(HStringReference(L"Altitude").Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateNumberValue(pLocation->m_dwAltitudeAccuracy, pJsonValue.ReleaseAndGetAddressOf()))
AltitudeErrorDistance
CHR(pJsonObject->SetNamedValue(HStringReference(L"AltitudeErrorDistance").Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(wszLocationTechniqueMappings[eLocationTechnique]).Get(), pJsonValue.ReleaseAndGetAddressOf()))
LocationTechnique
CHR(pJsonObject->SetNamedValue(HStringReference(L"LocationTechnique").Get(), pJsonValue.Get()))
CBR(eTrigger != MdmRegistrationTrigger_Unknown)
CHR(MdmSettings::HasRegisteredWithService(eDeviceType, &fRegistered))
Unknown
FirstTimeSignIn
Periodic
SimCardChanged
OSUpgradeToThreshold
SettingChange
AccountChange
ConnectedToNetwork
ScreenOnOff
NewAccount
ProtectionStateChanged
CPR(pdLevel)
CHR(GetActivationFactory(HStringReference(RuntimeClass_Windows_Devices_Power_Battery).Get(), pBatteryStatics.GetAddressOf()))
CHR(pBatteryStatics->get_AggregateBattery(pAggregateBattery.GetAddressOf()))
CHR(pAggregateBattery->GetReport(pBatteryReport.GetAddressOf()))
CHR(pBatteryReport->get_FullChargeCapacityInMilliwattHours(pFullChargeCapacity.GetAddressOf()))
CBR(pFullChargeCapacity != nullptr)
CHR(pFullChargeCapacity->get_Value(&iFullChargeCapacity))
CBR(iFullChargeCapacity != 0)
CHR(pBatteryReport->get_RemainingCapacityInMilliwattHours(pRemainingCapacity.GetAddressOf()))
CBR(pRemainingCapacity != nullptr)
CHR(pRemainingCapacity->get_Value(&iRemainingCapacity))
Windows.Devices.Power.Battery
Software\Microsoft\MdmCommon\Internal
ServiceHost
RegisterDevicePath
RegisterUserDevicePath
UpdateStatusPath
CcpServiceTarget
ProtectionSessionUpdateFrequencyInMinutes
Software\Microsoft\MdmCommon\Settings
DeviceDirectoryClient
Software\Microsoft\MdmCommon\SettingValues
CommandChannelHash
MobileNetworksHash
DeviceInfoHash
HardwareInfoHash
StorageInfoHash
ProtectionStateHash
ConnectedAccountsHash
RegisteredWithService
RegisteredVersion
ProtectionSessionLastSent
Software\Microsoft\Settings\FindMyDevice
Software\Microsoft\Settings\FindMyPhone
LocationSyncEnabled
LocationSyncEnabledOverride
SOFTWARE\Policies\Microsoft\FindMyDevice
AllowFindMyDevice
Experience
CHR(HRESULT_FROM_WIN32(GetPersistedRegistryLocationW( c_pszMdmCommonPersistedKeyId, c_pszGeneralSettingsKey, pwszPath, *pcchPath, pcchPath)))
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmsettings.cpp
CHR(MdmRegistry::GetDWORDValue( c_pszGeneralInternalKey, c_pszProtectionSessionUpdateFrequencyInMinutes, dwValue))
CPR(pullValue)
CHR(GetMdmCommonSettingValuesPersistedLocation(wszKey, &cchKey))
CHR(MdmRegistry::SetByteValue( wszKey, c_pszProtectionSessionLastSent, (BYTE *)&ullValue, sizeof(ullValue)))
CBR(hKey != nullptr)
CHR(MdmRegistry::SetStringValue( hKey, wszKey, c_pszCommandChannelHash, pszValue))
CHR(MdmRegistry::GetStringValue( hKey, wszKey, c_pszMobileNetworksHash, pszValue))
CHR(MdmRegistry::SetStringValue( hKey, wszKey, c_pszMobileNetworksHash, pszValue))
CHR(MdmRegistry::GetStringValue( hKey, wszKey, c_pszDeviceInfoHash, pszValue))
CHR(MdmRegistry::SetStringValue( hKey, wszKey, c_pszDeviceInfoHash, pszValue))
CHR(MdmRegistry::GetStringValue( hKey, wszKey, c_pszHardwareInfoHash, pszValue))
CHR(MdmRegistry::SetStringValue( hKey, wszKey, c_pszHardwareInfoHash, pszValue))
CHR(MdmRegistry::GetStringValue( hKey, wszKey, c_pszStorageInfoHash, pszValue))
CHR(MdmRegistry::SetStringValue( hKey, wszKey, c_pszStorageInfoHash, pszValue))
CHR(MdmRegistry::GetStringValue( hKey, wszKey, c_pszProtectionStateHash, pszValue))
CHR(MdmRegistry::SetStringValue( hKey, wszKey, c_pszProtectionStateHash, pszValue))
CHR(MdmRegistry::GetStringValue( hKey, wszKey, c_pszConnectedAccountsHash, pszValue))
CHR(MdmRegistry::SetStringValue( hKey, wszKey, c_pszConnectedAccountsHash, pszValue))
CHR(MdmRegistry::GetStringValue( c_pszGeneralInternalKey, c_pszServiceHostValueName, pszValue))
CHR(MdmRegistry::GetStringValue( c_pszGeneralInternalKey, c_pszRegisterDevicePathValueName, pszValue))
CHR(MdmRegistry::GetStringValue( c_pszGeneralInternalKey, c_pszRegisterUserDevicePathValueName, pszValue))
CHR(MdmRegistry::GetStringValue( c_pszGeneralInternalKey, c_pszUpdateStatusPathValueName, pszValue))
CHR(MdmRegistry::GetStringValue( c_pszGeneralInternalKey, c_pszServiceTargetValueName, strServiceTarget))
CHR(MdmRegistry::SetBOOLValue( hKey, wszKey, c_pszRegisteredWithService, fRegistered))
CHR(MdmRegistry::SetDWORDValue( hKey, wszKey, c_pszRegisteredVersion, 6))
CHR(MdmRegistry::GetBOOLValue(c_szFMDSettingRegistryRootPhone, c_szFMDEnabledValueName, *pfEnabled))
CHR(PolicyManager_GetPolicyInt(c_szFMDMDMAreaName, c_szFMDMDMPolicyName, &value))
CHR(MdmRegistry::SetBOOLValue(wszKey, c_szFMDEnabledValueName, fEnabled))
CHR(((HRESULT) ((ntstatus) | 0x10000000)))
CHR(CoCreateInstance( __uuidof(CoClassIdentityStore), nullptr, (CLSCTX_INPROC_SERVER| CLSCTX_INPROC_HANDLER| CLSCTX_LOCAL_SERVER| CLSCTX_REMOTE_SERVER), __uuidof(**(spUserStore.GetAddressOf())), IID_PPV_ARGS_Helper(spUserStore.GetAddressOf())))
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmaccounthelper.cpp
CHR(spUserStore->EnumerateIdentities( IDENTITIES_ALL, nullptr, nullptr, &spUserEnum))
CHR(spUserEnum->Next(1, spUnknown.GetAddressOf(), &cFetch))
CHR(spUnknown.As(&spPropStore))
CHR(spPropStore->GetValue(PKEY_Identity_UniqueID, &propertyValue))
CHR(PropVariantToStringAlloc(propertyValue, &pwszCid))
CHR(spPropStore->GetValue(PKEY_Identity_ProviderData, &propertyValue))
CBR(propertyValue.vt == (VT_VECTOR | VT_LPWSTR))
CBR(ConvertStringSidToSidW(propertyValue.calpwstr.pElems[i], &pSid))
CHR(IsAdminBySid(pSid, &fFoundMatch, &fIsAdmin))
CHR(IsDeviceOwnerBySid(pSid, &fIsDeviceOwner))
CHR(CoCreateInstance( __uuidof(CoClassConnectedUserStore), 0, (CLSCTX_INPROC_SERVER| CLSCTX_INPROC_HANDLER| CLSCTX_LOCAL_SERVER| CLSCTX_REMOTE_SERVER), __uuidof(**(spUserStore.GetAddressOf())), IID_PPV_ARGS_Helper(spUserStore.GetAddressOf())))
CHR(spUserStore->GetConnectedUserEnum( 0, 0, &spUserEnum))
CHR(spUnknown.As(&spUser))
CHR(spUser->GetConnectedUserInfo(spPropStore.GetAddressOf()))
CHR(spPropStore->GetValue(PKEY_Identity_PrimarySid, &propertyValue))
CHR(PropVariantToStringAlloc(propertyValue, &pwszSid))
CBR(ConvertStringSidToSidW(pwszSid, &pSid))
CHR(CoCreateInstance( __uuidof(CoClassConnectedUserStore), nullptr, (CLSCTX_INPROC_SERVER| CLSCTX_INPROC_HANDLER| CLSCTX_LOCAL_SERVER| CLSCTX_REMOTE_SERVER), __uuidof(**(spUserStore.GetAddressOf())), IID_PPV_ARGS_Helper(spUserStore.GetAddressOf())))
CHR(spUserStore->GetConnectedUserEnum( 0, nullptr, &spUserEnum))
CHR(PropVariantToStringAlloc(propertyValue, &pwszValue))
CPR(pfFoundMatch)
CPR(pfIsAdmin)
CBR(nStatus == 0 || nStatus == 234L)
CHR(IsAdminBySidAndName(pTempBuffer->usri0_name, pSid, &fFoundMatch, &fIsAdmin))
CBR(nStatus == 0)
Device Owners
CPR(pSid)
CPR(pfIsDeviceOwner)
CBR(ntStatus == 0)
@/;TF
CBR(pResult != 0)
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmlocationhelper.cpp
CHR(ActivateInstance(geolocatorClassId.Get(), pGeolocator.GetAddressOf()))
CHR(pGeolocator->put_DesiredAccuracy(desiredAccuracy))
CHR(pGeolocator->GetGeopositionAsyncWithAgeAndTimeout(ageTimeSpan, timeoutTimeSpan, pGetOperation.GetAddressOf()))
CBR(hComplete.m_h != 0)
CHR(pGetOperation->put_Completed(CompletionCallback.Get()))
CBR(WaitForSingleObject(hComplete, 0xFFFFFFFF) == ((((NTSTATUS)0x00000000L) ) + 0 ))
CHR(hrCallback)
CBR(pGeoposition != 0)
CHR(pGeoposition->get_Coordinate(pGeocoordinate.GetAddressOf()))
CHR(pGeocoordinate->get_Accuracy(&dPositionAccuracy))
CHR(pGeocoordinate->get_AltitudeAccuracy(&pdAltitudeAccuracy))
CHR(pGeocoordinate.As(&pGeocoordinateWithPoint))
CHR(pGeocoordinateWithPoint->get_Point(&pGeopoint))
CHR(pGeopoint->get_Position(&basicGeoposition))
kernelbase.dll
RaiseFailFastException
lstd::exception: %hs
onecore\internal\sdk\inc\wil\opensource\wil\resource.h
WilError_03
ntdll.dll
RtlDllShutdownInProgress
RtlDisownModuleHeapAllocation
WilFailureNotifyWatchers
Local\SM0:%lu:%lu:%hs
CPR(pbBinaryData)
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmbase64coder.cpp
CBR(cbBinaryData > 0)
CHR(_Encode(pbBinaryData, cbBinaryData, 0, cchEncodedData))
CBR(0 != pszBuffer)
CHR(_Encode( pbBinaryData, cbBinaryData, pszBuffer, cchEncodedData ))
CPR(pbEndOfTriplets)
CBR(pch + 3 < (pchEncodedData + cchEncodedData))
CBR(pch < pchEncodedData + cchEncodedData)
CBR(cchEncodedData > 0 && cchEncodedData % 4 == 0)
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
CPR(pbByteArray)
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmconverters.cpp
CPR(ppWideCharBuffer)
CBR(*ppWideCharBuffer == nullptr)
CPR(pszBuffer)
CBR(0 != MultiByteToWideChar( 65001, 0, (CHAR*)pbByteArray, cbByteArray, pszBuffer, nNeededLen + 1))
CPR(pwszArray)
CPR(ppszArray)
CPR(pcbArray)
CBR(*ppszArray == nullptr)
CBR(pMultiByte != nullptr)
CBR(0 != WideCharToMultiByte( 65001, 0, pwszArray, cchwszArray, pMultiByte, cbNeededLen + 1, nullptr, nullptr))
CPR(pdwHttpStatus)
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmhttprequest.cpp
CPR(pwszUrlPath)
CPR(pwszHost)
CHR(MdmConverters::ConvertWideCharToMultiByte( wstrBody.c_str(), (DWORD)wstrBody.length(), &pszMultiByteBody, &cbNeededLen))
Content-Type: application/json
CHR(SendHttpRequest( pwszMethod, L"Content-Type: application/json\r\n", pwszHost, pwszUrlPath, pwszMainTicket, pwszSecondaryTicket, 0, nullptr, 0, wstrBody.c_str(), pszMultiByteBody, cbNeededLen, pdwHttpStatus, fReadResponse ? &cbBuffer : nullptr, fReadResponse ? &pbBuffer : nullptr ))
CHR(MdmConverters::ConvertMultiByteToWideChar(pbBuffer, cbBuffer, &pwszBuffer))
CHR(SendHttpRequest( pwszMethod, L"Content-Type: application/json\r\n", pwszHost, pwszUrlPath, pwszDeviceTicket, pwszDelegationTicket, 1, nullptr, 0, wstrBody.c_str(), pszMultiByteBody, cbNeededLen, pdwHttpStatus, fReadResponse ? &cbBuffer : nullptr, fReadResponse ? &pbBuffer : nullptr ))
CBR(pwszMethod != nullptr)
CBR(pwszHost != nullptr)
CBR(pwszUrlPath != nullptr)
CBR(pdwHttpStatus != nullptr)
CHR(StringCchCopyNW( szServerName, (sizeof(*__countof_helper(szServerName)) + 0), urlComponents.lpszHostName, urlComponents.dwHostNameLength))
Windows Device Management Platform
CBR(m_hSession != nullptr)
CHR(SetDefaultTimeoutOptions())
CBR(nullptr != m_hConnection)
CHR(AddMainTicketHeader(pwszMainTicket, wstrMainTicketHeader))
CHR(AddSecondaryTicketHeader(pwszSecondaryTicket, wstrSecondaryTicketHeader))
CHR(AddDelegationTicketHeader(pwszMainTicket, pwszSecondaryTicket, wstrMainTicketHeader))
CHR(AddCorrelationVectorHeader(wstrCorrelationVectorHeader))
CBR(nullptr != m_hRequest)
CBR(::WinHttpSetOption( m_hRequest, 47, 0, 0))
CBR(::WinHttpAddRequestHeaders( m_hRequest, pwszContentType, (DWORD)wcslen(pwszContentType), 0x80000000 | 0x20000000))
CBR(::WinHttpAddRequestHeaders( m_hRequest, wstrMainTicketHeader.c_str(), (DWORD)wstrMainTicketHeader.length(), 0x80000000 | 0x20000000))
CBR(::WinHttpAddRequestHeaders( m_hRequest, wstrSecondaryTicketHeader.c_str(), (DWORD)wstrSecondaryTicketHeader.length(), 0x80000000 | 0x20000000))
CBR(::WinHttpAddRequestHeaders( m_hRequest, wstrCorrelationVectorHeader.c_str(), (DWORD)wstrCorrelationVectorHeader.length(), 0x80000000 | 0x20000000))
CBR(::WinHttpQueryHeaders( m_hRequest, 19 | 0x20000000, nullptr, (LPVOID)&dwHttpStatus, &cbHttpStatus, nullptr))
CHR(GetContentSize(&m_cbDataBufferSize))
CBR(m_pbDataBuffer == nullptr)
CBR(m_pbDataBuffer != nullptr)
CHR(ReadDataGreaterThan1KB( cbBuffer, pbBuffer))
CHR(ReadData( cbBuffer, pbBuffer))
CBR(::WinHttpSetOption( m_hSession, 3, &c_dwConnectTimeout, sizeof(c_dwConnectTimeout)))
CBR(::WinHttpSetOption( m_hSession, 6, &c_dwReceiveTimeout, sizeof(c_dwReceiveTimeout)))
CBR(::WinHttpSetOption( m_hSession, 5, &c_dwSendTimeout, sizeof(c_dwSendTimeout)))
CBR(pcbContentSize != nullptr)
CBR(m_hRequest != nullptr)
CBR(::WinHttpQueryHeaders( m_hRequest, 5 | 0x20000000, nullptr, (LPVOID)&cbContentLength, &cbSize, nullptr))
CBR(pbBuffer != nullptr)
CBR(::WinHttpReadData( m_hRequest, pbBuffer, cbBuffer, &cbWinHttpRead))
CBR(cbBuffer == cbWinHttpRead)
CBR(pstrBuffer != nullptr)
CBR(::WinHttpReadData( m_hRequest, pstrBuffer, c_cbBufferSize, &cbWinHttpRead))
CBR(cbRemainingBufferSize >= cbWinHttpRead)
CBR(0 == memcpy_s(pbIndexPtr, cbRemainingBufferSize, pstrBuffer, cbWinHttpRead))
CBR(cbRemainingBufferSize == 0)
CHR(CoCreateGuid(&guid))
CHR(b64coder.Encode((BYTE *)&guid, 12, wstrCorrelationVector))
MS-CV: 
X-User-Token: 
X-Device-Token: 
CHR(StringCchLengthW(pwszDeviceTicket, 2147483647, &cchDeviceTicketLen))
CHR(StringCchLengthW(pwszDelegationTicket, 2147483647, &cchDelegationTicketLen))
msaauth1.0 usertoken="%s", delegationtoken="%s"
CHR(StringCchLengthW(L"msaauth1.0 usertoken=\"%s\", delegationtoken=\"%s\"", 2147483647, &cchfStrLen))
CBR(pwszHeaderValue != nullptr)
CHR(StringCchPrintfW(pwszHeaderValue, allocSize, L"msaauth1.0 usertoken=\"%s\", delegationtoken=\"%s\"", pwszDeviceTicket, pwszDelegationTicket))
Authorization: 
CBR(0L == dwResult)
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmregistry.cpp
CBR(cbValue >= cbSize)
CBR(lRet != 2L && lRet != 3L)
CBR(lRet == 0L)
CBR(dwType == ( 1ul ) || cbSize <= 1 || (cbSize & 0x1) != 0)
CBR(dwResult == 0L)
RSDS'
MdmCommon.pdb
.text$di
.text$mn
.text$mn$00
.text$x
.text$yd
.rdata$brc
.idata$5
.00cfg
.CRT$XCA
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIC
.CRT$XIZ
.CRT$XPA
.CRT$XPZ
.CRT$XTA
.CRT$XTZ
.gehcont
.gfids
.giats
.rdata
.rdata$r
.rdata$voltmd
.rdata$zzzdbg
.rtc$IAA
.rtc$IZZ
.rtc$TAA
.rtc$TZZ
.xdata
.xdata$x
.didat$2
.didat$3
.didat$4
.didat$6
.didat$7
.edata
.idata$2
.idata$3
.idata$4
.idata$6
.data$brc
.data$r$brc
.data$rs$brc
.data
.pdata
.didat$5
.rsrc$01
.rsrc$02
XNZZ\N^
N N"N$N& 
PolicyManager_IsPolicySetByMobileDeviceManager
PolicyManager_GetPolicyInt
MdmCommon.DLL
MdmClearAllHashes
MdmConnectedAccountsChanged
MdmEnumerateUsers
MdmGetLocation
MdmGetServiceTarget
MdmGetSidsByConnectedCids
MdmHandlePushNotification
MdmIsFindMyDeviceEnabled
MdmIsRegisteredWithService
MdmMobileNetworksChanged
MdmParseCommandData
MdmParseEncryptedRequest
MdmParseLocateCommand
MdmParseLockCommand
MdmParseNonEncryptedRequest
MdmProtectionStateChanged
MdmRegisterDevice
MdmRegisterUserDevice
MdmSendRequestToCS
MdmSendRequestToCSWithDelegation
MdmSetFindMyDevice
MdmShouldRegisterDevice
MdmUpdateStatus
MdmUsersAuthorizedToSeeLocation
MdmUsersAuthorizedToSeeLocationAsString
?_Xlength_error@std@@YAXPEBD@Z
msvcp_win.dll
_initterm
_initterm_e
api-ms-win-crt-runtime-l1-1-0.dll
__CxxFrameHandler4
__std_terminate
_o___std_exception_copy
_o___std_exception_destroy
_o___std_type_info_destroy_list
_o___stdio_common_vsnprintf_s
_o___stdio_common_vswprintf
_o__callnewh
_o__cexit
_o__configure_narrow_argv
_o__crt_atexit
_o__errno
_o__execute_onexit_table
_o__initialize_narrow_environment
_o__initialize_onexit_table
_o__invalid_parameter_noinfo
_o__invalid_parameter_noinfo_noreturn
_o__purecall
_o__register_onexit_function
_o__seh_filter_dll
_o_free
_o_malloc
_o_towupper
_o_wcscpy_s
__C_specific_handler
__CxxFrameHandler3
memset
_CxxThrowException
api-ms-win-crt-private-l1-1-0.dll
api-ms-win-crt-string-l1-1-0.dll
EventUnregister
WindowsDeleteString
EventRegister
WindowsGetStringRawBuffer
EventWriteTransfer
QueryPerformanceCounter
GetCurrentProcessId
GetCurrentThreadId
GetSystemTimeAsFileTime
InitializeSListHead
RtlCaptureContext
RtlLookupFunctionEntry
RtlVirtualUnwind
IsDebuggerPresent
UnhandledExceptionFilter
SetUnhandledExceptionFilter
IsProcessorFeaturePresent
GetModuleHandleW
GetCurrentProcess
TerminateProcess
api-ms-win-eventing-provider-l1-1-0.dll
api-ms-win-core-winrt-string-l1-1-0.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-interlocked-l1-1-0.dll
api-ms-win-core-rtlsupport-l1-1-0.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
api-ms-win-core-libraryloader-l1-2-0.dll
GetPersistedRegistryLocationW
api-ms-win-stateseparation-helpers-l1-1-0.dll
CryptDestroyKey
LocalFree
CryptDestroyHash
CryptReleaseContext
GetLastError
CryptUnprotectData
CryptDeriveKey
CryptCreateHash
CryptSetHashParam
CryptGetHashParam
CryptAcquireContextA
CryptHashData
CryptDecrypt
NtQueryWnfStateData
OutputDebugStringW
FormatMessageW
RoActivateInstance
RoGetActivationFactory
RaiseException
CoCreateInstance
WindowsCreateStringReference
RtlPublishWnfStateData
PropVariantToStringAlloc
PropVariantClear
CoTaskMemFree
ConvertStringSidToSidW
NetUserEnum
NetApiBufferFree
NetUserGetInfo
EqualSid
NetLocalGroupGetMembers
CloseHandle
SetEvent
CreateEventA
WaitForSingleObject
GetModuleFileNameA
CreateSemaphoreExW
HeapFree
SetLastError
ReleaseSemaphore
GetModuleHandleExW
ReleaseMutex
WaitForSingleObjectEx
OpenSemaphoreW
HeapAlloc
GetProcAddress
CreateMutexExW
GetProcessHeap
DebugBreak
MultiByteToWideChar
WideCharToMultiByte
WinHttpCrackUrl
WinHttpOpen
WinHttpConnect
WinHttpCloseHandle
Sleep
WinHttpOpenRequest
WinHttpSetOption
WinHttpAddRequestHeaders
WinHttpSendRequest
WinHttpReceiveResponse
WinHttpQueryHeaders
WinHttpReadData
CoCreateGuid
LocalAlloc
RegOpenKeyExW
RegQueryValueExW
RegCloseKey
RegCreateKeyExW
RegSetValueExW
ApiSetQueryApiSetPresence
ResolveDelayLoadedAPI
DelayLoadFailureHook
api-ms-win-security-cryptoapi-l1-1-0.dll
api-ms-win-core-heap-l2-1-0.dll
CRYPT32.dll
ntdll.dll
api-ms-win-core-localization-l1-2-0.dll
api-ms-win-core-winrt-l1-1-0.dll
api-ms-win-core-com-l1-1-0.dll
PROPSYS.dll
api-ms-win-security-sddl-l1-1-0.dll
samcli.dll
netutils.dll
api-ms-win-security-base-l1-1-0.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-string-l1-1-0.dll
WINHTTP.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-core-apiquery-l1-1-0.dll
api-ms-win-core-delayload-l1-1-1.dll
api-ms-win-core-delayload-l1-1-0.dll
memcmp
memcpy
memmove
.?AVbad_alloc@std@@
.?AVexception@std@@
.?AVbad_array_new_length@std@@
.?AVResultException@wil@@
.?AVtype_info@@
VS_VERSION_INFO
StringFileInfo
040904B0
CompanyName
Microsoft Corporation
FileDescription
MdmCommon
FileVersion
10.0.22621.1 (WinBuild.160101.0800)
InternalName
MdmCommon
LegalCopyright
 Microsoft Corporation. All rights reserved.
OriginalFilename
MdmCommon.dll
ProductName
Microsoft
 Windows
 Operating System
ProductVersion
10.0.22621.1
VarFileInfo
Translation
