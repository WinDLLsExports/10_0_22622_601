!This program cannot be run in DOS mode.
.text
`.rdata
@.data
.pdata
@.rsrc
@.reloc
L$0H3
q*Z~:
q*Z~:
SVWAVH
8A^_^[
w|H9{
;@8:t
q0R^G'
ATAVAWH
p0R^G'
 A_A^A\
q:_0#
VWAVH
\$ E3
D$HE3
LcA<E3
HcQ<H
\$ UH
 H3E H3E
)D$ H
H+L$(H
x ATAVAWH
 A_A^A\
@UATAUAVAWH
H;E t
fE9,Du
fA9L]
e@A_A^A]A\]
x AVH
pcPZt
WAVAWH
0A_A^_
UVWAVAWH
tKD9;u I
CD9;u I
PA_A^_^]
8w1t*
x AVH
VWAVH
 A^_^
WAVAWH
fD;1t
fD;9u
fD;8ugH
fD;9u
fD;0tgfD
 A_A^_
t$ UWATAVAWH
fD9<Bu
fD9"u
fD9 u(H
fD9?t
A_A^A\_]
WATAUAVAWH
0A_A^A]A\_
@UATAUAVAWH
A8<4te
A8<6u
e A_A^A]A\]
@USVWATAUAVAWH
t$ E3
A_A^A]A\_^[]
?=u#D
?{uCD
d$ E3
?=u;H
t$ WAVAWH
 A_A^_
x AVH
H0!KP!KTL
UATAUAVAWH
A_A^A]A\]
)D$0H
L$ fH
L$(H+L$8H
qCS0n
UVWATAUAVAWH
A_A^A]A\_^]
UWAVH
\$ UVWATAUAVAWH
fD9$Xu
fE9$_u
fG9$_u
fD9$xu
A_A^A]A\_^]
qa_XR
@USVWAVH
`A^_^[]
UATAUAVAWH
A_A^A]A\]
p WATAUAVAWH
A_A^A]A\_
q"\\<
Q~;6}
|$ UAVAWH
A_A^]
t$ UWAVH
UWATAVAWH
A_A^A\_]
qSVPn
|$ UAVAWH
A_A^]
\$ UVWAVAWH
A_A^_^]
UVWATAUAVAWH
A_A^A]A\_^]
UVWATAUAVAWH
D;d$<
d$8D;d$<
L$PfH
L$XH+M
D$0A9>v!
A_A^A]A\_^]
UWATAVAWH
A_A^A\_]
UVWATAUAVAWH
fF9,~u
pA_A^A]A\_^]
VWAVH
*@8|$\H
0A^_^
UWAUAVAWH
(D$pf
L$`fH
L$hH+M
A_A^A]_]
qbSX3
x AVH
H!l$(
x UATAUAVAWH
t$ E3
A_A^A]A\]
UVWAVAWH
A_A^_^]
UVWATAUAVAWH
D$8E3
H!D$ H!D$@E3
A_A^A]A\_^]
)D$0H+
L$(H+L$8H
|$ UAVAWH
A_A^]
D$0H+
D$8H+
L$`H3
D$@E3
L$PH3
UVWATAUAVAWH
L$PE3
l$ E3
fD9,Xu
fD9lX
A_A^A]A\_^]
L$`H3
L$hH3
UATAUAVAWH
L9fXt
A_A^A]A\]
x UATAUAVAWH
D9f(t
A_A^A]A\]
VWAVH
UATAUAVAWH
A_A^A]A\]
x ATAVAWH
0A_A^A\
H9_Xt
t.9Yxu)H
l$ VWAVH
0A^_^
x AVH
UVWATAVH
D$ E3
@A^A\_^]
x AVH
VWAUAVAWH
@A_A^A]_^
A9~Pu
A9~Tu
VWAVH
D$@E3
!\$8H
D$PH!\$03
`A^_^
UVWATAUAVAWH
H!t$X!t$D!t$PH
)D$pH
L$`fH
L$hH+L$xH
A_A^A]A\_^]
@USVWATAUAVAWH
D9d$0t
A_A^A]A\_^[]
UVWAVAWH
PA_A^_^]
\$ UVWAVAWH
fD94Xu
fD94Qu
A_A^_^]
l$ VWAVH
0A^_^
L$ SVWAVH
(A^_^[
UAVAWH
D$PH+
A_A^]
WAVAWH
@A_A^_
p WAVAWH
0A_A^_
VWAVH
t$XE3
0A^_^
WAVAWH
)D$0H
L$ fH
L$(H+L$8H
A_A^_
p AWH
p WAVAWH
0A_A^_
\$ UVWAVAWH
A_A^_^]
UATAUAVAWH
8FAt.
u7L9h
A_A^A]A\]
@USVWATAUAVAWH
A_A^A]A\_^[]
x UATAUAVAWH
)D$pH
L$HfH
L$PH+L$xH
H9t$8
A_A^A]A\]
USVWATAUAVAWH
L$ E3
}gu=H
EwD9E
A_A^A]A\_^[]
VWAWH
0A__^
` UAVAWH
A_A^]
\$ UVWH
@USVWH
EoH+H
q:U> 
x AVH
x ATAVAWH
)D$0H
L$ fH
L$(H+L$8H
A_A^A\
)D$0H
L$ fH
L$(H+L$8H
x AVH
@USVWAVH
A^_^[]
UVWATAVH
)t$PH
t6PfH
(t$PH
`A^A\_^]
WAVAWH
0A_A^_
@SUVWATAUAVAWH
d$0E;w
L9d$0L
Fd$0I
XA_A^A]A\_^][
x ATAVAWH
)D$0H
L$ fH
L$(H+L$8H
A_A^A\
UATAUAVAWH
!9Y(u
!9Y(u
D9N$t
D9v(t
A_A^A]A\]
H WATAUAVAWH
A_A^A]A\_
WAVAWH
@A_A^_
\$pE3
VWAVH
@A^_^
x ATAVAWH
A_A^A\
USVWATAUAVAWH
D9d$t
A_A^A]A\_^[]
UVWATAUAVAWH
u(8]@}#
0A_A^A]A\_^]
UVWATAUAVAWH
u1H9r
A_A^A]A\_^]
x UAVAWH
D$ E3
A_A^]
l$ VWAWH
!t$0H
x UATAVH
)D$@H
L$PfH
L$XH+L$H3
A^A\]
\$ UVWAVAWH
A_A^_^]
@USVWATAUAVAWH
A_A^A]A\_^[]
qr]\W'
UVWATAUAVAWH
)D$PH
L$@fH
L$HH+L$XH
)D$PH
L$pfH
L$xH+L$XH
(D$pf
)D$PH
H+L$XH
)D$PH
H+L$XH
)D$PH
H+L$XH
)D$PH
L$@fH
L$HH+L$XH
(D$@f
A_A^A]A\_^]
t$ WH
` UAVAWH
A_A^]
\$ UVWAVAWH
\$ E3
\$ E3
\$ E3
\$ E3
PA_A^_^]
L$ UVWATAUAVAWH
u`H9K
u&I9M
A_A^A]A\_^]
H UATAUAVAWH
A_A^A]A\]
)D$@H
L$ fH
L$(H+L$HH
WAVAWH
)D$0H
L$ fH
L$(H+L$8H
A_A^_
x ATAVAWH
@A_A^A\
WAVAWH
(t$@I
A_A^_
qB^\Z
D$ E3
VWAVH
0A^_^
UVWATAUAVAWH
D9gpu
D9gtu
D8}@t
D8}Pu
D8}Xt!
`A_A^A]A\_^]
UVWATAUAVAWH
PA_A^A]A\_^]
UVWATAUAVAWH
D9oxu
D9o|u
fD9<Hu
D8}@t
D8}Pu
D8}Xt!
`A_A^A]A\_^]
t$ UWAVH
L$hH3
\$ UVWATAUAVAWH
fE9$Nu
fE9$Vu
fD9$Au
D8d$@t
T$HD8d$At
D8d$Ct!A
D8d$Dt!A
D8d$Et!A
D8d$Ft A
(D8d$Gt!A
D;L$`u!A
T$p;L$ds4E
D;L$hu!A
A_A^A]A\_^]
H!t$8H
D$0!t$(H!t$ E3
t$ E3
L$@H3
D$0@t
L$@H3
9_$t>
)D$0H
L$ fH
L$(H+L$8H
t$ WH
UATAUAVAWH
)D$pH
L$HfH
L$PH+L$xH
L9c0u
)D$pH
L$HfH
L$PH+L$xH
D$ E3
A_A^A]A\]
@USVWATAUAVAWH
97uE9
)D$@H
L$PfH
L$XH+L$HH
)D$@H
L$0fH
L$8H+L$HH
F@H;G@
GAA8FAt
G`I9F`t
)D$@H
L$0fH
L$8H+L$HH
A_A^A]A\_^[]
UWAVH
>92u@
UWATAVAWH
A_A^A\_]
UVWATAUAVAWH
pA_A^A]A\_^]
USVWATAUAVAWH
u(L9p
uX9UHtSH
xA_A^A]A\_^[]
UVWATAUAVAWH
pA_A^A]A\_^]
x UATAWH
A_A\]
UVWATAUAVAWH
#9_lu
`A_A^A]A\_^]
)D$@H
L$ fH
L$(H+L$HH
D$ E3
)D$0H
L$ fH
L$(H+L$8H
)D$0H
L$ fH
L$(H+L$8H
UWAVH
)D$0H
L$ fH
L$(H+L$8H
UVWAVAWH
A_A^_^]
UWAUAVAWH
D$ E3
A_A^A]_]
VWAWH
0A__^
\$ UVWATAUAVAWH
l$ fD
A_A^A]A\_^]
UWAUAVAWH
A_A^A]_]
x UAVAWH
t$ E3
A_A^]
p WATAUAVAWH
L$0E3
A_A^A]A\_
L$ UVWATAUAVAWH
A_A^A]A\_^]
x AVH
)D$0H
L$ fH
L$(H+L$8H
VWAVH
0A^_^
@USVWAVH
PA^_^[]
UWAVH
H!} H
H!}(H!}0D
E098w
 A^_]
x AVH
|$ UATAUAVAWH
P(H;UPu
A_A^A]A\]
t$ WH
D$ E3
@8|$h@
D$ E3
@8|$h@
|$ UH
WATAUAVAWH
0A_A^A]A\_H
|$ UATAUAVAWH
D$PE3
!t$`H
D$ E3
A_A^A]A\]
L$`H3
x AVH
x AVH
E(=csm
E8=csm
EH=csm
EX=csm
Eh=csm
Ex=csm
bad allocation
generic
unknown error
iostream
iostream stream error
system
invalid string position
string too long
permission denied
file exists
no such device
filename too long
device or resource busy
io error
directory not empty
invalid argument
no space on device
no such file or directory
function not supported
no lock available
not enough memory
resource unavailable try again
cross device link
operation canceled
too many files open
permission_denied
address_in_use
address_not_available
address_family_not_supported
connection_already_in_progress
bad_file_descriptor
connection_aborted
connection_refused
connection_reset
destination_address_required
bad_address
host_unreachable
operation_in_progress
interrupted
invalid_argument
already_connected
too_many_files_open
message_size
filename_too_long
network_down
network_reset
network_unreachable
no_buffer_space
no_protocol_option
not_connected
not_a_socket
operation_not_supported
protocol_not_supported
wrong_protocol_type
timed_out
operation_would_block
address family not supported
address in use
address not available
already connected
argument list too long
argument out of domain
bad address
bad file descriptor
bad message
broken pipe
connection aborted
connection already in progress
connection refused
connection reset
destination address required
executable format error
file too large
host unreachable
identifier removed
illegal byte sequence
inappropriate io control operation
invalid seek
is a directory
message size
network down
network reset
network unreachable
no buffer space
no child process
no link
no message available
no message
no protocol option
no stream resources
no such device or address
no such process
not a directory
not a socket
not a stream
not connected
not supported
operation in progress
operation not permitted
operation not supported
operation would block
owner dead
protocol error
protocol not supported
read only file system
resource deadlock would occur
result out of range
state not recoverable
stream timeout
text file busy
timed out
too many files open in system
too many links
too many symbolic link levels
value too large
wrong protocol type
ForceRemove
NoRemove
Delete
CPrvEnumObject::CPrvEnumObject()
CPrvEnumObject::~CPrvEnumObject()
VdsBas::DllMain()
DllCanUnloadNow()
DllGetClassObject()
DllRegisterServer()
DllRegisterServer: GetModuleHanle() failed: %X
DllUnregisterServer()
REGISTRY
HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
HKEY_USERS
HKEY_PERFORMANCE_DATA
HKEY_DYN_DATA
HKEY_CURRENT_CONFIG
LocalServer32
Module
CLSID
TYPELIB
API-MS-Win-Core-LocalRegistry-L1-1-0.dll
RegDeleteKeyExW
advapi32.dll
RegDeleteKeyW
;SOCWM
SOCW.C
jSOCW
BB{Qd4
SOCWE
CBasicDisk::CBasicDisk()
CBasicPack::CBasicPack()
CBasicPack::SetDisk()
CBasicProvider::CBasicProvider()
CBasicProvider::~CBasicProvider
g_CriticalSection released
CBasicProvider::RetrivePnpBasicVolumes()
CBasicProvider::RetrivePnpBasicVolumes, 1, index=%d, hr=%lX
CBasicProvider::RetrieveBasicVolumesIntoMap()
CBasicProvider::RetrieveBasicVolumesIntoMap, 0, hr=%lX
CBasicProvider::RetrieveBasicVolumesIntoMap, 1, error=%ld
CBasicProvider::RetrieveBasicVolumesIntoMap, 2, error=%ld
CBasicProvider::RetrieveBasicVolumesIntoMap, 3, error=%ld
CBasicProvider::RetrieveBasicVolumesIntoMap, 4, error=%ld
CBasicProvider::RetrieveBasicVolumesIntoMap, 5, error=%ld
CBasicProvider::RetrieveBasicVolumesIntoMap, 6, error=%ld
CBasicProvider::RetrieveBasicVolumesIntoMap, 7, hr=%lX
CBasicProvider::RetrieveBasicVolumesIntoMap, 8, hr=%lX
CBasicProvider::RetrieveBasicVolumesIntoMap, 9, hr=%lX
CBasicProvider::FindRemoveVolumeDevicePathInMap()
CBasicProvider::AddVolumeDevicePathToMap()
CBasicProvider::AddVolumeDevicePathToMap, 1, hr=%lX
CBasicProvider::AddVolumeDevicePathToMap, 2, hr=%lX
CBasicProvider::AddVolumeDevicePathToMap, 3, hr=%lX
CBasicProvider::AddVolumeDevicePathToMap, 4, hr=%lX
CBasicProvider::SendNotification()
CBasicProvider::SendPackNotification()
CBasicProvider::SendDiskNotification()
CBasicProvider::OnMediaChange()
CBasicProvider::OnDiskLayoutChange()
UNKNOWN
CBasicProvider::OnDiskLayoutChange, 1, hr=%lX, path=%s
CBasicProvider::OnDiskLayoutChange, 1, (%s): %X
CBasicProvider::OnDiskLayoutChange, 2, (%s): %ld
CBasicProvider::OnDiskLayoutChange, 3, (%s): %ld
CBasicProvider::OnDiskLayoutChange, 4, (%s): %lX
CBasicProvider::OnVolumeArrival()
CBasicProvider::FindFixedDiskByNumber()
CBasicProvider::OnVolumeRemoval()
CBasicProvider::GetExtraVolumeFlags()
CBasicProvider::InitializeVolumesInformation()
CBasicProvider::AddVolumeWithFlag()
CBasicProvider::GetBootVolumeName()
CBasicProvider::GetSystemVolumeName()
CBasicProvider::IsSystemVolume()
CBasicProvider::IfsGetDeviceInformation()
CBasicProvider::IfsGetDeviceInformation, 1, indicates this is not a memory stick: %ld.
CBasicProvider::IfsGetDeviceInformationByHandle()
CBasicProvider::IfsGetDeviceInformationByHandle: QueryDeviceInformationByHandle failed: %X.
CBasicProvider::AddObjectToMap()
CBasicProvider::AddDiskToMap()
CBasicProvider::AddDiskToMap, 1, line=%ld result=%ld
CBasicProvider::RemoveObjectFromMap()
CBasicProvider::RemoveObjectFromMap, 1: Tried to remove an item that did not exist
CBasicProvider::RemoveDiskFromMap()
CBasicProvider::RemoveDiskFromMap, 1
CBasicProvider::RemoveDiskFromMap, 2, Key=%S
CBasicProvider::AddVolumeToMap()
CBasicProvider::GetObjectIUnknown()
QueryObjects()
CBasicProvider::QueryObjects, 1
CBasicProvider::QueryObjects, 2
CBasicProvider::QueryObjects, 3
CBasicProvider::QueryObjects, 4
CBasicProvider::QueryObjects, 5
CBasicProvider::RemoveFromMaps()
CBasicProvider::RemoveFromMaps,1:Pack found and deleted from the pack map
CBasicProvider::RemoveFromMaps,3:Pack found and deleted from the object map
CBasicProvider::GetProperties()
CBasicProvider::QueryPacks()
CBasicProvider::CreatePack()
CBasicProvider::CreatePack,1: failed to create pack instance: %lX
CBasicProvider::CreatePack,2: failed to initialize pack: %lX
CBasicProvider::CreatePack,3: out of memory: %lX
CBasicProvider::OnLoad()
CBasicProvider::OnLoad: failed to get callback interfaces from the service: %X
CBasicProvider::OnLoad: failed to load fmifs.dll: (%p,%p) %X
CBasicProvider::OnUnload
CBasicProvider::GetObject()
CBasicProvider::GetObject, 1
CBasicProvider::GetObject, 2
CBasicProvider::GetObject, 3: Object not found returning VDS_E_OBJECT_NOT_FOUND
CBasicProvider::GetObject, 4 Object is type %x, and we were looking for type %x
CBasicProvider::QueryIfOwnDisk()
ClaimedDiskRemovableMedia
ClaimedDisk
CBasicProvider::DiskRemoved()
CBasicProvider::GetVolumeId()
CBasicProvider::GetDiskId()
CBasicProvider::Refresh()
CBasicProvider::QueryClaim()
CBasicProvider::QueryClaim, 1, hr=%lX, pwszDevicePath=%s, pLayout=%p
CBasicProvider::QueryClaim, 2, pwszDevicePath=%s
CBasicProvider::QueryClaim, 3, hr=%lX, pwszDevicePath=%s
CBasicProvider::QueryClaim, 4, hr=%lX, pwszDevicePath=%s
CBasicProvider::QueryClaim, 5, hr=%lX, pwszDevicePath=%s
CBasicProvider::QueryClaim, 6, hr=%lX, pwszDevicePath=%s
CBasicProvider::QueryClaim, 7, hr=%lX, pwszDevicePath=%s
CBasicProvider::QueryClaim, 8, hr=%lX, pwszDevicePath=%s
CBasicProvider::InitiateSecondAuction()
CBasicProvider::InitiateSecondAuction, 1, hr=%lX, pwszDevicePath=%s, pLayout=%p, pDisk=%p
CVdsCallbackObject::InitiateSecondAuction, 2, %s
CVdsCallbackObject::InitiateSecondAuction, 3, %s
CVdsCallbackObject::InitiateSecondAuction, 4, %s, error=%ld
AuctionThread()(Basic Provider)
CBasicProvider::AuctionThread: failed to claim disk %s: %X
AuctionThread(Basic Provider): failed to query service: %X
CBasicProvider::ClaimDisk()
CBasicProvider::ClaimDisk, 0, disk:%S, Device: %S
CBasicProvider::ClaimDisk, 1, disk:%S, Device: %S
CBasicProvider::ClaimDisk, 3, disk:%S, Device: %S, error=%ld
CBasicProvider::ClaimDisk, 4, disk:%S, Device: %S, hr=%lX
CBasicProvider::ClaimDisk, 5, disk:%S, Device: %S, error=%ld
    ID: {%.8x-%.4x-%.4x-%.2x%.2x-%.2x%.2x%.2x%.2x%.2x%.2x}
CBasicProvider::ClaimDisk, 6, disk:%S, Device: %S, hr=%lX
CBasicProvider::FindDiskByDevicePath()
CBasicProvider::GetUninstallInfo
CBasicProvider::GetUninstallInfo, 1, hr=%lX, pDiskIdArray=%p, ulDiskCount=%lu, pUninstallInfo=%p
CBasicProvider::GetUninstallInfo, 2, hr=%lX, object type=%ld
CBasicProvider::GetUninstallInfo, 3, hr=%lX
CBasicProvider::GetUninstallInfo, 4, hr=%lX, object type=%ld
CBasicProvider::GetUninstallInfo, 6, hr=%lX, object type=%ld
CBasicProvider::GetUninstallInfo, 7, hr=%lX
EXIT CBasicProvider::GetUninstallInfo, hr=%lX
CBasicProvider::OfflineOnlineDisk
CBasicDisk::OfflineOnlineDisk, 1, disk number=%ld, hr=%lX
CBasicDisk::OfflineOnlineDisk, 2, disk number=%ld, hr=%lX
CBasicDisk::OfflineOnlineDisk, 6, disk number=%ld, hr=%lX
EXIT CBasicProvider::OfflineOnlineDisk, hr=%lX
CBasicProvider::m_FillVolumeIdBuffer
CBasicProvider::m_FillVolumeIdBuffer, 1, hr=%lX, pInputDiskObj=%p, ppCurrent=%p
CBasicProvider::m_FillVolumeIdBuffer, 2, hr=%lX
EXIT CBasicProvider::m_FillVolumeIdBuffer, hr=%lX
CBasicProvider::DumpPacks
CBasicProvider::DumpPacks, 1
CBasicProvider::GetDiskObject()
CBasicProvider::GetDiskObject, 1
CBasicProvider::GetDiskObject, 2: Object not found returning VDS_E_OBJECT_NOT_FOUND
@kon|
CBsAsyncObject::CBsAsyncObject()
CBsAsyncObject::~CBsAsyncObject()
CBasicPack::~CBasicPack()
CBasicPack::Initialize()
CBasicPack::InternalRelease()
CBasicPack::RemoveDisk()
Disk removed: %S
CBasicPack::OnMediaChange()
CBasicPack::FindDiskByNotificationHandle()
CBasicPack::FindDiskByNumber()
CBasicPack::FindDiskByDevicePath()
CBasicPack::GetVolumeId()
CBasicPack::GetDiskId()
CBasicPack::DiskRemoved()
CBasicPack::GetProvider()
CBasicPack::GetProperties()
CBasicPack::QueryVolumes()
CBasicPack::QueryDisks()
CBasicPack::CreateVolume()
CBasicPack::CreateVolume, 1, hr=%lX
CBasicPack::AddDisk()
CBasicPack::MigrateDisks()
CBasicPack::ReplaceDisk()
CBasicPack::RemoveMissingDisk()
CBasicPack::Recover()
CBasicPack::CreateVolume2()
CBasicPack::CreateVolume2, 1, hr=%X
CBasicPack::CreateVolume2, 2, hr=%X
CBasicPack::CreateVolume2, 3, hr=%X
CBasicPack::CreateVolume2, 4, hr=%X
CBasicPack::CreateVolume2, 5, hr=%X
CBasicPack::CreateVolume2, 7, hr=%X
CBasicPack::CreateVolume2, 8, hr=%X
CBasicPack::CreateVolume2, 9, hr=%X
CBasicPack::CreateVolume2, 10, hr=%X
CBasicPack::CreateVolume2, 11, hr=%X
CBasicPack::IsCapableMigrateTo()
CBasicPack::IsCapableMigrateFrom()
CBasicPack::PrepareToExport()
CBasicPack::PrepareToExport, 1, hr=%lX
CBasicPack::PrepareToExport, 2, hr=%lX
CBasicPack::PrepareToExport, 3, eDrives with bands can't be dynamic, hr=%lX
CBasicPack::PrepareToImport()
CBasicPack::ExportDisks()
CBasicPack::ImportDisks()
CBasicPack::FinishExport()
CBasicPack::FinishImport()
CBasicPack::FinishImport: out of memory (unrecoverable error)
CBasicPack::FinishImport: unrecoverable error: %X
CBasicPack::AddDisk, 1 hr=%lX
CBasicPack::AddDisk, 2 error=%ld
CBasicPack::AddDisk, 3 error=%ld
CBasicPack::AddDisk, 4 hr=%lX
CBasicPack::AddDisk, 5 hr=%lX
CBasicPack::AddDisk, Device activation failed, ignoring
CBasicPack::AddDisk, 6 hr=%lX
CBasicPack::AddDisk, 7 error=%ld
CBasicPack::AddDisk, 8 hr=%lX
CBasicPack::AddDisk, 9 hr=%lX
CBasicPack::AddDisk, 10 hr=%lX
Microsoft reserved partition
CBasicPack::AddDisk, 11 hr=%lX
CBasicPack::AddDisk, 12 hr=%lX
CBasicPack::AddDisk, 13 hr=%lX
CBasicPack::AddDisk, 14 hr=%lX
CBasicPack::DumpPack
CBasicPack::DumpPack, 2, hr=%lX
PACK PACK PACK PACK PACK
Name = %s
Status = %ld
Flags = 0x%lX
VDS ID= %s
CBasicPack::DumpPack, EMPTY PACK - no disk
CBasicPack::DumpPack, 4, hr=%lX
CBasicPack::DumpPack, 5, hr=%lX
DISK DISK DISK DISK 
Disk Number = %ld
MAX partitions = %lu
Volume Device = %p
Starting Usable Offset = %I64u
0x%I64X
Usable Length= %I64u
0x%I64X
True Size = %I64u
0x%I64X
Dont Handle Layout Change Count = %ld
Migrating = %d
Being Cleaned = %d
Offline Reason = %ld
Revert On Close = %d
Health = %ld
Device Type = %ld
Media Type = %ld
Size = %I64u
0x%I64X
BPS = %lu
SPT = %lu
TPC = %lu
BusType = %lu
Partition Type = %lu
Address = %s
Adapter Name = %s
Device Path = %s
DWORD sig = 0x%lX
GUID sig: {%s}
VDS ID= {%s}
Location Path = %s
CBasicPack::ActivateBandCapability()
CBasicPack::ActivateBandCapability, 1, Device is not band capable or is already activated.
CBasicPack::ActivateBandCapability, 2, band capability activation failed, hr=%lX
9z<--
CBasicVolumePlex::CBasicVolumePlex()
CBasicVolumePlex::~CBasicVolumePlex()
CBasicVolume::Initialize()
CBasicVolume::Initialize, 1, %S: %lX 
CBasicVolume::Initialize, 2, %S: %lX 
CBasicVolume::Initialize, 3, %S: %lX 
CBasicVolume::Initialize, 4, name=%S, error=%ld 
CBasicVolume::Initialize, 5, name=%S, error=%ld 
CBasicVolume::Initialize, 6, name=%S, error=%ld 
CBasicVolume::SetDevicePath()
CBasicVolume::SetDevicePath, Current Device Path = %S Volume Name=%S
CBasicVolume::SetDevicePath, 1, Updated Device Path = %S
CBasicVolume::SetDevicePath, 2, Updated Device Path = %S
CBasicVolume::GetObjectIdIfMathc()
CBasicVolume::GetGptFlags
CBasicVolume::GetGptFlags, 1
CBasicVolume::GetGptFlags, 2, hr=%lX
CBasicVolume::GetGptFlags, 3, hr=%lX
CBasicVolume::GetGptFlags, 4, status=%lX
EXIT CBasicVolume::GetGptFlags, hr=%lX
CBasicVolume::GetProperties()
CBasicVolume::GetProperties, 1, expected for volumes offline disk, %lX
CBasicVolume::GetProperties, 1, %lX
CBasicVolume::GetProperties, 2, %lX
CBasicVolume::GetProperties, 3, %lX
CBasicVolume::GetProperties, 4, expected for volumes on offline disk, %lX
CBasicVolume::GetProperties, 4, %lX
CBasicVolume::GetProperties, 8, %lX
CBasicVolume::GetProperties, 9, %lX
CBasicVolume::GetPack()
CBasicVolume::QueryPlexes()
CBasicVolume::Extend()
Extendvolume
CBasicVolume::Extend, 1
CBasicVolume::Extend, 2, hr=%lX
CBasicVolume::Extend, 3
CBasicVolume::Extend, 4
CBasicVolume::Extend, 5
CBasicVolume::Extend, 6
CBasicVolume::Extend, 7, hr=%lX
CBasicVolume::Shrink()
ShrinkVolume
CBasicVolume::AddPlex()
CBasicVolume::BreakPlex
CBasicVolume::RemovePlex
CBasicVolume::Delete()
DeleteVolume
CBasicVolume::Delete
CBasicVolume::SetFlags()
SetVolumeFlags
CBasicVolume::SetFlags, 1
CBasicVolume::SetFlags, 2
CBasicVolume::SetFlags, 3
CBasicVolume::SetFlags, 4
CBasicVolume::SetFlags, 5
CBasicVolume::SetFlags, 6
CBasicVolume::SetFlags, 7, hr=%lX
CBasicVolume::SetFlags, 8
CBasicVolume::SetFlags, 9
CBasicVolume::SetFlags, 10
CBasicVolume::SetFlags, 11
CBasicVolume::SetFlags, 12, hr=%lX
CBasicVolume::ClearFlags
ClearVolumeFlags
CBasicVolume::ClearFlags, 1
CBasicVolume::ClearFlags, 2
CBasicVolume::ClearFlags, 3
CBasicVolume::ClearFlags, 4
CBasicVolume::ClearFlags, 5
CBasicVolume::ClearFlags, 6
CBasicVolume::ClearFlags, 7
CBasicVolume::ClearFlags, 7.5, hr=%lX
CBasicVolume::ClearFlags, 8, hr=%lX
CBasicVolume::Online
CBasicVolume::CanContinue()
CBasicVolume::CanContinue, 1, hr=%lX
CBasicProvider::AddPageFileVolumes()
CBasicProvider::AddPageFileVolumes: NtQuerySystemInformation failed: %X
CBasicProvider::AddPageFileVolumes: QueryDosDevice: %X
\pagefile.sys
CBasicVolume::ValidateCall()
CBasicVolume::ValidateCall, 1, hr=%lX
CBasicVolume::ValidateCall, 2, hr=%lX
CBasicVolume::SetVolumeName()
\Device\Harddisk%d\Partition%d
CBasicVolume::SetVolumeName, OpenDevice failed, 1, name=%S, error=%ld 
CBasicVolume::SetVolumeName, GetDeviceName failed, 2, name=%S, error=%ld 
CBasicVolume::SetVolumeName, 3, name=%S, error=%ld 
CBasicVolume::SetVolumeName, Volume Name is Set =%S
CBasicVolumePlex::Initialize()
CBasicVolumePlex::Initialize: CoCreateGuid failed: %X
CBasicVolumePlex::Delete()
CBasicVolumePlex::GetExtraFlags()
CBasicVolumePlex::GetExtraFlags,1: no disk object was found
CBasicVolumePlex::GetProperties()
CBasicVolumePlex::GetVolume()
CBasicVolumePlex::QueryExtents()
CBasicVolumePlex::Repair()
CBasicVolume::CBasicVolume()
CBasicVolume::~CBasicVolume()
CBasicDisk::~CBasicDisk()
CBasicDisk::m_GetSystemDiskNumber
CBasicDisk::m_GetSystemDiskNumber, 1
CBasicDisk::m_GetSystemDiskNumber, 2, hr=%lX
CBasicDisk::m_GetSystemDiskNumber, 3, error=%ld
CBasicDisk::m_GetSystemDiskNumber, 4, hr=%lX
CBasicDisk::m_GetSystemDiskNumber, 5, hr=%lX
CBasicDisk::m_GetSystemDiskNumber, 6, hr=%lX
EXIT CBasicDisk::m_GetSystemDiskNumber, hr=%lX
CBasicDisk::Initialize()
CBasicDisk::Initialize(), 0, path=%s
CBasicDisk::Initialize, 1, hr=%lX
CBasicDisk::Initialize, 2, hr=%lX
CBasicDisk::Initialize, 3, hr=%lX
CBasicDisk::Initialize, 3.5, error=%ld
CBasicDisk::Initialize, 4, error=%ld
CBasicDisk::Initialize, 5, error=%ld
CBasicDisk::Initialize, 6, error=%ld
CBasicDisk::Initialize, 7, error=%ld
CBasicDisk::Initialize, 8, error=%ld
CBasicDisk::Initialize, 8.5, error=%lX
CBasicDisk::Initialize, 9, error=%ld
CBasicDisk::Initialize, 10, error=%ld
CBasicDisk::Initialize, 11, error=%ld
CBasicDisk::Initialize, 12, error=%ld
CBasicDisk::Initialize, 13, error=%ld
CBasicDisk::Initialize, 14, error=%ld
CBasicDisk::Initialize, 15, error=%ld
CBasicDisk::Initialize, 16, error=%ld
CBasicDisk::Initialize, 17, error=%ld
CBasicDisk::Initialize, 18, error=%ld
CBasicDisk::Initialize, 19, error=%ld
CBasicDisk::Initialize(), 20, Disk Number=%ld
\\?\PhysicalDrive%d
\\?\CdRom%d
CBasicDisk::Initialize, 21, error=%ld
CBasicDisk::Initialize, DISK NUMBER: %lu
CBasicDisk::Initialize, 22, error=%ld
CBasicDisk::Initialize, 23, error=%ld
CBasicDisk::Initialize, 24, error=%ld
CBasicDisk::Initialize, DISK HAS PAGEFILE
CBasicDisk::Initialize, DISK HAS HIBER FILE
CBasicDisk::Initialize, DISK HAS CRASHDUMP
CBasicDisk::Initialize, 24.1, error=%ld
CBasicDisk::Initialize, 25, error=%ld
CBasicDisk::Initialize, DISK IS READONLY
CBasicDisk::Initialize, 25.1, error=%ld
CBasicDisk::Initialize, DISK current state is READONLY
CBasicDisk::Initialize, 25.25, hr=%lX
CBasicDisk::Initialize, BOOT FROM DISK:%lu
CBasicDisk::Initialize, 25.5, hr=%lX
CBasicDisk::Initialize, BOOT DISK: %lu
CBasicDisk::Initialize, 25.75, hr=%lX
CBasicDisk::Initialize, SYSTEM DISK: %lu
CBasicDisk::Initialize, Disk is band capable
CBasicDisk::Initialize, 26, error=%ld
CBasicDisk::Initialize, 27, error=%ld
CBasicDisk::Initialize, 28, error=%ld
CBasicDisk::CreateVolumeForRegion()
CBasicDisk::CreateVolumeForRegion, 0, error=%ld
CBasicDisk::CreateVolumeForRegion, 1
CBasicDisk::CreateVolumeForRegion, 2
CBasicDisk::CreateVolumeForRegion,3
CBasicDisk::CreateVolumeForRegion,4
CBasicDisk::CreateMbrRegionList()
CBasicDisk::CreateMbrRegionList, 1, hr=%X
CBasicDisk::CreateGptRegionList()
CBasicDisk::FindAndCreateFreeRegions()
CBasicDisk::FindAndCreateFreeRegions, 1
CBasicDisk::FindAndCreateFreeRegions, 2
CBasicDisk::FindAndCreateFreeRegions, 3
CBasicDisk::FindAndCreateFreeRegions, 4
CBasicDisk::CreateAndInsertFreeRegion()
CBasicDisk::CreateAndInsertFreeRegion, 1
CBasicDisk::InsertInRegionList()
CBasicDisk::FindContainingFreeRegion()
CBasicDisk::FindPartitionRegion()
CBasicDisk::AutoPickRegion()
CBasicDisk::AutoPickRegion(), 1
CBasicDisk::AutoPickRegion(), 2
CBasicDisk::FindRegionAndAlign()
CBasicDisk::FindRegionAndAlign, 1, hr=%lX, pullOffset=%p, pullSize=%p
CBasicDisk::FindRegionAndAlign, 2
CBasicDisk::CreateExtendedRegion()
CBasicDisk::CreateExtendedRegion, 1
CBasicDisk::DuplicateRegionList()
CBasicDisk::DuplicateRegionList, 1
CBasicDisk::UpdateRegionList()
CBasicDisk::ClearRegionList()
CBasicDisk::ClearRegionList, CORRUPTED regiion list!!!!! 2
CBasicDisk::Delete()
CBasicDisk::MarkVolumeRegions()
CBasicDisk::MarkVolumeRegions, 1, error=%ld
CBasicDisk::MarkVolumeRegions, 2, Volume Name=%S
CBasicDisk::MarkVolumeRegions, 3, Volume Name=%S
CBasicDisk::MarkVolumeRegions, 4, error=%ld, Volume Name=%S
CBasicDisk::MarkVolumeRegions, 5, Volume Name=%S
CBasicDisk::MarkVolumeRegions, 6, error=%ld, Volume Name=%S
CBasicDisk::MarkVolumeRegions, 7, error=%ld, Volume Name=%S
CBasicDisk::MarkVolumeRegions, 8, error=%ld, Volume Name=%S
CBasicDisk::MarkVolumeRegions, 8, error=%ld
\Device\Harddisk%lu\Partition%lu
CBasicDisk::MarkVolumeRegions, 9, error=%ld, Volume Name=%S
CBasicDisk::CreateVolumesFromRegions()
CBasicDisk::CreateVolumesFromRegions, 1, error=%ld
CBasicDisk::CreateVolumesFromRegions, 2, error=%ld
CBasicDisk::CreateVolumesFromRegions, 3, error=%ld
CBasicDisk::CreateVolumesFromRegions, 4, error=%ld
CBasicDisk::CreateVolumeForDevice()
CBasicDisk::CreateVolumeForDevice, 1
\Device\Harddisk%lu\Partition1
\Device\CdRom%lu
CBasicDisk::CreateVolumeForDevice, 2, Name=%S, error=%ld
CBasicDisk::CreateVolumeForDevice, 3, Name=%S, error=%ld
CBasicDisk::CreateVolumeForDevice, 4, Name=%S, error=%ld
CBasicDisk::IsRegionAVolume()
CBasicDisk::IsSystemPartition()
CBasicDisk::IsSystemPartition: Failed to find outif %S is system volume: %X
CBasicDisk::CountPartition()
CBasicDisk::CountDataPartition()
CBasicDisk::CountRegion()
CBasicDisk::CreatePartValidate()
CBasicDisk::CreatePartValidate, 1, para=%p, pAsync=%p
CBasicDisk::CreatePartValidate, 2,
CBasicDisk::CreatePartValidate, 3, hr=%lX
CBasicDisk::CreatePartValidate, 4, hr=%lX
CBasicDisk::CreatePartValidate, 5, hr=%lX
CBasicDisk::CreatePartValidate, 6
CBasicDisk::CreatePartValidate, 7, hr=%lX
CBasicDisk::CreatePartValidate, 8, hr=%lX
CBasicDisk::FindFreeRegionEx()
CBasicDisk::FindFreeRegionEx, 1, hr=%lX, pullOffset=%p, pullSize=%p, ullSize=%I64d, pulAlign=%p, para=%p, ppRegion=%p
CBasicDisk::FindFreeRegionEx, 2, hr=%lX
CBasicDisk::FindFreeRegionEx, 3, hr=%lX
CBasicDisk::FindFreeRegionEx, 4, hr=%lX
CBasicDisk::FindFreeRegionEx, 5, hr=%lX
CBasicDisk::FindFreeRegionEx, 7, hr=%lX
CBasicDisk::FindFreeRegionEx, 8, hr=%lX
CBasicDisk::FindFreeRegionEx, 10, hr=%lX
CBasicDisk::CreateRegions()
CBasicDisk::CreateRegions, 1, hr=%lX, ullSize=%I64d, para=%p, ppRegion=%p
CBasicDisk::CreateRegions, 2, hr=%lX
Dump reg 1
CBasicDisk::CreateRegions, 3, hr=%lX
Dump reg 2
CBasicDisk::CreateRegions, 4, hr=%lX
CBasicDisk::CreateRegions, 5, hr=%lX
CBasicDisk::CreateRegions, 6, hr=%lX
CBasicDisk::CreateRegions, 7, hr=%lX
Dump reg 3
CBasicDisk::CreateRegions, 8, hr=%lX
Dump reg 4
CBasicDisk::CreateRegions, 9, hr=%lX
Dump reg 5
Dump reg 6
CBasicDisk::VerifyRegions()
CBasicDisk::VerifyRegions, Dump reg 1
CBasicDisk::VerifyRegions, Dump reg 2
CBasicDisk::VerifyRegions, Dump reg 3
CBasicDisk::VerifyRegions, Dump reg 4
CBasicDisk::CreatePartLayout()
CBasicDisk::CreatePartLayout, 1, hr=%lX, para=%p, pRegion=%p, ppChangedRegion=%p, ppLayout=%p, 
CBasicDisk::CreatePartLayout, 2, hr=%lX
CBasicDisk::CreatePartLayout, 3, hr=%lX
CBasicDisk::CreatePartLayout, Dump reg 1
CBasicDisk::CreatePartLayout, 3b, hr=%lX
Basic data partition
BSP partition
Cluster partition
DPP partition
LDM data partition
LDM metadata partition
Main OS partition
OS data partition
PreInstalled partition
Servicing files partition
Servicing metadata partition
Servicing reserve partition
Servicing staging root partition
EFI system partition
Windows system partition
CBasicDisk::CreatePartLayout, 4, hr=%lX
CBasicDisk::CreatePartLayout, Dump reg 2
CBasicDisk::CreatePartLayout, 5, hr=%lX
CBasicDisk::CreatePartLayout, 6, hr=%lX
CBasicDisk::SetupToListen()
CBasicDisk::SetupToListen, 2, bListenNotification=%d
CBasicDisk::SetupToListen, 3, hr=%lX
CBasicDisk::SetupToListen, 4, bListenNotification=%d
CBasicDisk::SetupToListen, 5, bListenNotification=%d
CBasicDisk::SetupToListen, 5a, removing Notification object
CBasicDisk::SetupToListen, 6, hr=%lX
CBasicDisk::SetupToListen, 7, hr=%lX
CBasicDisk::CreatePartitionHelper()
CBasicDisk::CreatePartitionHelper, .5, hr=%lX
CBasicDisk::CreatePartitionHelper, 1, hr=%lX
CBasicDisk::CreatePartitionHelper, 2
CBasicDisk::CreatePartitionHelper, 3
CBasicDisk::CreatePartitionHelper, 2, hr=%lX
CBasicDisk::CreatePartitionHelper, 3, hr=%lX
CBasicDisk::CreatePartitionHelper, 4, hr=%lX
CBasicDisk::CreatePartitionHelper, 4B
CBasicDisk::CreatePartitionHelper, 5, hr=%lX
CBasicDisk::CreatePartitionHelper, 5a, hr=%lX
CBasicDisk::CreatePartitionHelper, 5b, hr=%lX
CBasicDisk::CreatePartitionHelper, 6a, hr=%lX
CBasicDisk::CreatePartitionHelper, 6b, hr=%lX
CBasicDisk::CreatePartitionHelper, 7, hr=%lX
CBasicDisk::CreatePartitionHelper, !!!!!!!!!!!!!, Offset=%I64u, Size=%I64u, DiskNumber=%ld, PartitionNumber=%ld
CBasicDisk::CreatePartitionHelper, 7a, hr=%lX
CBasicDisk::GetVolumeDriveLetter()
CBasicDisk::RemoveVolumeDriveLetter()
\DosDevices\%c:
\\.\MountPointManager
CBasicDisk::RemoveVolumeDriveLetter: CreateFile() failed: %X
CBasicDisk::RemoveVolumeDriveLetter: DeviceIoControl() failed: %X
CBasicDisk::SendPartitionNotification()
CBasicDisk::SendVolumeNotification()
CBasicDisk::SendFsNotification()
CBasicDisk::SendDiskNotification()
CBasicDisk::SendPartitionAndVolumeNotification()
CBasicDisk::SendPartitionAndVolumeNotification, volume creation NOTIFICATION sent.
CBasicDisk::SendNewPartitionAndVolumeNotification()
CBasicDisk::SendVolumeModifyNotifications()
CBasicDisk::CreatePartitionNotificationHandlerEntry()
CBasicDisk::CreatePartitionNotificationHandler()
CBasicDisk::CreatePartitionNotificationHandler, 1, %lX
CBasicDisk::CreatePartitionNotificationHandler, 2, %ld
CBasicDisk::CreatePartitionNotificationHandler, 3, %ld
CBasicDisk::CreatePartitionNotificationHandler, 4, %ld
CBasicDisk::CreatePartitionNotificationHandler, 4.5
CBasicDisk::CreatePartitionNotificationHandler, 5, %lX
CBasicDisk::CreatePartitionNotificationHandler, 6, %lx
CBasicDisk::CleanDiskThreadEntry()
CBasicDisk::CleanDiskThread()
CBasicDisk::CleanDiskThread, 1
CBasicDisk::CleanDiskThread, 1a, error=%ld
CBasicDisk::CleanDiskThread, 2, error=%ld
CBasicDisk::CleanDiskThread, 3, %ld
CBasicDisk::CleanDiskThread, 5, %lX
CBasicDisk::CleanDiskThread, 6, %ld
CBasicDisk::CleanDiskThread, 7, %ld
CBasicDisk::CleanDiskThread, 7a, hr=%lX
CBasicDisk::CleanDiskThread, 8, %ld
CBasicDisk::CleanDiskThread, 9, error=%ld
CBasicDisk::CleanDiskThread, 10
CBasicDisk::CleanDiskThread, 11, error=%ld
CBasicDisk::CleanDiskThread, 12, error=%ld
CBasicDisk::CleanDiskThread, 13, error=%ld
CBasicDisk::CleanDiskThread, 14, error=%ld
CBasicDisk::CleanDiskThread, 16, error=%ld
CBasicDisk::CleanDiskThread, 15, %ld
CBasicDisk::FinishAsyncOperation()
CBasicDisk::FinishAsyncOperation, 1, %lX
CBasicDisk::FinishAsyncOperation, 2
CBasicDisk::IsOemPartition()
CBasicDisk::ContainsOemPartition()
CBasicDisk::ResetBootIndicator()
CBasicDisk::SetFreeExtentsUsableStatus()
CBasicDisk::IsAudioCD()
CBasicDisk::IsAudioCD: NtQueryVolumeInformationFile failed: %X
Audio CD
CBasicDisk::IsMediaMemoryStick()
CBasicDisk::IsNtfsNotRecommendedDevice()
CBasicDisk::GetExtentType()
CBasicDisk::IsRemovable()
CBasicDisk::GetVolumeSizeForRemovable()
CBasicDisk::GetVolumePlexOffsetForRemovable()
CBasicDisk::OnMediaChange()
CBasicDisk::GetVolumeId()
CBasicDisk::DeletePartitionHelper()
CBasicDisk::DeletePartitionHelper, 1, hrRet=%lX
CBasicDisk::DeletePartitionHelper, 1b, hr=%lX
CBasicDisk::DeletePartitionHelper, 2, hr=%lX
CBasicDisk::DeletePartitionHelper, 3, hr=%lX
CBasicDisk::DeletePartitionHelper, 3a, hr=%lX
CBasicDisk::DeletePartitionHelper, 4, hr=%lX
CBasicDisk::DeletePartitionHelper, 5, hr=%lX
CBasicDisk::DeletePartitionHelper, 6, hr=%lX
CBasicDisk::DeletePartitionHelper, 7, hr=%lX
CBasicDisk::DeletePartitionHelper, 7b, hr=%lX
CBasicDisk::DeletePartitionHelper, 8, hr=%lX
CBasicDisk::DeletePartitionHelper, 9, hr=%lX
CBasicDisk::DeletePartitionHelper, 10, hr=%lX
CBasicDisk::DeletePartitionHelper, 11, hr=%lX
CBasicDisk::DeletePartitionHelper, 11b, hr=%lX
CBasicDisk::DeletePartitionHelper, 12, hr=%lX
CBasicDisk::DeletePartitionHelper, 13, hr=%lX
CBasicDisk::SetPartitionNumber()
CBasicDisk::GetPartitionNumber()
QueryVolumesHelper()
CBasicDisk::QueryVolumesHelper, 1
CBasicDisk::QueryVolumesHelper, 2, hr=%lX
CBasicDisk::ExtendVolumeHelper()
CBasicDisk::ExtendVolumeHelper, 1
CBasicDisk::ExtendVolumeHelper, 2
CBasicDisk::ExtendVolumeHelper, 2.1
CBasicDisk::ExtendVolumeHelper, 3
CBasicDisk::ExtendVolumeHelper, 4
CBasicDisk::ExtendVolumeHelper, 4b
CBasicDisk::ExtendVolumeHelper, 5
CBasicDisk::ExtendVolumeHelper, 6
CBasicDisk::ExtendVolumeHelper, 7
CBasicDisk::ExtendVolumeHelper, 8
CBasicDisk::ExtendVolumeHelper, 9
CBasicDisk::ExtendVolumeHelper, 10
CBasicDisk::ExtendVolumeHelper, 11, hr=%lX
CBasicDisk::ExtendVolumeHelper, 12
CBasicDisk::ExtendVolumeHelper, 13
CBasicDisk::ExtendVolumeHelper, 14
CBasicDisk::ExtendVolumeHelper, 14.1, hr=%lX
CBasicDisk::ExtendVolumeHelper, 14.2
CBasicDisk::ExtendVolumeHelper, 15, hr=%lX
CBasicDisk::ShrinkVolumeHelper()
CBasicDisk::ShrinkVolumeHelper, 1
CBasicDisk::ShrinkVolumeHelper, 1.1
CBasicDisk::ShrinkVolumeHelper, 2
CBasicDisk::ShrinkVolumeHelper, 3
CBasicDisk::ShrinkVolumeHelper, 4
CBasicDisk::ShrinkVolumeHelper, 5
CBasicDisk::ShrinkVolumeHelper, 6, hr=%lX
CBasicDisk::ShrinkVolumeHelper, 7, hr=%lX
CBasicDisk::ShrinkVolumeHelper, 7.1, hr=%lX
CBasicDisk::ShrinkVolumeHelper, 7.2, hr=%lX
CBasicDisk::ShrinkVolumeHelper, 8, hr=%lX
CBasicDisk::IsSuperFloppy()
CBasicDisk::GetExtraFlagsForVolume()
CBasicDisk::GetExtraFlagsForVolume: m_pDeviceVolume not NULL
CBasicDisk::GetExtraFlagsForVolume: pRegion->pVolume not NULL
CBasicDisk::GetExtraFlagsForVolume: DeviceIoControl failed: %X
CBasicDisk::SetClearVolumeFlags()
CBasicDisk::SetClearVolumeFlags, 0
CBasicDisk::SetClearVolumeFlags, 1
CBasicDisk::SetClearVolumeFlags, 2
CBasicDisk::SetClearVolumeFlags, 3, pRegion=%p, bIsPartition=%d
CBasicDisk::SetClearVolumeFlags, 3, bSet=%ld, hr=%lX
CBasicDisk::SetClearVolumeFlags, 4, win32 error=%ld
CBasicDisk::SetClearVolumeFlags, 5, win32 error=%ld
CBasicDisk::SetClearVolumeFlags, 6, win32 error=%ld
CBasicDisk::CreateNewLayoutMbr()
CBasicDisk::CreateNewLayoutMbr, 1, hr=%X
CBasicDisk::CreateNewLayoutMbr, 2, hr=%X
CBasicDisk::CreateNewLayoutMbr, 2b, hr=%X
CBasicDisk::CreateNewLayoutMbr, 3, hr=%X
CBasicDisk::CreateNewLayoutGpt()
CBasicDisk::CreateNewLayoutGpt, 1, hr=%X
CBasicDisk::OnLayoutChange()
CBasicDisk::OnLayoutChange: failed to create volume object: %X
CBasicDisk::OnVolumeArrival()
CBasicDisk::OnVolumeArrival, 1, partition not found.
CBasicDisk::OnVolumeArrival, 2, partition not primary or logical.
CBasicDisk::OnVolumeArrival, 3
CBasicDisk::OnVolumeArrival, VOLUME ALREADY INITIALIZED.
CBasicDisk::OnVolumeArrival, VOLUME CREATE FAILED.
CBasicDisk::OnVolumeArrival, VOLUME CREATED.
CBasicDisk::OnVolumeArrival, volume creation NOTIFICATION sent.
CBasicDisk::OnVolumeArrival, volume modification NOTIFICATION sent.
CBasicDisk::OnVolumeArrival, NO NOTIFICATION sent.
CBasicDisk::OnVolumeRemoval()
CBasicDisk::OnVolumeRemoval, pDbtInterface name=%S pwszDevicePath=%S
CBasicDisk::OnVolumeRemoval, Volume is not removed, open succeeded. Volume Name=%S
CBasicDisk::OnVolumeRemoval, Volume is not removed, open failed with an error other than file not found. Volume Name=%S
CBasicDisk::CreateLayoutUsingNewRegionList()
CBasicDisk::CreateLayoutUsingNewRegionList, 1, hr=%lX
CBasicDisk::ZeroPartitionFirstSector()
CBasicDisk::ZeroPartitionFirstSector: failed to zero sector 0: %X
CBasicDisk::WriteLayoutAndUpdateRegionList()
CBasicDisk::GrowPartition()
CBasicDisk::GrowPartition(), 1, %lX
CBasicDisk::IsStyleConvertible()
CBasicDisk::ConvertFromMbrToGpt()
CBasicDisk::ConvertFromMbrToGpt: DeviceIoControl failed: %X
CBasicDisk::ConvertFromGptToMbr()
CBasicDisk::ConvertFromGptToMbr: DeviceIoControl failed: %X
CBasicDisk::ChangeMbrAttributes()
CBasicDisk::ChangeMbrAttributes, 2, pRegion=%p
CBasicDisk::ChangeMbrAttributes, 3, type=%ld
CBasicDisk::ChangeMbrAttributes, 4, type=%ld
CBasicDisk::ChangeMbrAttributes, 5, hr=%lX
CBasicDisk::ChangeMbrAttributes, 6, error=%ld, name=%S
CBasicDisk::ChangeMbrAttributes, 7, error=%ld, name=%S
CBasicDisk::ChangeGptAttributes()
CBasicDisk::ChangeGptAttributes: DeviceIoControl failed: %X
CBasicDisk::GetPack()
CBasicDisk::GetProperties()
CBasicDisk::GetProperties, 1
CBasicDisk::GetProperties, 2
CBasicDisk::GetProperties, 3
CBasicDisk::GetProperties, 4
CBasicDisk::GetProperties, 5
CBasicDisk::GetProperties, 5.5, Disk is not convertible
CBasicDisk::GetProperties(), 6
CBasicDisk::GetProperties, 7, error=%ld, name=%ws
CBasicDisk::GetProperties, 8, error=%ld
CBasicDisk::GetProperties, 8.1, error=%ld
CBasicDisk::GetProperties, DISK HAS PAGEFILE
CBasicDisk::GetProperties, DISK HAS HIBER FILE
CBasicDisk::GetProperties, DISK HAS CRASHDUMP
CBasicDisk::GetProperties, 8.2, error=%ld
CBasicDisk::GetProperties, 9, error=%ld
CBasicDisk::GetProperties, 10, error=%ld
CBasicDisk::GetIdentificationData()
CBasicDisk::QueryExtents()
CBasicDisk::QueryExtents, 1, hr=%lX
CBasicDisk::QueryExtents, 2, ERROR CACHE CORRUPTION!!!! hr=%lX
CBasicDisk::QueryFreeExtents()
CBasicDisk::QueryFreeExtents, 1, ppFreeExtentArray=%p, plNumberOfFreeExtents=%p, hr=%lX
CBasicDisk::QueryFreeExtents, 2, QueryExtents(), hr=%lX
CBasicDisk::QueryFreeExtents, 3, No free extents, hr=%lX
CBasicDisk::QueryFreeExtents, 4, CoTaskMemAlloc(), hr=%lX
CBasicDisk::QueryFreeExtents, 5, hr=%1X
CBasicDisk::QueryFreeExtents, 6, hr=%1X
CBasicDisk::QueryFreeExtents, 7, No free aligned extents, hr=%lX
CBasicDisk::ConvertStyle()
ConvertStyle
CBasicDisk::ConvertStyle, 1, hr=%lX
CBasicDisk::SetFlagsInternal
CBasicDisk::SetFlagsInternal, .5, hr=%lX
CBasicDisk::SetFlagsInternal, 1 Name=%s, Number=%ld, hr=%lX
CBasicDisk::SetFlagsInternal, 2 Name=%s, Number=%ld, hr=%lX
EXIT CBasicDisk::SetFlagsInternal, Name=%s, Number=%ld, status=%lX
CBasicDisk::SetFlags
SetFlags
CBasicDisk::SetFlags, 1 Name=%s, Number=%ld, hr=%lX
CBasicDisk::SetFlags, 3 Name=%s, Number=%ld, hr=%lX
EXIT CBasicDisk::SetFlags, Name=%s, Number=%ld, hr=%lX
CBasicDisk::ClearFlags
ClearFlags
CBasicDisk::ClearFlags, 1 Name=%s, Number=%ld, hr=%lX
CBasicDisk::ClearFlags, 2, hr=%lX
CBasicDisk::ClearFlags, 3 Name=%s, Number=%ld, hr=%lX
EXIT CBasicDisk::ClearFlags, Name=%s, Number=%ld, hr=%lX
CBasicDisk::GetProperties2()
CBasicDisk::GetProperties2, 1
CBasicDisk::GetProperties2, 2
CBasicDisk::GetProperties2, 3
CBasicDisk::GetProperties2, 4
CBasicDisk::GetProperties2, 5
CBasicDisk::GetProperties2, 6
CBasicDisk::GetProperties2(), 7
CBasicDisk::GetProperties2, 8, error=%ld, name=%ws
CBasicDisk::GetProperties2, 9, error=%ld
CBasicDisk::GetProperties2, 10, error=%ld
CBasicDisk::GetProperties2, DISK HAS PAGEFILE
CBasicDisk::GetProperties2, DISK HAS HIBER FILE
CBasicDisk::GetProperties2, DISK HAS CRASHDUMP
CBasicDisk::GetProperties2, 10.1, error=%ld
CBasicDisk::GetProperties2, 11, error=%ld
CBasicDisk::GetProperties2, 12, error=%ld
CBasicDisk::GetPartitionProperties()
CBasicDisk::QueryPartitions()
CreatePartition
CBasicDisk::DeletePartition()
DeletePartition
CBasicDisk::ChangeAttributes()
ChangeAttributes
CBasicDisk::ChangeAttributes, 1, hr=%lX
CBasicDisk::AssignDriveLetter()
CBasicDisk::DeleteDriveLetter()
CBasicDisk::GetDriveLetter()
CBasicDisk::FormatPartition()
CBasicDisk::Clean()
CleanDisk
CBasicDisk::Clean, 1, hr=%lX
CBasicDisk::Clean: CreateThread failed: %X
CBasicDisk::ChangePartitionType()
ChangePartitionType
CBasicDisk::ChangePartitionType, 2, hr=%lX
CBasicDisk::ChangePartitionType, 3, hr=%lX
CBasicDisk::ChangePartitionType, 3.5, hr=%lX
CBasicDisk::ChangePartitionType, 4, hr=%lX
CBasicDisk::ChangePartitionType, 5
CBasicDisk::ChangePartitionType, 6, hr=%lX
CBasicDisk::ChangePartitionType, 7, hr=%lX
CBasicDisk::ChangePartitionType, 8
CBasicDisk::ChangePartitionType, 9, hr=%lX
CBasicDisk::ChangePartitionType, 10, hr=%lX
CBasicDisk::ChangePartitionType, 11, hr=%lX
CBasicDisk::ChangePartitionType, 12, hr=%lX
CBasicDisk::ChangePartitionType, 13, hr=%lX
CBasicDisk::ChangePartitionType, 14, hr=%lX
CBasicDisk::ChangePartitionType, 15, %lX
CBasicDisk::CreatePartitionEx_Internal
CBasicDisk::CreatePartitionEx_Internal, 1
CBasicDisk::CreatePartitionEx_Internal, 2
CBasicDisk::CreatePartitionEx_Internal, 3, offset=%I64u, offset=0x%I64Xsize=%I64u, size=0x%I64X
CBasicDisk::CreatePartitionEx_Internal, 4
CBasicDisk::CreatePartitionEx_Internal, 5
CBasicDisk::CreatePartitionEx_Internal, 6, hr=%lX
CBasicDisk::CreatePartitionEx()
CBasicDisk::QueryMedia()
CBasicDisk::QueryMedia, 1: Open Device Failed: %X
CBasicDisk::QueryMedia, 2: GetDeviceAndMediaType failed: %X
CBasicDisk::QueryMedia, 3: GetMediaGeometry failed: %X
CBasicDisk::Eject()
CBasicDisk::Eject, 1: OpenDevice failed: %X
CBasicDisk::Eject, 2: DeviceIoControl failed: %X
CBasicDisk::Eject: DeviceIoControl(FSCTL_LOCK_VOLUME) failed: %X
CBasicDisk::Eject, 3: DeviceIoControl(IOCTL_STORAGE_EJECT_MEDIA) failed: %X
CBasicDisk::CanContinue()
CBasicDisk::CanContinue, 1, hr=%lX
DISK: %p
REGION REGION REGION REGION
Region %d:
Primary
Extended
Logical
Extended Free
Unknown
   Type: %s
   Usable: %d
   Offset: %I64u
0x%I64X
   Size: %I64u
0x%I64X
   Extended Partition Offset: %I64u
0x%I64X
   partition number: %d
   Is Partition: %d
   Volume: %p
   Disk: %p
   partitionType= %d
   bootIndicator= %d
   recognizedPartition= %d
   hiddenSectors= %ld, %lX
CBasicDisk::DumpRegion, 1.1, Invalid GPT INFO
CBasicDisk::DumpRegion, 1, hr=%lX
CBasicDisk::DumpRegion, 2, hr=%lX
   partitionType= %s, %S
   partitionId= %s, %S
   Offset: %I64u
0x%I64X
   Name = %s, %S
CBasicDisk::ValidateCall()
CBasicDisk::ValidateCall, 1, hr=%lX
CBasicDisk::ValidateCall, 2, hr=%lX
CBasicDisk::IsBandCapable()
CBasicDisk::IsBandCapable, 1, storage device is not band capable.
CBasicDisk::IsBandCapable, 2, query capabilites failed, hr=%lX
CBasicDisk::IsBandCapable, 3, query capabilities failed, hr=%lX
CBasicDisk::CreateBand()
CBasicDisk::CreateBand, 1, %lX
CBasicDisk::CreateBand, 3, create band failed, hr= %lX
CBasicDisk::DeleteBand()
DeleteBand, 1, %lX
CBasicDisk::DeleteBand, 2, delete band failed, hr= %lX
CBasicDisk::DeleteBands()
CBasicDisk::DeleteBands, 1, OpenDevice failed, hr=%lX
CBasicDisk::DeleteBands, 2, Enumerate bands failed, hr=%lX
CBasicDisk::DeleteBands, 3, Enumerate bands failed, hr=%lX
CBasicDisk::DeleteBands, 5, Shrinking band failed, hr=%lX
CBasicDisk::DeleteBands, 6, Moving band failed, hr=%lX
CBasicDisk::DeleteBands, 7, Delete band failed, hr=%lX
CBasicDisk::SetBandLocation()
CBasicDisk::SetBandLocation, 2, set band location failed, hr= %lX
CBasicDisk::GetProperties() (IVdsAdvancedDisk3)
CBasicDisk::GetProperties() (IVdsAdvancedDisk3), line=%ld, hr=%lX
CBasicDisk::GetUniqueId()
CBasicDisk::GetUniqueId(), line=%ld, hr=%lX
CBsAsyncObject::SetOutput() (1)
CBsAsyncObject::SetOutput() (2)
CBsAsyncObject::Cancel()
CBsAsyncObject::Wait()
CBsAsyncObject::Wait WaitImpl *pHrResult=%lX, hr=%lX
CBsAsyncObject::Wait pVolumeUnk is NULL.
IsBasicVolume()
IsCsvVolume()
CBsNotificationManager::RegisterPnPNotifications()
CBsNotificationManager::RegisterPnPNotifications: RegisterDeviceNotification failed: %X
CBsNotificationManager::UnregisterPnPNotifications()
CBsNotificationManager::FindRemoveRegisteredNotification()
notification: registered disk %d offset %I64d
g_ProcessPnpNotification exiting due to shutdown
g_ProcessPnpNotification, 1, dwRet=%ld
g_ProcessPnpNotification: wParam=%lX lParam=%lX
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 1
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 1.5 Volume Name=%S
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 4, Volume Name=%S, dwRet=%ld
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 5, Volume Name=%S, dwRet=%ld
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 6, Volume Name=%S, non-basic
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 7, Volume Name=%S, RAM drive
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 7.1, Volume Name=%S, CSV Volume
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 7.2, Volume Name=%S, dwRet=%ld
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 8, Volume Name=%S, dwRet=%ld
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 9, Volume Name=%S, dwRet=%ld
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 10, Volume Name=%S, !FILE_DEVICE_DISK
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 11.0, Volume Name=%S
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 11.1, Volume Name=%S, dwRet=%ld
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 11.2, Volume Name=%S, dwRet=%ld
g_ProcessPnpNotification, 11.3, Volume Name=%S, Hidden Volume on CSV disk
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 12, Volume Name=%S, dwRet=%ld
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 13, Volume Name=%S, disk# =%ld, Part Number=%lu, Part Offset=%I64u
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 14, Volume Name=%S, hrRet=%lX
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 15, Volume Name=%S
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 16, Volume Name=%S
g_ProcessPnpNotification, DBT_DEVICEREMOVECOMPLETE, 17, Volume Name=%S
g_ProcessPnpNotification, GUID_IO_MEDIA_ARRIVAL, 18
g_ProcessPnpNotification, GUID_IO_MEDIA_REMOVAL, 19
EXIT g_ProcessPnpNotification, dwRet=%ld
CBsNotificationManager::WindowProc, WM_DEVICECHANGE: wParam=%lX lParam=%lX
CBsNotificationManager::WindowProc, DBT_DEVICEARRIVAL, 2, Volume Name=%S
CBsNotificationManager::WindowProc, 3, hr=%1X
CBsNotificationManager::WindowProc, DBT_DEVICEREMOVECOMPLETE, 4, Volume Name=%S
CBsNotificationManager::WindowProc, 5, hr=%1X
CBsNotificationManager::WindowProc, GUID_IO_DISK_LAYOUT_CHANGE, 6
CBsNotificationManager::WindowProc, GUID_IO_MEDIA_ARRIVAL, 7
CBsNotificationManager::WindowProc, GUID_IO_MEDIA_REMOVAL, 8
CBsNotificationManager::WindowProc, 8.5, hr=%1X
CBsNotificationManager::WindowProc, GUID_IO_VOLUME_CHANGE, 9
CBsNotificationManager::WindowProc, GUID_IO_VOLUME_DISMOUNT, 10
CBsNotificationManager::WindowProc, GUID_IO_VOLUME_DISMOUNT_FAILED, 11
CBsNotificationManager::WindowProc, GUID_IO_VOLUME_MOUNT, 12
CBsNotificationManager::WindowProc, GUID_IO_VOLUME_LOCK, 13
CBsNotificationManager::WindowProc, GUID_IO_VOLUME_LOCK_FAILED, 14
CBsNotificationManager::WindowProc, GUID_IO_VOLUME_UNLOCK, 15
CBsNotificationManager::WindowProc, GUID_IO_VOLUME_NAME_CHANGE, 16
CBsNotificationManager::WindowProc, GUID_IO_VOLUME_PHYSICAL_CONFIGURATION_CHANGE, 17
CBsNotificationManager::WindowProc, GUID_IO_VOLUME_DEVICE_INTERFACE, 18
CBsNotificationManager::WindowProc, GUID_IO_DEVICE_BECOMING_READY, 19
CBsNotificationManager::WindowProc, GUID_IO_DEVICE_EXTERNAL_REQUEST, 20
CBsNotificationManager::WindowProc, GUID_IO_MEDIA_EJECT_REQUEST, 21
CBsNotificationManager::WindowProc, GUID_IO_DISK_LAYOUT_CHANGE, 22
CBsNotificationManager::WindowProc, CUSTOM event received, 23
CBsNotificationManager::WindowProc, 24, hr=%1X
CBsNotificationManager::WindowProc, 25, hr=%lX
EXIT CBsNotificationManager::WindowProc
CBsNotificationManager::ForwardDiskNotification()
CBsNotificationManager::ForwardLayoutChangeNotification: PostThreadMessage failed: %X 
CBsNotificationManager::InitializeAuxThread()
CBsNotificationManager::InitializeAuxThread: CreateThread failed: %X
CBsNotificationManager::InitializeAuxThread: PostThreadMessage failed: %X
CBsNotificationManager::AuxThread()
m2Jess*
VDS Basic Provider
BasicDiskProvider
BasicDiskOperation
Microsoft.Windows.Storage.VDS.BasicDisk
vdsbas.pdb
.text
.text$di
.text$mn
.text$mn$00
.text$x
.text$yd
.rdata$brc
.idata$5
.00cfg
.CRT$XCA
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIAA
.CRT$XIZ
.gehcont
.gfids
.giats
.rdata
.rdata$voltmd
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zzzdbg
.xdata
.xdata$x
.edata
.idata$2
.idata$3
.idata$4
.idata$6
.data$brc
.data$r$brc
.data
.pdata
.rsrc$01
.rsrc$02
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUV
bprovider.DLL
??0?$CVdsHandleImpl@$0?0@@QEAA@XZ
??0?$CVdsHandleImpl@$0A@@@QEAA@XZ
??0?$CVdsHeapPtr@E@@QEAA@XZ
??0?$CVdsHeapPtr@G@@QEAA@XZ
??0?$CVdsHeapPtr@U_AUCTION_THREAD_PARAMETER@@@@QEAA@XZ
??0?$CVdsHeapPtr@U_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAA@XZ
??0?$CVdsHeapPtr@U_VDS_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAA@XZ
??0?$CVdsPtr@E@@QEAA@XZ
??0?$CVdsPtr@G@@QEAA@XZ
??0?$CVdsPtr@U_AUCTION_THREAD_PARAMETER@@@@QEAA@XZ
??0?$CVdsPtr@U_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAA@XZ
??0?$CVdsPtr@U_VDS_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAA@XZ
??0CPrvEnumObject@@QEAA@XZ
??0CRtlSharedLock@@QEAA@XZ
??0CVdsCriticalSection@@QEAA@PEAU_RTL_CRITICAL_SECTION@@@Z
??0CVdsPnPNotificationBase@@QEAA@XZ
??0CVdsUnlockIt@@QEAA@AEAJ@Z
??1?$CVdsHandleImpl@$0?0@@QEAA@XZ
??1?$CVdsHandleImpl@$0A@@@QEAA@XZ
??1?$CVdsHeapPtr@E@@QEAA@XZ
??1?$CVdsHeapPtr@G@@QEAA@XZ
??1?$CVdsHeapPtr@U_AUCTION_THREAD_PARAMETER@@@@QEAA@XZ
??1?$CVdsHeapPtr@U_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAA@XZ
??1?$CVdsHeapPtr@U_VDS_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAA@XZ
??1?$CVdsPtr@E@@QEAA@XZ
??1?$CVdsPtr@G@@QEAA@XZ
??1?$CVdsPtr@U_AUCTION_THREAD_PARAMETER@@@@QEAA@XZ
??1?$CVdsPtr@U_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAA@XZ
??1?$CVdsPtr@U_VDS_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAA@XZ
??1CPrvEnumObject@@QEAA@XZ
??1CRtlSharedLock@@QEAA@XZ
??1CVdsCriticalSection@@QEAA@XZ
??1CVdsPnPNotificationBase@@QEAA@XZ
??1CVdsUnlockIt@@QEAA@XZ
??4?$CVdsHandleImpl@$0A@@@QEAAPEAXPEAX@Z
??4?$CVdsHeapPtr@E@@QEAAPEAEPEAE@Z
??4?$CVdsHeapPtr@G@@QEAAPEAGPEAG@Z
??4?$CVdsHeapPtr@U_AUCTION_THREAD_PARAMETER@@@@QEAAPEAU_AUCTION_THREAD_PARAMETER@@PEAU1@@Z
??4?$CVdsHeapPtr@U_VDS_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAAPEAU_VDS_DRIVE_LAYOUT_INFORMATION_EX@@PEAU1@@Z
??8?$CVdsHandleImpl@$0A@@@QEBA_NPEAX@Z
??8?$CVdsPtr@E@@QEBA_NPEAE@Z
??8?$CVdsPtr@G@@QEBA_NPEAG@Z
??8?$CVdsPtr@U_AUCTION_THREAD_PARAMETER@@@@QEBA_NPEAU_AUCTION_THREAD_PARAMETER@@@Z
??9?$CVdsPtr@E@@QEBA_NPEAE@Z
??B?$CVdsHandleImpl@$0?0@@QEAAPEAXXZ
??B?$CVdsPtr@E@@QEBAPEAEXZ
??B?$CVdsPtr@G@@QEBAPEAGXZ
??B?$CVdsPtr@U_AUCTION_THREAD_PARAMETER@@@@QEBAPEAU_AUCTION_THREAD_PARAMETER@@XZ
??B?$CVdsPtr@U_DRIVE_LAYOUT_INFORMATION_EX@@@@QEBAPEAU_DRIVE_LAYOUT_INFORMATION_EX@@XZ
??B?$CVdsPtr@U_VDS_DRIVE_LAYOUT_INFORMATION_EX@@@@QEBAPEAU_VDS_DRIVE_LAYOUT_INFORMATION_EX@@XZ
??C?$CVdsPtr@U_AUCTION_THREAD_PARAMETER@@@@QEBAPEAU_AUCTION_THREAD_PARAMETER@@XZ
??C?$CVdsPtr@U_DRIVE_LAYOUT_INFORMATION_EX@@@@QEBAPEAU_DRIVE_LAYOUT_INFORMATION_EX@@XZ
??C?$CVdsPtr@U_VDS_DRIVE_LAYOUT_INFORMATION_EX@@@@QEBAPEAU_VDS_DRIVE_LAYOUT_INFORMATION_EX@@XZ
??I?$CVdsHandleImpl@$0?0@@QEAAPEAPEAXXZ
??I?$CVdsPtr@U_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAAPEAPEAU_DRIVE_LAYOUT_INFORMATION_EX@@XZ
??I?$CVdsPtr@U_VDS_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAAPEAPEAU_VDS_DRIVE_LAYOUT_INFORMATION_EX@@XZ
??_FCRtlList@@QEAAXXZ
??_FCRtlMap@@QEAAXXZ
?AcquireRead@CRtlSharedLock@@AEAAXXZ
?AcquireWrite@CRtlSharedLock@@AEAAXXZ
?AllowCancel@CVdsAsyncObjectBase@@QEAAXXZ
?Attach@?$CVdsPtr@G@@QEAAXPEAG@Z
?Attach@?$CVdsPtr@U_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAAXPEAU_DRIVE_LAYOUT_INFORMATION_EX@@@Z
?Attach@?$CVdsPtr@U_VDS_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAAXPEAU_VDS_DRIVE_LAYOUT_INFORMATION_EX@@@Z
?Close@?$CVdsHandleImpl@$0?0@@QEAAXXZ
?CurrentThreadIsWriter@CRtlSharedLock@@QEAAHXZ
?Detach@?$CVdsHandleImpl@$0?0@@QEAAPEAXXZ
?Detach@?$CVdsPtr@G@@QEAAPEAGXZ
?Detach@?$CVdsPtr@U_AUCTION_THREAD_PARAMETER@@@@QEAAPEAU_AUCTION_THREAD_PARAMETER@@XZ
?Detach@?$CVdsPtr@U_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAAPEAU_DRIVE_LAYOUT_INFORMATION_EX@@XZ
?Detach@?$CVdsPtr@U_VDS_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAAPEAU_VDS_DRIVE_LAYOUT_INFORMATION_EX@@XZ
?DisallowCancel@CVdsAsyncObjectBase@@QEAAXXZ
?Downgrade@CRtlSharedLock@@AEAAXXZ
?GetOutputType@CVdsAsyncObjectBase@@QEAA?AW4_VDS_ASYNC_OUTPUT_TYPE@@XZ
?IsCancelRequested@CVdsAsyncObjectBase@@QEAAHXZ
?Release@CRtlSharedLock@@AEAAXXZ
?SetOutput@CVdsAsyncObjectBase@@QEAAXU_VDS_ASYNC_OUTPUT@@@Z
?SetOutputType@CVdsAsyncObjectBase@@QEAAXW4_VDS_ASYNC_OUTPUT_TYPE@@@Z
?SetPositionToLast@CPrvEnumObject@@QEAAXXZ
?Upgrade@CRtlSharedLock@@AEAAXXZ
?ZeroAsyncOut@CVdsAsyncObjectBase@@QEAAXXZ
?m_ExtraLogging@CVdsTraceSettings@@QEAAHXZ
?m_NoDebuggerLogging@CVdsTraceSettings@@QEAAHXZ
DllCanUnloadNow
DllGetClassObject
DllRegisterServer
DllUnregisterServer
__CxxFrameHandler4
??3@YAXPEAX@Z
_purecall
__C_specific_handler
malloc
wcscat_s
realloc
_wcsicmp
_vsnwprintf
wcschr
towupper
wcsstr
_ltow
_callnewh
??0exception@@QEAA@AEBQEBD@Z
??0exception@@QEAA@AEBQEBDH@Z
??0exception@@QEAA@AEBV0@@Z
??1exception@@UEAA@XZ
?what@exception@@UEBAPEBDXZ
_CxxThrowException
__CxxFrameHandler3
memcpy
memmove
_XcptFilter
_amsg_exit
_initterm
msvcrt.dll
?terminate@@YAXXZ
_lock
_unlock
__dllonexit
_onexit
??1type_info@@UEAA@XZ
EnterCriticalSection
LeaveCriticalSection
RtlDeleteResource
RtlAcquireResourceShared
RtlReleaseResource
RtlInitializeResource
RtlAcquireResourceExclusive
RtlConvertExclusiveToShared
DeleteCriticalSection
RtlConvertSharedToExclusive
FreeLibrary
CoTaskMemFree
CharNextW
GetLastError
GetProcAddress
LoadLibraryExW
GetModuleHandleW
RegCloseKey
RegEnumKeyExW
RegOpenKeyExW
lstrcmpiW
RegQueryInfoKeyW
RegEnumValueW
lstrcpynW
VirtualProtect
VirtualAlloc
VirtualQuery
GetSystemInfo
RegSetValueExW
CharPrevW
RegCreateKeyExW
RegDeleteValueW
CoTaskMemRealloc
CoTaskMemAlloc
MultiByteToWideChar
SizeofResource
LoadResource
FindResourceExW
GetModuleFileNameW
InitializeCriticalSection
EventUnregister
EventRegister
EventSetInformation
DisableThreadLibraryCalls
HeapDestroy
CoCreateInstance
CloseHandle
GetProcessHeap
DevObjCreateDeviceInfoList
DevObjGetClassDevs
DevObjEnumDeviceInterfaces
DevObjDestroyDeviceInfoList
GetSystemDirectoryW
QueryDosDeviceW
CreateThread
HeapFree
HeapAlloc
SetLastError
CoCreateGuid
DeviceIoControl
lstrlenW
NtDeviceIoControlFile
NtPowerInformation
NtQuerySystemInformation
CM_Get_Parent
FindFirstVolumeW
FindNextVolumeW
FindVolumeClose
CreateFileW
WriteFile
SetFilePointerEx
NtQueryVolumeInformationFile
SetFilePointer
WaitForSingleObject
Sleep
EventWriteTransfer
RtlCaptureContext
RtlLookupFunctionEntry
RtlVirtualUnwind
UnhandledExceptionFilter
SetUnhandledExceptionFilter
GetCurrentProcess
TerminateProcess
QueryPerformanceCounter
GetCurrentProcessId
GetCurrentThreadId
GetSystemTimeAsFileTime
GetTickCount
api-ms-win-core-synch-l1-1-0.dll
ntdll.dll
OLEAUT32.dll
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-core-com-l1-1-0.dll
api-ms-win-core-string-l2-1-0.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-core-string-obsolete-l1-1-0.dll
api-ms-win-core-memory-l1-1-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-string-l1-1-0.dll
api-ms-win-eventing-provider-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-handle-l1-1-0.dll
DEVOBJ.dll
api-ms-win-core-file-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-io-l1-1-0.dll
api-ms-win-devices-config-l1-1-1.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-rtlsupport-l1-1-0.dll
api-ms-win-core-profile-l1-1-0.dll
PostThreadMessageW
RegisterDeviceNotificationW
UnregisterDeviceNotification
DefWindowProcW
PeekMessageW
GetMessageW
USER32.dll
??0CRtlMap@@QEAA@KP6AXPEAVCRtlEntry@@@Z1@Z
??1CVdsCallTracer@@QEAA@XZ
??0CVdsCallTracer@@QEAA@KPEBD@Z
?Prev@CRtlListIter@@QEAAAEAV1@XZ
?Next@CRtlListIter@@QEAAAEAV1@XZ
?GetEntry@CRtlListIter@@QEAAPEAVCRtlEntry@@XZ
?RemoveAll@CRtlList@@QEAAXXZ
?End@CRtlList@@QEAA?AVCRtlListIter@@XZ
?Begin@CRtlList@@QEAA?AVCRtlListIter@@XZ
??1CRtlList@@QEAA@XZ
??0CRtlList@@QEAA@P6AXPEAVCRtlEntry@@@Z@Z
RegisterProvider
VdsTraceEx
AddEventSource
UnregisterProvider
RemoveEventSource
VdsHeapFree
??1CRtlMap@@UEAA@XZ
?Uninitialize@CVdsPnPNotificationBase@@QEAAXXZ
?Begin@CRtlMap@@QEAA?AVCRtlMapIter@@XZ
?RemoveAll@CRtlMap@@QEAAXH@Z
?Uninitialize@CVdsAsyncObjectBase@@SAXXZ
?GetEntryPointer@CRtlListIter@@QEAAPEAXXZ
?Next@CRtlMapIter@@QEAAAEAV1@XZ
GetInterfaceDetailData
OpenDevice
GetDeviceName
VdsHeapAlloc
?Insert@CRtlMap@@QEAAHAEAVCRtlEntry@@0@Z
?Remove@CRtlMap@@QEAAHAEAVCRtlEntry@@@Z
VdsTraceExW
?InsertUnique@CRtlMap@@QEAAHAEAVCRtlEntry@@0@Z
VdsTraceW
GetDiskLayout
BacksBootVolume
BootBackedByWim
GetRegistryValue
?Find@CRtlMap@@QEAAHAEAVCRtlEntry@@PEAV2@@Z
?Append@CPrvEnumObject@@QEAAJPEAUIUnknown@@@Z
?Reset@CPrvEnumObject@@UEAAJXZ
IsWinPE
GetFMIFSQueryDeviceInfo
GetFMIFSQueryDeviceInfoByHandle
?Initialize@CVdsPnPNotificationBase@@QEAAKXZ
?Initialize@CVdsAsyncObjectBase@@SAKXZ
GetDeviceAndMediaType
?RegisterHandle@CVdsPnPNotificationBase@@QEAAKPEAXPEAPEAX@Z
?UnregisterHandle@CVdsPnPNotificationBase@@QEAAXPEAX@Z
IsVdsLoggingEnabled
?InsertTailPointer@CRtlList@@QEAAHPEAX@Z
?Remove@CRtlList@@QEAAXAEAVCRtlListIter@@@Z
?Next@CPrvEnumObject@@UEAAJKPEAPEAUIUnknown@@PEAK@Z
?Skip@CPrvEnumObject@@UEAAJK@Z
?Clone@CPrvEnumObject@@UEAAJPEAPEAUIEnumVdsObject@@@Z
??0CVdsAsyncObjectBase@@QEAA@XZ
??1CVdsAsyncObjectBase@@QEAA@XZ
QueryObjects
?SetCompletionStatus@CVdsAsyncObjectBase@@QEAAXJK@Z
?Signal@CVdsAsyncObjectBase@@QEAAXXZ
SetDiskLayout
GuidToString
?QueryStatus@CVdsAsyncObjectBase@@UEAAJPEAJPEAK@Z
GetVolumeDiskExtentInfo
GetDeviceManufacturerInfo
IsMediaPresent
GetMediaGeometryEx
GetStorageAccessAlignmentProperty
CreateDeviceInfoSet
GetDeviceId
GetDeviceRegistryPropertyByInfo
VdsAllocateEmptyString
GetDeviceRegistryPropertyByInst
GetDeviceLocationEx
GetDeviceNumber
VdsDoesDiskHaveArcPath
IsDiskClustered
GetDiskFlags
GetDiskOfflineReason
IsDiskReadOnly
IsDiskCurrentStateReadOnly
GetBootFromDiskNumber
GetBootDiskNumber
?InsertPointer@CRtlList@@QEAAHAEAVCRtlListIter@@PEAX@Z
??4CRtlList@@QEAAAEAV0@AEAV0@@Z
IsRamDrive
?Register@CVdsPnPNotificationBase@@QEAAKPEAU_NotificationListeningRequest@@K@Z
GetDefaultAlignment
LockDismountVolume
WriteBootCode
GetPartitionInformation
IsClientSKU
GetDiskRedundancyCount
GetMediaGeometry
VdsAllocateString
GetDiskIdentifiers
?WaitImpl@CVdsAsyncObjectBase@@QEAAJPEAJ@Z
InitializeRundownProtection
WaitForRundownProtectionRelease
?Unregister@CVdsPnPNotificationBase@@QEAAXPEAU_NotificationListeningRequest@@@Z
AcquireRundownProtection
ReleaseRundownProtection
LogError
LogWarning
vdsutil.dll
memcmp
memset
wcscmp
.?AVbad_alloc@std@@
.?AVexception@@
.?AVlogic_error@std@@
.?AVlength_error@std@@
.?AVout_of_range@std@@
vdsbas.dll
Microsoft Virtual Disk Service Basic Provider
4.0.0.1
SystemPartition
System\Setup
CrashDumpEnabled
System\CurrentControlSet\Control\CrashControl
REGISTRY
VS_VERSION_INFO
StringFileInfo
040904B0
CompanyName
Microsoft Corporation
FileDescription
Virtual Disk Service Basic Provider
FileVersion
10.0.22621.1 (WinBuild.160101.0800)
InternalName
vdsbas.dll
LegalCopyright
 Microsoft Corporation. All rights reserved.
OriginalFilename
vdsbas.dll
ProductName
Microsoft
 Windows
 Operating System
ProductVersion
10.0.22621.1
VarFileInfo
Translation
BProvider.BasicProvider.2 = s 'BasicProvider Class'
CLSID = s '{DE010DA1-289B-4232-8CD0-5112DCA6A7B3}'
BProvider.BasicProvider = s 'BasicProvider Class'
CLSID = s '{DE010DA1-289B-4232-8CD0-5112DCA6A7B3}'
CurVer = s 'BProvider.BasicProvider.2'
NoRemove CLSID
ForceRemove {DE010DA1-289B-4232-8CD0-5112DCA6A7B3} = s 'VDS Basic Provider'
ProgID = s 'BProvider.BasicProvider.2'
VersionIndependentProgID = s 'BProvider.BasicProvider'
InprocServer32 = s '%MODULE%'
val ThreadingModel = s 'Free'
REGISTRY
en-US
