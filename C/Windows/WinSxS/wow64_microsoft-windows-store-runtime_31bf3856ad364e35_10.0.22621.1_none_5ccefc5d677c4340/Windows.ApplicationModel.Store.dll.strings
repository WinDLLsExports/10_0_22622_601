!This program cannot be run in DOS mode.
.text
`.data
.idata
@.didat
.rsrc
@.reloc
api-ms-win-core-winrt-error-l1-1-0.dll
api-ms-win-core-winrt-string-l1-1-0.dll
api-ms-win-shcore-taskpool-l1-1-0.dll
api-ms-win-shcore-stream-l1-1-0.dll
twinapi.appcore.dll
api-ms-win-core-com-l1-1-0.dll
RPCRT4.dll
api-ms-win-core-winrt-error-l1-1-1.dll
api-ms-win-core-winrt-l1-1-0.dll
api-ms-win-core-com-l1-1-1.dll
api-ms-win-security-sddl-l1-1-0.dll
Cabinet.dll
api-ms-win-shcore-stream-winrt-l1-1-0.dll
wevtapi.dll
ext-ms-win-appmodel-state-ext-l1-2-0.dll
ext-ms-win-kernel32-package-l1-1-0.dll
CRYPTSP.dll
ext-ms-win-core-licensemanager-l1-1-0
ext-ms-win-core-licensemanager-l1-1-1
ext-ms-win-core-licensemanager-l1-1-2
ext-ms-win-core-licensemanager-l1-1-0.dll
ext-ms-win-core-licensemanager-l1-1-2.dll
ext-ms-win-devmgmt-policy-l1-1-0
ext-ms-win-devmgmt-policy-l1-1-1
ext-ms-win-devmgmt-policy-l1-1-2
ext-ms-win-devmgmt-policy-l1-1-3
ext-ms-win-devmgmt-policy-l1-1-0.dll
ext-ms-win-ntuser-keyboard-l1-3-0.dll
ext-ms-win-ntuser-keyboard-l1-1-0.dll
ext-ms-win-rtcore-ntuser-window-ext-l1-1-0.dll
ext-ms-win-session-usermgr-l1-1-0
ext-ms-win-session-usermgr-l1-2-0
ext-ms-win-session-usermgr-l1-1-0.dll
api-ms-win-eventing-legacy-l1-1-0.dll
api-ms-win-security-capability-l1-1-0.dll
api-ms-win-appmodel-runtime-l1-1-1.dll
api-ms-win-appmodel-runtime-l1-1-0.dll
iertutil.dll
WINHTTP.dll
webservices.dll
ntdll.dll
EtwEventRegister
EtwEventUnregister
EtwEventEnabled
EtwEventWrite
Windows.Services.Store.Internal.StoreContextServer
Windows.Services.Store.StoreAvailability
Windows.Foundation.Diagnostics.AsyncCausalityTracer
Windows.Security.Authentication.Web.Core.WebTokenRequest
Windows.Services.Store.Internal.StoreContentIdKeyIdResponse
Windows.Storage.Streams.DataReader
Windows.Services.Store.StoreImage
Windows.UI.Core.CoreWindow
Windows.Storage.Streams.RandomAccessStreamReference
Windows.ApplicationModel.Store.ProductLicense
Windows.Management.Deployment.PackageManager
Windows.System.UserProfile.GlobalizationPreferences
Windows.Services.Store.StoreSku
&OL0O
Windows.Security.Cryptography.CryptographicBuffer
Windows.ApplicationModel.Store.Preview.StoreConfiguration
Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager
Windows.Services.Store.StorePackageLicense
Windows.Foundation.Uri
Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties
Windows.ApplicationModel.Core.CoreApplication
Windows.Web.Http.HttpRequestMessage
Windows.ApplicationModel.AppService.AppServiceConnection
Windows.Services.Store.Internal.StoreContextCallerData
Windows.Web.Http.HttpMethod
Windows.Services.Store.StoreContext
Windows.ApplicationModel.Store.Preview.StorePreview
Windows.Security.Authentication.OnlineId.OnlineIdServiceTicketRequest
Windows.Data.Xml.Dom.XmlDocument
Windows.Services.Store.StoreSendRequestResult
,a$Cs
Windows.Services.Store.StoreAppLicense
Windows.Services.Store.StoreAcquireLicenseResult
Windows.Services.Store.StoreProductPagedQueryResult
Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo
Windows.Services.Store.StorePackageUpdateResult
Windows.Internal.Security.Authentication.Web.TokenBrokerInternal
Windows.UI.Popups.UICommand
Windows.Services.Store.StoreRateAndReviewResult
Windows.Globalization.NumberFormatting.CurrencyFormatter
Windows.Services.Store.Internal.StoreContentIdKeyIdItem
Windows.Services.Store.StoreQueueItemStatus
Windows.Services.Store.StoreQueueItem
Windows.ApplicationModel.Store.CurrentApp
Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager
Windows.ApplicationModel.Store.Preview.StoreHardwareManufacturerInfo
Windows.Services.Store.StoreCollectionData
Windows.Foundation.Collections.ValueSet
Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo
Windows.Networking.Connectivity.NetworkInformation
Windows.Data.Json.JsonValue
Windows.Web.Http.HttpStringContent
Windows.ApplicationModel.Store.PurchaseResults
Windows.ApplicationModel.Store.Internal.AuthenticationExtension
Uo~9@D
Windows.ApplicationModel.Store.ProductListing
Windows.Web.Http.Filters.HttpBaseProtocolFilter
Windows.Services.Store.StoreProductResult
Windows.Internal.Security.WebAuthentication.AuthenticationManager
3SVmn
Windows.ApplicationModel.Store.ListingInformation
Windows.ApplicationModel.Store.Internal.StoreCommerce
Windows.Data.Json.JsonObject
X~{TR
Windows.Services.Store.StoreSubscriptionInfo
Windows.Foundation.PropertyValue
Windows.Web.Http.HttpClient
Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper
Windows.Services.Store.StoreUninstallStorePackageResult
Windows.Services.Store.StoreQueueItemCompletedEventArgs
Windows.Services.Store.StorePurchaseProperties
Windows.ApplicationModel.Store.UnfulfilledConsumable
Windows.Services.Store.StorePackageInstallOptions
Windows.Services.Store.StoreVideo
Windows.Services.Store.StoreProductQueryResult
Windows.Data.Json.JsonArray
Windows.Services.Store.Internal.GetNextStoreProductOperation
Windows.Services.Store.StoreProduct
Windows.Services.Store.StoreLicense
Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults
Windows.Services.Store.StoreProductOptions
Windows.Services.Store.StorePackageUpdate
Windows.Services.Store.StorePrice
Windows.Services.Store.StorePurchaseResult
Windows.Services.Store.StoreConsumableResult
Windows.Services.Store.StoreRequestHelper
Windows.System.Internal.UserManager
(QD)Qj
Windows.ApplicationModel.Store.LicenseInformation
JTk_S/
Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions
Windows.Services.Store.StoreCanAcquireLicenseResult
Exception
ReturnNt
ReturnHr
LogNt
LogHr
FailFast
%hs(%u)\%hs!%p: 
%hs!%p: 
(caller: %p) 
%hs(%d) tid(%x) %08X %ws
Msg:[%ws] 
CallContext:[%hs] 
[%hs(%hs)]
[%hs]
kernelbase.dll
RaiseFailFastException
onecore\internal\sdk\inc\wil\opensource\wil\resource.h
WilError_03
RtlNtStatusToDosErrorNoTeb
RtlDllShutdownInProgress
RtlDisownModuleHeapAllocation
WilFailureNotifyWatchers
Local\SM0:%lu:%lu:%hs
activatibleClassId
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult
Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager
UNKWN
ERROR
 WARN
 info
     
Failed
Assert (%s): %s
LogSimpleMessage
onecoreuap\enduser\winstore\licensing\winrt\dllsrv\windows\log.cpp
%s%hs:%ws
(0x%08x)
[%hs]
%s%hs:%ws
[%hs]
%s%hs:%ws
(0x%08x)
%s%hs:%ws
(QD)Qj
&_*q<|
3SVmn
X~{TR
IAsyncOperationWithProgress`2
AsyncOperationWithProgressCompletedHandler`2
AsyncOperationCompletedHandler`1
AsyncOperationProgressHandler`2
IAsyncAction
Foundation
IAsyncOperation`1
/Z*Px
/Z8@b
&_*q<|
X~{TR
/ZxqL
~/ZxqL
X~{TR
AsyncActionCompletedHandler
AsyncOperationCompletedHandler`1<String>
IAsyncOperation`1<String>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.ListingInformation>
IAsyncOperation`1<Windows.ApplicationModel.Store.ListingInformation>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.FulfillmentResult>
IAsyncOperation`1<Windows.ApplicationModel.Store.FulfillmentResult>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.PurchaseResults>
IAsyncOperation`1<Windows.ApplicationModel.Store.PurchaseResults>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
AsyncOperationCompletedHandler`1<Boolean>
IAsyncOperation`1<Boolean>
AsyncOperationCompletedHandler`1<Windows.UI.Popups.IUICommand>
IAsyncOperation`1<Windows.UI.Popups.IUICommand>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
AsyncOperationProgressHandler`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
AsyncOperationWithProgressCompletedHandler`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
IAsyncOperationWithProgress`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
Windows.ApplicationModel.Store.Internal.IMessageDialogHelper2.ShowDialogWithResultsAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.LoadListingInformationAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.GetAppReceiptAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.GetProductReceiptAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.GetAppPurchaseCampaignIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce2.GetCustomerPurchaseIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce2.GetCustomerCollectionsIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommercePreview.RequestProductPurchaseByProductIdAndSkuIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommercePreview.LoadAddOnProductInfosAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulator.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulator.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulator.LoadListingInformationAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.Internal.AuthenticationExtension.ShowChallengeForUserAsync
Windows.Services.Store.Internal.IStoreContextServer.GetAppAndOptionalStorePackageUpdatesAsync
Windows.Services.Store.Internal.IStoreContextServer.RequestDownloadStorePackageUpdatesAsync
Windows.Services.Store.Internal.IStoreContextServer.RequestDownloadAndInstallStorePackageUpdatesAsync
Windows.Services.Store.Internal.IStoreContextServer.RequestDownloadAndInstallStorePackagesAsync
Windows
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
IAsyncOperation`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager.AddLicenseAsync
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager.GetSatisfactionInfosAsync
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager.RefreshLicensesAsync
/ZsOg<
/ZsOg<
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
AsyncOperationCompletedHandler`1<Windows.Storage.Streams.IRandomAccessStreamReference>
IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStreamReference>
AsyncOperationCompletedHandler`1<Windows.Security.Authentication.Web.Core.WebTokenRequestResult>
IAsyncOperation`1<Windows.Security.Authentication.Web.Core.WebTokenRequestResult>
Windows.ApplicationModel.Store.Preview.StorePreview.RequestProductPurchaseByProductIdAndSkuIdAsync
Windows.ApplicationModel.Store.Preview.StorePreview.LoadAddOnProductInfosAsync
Windows.ApplicationModel.Store.Preview.StoreConfiguration.FilterUnsupportedSystemFeaturesAsync
Windows.ApplicationModel.Store.Preview.StoreConfiguration.GetStoreLogDataAsync
Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper.RequestTokenWithUIElementHostingAsync
Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper.RequestTokenWithUIElementHostingAndWebAccountAsync
/Z-[E
1/Zfj
d/Zc1q
/ZhM{
/ZhM{
UY7i*
,a$Cs
<??YzU
Windows.ApplicationModel.Store.CurrentApp.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.CurrentApp.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.CurrentApp.LoadListingInformationAsync
Windows.ApplicationModel.Store.CurrentApp.GetAppReceiptAsync
Windows.ApplicationModel.Store.CurrentApp.GetProductReceiptAsync
Windows.ApplicationModel.Store.CurrentApp.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.CurrentApp.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.CurrentApp.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.CurrentApp.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.CurrentApp.GetAppPurchaseCampaignIdAsync
Windows.ApplicationModel.Store.CurrentApp.GetCustomerPurchaseIdAsync
Windows.ApplicationModel.Store.CurrentApp.GetCustomerCollectionsIdAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.LoadListingInformationAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetAppReceiptAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetProductReceiptAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.ReloadSimulatorAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetAppPurchaseCampaignIdAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetUnfulfilledConsumablesAsync
<??YzU
/ZeOC
/Z7i*
/ZW^6
/ZW^6
/ZeOC
/ZW^6
Ylp)d_
Fsq^V
&OL0O
e/X4V
Uo~9@D
!*WPq
iR{I<
q}X>N
I'ae#
4-RZKD[
AsyncOperationCompletedHandler`1<Windows.Services.Store.StorePurchaseResult>
IAsyncOperation`1<Windows.Services.Store.StorePurchaseResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductResult>
IAsyncOperation`1<Windows.Services.Store.StoreProductResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
IAsyncOperation`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductQueryResult>
IAsyncOperation`1<Windows.Services.Store.StoreProductQueryResult>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreUninstallStorePackageResult>
IAsyncOperation`1<Windows.Services.Store.StoreUninstallStorePackageResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreRateAndReviewResult>
IAsyncOperation`1<Windows.Services.Store.StoreRateAndReviewResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAppLicense>
IAsyncOperation`1<Windows.Services.Store.StoreAppLicense>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductPagedQueryResult>
IAsyncOperation`1<Windows.Services.Store.StoreProductPagedQueryResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreConsumableResult>
IAsyncOperation`1<Windows.Services.Store.StoreConsumableResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAcquireLicenseResult>
IAsyncOperation`1<Windows.Services.Store.StoreAcquireLicenseResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreSendRequestResult>
IAsyncOperation`1<Windows.Services.Store.StoreSendRequestResult>
Windows.Services.Store.StoreProductPagedQueryResult.GetNextAsync
Windows.Services.Store.StoreProduct.GetIsAnySkuInstalledAsync
Windows.Services.Store.StoreProduct.RequestPurchaseAsync
Windows.Services.Store.StoreProduct.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreSku.GetIsInstalledAsync
Windows.Services.Store.StoreSku.RequestPurchaseAsync
Windows.Services.Store.StoreSku.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreAvailability.RequestPurchaseAsync
Windows.Services.Store.StoreAvailability.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreRequestHelper.SendRequestAsync
Windows.Services.Store.StoreContext.GetCustomerPurchaseIdAsync
Windows.Services.Store.StoreContext.GetCustomerCollectionsIdAsync
Windows.Services.Store.StoreContext.GetAppLicenseAsync
Windows.Services.Store.StoreContext.GetStoreProductForCurrentAppAsync
Windows.Services.Store.StoreContext.GetStoreProductsAsync
Windows.Services.Store.StoreContext.GetAssociatedStoreProductsAsync
Windows.Services.Store.StoreContext.GetAssociatedStoreProductsWithPagingAsync
Windows.Services.Store.StoreContext.GetUserCollectionAsync
Windows.Services.Store.StoreContext.GetUserCollectionWithPagingAsync
Windows.Services.Store.StoreContext.ReportConsumableFulfillmentAsync
Windows.Services.Store.StoreContext.GetConsumableBalanceRemainingAsync
Windows.Services.Store.StoreContext.AcquireStoreLicenseForOptionalPackageAsync
Windows.Services.Store.StoreContext.RequestPurchaseAsync
Windows.Services.Store.StoreContext.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreContext.GetAppAndOptionalStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.RequestDownloadStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.RequestDownloadAndInstallStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.RequestDownloadAndInstallStorePackagesAsync
Windows.Services.Store.StoreContext.FindStoreProductForPackageAsync
Windows.Services.Store.StoreContext.TrySilentDownloadStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.TrySilentDownloadAndInstallStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.CanAcquireStoreLicenseForOptionalPackageAsync
Windows.Services.Store.StoreContext.CanAcquireStoreLicenseAsync
Windows.Services.Store.StoreContext.GetStoreProductsWithOptionsAsync
Windows.Services.Store.StoreContext.GetAssociatedStoreQueueItemsAsync
Windows.Services.Store.StoreContext.GetStoreQueueItemsAsync
Windows.Services.Store.StoreContext.RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync
Windows.Services.Store.StoreContext.DownloadAndInstallStorePackagesAsync
Windows.Services.Store.StoreContext.RequestUninstallStorePackageAsync
Windows.Services.Store.StoreContext.RequestUninstallStorePackageByStoreIdAsync
Windows.Services.Store.StoreContext.UninstallStorePackageAsync
Windows.Services.Store.StoreContext.UninstallStorePackageByStoreIdAsync
Windows.Services.Store.StoreContext.RequestRateAndReviewAppAsync
Windows.Services.Store.StoreContext.SetInstallOrderForAssociatedStoreQueueItemsAsync
Windows.Services.Store.StoreQueueItem.CancelInstallAsync
Windows.Services.Store.StoreQueueItem.PauseInstallAsync
Windows.Services.Store.StoreQueueItem.ResumeInstallAsync
#(#L#p#
$$$H$l$&"J"
+>+b+
 1J1t1
1"2L2|2
0B0f0
!*!N!r!
"&"J"t"
J%n%H
 7J7n7
,L,|,
-N-x-
.2.\.
/ZUo~9@D
&OL0O
e/X4V
/ZW^6
/ZW^6
/ZsOg
_s/Z{I<
C3R/Z
-/Z3l
/Z{I<
P/Z/y<
!*WPq
/Z}7F
`/ZQl
/Z/y<
sW/Zl
q}X>N
Ylp)d_
/Z/y<
6*Z*~*J(
/ZsOg
).)R)
FRtlQueryFeatureConfiguration
RtlRegisterFeatureConfigurationChangeNotification
RtlUnregisterFeatureConfigurationChangeNotification
RtlNotifyFeatureUsage
LogStagedFeatureUsage
NtQueryWnfStateData
NtUpdateWnfStateData
onecore\internal\sdk\inc\wil\Staging.h
WilStaging_02
previewStore
storeConfiguration
storeOptionalPackageInstallManagement
UnmanagedConsumable
Consumable
https://
entitlementId
expiration
packageIdentifier
packageType
SellableBy
addOnParent
__tag
string
number
object
array
goldenBeneficiary
beneficiaryArray
goldenBeneficiaryArray
Products
ChkHr(JsonParser::ParseJSONStringToObject( productJsonString, &results, getProductsByKindsResultsTable))
_ParseGetProductsByKinds
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storecontextserver.cpp
ChkHr(results.Products.CopyTo(products))
ChkHr(GetActivationFactory( NetworkingConnectivityNetworkInformation.Get(), &netInfoStatics))
_IsNetworkMetered
ChkHr(netInfoStatics->GetInternetConnectionProfile(&connectionProfile))
There is no connection profile
ChkHr(connectionProfile->GetConnectionCost(&cost))
ChkHr(cost->get_NetworkCostType(&costType))
ChkHr(cost->get_Roaming(&isRoaming))
ChkHr(pStorePackageUpdates->First(&updateIterator))
_AreAllDownloadsComplete
ChkHr(updateIterator->get_HasCurrent(&hasCurrent))
ChkHr(updateIterator->get_Current(&update))
ChkHr(update.As(&updatePrivate))
ChkHr(updatePrivate->get_StoreQueueItem(&storeQueueItem))
ChkHr(storeQueueItem->GetCurrentStatus(&installStatus))
ChkHr(installStatus->get_PackageInstallExtendedState(&extendedState))
ChkHr(updateIterator->MoveNext(&hasCurrent))
ChkHr(JsonHelpers::CreateJsonObject(&beneficiary))
_BuildBeneficiaryJSON
identityValue
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"identityValue", ::WindowsGetStringRawBuffer(token, nullptr)))
localTicketReference
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"localTicketReference", ::WindowsGetStringRawBuffer(accountId, nullptr)))
identityType
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"identityType", L"Msa"))
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"identityType", L"Aad"))
ChkHr(((HRESULT)0x803F610BL))
ChkHr(WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicket( 0, WinStoreAuth::AuthenticationEndpoint::OneStore, WinStoreAuth::PromptType::Silent, WinStoreAuth::AuthenticationInternal::UseXToken(), user.Get(), authTicket.GetAddressOf(), providerType, spPrimaryAccountTokenRequestResult.GetAddressOf()))
_BuildGoldenBeneficiaryJSON
ChkHr(_BuildBeneficiaryJSON(providerType, authTicket.Get(), DefaultWebAccountIdString.Get(), jsonBeneficiary))
ChkHr(ClientProcessUtils::GetSidForUser(user.Get(), userSid.GetAddressOf()))
_BuildBeneficiaryArrayJSON
ChkHr(JsonHelpers::CreateJsonObject(&userAuth))
ChkHr(JsonHelpers::CreateJsonArray(&authTokensArray))
ChkHr(JsonHelpers::SetNamedArray(userAuth, userSid.GetRawBuffer(nullptr), authTokensArray))
ChkHr(CoSwitchCallContext(nullptr, &pOldCtx))
ChkHr(CoSwitchCallContext(pOldCtx, &pTmpCtx))
ChkHr(hrGetAllAccounts)
ChkHr(_BuildBeneficiaryJSON( tickets[index].m_providerType, tickets[index].m_ticket.Get(), tickets[index].m_webAccountId.Get(), jsonBeneficiary))
ChkHr(JsonHelpers::AppendObject(authTokensArray, jsonBeneficiary))
ChkHr(userAuth->GetNamedArray(userSid.Get(), &jsonBeneficiaries))
ChkHr(JsonHelpers::CreateJsonArray(&jsonBeneficiaries))
_BuildGoldenBeneficiaryArrayJSON
ChkHr(_BuildGoldenBeneficiaryJSON(user, beneficiary))
ChkHr(JsonHelpers::AppendObject(jsonBeneficiaries, beneficiary))
ChkHr(jsonValue->get_ValueType(&valueType))
ChkHr(jsonValue->GetString(value.GetAddressOf()))
ChkHr(jsonValue->GetObjectW(&childObject))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductId", currentProductId.GetAddressOf()))
_ShouldFilterByRelationship
MarketProperties
ChkHr(JsonHelpers::GetNamedArray(product, L"MarketProperties", &marketProperties))
ChkHr(marketProperties->GetObjectAt(0, &marketProperty))
RelatedProducts
ChkHr(JsonHelpers::GetNamedArray(marketProperty, L"RelatedProducts", &relatedProducts))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(relatedProducts, &relatedProductsSize))
ChkHr(relatedProducts->GetObjectAt(relatedIndex, &relatedProduct))
RelationshipType
ChkHr(JsonHelpers::GetNamedString(relatedProduct, L"RelationshipType", type.GetAddressOf()))
RelatedProductId
ChkHr(JsonHelpers::GetNamedString(relatedProduct, L"RelatedProductId", relatedProductId.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(jsonBodyString.GetRawBuffer(nullptr), &jsonResult))
_FilterProductsJson
ChkHr(JsonHelpers::GetNamedArray(jsonResult, L"Products", &products))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(products, &productsSize))
ChkHr(products->GetObjectAt(static_cast<UINT32>(index), &product))
ChkHr(_ShouldFilterByRelationship(product, relationshipType, parentProductId, &remove))
ChkHr(JsonHelpers::RemoveAt(products, static_cast<UINT32>(index)))
ChkHr(JsonHelpers::Stringify(jsonResult, jsonBodyString.GetAddressOf()))
ChkHr(jsonInput.As(&jsonObjectIterable))
_ConstructRequestBody
ChkHr(jsonValue->GetArray(jsonArray.GetAddressOf()))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(jsonArray, &count))
ChkHr(jsonArray->GetObjectAt(i, jsonElement.GetAddressOf()))
ChkHr(_ConstructRequestBody(jsonElement, user, accountProviderType, promptType, hwnd, forceRetailSandbox, jsonParameters))
ChkAlloc(tag)
ChkHr(currentPair->get_Key(tag->destinationKey.GetAddressOf()))
isOptional
defaultValue
ChkHr(JsonParser::ParseJSONToObject( childObject, tag, responseTable))
ChkHr(_ConstructRequestBody(childObject, user, accountProviderType, promptType, hwnd, forceRetailSandbox, jsonParameters))
ChkHr(jsonSubstitutionList->destinationKey.CopyTo(jsonSubstitutionList->sourceKey.GetAddressOf()))
ChkHr(_BuildGoldenBeneficiaryJSON(user, jsonBeneficiary))
ChkHr(JsonHelpers::SetNamedObject(jsonParameters, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), jsonBeneficiary))
ChkHr(_BuildBeneficiaryArrayJSON(user, accountProviderType, promptType, hwnd, forceRetailSandbox, jsonBeneficiaries))
ChkHr(JsonHelpers::SetNamedArray(jsonParameters, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), jsonBeneficiaries))
ChkHr(_BuildGoldenBeneficiaryArrayJSON(user, jsonBeneficiaries))
ChkHr(jsonSubstitutionList->defaultValue->get_ValueType(&defaultValueType))
ChkHr(jsonSubstitutionList->defaultValue->Stringify(defaultValueString.GetAddressOf()))
Failed to find substitute value with key %s and no default value provided.
ChkHr(jsonInput->SetNamedValue(jsonSubstitutionList->destinationKey.Get(), jsonSubstitutionList->defaultValue.Get()))
ChkHr(substituteValue->GetArray(&substituteArray))
ChkHr(JsonHelpers::SetNamedArray(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteArray))
ChkHr(substituteValue->GetObjectW(&substituteObject))
ChkHr(JsonHelpers::SetNamedObject(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteObject))
ChkHr(substituteValue->GetNumber(&substituteNumber))
ChkHr(JsonHelpers::SetNamedNumber(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteNumber))
ChkHr(substituteValue->GetString(substituteString.GetAddressOf()))
ChkHr(JsonHelpers::SetNamedString(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteString.Get()))
Failed to substitute value with key %s because we were given an invalid type!
ChkHr(ClientProcessUtils::GetCallingAppPackage(user.Get(), &parentPackage))
_CheckOptionalPackageIsValid
ChkHr(((HRESULT)0x803F6101L))
ChkHr(parentPackage->get_Dependencies(&dependencies))
ChkHr(dependencies->get_Size(&size))
ChkHr(dependencies->GetAt(index, &package))
ChkHr(package.As(&package4))
ChkHr(package4->get_IsOptional(&isOptional))
ChkHr(package->get_Id(&optionalPackageId))
ChkHr(optionalPackageId->get_FullName(packageFullName.GetAddressOf()))
ChkHr(optionalPackageId->get_FamilyName(packageFamilyName.GetAddressOf()))
ChkBool(found, ((HRESULT)0x80070005L))
Found matching package for %s
ChkHr(ClientProcessUtils::CheckMultipleUserSupport(usedMultiUser))
Windows::Services::Store::Internal::StoreContextServer::Initialize
ChkHr(IAPUtils::IsCallingProcessAppContainer(&_isAppContainer))
ChkAlloc(_releaseLicenseTimer)
ChkHr(ClientProcessUtils::GetCallingAppPackageFullName(_packageFullName.GetAddressOf()))
ChkHr(ClientProcessUtils::IsCallerERA(&_isERA))
Developer
Enterprise
Store
System
ClientProcessUtils::GetCallingAppPackage(_user.Get(), package.GetAddressOf())
package.As(&package4)
package4->get_SignatureKind(&signatureKind)
SignatureKind: %hs
ChkHr(CoCreateInstance( __uuidof(ApplicationLicenseManager), nullptr, (CLSCTX_INPROC_SERVER|CLSCTX_LOCAL_SERVER|CLSCTX_REMOTE_SERVER), __uuidof(**(&spLicenseManager)), IID_PPV_ARGS_Helper(&spLicenseManager)))
ChkHr(AsAgile(spLicenseManager.Get(), &_spLicenseManager))
spLicenseInstance->GetContentInfo(IID_PPV_ARGS(&spAppContentInfo))
ChkHr(hrInfo)
ChkHr(spAppContentInfo->GetCatalogId(&productStoreId))
ChkHr(_productStoreId.Set(productStoreId))
ChkHr(((HRESULT) ((RtlQueryWnfStateData( &initialChangeStamp, WNF_LM_CONTENT_LICENSE_CHANGED, _WnfLicenseStateChangeCallback, nullptr, nullptr)) | 0x10000000)))
ChkHr(((HRESULT) ((RtlSubscribeWnfStateChangeNotification( &_wnfLicenseChanged, WNF_LM_CONTENT_LICENSE_CHANGED, initialChangeStamp, _WnfLicenseStateChangeCallback, context, nullptr, 0, 0x00000001UL)) | 0x10000000)))
false
StoreContextServer::Initialize: packageFullName = %s, productStoreId = %s, isLicensed = %s, isAppContainer = %s
ChkHr(_optionalPackageLicenseWatcher.Initialize())
ChkHr(MakeAndInitialize<StoreContextCallerData>(ppCallerData, appWindowHandle))
Windows::Services::Store::Internal::StoreContextServer::CaptureStoreContextCallerData
ChkAlloc(cv.Get())
Windows::Services::Store::Internal::StoreContextServer::SendStoreRequest
ChkHr(JsonHelpers::ParseToJsonObject(WindowsGetStringRawBuffer(jsonDataString, nullptr), jsonData.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( pCallerData, UriHelperV7::StoreEndpointExtensionUrls, requestKind, cv.Get(), jsonData.Get(), statusCode, jsonResponse))
ChkHr(_LoadLicenseJson(spLicenseInstance))
Windows::Services::Store::Internal::StoreContextServer::GetOfflineLicenses
ChkHr(_cachedLicenseJson.CopyTo(result))
Windows::Services::Store::Internal::StoreContextServer::GetProducts
ChkHr(GetProductsByKinds(productKinds, storeIds, nullptr, cv.Get(), CatalogRelationshipType::SellableBy, productJson))
Windows::Services::Store::Internal::StoreContextServer::GetProduct
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetParentProduct, cv.Get(), nullptr, nullptr, productJsonString.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(productJsonString.GetRawBuffer(nullptr), &productResult))
Product
ChkHr(JsonHelpers::GetNamedObject(productResult, L"Product", &product))
ChkHr(JsonHelpers::CreateJsonArray(&products))
ChkHr(JsonHelpers::CreateJsonObject(&newResults))
ChkHr(JsonHelpers::SetNamedArray(newResults.Get(), L"Products", products))
ChkHr(JsonHelpers::Stringify(newResults, productJsonString.GetAddressOf()))
ChkHr(Vector<HSTRING>::Make(&bigIds))
ChkHr(bigIds->Append(_productStoreId.Get()))
SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetUserCollectionForParentProduct, cv.Get(), nullptr, nullptr, collectionsJsonString.GetAddressOf())
ChkHr(IAPUtils::CombineProductsAndCollectionsJson( productJsonString.Get(), collectionsJsonString.Get(), productJson))
ChkHr(productJsonString.CopyTo(productJson))
ChkBool(_productStoreId.IsValid(), ((HRESULT)0x803F6107L))
Windows::Services::Store::Internal::StoreContextServer::GetUserCollection
ChkHr(MakeAndInitialize<GetNextUserCollection>( &currentOperation, this, _productStoreId.Get(), productKinds, nullptr, maxPageSize, _user.Get(), cv.GetAnsi(), nullptr))
ChkHr(currentOperation->GetNextAsync(productJson, nextOperation))
Windows::Services::Store::Internal::StoreContextServer::ConsumeConsumable
ChkHr(Vector<HSTRING>::Make(&productKinds))
ChkHr(productKinds->Append(UnmanagedConsumableKind.Get()))
ChkHr(productKinds->Append(ConsumableKind.Get()))
ChkHr(Vector<HSTRING>::Make(&productIds))
ChkHr(productIds->Append(productId))
ChkHr(GetProductsByKinds( productKinds.Get(), productIds.Get(), nullptr, cv.Get(), CatalogRelationshipType::AddOnParent, productJsonString.GetAddressOf()))
ChkHr(_ParseGetProductsByKinds(productJsonString.Get(), products.GetAddressOf()))
ChkHr(products->get_Size(&productCount))
ChkBool(productCount > 0, HRESULT_FROM_WIN32(1168L))
ChkHr(products->GetAt(0, spStoreProduct.GetAddressOf()))
ChkHr(spStoreProduct->get_ProductKind(productKind.GetAddressOf()))
ChkBool(productKind.IsValid(), HRESULT_FROM_WIN32(1168L))
ChkBool((quantity > 0), ((HRESULT)0x80070057L))
ChkHr(JsonHelpers::CreateJsonObject(&jsonCollectionsParameters))
consumableProductId
ChkHr(JsonHelpers::SetNamedString(jsonCollectionsParameters, L"consumableProductId", productId))
trackingId
ChkHr(JsonHelpers::SetNamedString(jsonCollectionsParameters, L"trackingId", HStringReference(szTrackingId).Get()))
ChkHr(WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicket( 0, WinStoreAuth::AuthenticationEndpoint::OneStore, WinStoreAuth::PromptType::Silent, WinStoreAuth::AuthenticationInternal::UseXToken(), _user.Get(), authTicket.GetAddressOf(), providerType, spPrimaryAccountTokenRequestResult.GetAddressOf()))
quantity
ChkHr(JsonHelpers::SetNamedNumber(jsonCollectionsParameters, L"quantity", quantity))
ChkHr(spStoreProduct->get_IsInUserCollection(&isInUserCollection))
ChkHr(JsonHelpers::CreateJsonObject(&jsonResultObject))
NewQuantity
ChkHr(JsonHelpers::SetNamedNumber(jsonResultObject, L"NewQuantity", isInUserCollection ? 1 : 0))
ChkHr(JsonHelpers::Stringify(jsonResultObject, jsonResult))
ChkHr(((HRESULT)0x803F6109L))
ChkHr(HRESULT_FROM_WIN32(1168L))
ChkHr(JsonHelpers::SetNamedNumber(jsonResultObject, L"NewQuantity", 0))
ChkHr((static_cast<HRESULT>(__hr)))
Windows::Services::Store::Internal::StoreContextServer::GetConsumableBalanceRemaining
ChkHr(JsonHelpers::CreateJsonObject(&jsonCatalogParameters))
ChkHr(StringHelpers::Join( productKinds.Get(), false, productKindsWithCommas.GetAddressOf()))
productIdsWithCommas
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"productIdsWithCommas", productId))
productKinds
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"productKinds", productKindsWithCommas.Get()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetProductsFromParent, cv.Get(), jsonCatalogParameters.Get(), nullptr, productJsonString.GetAddressOf()))
ChkHr(_FilterProductsJson(productJsonString, CatalogRelationshipType::AddOnParent, _productStoreId.Get()))
ChkHr(JsonHelpers::ParseToJsonObject(productJsonString.GetRawBuffer(nullptr), &spResults))
ChkHr(spResults->GetNamedArray(HStringReference(L"Products").Get(), &storeProductArray))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(storeProductArray, &productCount))
ChkHr(storeProductArray->GetObjectAt(0, storeProductJson.GetAddressOf()))
ChkHr(MakeAndInitialize<StoreProduct>(&spStoreProduct,  storeProductJson))
ChkBool(StringHelpers::AreEqualCaseInsensitive(productKind.Get(), ConsumableKind.Get()) || StringHelpers::AreEqualCaseInsensitive(productKind.Get(), UnmanagedConsumableKind.Get()), HRESULT_FROM_WIN32(1168L))
ChkHr(JsonHelpers::CreateJsonArray(&productSkuIds))
ChkHr(JsonHelpers::CreateJsonObject(&productSku))
productId
ChkHr(JsonHelpers::SetNamedString(productSku, L"productId", productId))
ChkHr(JsonHelpers::AppendObject(productSkuIds, productSku))
productSkuIds
ChkHr(JsonHelpers::SetNamedArray(jsonCollectionsParameters, L"productSkuIds", productSkuIds))
ChkHr(IAPUtils::BuildEntitlementFiltersJSON(jsonEntitlementFilters, productKinds.Get()))
entitlementFilters
ChkHr(JsonHelpers::SetNamedArray(jsonCollectionsParameters, L"entitlementFilters", jsonEntitlementFilters))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetUserCollectionForProducts, cv.Get(), jsonCollectionsParameters.Get(), nullptr, jsonResult))
ChkBool((_productStoreId.IsValid() || ClientProcessUtils::IsDataMartApplication()), ((HRESULT)0x803F6107L))
Windows::Services::Store::Internal::StoreContextServer::GetCustomerPurchaseId
ChkHr(JsonHelpers::CreateJsonObject(&jsonParameters))
serviceTicket
ChkHr(JsonHelpers::SetNamedString(jsonParameters, L"serviceTicket", serviceTicket))
publisherUserId
ChkHr(JsonHelpers::SetNamedString(jsonParameters, L"publisherUserId", publisherUserId))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetCustomerPurchaseId, cv.Get(), jsonParameters.Get(), nullptr, jsonResponseString.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(jsonResponseString.GetRawBuffer(nullptr), &jsonResponse))
ChkHr(JsonHelpers::GetNamedString(jsonResponse, L"key", result))
Windows::Services::Store::Internal::StoreContextServer::GetCustomerCollectionsId
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetCustomerCollectionsId, cv.Get(), jsonParameters.Get(), nullptr, jsonResponseString.GetAddressOf()))
Windows::Services::Store::Internal::StoreContextServer::GetAssociatedStoreProducts
ChkHr(MakeAndInitialize<GetNextAssociatedStoreProducts>( &currentOperation, this, _productStoreId.Get(), productKinds, 0, maxItems, true, _user.Get(), cv.GetAnsi(), nullptr ))
ChkHr(currentOperation->GetNextAsync(productJsonResponse, nextOperation))
{idType}
ChkArg(pLinkUri)
Windows::Services::Store::Internal::StoreContextServer::GetLinkUri
ChkHr(UriHelper::GetUri(UriHelper::LinkUriFormat, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), pLinkUri))
ChkArg(pValue)
Windows::Services::Store::Internal::StoreContextServer::IsStoreProductInstalled
ChkBool(!WindowsIsStringEmpty(storeId), ((HRESULT)0x80070057L))
ChkHr(IAPUtils::ParseStoreId( storeId, productId.GetAddressOf(), nullptr, nullptr))
ChkBool(!WindowsIsStringEmpty(productId.Get()), ((HRESULT)0x80070057L))
ChkHr(Vector<HSTRING>::Make(&spIds))
ChkHr(spIds->Append(productId.Get()))
ChkHr(GetProductsByKinds( nullptr, spIds.Get(), nullptr, cv.Get(), CatalogRelationshipType::SellableBy, hydrateResult.GetAddressOf()))
ChkHr(_ParseGetProductsByKinds(hydrateResult.Get(), products.GetAddressOf()))
ChkHr(spStoreProduct->get_HasDigitalDownload(&hasDigitalDownload))
ChkHr(GetContentIdKeyIdsForProductIds(spIds.Get(), cv.Get(), &response))
ChkHr(response->get_Items(&items))
ChkHr(items->get_Size(&size))
ChkBool(size == 1, ((HRESULT)0x803F6107L))
ChkHr(items->GetAt(0, item.GetAddressOf()))
ChkHr(ActivateInstance(RuntimeClassWindowsXboxSystemInternalDeploymentAvailablePackageProvider.Get(), &packageProvider))
ChkHr(item->get_ContentIds(&contentIds))
ChkHr(contentIds->get_Size(&size))
ChkHr(hrIter)
ChkHr(spStoreProduct.As(&storeProductPrivate))
ChkHr(storeProductPrivate->get_PackageFamilyName(packageFamilyName.GetAddressOf()))
ChkBool(packageFamilyName.IsValid(), ((HRESULT)0x803F6107L))
ChkHr(GetActivationFactory( StateRepositoryUserClassId.Get(), &spUserStatics))
ChkHr(ClientProcessUtils::GetSidForUser(_user.Get(), userSid.GetAddressOf()))
ChkHr(spUserStatics->GetByUserSid(userSid.Get(), &spUser))
ChkHr(GetActivationFactory( StateRepositoryPackageClassId.Get(), &spPackageStatics))
ChkHr(spPackageStatics->ExistsByUserAndPackageFamilyName( spUser.Get(), packageFamilyName.Get(), pValue))
ChkHr(spPackageStatics->ExistsByPackageFamilyName( packageFamilyName.Get(), pValue))
This function is not supported, all calls should now use StoreContextServer::GetAppAndOptionalStorePackageUpdates
Windows::Services::Store::Internal::StoreContextServer::GetAppAndOptionalStorePackageUpdatesAsync
This function is not supported, all calls should now use StoreContextServer::RequestDownloadStorePackageUpdates
Windows::Services::Store::Internal::StoreContextServer::RequestDownloadStorePackageUpdatesAsync
This function is not supported, all calls should now use StoreContextServer::RequestDownloadAndInstallStorePackageUpdatesAsync
Windows::Services::Store::Internal::StoreContextServer::RequestDownloadAndInstallStorePackageUpdatesAsync
ChkHr(ClientProcessUtils::GetCallingAppName(appName.GetAddressOf()))
Windows::Services::Store::Internal::StoreContextServer::RequestDownloadAndInstallStorePackagesAsync
ChkHr(MakeAndInitialize<MessageDialogHelper>(&messageDialogHelper, appName.Get(), (HWND)0 ))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, this, _packageFullName.Get(), pStoreIds, cv.GetAnsi(), messageDialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<BackgroundTaskOperation>(&operation, _user.Get(), jsonRequest, cv.GetHStringReference().Get()))
Windows::Services::Store::Internal::StoreContextServer::BackgroundPurchaseDialogTask
ChkHr(BlockOnCompletionAndGetResults(operation.Get(), jsonResponse))
Windows::Services::Store::Internal::StoreContextServer::_LicenseChanged
hrInfo
spAppContentInfo->GetCatalogId(&productStoreId)
_productStoreId.Set(productStoreId)
ActivateInstance(RuntimeClassAppInstallManager.Get(), &_appInstallManager)
Windows::Services::Store::Internal::StoreContextServer::_GetAppInstallManager
Windows::Services::Store::Internal::StoreContextServer::_GetStoreQueueItems
ChkBool(_productStoreId.IsValid(), ((HRESULT)0x803F6108L))
ChkHr(appInstallManager->get_AppInstallItems(&appInstallItems))
ChkHr(appInstallManager.As(&appInstallManagerInternal))
ChkHr(appInstallManagerInternal->GetAppInstallItemsForUser(_user.Get(), &appInstallItems))
ChkHr(AgileVector<HSTRING>::Make(&productIdsInAppInstallQueue))
ChkHr(appInstallItem->get_ProductId(appInstallItemProductId.GetAddressOf()))
ChkHr(productIdsInAppInstallQueue->Append(appInstallItemProductId.Get()))
ChkHr(IAPUtils::ParseStoreId(storeId.Get(), productId.GetAddressOf(), nullptr , nullptr ))
ChkHr(hrInnerIter)
ChkHr(AgileVector<StoreQueueItem*>::Make(&queuedItemResults))
ChkHr(productIdsInAppInstallQueue->get_Size(&size))
ChkHr(AgileVector<HSTRING>::Make(&foundProductIds))
ChkHr(GetProductsByKinds( nullptr, productIdsInAppInstallQueue.Get(), nullptr, cv.Get(), CatalogRelationshipType::SellableBy, hydrateResult.GetAddressOf()))
ChkHr(products.As(&productsIVector))
ChkHr(product->get_StoreId(productId.GetAddressOf()))
ChkHr(foundProductIds->Append(productId.Get()))
ChkHr(foundProductIds.As(&foundProductIdsIVector))
ChkHr(MakeAndInitialize<StoreQueueItem>(&storeQueueItem, appInstallItem.Get(), cv.GetAnsi()))
ChkHr(queuedItemResults->Append(storeQueueItem.Get()))
ChkHr(queuedItemResults->GetView(queuedItems))
Windows::Services::Store::Internal::StoreContextServer::_RequestPurchase
ChkHr(_RetrieveHWNDFromCallerData(pCallerData, &hwnd))
ChkHr(MakeAndInitialize<PurchaseOperation>( &purchaseOperation, _packageFullName.Get(), _productStoreId.Get(), storeId, storePurchaseProperties, overrideJsonRequest, _user.Get(), cv.GetHStringReference().Get(), hwnd, _hasPreviewCapability, invokedApi ))
ChkHr(BlockOnCompletionAndGetResults(purchaseOperation.Get(), jsonResponse))
ChkHr(_CheckOptionalPackageIsValid(optionalPackageName, _user))
Windows::Services::Store::Internal::StoreContextServer::AcquireStoreLicenseForOptionalPackage
ChkHr(ClientProcessUtils::GetCallerTokenFromComCall(&hToken))
ChkHr(ResultFromLastError())
ChkHr(ClientProcessUtils::GetSidForUser(_user.Get(), sidString.GetAddressOf()))
ChkHr(RpcHelpers::GetRpcHandle(&rpcHandle))
ChkHr(hr)
ChkHr(HRESULT_FROM_RPC(hr))
ChkHr(_optionalPackageLicenseWatcher.AddOptionalPackageToWatch(optionalPackageName, pOptionalPackageLicense))
ChkHr(ComposeLegacyXboxContentIdFromInstalledContentId(WindowsGetStringRawBuffer(packageIdentifier, nullptr), contentId.addressof()))
Windows::Services::Store::Internal::StoreContextServer::GetPreviewLicenseResultForPackage
ChkHr(((HRESULT)0x80004001L))
ChkHr(GetRequiredEkbFromContentId(contentId.get(), keyId.addressof()))
ChkHr(Vector<HSTRING>::Make(&contentIds))
ChkHr(contentIds->Append(packageIdentifier))
ChkHr(Vector<HSTRING>::Make(&keyIds))
ChkHr(keyIds->Append(HStringReference(keyId.get()).Get()))
ChkHr(contentIds->GetView(&contentIdsVectorView))
ChkHr(keyIds->GetView(&keyIdsVectorView))
ChkHr(licenseManager->GetSatisfactionInfos( contentIdsVectorView.Get(), keyIdsVectorView.Get(), &licenseSatisfactionResult))
ChkHr(_CheckOptionalPackageIsValid(packageIdentifier, _user))
ChkHr(GetContentId(WindowsGetStringRawBuffer(packageIdentifier, nullptr), CPT_UNIVERSAL_APP, &guidContentId))
ChkHr(GuidToStringWithoutBraces(&guidContentId, szGuid))
ChkHr(contentIds->Append(HStringReference(szGuid).Get()))
ChkHr(licenseManager->GetSatisfactionInfos( contentIdsVectorView.Get(), nullptr, &licenseSatisfactionResult))
ChkHr(licenseSatisfactionResult->get_ExtendedError(&extendedError))
ChkHr(extendedError)
ChkHr(licenseSatisfactionResult->get_LicenseSatisfactionInfos(&infos))
ChkHr(infos->get_Size(&sizeResult))
ChkBool(sizeResult == 1, ((HRESULT)0x803F6107L))
ChkHr(infos.As(&infosIterable))
ChkHr(infosIterable->First(&infosIterator))
ChkHr(infosIterator->get_HasCurrent(&hasCurrent))
ChkHr(infosIterator->get_Current(&keyValuePair))
ChkHr(keyValuePair->get_Value(&info))
ChkHr(info->get_IsSatisfied(&isSatisfied))
ChkHr(JsonHelpers::CreateJsonObject(&previewResultJson))
ChkHr(licenseSatisfactionResult.As(&licenseSatisfactionResultInternal))
licensableSku
ChkHr(JsonHelpers::SetNamedString(previewResultJson, L"licensableSku", licensableSku.Get()))
Preview license response did not have skuId. (CV:%hs)
ChkHr(((HRESULT)0x803F6108L))
licensableStatus
ChkHr(JsonHelpers::SetNamedNumber(previewResultJson, L"licensableStatus", licenseQueryStatus))
ChkHr(JsonHelpers::Stringify(previewResultJson, licenseSatisfactionResultJson))
ChkHr(IAPUtils::ParseStoreId( productStoreId, productId.GetAddressOf(), nullptr, nullptr))
Windows::Services::Store::Internal::StoreContextServer::GetPreviewLicenseResultForStoreId
ChkHr(productIds->Append(productId.Get()))
ChkHr(productIds.As(&productIdsIter))
ChkHr(GetContentIdKeyIdsForProductIds( productIdsIter.Get(), cv.Get(), &contentIdResponse))
ChkHr(contentIdResponse->get_Items(&items))
ChkHr(items->get_Size(&itemCount))
ChkBool(itemCount != 0, ((HRESULT)0x803F6107L))
ChkHr(items->GetAt(0, &contentIdKeyIdItem))
ChkHr(contentIdKeyIdItem->get_ContentIds(&contentIds))
ChkHr(contentIdKeyIdItem->get_KeyIds(&keyIds))
ChkHr(contentIds->get_Size(&sizeOfContentIds))
ChkHr(licenseManager->GetSatisfactionInfos( contentIds.Get(), keyIds.Get(), &licenseSatisfactionResult))
ChkBool(sizeResult > 0, ((HRESULT)0x803F6107L))
Preview license response did not have skuId. (CV = %hs)
There were items in the collection, however iterator is pointing at the end of the collection...
ChkHr(_optionalPackageLicenseWatcher.RemoveOptionalPackageToWatch(optionalPackageName))
Windows::Services::Store::Internal::StoreContextServer::ReleaseStoreLicenseForOptionalPackage
ChkHr(HRESULT_FROM_RPC(OptionalPackageRundownNotification( rpcHandle, appPfn.GetRawBuffer(nullptr), sessionId, sidString.GetRawBuffer(nullptr), WindowsGetStringRawBuffer(optionalPackageName, nullptr))))
ChkHr(_spLicenseManager.As(&appLicenseManager2))
Windows::Services::Store::Internal::StoreContextServer::GetProductForPackage
ChkHr(AllowImpersonation(appLicenseManager2.Get()))
ChkHr(appLicenseManager2->GetOfflineLicenseForInstalledPackage( WindowsGetStringRawBuffer(packageFullName, nullptr), AppContentType::AppType_Unknown, license.GetAddressOf()))
ChkHr(license->GetContentInfo(__uuidof(**(contentInfo.GetAddressOf())), IID_PPV_ARGS_Helper(contentInfo.GetAddressOf())))
ChkHr(contentInfo->GetCatalogId(&storeIdFromLicense))
ChkHr(Vector<HSTRING>::Make(&storeIds))
ChkHr(storeIds->Append(HStringReference(storeIdFromLicense).Get()))
ChkHr(GetProducts(productKinds, storeIds.Get(), cv.GetHStringReference().Get(), productJson))
ChkHr(VerifyCapability(StoreConfigurationCapability.Get()))
Windows::Services::Store::Internal::StoreContextServer::FocusOnWindow
ChkHr(ClientProcessUtils::GetCallingAppPackage(_user.Get(), spAppmodelPackage.GetAddressOf()))
Windows::Services::Store::Internal::StoreContextServer::GetAppAndOptionalStorePackageUpdates
ChkHr(Vector<Package*>::Make(&appmodelPackages))
ChkHr(appmodelPackages->Append(spAppmodelPackage.Get()))
ChkHr(spAppmodelPackage->get_Id(&packageId))
ChkHr(packageId->get_FamilyName(packageFamilyName.GetAddressOf()))
Adding calling package = %s for productId = %s
ChkHr(spAppmodelPackage->get_Dependencies(supplementalPackages.GetAddressOf()))
ChkHr(supplementalPackages->get_Size(&supplementalPackagesSize))
ChkHr(supplementalPackages->GetAt(i, supplement.GetAddressOf()))
ChkHr(supplement.As(&supplement4))
ChkHr(supplement4->get_IsOptional(&isOptional))
ChkHr(appmodelPackages->Append(supplement.Get()))
ChkHr(supplement->get_Id(packageId.ReleaseAndGetAddressOf()))
ChkHr(packageId->get_FamilyName(packageFamilyName.ReleaseAndGetAddressOf()))
Adding optional package = %s
ChkHr(((HRESULT)0x8000FFFFL))
ChkHr(appmodelPackages->GetView(appModelPackagesVV.GetAddressOf()))
ChkHr(appInstallManagerInternal->SearchForUpdatesWithPausedAddAsync( _user.Get(), appModelPackagesVV.Get(), true , cv.GetHStringReference().Get(), true, appInstallItemsOp.GetAddressOf()))
ChkHr(BlockOnCompletionAndGetResults(appInstallItemsOp.Get(), &appInstallItems))
ChkHr(AgileVector<StorePackageUpdate*>::Make(&updates))
ChkHr(appInstallItems->get_Size(&size))
ChkHr(appInstallItems->GetAt(index, &item))
ChkHr(item->get_PackageFamilyName(packageFamilyName.ReleaseAndGetAddressOf()))
ChkHr(appmodelPackages->get_Size(&packagesSize))
ChkHr(appmodelPackages->GetAt(packagesIndex, &package))
ChkHr(MakeAndInitialize<StoreQueueItem>(&storeQueueItem, item.Get(), cv.GetAnsi()))
ChkHr(MakeAndInitialize<StorePackageUpdate>(&storePackageUpdate, package.Get(), storeQueueItem.Get()))
ChkHr(updates->Append(storePackageUpdate.Get()))
Found update for package = %s
ChkHr(updates->GetView(queuedItems))
Windows::Services::Store::Internal::StoreContextServer::CanSilentlyDownloadStorePackageUpdates
ChkHr(appInstallManager->get_AutoUpdateSetting(&autoUpdates))
ChkHr(_IsNetworkMetered(&onMeteredNetwork))
ChkHr(CanSilentlyDownloadStorePackageUpdates(cv.GetHStringReference().Get(), &canSilentlyDownload))
Windows::Services::Store::Internal::StoreContextServer::DownloadStorePackageUpdates
Prompt required, but not possible, cancel - canSilentlyDownload = %s, install = %s
ChkHr(pMessageDialogHelper->ShowDialogWithResultsAsync( message, nullptr, messageDialogOperation.GetAddressOf()))
ChkHr(BlockOnCompletionAndGetResults(messageDialogOperation.Get(), &command))
User content required, cancel = %s, canSilentlyDownload = %s, install = %s
ChkHr(AgileVector<StoreQueueItem*>::Make(&queueItems))
ChkHr(queueItems->Append(storeQueueItem.Get()))
ChkHr(storeQueueItem->get_ProductId(productId.GetAddressOf()))
ChkHr(appInstallManager.As(&appInstallManager2))
ResumeWithFlags called for productId = %s, setFlags = %d, resetFlags = %d
ChkHr(queueItems->GetView(queuedItems))
Windows::Services::Store::Internal::StoreContextServer::GetProductsWithOptions
ChkHr(GetProductsByKinds(productKinds, storeIds, storeProductOptions, cv.Get(), CatalogRelationshipType::SellableBy, productJson))
Windows::Services::Store::Internal::StoreContextServer::DownloadStorePackages
ChkHr(IAPUtils::ParseStoreId( storeId.Get(), productId.GetAddressOf(), nullptr, nullptr))
ChkHr(Vector<HSTRING>::Make(&licensedProducts))
ChkHr(contentIds->get_Size(&contentIdsSize))
ChkHr(item->get_KeyIds(&keyIds))
ChkHr(item->get_ProductId(productId.GetAddressOf()))
ChkHr(licensedProducts->Append(productId.Get()))
ChkHr(hrInfosIter)
ChkHr(licensedProducts->get_Size(&size))
ChkHr(((HRESULT)0x80070005L))
ChkHr(messageDialogHelper->ShowDialogWithResultsAsync( onMeteredNetwork ? ((HRESULT)0x803F6206L) : ((HRESULT)0x803F6203L), nullptr, messageDialogOperation.GetAddressOf()))
User content required, cancel = %s
ChkHr(appInstallManager.As(&appInstallManager5))
ChkHr(licensedProducts.As(&products))
ChkHr(ActivateInstance(RuntimeClassAppInstallOptions.Get(), &appInstallOptions))
ChkHr(installOptions->get_AllowForcedAppRestart(&allowForcedAppRestart))
ChkHr(appInstallOptions->put_AllowForcedAppRestart(allowForcedAppRestart))
ChkHr(appInstallManager5->StartProductInstallWithOptionsForUserAsync( _user.Get(), productId.Get(), nullptr, nullptr, true, downloadOnAnyNetwork, cv.GetHStringReference().Get(), appInstallOptions.Get(), &asyncOp))
ChkHr(BlockOnCompletionAndGetResults(asyncOp.Get(), &installItemVector))
ChkHr(installItemVector->get_Size(&installVectorSize))
ChkHr(MakeAndInitialize<StoreQueueItem>(&queueItem, installItem.Get(), cv.GetAnsi()))
ChkHr(queueItems->Append(queueItem.Get()))
ChkHr(hrItemIter)
ChkHr(hrProductsIter)
Windows::Services::Store::Internal::StoreContextServer::UninstallStorePackage
ChkBool(productId.IsValid(), ((HRESULT)0x80070057L))
ChkHr(Vector<HSTRING>::Make(&ids))
ChkHr(ids->Append(productId.Get()))
ChkHr(GetProductsByKinds( nullptr, ids.Get(), nullptr, cv.Get(), CatalogRelationshipType::All, hydrateResult.GetAddressOf()))
ChkHr(products->get_Size(&productsLength))
ChkBool(productsLength > 0, HRESULT_FROM_WIN32(1168L))
ChkHr(GetContentIdKeyIdsForProductIds(ids.Get(), cv.Get(), &response))
ChkHr(contentId.CopyTo(packageFamilyNameToUninstall.GetAddressOf()))
ChkHr(storeProductPrivate->get_PackageFamilyName(packageFamilyNameToUninstall.GetAddressOf()))
ChkHr(packageFamilyNameToUninstall.Set(packageFamilyName))
ChkBool(packageFamilyNameToUninstall.IsValid(), ((HRESULT)0x803F6107L))
ChkHr(packageProvider->FindAvailablePackage(packageFamilyNameToUninstall.Get(), AvailablePackageIdentityType_ContentId, &package))
ChkHr(package.As(&package2))
ChkHr(package2->get_PackageFullName(packageFullNameToUninstall.GetAddressOf()))
ChkHr(GetActivationFactory(RuntimeClassWindowsXboxApplicationModelStateInternalStateHelperCache.Get(), cacheStatics.GetAddressOf()))
ChkHr(cacheStatics->GetPackageByFullName(packageFullNameToUninstall.Get(), internalPackage.GetAddressOf()))
ChkHr(internalPackage->get_DisplayName(displayName.GetAddressOf()))
ChkHr(CoCreateInstance(__uuidof(XboxDevelopmentPackageManager), nullptr, CLSCTX_LOCAL_SERVER, __uuidof(**(&packageManager)), IID_PPV_ARGS_Helper(&packageManager)))
ChkHr(packageManager->UninstallPackage(packageFullNameToUninstall.GetRawBuffer(nullptr)))
ChkHr(ActivateInstance(RuntimeClassWindowsManagementDeploymentPackageManager.Get(), &packageManager))
ChkHr(packageManager->FindPackagesByUserSecurityIdPackageFamilyName(userSid.Get(), packageFamilyNameToUninstall.Get(), packages.GetAddressOf()))
ChkHr(packages->First(&packagesIterator))
ChkHr(packagesIterator->get_HasCurrent(&hasCurrent))
ChkHr(packagesIterator->get_Current(&package))
ChkHr(package4->get_SignatureKind(&signatureKind))
ChkHr(package->get_Id(&packageId))
ChkHr(packageId->get_FullName(packageFullName.GetAddressOf()))
ChkHr(package4->get_IsOptional(&isOptionalPackage))
ChkHr(ClientProcessUtils::GetCallingAppPackage(_user.Get(), callingPackage.GetAddressOf()))
ChkHr(callingPackage->get_Dependencies(dependencies.GetAddressOf()))
ChkHr(dependencies.As(&dependenciesIteratable))
ChkHr(dependenciesIteratable->First(&dependenciesIterator))
ChkHr(dependenciesIterator->get_HasCurrent(&hasCurrentDependencies))
ChkHr(dependenciesIterator->get_Current(&dependentPackage))
ChkHr(dependentPackage.As(&dependentPackage4))
ChkHr(dependentPackage4->get_SignatureKind(&signatureKindDependent))
ChkHr(dependentPackage->get_Id(&dependentPackageId))
ChkHr(dependentPackageId->get_FullName(dependentPackageFullName.GetAddressOf()))
ChkHr(dependenciesIterator->MoveNext(&hasCurrentDependencies))
ChkHr(packageId->get_Name(packageName.GetAddressOf()))
ChkHr(packageManager->RemovePackageAsync(packageFullName.Get(), &deploymentOperation))
ChkHr(BlockOnCompletionAndGetResults(deploymentOperation.Get(), &deploymentResult))
ChkHr(deploymentResult->get_ExtendedErrorCode(&deploymentResultCode))
ChkHr(deploymentResultCode)
Trying to remove package %s that isn't related to the calling app
ChkHr(((HRESULT)0x803F610EL))
Trying to remove non-store package %s
ChkHr(((HRESULT)0x803F610DL))
ChkHr(packagesIterator->MoveNext(&hasCurrent))
Trying to remove package %s that isn't installed
ChkHr(((HRESULT)0x803F6103L))
Windows::Services::Store::Internal::StoreContextServer::SetInstallOrderForAssociatedStoreQueueItems
ChkHr(appInstallManager5->SetQueueOrder(cvIn, productIds))
ChkHr(dialogHelper->put_ContextString(packageDisplayName.Get()))
Windows::Services::Store::Internal::StoreContextServer::UserConsentedToUninstall
ChkHr(dialogHelper->ShowDialogWithResultsAsync( ((HRESULT)0x803F6209L), nullptr, messageDialogOperation.GetAddressOf()))
User consent required, cancel = %s
Unable to show consent dialog
ChkHr(UriHelperV7::GetIndexedEntry(slsUri, requestKind, entry.GetAddressOf()))
Windows::Services::Store::Internal::StoreContextServer::SendStoreRequestWithUris
URIBufferMaxSize
DoPost
AuthType
ForcePrompt
UsePromptSettings
BodyBufferMaxSize
InvokePurchaseFlow
UseBackgroundTask
AnonymousRequest
RequiresCapability
RequireAuthToken
RequireValidLicense
RefreshLicenses
ForceRetailSandbox
DoDelete
DoPut
DoHead
DoOptions
DoPatch
UserTokenTypes
BodyForcePrompt
BodyPromptSettings
OmitAuthTokenPrefix
UseAuthIfAvailable
SkipCapabilityCheckIfERA
FallbackToDeviceAuth
ChkHr(JsonParser::ParseJSONToObject( entry, &requestParams, responseTable))
ChkHr(VerifyCapability(requestParams.requiredCapability.Get()))
ChkHr(IAPUtils::GetMarket(market.GetAddressOf()))
ChkHr(IAPUtils::GetLanguagesString(languages.GetAddressOf()))
ChkHr(IAPUtils::GetLanguage(language.GetAddressOf()))
ChkHr(IAPUtils::GetDeviceIds(moid, oemid, scmid))
ChkHr(UriHelperV7::GetRawString(UriHelperV7::DeviceFamily, deviceFamily.GetAddressOf()))
ChkHr(JsonHelpers::CreateJsonObject(&jsonInternalParameters))
StoreId
ChkHr(JsonHelpers::GetNamedString(jsonParameters, L"StoreId", _parentStoreIdFromParam.GetAddressOf()))
parentProductId
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"parentProductId", _parentStoreIdFromParam.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"parentProductId", _productStoreId.GetRawBuffer(nullptr)))
market
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"market", market.GetRawBuffer(nullptr)))
languages
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"languages", languages.GetRawBuffer(nullptr)))
deviceMoid
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceMoid", moid.GetRawBuffer(nullptr)))
deviceOemid
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceOemid", oemid.GetRawBuffer(nullptr)))
deviceScmid
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceScmid", scmid.GetRawBuffer(nullptr)))
deviceFamily
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceFamily", deviceFamily.GetRawBuffer(nullptr)))
locale
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"locale", language.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"PFN", _packageFullName.GetRawBuffer(nullptr)))
ChkHr(IAPUtils::ConstructSlsUri(requestParams.uriToFormat.Get(), requestParams.cchUriMax, jsonInternalParameters, uri.GetAddressOf()))
AuthToken
ChkHr(JsonHelpers::GetNamedString(jsonParameters, L"AuthToken", authToken.GetAddressOf()))
ChkBool(pCallerData != nullptr, ((HRESULT)0x803F610BL))
ChkHr(WinStoreAuth::AuthenticationInternal::GetDeviceTicketWithBroker( true, authToken.GetAddressOf()))
ChkHr(hrGoldenTicket)
requestParams.authType == tickets[0].m_providerType
ChkHr(spWebTokenRequestResults->get_Size(&resultsCount))
ChkHr(spWebTokenRequestResults->GetAt(0, it.GetAddressOf()))
ChkHr(it.As(&spWebTokenRequestResult))
ChkBool(ticketCount == 1, ((HRESULT)0x803F6107L))
ChkHr(WinStoreAuth::AuthenticationInternal::PrefixTicketForMDollar((WinStoreAuth::AccountProviderType)requestParams.authType, authToken.Get(), strAuthTokenPrefixed.GetAddressOf()))
ChkHr(strAuthTokenPrefixed.CopyTo(authToken.ReleaseAndGetAddressOf()))
BodyTemplate
ChkHr(_ConstructRequestBody( jsonBody, _user, static_cast<WinStoreAuth::AccountProviderType>(requestParams.userTokenTypes), userAuthPromptType, hwnd, requestParams.forceRetailSandbox, jsonInternalParameters))
ChkHr(JsonHelpers::Stringify(entry, entryJson.GetAddressOf()))
Entry requires a Body Template: %s
ChkHr(((HRESULT)0x803F6107L))
Entry cannot have a Body Template: %s
ChkHr(JsonHelpers::Stringify(jsonBody.Get(), body.GetAddressOf()))
ChkBool(pCallerData != nullptr, HRESULT_FROM_WIN32(1400L))
ChkHr(_RequestPurchase( pCallerData, nullptr, nullptr, body.Get(), cv.GetHStringReference().Get(), InvokedApi_SendStoreRequest.Get(), jsonResponse))
ChkHr(BackgroundPurchaseDialogTask(body.Get(), cv.GetHStringReference().Get(), jsonResponse))
ChkHr(IAPUtils::CreateHttpClient(httpClient.GetAddressOf()))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader( authToken.Get(), false, httpClient.GetAddressOf()))
ChkHr(IAPUtils::CreateHttpClientWithAuthIfAvailable(_user.Get(), &httpClient, requestParams.forceRetailSandbox))
ChkHr(hrOperation)
This request kind (%d) is invalid or not supported on this release. Request Entry: %s
Windows::Services::Store::Internal::StoreContextServer::GetProductsByKinds
ChkHr(StringHelpers::Join( storeIds, false, storeIdsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join( productKinds, false, productKindsWithCommas.GetAddressOf()))
ChkHr(storeProductOptions->get_ActionFilters(&actionFilters))
ChkHr(actionFilters->get_Size(&filterSize))
ChkBool(filterSize < 2, ((HRESULT)0x80070057L))
ChkHr(actionFilters->GetAt(0, actionFilter.GetAddressOf()))
actionFilter
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"actionFilter", actionFilter.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"productIdsWithCommas", storeIdsWithCommas.Get()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, uriId, cv, jsonCatalogParameters.Get(), nullptr, productJsonString.GetAddressOf()))
ChkHr(_FilterProductsJson(productJsonString, relationshipFilter, _productStoreId.Get()))
ChkHr(JsonHelpers::CreateJsonArray(&jsonProductSkuIds))
ChkHr(JsonHelpers::SetNamedArray(jsonCollectionsParameters, L"productSkuIds", jsonProductSkuIds))
ChkHr(JsonHelpers::SetNamedString(productSku, L"productId", productId.Get()))
ChkHr(JsonHelpers::AppendObject(jsonProductSkuIds, productSku))
ChkHr(IAPUtils::BuildEntitlementFiltersJSON(jsonEntitlementFilters, productKinds))
SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetUserCollectionForProducts, cv, jsonCollectionsParameters.Get(), nullptr, collectionsJsonString.GetAddressOf())
ChkHr(JsonHelpers::CreateJsonObject(&request))
Windows::Services::Store::Internal::StoreContextServer::GetContentIdKeyIdsForProductIds
ChkHr(StringHelpers::Join(productIds, false, productIdsString.GetAddressOf()))
productIds
ChkHr(JsonHelpers::SetNamedString(request, L"productIds", productIdsString.Get()))
ChkHr(JsonHelpers::SetNamedString(request, L"AuthToken", HStringReference(L"").Get()))
ChkHr(JsonHelpers::Stringify(request, requestJson.GetAddressOf()))
ChkHr(SendStoreRequest( nullptr, _hasPreviewCapability ? 14 : 13, cv.GetHStringReference().Get(), requestJson.Get(), &status, responseJson.GetAddressOf()))
ChkHr(MakeAndInitialize<StoreContentIdKeyIdResponse>(response, responseJson.Get()))
ChkHr(IAPUtils::SetMaxDateTime(&expirationDate))
Windows::Services::Store::Internal::StoreContextServer::_LoadLicenseJson
ChkHr(IAPUtils::GetTimeSpanDifference(expirationDate, &trialTimeRemaining))
_ParseLicenseInstance( spLicenseInstance, isActive, isTrial, isTrialOwnedByThisUser, trialUniqueId.GetAddressOf(), isDiscLicense, expirationDate, trialTimeRemaining, package)
ChkHr(_MakeDefaultLicenseResponse(package))
isActive
ChkHr(JsonHelpers::SetNamedBool(package, L"isActive", !!isActive))
isTrial
ChkHr(JsonHelpers::SetNamedBool(package, L"isTrial", !!isTrial))
isTrialOwnedByThisUser
ChkHr(JsonHelpers::SetNamedBool(package, L"isTrialOwnedByThisUser", isTrialOwnedByThisUser))
trialUniqueId
ChkHr(JsonHelpers::SetNamedString(package, L"trialUniqueId", trialUniqueId.Get()))
isDiscLicense
ChkHr(JsonHelpers::SetNamedBool(package, L"isDiscLicense", isDiscLicense))
ChkHr(JsonHelpers::SetNamedDateTime(package, L"expiration", expirationDate))
trialTimeRemaining
ChkHr(JsonHelpers::SetNamedTimeSpan(package, L"trialTimeRemaining", trialTimeRemaining))
ChkHr(JsonHelpers::Stringify(package, _cachedLicenseJson.GetAddressOf()))
ChkBool(spLicenseInstance != nullptr, ((HRESULT)0x803F6107L))
Windows::Services::Store::Internal::StoreContextServer::_ParseLicenseInstance
ChkHr(spLicenseInstance->GetIsTrial(&isTrial))
ChkHr(spLicenseInstance->GetLicenseGrantReason(&grantReason))
ChkHr(spLicenseInstance->GetExpirationDateTime(&ftExpirationTime))
ChkHr(IAPUtils::SetDateTime(ftExpirationTime, &expirationDate))
spLicenseInstance->GetContentInfo(IID_PPV_ARGS(spApplicationContentInfo.GetAddressOf()))
ChkHr(spApplicationContentInfo->GetUserId(&lmUserId))
FALSE
Lookup failed for user's ownership of the trial. isTrialOwnedByThisUser=%s
ChkHr(spApplicationContentInfo->GetEntitlementId(&entitlementId))
ChkHr(hstrEntitlementId.Set(entitlementId))
ChkHr(spApplicationContentInfo->GetTrialTimeRemaining(&ftTrialTimeRemaining))
ChkHr(IAPUtils::SetDateTime(ftTrialTimeRemaining, &dtTrialTimeRemaining))
ChkHr(IAPUtils::GetTimeSpanDifference(dtTrialTimeRemaining, &trialTimeRemaining))
ChkHr(spApplicationContentInfo->GetCustomPolicy(&customPolicyLengthInBytes, reinterpret_cast<BYTE**>(&customPolicyEncoded)))
ChkHr(customPolicyDecoded.Set(customPolicyEncoded))
ChkHr(StringHelpers::DecodeBase64( HStringReference(customPolicyEncoded.GetPtr(), customPolicyLength).Get(), customPolicyDecoded.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(customPolicyDecoded.GetRawBuffer(nullptr), &customPolicyObject))
packages
ChkHr(JsonHelpers::GetNamedArray(customPolicyObject, L"packages", &packages))
ChkHr(packages->GetObjectAt(0, &package))
skuId
ChkHr(JsonHelpers::GetNamedString(package, L"skuId", _skuId.GetAddressOf()))
version
ChkHr(JsonHelpers::GetNamedInteger(customPolicyObject, L"version", &version))
The license for the application is missing information needed to perform Store operations. If you side-loaded the application, uninstall the application and download it from the Store first to get the Store license associated with the application.
productAddOns
ChkHr(JsonHelpers::GetNamedArray(package, L"productAddOns", &productAddOns))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(productAddOns, &addOnSize))
ChkHr(productAddOns->GetObjectAt(i, &productAddOn))
ChkHr(JsonHelpers::GetNamedString(productAddOn, L"productId", addOnProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(productAddOn, L"skuId", addOnSkuId.GetAddressOf()))
ChkHr(spApplicationContentInfo->GetAddOnCount(&nCount))
ChkHr(spApplicationContentInfo->GetAddOnAtPosition(lProduct, spAppAddOn.GetAddressOf()))
ChkHr(spAppAddOn->GetCatalogId(&licenseAddOnCatalogId))
ChkHr(spAppAddOn->GetSKUId(&licenseAddOnSkuId))
ChkHr(spAppAddOn->GetExpireTime(&ftAddOnExpirationTime))
ChkHr(IAPUtils::SetDateTime(ftAddOnExpirationTime, &addOnExpirationTime))
ChkHr(JsonHelpers::SetNamedDateTime(productAddOn, L"expiration", addOnExpirationTime))
ChkHr(JsonHelpers::SetNamedBool(productAddOn, L"isActive", true))
ChkHr(JsonHelpers::CreateJsonObject(&package))
Windows::Services::Store::Internal::StoreContextServer::_MakeDefaultLicenseResponse
ChkHr(JsonHelpers::CreateJsonArray(&addOns))
ChkHr(JsonHelpers::SetNamedArray(package, L"productAddOns", addOns))
ChkHr(JsonHelpers::SetNamedString(package, L"productId", _productStoreId.Get()))
ChkHr(JsonHelpers::SetNamedString(package, L"skuId", _skuId.Get()))
spLicenseManager->RefreshLicenses(RefreshPolicy_NetworkStatusOnline)
Windows::Services::Store::Internal::StoreContextServer::_ForceRefreshLicensesProc
ChkHr(IAPUtils::ParseStoreId(data->storeIdToRefresh.Get(), productId.GetAddressOf(), nullptr, nullptr))
ChkHr(data->pThis->GetContentIdKeyIdsForProductIds(spIds.Get(), cv.Get(), &response))
ChkHr(items->GetAt(index, item.GetAddressOf()))
ChkHr(contentIds->get_Size(&contentIdSize))
ChkHr(contentIds->GetAt(contentIdIndex, contentId.GetAddressOf()))
ChkHr(spLicenseManager->EnsureLicenseForApplicationDeployment(contentId.GetRawBuffer(nullptr), nullptr , nullptr ))
ChkHr(pCallerData->QueryInterface(__uuidof(**(&spCallerDataPrivate)), IID_PPV_ARGS_Helper(&spCallerDataPrivate)))
Windows::Services::Store::Internal::StoreContextServer::_RetrieveHWNDFromCallerData
ChkHr(spCallerDataPrivate->GetAppWindowHandle(&appWindowHandle))
ChkHr(HRESULT_FROM_WIN32(1400L))
WaitForCompletion
onecore\internal\shell\inc\asyncoperationhelper.h
(((HRESULT)(hr)) < 0)
jsonValue->GetNumber(&result)
Windows::Services::Store::JsonParser::ParseInteger
Windows.Foundation.IAsyncOperationWithProgress`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreProduct>
jsonValue->GetBoolean(&value)
Windows::Services::Store::JsonParser::ParseBoolean
=AWindows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct HSTRING__ *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct HSTRING__ *>,0>::DoWorkStub
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreQueueItem>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Package>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Package>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StorePackageUpdate>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>
Windows::Services::Store::AsyncOperationWithProgressBase<struct Windows::Foundation::IAsyncOperationWithProgress<class Windows::Services::Store::StorePackageUpdateResult *,struct Windows::Services::Store::StorePackageUpdateStatus>,struct Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<class Windows::Services::Store::StorePackageUpdateResult *,struct Windows::Services::Store::StorePackageUpdateStatus>,struct Windows::Foundation::IAsyncOperationProgressHandler<class Windows::Services::Store::StorePackageUpdateResult *,struct Windows::Services::Store::StorePackageUpdateStatus>,0>::DoWorkStub
onecoreuap\enduser\winstore\licensing\winrt\lib\AsyncBaseWithProgress.h
Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.Internal.StoreContentIdKeyIdItem>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.Internal.StoreContentIdKeyIdItem>
Vector<T*>::Make(vector.GetAddressOf())
jsonArray->GetObjectAt(i, jsonElement.GetAddressOf())
_productId.CopyTo(value)
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::get_ProductId
_contentIds->GetView(value)
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::get_ContentIds
_keyIds->GetView(value)
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::get_KeyIds
jsonValue->GetString(string.GetAddressOf())
Windows::Services::Store::JsonParser::ParseString
ContentIds
KeyIds
Vector<HSTRING>::Make(vector.GetAddressOf())
JsonHelpers::GetArraySizeFromJsonArray(jsonArray, &count)
E_NOT_SET
jsonArray->GetStringAt(i, text.GetAddressOf())
vector->Append(text.Get())
Windows::Services::Store::JsonParser::ParseArrayToVectorOfHSTRING
ChkHr(JsonParser::ParseJSONToObject( json, this, itemTable))
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\StoreContentIdKeyIdItem.h
MakeAndInitialize<T>(&image, DEBUG_PARSER_PARAMETERS_ARGS jsonElement)
vector->Append(image.Get())
Windows::Services::Store::JsonParser::ParseArrayToVector
ChkHr(JsonParser::ParseJSONStringToObject( jsonString, this, itemsTable))
Windows::Services::Store::Internal::StoreContentIdKeyIdResponse::RuntimeClassInitialize
Items
MYF{m
0Yh"C
Oc7Wa
V:)NM
Json document is missing a required field.
ChkHr(ParseJSONToObject( jsonObject, pObj, entry.pChildren))
ChkHr(jsonValue->GetObjectW(jsonObject.GetAddressOf()))
ChkHr(hrEntry)
Failed to parse property '%s'
ChkHr(jsonValue->get_ValueType(&type))
ChkHr(currentPair->get_Key(keyName.GetAddressOf()))
Windows::Services::Store::JsonParser::ParseJSONToObject
ChkHr(json.As(&jsonObjectIterable))
ChkHr(ParseJSONToObject( jsonObject, pObj, table))
ChkHr(jsonObjectStatics->Parse(jsonString, &jsonObject))
onecoreuap\enduser\winstore\licensing\winrt\lib\ParserJSON.h
Windows::Services::Store::JsonParser::ParseJSONStringToObject
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), &jsonObjectStatics))
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreQueueItem>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Package>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StorePackageUpdate>
onecoreuap\enduser\winstore\licensing\winrt\lib\AsyncBase.h
hModule != nullptr
ChkHr(_pOptionalPfnToCallbackMap->Remove(optionalPackageFullName))
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::RemoveOptionalPackageToWatch
ChkHr(_pOptionalPfnToCallbackMap->HasKey(optionalPackageFullName, &foundOptionalPackage))
ChkHr(_pOptionalPfnToCallbackMap->Insert(optionalPackageFullName, storePackageLicenseCallback, &replaced))
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::AddOptionalPackageToWatch
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.Internal.StoreContentIdKeyIdItem>
_items->GetView(value)
Windows::Services::Store::Internal::StoreContentIdKeyIdResponse::get_Items
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\StoreContentIdKeyIdResponse.h
%08lX-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X
Windows.Foundation.Collections.IVectorView`1<String>
Windows.Foundation.Collections.IVector`1<String>
Windows.Foundation.Collections.IIterator`1<String>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>
&_*q<|
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>
ChkHr((AgileHashMap<HSTRING, IStorePackageLicenseLostCallback*>::Make(&_pOptionalPfnToCallbackMap)))
ChkHr(((HRESULT) ((RtlQueryWnfStateData( &initialChangeStamp, WNF_LM_OPTIONAL_PACKAGE_SUSPEND_REQUIRED, OnEventCallback, nullptr , nullptr )) | 0x10000000)))
ChkHr(pThis->_pOptionalPfnToCallbackMap->Lookup(HStringReference(pData->OptionalPackageFullName).Get(), callback.GetAddressOf()))
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::OnEventCallback
ChkHr(((HRESULT) ((RtlSubscribeWnfStateChangeNotification( &_subscription, WNF_LM_OPTIONAL_PACKAGE_SUSPEND_REQUIRED, initialChangeStamp, OnEventCallback, reinterpret_cast<PVOID>(this), nullptr , 0 , 0x00000004UL)) | 0x10000000)))
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::Initialize
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\StorePackageLicenseWnfWatcher.h
"z}!M
ProductId
ChkHr(jsonObjectIterator->MoveNext(&hasCurrent))
ChkHr(currentPair->get_Value(jsonValue.GetAddressOf()))
ChkHr(jsonObjectIterator->get_Current(&currentPair))
ChkHr(jsonObjectIterator->get_HasCurrent(&hasCurrent))
ChkHr(jsonObjectIterable->First(&jsonObjectIterator))
Windows.Xbox.ApplicationModel.State.Internal.StateHelperCache
Windows.Xbox.System.Internal.Deployment.AvailablePackageProvider
Windows.Foundation.AsyncOperationCompletedHandler`1<String>
Windows.Foundation.IAsyncOperation`1<String>
Windows.Internal.StateRepository.Package
Windows.Internal.StateRepository.User
 ChkAlloc(m_spStoreCommerceFactory)
Windows::ApplicationModel::Store::CurrentAppFactory::Initialize
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\currentappserver.cpp
ClientProcessUtils::GetCallingAppPackageFullName(m_PFN.GetAddressOf())
get_LicenseInformation() invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::get_LicenseInformation
ChkArg(ppAppLicense)
ChkHr(Initialize())
ChkHr(GetStoreCommerce(&spStoreCommerce))
ChkHr(spStoreCommerce->GetLicenseInformation(ppAppLicense))
CurrentApp.LicenseInformation
get_AppId() invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::get_AppId
ChkArg(pAppId)
ChkHr(spStoreCommerce->GetAppId(&m_appID))
CurrentApp.AppId
get_LinkUri() invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::get_LinkUri
ChkArg(ppLinkUri)
ChkHr(spStoreCommerce->GetLinkUri(hstrLinkUri.GetAddressOf()))
ChkHr(IAPUtils::CreateUri(hstrLinkUri.Get(), ppLinkUri))
CurrentApp.LinkUri
RequestAppPurchaseAsync(%s) invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::RequestAppPurchaseAsync
includeReceipt
CurrentApp.RequestAppPurchaseAsync
ChkArg(ppRequestAppPurchaseOperation)
ChkHr(MakeAndInitialize<MessageDialogHelper>(&spMessageDialogHelper, nullptr, hwnd))
ChkHr(spStoreCommerce->RequestAppPurchaseAsync( includeReceipt, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestAppPurchaseOperation))
RequestProductPurchaseAsync(%s, %s) invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::RequestProductPurchaseAsync
productId
CurrentApp.RequestProductPurchaseAsync
ChkArg(ppRequestProductPurchaseOperation)
ChkHr(spStoreCommerce->RequestProductPurchaseAsync(productId, includeReceipt, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestProductPurchaseOperation))
RequestProductPurchaseWithResultsAsync(%s) invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::RequestProductPurchaseWithResultsAsync
CurrentApp.RequestProductPurchaseWithResultsAsync
ChkArg(ppRequestProductPurchaseWithResultsOperation)
ChkHr(GetStoreCommerce(&spStoreCommerceWithConsumables))
ChkHr(spStoreCommerceWithConsumables->RequestProductPurchaseWithResultsAsync( productId, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestProductPurchaseWithResultsOperation))
RequestProductPurchaseWithDisplayPropertiesAsync(%s, %s) invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::RequestProductPurchaseWithDisplayPropertiesAsync
devOfferId
CurrentApp.RequestProductPurchaseWithDisplayPropertiesAsync
ChkHr(spStoreCommerceWithConsumables->RequestProductPurchaseWithDisplayPropertiesAsync( productId, devOfferId, displayProperties, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestProductPurchaseOperation))
LoadListingInformationAsync() invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::LoadListingInformationAsync
CurrentApp.LoadListingInformationAsync
ChkArg(ppLoadListingOperation)
ChkHr(spStoreCommerce->LoadListingInformationAsync(nullptr, nullptr, cv.GetHStringReference().Get(), ppLoadListingOperation))
GetAppReceiptAsync() invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::GetAppReceiptAsync
CurrentApp.GetAppReceiptAsync
ChkArg(getAppReceiptOperation)
ChkHr(spStoreCommerce->GetAppReceiptAsync(cv.GetHStringReference().Get(), getAppReceiptOperation))
GetUnfulfilledConsumablesAsync() invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::GetUnfulfilledConsumablesAsync
CurrentApp.GetUnfulfilledConsumablesAsync
ChkArg(ppGetUnfulfilledConsumablesOperation)
ChkHr(spStoreCommerceWithConsumables->GetUnfulfilledConsumablesAsync( cv.GetHStringReference().Get(), ppGetUnfulfilledConsumablesOperation))
ReportConsumableFulfillmentAsync(%s, %s) invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::ReportConsumableFulfillmentAsync
transactionId
CurrentApp.ReportConsumableFulfillmentAsync
ChkArg(ppReportConsumableFulfillmentOperation)
ChkHr(spStoreCommerceWithConsumables->ReportConsumableFulfillmentAsync( productId, transactionId, cv.GetHStringReference().Get(), ppReportConsumableFulfillmentOperation))
GetProductReceiptAsync(%s) invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::GetProductReceiptAsync
CurrentApp.GetProductReceiptAsync
ChkArg(getProductReceiptOperation)
ChkHr(spStoreCommerce->GetProductReceiptAsync(productId, cv.GetHStringReference().Get(), getProductReceiptOperation))
LoadListingInformationByProductIdsAsync() invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::LoadListingInformationByProductIdsAsync
keywords
productIds
ChkArg(productIds)
ChkHr(spStoreCommerce->LoadListingInformationAsync( productIds, nullptr, cv.GetHStringReference().Get(), ppLoadListingOperation))
LoadListingInformationByKeywordsAsync() invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::LoadListingInformationByKeywordsAsync
ChkArg(keywords)
ChkHr(spStoreCommerce->LoadListingInformationAsync( nullptr, keywords, cv.GetHStringReference().Get(), ppLoadListingOperation))
ReportProductFulfillment(%s) invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::ReportProductFulfillment
CurrentApp.ReportProductFulfillment
ChkHr(spStoreCommerceWithConsumables->ReportConsumableFulfillmentSync(productId, cv.GetHStringReference().Get()))
GetAppPurchaseCampaignIdAsync invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::GetAppPurchaseCampaignIdAsync
CurrentApp.GetAppPurchaseCampaignIdAsync
ChkArg(ppOperation)
ChkHr(spStoreCommerce->GetAppPurchaseCampaignIdAsync(cv.GetHStringReference().Get(), ppOperation))
GetCustomerPurchaseIdAsync() invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::GetCustomerPurchaseIdAsync
publisherUserId
serviceTicket
CurrentApp.GetCustomerPurchaseIdAsync
ChkArg(ppGetPurchaseIdOperation)
ChkHr(spStoreCommerce->GetCustomerPurchaseIdAsync( cv.GetHStringReference().Get(), serviceTicket, publisherUserId, ppGetPurchaseIdOperation))
GetCustomerCollectionsIdAsync() invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::GetCustomerCollectionsIdAsync
CurrentApp.GetCustomerCollectionsIdAsync
ChkArg(ppGetCollectionsIdOperation)
ChkHr(spStoreCommerce->GetCustomerCollectionsIdAsync( cv.GetHStringReference().Get(), serviceTicket, publisherUserId, ppGetCollectionsIdOperation))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_UI_Core_CoreWindow).Get(), &spCoreWindowStatic))
Windows::ApplicationModel::Store::CurrentAppFactory::GetAppWindowHandle
ChkHr(spCoreWindowStatic->GetForCurrentThread(&spCoreWindow))
ChkHr(spCoreWindow.As(&spCoreWinInterop))
ChkHr(spCoreWinInterop->get_WindowHandle(&hwnd))
ChkHr(m_spStoreCommerceFactory->CreateStoreCommerceServer(&spStoreCommerce))
Windows::ApplicationModel::Store::CurrentAppFactory::GetStoreCommerce
ChkHr(spStoreCommerce->Initialize(cv.GetHStringReference().Get()))
ChkHr(m_spStoreCommerce.As(spRef))
ChkHr(temp.Set(InternalGetRuntimeClassName()))
Windows::ApplicationModel::Store::CurrentAppFactory::GetRuntimeClassName
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\CurrentAppServer.h
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::Initialize
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewserver.cpp
RequestProductPurchaseByProductIdAndSkuIdAsync(%s, %s) invoked.
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::RequestProductPurchaseByProductIdAndSkuIdAsync
skuId
StorePreview.RequestProductPurchaseByProductIdAndSkuIdAsync
ChkArg(ppRequestPurchaseBySkuIdOperation)
ChkHr(MakeAndInitialize<MessageDialogHelper>(&spMessageDialogHelper, nullptr , hwnd))
ChkHr(spStoreCommerce->RequestProductPurchaseByProductIdAndSkuIdAsync( productId, skuId, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestPurchaseBySkuIdOperation))
LoadAddOnProductInfosAsync() invoked.
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::LoadAddOnProductInfosAsync
StorePreview.LoadAddOnProductInfosAsync
ChkArg(ppLoadAddOnProductInfosOperation)
ChkHr(spStoreCommerce->LoadAddOnProductInfosAsync(cv.GetHStringReference().Get(), ppLoadAddOnProductInfosOperation))
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::GetStoreCommerce
onecore\internal\onecore\priv_sdk\inc\ConstrainedImpersonationUtil.h
!m_userObject || IsUMgrGetConstrainedUserTokenPresent()
ConstrainedImpersonateLoggedOnUser::GenerateImpersonationToken
storeAppInstallation
ClientProcessUtils::GetCallingAppPackageFullName(_PFN.GetAddressOf())
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::StoreConfigurationServer
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storeconfigurationserver.cpp
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetSystemConfiguration
ChkHr(SetSystemConfigurationInternal(catalogHardwareManufacturerId, catalogStoreContentModifierId, systemConfigurationExpiration, catalogHardwareDescriptor))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetMobileOperatorConfiguration
ChkHr(SetMobileOperatorConfigurationInternal(mobileOperatorId, appDownloadLimitInMegabytes, updateDownloadLimitInMegabytes))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetStoreWebAccountId
ChkHr(ClientProcessUtils::GetCallingAppPackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(SetStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), webAccountId))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsStoreWebAccountId
ChkHr(IsStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), webAccountId, *value))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::get_HardwareManufacturerInfo
ChkHr(GetHardwareManufacturerInfoInternal(value))
ChkHr(FilterUnsupportedFeaturesInternal(spPotentialSystemFeatures.Get(), resultsView))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync::<lambda_9311a7b729964ab4ab27616362cd54ed>::operator ()
ChkHr(results.Set(resultsView.Get()))
StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync
ChkHr(MakeAsyncOperation<CMarshaledInterfaceResult<IVectorView<StoreSystemFeature>>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), operation, TrustLevel::PartialTrust, [spThisKeepAlive, spPotentialSystemFeatures, cv](CMarshaledInterfaceResult<IVectorView<StoreSystemFeature>> & results) mutable -> HRESULT { HRESULT __hr = ((HRESULT)0L);; ComPtr<IVectorView<StoreSystemFeature>> resultsView; { { __hr = (FilterUnsupportedFeaturesInternal(spPotentialSystemFeatures.Get(), resultsView)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 230, __FSTREXP __FUNCTION__  , "ChkHr(FilterUnsupportedFeaturesInternal(spPotentialSystemFeatures.Get(), resultsView))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (results.Set(resultsView.Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 230, __FSTREXP __FUNCTION__  , "ChkHr(results.Set(resultsView.Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit:; Telemetry::EndOperation("StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync", (static_cast<HRESULT>(__hr)), cv.GetAnsi(), spThisKeepAlive->_PFN.Get()); CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::get_PurchasePromptingPolicy
ChkHr(StoreConfigurationServer::GetPurchasePromptingPolicyInternal(nullptr , value))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::put_PurchasePromptingPolicy
ChkHr(StoreConfigurationServer::PutPurchasePromptingPolicyInternal(nullptr , value))
ChkArg(value)
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::HasStoreWebAccount
ChkHr(StoreConfigurationServer::HasStoreWebAccountInternal(nullptr , *value))
ChkArg(user)
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::HasStoreWebAccountForUser
ChkHr(StoreConfigurationServer::HasStoreWebAccountInternal(user, *value))
ChkHr(WSCollector::CollectStoreLog(options, resultsView))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreLogDataAsync::<lambda_067cf6a520b1a8707ec348e80e22e6be>::operator ()
StoreConfigurationServer::GetStoreLogDataAsync
options
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreLogDataAsync
ChkHr(MakeAsyncOperation<CMarshaledInterfaceResult<Windows::Storage::Streams::IRandomAccessStreamReference>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), operation, TrustLevel::PartialTrust, [spThisKeepAlive, options, cv](CMarshaledInterfaceResult<Windows::Storage::Streams::IRandomAccessStreamReference>& results) mutable -> HRESULT { HRESULT __hr = ((HRESULT)0L);; ComPtr<Windows::Storage::Streams::IRandomAccessStreamReference> resultsView; { { __hr = (WSCollector::CollectStoreLog(options, resultsView)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 339, __FSTREXP __FUNCTION__  , "ChkHr(WSCollector::CollectStoreLog(options, resultsView))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (results.Set(resultsView.Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 339, __FSTREXP __FUNCTION__  , "ChkHr(results.Set(resultsView.Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit:; Telemetry::EndOperation("StoreConfigurationServer::GetStoreLogDataAsync", (static_cast<HRESULT>(__hr)), cv.GetAnsi(), spThisKeepAlive->_PFN.Get()); CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetStoreWebAccountIdForUser
ChkHr(SetStoreWebAccountIdInternal(user, packageFamilyName.Get(), webAccountId))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsStoreWebAccountIdForUser
ChkHr(IsStoreWebAccountIdInternal(user, packageFamilyName.Get(), webAccountId, *value))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetPurchasePromptingPolicyForUser
ChkHr(StoreConfigurationServer::GetPurchasePromptingPolicyInternal(user, value))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetPurchasePromptingPolicyForUser
ChkHr(StoreConfigurationServer::PutPurchasePromptingPolicyInternal(user, value))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreWebAccountId
ChkHr(GetStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), pValue))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreWebAccountIdForUser
ChkHr(GetStoreWebAccountIdInternal(user, packageFamilyName.Get(), pValue))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetEnterpriseStoreWebAccountId
ChkHr(SetEnterpriseStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), webAccountId))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetEnterpriseStoreWebAccountIdForUser
ChkHr(SetEnterpriseStoreWebAccountIdInternal(user, packageFamilyName.Get(), webAccountId))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetEnterpriseStoreWebAccountId
ChkHr(GetEnterpriseStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), pValue))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetEnterpriseStoreWebAccountIdForUser
ChkHr(GetEnterpriseStoreWebAccountIdInternal(user, packageFamilyName.Get(), pValue))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::ShouldRestrictToEnterpriseStoreOnly
ChkHr(ShouldRestrictToEnterpriseStoreOnlyInternal(nullptr , value))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::ShouldRestrictToEnterpriseStoreOnlyForUser
ChkHr(ShouldRestrictToEnterpriseStoreOnlyInternal(user, value))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsPinToDesktopSupported
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsPinToTaskbarSupported
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsPinToStartSupported
ChkHr(CoCreateInstance(__uuidof(InstallServiceUserBroker), nullptr, CLSCTX_INPROC_SERVER, __uuidof(**(&pinToHelper)), IID_PPV_ARGS_Helper(&pinToHelper)))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::PinToDesktop
ChkHr(pinToHelper->PinToShell(WindowsGetStringRawBuffer(appPackageFamilyName, nullptr), 0x02000000u))
ChkHr(impersonator.Impersonate())
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::PinToDesktopForUser
OEMID
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"OEMID", WindowsGetStringRawBuffer(catalogHardwareManufacturerId, nullptr)))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetSystemConfigurationInternal
SCMID
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"SCMID", WindowsGetStringRawBuffer(catalogStoreContentModifierId, nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"Hardware", WindowsGetStringRawBuffer(catalogHardwareDescriptor, nullptr)))
OEMDiscoveryTTL
ChkHr(RegistryHelper::SetQwordValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"OEMDiscoveryTTL", systemConfigurationExpiration.UniversalTime))
AppDownloadLimit
UpdateDownloadLimit
ChkHr(RegistryHelper::SetQwordValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"AppDownloadLimit", actualAppDownloadLimit))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetMobileOperatorConfigurationInternal
ChkHr(RegistryHelper::SetQwordValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"UpdateDownloadLimit", actualUpdateDownloadLimit))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"MOID", WindowsGetStringRawBuffer(mobileOperatorId, nullptr)))
ChkHr(ConvertWebAccountIdFromAppToRealIdForUser(user, AccountProviderType::MSA, callingAppPfn, webAccountId, realId.GetAddressOf()))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetStoreWebAccountIdInternal
PrimaryWebAccountId
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000001) ), RegistryHelper::STORE_REGISTRY_PATH, L"PrimaryWebAccountId", realId.GetRawBuffer(nullptr)))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreWebAccountIdInternal
ChkHr(ConvertWebAccountIdFromRealIdToAppForUser(user, AccountProviderType::MSA, callingAppPfn, realId.Get(), pWebAccountId))
ChkHr(ConvertWebAccountIdFromAppToRealIdForUser(user, AccountProviderType::AAD, callingAppPfn, webAccountId, realId.GetAddressOf()))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetEnterpriseStoreWebAccountIdInternal
StoreAADAccountId
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000001) ), RegistryHelper::STORE_CURRENTIDENTITY_REGISTRY_PATH, L"StoreAADAccountId", realId.GetRawBuffer(nullptr)))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetEnterpriseStoreWebAccountIdInternal
ChkHr(ConvertWebAccountIdFromRealIdToAppForUser(user, AccountProviderType::AAD, callingAppPfn, realId.Get(), pWebAccountId))
RequirePrivateStoreOnly
ApplicationManagement
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsStoreWebAccountIdInternal
ChkBool(provider == AccountProviderType::MSA, ((HRESULT)0x8000FFFFL))
ChkAlloc(spManufacturerInfo)
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetHardwareManufacturerInfoInternal
ChkHr(spManufacturerInfo->put_HardwareManufacturerId(buffer.Get()))
StoreContentModifier
ChkHr(spManufacturerInfo->put_StoreContentModifierId(buffer.Get()))
SystemManufacturer
ChkHr(spManufacturerInfo->put_ManufacturerName(buffer.Get()))
SystemProductName
ChkHr(spManufacturerInfo->put_ModelName(buffer.Get()))
ChkHr(BuildKnownFeatureAndGuidArrays(systemFeatures, guidArray, knownFeaturesArray))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::FilterUnsupportedFeaturesInternal
ChkHr(AskWuWhichHardwareIsAvailable(guidArray, availableArray))
ChkHr(Vector<StoreSystemFeature>::Make(&supportedFeaturesVector))
ChkHr(supportedFeaturesVector->GetView(&resultsView))
ChkHr(value->get_Value(&dwValue))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::PutPurchasePromptingPolicyInternal
ChkHr(CoCreateInstance(CLSID_HardwareCapability, nullptr, (CLSCTX_INPROC_SERVER|CLSCTX_LOCAL_SERVER|CLSCTX_REMOTE_SERVER), __uuidof(**(&spHardwareCapability)), IID_PPV_ARGS_Helper(&spHardwareCapability)))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::AskWuWhichHardwareIsAvailable
ChkHr(spHardwareCapability->EvaluateHardwareCapabilities( GUID_WinStoreServiceID, arraySize, rawGuidArray, &wuResults, &hrOnlineCheck))
ChkBool(wuResults != nullptr, ((HRESULT)0x80004003L))
ChkHr(systemFeatures->First(&spIterator))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::BuildKnownFeatureAndGuidArrays
ChkHr(spIterator->get_HasCurrent(&hasCurrent))
ChkHr(spIterator->get_Current(&feature))
ChkHr(spIterator->MoveNext(&hasCurrent))
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Storage.Streams.IRandomAccessStreamReference>
Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStreamReference>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>
Windows.Foundation.IReference`1<UInt32>
4es`O
Hardware
ChkHr(AgileVector<HSTRING>::Make(&_actionFilters))
Windows::Services::Store::StoreProductOptions::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\storeproductoptions.cpp
ChkHr(ClientProcessUtils::IsCallerERA(&isERA))
VerifyCapability
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storecommerceserver.cpp
ChkHr(IAPUtils::IsCallingProcessAppContainer(&isAppContainer))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::Initialize
ChkHr(ClientProcessUtils::GetAppContentTypeForInstalledPackage(_packageFullName.Get(), &_appType))
ChkHr(LicenseInformationServer::CreateInstance( _packageFullName.Get(), _appType, cv.Get(), &_spLicenseInformationInternal))
ChkHr(InitializeIdsFromLicense())
ChkHr(MakeAndInitialize<ProductIdCache>(&_spProductIdCache))
packageFullName = %s, appType = %d, appId = %s, appCatalogId = %s
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestAppPurchaseAsync
ChkHr(ClientProcessUtils::GetCallingAppWindowHandle(&hwndOwner))
ChkHr(MakeAndInitialize<RequestAppPurchaseOperationServer>( &spRequestAppPurchaseInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestAppPurchaseId), fIncludeReceipt, hwndOwner, pMessageDialogHelper ))
ChkHr(spRequestAppPurchaseInfo.As(&spAsyncInfo))
(((HRESULT)(spAsyncInfo->get_Status(&status))) >= 0)
(((HRESULT)(spAsyncInfo->get_ErrorCode((&(__hr))))) >= 0)
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseAsync
ChkHr(MakeAndInitialize<RequestProductPurchaseOperationServer>( &spRequestProductPurchaseInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, fIncludeReceipt, hwndOwner, pMessageDialogHelper ))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseWithResultsAsync
ChkHr(MakeAndInitialize<RequestProductPurchaseWithResultsOperationServer>( &spRequestProductPurchaseWithResultsInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, hwndOwner, pMessageDialogHelper ))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseWithDisplayPropertiesAsync
ChkAlloc(spRequestProductPurchaseWithDisplayPropertiesInfo)
ChkHr(spRequestProductPurchaseWithDisplayPropertiesInfo->RuntimeClassInitialize( _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, hwndOwner, devOfferId, pDisplayProperties, pMessageDialogHelper ))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::LoadListingInformationAsync
ChkHr(__winrt_hr__)
keywords
ChkHr(hrCommerceOp)
ChkArg(ppAppReceiptOperation)
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppReceiptAsync
ChkHr(MakeAndInitialize<ReceiptRetrievalOperationServer>( &spLoadAsyncInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_receiptRequestId) ))
ChkArg(ppProductReceiptOperation)
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetProductReceiptAsync
ChkHr(MakeAndInitialize<ProductReceiptRetrievalOperationServer>( &spLoadAsyncInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_receiptRequestId), productId ))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetLinkUri
ChkArg(appId)
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppId
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetLicenseInformation
ChkHr(_spLicenseInformationInternal.CopyTo(__uuidof(**(value)), IID_PPV_ARGS_Helper(value)))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetUnfulfilledConsumablesAsync
ChkHr(MakeAndInitialize<GetUnfulfilledConsumablesOperationServer>( &spCheckConsumables, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_receiptRequestId)))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::ReportConsumableFulfillmentAsync
ChkHr(MakeAndInitialize<ReportConsumableFulfillmentOperationServer>( &spReportProdFulfillOp, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_fulfillRequestId), productId, transactionId ))
ChkHr(CollectionsServiceProxyV6::GetUnfulfilledConsumables(GetAppCatalogId(cv.Get()), cv.Get(), items))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::ReportConsumableFulfillmentSync
inAppOfferToken
ChkHr(JsonHelpers::GetNamedString(item, L"inAppOfferToken", itemInAppOfferToken.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"productId", itemProductId.GetAddressOf()))
transactionId
ChkHr(JsonHelpers::GetNamedString(item, L"transactionId", itemTransactionId.GetAddressOf()))
ChkHr(CollectionsServiceProxyV6::ConsumeConsumable(itemProductId.Get(), itemTransactionId.Get(), cv.Get()))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseByProductIdAndSkuIdAsync
ChkHr(MakeAndInitialize<RequestProductPurchaseBySkuIdOperationServer>( &spRequestPurchaseBySkuIdOperation, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, skuId, hasPreviewCapability, hwndOwner, pMessageDialogHelper ))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::LoadAddOnProductInfosAsync
ChkHr(MakeAsyncOperation<CMarshaledInterfaceResult<IVectorView<StorePreviewProductInfo*>>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), ppLoadAddOnProductInfosOperation, BaseTrust, [spThisKeepAlive, cv](CMarshaledInterfaceResult<IVectorView<StorePreviewProductInfo*>>& result) mutable { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); ComPtr<IVectorView<StorePreviewProductInfo*>> spProductInfos; HRESULT hrOperation = spThisKeepAlive->LoadAddOnProductInfos(cvExtend.Get(), &spProductInfos); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(spProductInfos.Get()); } Telemetry::EndOperation("StorePreview.LoadAddOnProductInfosAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get()); return hrOperation; }))
Going to catalog to find BigCatId: QueryCatalogForBigCatIdByPackageFullName
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppCatalogId
Going to catalog again to find BigCatId: QueryCatalogForBigCatIdByPackageFullNameAndType
ChkHr(CatalogServiceProxyV6::QueryCatalogForBigCatIdByPackageFullNameAndType( _packageFullName.Get(), _appType, pCV, _appCatalogId.GetAddressOf()))
Catalog failure looking for BigCatId.
ChkHr(_spLicenseInformationInternal->GetProductId(_appCatalogId.GetAddressOf()))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::InitializeIdsFromLicense
ChkArg(ppValue)
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::LoadAddOnProductInfos
ChkHr(StoreInfoBuilders::BuildStoreAppInfo( this, pCV, nullptr, &spStoreAppInfo))
ChkHr(AgileVector<StorePreviewProductInfo*>::Make(&spProductInfosList))
Add-On Product Infos (CV = %hs):
  <empty list>
ChkAlloc(spProductInfo)
ChkHr(spProductInfo->Initialize( spStoreAppInfo->Locale, spStoreAppInfo->Market, spStoreAppInfo, pInAppOffer))
ChkHr(spProductInfosList->Append(spProductInfo.Get()))
  %02u inAppOfferToken = %s, productId = %s, type = %u, price = %s, name = %s
  <missing list>
ChkHr(spProductInfosList->GetView(&spProductInfos))
ChkHr(CopyToNotNull(spProductInfos, ppValue))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppPurchaseCampaignIdAsync
ChkHr(MakeAsyncOperation<CHSTRINGResult>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), ppOperation, BaseTrust, [spThisKeepAlive, cv](CHSTRINGResult& result) mutable -> HRESULT { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); HString campaignId; HRESULT hrOperation = CollectionsServiceProxyV6::GetCampaignId( spThisKeepAlive->GetAppCatalogId(cvExtend.Get()), cvExtend.Get(), campaignId.GetAddressOf()); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(campaignId.Get()); } Telemetry::EndOperation("CurrentApp.GetAppPurchaseCampaignIdAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get()); return hrOperation; }))
ChkArg(getPurchaseIdOperation)
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetCustomerPurchaseIdAsync
ChkHr(::WindowsDuplicateString(publisherUserId, &publisherUserIdCopy))
ChkHr(::WindowsDuplicateString(serviceTicket, &serviceTicketCopy))
ChkHr(MakeAsyncOperation<CHSTRINGResult>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), getPurchaseIdOperation, BaseTrust, [spThisKeepAlive, serviceTicketCopy, publisherUserIdCopy, cv](CHSTRINGResult& result) mutable -> HRESULT { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); HString purchaseId; HRESULT hrOperation = CatalogServiceProxyV6::GetCustomerPurchaseId( serviceTicketCopy, publisherUserIdCopy, cvExtend.Get(), purchaseId.GetAddressOf()); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(purchaseId.Get()); } Telemetry::EndOperation("CurrentApp.GetCustomerPurchaseIdAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get(), "serviceTicket", serviceTicketCopy, "publisherUserId", publisherUserIdCopy); ::WindowsDeleteString(serviceTicketCopy); ::WindowsDeleteString(publisherUserIdCopy); return hrOperation; }))
ChkArg(getCollectionsIdOperation)
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetCustomerCollectionsIdAsync
ChkHr(MakeAsyncOperation<CHSTRINGResult>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), getCollectionsIdOperation, BaseTrust, [spThisKeepAlive, serviceTicketCopy, publisherUserIdCopy, cv](CHSTRINGResult& result) mutable -> HRESULT { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); HString collectionsId; HRESULT hrOperation = CatalogServiceProxyV6::GetCustomerCollectionsId( serviceTicketCopy, publisherUserIdCopy, cvExtend.Get(), collectionsId.GetAddressOf()); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(collectionsId.Get()); } Telemetry::EndOperation("CurrentApp.GetCustomerCollectionsIdAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get(), "serviceTicket", serviceTicketCopy, "publisherUserId", publisherUserIdCopy); ::WindowsDeleteString(serviceTicketCopy); ::WindowsDeleteString(publisherUserIdCopy); return hrOperation; }))
ChkBool((nullptr != productId), ((HRESULT)0x803F6103L))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetExclusiveLockForProduct
ChkHr(WindowsCompareStringOrdinal(productId, _currentProductBeingPurchased.Get(), &comparisonResult))
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>
Windows::Services::Store::StorePackageInstallOptions::get_AllowForcedAppRestart
onecoreuap\enduser\winstore\licensing\winrt\lib\storepackageinstalloptions.cpp
ChkHr(_hstrName.Set(hstrName))
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::Initialize
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productpurchasedisplaypropertiesserver.cpp
ChkHr(spDisplayData->Initialize(hstrName))
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesFactory::CreateProductPurchaseDisplayProperties
ChkHr(((HRESULT)0x8007000EL))
ChkHr(spDisplayData->Initialize(nullptr))
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesFactory::ActivateInstance
_fInitialized
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::get_Name
ChkHr(_hstrName.CopyTo(hstrValue))
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::get_Description
ChkHr(_hstrDescription.CopyTo(hstrValue))
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::get_Image
ChkHr(_uriRuntimeClass.CopyTo(ppValue))
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::put_Name
ChkHr(_hstrName.Set(hstrValue))
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::put_Description
ChkHr(_hstrDescription.Set(hstrValue))
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::put_Image
ChkHr(IAPUtils::CreateUri(hstrUri.Get(), &_uriRuntimeClass))
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>>
Windows.Foundation.Collections.IMapView`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>
Windows.Foundation.Collections.IMap`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
storeLicenseManagement
ChkHr(CoCreateInstance(__uuidof(ApplicationLicenseManager), nullptr, CLSCTX_LOCAL_SERVER, __uuidof(**(alm.GetAddressOf())), IID_PPV_ARGS_Helper(alm.GetAddressOf())))
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetALM
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\winrtapi.cpp
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_DataReader).Get(), &dataReaderFactory))
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::AddLicenseAsync::<lambda_e1db209f168b3657ea73613545218e9e>::operator ()
ChkHr(dataReaderFactory->FromBuffer(licenseBuffer.Get(), licenseReader.GetAddressOf()))
ChkHr(licenseReader->get_UnconsumedBufferLength(&licenseBufferLength))
ChkAlloc(licenseBuffer)
ChkHr(licenseReader->ReadBytes(licenseBufferLength, licenseBuffer))
ChkHr(GetALM(alm.GetAddressOf()))
ChkHr(alm->LoadLicenseWithBytes(AppType_UniversalApp, licenseBufferLength, licenseBuffer, L"", licenseInstance.GetAddressOf()))
ChkHr(VerifyCapability(StoreLicenseManagement.Get()))
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::AddLicenseAsync
ChkHr(MakeAsyncAction<AsyncCausalityOptions<AddLicenseAsyncActionName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), Action, TrustLevel::BaseTrust, [licenseBuffer](CNoResult &) -> HRESULT { HRESULT __hr = ((HRESULT)0L);; { ComPtr<IDataReaderStatics> dataReaderFactory; { { __hr = (Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_DataReader).Get(), &dataReaderFactory)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_DataReader).Get(), &dataReaderFactory))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<IDataReader> licenseReader; { { __hr = (dataReaderFactory->FromBuffer(licenseBuffer.Get(), licenseReader.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(dataReaderFactory->FromBuffer(licenseBuffer.Get(), licenseReader.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; UINT32 licenseBufferLength; { { __hr = (licenseReader->get_UnconsumedBufferLength(&licenseBufferLength)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(licenseReader->get_UnconsumedBufferLength(&licenseBufferLength))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; SP_CPP_ARRAY<BYTE> licenseBuffer; licenseBuffer = new BYTE[licenseBufferLength]; { if (!(licenseBuffer)) { Windows::Foundation::Diagnostics::OriginateError(((HRESULT)0x8007000EL), nullptr); } { if (!(licenseBuffer)) { { __hr = (((HRESULT)0x8007000EL)); }; ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkAlloc(licenseBuffer)", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; }; { { __hr = (licenseReader->ReadBytes(licenseBufferLength, licenseBuffer)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(licenseReader->ReadBytes(licenseBufferLength, licenseBuffer))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<IApplicationLicenseManager3> alm; { { __hr = (GetALM(alm.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(GetALM(alm.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<ILicenseInstance> licenseInstance; { { __hr = (alm->LoadLicenseWithBytes(AppType_UniversalApp, licenseBufferLength, licenseBuffer, L"", licenseInstance.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(alm->LoadLicenseWithBytes(AppType_UniversalApp, licenseBufferLength, licenseBuffer, L\"\", licenseInstance.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; } goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(spThis->GetSatisfactionInfos(contentIdsVectorView.Get(), keyIdsVectorView.Get(), licenseSatisfactionResult.GetAddressOf()))
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetSatisfactionInfosAsync::<lambda_9d3e6b609609b628bd3a08f8252fb043>::operator ()
ChkHr(result.Set(licenseSatisfactionResult.Get()))
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetSatisfactionInfosAsync
ChkArg(ContentIdentifiers)
ChkHr(ContentIdentifiers->First(&spContentIdsIter))
ChkHr(spContentIdsIter->get_HasCurrent(&cHasCurrent))
ChkBool(!!cHasCurrent, ((HRESULT)0x80070057L))
ChkHr(AgileVector<HSTRING>::Make(&contentIds))
ChkHr(spContentIdsIter->get_Current(contentId.GetAddressOf()))
ChkHr(contentIds->Append(contentId.Get()))
ChkHr(spContentIdsIter->MoveNext(&cHasCurrent))
ChkHr(AgileVector<HSTRING>::Make(&keyIds))
ChkHr(KeyIdentifiers->First(&spKeyIdsIter))
ChkHr(spKeyIdsIter->get_HasCurrent(&eHasCurrent))
ChkHr(spKeyIdsIter->get_Current(keyId.GetAddressOf()))
ChkHr(keyIds->Append(keyId.Get()))
ChkHr(spKeyIdsIter->MoveNext(&eHasCurrent))
ChkHr(((HRESULT)0x80070057L))
ChkHr(hrOp)
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::RefreshLicensesAsync::<lambda_39b8ab18eb768c77ef40d9104d3429ec>::operator ()
ChkHr(alm->RefreshLicenses(refreshPolicy))
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::RefreshLicensesAsync
ChkHr(MakeAsyncAction<AsyncCausalityOptions<RefreshLicensesAsyncActionName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), Action, TrustLevel::BaseTrust, [refreshPolicy](CNoResult &) -> HRESULT { HRESULT __hr = ((HRESULT)0L);; ComPtr<IApplicationLicenseManager3> alm; { { __hr = (GetALM(alm.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 206, __FSTREXP __FUNCTION__  , "ChkHr(GetALM(alm.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (alm->RefreshLicenses(refreshPolicy)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 206, __FSTREXP __FUNCTION__  , "ChkHr(alm->RefreshLicenses(refreshPolicy))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetSatisfactionInfos
ChkHr(hrMake)
ChkHr(keyIds->get_Size(&keySize))
ChkHr(contentIds->get_Size(&contentSize))
ChkHr(contentIds->GetAt(i, contentId.GetAddressOf()))
ChkHr(keyIds->GetAt(i, keyId.GetAddressOf()))
No Sku Id could be obtained from the preview license response.
No contentInfo could be obtained from the preview license response.
ChkHr(MakeAndInitialize<LicenseSatisfactionInfo>( &leinfo, license))
ChkHr(licenseSatisfactionInfoForAll->Insert(contentId.Get(), leinfo.Get(), &replaced))
ChkHr(licenseSatisfactionInfoForAll->Clear())
ChkHr(licenseSatisfactionInfoForAll->GetView(&licenseSatisfactionInfoReadOnlyForAll))
ChkHr(MakeAndInitialize<LicenseSatisfactionResult>( result, licenseSatisfactionInfoReadOnlyForAll, hrOperation, skuId ? HStringReference(skuId).Get() : nullptr))
Windows.Foundation.IAsyncAction
Windows.ApplicationModel.Store.LicenseManagement.RefreshLicensesAsync
Windows.ApplicationModel.Store.LicenseManagement.AddLicenseAsync
ChkHr(request->get_ClientId(clientId.GetAddressOf()))
className
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\tokenbrokercomponentuilauncher.cpp
Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper::RequestTokenWithUIElementHostingAsync
ChkHr(request->get_Scope(scope.GetAddressOf()))
0xABBACAB
ChkHr(JsonParser::ParseJSONStringToObject( scope, &requestParams, responseTable))
windowTitle
ChkHr(::ActivateInstance(StoreContextServerClassId.Get(), storeContextServer.GetAddressOf()))
ChkBool(hwnd != 0, HRESULT_FROM_WIN32(1168L))
ChkHr(storeContextServer->FocusOnWindow((UINT64)hwnd))
ChkHr(storeContextServer->Initialize(false, nullptr))
ChkHr(componentLauncher->RequestTokenWithUIElementHostingAsync(request, uiElement, asyncInfo))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Security_Authentication_Web_Core_WebAuthenticationCoreManager).Get(), &componentLauncher))
ChkHr(componentLauncher->RequestTokenWithUIElementHostingAndWebAccountAsync(request, account, uiElement, asyncInfo))
Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper::RequestTokenWithUIElementHostingAndWebAccountAsync
ParseJSONStringToObject(DEBUG_PARSER_PARAMETERS_ARGS jsonString.Get(), pObj, table)
This function must be called from a UI thread
Windows::Services::Store::StoreContextFactory::GetDefault
Windows::Services::Store::StoreContextFactory::GetDefault() invoked. (CV:%hs)
ChkArg(ppStoreContext)
onecoreuap\enduser\winstore\licensing\winrt\lib\storecontext.cpp
ChkHr(MakeAndInitialize<StoreContext>(ppStoreContext, cv.GetAnsi(), nullptr, packageFullName.Get()))
ChkHr(ClientProcessUtils::GetCallingAppPackageFullName(packageFullName.GetAddressOf()))
Windows::Services::Store::StoreContextFactory::GetForUser
Windows::Services::Store::StoreContextFactory::GetForUser() invoked. (CV:%hs)
ChkHr(MakeAndInitialize<StoreContext>(ppStoreContext, cv.GetAnsi(), pUser, packageFullName.Get()))
ChkArg(pUser)
Windows::Services::Store::StoreContext::CreateStoreContextServer
ChkHr(::ActivateInstance( StoreContextServerClassId.Get(), storeContextServer.GetAddressOf()))
ChkHr(storeContextServer->Initialize(pUser != nullptr, _spLicenseChangedCallback.Get()))
ChkHr(storeContextServer->SetUser(pUser))
Windows::Services::Store::StoreContext::RuntimeClassInitialize
ChkHr(_packageFullName.Set(PFN))
ChkHr(CreateStoreContextServer(pUser, _spStoreContextServer))
ChkHr(MakeAndInitialize<StoreContextLicenseChangedCallback>(&_spLicenseChangedCallback, this))
Windows::Services::Store::StoreContext::SendStoreRequestAsync
Windows::Services::Store::StoreContext::SendStoreRequestAsync(%u, %s) invoked. (CV:%hs)
ChkHr(JsonHelpers::ParseToJsonObject(WindowsGetStringRawBuffer(parametersAsJson, nullptr), &jsonObject))
Order
Xtoken
onlineIdTicket
UserId
ChkHr(JsonHelpers::Stringify(jsonObject, cleansedParameterAsJson.GetAddressOf()))
ChkHr(jsonObject->SetNamedValue(HStringReference(g_DoNotLogTheseValues[i]).Get(), nullptr))
ChkHr(MakeAndInitialize<StoreRequestOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), requestKind, parametersAsJson, _InterlockedIncrement(&_asyncIds)))
ChkHr(_spStoreContextServer->CaptureStoreContextCallerData(reinterpret_cast<UINT64>(hwnd), &callerData))
requestKind
parametersAsJson
Windows::Services::Store::StoreContext::get_User
Windows::Services::Store::StoreContext::get_User() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetCustomerPurchaseIdAsync(%s, %s) invoked. (CV:%hs)
ChkArg(publisherUserId)
Windows::Services::Store::StoreContext::GetCustomerPurchaseIdAsync
ChkHr(MakeAndInitialize<GetCustomerPurchaseIdOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), serviceTicket, publisherUserId, _InterlockedIncrement(&_asyncIds)))
ChkArg(serviceTicket)
Windows::Services::Store::StoreContext::GetCustomerCollectionsIdAsync
Windows::Services::Store::StoreContext::GetCustomerCollectionsIdAsync(%s, %s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAppLicenseAsync() invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetCustomerCollectionsIdOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), serviceTicket, publisherUserId, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetOfflineLicensesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::GetAppLicenseAsync
Windows::Services::Store::StoreContext::GetStoreProductForCurrentAppAsync
Windows::Services::Store::StoreContext::GetStoreProductForCurrentAppAsync() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetStoreProductsAsync([%s, %s]) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetStoreProductOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
storeIds
Windows::Services::Store::StoreContext::GetStoreProductsAsync
ChkArg(storeIds)
productKinds
ChkHr(hrFamilies)
ChkHr(IAPUtils::CheckProductKinds(productKinds))
ChkHr(MakeAndInitialize<BulkHydrateOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, storeIds, nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(hrJoin)
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsAsync
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsWithPagingAsync([%s], %u) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetAssociatedStoreProductsOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, _InterlockedIncrement(&_asyncIds)))
maxItemsToRetrieve
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsWithPagingAsync
ChkHr(MakeAndInitialize<GetAssociatedStoreProductsPagedOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, maxItemsToRetrieve, _InterlockedIncrement(&_asyncIds)))
ChkBool(maxItemsToRetrieve > 0, ((HRESULT)0x80070057L))
Windows::Services::Store::StoreContext::GetUserCollectionAsync
Windows::Services::Store::StoreContext::GetUserCollectionAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetUserCollectionWithPagingAsync([%s], %u) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetUserCollectionOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, _InterlockedIncrement(&_asyncIds)))
maxItemsToRetrievePerPage
Windows::Services::Store::StoreContext::GetUserCollectionWithPagingAsync
Windows::Services::Store::StoreContext::GetConsumableBalanceRemainingAsync(%s) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetUserCollectionPagedOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, maxItemsToRetrievePerPage, _InterlockedIncrement(&_asyncIds)))
productStoreId
Windows::Services::Store::StoreContext::GetConsumableBalanceRemainingAsync
ChkHr(MakeAndInitialize<GetConsumableBalanceRemainingOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productStoreId, _InterlockedIncrement(&_asyncIds)))
ChkArg(productStoreId)
Windows::Services::Store::StoreContext::AcquireStoreLicenseForOptionalPackageAsync
Windows::Services::Store::StoreContext::AcquireStoreLicenseForOptionalPackageAsync invoked. (CV:%hs)
ChkHr(MakeAndInitialize<AcquireStoreLicenseForOptionalPackageOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), pOptionalPackage, _InterlockedIncrement(&_asyncIds)))
ChkArg(pOptionalPackage)
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseForOptionalPackageAsync
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseForOptionalPackageAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseAsync(%s) invoked. (CV:%hs)
ChkHr(GetPackageFamilyNameFromPackage(pOptionalPackage, packageFamilyName))
Windows::Services::Store::StoreContext::add_OfflineLicensesChanged() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseAsync
ChkArg(pToken)
Windows::Services::Store::StoreContext::add_OfflineLicensesChanged
ChkHr(_offlineLicensesChangedEvent.Add(pHandler, pToken))
ChkArg(pHandler)
Windows::Services::Store::StoreContext::remove_OfflineLicensesChanged
Windows::Services::Store::StoreContext::remove_OfflineLicensesChanged(%llu) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::ReportConsumableFulfillmentAsync(%s, %u, %s) invoked. (CV:%hs)
ChkHr(_offlineLicensesChangedEvent.Remove(token))
trackingId
Windows::Services::Store::StoreContext::ReportConsumableFulfillmentAsync
ChkHr(MakeAndInitialize<ReportConsumableOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productStoreId, quantity, trackingId, _InterlockedIncrement(&_asyncIds)))
quantity
Windows::Services::Store::StoreContext::RequestPurchaseAsync
Windows::Services::Store::StoreContext::RequestPurchaseAsync(%s) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<RequestPurchaseOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), storeId, nullptr, nullptr, _InterlockedIncrement(&_asyncIds)))
storeId
Windows::Services::Store::StoreContext::RequestPurchaseWithPurchasePropertiesAsync
Windows::Services::Store::StoreContext::RequestPurchaseWithPurchasePropertiesAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetIsAnySkuInstalledAsync(%s) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<RequestPurchaseOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), storeId, storePurchaseProperties, nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetIsAnySkuInstalledOperation>( ppOperation, productStoreId, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::GetIsAnySkuInstalledAsync
Windows::Services::Store::StoreContext::GetAppAndOptionalStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::GetAppAndOptionalStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestDownloadStorePackageUpdatesAsync invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetAppAndSupplementalStorePackageUpdatesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkArg(pStorePackageUpdates)
Windows::Services::Store::StoreContext::RequestDownloadStorePackageUpdatesAsync
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, false, true, false, cv.GetAnsi(), dialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(CreateMessageDialogHelper(hwnd, dialogHelper))
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesAsync([%s]) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, true, true, false, cv.GetAnsi(), dialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync(cv, __FSTREXP __FUNCTION__  , pStoreIds, true , false , nullptr , ppOperation))
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesAsync
Windows::Services::Store::StoreContext::FindStoreProductForPackageAsync
Windows::Services::Store::StoreContext::FindStoreProductForPackageAsync(%s) invoked. (CV:%hs)
ChkArg(package)
ChkHr(hrKinds)
ChkHr(MakeAndInitialize<FindStoreProductForPackageOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, package, _InterlockedIncrement(&_asyncIds)))
ChkHr(hrPackage)
Windows::Services::Store::StoreContext::get_CanSilentlyDownloadStorePackageUpdates
Windows::Services::Store::StoreContext::get_CanSilentlyDownloadStorePackageUpdates() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::TrySilentDownloadStorePackageUpdatesAsync invoked. (CV:%hs)
ChkHr(storeContextServer->CanSilentlyDownloadStorePackageUpdates(cv.GetHStringReference().Get(), value))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, false, false, false, cv.GetAnsi(), nullptr, _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::TrySilentDownloadStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::TrySilentDownloadAndInstallStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::TrySilentDownloadAndInstallStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAssociatedStoreQueueItemsAsync invoked. (CV:%hs)
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, true, false, true, cv.GetAnsi(), nullptr, _InterlockedIncrement(&_asyncIds)))
ChkArg(operation)
Windows::Services::Store::StoreContext::GetAssociatedStoreQueueItemsAsync
Windows::Services::Store::StoreContext::GetStoreQueueItemsAsync([%s]) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetAssociatedStoreQueueItemsOperation>( operation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, nullptr, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetStoreQueueItemsOperation>( operation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), storeIds, _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::GetStoreQueueItemsAsync
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync([%s, %s]) invoked. (CV:%hs)
ChkHr(_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync(cv, __FSTREXP __FUNCTION__  , storeIds, true , false , storePackageInstallOptions, operation))
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync
Windows::Services::Store::StoreContext::GetStoreProductsWithOptionsAsync
Windows::Services::Store::StoreContext::GetStoreProductsWithOptionsAsync([%s, %s, %s]) invoked. (CV:%hs)
ChkBool(filterCount < 2, ((HRESULT)0x80070057L))
actionFilters
ChkHr(hrJoinActionFilters)
ChkHr(hrJoinStoreIds)
Windows::Services::Store::StoreContext::DownloadAndInstallStorePackagesAsync([%s]) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<BulkHydrateOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, storeIds, storeProductOptions, _InterlockedIncrement(&_asyncIds)))
ChkHr(_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync( cv, __FSTREXP __FUNCTION__  , storeIds, false, false, nullptr, operation))
Windows::Services::Store::StoreContext::DownloadAndInstallStorePackagesAsync
Windows::Services::Store::StoreContext::RequestUninstallStorePackageAsync invoked by %s for %s. (CV:%hs)
(invalid)
ChkHr(hrGetPackageFamilyName)
Windows::Services::Store::StoreContext::RequestUninstallStorePackageAsync
Windows::Services::Store::StoreContext::RequestRateAndReviewAppAsync invoked. (CV:%hs)
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , 0, packageFamilyName.Get(), true , operation))
ChkHr(MakeAndInitialize<RequestStoreRateAndReviewOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::RequestRateAndReviewAppAsync
Windows::Services::Store::StoreContext::SetInstallOrderForAssociatedStoreQueueItemsAsync
Windows::Services::Store::StoreContext::SetInstallOrderForAssociatedStoreQueueItemsAsync invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetAssociatedStoreQueueItemsOperation>( operation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, items, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkArg(items)
Windows::Services::Store::StoreContext::RequestUninstallStorePackageByStoreIdAsync
Windows::Services::Store::StoreContext::RequestUninstallStorePackageByStoreIdAsync invoked by %s for %s. (CV:%hs)
Windows::Services::Store::StoreContext::UninstallStorePackageAsync invoked by %s for %s. (CV:%hs)
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , storeId, 0, true , operation))
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , 0, packageFamilyName.Get(), false , operation))
Windows::Services::Store::StoreContext::UninstallStorePackageAsync
Windows::Services::Store::StoreContext::UninstallStorePackageByStoreIdAsync
Windows::Services::Store::StoreContext::UninstallStorePackageByStoreIdAsync invoked by %s for %s. (CV:%hs)
ChkArg(storeId || packageFamilyName)
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , storeId, 0, false , operation))
!(storeId && packageFamilyName)
Windows::Services::Store::StoreContext::UninstallStorePackageAsyncHelper
Windows::Services::Store::StoreContext::GetPackageFamilyNameFromPackage
ChkHr(MakeAndInitialize<UninstallStorePackageOperation>( operation, _packageFullName.Get(), function, storeId, packageFamilyName, shouldPrompt, dialogHelper.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_UI_Core_CoreWindow).Get(), coreWindowStatic.GetAddressOf()))
Windows::Services::Store::StoreContext::GetAppWindowHandle
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_ApplicationModel_Core_CoreApplication).Get(), coreApp.GetAddressOf()))
ChkHr(coreWindowStatic->GetForCurrentThread(coreWindow.GetAddressOf()))
ChkHr(coreAppView->get_CoreWindow(coreWindow.GetAddressOf()))
ChkHr(coreApp->get_MainView(coreAppView.GetAddressOf()))
ChkHr(coreWinInterop->get_WindowHandle(&hwnd))
ChkHr(coreWindow.As(&coreWinInterop))
Windows::Services::Store::StoreContext::AssociateWithStoreContext
ChkHr(items->get_Size(&count))
ChkHr(inspectable.As(&productPrivate))
ChkHr(items->GetAt(i, inspectable.GetAddressOf()))
Windows::Services::Store::StoreContext::_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync
ChkHr(productPrivate->SetStoreContext(this))
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreRateAndReviewResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreRateAndReviewResult *>,0>::DoWorkStub
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( operation, _packageFullName.Get(), pszOperationName, this, storeIds, storePackageInstallOptions, shouldPromptForConsent, totallySilent, cv.GetAnsi(), dialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StoreQueueItem *> *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StoreQueueItem *> *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StorePurchaseResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StorePurchaseResult *>,0>::DoWorkStub
Windows::Services::Store::StoreContext::GetStoreContextServer
_spStoreContextServer.As(&result)
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreUninstallStorePackageResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreSendRequestResult>
Windows.Foundation.IAsyncOperation`1<Boolean>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreConsumableResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreProductQueryResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreAcquireLicenseResult>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
Windows::Services::Store::StoreContextLicenseChangedCallback::RuntimeClassInitialize
ChkHr(AsWeak(pStoreContext, &_wrStoreContext))
FWindows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreUninstallStorePackageResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreUninstallStorePackageResult *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreUninstallStorePackageResult>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StorePackageUpdate *> *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StorePackageUpdate *> *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<bool>,struct Windows::Foundation::IAsyncOperationCompletedHandler<bool>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Boolean>
!*WPq
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreCanAcquireLicenseResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreCanAcquireLicenseResult *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreAcquireLicenseResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreAcquireLicenseResult *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAcquireLicenseResult>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreConsumableResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreConsumableResult *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreConsumableResult>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreProductQueryResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreProductQueryResult *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductQueryResult>
!Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreProductResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreProductResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreSendRequestResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreSendRequestResult *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreSendRequestResult>
I'aonecoreuap\enduser\winstore\licensing\winrt\lib\StoreContext.h
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreProductPagedQueryResult>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreProductPagedQueryResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreProductPagedQueryResult *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductPagedQueryResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StorePurchaseResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreRateAndReviewResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreRateAndReviewResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StorePurchaseResult>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreProductResult>
Windows::Services::Store::StoreRequestHelperFactory::SendRequestAsync
ChkArg(context)
onecoreuap\enduser\winstore\licensing\winrt\lib\storerequesthelper.cpp
ChkHr(spStoreContextPrivate->SendStoreRequestAsync( requestKind, parametersAsJson, ppOperation))
ChkHr(spStoreContext.As(&spStoreContextPrivate))
Windows::Services::Store::StorePurchaseProperties::RuntimeClassInitialize
_name.Set(name)
::WindowsDuplicateString(_name.Get(), pValue)
onecoreuap\enduser\winstore\licensing\winrt\lib\purchasedisplayproperties.cpp
_name.Set(value)
Windows::Services::Store::StorePurchaseProperties::get_Name
::WindowsDuplicateString(_extendedJsonData.Get(), pValue)
Windows::Services::Store::StorePurchaseProperties::put_Name
_extendedJsonData.Set(value)
Windows::Services::Store::StorePurchaseProperties::get_ExtendedJsonData
ChkArg(ppData)
Windows::Services::Store::StorePurchaseProperties::put_ExtendedJsonData
ChkHr(MakeAndInitialize<StorePurchaseProperties>(ppData, name))
Windows::Services::Store::StorePurchasePropertiesFactory::Create
ChkHr(MakeAndInitialize<StorePurchaseProperties>(ppData, nullptr))
Windows::Services::Store::StorePurchasePropertiesFactory::ActivateInstance
Windows.UI.Popups.MessageDialog
Windows.Internal.Shell.ModalExperience.ModalExperienceManager
Windows.Internal.Shell.ModalExperience.ModalExperienceOptions
length >= (count * 2)
onecoreuap\enduser\winstore\licensing\winrt\lib\stringhelpers.cpp
StringHelpers::TrimEnds
ChkHr(::WindowsSubstringWithSpecifiedLength( str, count, length - (count * 2), resultString))
ChkBool(length >= (count * 2), ((HRESULT)0x80070057L))
StringHelpers::SplitString
ChkHr(::WindowsStringHasEmbeddedNull(inputString, &hasEmbeddedNull))
ChkHr(AgileVector<HSTRING>::Make(&outputs))
ChkBool(!hasEmbeddedNull, ((HRESULT)0x80070057L))
ChkHr(WindowsSubstringWithSpecifiedLength(inputString, lastDelimeterIndex, delimeterIndex - lastDelimeterIndex, output.GetAddressOf()))
ChkHr(outputs->Append(inputString))
ChkHr(WindowsSubstring(inputString, lastDelimeterIndex, output.GetAddressOf()))
ChkHr(outputs->Append(output.Get()))
ChkHr(GetActivationFactory( CryptographicBufferRuntimeClassName.Get(), &cryptoFactory))
ChkHr(outputs->GetView(outputStrings))
ChkHr(cryptoFactory->DecodeFromBase64String( encodedString, &spHashBuffer))
StringHelpers::DecodeBase64
ChkHr(spHashBuffer.As(&spBufferAsBytes))
ChkHr(spHashBuffer->get_Length(&decodedBufferLength))
ChkHr(stringBuffer.Preallocate(decodedBufferLength + 1, &pszDecodedString))
ChkHr(spBufferAsBytes->Buffer(reinterpret_cast<BYTE**>(&pDecodedBuffer)))
ChkHr(TrimString(result.Get(), resultString))
ChkHr(stringBuffer.Promote(result.GetAddressOf()))
ChkHr(WindowsPromoteStringBuffer(buffer, string))
onecoreuap\enduser\winstore\licensing\winrt\lib\StringHelpers.h
HStringBufferWrapper::Promote
JsonHelpers::AppendObject
ChkHr(spValue.As(&spJsonValue))
ChkHr(spArray.As(&spJsonVector))
onecoreuap\enduser\winstore\licensing\winrt\lib\jsonhelpers.cpp
JsonHelpers::AppendString
ChkHr(spJsonVector->Append(spJsonValue.Get()))
ChkHr(spJsonValueStatics->CreateStringValue(HStringReference(pszValue).Get(), &spValue))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonValue).Get(), &spJsonValueStatics))
ChkHr(spJsonValueStatics->CreateStringValue(hValue, &spValue))
ChkHr(spJsonVector->Append(spValue.Get()))
ChkHr(pObject->SetNamedValue(HStringReference(pszName).Get(), spValue.Get()))
JsonHelpers::SetNamedString
JsonHelpers::SetNamedObject
ChkHr(pValue.As(&spJsonValue))
JsonHelpers::SetNamedArray
ChkHr(pObject->SetNamedValue(HStringReference(pszName).Get(), spJsonValue.Get()))
ChkHr(spJsonValueStatics->CreateBooleanValue(fValue, &spValue))
JsonHelpers::SetNamedBool
ChkHr(spJsonValueStatics->CreateNumberValue(fValue, &spValue))
JsonHelpers::SetNamedNumber
ChkHr(spJsonValueStatics->CreateNullValue(&spValue))
JsonHelpers::SetNamedNull
JsonHelpers::SetNamedDateTime
ChkHr(FileTimeToString(strTime, 200, UINT64_TO_FILETIME(value.UniversalTime)))
ChkHr(IAPUtils::TimeSpanToString(value, timeSpanString.GetAddressOf()))
ChkHr(spJsonValueStatics->CreateStringValue(HStringReference((const WCHAR*)strTime).Get(), &spValue))
ChkHr(spJsonValueStatics->CreateStringValue(timeSpanString.Get(), &spValue))
JsonHelpers::SetNamedTimeSpan
JsonHelpers::ParseToJsonObject
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), &spJsonStatics))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonArray).Get(), &spJsonArrayStatics))
ChkHr(spJsonStatics->Parse(HStringReference(pszJson).Get(), &spJsonObject))
ChkHr(spJsonArrayStatics->Parse(HStringReference(pszJson).Get(), &spJsonArray))
JsonHelpers::ParseToJsonArray
JsonHelpers::Stringify
ChkHr(spJsonObject.As(&spJsonValue))
ChkArg(spJsonArray)
ChkHr(spJsonValue->Stringify(hJsonString))
ChkHr(spJsonArray.As(&spJsonVector))
JsonHelpers::GetArraySizeFromJsonArray
JsonHelpers::GetNamedDateTime
ChkHr(GetNamedString(spJson, pszName, timeString.GetAddressOf()))
JsonHelpers::RemoveAt
ChkHr(StringToFileTime(timeString.GetRawBuffer(nullptr), &ft, 0))
ChkHr(spJsonVector->RemoveAt(index))
####-##-##T##:##:##S
##:##
%04u-%02u-%02u%s%02u:%02u:%02u%s
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\external\inc\eratitleinfo.h
buffer != nullptr
pid != nullptr
CurrentEraTitleInfo::GetAppId
CurrentEraTitleInfo::GetProxyAppPid
result != nullptr
onecoreuap\internal\base\inc\userawarecalleridentity.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\clientprocessutils.cpp
IsRpcServerCallOnLocalTransport
ChkHr(CurrentEraTitleInfo::GetAppId(pfnBuff, pfnLength))
GetCallingProcessPackageFullName
ChkHr(UserAwareCallerIdentity::GetCallingProcessPackageFullName(packageFullName))
ChkHr(GetERAPackageFullNameByAumid(pfnBuff, wil::out_param(callerPackageFullName)))
ChkHr(CurrentEraTitleInfo::GetProxyAppPid(&pid))
ClientProcessUtils::IsCallerERA
ClientProcessUtils::GetWindowHandle
ChkArg(pCoreWindow)
ChkHr(spCoreWinInterop->get_WindowHandle(phWndCurrent))
ChkArg(phWndCurrent)
ClientProcessUtils::GetCallingAppWindowHandle
ChkHr(CoGetCallerTID(&callerThreadId))
ChkWin32(Expr)
ChkHr(EnsureWindowFromCallingProcess(*phwndOwner))
ChkHr(CoreQueryApplicationService(processId, __uuidof(ICoreApplication), __uuidof(**(&spCoreAppPrivate)), IID_PPV_ARGS_Helper(&spCoreAppPrivate)))
ClientProcessUtils::GetCallingAppWindowHandleFromThreadId
ChkHr(GetWindowHandle(spCoreWindow.Get(), &hwnd))
ChkHr(spCoreAppPrivate->GetWindowFromThreadId(callerThreadId, &spCoreWindow))
ClientProcessUtils::GetCallingAppPackageFullName
ChkReturn(HRESULT_FROM_WIN32(1168L))
ChkHr(getProcessPackageResult)
ChkHr(bstr.Initialize(L"", 0))
ChkHr(packageFullName.Set(requestorFullName))
ChkHr(packageFullName.Set(bstr.Get()))
ClientProcessUtils::GetCallingAppPackageFamilyName
ChkHr(GetCallingAppPackageFullName(fullName.GetAddressOf()))
ChkHr(GetCallingAppPackageFullName(packageFullName.GetAddressOf()))
ChkHr(packageFamilyName.Set(requestorFamilyName))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Internal_StateRepository_Package).Get(), &spPackageStatics))
ClientProcessUtils::GetCallingAppName
ChkHr(package->GetDisplayNameLocalized(appName))
ChkHr(spPackageStatics->GetByPackageFullName(packageFullName.Get(), package.GetAddressOf()))
ChkHr(hrCallContext)
ClientProcessUtils::GetCallingAppSessionGuid
ChkHr(UserAwareCallerIdentity::GetCallingProcessUserContext(&userContextToken))
ChkHr(HRESULT_FROM_WIN32(RtlNtStatusToDosError(status)))
ChkHr(Windows::Foundation::GetActivationFactory(UserManagerClassId.Get(), &userMgr))
ClientProcessUtils::GetSidForUser
ChkHr(signInMgr->GetHandleForUser(user, &userContextToken))
ChkHr(userMgr.As(&signInMgr))
ChkHr(HRESULT_FROM_WIN32(error))
ChkHr(UMgrQueryUserToken(userContextToken, &userToken))
ChkHr(WindowsCreateString(sidString, (UINT32)wcslen(sidString), sid))
ChkAlloc(tokenUser)
ChkHr(package->get_PackageType(&packageType))
ClientProcessUtils::GetAppContentTypeForInstalledPackage
ChkHr(package->get_TargetDeviceFamily(&foreignKey))
ChkHr(hrGetPackage)
ChkHr(spTargetDeviceFamilyStatics->Get(foreignKey, &spTargetDeviceFamily))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Internal_StateRepository_TargetDeviceFamily).Get(), &spTargetDeviceFamilyStatics))
ChkHr(HRESULT_FROM_WIN32(50L))
ChkHr(spTargetDeviceFamily->get_Name(&targetPlatform))
ChkHr(CoGetCallContext(__uuidof(**(&spCallingProcessInfo)), IID_PPV_ARGS_Helper(&spCallingProcessInfo)))
ClientProcessUtils::EnsureWindowFromCallingProcess
ChkBool(callingProcessId == hwndProcessId, ((HRESULT)0x80070005L))
ChkHr(spCallingProcessInfo->OpenCallerProcessHandle((0x1000), &callingProcessHandle))
ChkHr(package->get_EffectiveSupportedUsers(&supportedUsers))
ClientProcessUtils::GetCallingAppSupportsMultipleUser
ClientProcessUtils::CheckMultipleUserSupport
ChkHr(IsCallerERA(&isERA))
ChkHr(Windows::Foundation::GetActivationFactory( Microsoft::WRL::Wrappers::HStringReference(RuntimeClass_Windows_Internal_Shell_ModalExperience_ModalExperienceManager).Get(), &memStatics))
ChkHr(GetCallingAppSupportsMultipleUser(&supportsMultipleUsers))
ChkHr(memStatics->GetModalExperienceManager(modalExperienceManager))
ClientProcessUtils::GetModalExperienceManager
ChkHr(ActivateInstance( HStringReference(RuntimeClass_Windows_Management_Deployment_PackageManager).Get(), &spPackageManager))
ClientProcessUtils::GetCallingAppPackage
ChkHr(GetSidForUser(user, sidString.GetAddressOf()))
ChkHr(spPackageManager->FindPackageByPackageFullName(fullName.Get(), ppPackage))
ClientProcessUtils::GetCallerTokenFromComCall
ChkHr(spPackageManager->FindPackageByUserSecurityIdPackageFullName(sidString.Get(), fullName.Get(), ppPackage))
S-1-15-2-778011547-1096124574-1799322564-3972718560-253206704-1472347756-15051174
onecore\internal\shell\inc\windowsinternalstring.h
Windows::Internal::NativeString<class Windows::Internal::CoTaskMemPolicy<unsigned short> >::_Initialize
_pszStringData == nullptr
::wcslen(_pszStringData) == _cchStringData
((_pszStringData == nullptr) && (_cchStringData == 0)) || ((_pszStringData == nullptr) && (_cchStringDataCapacity == s_cchUnknown)) || ((_pszStringData != nullptr) && (_cchStringData == ::wcslen(_pszStringData)))
Windows::Internal::NativeString<class Windows::Internal::CoTaskMemPolicy<unsigned short> >::_EnsureCapacity
(_cchStringData <= _cchStringDataCapacity) || (_cchStringDataCapacity == s_cchUnknown)
Windows::Internal::NativeString<class Windows::Internal::CoTaskMemPolicy<unsigned short> >::_EnsureCount
Windows.Internal.StateRepository.TargetDeviceFamily
application/json
ChkHr(Windows::Foundation::GetActivationFactory( HStringReference(RuntimeClass_Windows_Foundation_Uri).Get(), &uriFactory))
OPTIONAL
onecoreuap\enduser\winstore\licensing\winrt\lib\iaputils.cpp
GetHttpResponse
ChkHr(pHttpClient->get_DefaultRequestHeaders(&headers))
ChkHr(uriFactory->CreateUri(hstrURL, &uri))
MS-CV
ChkHr(headers.As(&headersMap))
ChkHr(pHttpClient->GetAsync(uri.Get(), &requestOperation))
ChkHr(headersMap->Insert(HStringReference(L"MS-CV").Get(), cv.GetHStringReference().Get(), &replaced))
ChkHr(pHttpClient->DeleteAsync(uri.Get(), &requestOperation))
ChkHr(pHttpClient->PostAsync(uri.Get(), pRequestContent, &requestOperation))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Web_Http_HttpMethod).Get(), &methodStatics))
ChkHr(pHttpClient->PutAsync(uri.Get(), pRequestContent, &requestOperation))
ChkHr(methodStatics->get_Options(&method))
ChkHr(methodStatics->get_Head(&method))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Web_Http_HttpRequestMessage).Get(), &requestFactory))
ChkHr(methodStatics->get_Patch(&method))
ChkHr(message->put_Content(pRequestContent))
ChkHr(requestFactory->Create(method.Get(), uri.Get(), &message))
ChkHr(BlockOnCompletionAndGetResults(requestOperation.Get(), &responseMessage))
ChkHr(pHttpClient->SendRequestAsync(message.Get(), &requestOperation))
ChkHr(responseContent->ReadAsStringAsync(&readOperation))
ChkHr(responseMessage->get_Content(&responseContent))
ChkHr(responseContent->TryComputeLength(&responseSizeBytes, &tryComputeLengthSucceeded))
ChkHr(BlockOnCompletionAndGetResults(readOperation.Get(), phstrContent))
ChkHr(responseMessage->EnsureSuccessStatusCode(&responseSuccess))
ChkHr(responseMessage->get_StatusCode(&httpStatusCode))
_SendJsonToURLWithHttpClientForStringResponse
ChkHr(JsonHelpers::Stringify(pRequest, requestJsonString.GetAddressOf()))
ChkHr(contentFactory->CreateFromStringWithEncodingAndMediaType( requestJsonString.Get(), Windows::Storage::Streams::UnicodeEncoding::UnicodeEncoding_Utf8, JsonMediaType.Get(), &requestContent))
ChkHr(Windows::Foundation::GetActivationFactory( HStringReference(RuntimeClass_Windows_Web_Http_HttpStringContent).Get(), &contentFactory))
ChkHr(GetHttpResponse( pHttpClient, hstrURL, verb, pCV, requestContent.Get(), pStatusCode, hstrResponse))
ChkHr(UrlEscapeW(idValueUnescaped.GetRawBuffer(nullptr), pszIdValue, &cchIdValue, 0))
Public
IAPUtils::GetDeviceContextId
ChkHr(GetDeviceContextId(L"MOID", szEncodedMoId, (sizeof(szEncodedMoId)/sizeof(szEncodedMoId[0]))))
ChkHr(StringCchCopyW(pszIdValue, cchIdValue, L"Public"))
ChkHr(GetDeviceContextId(L"OEMID", szEncodedOemId, (sizeof(szEncodedOemId)/sizeof(szEncodedOemId[0]))))
IAPUtils::GetDeviceContextString
moId=%s&oemId=%s&scmId=%s
ChkHr(GetDeviceContextId(L"SCMID", szEncodedScmId, (sizeof(szEncodedScmId)/sizeof(szEncodedScmId[0]))))
ChkHr(StringCchPrintfW( spszDestBuffer, cchDestBuffer, pszFormat, szEncodedMoId, szEncodedOemId, szEncodedScmId ))
ChkAlloc(spszDestBuffer = new WCHAR[cchDestBuffer])
ChkHr(IAPUtils::GetLanguages(&spLanguages))
ChkHr(WindowsCreateString(spszDestBuffer, (UINT32)wcslen(spszDestBuffer), pDeviceContext))
ChkHr(spLanguages->get_Size(&size))
IAPUtils::GetLanguage
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_System_UserProfile_GlobalizationPreferences).Get(), &spGlobalizationPreferences))
ChkHr(spLanguages->GetAt(0, pLanguage))
ChkHr(spGlobalizationPreferences->get_Languages(ppLanguages))
IAPUtils::GetLanguages
ChkHr(spLanguages->GetAt(i, language.GetAddressOf()))
IAPUtils::GetLanguagesString
ChkHr(StringCchCatExW(pszLanguagesEnd, cchRemaining, pszLanguage, &pszLanguagesEnd, &cchRemaining, 0))
ChkHr(StringCchCatExW(pszLanguagesEnd, cchRemaining, L",", &pszLanguagesEnd, &cchRemaining, 0))
IAPUtils::GetDeviceIds
ChkHr(IAPUtils::GetDeviceContextId(L"MOID", szEncodedMoId, (sizeof(szEncodedMoId)/sizeof(szEncodedMoId[0]))))
ChkHr(IAPUtils::GetDeviceContextId(L"OEMID", szEncodedOemId, (sizeof(szEncodedOemId)/sizeof(szEncodedOemId[0]))))
ChkHr(moId.Set(szEncodedMoId))
ChkHr(IAPUtils::GetDeviceContextId(L"SCMID", szEncodedScmId, (sizeof(szEncodedScmId)/sizeof(szEncodedScmId[0]))))
ChkHr(oemId.Set(szEncodedOemId))
IAPUtils::GetFormattedPrice
ChkHr(scmId.Set(szEncodedScmId))
ChkHr(GetFormattedPriceUsingCurrencyFormatter( price, currencyCode, language.Get(), HStringReference((const WCHAR*)pwszUppercaseRegion).Get(), formattedPrice))
ChkAlloc(pwszUppercaseRegion)
IAPUtils::CreateHttpClient
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Web_Http_HttpClient).Get(), &factory))
ChkHr(filter.As(&filter2))
ChkHr(ActivateInstance(HStringReference(RuntimeClass_Windows_Web_Http_Filters_HttpBaseProtocolFilter).Get(), &filter))
ChkHr(factory->Create(filter.Get(), &httpClient))
ChkHr(filter2->put_MaxVersion(Windows::Web::Http::HttpVersion_Http11))
ChkHr(headers->get_UserAgent(&userAgent))
ChkHr(httpClient->get_DefaultRequestHeaders(&headers))
ChkHr(CreateHttpClient(&httpClient))
WindowsStoreSDK
WLID1.0=
IAPUtils::CreateHttpClientWithAuthHeader
Authorization
ChkHr(WindowsConcatString( HStringReference(L"WLID1.0=").Get(), ticket, formattedAuthToken.GetAddressOf()))
ChkHr(headers->TryAppendWithoutValidation( HStringReference(L"Authorization").Get(), ticket, &succeeded))
ChkHr(headers->TryAppendWithoutValidation( HStringReference(L"Authorization").Get(), formattedAuthToken.Get(), &succeeded))
IAPUtils::CreateHttpClientWithAuthIfAvailable
ChkHr(WinStoreAuth::AuthenticationInternal::PrefixTicketForMDollar(providerType, ticket.Get(), strPrefixAuthToken.GetAddressOf()))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader( ticket.Get(), false, ppHttpClient))
ChkHr(strPrefixAuthToken.CopyTo(ticket.ReleaseAndGetAddressOf()))
IAPUtils::PostJsonToURLWithHttpClient
ChkHr(IAPUtils::CreateHttpClient(ppHttpClient))
ChkHr(jsonObjectStatics->Parse(responseJsonString.Get(), &responseJson))
ChkHr(contentFactory->CreateFromStringWithEncodingAndMediaType( requestJsonString.Get(), Windows::Storage::Streams::UnicodeEncoding::UnicodeEncoding_Utf8, HStringReference(L"application/json").Get(), &requestContent))
ChkHr(GetStringFromURLWithHttpClient(pHttpClient, hstrURL, pCV, nullptr, jsonString.GetAddressOf()))
ChkHr(hrHttp)
ChkHr(jsonObjectStatics->Parse(jsonString.Get(), &jsonObject))
IAPUtils::GetJsonFromURLWithHttpClient
ChkHr(GetJsonFromURLWithHttpClient(httpClient.Get(), hstrURL, pCV, ppJsonObject))
IAPUtils::GetJsonFromURL
IAPUtils::CreateUri
ChkArg(hstrUri)
Windows.Foundation.Uri
ChkArg(ppUri)
ChkHr(activationFactory.As(&uriFactory))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(L"Windows.Foundation.Uri").Get(), &activationFactory))
IAPUtils::SetDateTime
ChkHr(SetMaxDateTime(pDateTime))
ChkHr(RoFileTimeToDateTime(fileTime, pDateTime))
ChkHr(SetMaxDateTime(&maxDateTime))
ChkHr(::WindowsTrimStringStart(timeSpanString, Space.Get(), trimmedStart.GetAddressOf()))
IAPUtils::GetTimeSpanDifference
ChkHr(::WindowsTrimStringEnd(trimmedStart.Get(), Space.Get(), trimmedString.GetAddressOf()))
IAPUtils::ParseTimeSpan
ChkBool(last == pchEnd, ((HRESULT)0x80070057L))
ChkBool(*last == ':', ((HRESULT)0x80070057L))
%s%02d:%02d:%09.6f
IAPUtils::TimeSpanToString
ChkHr(StringCchPrintfW( buffer, (sizeof(*RtlpNumberOf(buffer))), L"%s%02d:%02d:%09.6f", isNegative ? L"-" : L"", hours, minutes, seconds))
ChkHr(StringCchPrintfW( buffer, (sizeof(*RtlpNumberOf(buffer))), L"%s%d.%02d:%02d:%09.6f", isNegative ? L"-" : L"", static_cast<int>(days), hours, minutes, seconds))
%s%d.%02d:%02d:%09.6f
IAPUtils::ParseStoreId
ChkHr(StringHelpers::SplitString(storeId, g_pszStoreIdSeparator, &storeIdComponents))
ChkBool(size <= 3, ((HRESULT)0x80070057L))
ChkHr(storeIdComponents->get_Size(&size))
ChkHr(storeIdComponents->GetAt(0, pProductId))
ChkArg(productKinds)
ChkHr(productKinds->First(&spIter))
IAPUtils::CheckProductKinds
ChkBool(hasCurrent, ((HRESULT)0x80070057L))
ChkHr(spIter->get_HasCurrent(&hasCurrent))
ChkBool(asterisk == nullptr, ((HRESULT)0x80070057L))
ChkHr(spIter->get_Current(value.GetAddressOf()))
ChkHr(::WindowsDuplicateString(productId, storeId))
ChkBool(colon == nullptr, ((HRESULT)0x80070057L))
ChkHr(WindowsConcatString( productId, StoreIdSeparator.Get(), productIdWithSeparator.GetAddressOf()))
IAPUtils::BuildStoreId
ChkHr(::WindowsDuplicateString(productIdSkuId.Get(), storeId))
ChkHr(WindowsConcatString( productIdWithSeparator.Get(), skuId, productIdSkuId.GetAddressOf()))
ChkHr(WindowsConcatString( productIdSkuIdWithSeparator.Get(), availabilityId, storeId))
ChkHr(WindowsConcatString( productIdSkuId.Get(), StoreIdSeparator.Get(), productIdSkuIdWithSeparator.GetAddressOf()))
IAPUtils::BuildEntitlementFiltersJSON
ChkHr(JsonHelpers::CreateJsonArray(&jsonEntitlementFilters))
ChkHr(WindowsConcatString(EntitlementFilterPrefix.Get(), productKind.Get(), entitlementFilter.GetAddressOf()))
ChkHr(spIter->get_Current(productKind.GetAddressOf()))
ChkHr(spIter->MoveNext(&hasCurrent))
ChkHr(JsonHelpers::AppendString(jsonEntitlementFilters, entitlementFilter.Get()))
IAPUtils::CombineProductsAndCollectionsJson
ChkHr(JsonHelpers::ParseToJsonObject(::WindowsGetStringRawBuffer(productsJson, nullptr), &productsResultObject))
ChkHr(JsonHelpers::ParseToJsonObject(::WindowsGetStringRawBuffer(collectionsJson, nullptr), &collectionData))
ChkHr(JsonHelpers::GetNamedArray(productsResultObject, L"Products", &productsArray))
ChkHr(JsonHelpers::GetNamedArray(collectionData, L"items", &collectionDataArray))
items
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(collectionDataArray, &collectionSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(productsArray, &productSize))
ChkHr(JsonHelpers::GetNamedString(collectionItem, L"productId", collectionProductId.GetAddressOf()))
ChkHr(collectionDataArray->GetObjectAt(collectionIndex, &collectionItem))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductId", productId.GetAddressOf()))
ChkHr(productsArray->GetObjectAt(productIndex, &product))
ChkHr(JsonHelpers::GetNamedArray(product, L"DisplaySkuAvailabilities", &skuAvailabilities))
DisplaySkuAvailabilities
ChkHr(skuAvailabilities->GetObjectAt(skuAvailabilityIndex, &skuAvailability))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(skuAvailabilities, &skuAvailabilitySize))
ChkHr(JsonHelpers::GetNamedObject(skuAvailability, L"Sku", &sku))
ChkHr(JsonHelpers::GetNamedString(sku, L"SkuId", skuId.GetAddressOf()))
SkuId
CollectionData
ChkHr(JsonHelpers::GetNamedString(collectionItem, L"skuId", collectionSkuId.GetAddressOf()))
JsonHelpers::Stringify(productsResultObject, pCombinedJson)
ChkHr(JsonHelpers::SetNamedObject(sku, L"CollectionData", collectionItem.Get()))
ChkHr(hrImpersonate)
IAPUtils::IsCallingProcessAppContainer
ChkHr(StringHelpers::TrimEnds(inputTag, 1, rawInputTag.GetAddressOf()))
CoRevertToSelf()
IAPUtils::ParseUriSubstitutionTag
ChkHr(tagComponents->get_Size(&tagComponentsSize))
ChkHr(StringHelpers::SplitString(rawInputTag.Get(), L":", &tagComponents))
ChkBool(tagComponentsSize <= 3, ((HRESULT)0x80070057L))
ChkBool(tagComponentsSize != 0, ((HRESULT)0x80070057L))
ChkHr(tagComponents->GetAt(1, outputName))
ChkHr(tagComponents->GetAt(0, outputKey))
ChkHr(outputBuffer.Preallocate(uriBufferMax, &pszDest))
ChkHr(tagComponents->GetAt(2, outputMeta))
ChkHr(GetActivationFactory(WindowsFoundationUri.Get(), &uriEscapeStatics))
IAPUtils::ConstructSlsUri
ChkHr(StringCchCopyNExW(pszRemaining, cchRemaining, pszFormatCursor, pszOpenBrace - pszFormatCursor, &pszRemaining, &cchRemaining, 0))
ChkHr(tag.Set(pszOpenBrace, static_cast<UINT32>(pszCloseBrace - pszOpenBrace) + 1))
Failed to find substitute value with key %s!
ChkHr(ParseUriSubstitutionTag(tag.Get(), tagKey.GetAddressOf(), tagName.GetAddressOf(), tagMeta.GetAddressOf()))
ChkHr(substituteValue->get_ValueType(&valueType))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, seenQuestionMark ? L"&" : L"?", &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, tagName.GetRawBuffer(nullptr), &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(uriEscapeStatics->EscapeComponent(substituteString.Get(), escapedData.GetAddressOf()))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, L"=", &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyW(pszRemaining, cchRemaining, pszFormatCursor))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, escapedData.GetRawBuffer(nullptr), &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringHelpers::TrimString(output.Get(), uriOutput))
ChkHr(outputBuffer.Promote(output.GetAddressOf()))
onecore\internal\shell\inc\AsyncOperationHelper.h
$Windows::Services::Store::Internal::GetNextUserCollection::RuntimeClassInitialize
ChkHr(_continuationToken.Set(continuationToken))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getnextusercollection.cpp
Windows::Services::Store::Internal::GetNextUserCollection::GetNextAsync
ChkAlloc(_spCV)
ChkHr(JsonHelpers::SetNamedNumber(jsonCollectionsParameters, L"maxPageSize", _maxItems))
maxPageSize
ChkHr(JsonHelpers::SetNamedString(jsonCollectionsParameters, L"continuationToken", _continuationToken.Get()))
continuationToken
ChkHr(JsonHelpers::CreateJsonObject(&includeRelationship))
ChkHr(IAPUtils::BuildEntitlementFiltersJSON(jsonEntitlementFilters, _productKinds.Get()))
ChkHr(JsonHelpers::SetNamedString(includeRelationship, L"relatedProductId", _productStoreId.Get()))
relatedProductId
ChkHr(JsonHelpers::SetNamedString(includeRelationship, L"relationshipType", SellableBy.Get()))
relationshipType
ChkHr(JsonHelpers::SetNamedObject(jsonCollectionsParameters, L"includeRelationship", includeRelationship))
includeRelationship
ChkHr(JsonParser::ParseJSONStringToObject( jsonCollectionsString, this, collectionQueryResultsTable))
ChkHr(_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetUserCollectionForParentProductByFamily, _spCV, jsonCollectionsParameters.Get(), &statusCode, jsonCollectionsString.GetAddressOf()))
ChkHr(iter->get_HasCurrent(&hasCurrent))
ChkHr(_collectionData->First(&iter))
ChkHr(collectionData.As(&collectionDataPrivate))
ChkHr(iter->get_Current(&collectionData))
ChkHr(collectionDataPrivate->get_SkuId(skuId.GetAddressOf()))
ChkHr(collectionDataPrivate->get_ProductId(productId.GetAddressOf()))
ChkHr(storeIds->Append(storeId.Get()))
ChkHr(IAPUtils::BuildStoreId( productId.Get(), skuId.Get(), nullptr, storeId.GetAddressOf()))
ChkHr(StringHelpers::Join( _productKinds.Get(), false, productKindsWithCommas.GetAddressOf()))
ChkHr(iter->MoveNext(&hasCurrent))
ChkHr(JsonHelpers::SetNamedString( jsonCatalogParameters.Get(), L"productKinds", productKindsWithCommas.GetRawBuffer(nullptr)))
ChkHr(StringHelpers::Join( storeIds.Get(), false, storeIdsWithCommas.GetAddressOf()))
ChkHr(_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetProductsNoParent, _spCV, jsonCatalogParameters.Get(), &statusCode, jsonCatalogString.GetAddressOf()))
ChkHr(JsonHelpers::SetNamedString( jsonCatalogParameters.Get(), L"productIdsWithCommas", storeIdsWithCommas.GetRawBuffer(nullptr)))
ChkHr(MakeAndInitialize<GetNextUserCollection>( &nextOperation, _storeContextServer.Get(), _productStoreId.Get(), _productKinds.Get(), _continuationToken.Get(), _maxItems, _user.Get(), szCV, _httpClient.Get()))
ChkHr(IAPUtils::CombineProductsAndCollectionsJson( jsonCatalogString.Get(), jsonCollectionsString.Get(), productJsonResponse))
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreCollectionData>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreCollectionData>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreCollectionData>
WindowsUpdate
MSIXVC
ProductTitle
AddOnKeyword
ProductDescription
InAppOfferToken
Images
Language
SearchTitles
Videos
ProductKind
PackageFamilyName
Properties
LocalizedProperties
Windows::Services::Store::StoreProduct::RuntimeClassInitialize
ChkHr(_jsonValue.SetReference(json))
ChkHr(Vector<HSTRING>::Make(&_keywords))
onecoreuap\enduser\winstore\licensing\winrt\lib\storeproduct.cpp
ChkHr(Vector<StoreVideo*>::Make(&_videos))
ChkHr(Vector<StoreImage*>::Make(&_images))
ChkHr(_SortSkus())
ChkHr(JsonParser::ParseJSONToObject( json, this, ProductTable))
Windows::Services::Store::StoreProduct::get_StoreId
::WindowsDuplicateString(_storeId.Get(), pValue)
Windows::Services::Store::StoreProduct::get_Language
::WindowsDuplicateString(_language.Get(), pValue)
Windows::Services::Store::StoreProduct::get_Title
::WindowsDuplicateString(_title.Get(), pValue)
Windows::Services::Store::StoreProduct::get_Description
::WindowsDuplicateString(_description.Get(), pValue)
Windows::Services::Store::StoreProduct::get_InAppOfferToken
::WindowsDuplicateString(_inAppOfferToken.Get(), pValue)
Windows::Services::Store::StoreProduct::get_ProductKind
::WindowsDuplicateString(_productKind.Get(), pValue)
ChkHr(_skus->get_Size(&size))
Windows::Services::Store::StoreProduct::get_HasDigitalDownload
ChkHr(sku.As(&skuPrivate))
ChkHr(_skus->GetAt(i, &sku))
_keywords->GetView(ppValue)
ChkHr(skuPrivate->get_FulfillmentType(fulfillmentType.GetAddressOf()))
_images->GetView(ppValue)
Windows::Services::Store::StoreProduct::get_Keywords
_videos->GetView(ppValue)
Windows::Services::Store::StoreProduct::get_Images
_skus->GetView(ppValue)
Windows::Services::Store::StoreProduct::get_Videos
Windows::Services::Store::StoreProduct::get_IsInUserCollection
Windows::Services::Store::StoreProduct::get_Skus
Windows::Services::Store::StoreProduct::get_Price
ChkHr(sku->get_IsInUserCollection(&isInCollection))
ChkHr(iter->get_Current(&sku))
ChkHr(_skus->First(&iter))
Windows::Services::Store::StoreProduct::get_LinkUri
ChkHr(sku->get_Price(ppValue))
ChkHr(get_StoreId(storeId.GetAddressOf()))
ChkBool(nullptr != _storeContext, ((HRESULT)0x803F6107L))
ChkHr(IAPUtils::CreateUri(uriString.Get(), ppValue))
ChkHr(storeContextServer->GetLinkUri(storeId.Get(), uriString.GetAddressOf()))
ChkHr(_storeContext->GetIsAnySkuInstalledAsync(storeId.Get(), ppOperation))
Windows::Services::Store::StoreProduct::GetIsAnySkuInstalledAsync
ChkHr(_storeContext->RequestPurchaseAsync(storeId.Get(), ppOperation))
Windows::Services::Store::StoreProduct::RequestPurchaseAsync
ChkArg(storePurchaseProperties)
Windows::Services::Store::StoreProduct::RequestPurchaseWithPurchasePropertiesAsync
::WindowsDuplicateString(_packageFamilyName.Get(), value)
ChkHr(_storeContext->RequestPurchaseWithPurchasePropertiesAsync(storeId.Get(), storePurchaseProperties, ppOperation))
ChkHr(_skus.As(&inspectableProducts))
Windows::Services::Store::StoreProduct::get_PackageFamilyName
ChkHr(_storeContext->AssociateWithStoreContext(inspectableProducts))
Windows::Services::Store::StoreProduct::SetStoreContext
Windows::Services::Store::StoreProduct::_SortSkus
ChkHr(Vector<StoreSku*>::Make(&sortedSkus))
ChkHr(currentSku.As(&currentSkuPrivate))
ChkHr(_skus->GetAt(index, &currentSku))
ChkHr(bestSku.As(&skuPrivate))
ChkHr(currentSkuPrivate->get_Rank(&currentRank))
ChkHr(sortedSkus->Append(bestSku.Get()))
ChkHr(skuPrivate->set_ProductId(_storeId.Get()))
ChkHr(_skus->RemoveAt(bestIndex))
SearchTitleString
SearchTitleType
Windows::Services::Store::JsonParser::ParseArrayOfOne
jsonValue->GetArray(jsonArray.GetAddressOf())
jsonArray->GetObjectAt(0, jsonElement.GetAddressOf())
JsonHelpers::GetArraySizeFromJsonArray(jsonArray, &len)
ParseJSONToObject(DEBUG_PARSER_PARAMETERS_ARGS jsonElement, pObj, table)
Fsq^V
4-RZKD[
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreSku>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreSku>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreImage>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreImage>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreVideo>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreVideo>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreImage>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreVideo>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreSku>
ChkArg(pResult)
ChkHr(JsonHelpers::Stringify(_jsonValue, _stringifiedValue.GetAddressOf()))
onecoreuap\enduser\winstore\licensing\winrt\lib\StringifiedJsonValue.h
StringifiedJsonValue::GetStringifiedValue
Windows::Services::Store::Internal::GetNextAssociatedStoreProducts::RuntimeClassInitialize
ChkHr(Vector<HSTRING>::Make(&_bigIds))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getnextstorelistingforassociatedproducts.cpp
Windows::Services::Store::Internal::GetNextAssociatedStoreProducts::GetNextAsync
BigIds
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters.Get(), L"itemCount", maxItemsAsHstring.GetRawBuffer(nullptr)))
itemCount
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters.Get(), L"skipCount", skipCountAsHString.GetRawBuffer(nullptr)))
skipCount
ChkHr(_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetProductsByFamilyFromParent, _spCV, jsonCatalogParameters.Get(), nullptr, productJsonString.GetAddressOf()))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters.Get(), L"productKinds", productKindsWithCommas.GetRawBuffer(nullptr)))
ChkHr(JsonParser::ParseJSONStringToObject( productJsonString, this, productQueryResultsTable))
HasMorePages
ChkHr(_bigIds->First(&spIter))
ChkHr(_bigIds->get_Size(&size))
_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetUserCollectionForProducts, _spCV, jsonCollectionsParameters.Get(), nullptr, collectionsJsonString.GetAddressOf())
ChkHr(spIter->get_Current(storeId.GetAddressOf()))
ChkHr(productJsonString.CopyTo(productJsonResponse))
ChkHr(IAPUtils::CombineProductsAndCollectionsJson( productJsonString.Get(), collectionsJsonString.Get(), productJsonResponse))
ChkHr(MakeAndInitialize<GetNextAssociatedStoreProducts>( &nextOperation, _storeContextServer.Get(), _productStoreId.Get(), _productKinds.Get(), _skipCount + _maxItems, _maxItems, _hasMorePages, _user.Get(), szCV, _httpClient.Get()))
MDGetAppReceiptsDesktop
MDCollections
MDGetOneProductReceiptMobile
MDGetAppReceiptsMobile
LinkUriFormat
OneStoreAuthenticationDomain
MDPurchase
MDDisplayCatalog
StoreEndpointExtensionUrls
DeviceFamily
ModalFlowSizes
InternalStoreEndpointExtensionUrls
ChkHr(((HRESULT)0x80004005L))
JSON_RESPONSE
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\urihelper.cpp
RetrieveJsonResponseFromResources
ChkArg(ppszUri)
ChkHr(WindowsCreateString(pszResource, cch, jsonString))
SLS failed to initialize correctly, falling back to built in values, this may cause problems.
UriHelperInternal::GetUriString
ParseSLSJson
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), &spJsonObjectStatics))
JSON_RESPONSE_ONE_STORE_CLIENT_DATA_URLS
ChkHr(spJsonObjectStatics->Parse(HStringReference(pszJson).Get(), &spJsonObject))
UriHelperInternal::InitOnceCallback
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_ONE_STORE_CLIENT_DATA_URLS", onestoreClientData.GetAddressOf()))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_System_Profile_AnalyticsInfo).Get(), &spAnalyticsInfo))
ChkHr(ParseSLSJson(onestoreClientData.GetRawBuffer(nullptr), UriHelper::s_rghstrUris, UriHelper::s_rgpszUriNames, (sizeof(*RtlpNumberOf(UriHelper::s_rghstrUris))), true))
ChkHr(spVersionInfo->get_DeviceFamily(deviceFamily.GetAddressOf()))
ChkHr(spAnalyticsInfo->get_VersionInfo(&spVersionInfo))
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_STORE_ENDPOINT_EXTENSION_URLS", UriHelperV7::s_rghstrUris[UriHelperV7::StoreEndpointExtensionUrls].GetAddressOf()))
JSON_RESPONSE_STORE_ENDPOINT_EXTENSION_URLS
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_INTERNAL_STORE_ENDPOINT_EXTENSION_URLS", UriHelperV7::s_rghstrUris[UriHelperV7::InternalStoreEndpointExtensionUrls].GetAddressOf()))
JSON_RESPONSE_INTERNAL_STORE_ENDPOINT_EXTENSION_URLS
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_MODAL_FLOW_SIZES", UriHelperV7::s_rghstrUris[UriHelperV7::ModalFlowSizes].GetAddressOf()))
JSON_RESPONSE_MODAL_FLOW_SIZES
//ServiceEnvironment/StoreSDK
ChkHr(CoCreateInstance(CLSID_SLSClient, nullptr, CLSCTX_INPROC_SERVER, __uuidof(**(&spSLSClient2)), IID_PPV_ARGS_Helper(&spSLSClient2)))
ChkHr(ParseSLSJson(pszJson, UriHelper::s_rghstrUris, UriHelper::s_rgpszUriNames, (sizeof(*RtlpNumberOf(UriHelper::s_rghstrUris))), false))
ChkHr(spSLSClient2->GetSLSDataChunk(GUID_StoreFrontServiceID, 0, L"//ServiceEnvironment/StoreSDK", &pszJson, &lastModified))
ChkHr(ParseSLSJson(pszJson, UriHelperV7::s_rghstrUrisSLS, UriHelperV7::s_rgpszUriNames, (sizeof(*RtlpNumberOf(UriHelperV7::s_rghstrUrisSLS))), false))
ChkBool(pszCloseBrace != 0, ((HRESULT)0x80004005L))
FormatNameValuePairs
ChkBool(found, ((HRESULT)0x80070057L))
ChkHr(StringCchCopyExW(pszRemaining, cchRemaining, WindowsGetStringRawBuffer(nameValuePairs[i].value, nullptr), &pszRemaining, &cchRemaining, 0x00000100))
UriHelperInternal::GetUriEx
nameValuePairs || (cNameValuePairs == 0)
ChkHr(UriHelperInternal::GetUriString(rghstrUris, index, &pszInitialUri))
cNameValuePairs >= 0
ChkHr(FormatNameValuePairs(pszFinalUri, urlLength, pszInitialUri, nameValuePairs, cNameValuePairs, encodeParameters))
ChkHr(stringBuffer.Preallocate(urlLength, &pszFinalUri))
UriHelperInternal::GetUriWithPathAndParametersEx
ChkHr(StringHelpers::TrimString(result.Get(), hstrUri))
ChkHr(UriHelperInternal::GetUriString(rghstrUris, index, &pszUriBase))
ChkHr(StringCchCopyExW(pszRemaining, cchRemaining, pszUriBase, &pszRemaining, &cchRemaining, 0))
((wcschr(pszUriBase, L'{')) == 0) && "On this overload, the uri base must be *clean*; no parameters allowed"
cchRemaining < urlLength && "We should have copied *something*"
ChkHr(FormatNameValuePairs(pszRemaining, cchRemaining, pathFormat, nameValuePairs, cNameValuePairs, false))
ChkHr(StringCchCopyExW(pszRemaining, cchRemaining, L"/", &pszRemaining, &cchRemaining, 0))
UriHelper::GetUri
ChkArg(uri < UriHelper::UriMax)
ChkHr(UriHelperInternal::GetUriEx(s_rghstrUris, uri, nullptr, 0, false, hstrUri))
ChkArg(uri >= 0)
ChkArg(uriBase < UriHelper::UriMax)
ChkHr(UriHelperInternal::GetUriEx(s_rghstrUris, uri, nameValuePairs, cNameValuePairs, false, hstrUri))
UriHelper::GetUriWithPath
UriHelper::GetUriWithPathAndParameters
ChkHr(UriHelperInternal::GetUriWithPathAndParametersEx(s_rghstrUris, uriBase, hstrPath, nullptr, 0, hstrUri))
ChkHr(JsonHelpers::ParseToJsonArray(data.GetRawBuffer(nullptr), &spJsonUriArray))
ChkHr(UriHelperInternal::GetUriWithPathAndParametersEx( s_rghstrUris, uriBase, hstrPath, nameValuePairs, cNameValuePairs, hstrUri))
ChkHr(_FindUriWithIndex(requestIndex, spJsonUriArray, entry))
UriHelperV7::GetIndexedEntry
ChkHr(JsonHelpers::ParseToJsonArray(data.GetRawBuffer(nullptr), spJsonUriArray.ReleaseAndGetAddressOf()))
ChkHr(_GetRawStringFromOS(uri, data.GetAddressOf()))
ChkArg(uri < UriHelperV7::UriMax)
ChkBool(*entry != nullptr, HRESULT_FROM_WIN32(1168L))
ChkHr(UriHelperInternal::GetUriString(s_rghstrUrisSLS, uri, &pszUri))
UriHelperV7::GetRawString
ChkHr(temp.Set(pszUri))
ChkHr(UriHelperInternal::GetUriString(s_rghstrUris, uri, &pszUri))
UriHelperV7::_FindUriWithIndex
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(jsonUriArray, &countUris))
Index
ChkHr(jsonUriArray->GetObjectAt(index, &object))
UriHelperV7::_GetRawStringFromSLS
UriHelperV7::_GetRawStringFromOS
Windows.System.Profile.AnalyticsInfo
SendStoreRequest
Microsoft.StorePurchaseApp_8wekyb3d8bbwe!App
RequestPurchase
Microsoft.StorePurchaseApp_8wekyb3d8bbwe
ChkHr(JsonHelpers::CreateJsonObject(&_response))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchaseoperation.cpp
NotPurchased
Windows::Services::Store::PurchaseOperation::RuntimeClassInitialize
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"NotPurchased"))
purchaseStatus
ChkHr(storeProductId.Set(storeId))
ChkHr(_PFN.Set(PFN))
ChkHr(JsonHelpers::ParseToJsonObject(tmp.GetRawBuffer(nullptr), _request.GetAddressOf()))
ChkHr(storePurchaseProperties->get_ExtendedJsonData(tmp.GetAddressOf()))
ChkHr(storePurchaseProperties->get_Name(tmp.GetAddressOf()))
ChkHr(JsonHelpers::CreateJsonObject(&_request))
ChkHr(JsonHelpers::SetNamedString(_request, L"Name", tmp.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::ParseToJsonObject(WindowsGetStringRawBuffer(overrideJsonRequest, nullptr), &_request))
ChkHr(JsonHelpers::SetNamedString(_request, L"StoreId", storeProductId.GetRawBuffer(nullptr)))
!storeProductId.IsValid() && "Shouldn't be a storeId yet in this scenario"
ChkHr(JsonHelpers::SetNamedBool(_request, L"HasPreviewCapability", hasPreviewCapability))
HasPreviewCapability
ChkHr(JsonHelpers::SetNamedString(_request, L"Version", hstrPurchaseAppAPIVersion.GetRawBuffer(nullptr)))
Version
ChkHr(JsonHelpers::SetNamedString(_request, L"InvokedApi", invokedApi))
InvokedApi
ChkHr(UriHelperV7::GetRawString(UriHelperV7::ModalFlowSizes, modalFlowSizes.GetAddressOf()))
ModalFlow
Width
ChkHr(JsonHelpers::ParseToJsonObject(modalFlowSizes.GetRawBuffer(nullptr), modalFlowJsonData.GetAddressOf()))
writeRatingsAndReview
Height
ParentProductId
Override ParentProductId
ChkHr(_FillTheRequestWithRequiredParameters())
ChkHr(JsonHelpers::SetNamedString(_request, L"ParentProductId", WindowsGetStringRawBuffer(appProductId, nullptr)))
JsonHelpers::Stringify(_response, jsonResponse)
ChkHr(StartOperation(1))
ChkHr(pArgs->get_State(&state))
Windows::Services::Store::PurchaseOperation::GetResults
ChkHr(CoSwitchCallContext(nullptr, &oldCtx))
Windows::Services::Store::PurchaseOperation::_OnModalExperienceEvent
ChkHr(GetPurchaseAppPfn(_user.Get(), purchaseAppPfn.GetAddressOf()))
Windows::Services::Store::PurchaseOperation::_FillTheRequestWithRequiredParameters
ChkHr(JsonHelpers::SetNamedString(_request, L"UserId", realId.GetRawBuffer(nullptr)))
ChkHr(WinStoreAuth::ConvertWebAccountIdFromRealIdToAppForUser(_user.Get(), authType, purchaseAppPfn.Get(), userId.Get(), realId.GetAddressOf()))
DeviceContext
ChkHr(IAPUtils::GetDeviceContextString(deviceContextString.GetAddressOf()))
ChkHr(::ActivateInstance(StringReference(RuntimeClass_Windows_Internal_Shell_ModalExperience_ModalExperienceOptions).Get(), &modalExperienceOptions))
ChkHr(JsonHelpers::SetNamedString(_request, L"DeviceContext", deviceContextString.GetRawBuffer(nullptr)))
ChkHr(modalExperienceOptions->put_SuspendExemptionType(static_cast<UINT32>(PLM_TASKCOMPLETION_CATEGORY_FLAGS::PT_TC_NONE)))
Windows::Services::Store::PurchaseOperation::_BuildModalExperienceOptions
ChkHr(modalExperienceOptions->put_Centered(true))
ChkHr(modalExperienceOptions->put_ExperienceTitle((nameOverride == nullptr ? HStringReference(L" ").Get() : nameOverride.Get())))
ChkHr(modalExperienceOptions->put_ExperienceDefaultSize(size))
ChkHr(modalExperienceOptions->put_ExperienceMinimumSize(size))
ChkHr(modalExperienceOptions->put_AllowWin32Owner(true))
ChkHr(modalExperienceOptions->put_ExperienceMaximumSize(size))
Windows::Services::Store::PurchaseOperation::_Purchase
ChkHr(_BuildModalExperienceOptions(modalExperienceOptions, _size))
ChkHr(JsonHelpers::SetNamedString(_request, L"CV", cv.GetUnicode()))
ChkHr(JsonHelpers::Stringify(_response, jsonIntialResponse.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(_request, jsonRequestString.GetAddressOf()))
ChkHr(args->RuntimeClassInitialize( jsonRequestString.Get(), jsonIntialResponse.Get(), _size))
jsonRequest: %s
PurchaseMEM
ChkHr(ClientProcessUtils::GetModalExperienceManager(&modalManager))
ChkHr(signInMgr->GetHandleForUser(_user.Get(), &userContextToken))
ChkHr(hrModalAsUser)
Windows.Launch
ChkHr(GetPurchaseAppUserModelId(_user.Get(), purchaseAppUserModelId.GetAddressOf()))
modalManager->ShowForContractByAppID( purchaseAppUserModelId, StringReference(L"Windows.Launch").Get(), activatedEventArgs.Get(), modalExperienceOptions.Get(), reinterpret_cast<Windows::Internal::Shell::ViewManagerInterop::WindowInstanceId>(_hwnd), handler.Get(), &experienceToken)
modalManagerAsUser->ShowForContractByAppIDAsUser( purchaseAppUserModelId, StringReference(L"Windows.Launch").Get(), activatedEventArgs.Get(), modalExperienceOptions.Get(), reinterpret_cast<Windows::Internal::Shell::ViewManagerInterop::WindowInstanceId>(_hwnd), handler.Get(), userContextToken, &experienceToken)
ChkHr(args->get_ResultCode(&hr))
args->SetMemInfo(experienceToken, modalManager)
jsonResponse: %s
ChkHr(args->get_JsonResponse(jsonResponse.GetAddressOf()))
ChkHr(_request->SetNamedValue(HStringReference(g_DoNotLogTheseValues[i]).Get(), nullptr))
ChkHr(JsonHelpers::ParseToJsonObject(jsonResponse.GetRawBuffer(nullptr), _response.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(_request, jsonRequest.GetAddressOf()))
Windows::Services::Store::PurchaseOperation::_FirePurchaseTelemetry
AlreadyPurchased
ChkHr(JsonHelpers::Stringify(_response, jsonResponse.GetAddressOf()))
Windows::Services::Store::PurchaseOperation::DoWork
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"AlreadyPurchased"))
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"NetworkError"))
NetworkError
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"ServerError"))
ServerError
ChkHr(JsonHelpers::SetNamedNumber(_response, L"error", hrPurchase))
error
AllowImpersonation
ChkHr(pickle->SetBlanket( punk, 0xFFFFFFFFL, 0xffffffff, ( ( OLECHAR * )( INT_PTR )-1 ), 0, 4, nullptr, EOAC_DEFAULT))
ChkHr((MakeAndInitialize<LicenseInformationServer, LicenseInformationServer>(spLicenseInformationServerSingleton.GetAddressOf())))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\licenseinformationserver.cpp
ChkHr(spLicenseInformationServerSingleton->Initialize(lpszPackageFullName, eAppType, pCV))
Windows::ApplicationModel::Store::LicenseInformationServer::CreateInstance
ChkAlloc(m_timer)
ChkHr(CopyToNotNull(spLicenseInformationServerSingleton, value))
ChkHr(Vector<UnfulfilledConsumable*>::Make(&m_spUnfulfilledList))
Windows::ApplicationModel::Store::LicenseInformationServer::Initialize
ChkHr(CoCreateInstance( __uuidof(ApplicationLicenseManager), nullptr, (CLSCTX_INPROC_SERVER|CLSCTX_LOCAL_SERVER|CLSCTX_REMOTE_SERVER), __uuidof(**(&m_spLicenseManager)), IID_PPV_ARGS_Helper(&m_spLicenseManager)))
ChkHr(m_spPackageFullName.Set(packageFullName))
ChkHr(((HRESULT) ((RtlQueryWnfStateData( &initialChangeStamp, WNF_LM_CONTENT_LICENSE_CHANGED, WnfLicenseStateChangeCallback, nullptr, nullptr)) | 0x10000000)))
ChkHr(AllowImpersonation(m_spLicenseManager.Get()))
ChkHr(RefreshInternalState(true, pCV))
ChkHr(((HRESULT) ((RtlSubscribeWnfStateChangeNotification( &m_wnfLicenseChanged, WNF_LM_CONTENT_LICENSE_CHANGED, initialChangeStamp, WnfLicenseStateChangeCallback, context, nullptr, 0, 0x00000001UL)) | 0x10000000)))
Windows::ApplicationModel::Store::LicenseInformationServer::RefreshInternalState
refreshConsumablesAsync
ChkHr(spAppContentInfo->GetCatalogId(&bigCatId))
ChkHr(spLicenseInstance->GetContentInfo(__uuidof(**(&spAppContentInfo)), IID_PPV_ARGS_Helper(&spAppContentInfo)))
ChkHr(spAppContentInfo->GetWindowsStoreAppId(&m_appId))
ChkHr(m_productId.Set(bigCatId))
ChkHr(spLicenseInstance->GetIsTrial(&m_bIsTrial))
ChkHr(spLicenseInstance->GetIsActive(&m_bActive))
RefreshInternalState with refreshConsumables %d, license IsActive %d, IsTrial %d
ChkHr(IAPUtils::SetDateTime(ftExpirationTime, &m_dtExpiration))
Timer expired, triggering state refresh
ChkHr(spProductLicenseMap->Initialize(spLicenseInstance.Get(), spUnfulfilledList.Get()))
ChkHr(Vector<UnfulfilledConsumable*>::Make(&spUnfulfilledList))
Windows::ApplicationModel::Store::LicenseInformationServer::_TimerCallback
ChkHr(GetUnfulfilledConsumablesOperationServer::GetUnfulfilledConsumablesSync( m_productId.Get(), pCV, nullptr, spUnfulfilledList.Get()))
Windows::ApplicationModel::Store::LicenseInformationServer::RefreshConsumables
m_bInitialized
Windows::ApplicationModel::Store::LicenseInformationServer::get_ProductLicenses
Windows::ApplicationModel::Store::LicenseInformationServer::get_IsActive
ChkHr(m_pProductLicenseMap.CopyTo(ppValue))
Windows::ApplicationModel::Store::LicenseInformationServer::get_ExpirationDate
Windows::ApplicationModel::Store::LicenseInformationServer::get_IsTrial
Windows::ApplicationModel::Store::LicenseInformationServer::add_LicenseChanged
ChkHr(m_evtLicenseStatusChangedEvent.Add(pHandler, pCookie))
Windows::ApplicationModel::Store::LicenseInformationServer::remove_LicenseChanged
ChkHr(m_evtLicenseStatusChangedEvent.Remove(iCookie))
Windows::ApplicationModel::Store::LicenseInformationServer::CheckForChanges
ChkHr(RefreshInternalState(false, pCV))
m_productId.CopyTo(productId)
ChkHr(m_evtLicenseStatusChangedEvent.InvokeAll())
License Info for app %s: (CV = %hs)
Windows::ApplicationModel::Store::LicenseInformationServer::GetProductId
Windows::ApplicationModel::Store::LicenseInformationServer::DumpLicensesToDebugger
  IsActive: %hs, IsTrial: %hs, App type: %u, Listner count: %u
false
VALID
  ExpirationDateTime: %u/%u/%u %02u:%02u:%02u
  LicenseManager: %hs
not set
  LicenseInstance: %hs
  Ticks until next check: %u
    %02u productId = %s, offerId = %s, productType = %u, skuId = %s, isTrial = %hs, catalogId = %s, expires %u/%u/%u
    <empty list>
    %02u inAppOfferToken = %s, transId = %s, offerId = %s
  UnfulfilledList: %hs
Windows.Foundation.Collections.IMapView`2<String, Windows.ApplicationModel.Store.ProductLicense>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>
(PeOC
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>
FChkHr(HRESULT_FROM_RPC(RpcStringBindingComposeW(nullptr, reinterpret_cast<RPC_WSTR>(L"ncalrpc"), nullptr, nullptr, nullptr, &rpcStringBinding)))
ncalrpc
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\rpchelpers.cpp
RpcHelpers::GetRpcHandle
ChkHr(HRESULT_FROM_WIN32(GetLastError()))
ChkHr(HRESULT_FROM_RPC(RpcBindingFromStringBindingW(rpcStringBinding, &rpcHandle)))
ChkHr(HRESULT_FROM_RPC(RpcBindingSetAuthInfoExW( rpcHandle, nullptr, 6, 10, 0, 0, reinterpret_cast<RPC_SECURITY_QOS *>(&qos))))
Windows::Services::Store::Internal::ConvertPUIDFromDecToHex
Conversion to UINT64 failed: %s
%016llX
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\trialownership.cpp
https://login.microsoft.com
Conversion to hex failed: %s
ChkHr(_Initialize( packageFullName, "StoreContext.RequestDownloadAndInstallStorePackagesAsync", storeIds, nullptr , nullptr , true , true , false , pszCV, pMessageDialogHelper, asyncId))
StoreContext.RequestDownloadAndInstallStorePackagesAsync
onecoreuap\enduser\winstore\licensing\winrt\lib\downloadandinstallstorepackagesoperation.cpp
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::RuntimeClassInitialize
ChkHr(_Initialize( packageFullName, pszOperationName, nullptr , nullptr , pStorePackageUpdates, install, shouldPromptForConsent, totallySilent, pszCV, pMessageDialogHelper, asyncId))
ChkHr(_Initialize( packageFullName, pszOperationName, storeIds, storePackageInstallOptions, nullptr , true , shouldPromptForConsent, totallySilent, pszCV, pMessageDialogHelper, asyncId))
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::GetResults
ChkArg(pStorePackageUpdateResult)
ChkHr(MakeAndInitialize<StorePackageUpdateResult>( pStorePackageUpdateResult, _overallState, _updateStatuses.Get(), _queueItems.Get()))
ChkHr(AsyncBase::CheckValidStateForResultsCall())
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::DoWork
ChkHr(_storeIds.As(&storeIds))
ChkHr(_messageDialogHelper.As(&messageDialogHelper))
ChkHr(_storePackageUpdates.As(&updates))
ChkHr(updates->First(&updateIterator))
ChkHr(storeContextServer->DownloadStorePackages( storeIds.Get(), _storePackageInstallOptions.Get(), cv.GetHStringReference().Get(), _shouldPromptForConsent, _totallySilent, messageDialogHelper.Get(), &_queueItems, &canceled))
ChkHr(storeContextServer->DownloadStorePackageUpdates( updates.Get(), cv.GetHStringReference().Get(), _install, _shouldPromptForConsent, messageDialogHelper.Get(), &_queueItems, &canceled))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Completed, true ))
ChkHr(_queueItems->get_Size(&size))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Canceled, true ))
No products found
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_OtherError, false ))
ChkHr(_AttachAllEventHandlers(_queueItems.Get()))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Pending, false ))
Installs to complete, continuing
Waiting for installs to complete
ChkHr(_updateStatusMap->First(&iterator))
ChkHr(StorePackageUpdateStatusVector::Make(&storePackageUpdateStatuses))
ChkHr(iterator->get_Current(&status))
ChkHr(iterator->get_HasCurrent(&hasCurrent))
ChkHr(storePackageUpdateStatuses->Append(updateStatus))
ChkHr(status->get_Value(&updateStatus))
ChkHr(storePackageUpdateStatuses->GetView(&_updateStatuses))
ChkHr(iterator->MoveNext(&hasCurrent))
ChkHr(_packageFullName.Set(packageFullName))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Completed, false ))
ChkHr(AsAgile(storeIds, &_storeIds))
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_Initialize
ChkHr(AsAgile(pMessageDialogHelper, &_messageDialogHelper))
ChkHr(AsAgile(pStorePackageUpdates, &_storePackageUpdates))
ChkHr(EventTokenHashMap::Make(&_statusChangedTokenMap))
ChkArg(_messageDialogHelper)
ChkHr(StartOperation(asyncId))
ChkHr(StorePackageUpdateStatusHashMap::Make(&_updateStatusMap))
ChkHr(items->GetAt(index, &item))
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_RefreshAllStatusesAndOverallState
ChkHr(item->get_PackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(_RefreshStatus(item.Get(), raiseEvent))
ChkHr(item->GetCurrentStatus(installStatus.GetAddressOf()))
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_RefreshStatus
ChkHr(installStatus->get_PackageInstallExtendedState(&entendedQueueState))
ChkHr(installStatus->get_PackageInstallState(&queueState))
Moving %s to final state: %d
ChkHr(installStatus->get_UpdateStatus(&newStatus))
ChkHr(_ClearEventHandler(item))
ChkHr(_updateStatusMap->Insert(packageFamilyName.Get(), newStatus, &replaced))
Status done, remaining installs: %d
ChkHr(_statusChangedTokenMap->get_Size(&size))
ChkHr(item->add_StatusChanged( Microsoft::WRL::Callback<ITypedEventHandler<StoreQueueItem*, IInspectable*>>( this, &DownloadAndInstallStorePackagesOperation::_OnStoreQueueItemStatusChanged).Get(), &regToken))
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_AttachAllEventHandlers
Attached event handler for item %s
ChkHr(_statusChangedTokenMap->Insert(packageFamilyName.Get(), regToken, &replaced))
ChkHr(_ClearEventHandler(item.Get()))
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_ClearAllEventHandlers
ChkHr(_statusChangedTokenMap->HasKey(packageFamilyName.Get(), &hasKey))
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_ClearEventHandler
ChkHr(_statusChangedTokenMap->Lookup(packageFamilyName.Get(), &regToken))
Cleared event hander for item %s
ChkHr(_statusChangedTokenMap->Remove(packageFamilyName.Get()))
ChkHr(item->remove_StatusChanged(regToken))
Got event for item with Package Family Name %s after the events were unregistered.
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_OnStoreQueueItemStatusChanged
ChkHr(_RefreshStatus(item, true ))
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.EventRegistrationToken>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StorePackageUpdateStatus>>
e/X4V
ChkHr(StringCaseInsensitiveEquals()(StorePackageUpdateLeft.PackageFamilyName, StorePackageUpdateRight.PackageFamilyName, fEquals))
onecoreuap\enduser\winstore\licensing\winrt\lib\StorePackageUpdateManagerUtils.h
StorePackageUpdateManagerUtils::StorePackageUpdateStatusEquals::operator ()
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.EventRegistrationToken>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StorePackageUpdateStatus>>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.EventRegistrationToken>>
Windows.Foundation.Collections.IMapView`2<String, Windows.Foundation.EventRegistrationToken>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IMap`2<String, Windows.Foundation.EventRegistrationToken>
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::RuntimeClassInitialize
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_UI_Popups_MessageDialog).Get(), &_messageDialogFactory))
ChkHr(_appName.Set(appName))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\messagedialoghelper.cpp
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::ShowDialog
ChkHr(GetText(hr, cv, content.GetAddressOf(), title.GetAddressOf()))
ChkHr(spMessageDialog.As(&initWithWindow))
ChkHr(_messageDialogFactory->CreateWithTitle(content.Get(), title.Get(), &spMessageDialog))
ChkHr(AddCommands(hr, spMessageDialog.Get()))
ChkHr(initWithWindow->Initialize(_hwnd))
ChkHr(BlockOnCompletion(spAsyncOperation.Get(), COWAIT_WAITALL))
ChkHr(spMessageDialog->ShowAsync(&spAsyncOperation))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::CheckDialogResults
ChkBool(pCommand != nullptr, ((HRESULT)0x80004004L))
ChkBool(spPropertyValue != nullptr, ((HRESULT)0x80004004L))
ChkHr(pCommand->get_Id(&spPropertyValue))
ChkBool(commandId == OkCommandId, ((HRESULT)0x80004004L))
ChkHr(spPropertyValue->GetInt32(&commandId))
ChkHr(spMessageDialog->ShowAsync(ppMessageDialogOperation))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::ShowDialogWithResultsAsync
ChkHr(IAPUtils::CreateUri(HStringReference(L"ms-windows-store://signin").Get(), &spUri))
ms-windows-store://signin
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_System_Launcher).Get(), &spLauncherStatics))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::AddCommands::<lambda_f504bdfa87e9e81d60fb40cb23fa8c33>::operator ()
ChkHr(pMessageDialog->get_Commands(&spCommands))
ChkHr(spLauncherStatics->LaunchUriAsync(spUri.Get(), &spAsyncOperation))
ChkHr(CreateCommand( 1020, Microsoft::WRL::Callback<Windows::UI::Popups::IUICommandInvokedHandler>( [](Windows::UI::Popups::IUICommand *) -> HRESULT { HRESULT __hr = ((HRESULT)0L);; { ComPtr<IUriRuntimeClass> spUri; { { __hr = (IAPUtils::CreateUri(HStringReference(L"ms-windows-store://signin").Get(), &spUri)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\messagedialoghelper.cpp", 138, __FSTREXP __FUNCTION__  , "ChkHr(IAPUtils::CreateUri(HStringReference(L\"ms-windows-store://signin\").Get(), &spUri))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<ILauncherStatics> spLauncherStatics; { { __hr = (GetActivationFactory(StringReference(RuntimeClass_Windows_System_Launcher).Get(), &spLauncherStatics)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\messagedialoghelper.cpp", 138, __FSTREXP __FUNCTION__  , "ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_System_Launcher).Get(), &spLauncherStatics))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<IAsyncOperation<bool>> spAsyncOperation; { { __hr = (spLauncherStatics->LaunchUriAsync(spUri.Get(), &spAsyncOperation)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\messagedialoghelper.cpp", 138, __FSTREXP __FUNCTION__  , "ChkHr(spLauncherStatics->LaunchUriAsync(spUri.Get(), &spAsyncOperation))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; } goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }).Get(), &spCommand))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::AddCommands
ChkHr(CreateCommand( 1022, nullptr, &spCommand))
ChkHr(spCommands->Append(spCommand.Get()))
ChkHr(CreateCommandWithInt32Id( 2003, DenyCommandId, nullptr, spCommand.GetAddressOf()))
ChkHr(CreateCommandWithInt32Id( 2002, OkCommandId, nullptr, spCommand.GetAddressOf()))
ChkHr(_contextString.CopyTo(value))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::get_ContextString
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::CreateCommandWithInt32Id
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Foundation_PropertyValue).Get(), spPropValueFactory.GetAddressOf()))
ChkHr(spPropValueFactory->CreateInt32(id, &spPropertyValue))
ChkHr(CreateCommand( uLabelId, pHandler, spCommand.GetAddressOf()))
ChkHr(Windows::Foundation::ActivateInstance( HStringReference(RuntimeClass_Windows_UI_Popups_UICommand).Get(), &spCommand))
ChkHr(spCommand->put_Id(spPropertyValue.Get()))
ChkHr(LoadFormattedString( uLabelId, nullptr, &pszContent))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::CreateCommand
ChkHr(spCommand->put_Invoked(pHandler))
ChkHr(spCommand->put_Label(HStringReference((const WCHAR*)pszContent).Get()))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::GetAppName
ChkArg(pszBuffer)
ChkHr(GetPackageFamilyNameFromToken(spProcessToken, &pkgFamilyNameSize, pkgFamilyName))
ChkHr(spCoreAppPrivate->GetAppDisplayName(appName.GetAddressOf()))
ChkHr(spPackageStatics->FindByPackageFamilyNameAndPackageType( HStringReference(pkgFamilyName).Get(), PackageType_Main | PackageType_Xap, &spPackages))
ChkHr(GetActivationFactory( HStringReference(RuntimeClass_Windows_Internal_StateRepository_Package).Get(), &spPackageStatics))
ChkBool(packageCount > 0, ((HRESULT)0x80004005L))
ChkHr(spPackages->get_Size(&packageCount))
ChkHr(GetActivationFactory( HStringReference(RuntimeClass_Windows_Internal_StateRepository_PackageResourceResolver).Get(), &spPackageResolverStatics))
ChkHr(spPackages->GetAt(0, &spPackage))
ChkHr(spPackageResolver->GetDisplayNameLocalized(appName.GetAddressOf()))
ChkHr(spPackageResolverStatics->Create(spPackage.Get(), &spPackageResolver))
ChkHr(GetAppName(szArgument, (sizeof(*RtlpNumberOf(szArgument)))))
ChkHr(hrCopy)
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::GetText
ChkHr(LoadFormattedString(uContentId, cv, &pszContent, &szArgument, &szArgument2))
ChkHr(StringCchPrintfW(szArgument, (sizeof(*RtlpNumberOf(szArgument))), L"0x%X", hr))
ChkHr(hstrContent.Set(pszContent))
ChkHr(LoadFormattedString( uTitleId, nullptr, &pszTitle, &szArgument))
ChkBool(LoadStringW(g_hinst, uId, szUnformattedString, (sizeof(*RtlpNumberOf(szUnformattedString)))), HRESULT_FROM_WIN32(GetLastError()))
ChkHr(hstrTitle.Set(pszTitle))
[CV:%2]
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::LoadFormattedString
ChkHr(FormatStrings(L"%1\n[CV:%2]", ppszFormattedString, pszMessage, WindowsGetStringRawBuffer(cv, nullptr)))
Windows.Internal.StateRepository.PackageResourceResolver
Windows.System.Launcher
Windows::Services::Store::BackgroundTaskOperation::RuntimeClassInitialize
ChkHr(_jsonRequest.Set(jsonRequest))
ChkHr(_cv.Set(cv))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\backgroundtaskoperation.cpp
ChkHr(_jsonResponse.CopyTo(pValue))
Windows::Services::Store::BackgroundTaskOperation::GetResults
Windows::Services::Store::BackgroundTaskOperation::DoWork
ChkHr(JsonHelpers::ParseToJsonObject(_jsonRequest.GetRawBuffer(nullptr), jsonDataObj.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(jsonDataObj, L"AppServiceName", appServiceName.GetAddressOf()))
AppServiceName
ChkHr(ActivateInstance(AppServiceConnectionRef.Get(), &pdConnection))
ChkHr(JsonHelpers::SetNamedString(jsonDataObj, L"CV", _cv.GetRawBuffer(nullptr)))
ChkHr(pdConnection->put_PackageFamilyName(purchaseAppPfn.Get()))
ChkHr(pdConnection->put_AppServiceName(appServiceName.Get()))
ChkHr(BlockOnCompletionAndGetResults(openOperation.Get(), &status))
ChkHr(pdConnection->OpenAsync(&openOperation))
ChkHr(((HRESULT)0x803F610CL))
ChkHr(((HRESULT)0x80270254L))
ChkHr(ConvertJsonObjectToPropertySet(jsonDataObj, message))
ChkHr(ActivateInstance(ValueSetRef.Get(), &message))
ChkHr(BlockOnCompletionAndGetResults(sendMessageOperation.Get(), &response))
ChkHr(pdConnection->SendMessageAsync(message.Get(), sendMessageOperation.GetAddressOf()))
ChkHr(JsonHelpers::CreateJsonObject(&jsonOutput))
ChkHr(response->get_Status(&responseStatus))
ChkHr(JsonHelpers::SetNamedNumber(jsonOutput, L"AppServiceResponseStatus", responseStatus))
AppServiceResponseStatus
ChkHr(ConvertPropertySetToJsonObject(responseMessage, jsonOutput))
ChkHr(response->get_Message(&responseMessage))
ChkHr(propertySet.As(&propertySetMap))
ChkHr(JsonHelpers::Stringify(jsonOutput, _jsonResponse.GetAddressOf()))
ChkHr(GetActivationFactory(PropertyValueRef.Get(), &propertyValueFactory))
Windows::Services::Store::BackgroundTaskOperation::ConvertJsonObjectToPropertySet
ChkHr(propertyValueFactory->CreateString(value.Get(), propValue.GetAddressOf()))
ChkHr(jsonValue->get_ValueType(&jsonType))
ChkHr(propertyValueFactory->CreateBoolean(value, propValue.GetAddressOf()))
ChkHr(jsonValue->GetBoolean(&value))
ChkHr(jsonValue->GetNumber(&value))
ChkHr(propertyValueFactory->CreateEmpty(propValue.GetAddressOf()))
ChkHr(jsonValue->Stringify(value.GetAddressOf()))
ChkHr(propertyValueFactory->CreateDouble(value, propValue.GetAddressOf()))
ChkHr(propertySetMap->Insert(keyName.Get(), propValue.Get(), &replaced))
ChkHr(HRESULT_FROM_WIN32(1630L))
Windows::Services::Store::BackgroundTaskOperation::ConvertPropertySetToJsonObject
ChkHr(propertySet.As(&propertySetIterable))
ChkHr(propertySetIterator->get_HasCurrent(&hasCurrent))
ChkHr(propertySetIterable->First(&propertySetIterator))
ChkHr(currentPair->get_Value(value.GetAddressOf()))
ChkHr(propertySetIterator->get_Current(&currentPair))
ChkHr(propValue->get_Type(&type))
ChkHr(value.As(&propValue))
ChkHr(JsonHelpers::SetNamedString(json, keyName.GetRawBuffer(nullptr), stringValue.GetRawBuffer(nullptr)))
ChkHr(propValue->GetString(stringValue.GetAddressOf()))
ChkHr(JsonHelpers::SetNamedBool(json, keyName.GetRawBuffer(nullptr), boolValue))
ChkHr(propValue->GetBoolean(&boolValue))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), doubleValue))
ChkHr(propValue->GetDouble(&doubleValue))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), int16Value))
ChkHr(propValue->GetInt16(&int16Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), int32Value))
ChkHr(propValue->GetInt32(&int32Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), static_cast<double>(int64Value)))
ChkHr(propValue->GetInt64(&int64Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), floatValue))
ChkHr(propValue->GetSingle(&floatValue))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), byteValue))
ChkHr(propValue->GetUInt8(&byteValue))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), uint16Value))
ChkHr(propValue->GetUInt16(&uint16Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), uint32Value))
ChkHr(propValue->GetUInt32(&uint32Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), static_cast<double>(uint64Value)))
ChkHr(propValue->GetUInt64(&uint64Value))
ChkHr(propertySetIterator->MoveNext(&hasCurrent))
_ConvertStoreQueueState
ChkHr(((HRESULT)0x8000000BL))
_ConvertAppInstallState
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storequeueitem.cpp
Windows::Services::Store::StoreQueueItem::RuntimeClassInitialize
ChkHr(wil::com_weak_query_nothrow(this, &weakThis))
ChkHr(_appInstallItem->add_StatusChanged(statusChangedHandler.Get(), &_statusChangedToken))
ChkHr(_appInstallItem->add_Completed(completedHandler.Get(), &_completedToken))
ChkHr(_appInstallItem->get_ProductId(value))
Windows::Services::Store::StoreQueueItem::get_ProductId
ChkHr(_appInstallItem->get_PackageFamilyName(value))
Windows::Services::Store::StoreQueueItem::get_PackageFamilyName
ChkHr(_appInstallItem->get_InstallType(&installType))
Windows::Services::Store::StoreQueueItem::get_InstallKind
ChkHr(_appInstallItem->GetCurrentStatus(&appInstallStatus))
false && "AppInstallItem returned an unexpected InstallType!"
ChkHr(appInstallStatus->get_InstallState(&appInstallState))
Windows::Services::Store::StoreQueueItem::GetCurrentStatus
ChkHr(appInstallStatus3->get_IsStaged(&isStaged))
ChkHr(appInstallStatus.As(&appInstallStatus3))
ChkHr(appInstallStatusInternal->get_IsDownloaded(&isDownloaded))
ChkHr(appInstallStatus.As(&appInstallStatusInternal))
ChkHr(_ConvertStoreQueueState(extendedState, &packageStatus.PackageUpdateState))
ChkHr(_ConvertAppInstallState(appInstallState, isStaged, isDownloaded, &state, &extendedState))
ChkHr(appInstallStatus->get_DownloadSizeInBytes(&packageStatus.PackageDownloadSizeInBytes))
ChkHr(appInstallStatus->get_BytesDownloaded(&packageStatus.PackageBytesDownloaded))
Converted Store Queue State for Package %s - AppInstallState: %d and IsStaged: %s and IsDownloaded: %s to StoreQueueItemState: %d and StoreQueueItemExtendedState: %d
ChkHr(_appInstallItem->get_PackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(appInstallStatus->get_ErrorCode(&errorCode))
ChkHr(appInstallStatus->get_PercentComplete(&percentComplete))
ChkHr(status.CopyTo(result))
ChkHr(MakeAndInitialize<StoreQueueItemStatus>(&status, state, extendedState, packageStatus, errorCode))
Windows::Services::Store::StoreQueueItem::add_Completed
ChkHr(_completedEvent.Add(handler, token))
Windows::Services::Store::StoreQueueItem::remove_Completed
ChkHr(_completedEvent.Remove(token))
Windows::Services::Store::StoreQueueItem::add_StatusChanged
ChkHr(_statusChangedEvent.Add(handler, token))
Windows::Services::Store::StoreQueueItem::remove_StatusChanged
ChkHr(_statusChangedEvent.Remove(token))
Windows::Services::Store::StoreQueueItem::CancelInstallAsync::<lambda_20c400d788d402156f2f9faf102b2a3b>::operator ()
ChkHr(spThis->_appInstallItem.As(&appInstallItem2))
ChkArg(action)
ChkHr(appInstallItem2->CancelWithTelemetry(cv.GetHStringReference().Get()))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<CancelInstallAsyncOperationName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), action, TrustLevel::BaseTrust, [spThis](CNoResult &) -> HRESULT { CVHelperIncrementOnce cv(spThis->_cv); HRESULT __hr = ((HRESULT)0L);; ComPtr<IAppInstallItem2> appInstallItem2; { { __hr = (spThis->_appInstallItem.As(&appInstallItem2)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 392, __FSTREXP __FUNCTION__  , "ChkHr(spThis->_appInstallItem.As(&appInstallItem2))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (appInstallItem2->CancelWithTelemetry(cv.GetHStringReference().Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 392, __FSTREXP __FUNCTION__  , "ChkHr(appInstallItem2->CancelWithTelemetry(cv.GetHStringReference().Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
Windows::Services::Store::StoreQueueItem::CancelInstallAsync
ChkHr(appInstallItem2->PauseWithTelemetry(cv.GetHStringReference().Get()))
Windows::Services::Store::StoreQueueItem::PauseInstallAsync::<lambda_5459d2b40bfb70f056128d7a36ecade4>::operator ()
ChkHr(MakeAsyncAction<AsyncCausalityOptions<PauseInstallAsyncOperationName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), action, TrustLevel::BaseTrust, [spThis](CNoResult &) -> HRESULT { CVHelperIncrementOnce cv(spThis->_cv); HRESULT __hr = ((HRESULT)0L);; ComPtr<IAppInstallItem2> appInstallItem2; { { __hr = (spThis->_appInstallItem.As(&appInstallItem2)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 417, __FSTREXP __FUNCTION__  , "ChkHr(spThis->_appInstallItem.As(&appInstallItem2))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (appInstallItem2->PauseWithTelemetry(cv.GetHStringReference().Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 417, __FSTREXP __FUNCTION__  , "ChkHr(appInstallItem2->PauseWithTelemetry(cv.GetHStringReference().Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
Windows::Services::Store::StoreQueueItem::PauseInstallAsync
ChkHr(appInstallItem2->RestartWithTelemetry(cv.GetHStringReference().Get()))
Windows::Services::Store::StoreQueueItem::ResumeInstallAsync::<lambda_1142cabf375a7ff171a0635a2149ec61>::operator ()
ChkHr(MakeAsyncAction<AsyncCausalityOptions<ResumeInstallAsyncOperationName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), action, TrustLevel::BaseTrust, [spThis](CNoResult &) -> HRESULT { CVHelperIncrementOnce cv(spThis->_cv); HRESULT __hr = ((HRESULT)0L);; ComPtr<IAppInstallItem2> appInstallItem2; { { __hr = (spThis->_appInstallItem.As(&appInstallItem2)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 442, __FSTREXP __FUNCTION__  , "ChkHr(spThis->_appInstallItem.As(&appInstallItem2))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (appInstallItem2->RestartWithTelemetry(cv.GetHStringReference().Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 442, __FSTREXP __FUNCTION__  , "ChkHr(appInstallItem2->RestartWithTelemetry(cv.GetHStringReference().Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
Windows::Services::Store::StoreQueueItem::ResumeInstallAsync
Windows::Services::Store::StoreQueueItem::get_IsMandatory
ChkHr(_appInstallItem.As(&item2))
ChkHr(_appInstallItem->GetCurrentStatus(&status))
ChkHr(item2->get_Mandatory(value))
ChkHr(status.As(&statusInternal))
Windows::Services::Store::StoreQueueItem::get_IsDownloaded
ChkHr(_statusChangedEvent.InvokeAll(this, nullptr))
ChkHr(statusInternal->get_IsDownloaded(value))
ChkHr(GetCurrentStatus(&status))
Windows::Services::Store::StoreQueueItem::_OnAppInstallItemStatusChanged
ChkHr(MakeAndInitialize<StoreQueueItemCompletedEventArgs>(&args, status.Get()))
Windows::Services::Store::StoreQueueItem::_OnAppInstallItemCompleted
ChkHr(_completedEvent.InvokeAll(this, args.Get()))
q}X>N
Windows.Services.Store.StoreQueueItem.ResumeInstallAsync
Windows.Services.Store.StoreQueueItem.CancelInstallAsync
Windows.Services.Store.StoreQueueItem.PauseInstallAsync
ChkHr(_storeQueueItem->get_IsMandatory(&_mandatory))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepackageupdate.cpp
Windows::Services::Store::StorePackageUpdate::RuntimeClassInitialize
Windows::Services::Store::StorePackageUpdate::get_Package
ChkArg(ppPackage)
ChkArg(pMandatory)
ChkHr(_package.CopyTo(ppPackage))
Windows::Services::Store::StorePackageUpdate::get_Mandatory
%localappdata%\Packages\Microsoft.WindowsStore_8wekyb3d8bbwe\LocalState\store.etl
%windir%\SoftwareDistribution\ReportingEvents.log
store.etl
C:\data\systemdata\etw\StoreOperational.etl
ReportingEvents.log
\\?\T:\Windows\System32\Logfiles\WMI\RtBackup\StoreOperational.etl
StoreOperational.etl
Microsoft-Windows-AppXDeploymentServer-Operational.evtx
Microsoft-Windows-AppXDeploymentServer/Operational
Microsoft-Windows-Store-Operational.evtx
Microsoft-Windows-Store/Operational
Microsoft-Windows-WindowsUpdateClient-Operational.evtx
Microsoft-Windows-WindowsUpdateClient/Operational
Microsoft-Windows-TWinUI-Operational.evtx
Microsoft-Windows-TWinUI/Operational
registry_SIH.txt
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\SIH
registry_DNSPolicy.txt
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Dnscache\Parameters\DnsPolicyConfig
%localappdata%\Microsoft\Windows\WER\ReportQueue
%localappdata%\Microsoft\Windows\WER\ReportArchive
%windir%\Logs\WindowsUpdate
%windir%\Logs\dosvc
%windir%\Logs\SIH
*.etl
%windir%\ServiceProfiles\NetworkService\AppData\Local\Microsoft\Windows\DeliveryOptimization\logs
gaming*.etl
%windir%\System32\Config\SystemProfile\AppData\Local\packages\Microsoft.GamingServices_8wekyb3d8bbwe\LocalState
\\?\S:\Deployment\DeliveryOptimization\Logs
%windir%\System32\LogFiles\WMI
WinStore
FlushTrace for %s failed
CABINET
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\wscollector.cpp
FlushTraces
ChkHr(StringCchCopyA(szDestFileNameA, (sizeof(*RtlpNumberOf(szDestFileNameA))), pszDest))
QueryTrace for %s failed
ChkHr(HRESULT_FROM_WIN32(erf.erfOper))
AddFileToCab
report.wer
winstore
GetTempPath2W failed
.report.wer.txt
PathAppendW failed
WSCollector::CollectStoreLog
%s export "%s" "%s" /y
%WINDIR%\System32\reg.exe
GetExitCodeProcess failed
Creating reg.exe process failed
ChkHr(CreateRandomAccessStreamOverStream(stream, BSOS_OPTIONS::BSOS_DEFAULT, __uuidof(**(&randAccStream)), IID_PPV_ARGS_Helper(&randAccStream)))
reg.exe process did not complete successfully. Exit Code: %d
ChkHr(spStreamReferenceStatics->CreateFromStream(randAccStream.Get(), result.GetAddressOf()))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_RandomAccessStreamReference).Get(), &spStreamReferenceStatics))
Software\Microsoft\Windows\CurrentVersion\Store
Software\Microsoft\Windows\CurrentVersion\Store\MultiVariantConfig
Software\Microsoft\Windows\CurrentVersion\Store\Configuration
Software\Policies\Microsoft\WindowsStore
Software\Microsoft\Windows\CurrentVersion\Store\CurrentIdentity
SYSTEM\CurrentControlSet\Control\SystemInformation
onecoreuap\enduser\winstore\licensing\winrt\lib\registryhelper.cpp
RegistryHelper::SetQwordValue
ChkHr(HRESULT_FROM_WIN32(::RegSetKeyValueW(root, subKey, valueName, ( 11ul ), &value, sizeof(value))))
RegistryHelper::GetStringValue
ChkHr(HRESULT_FROM_WIN32(::RegOpenKeyExW(root, subKey, 0, ((((0x00020000L)) | (0x0001) | (0x0008) | (0x0010)) & (~(0x00100000L))), &hKey)))
ChkHr(HRESULT_FROM_WIN32(::RegGetValueW(hKey, nullptr, valueName, 0x00000002, nullptr, pszBuffer, &cbData)))
ChkHr(LocalAllocBytes(cbData, &pszBuffer))
ChkHr(ULongMult(static_cast<DWORD>(wcslen(value)) + 1, sizeof(*value), &dwSize))
ChkHr(outValue.Set(pszBuffer))
ChkHr(HRESULT_FROM_WIN32(::RegSetKeyValueW(root, subKey, valueName, ( 1ul ), value, dwSize)))
RegistryHelper::SetStringValue
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storehardwaremanufacturerinfoserver.cpp
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_HardwareManufacturerId
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_StoreContentModifierId
ChkHr(_hstrHardwareManufacturerId.CopyTo(value))
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_ModelName
ChkHr(_hstrStoreContentModifierId.CopyTo(value))
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_ManufacturerName
ChkHr(_hstrModelName.CopyTo(value))
ChkHr(_hstrHardwareManufacturerId.Set(value))
ChkHr(_hstrManufacturerName.CopyTo(value))
ChkHr(_hstrStoreContentModifierId.Set(value))
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_HardwareManufacturerId
ChkHr(_hstrModelName.Set(value))
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_StoreContentModifierId
ChkHr(_hstrManufacturerName.Set(value))
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_ModelName
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_ManufacturerName
ChkHr(threadContext._PFN.Set(PFN))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\PurchaseSTAHelper.h
ChkHr(threadContext._inAppOfferToken.Set(inAppOfferToken))
ChkHr(threadContext.DoWork())
CClientSTAHelper::ProductPurchaseViaInAppOfferTokenWithDisplayData
ChkHr(threadContext._nameOverride.Set(nameOverride))
ChkHr(threadContext._devOfferId.Set(devOfferId))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\requestproductpurchasewithdisplaypropertiesoperationserver.cpp
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::RuntimeClassInitialize
ChkHr(_hstrDevOfferId.Set(devOfferId))
ChkHr(_hstrInAppOfferToken.Set(inAppOfferToken))
ChkHr(StartOperation(iAsyncId))
ChkHr(CoGetCallerTID(&_callerThreadId))
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::GetResults
ChkArg(ppPurchaseResults)
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::DoWork
ChkBool(spLicenseInfoServer != nullptr, ((HRESULT)0x803F6107L))
ChkHr(_spDisplayProperties->get_Name(nameOverride.GetAddressOf()))
ChkHr(nameOverride.Set(L""))
ChkHr(licenseInfo->get_IsTrial(&isTrial))
ChkHr(spLicenseInfoServer.As(&licenseInfo))
ChkAlloc(spPurchaseResults)
ChkHr(_CreatePurchaseResultsInformation( productPurchaseStatus, transactionId, receipt.Get(), &_spPurchaseResults))
ChkHr(spPurchaseResults->Initialize( productPurchaseStatus, transactionId, pszReceipt, _hstrDevOfferId.Get()))
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::_CreatePurchaseResultsInformation
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.PurchaseResults>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::ApplicationModel::Store::PurchaseResults *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::ApplicationModel::Store::PurchaseResults *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.PurchaseResults>
pagingInfo
GetContinuationToken
ChkHr(JsonHelpers::GetNamedString(pagingInfo, L"continuationToken", ContinuationToken))
CreateGetItemsRequest
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\collectionsserviceproxy.cpp
ChkHr(JsonHelpers::CreateJsonObject(&spBeneficiary))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"identityValue", MsaTicket))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"identityType", L"msa"))
ChkHr(JsonHelpers::CreateJsonArray(&spBeneficiaryArray))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"localTicketReference", L"0"))
ChkHr(JsonHelpers::CreateJsonObject(&spRequest))
ChkHr(JsonHelpers::AppendObject(spBeneficiaryArray, spBeneficiary))
ChkHr(JsonHelpers::SetNamedArray(spRequest, L"beneficiaries", spBeneficiaryArray))
beneficiaries
ChkHr(JsonHelpers::SetNamedBool(spRequest, L"expandSatisfyingItems", false))
expandSatisfyingItems
Valid
ChkHr(JsonHelpers::SetNamedString(spRequest, L"market", market.Get()))
ChkHr(JsonHelpers::SetNamedString(spRequest, L"validityType", L"Valid"))
validityType
CollectionsServiceProxyV6::GetCampaignId
ChkHr(UriHelper::GetUri(UriHelper::MDCollections, collectionsUriBase.GetAddressOf()))
v6.0/collections/query
ChkHr(StringCchCopyW(szQueryUri, (sizeof(*RtlpNumberOf(szQueryUri))), collectionsUriBase.GetRawBuffer(nullptr)))
ChkHr(AuthenticationInternal::GetStorePrimaryAccountTicket( 0, AuthenticationEndpoint::OneStore, PromptType::Silent, false, nullptr, authTicket.GetAddressOf(), providerType, spWebTokenRequestResult.GetAddressOf()))
ChkHr(StringCchCatW(szQueryUri, (sizeof(*RtlpNumberOf(szQueryUri))), L"v6.0/collections/query"))
ChkHr(JsonHelpers::CreateJsonArray(&productTypes))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader(authTicket.Get(), false, &httpClient))
ChkHr(JsonHelpers::AppendString(productTypes, L"Application"))
Application
productTypes
ChkHr(CreateGetItemsRequest(authTicket.GetRawBuffer(nullptr), &request))
ChkHr(JsonHelpers::SetNamedArray(request, L"productSkuIds", productSkuIds))
ChkHr(JsonHelpers::SetNamedArray(request, L"productTypes", productTypes))
ChkHr(JsonHelpers::GetNamedArray(response, L"items", &items))
ChkHr(hrPost)
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(items, &count))
skuType
ChkHr(items->GetObjectAt(i, &item))
campaignId
ChkHr(JsonHelpers::GetNamedString(item, L"skuType", skuType.GetAddressOf()))
ChkHr(JsonHelpers::AppendString(productTypes, L"UnmanagedConsumable"))
CollectionsServiceProxyV6::GetUnfulfilledConsumables
ChkHr(JsonHelpers::SetNamedString(request, L"continuationToken", continuationToken.Get()))
ChkHr(JsonHelpers::SetNamedString(request, L"parentProductId", ParentProductId))
ChkHr(Items.Append(item))
ChkHr(((HRESULT)0x83750007L))
v6.0/collections/consume
CollectionsServiceProxyV6::ConsumeConsumable
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"identityValue", authTicket.GetRawBuffer(nullptr)))
ChkHr(StringCchCatW(szQueryUri, (sizeof(*RtlpNumberOf(szQueryUri))), L"v6.0/collections/consume"))
ChkHr(JsonHelpers::SetNamedObject(request, L"beneficiary", spBeneficiary))
beneficiary
ChkHr(JsonHelpers::SetNamedString(request, L"transactionId", transactionId))
ChkHr(JsonHelpers::SetNamedString(request, L"productId", catalogProductId))
&platformDependencyName=Windows.WindowsPhone8x
&platformDependencyName=Windows.Windows8x
{productId}
&platformDependencyName=Windows.Universal
{languages}
{marketCode}
{platformDependencyNameParam}
{market}
v6/products?rank=ProductSearchApps&market={market}&languages={languages}&addOnParent={productId}&fieldsTemplate=Full{platformDependencyNameParam}
v6/products/{productId}?market={marketCode}&languages={languages}&fieldsTemplate=Full
v6/skus?rank=ContentId&alternateId={productId}&market={marketCode}&languages={languages}&fieldsTemplate=Full
v6/products?rank=PackageFamilyName&alternateId={productId}&market={marketCode}&languages={languages}&fieldsTemplate=Full
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader(ticket.Get(), true, ppHttpClient))
neutral
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\catalogserviceproxy.cpp
CSP6Internal::CreateCatalogHttpClient
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetProductDetailsPath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrUri.GetAddressOf()))
CatalogServiceProxyV6::GetProduct
ChkHr(IAPUtils::GetJsonFromURLWithHttpClient(httpClient.Get(), hstrUri.Get(), pCV, spJsonObject.GetAddressOf()))
ChkHr(CSP6Internal::CreateCatalogHttpClient(&httpClient))
CatalogServiceProxyV6::QueryCatalogForBigCatIdByPackageFullNameAndType
ChkHr(JsonHelpers::GetNamedObject(spJsonObject, L"Product", ppJsonObject))
ChkHr(GetContentId(szPackageFamilyName, cpt, &guidContentId))
ChkHr(HRESULT_FROM_WIN32(rc))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetSearchSkusByContentIdPath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrUri.GetAddressOf()))
ChkHr(GuidToStringWithoutBraces(&guidContentId, szContentId))
DisplaySkuSearchResult
ChkHr(IAPUtils::GetJsonFromURL(hstrUri.Get(), pCV, &jsonObject))
TotalResultCount
ChkHr(JsonHelpers::GetNamedObject(jsonObject, L"DisplaySkuSearchResult", &displayProductSearchResult))
ChkHr(JsonHelpers::GetNamedArray(displayProductSearchResult, L"Products", &products))
ChkHr(JsonHelpers::GetNamedInteger(displayProductSearchResult, L"TotalResultCount", (int *)&count))
ChkHr(JsonHelpers::GetNamedString(firstProduct, L"ProductId", bigCatIdOut))
ChkHr(products->GetObjectAt(0, &firstProduct))
CatalogServiceProxyV6::QueryCatalogForBigCatIdByPackageFullName
ChkHr(IAPUtils::GetMarket(hstrMarket.GetAddressOf()))
DisplayProductSearchResult
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetSearchProductsByPackageFamilyNamePath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrUri.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(firstProduct, L"ProductId", bigCatId))
ChkHr(JsonHelpers::GetNamedObject(jsonObject, L"DisplayProductSearchResult", &displayProductSearchResult))
ChkHr(UriHelper::GetUriWithPath( UriHelper::MDPurchase, HStringReference(L"v6.0/users/me/keys").Get(), purchaseKeysUri.GetAddressOf()))
v6.0/users/me/keys
ChkHr(GetB2BKey(purchaseKeysUri.Get(), serviceTicket, publisherUserId, pCV, purchaseId))
CatalogServiceProxyV6::GetCustomerPurchaseId
ChkHr(UriHelper::GetUriWithPath( UriHelper::MDCollections, HStringReference(L"v6.0/beneficiaries/me/keys").Get(), collectionKeysUri.GetAddressOf()))
v6.0/beneficiaries/me/keys
ChkHr(GetB2BKey(collectionKeysUri.Get(), serviceTicket, publisherUserId, pCV, collectionsId))
CatalogServiceProxyV6::GetCustomerCollectionsId
CatalogServiceProxyV6::GetB2BKey
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader(authTicket.Get(), true, &httpClient))
ChkHr(JsonHelpers::SetNamedString(request, L"publisherUserId", publisherUserId))
ChkHr(JsonHelpers::SetNamedString(request, L"serviceTicket", serviceTicket))
ChkBool(!_hstrUri.IsValid(), HRESULT_FROM_WIN32(1247L))
ChkHr(JsonHelpers::GetNamedString(response, L"key", key))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetSearchAddOnsPath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), _hstrUri.GetAddressOf()))
CatalogServiceProxyV6::AddOnsIterator::Initialize
CatalogServiceProxyV6::AddOnsIterator::GetNext
ChkBool(_hstrUri.IsValid(), HRESULT_FROM_WIN32(1003L))
ChkHr(GetNextBatch())
ChkHr(CSP6Internal::CreateCatalogHttpClient(&_httpClient))
ChkHr(_currentBatch->GetObjectAt(_currentItemIndex, ppJsonIAP))
CatalogServiceProxyV6::AddOnsIterator::GetNextBatch
ChkHr(StringCchPrintfW( szNextUrl, (sizeof(*RtlpNumberOf(szNextUrl))), _runningCount == 0 ? L"%ws" : L"%ws&$skip=%u", _hstrUri.GetRawBuffer(nullptr), _runningCount))
%ws&$skip=%u
ChkHr(JsonHelpers::GetNamedObject(jsonIAPs, L"DisplayProductSearchResult", &displayProductSearchResult))
ChkHr(IAPUtils::GetJsonFromURLWithHttpClient( _httpClient.Get(), HStringReference(szNextUrl).Get(), _spCV, &jsonIAPs))
ChkHr(JsonHelpers::GetNamedArray(displayProductSearchResult, L"Products", &_currentBatch))
ChkHr(JsonHelpers::GetNamedInteger(displayProductSearchResult, L"TotalResultCount", &totalResultCount))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(_currentBatch, &_currentBatchCount))
ChkHr(JsonHelpers::GetNamedObject(spAvailability, L"OrderManagementData", &orderManagementData))
OrderManagementData
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\appinfo.cpp
GetPriceInfoFromAvailability
ChkHr(JsonHelpers::GetNamedObject(orderManagementData, L"Price", &price))
Price
ChkHr(JsonHelpers::GetNamedString(price, L"CurrencyCode", &pricingInfo->CurrencyCode))
CurrencyCode
ListPrice
CurrencySymbol
ChkHr(listPrice->Stringify(&pricingInfo->Price))
ChkHr(JsonHelpers::GetNamedValue(price, L"ListPrice", &listPrice))
ChkHr(JsonHelpers::GetNamedValue(price, L"MSRP", &basePrice))
Conditions
ChkHr(basePrice->Stringify(&pricingInfo->BasePrice))
EndDate
ChkHr(JsonHelpers::GetNamedObject(spAvailability, L"Conditions", &conditions))
PreferredSkuId
ChkHr(JsonHelpers::GetNamedDateTime(conditions, L"EndDate", &pricingInfo->SaleEndDate))
GetPriceInfo
ChkHr(JsonHelpers::GetNamedString(spJson, L"PreferredSkuId", preferredSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(displaySkuAvailabilities, &count))
ChkHr(JsonHelpers::GetNamedArray(spJson, L"DisplaySkuAvailabilities", &displaySkuAvailabilities))
Availabilities
ChkHr(displaySkuAvailabilities->GetObjectAt(iSku, &item))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(availabilities, &countAvailabilities))
ChkHr(JsonHelpers::GetNamedArray(item, L"Availabilities", &availabilities))
ChkHr(JsonHelpers::GetNamedString(availability, L"SkuId", skuId.GetAddressOf()))
ChkHr(availabilities->GetObjectAt(iAvailability, &availability))
Durable
ChkHr(GetPriceInfoFromAvailability(availability, pricingInfo))
BuildStoreInAppSkuInfo
ChkAlloc(spInAppSkuInfo)
SkuType
ChkHr(JsonHelpers::GetNamedString(sku, L"SkuId", &spInAppSkuInfo->SkuId))
ChkHr(JsonHelpers::GetNamedArray(sku, L"LocalizedProperties", &skuLocalizedProperties))
ChkHr(JsonHelpers::GetNamedString(sku, L"SkuType", &spInAppSkuInfo->SkuType))
ChkHr(skuLocalizedProperties->GetObjectAt(0, &skuFirstLocalizedProperties))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(skuLocalizedProperties, &count))
ChkHr(JsonHelpers::GetNamedString(skuFirstLocalizedProperties, L"SkuTitle", &spInAppSkuInfo->Title))
SkuTitle
ChkHr(JsonHelpers::GetNamedString(skuFirstLocalizedProperties, L"SkuDescription", &spInAppSkuInfo->Description))
SkuDescription
LicensingData
ChkHr(JsonHelpers::GetNamedObject(sku, L"Properties", &skuProperties))
ChkHr(JsonHelpers::GetNamedString(skuLicensingData, L"ProductId", &spInAppSkuInfo->ProductId))
ChkHr(JsonHelpers::GetNamedObject(skuProperties, L"LicensingData", &skuLicensingData))
ChkHr(JsonHelpers::GetNamedString(skuProperties, L"CustomDeveloperData", &spInAppSkuInfo->CustomDeveloperData))
CustomDeveloperData
ChkHr(availabilities->GetObjectAt(0, &availability))
ChkHr(JsonHelpers::GetNamedArray(skuAvailability, L"Availabilities", &availabilities))
ChkHr(JsonHelpers::GetNamedObject(availability, L"Properties", &availabilityProperties))
ChkHr(GetPriceInfoFromAvailability(availability, &spInAppSkuInfo->PricingInfo))
ChkAlloc(spInAppOffer)
ExtendedData
AlternateIds
BuildStoreInAppInfo
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(alternateIds, &count))
ChkHr(JsonHelpers::GetNamedArray(product, L"AlternateIds", &alternateIds))
IdType
ChkHr(alternateIds->GetObjectAt(iId, &altId))
Value
ChkHr(JsonHelpers::GetNamedString(altId, L"IdType", type.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductId", &spInAppOffer->InAppProductId))
ChkHr(JsonHelpers::GetNamedString(altId, L"Value", &spInAppOffer->InAppOfferToken))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductType", productType.GetAddressOf()))
ProductType
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(localizedProperties, &count))
ChkHr(JsonHelpers::GetNamedArray(product, L"LocalizedProperties", &localizedProperties))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductTitle", &spInAppOffer->Name))
ChkHr(localizedProperties->GetObjectAt(0, &properties))
ChkHr(JsonHelpers::GetNamedArray(properties, L"SearchTitles", &searchTitles))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductDescription", &spInAppOffer->Description))
ChkHr(searchTitles->GetObjectAt(iTitle, &title))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(searchTitles, &countTitles))
ChkHr(JsonHelpers::GetNamedString(title, L"SearchTitleString", searchTitleString.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(title, L"SearchTitleType", titleType.GetAddressOf()))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(images, &countImages))
ChkHr(JsonHelpers::GetNamedArray(properties, L"Images", &images))
ImagePurpose
ChkHr(images->GetObjectAt(iImage, &image))
ChkHr(JsonHelpers::GetNamedString(image, L"ImagePurpose", purpose.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(image, L"Uri", &spInAppOffer->ImageUri))
ChkHr(displaySkuAvailabilities->GetObjectAt(0, &firstSkuAvail))
ChkHr(JsonHelpers::GetNamedArray(product, L"DisplaySkuAvailabilities", &displaySkuAvailabilities))
ChkHr(JsonHelpers::GetNamedObject(firstSkuAvailSku, L"Properties", &firstSkuAvailSkuProperties))
ChkHr(JsonHelpers::GetNamedObject(firstSkuAvail, L"Sku", &firstSkuAvailSku))
ChkHr(GetPriceInfo(product, &spInAppOffer->PricingInfo))
ChkHr(JsonHelpers::GetNamedString(firstSkuAvailSkuProperties, L"CustomDeveloperData", &spInAppOffer->ProductTag))
ChkAlloc(spInAppOffer->pInAppSkuList)
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(displaySkuAvailabilities, &countSkuAvailabilities))
ChkHr(BuildStoreInAppSkuInfo(skuAvailability.Get(), &spInAppSkuInformation))
ChkHr(displaySkuAvailabilities->GetObjectAt(iSkuAvailability, &skuAvailability))
StoreInfoBuilders::BuildStoreAppInfo
ChkHr(CatalogServiceProxyV6::GetProduct(pStoreCommerceServer->GetAppCatalogId(pCV), pCV, &product))
ChkHr(GuidToStringWithoutBraces(&pStoreCommerceServer->GetAppId(), wszAppId))
ChkAlloc(spStoreAppInfo)
ChkHr(IAPUtils::GetMarket(temp.GetAddressOf()))
ChkHr(temp.Set(wszAppId))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductDescription", &spStoreAppInfo->Description))
ChkHr(IAPUtils::GetLanguage(temp.GetAddressOf()))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(marketProperties, &count))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductTitle", &spStoreAppInfo->Name))
ChkHr(JsonHelpers::GetNamedInteger(marketProperty, L"MinimumUserAge", &rating))
MinimumUserAge
ChkHr(addOns.Initialize(pStoreCommerceServer, pCV))
ChkHr(GetPriceInfo(product, &spStoreAppInfo->PricingInfo))
ChkAlloc(spStoreAppInfo->pInAppOfferList)
ChkHr(addOns.GetNext(&jsonIAP))
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo>
ChkArg(pAppInformation)
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewproductinfoserver.cpp
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::Initialize
ChkHr(_hstrProductId.Set(pInAppInformation->InAppProductId))
ChkArg(pInAppInformation)
ChkHr(_hstrProductType.Set(L"Consumable"))
ChkHr(_hstrProductType.Set(L"Durable"))
ChkHr(_hstrProductType.Set(L"Unknown"))
Unknown
ChkHr(_hstrDescription.Set(pInAppInformation->Description))
ChkHr(_hstrTitle.Set(pInAppInformation->Name))
ChkAlloc(spSkuInfo = Make<StorePreviewSkuInfoServer>())
ChkHr(AgileVector<StorePreviewSkuInfo*>::Make(&spSkuInfoList))
ChkHr(spSkuInfoList->Append(spSkuInfo.Get()))
ChkHr(spSkuInfo->Initialize( locale, market, pAppInformation, pInAppInformation, pInAppSku))
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_ProductId
ChkHr(spSkuInfoList->GetView(&_spSkuInfoList))
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_ProductType
ChkHr(_hstrProductId.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_Title
ChkHr(_hstrProductType.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_Description
ChkHr(_hstrTitle.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_SkuInfoList
ChkHr(_hstrDescription.CopyTo(pValue))
ProductIdCache::RuntimeClassInitialize
ChkHr(ProductIdHashMap::Make(&hashMap))
ChkHr(hashMap.As(&_productIdTable))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productidcache.cpp
ProductIdCache::ProductIdFromInAppOfferToken
ChkHr(ProductIdFromInAppOfferTokenTable(inAppOfferToken, productId))
ChkHr(_productIdTable->Insert(inAppOfferToken, productId, &dontCare))
ChkHr(RefreshTableFromService(parentProductId, pCV))
ChkHr(_productIdTable->HasKey(inAppOfferToken, &hasKey))
ProductIdCache::AddItem
ChkReturn(_productIdTable->Lookup(inAppOfferToken, productId))
ProductIdCache::ProductIdFromInAppOfferTokenTable
ProductIdCache::RefreshTableFromService
ChkHr(CollectionsServiceProxyV6::GetUnfulfilledConsumables(parentProductId, pCV, items))
ChkHr(JsonHelpers::GetNamedString(item, L"inAppOfferToken", inAppOfferToken.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"productId", productId.GetAddressOf()))
ChkHr(AddItem(inAppOfferToken.Get(), productId.Get()))
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
Windows.Foundation.Collections.IKeyValuePair`2<String, String>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
Windows.Foundation.Collections.IMapView`2<String, String>
Windows.Foundation.Collections.IMap`2<String, String>
CClientSTAHelper::AppPurchase
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\apppurchaseoperationserver.cpp
Windows::ApplicationModel::Store::RequestAppPurchaseOperationServer::RuntimeClassInitialize
ChkHr(_hstrReceipt.CopyTo(pValue))
Windows::ApplicationModel::Store::RequestAppPurchaseOperationServer::GetResults
CClientSTAHelper::ProductPurchaseViaInAppOfferToken
Windows::ApplicationModel::Store::RequestProductPurchaseOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::RequestProductPurchaseOperationServer::GetResults
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productpurchaseoperationserver.cpp
Windows::ApplicationModel::Store::RequestProductPurchaseOperationServer::DoWork
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::RuntimeClassInitialize
CClientSTAHelper::ProductPurchaseViaInAppOfferTokenWithResults
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::GetResults
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\requestproductpurchasewithresultsoperationserver.cpp
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::_CreatePurchaseResultsInformation
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::DoWork
ChkHr(spPurchaseResults->Initialize(productPurchaseStatus, transactionId, pszReceipt, nullptr))
ChkHr(AgileVector<HSTRING>::Make(&pVector))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\loadlistingoperationserver.cpp
UnpackHStringIIterable
ChkHr(spIter->get_HasCurrent(&fHasCurrent))
ChkHr(pStrings->First(spIter.GetAddressOf()))
ChkHr(pVector->Append(hstrCurrent.Get()))
ChkHr(spIter->get_Current(hstrCurrent.GetAddressOf()))
ChkHr(pVector.As(&pIVector))
ChkHr(spIter->MoveNext(&fHasCurrent))
FilterIAPs
ChkHr(inAppOfferTokens->get_Size(&cInAppOfferTokens))
ChkHr(keywords->get_Size(&cKeywords))
ChkHr(inAppOfferTokens->GetAt(p, temp.GetAddressOf()))
ChkHr(keywords->GetAt(k, filterKeyword.GetAddressOf()))
ChkHr(pInAppInfo->spKeywords->get_Size(&cInAppOfferListKeywords))
Listing Information (after filtering, CV = %hs):
ChkHr(pInAppInfo->spKeywords->GetAt(i, inAppKeyword.GetAddressOf()))
  AppId: %s, Name: %s
DumpListingToDebugger
  Description: %s%hs
  Price: %s, Base Price: %s, Currency Symbol: %s, Currenty Code: %s
  IsUAP: %hs, Market: %s, Locale: %s, Age Rating: %u
  IsOnSale: TRUE, Sale End Date: %u/%u/%u %02u:%02u:%02u
  IsOnSale: false
    %02u offerToken = %s, productId = %s, name = %s, price = %s%s (%s), type = %u, isOnSale = %hs, tag = %s
  InAppOfferArray: %hs
      %02u skuType = %s, productId = %s, title = %s, customDeveloperData = %s, price = %s%s (%s), extendedData = %s, description = %s
      <no sku data>
CreateListingInformation
ChkHr(StoreInfoBuilders::BuildStoreAppInfo( pStoreCommerceServer, pCV, hCancel, &spStoreAppInfo))
ChkHr(pInAppOfferTokens->get_Size(&cInAppOfferTokens))
ChkHr(pKeywords->get_Size(&cKeywords))
ChkHr(spListingInformation->Initialize(spStoreAppInfo))
ChkAlloc(spListingInformation)
ChkHr(UnpackHStringIIterable(inAppOfferTokens, &_inAppOfferTokens))
Windows::ApplicationModel::Store::LoadListingOperationServer::RuntimeClassInitialize
ChkHr(UnpackHStringIIterable(keywords, &_keywords))
ChkReturn(((HRESULT)0x80040001L))
ChkArg(ppListingInformation)
ChkReturn(((HRESULT)0x80040002L))
ChkHr(CreateListingInformation( _spStoreCommerceServer.Get(), cv.Get(), _hCancelEvent, _inAppOfferTokens.Get(), _keywords.Get(), &_spListingInformation))
Windows::ApplicationModel::Store::LoadListingOperationServer::GetResults
Windows::ApplicationModel::Store::LoadListingOperationServer::DoWork
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.ListingInformation>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::ApplicationModel::Store::ListingInformation *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::ApplicationModel::Store::ListingInformation *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.ListingInformation>
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\receiptretrievaloperationserver.cpp
Windows::ApplicationModel::Store::ReceiptRetrievalOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::ReceiptRetrievalOperationServer::GetResults
ChkArg(pReceipt)
Windows::ApplicationModel::Store::ReceiptRetrievalOperationServer::DoWork
ChkHr(CopyToNotNull(_receipt, pReceipt))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), cv.Get(), IAPReceiptType_App, nullptr, authTicket.Get(), spWebTokenRequestResult.Get(), _receipt.GetAddressOf()))
ChkHr(_productId.Set(productId))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productreceiptretrievaloperationserver.cpp
Windows::ApplicationModel::Store::ProductReceiptRetrievalOperationServer::RuntimeClassInitialize
ChkHr(CopyToNotNull(_productReceipt, pReceipt))
Windows::ApplicationModel::Store::ProductReceiptRetrievalOperationServer::GetResults
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), cv.Get(), IAPReceiptType_OneProduct, _productId.Get(), authTicket.Get(), spWebTokenRequestResult.Get(), _productReceipt.GetAddressOf()))
Windows::ApplicationModel::Store::ProductReceiptRetrievalOperationServer::DoWork
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::RuntimeClassInitialize
ChkHr(Vector<UnfulfilledConsumable*>::Make(&_spUnfulfilledList))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getunfulfilledconsumablesoperationserver.cpp
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::GetResults
ChkArg(pUnfulfilledList)
ChkHr(CollectionsServiceProxyV6::GetUnfulfilledConsumables(bigCatId, pCV, items))
ChkHr(_spUnfulfilledList->GetView(pUnfulfilledList))
Unfulfilled Consumables for %s (CV = %hs):
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::GetUnfulfilledConsumablesSync
ChkHr(CMiscHelpers::StringToGuid(transactionIdString.GetRawBuffer(nullptr), &transactionId))
ChkHr(JsonHelpers::GetNamedString(item, L"transactionId", transactionIdString.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"inAppOfferToken", inAppOfferTokenString.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"productId", productIdString.GetAddressOf()))
ChkHr(pProductIdCache->AddItem(inAppOfferTokenString.Get(), productIdString.Get()))
devOfferId
ChkHr(pUnfulfilledList->Append(consumable.Get()))
ChkHr(_CreateUnfulfilledConsumable( inAppOfferTokenString.Get(), transactionId, offerIdString.Get(), &consumable))
ChkHr(GetUnfulfilledConsumablesSync( _spStoreCommerceServer->GetAppCatalogId(cv.Get()), cv.Get(), _spStoreCommerceServer->GetProductIdCache(), _spUnfulfilledList.Get()))
  %02u inAppOfferToken = %s, productId = %s, transId = %s, offerId = %s
ChkAlloc(spUnfulfilledConsumable)
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::DoWork
ChkHr(spUnfulfilledConsumable->Initialize(pszProductId, transactionId, pszDevOfferId))
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::_CreateUnfulfilledConsumable
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct Windows::Foundation::Collections::IVectorView<class Windows::ApplicationModel::Store::UnfulfilledConsumable *> *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct Windows::Foundation::Collections::IVectorView<class Windows::ApplicationModel::Store::UnfulfilledConsumable *> *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
?ChkHr(_inAppOfferToken.Set(inAppOfferToken))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\reportconsumablefulfillmentoperationserver.cpp
Windows::ApplicationModel::Store::ReportConsumableFulfillmentOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::ReportConsumableFulfillmentOperationServer::GetResults
ChkArg(pFulfillmentResult)
Windows::ApplicationModel::Store::ReportConsumableFulfillmentOperationServer::DoWork
ChkBool(pProductIdCache != nullptr, ((HRESULT)0x803F6107L))
ChkHr(pProductIdCache->ProductIdFromInAppOfferToken( _inAppOfferToken.Get(), _spStoreCommerceServer->GetAppCatalogId(cv.Get()), cv.Get(), productId.GetAddressOf()))
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.FulfillmentResult>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<enum Windows::ApplicationModel::Store::FulfillmentResult>,struct Windows::Foundation::IAsyncOperationCompletedHandler<enum Windows::ApplicationModel::Store::FulfillmentResult>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.FulfillmentResult>
ChkHr(threadContext._inAppProductId.Set(productId))
ChkHr(threadContext._inAppProductSkuId.Set(skuId))
CClientSTAHelper::ProductPurchase
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\requestproductpurchasebyskuidoperationserver.cpp
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::RuntimeClassInitialize
ChkHr(_hstrSkuId.Set(skuId))
ChkHr(_hstrProductId.Set(productId))
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::DoWork
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::GetResults
ChkHr(_CreatePurchaseResultsInformation( productPurchaseStatus, &_spPurchaseResults))
ChkHr(StoreInfoBuilders::BuildStoreAppInfo( _spStoreCommerceServer.Get(), cv.Get(), 0, &spStoreAppInfo))
ChkHr(spPurchaseResults->Initialize(static_cast<StorePreviewProductPurchaseStatus>(productPurchaseStatus)))
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::_CreatePurchaseResultsInformation
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::RuntimeClassInitialize
ChkHr(previewLicenses.CopyTo(&_mapView))
ChkHr(_skuId.Set(skuId))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\licensesatisfactionresult.cpp
ChkHr(_mapView.CopyTo(ppValue))
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::get_LicenseSatisfactionInfos
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::get_SkuId
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::get_ExtendedError
ChkHr(_skuId.CopyTo(pValue))
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::RuntimeClassInitialize
ChkHr(License->GetIsTrial(&isTrial))
ChkHr(License->GetLicenseGrantReason(&_grantReason))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\licensesatisfactioninfo.cpp
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByOpenLicense
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByDevice
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByPass
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByTrial
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedBySignedInUser
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByInstallMedia
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_IsSatisfied
onecoreuap\enduser\winstore\licensing\winrt\lib\storerequestoperation.cpp
Windows::Services::Store::StoreRequestOperation::RuntimeClassInitialize
ChkArg(ppResults)
ChkHr(_jsonData.Set(jsonData))
ChkHr(MakeAndInitialize<StoreSendRequestResult>( ppResults, _jsonResponse.Get(), _hresultOfOperation, _statusCode))
Windows::Services::Store::StoreRequestOperation::GetResults
Windows::Services::Store::StoreRequestOperation::DoWork
ChkHr(storeContextServer->SendStoreRequest( _storeContextCallerData.Get(), _requestKind, cv.GetHStringReference().Get(), _jsonData.Get(), &_statusCode, _jsonResponse.GetAddressOf()))
onecoreuap\enduser\winstore\licensing\winrt\lib\getcustomerpurchaseidoperation.cpp
Windows::Services::Store::GetCustomerPurchaseIdOperation::RuntimeClassInitialize
ChkHr(_publisherUserId.Set(publisherUserId))
ChkHr(_serviceTicket.Set(serviceTicket))
Windows::Services::Store::GetCustomerPurchaseIdOperation::GetResults
ChkArg(pCustomerPurchaseId)
ChkHr(storeContextServer->GetCustomerPurchaseId( _serviceTicket.Get(), _publisherUserId.Get(), cv.GetHStringReference().Get(), _purchaseId.GetAddressOf()))
ChkHr(::WindowsDuplicateString(_purchaseId.Get(), pCustomerPurchaseId))
Windows::Services::Store::GetCustomerPurchaseIdOperation::DoWork
onecoreuap\enduser\winstore\licensing\winrt\lib\getcustomercollectionsidoperation.cpp
Windows::Services::Store::GetCustomerCollectionsIdOperation::RuntimeClassInitialize
Windows::Services::Store::GetCustomerCollectionsIdOperation::GetResults
ChkArg(pCustomerCollectionsId)
ChkHr(storeContextServer->GetCustomerCollectionsId( _serviceTicket.Get(), _publisherUserId.Get(), cv.GetHStringReference().Get(), _collectionsId.GetAddressOf()))
ChkHr(::WindowsDuplicateString(_collectionsId.Get(), pCustomerCollectionsId))
Windows::Services::Store::GetCustomerCollectionsIdOperation::DoWork
Windows::Services::Store::GetOfflineLicensesOperation::RuntimeClassInitialize
Windows::Services::Store::GetOfflineLicensesOperation::GetResults
onecoreuap\enduser\winstore\licensing\winrt\lib\getofflinelicensesoperation.cpp
ChkHr(storeContextServer->GetOfflineLicenses( cv.GetHStringReference().Get(), results.GetAddressOf()))
ChkHr(_spAppLicense.CopyTo(ppResults))
ChkHr(JsonHelpers::ParseToJsonObject(results.GetRawBuffer(nullptr), &spResults))
Windows::Services::Store::GetOfflineLicensesOperation::DoWork
ChkHr(MakeAndInitialize<StoreAppLicense>(&_spAppLicense,  spResults))
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreAppLicense>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreAppLicense *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreAppLicense *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAppLicense>
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorelistingoperation.cpp
Windows::Services::Store::GetStoreProductOperation::RuntimeClassInitialize
Windows::Services::Store::GetStoreProductOperation::GetResults
ChkArg(ppStoreProductResult)
ChkHr(spStoreContextServer->GetProduct( cv.GetHStringReference().Get(), productJson.GetAddressOf()))
ChkHr(MakeAndInitialize<StoreProductResult>( ppStoreProductResult, _products, _hResultOfOperation))
ChkHr(JsonParser::ParseJSONStringToObject( productJson, this, queryResultsTable))
Windows::Services::Store::GetStoreProductOperation::DoWork
ChkHr(_products.As(&inspectableProducts))
Windows::Services::Store::BulkHydrateOperation::RuntimeClassInitialize
ChkHr(AsAgile(productKinds, &_productKinds))
Windows::Services::Store::BulkHydrateOperation::GetResults
onecoreuap\enduser\winstore\licensing\winrt\lib\bulkhydrateoperation.cpp
ChkHr(_results.CopyTo(ppResults))
ChkAlloc(_results)
Windows::Services::Store::BulkHydrateOperation::DoWork
ChkHr(_productKinds.As(&productKinds))
ChkHr(JsonParser::ParseJSONStringToObject( productJsonString, this, queryResultsTable))
ChkHr(storeContextServer->GetProductsWithOptions( productKinds.Get(), storeIds.Get(), _storeProductOptions.Get(), cv.GetHStringReference().Get(), productJsonString.GetAddressOf()))
MakeAndInitialize<StoreProductQueryResult>( &_results, _products, productKinds.Get(), ChkGetHr())
Windows::Services::Store::GetAssociatedStoreProductsOperation::RuntimeClassInitialize
Windows::Services::Store::GetAssociatedStoreProductsOperation::GetResults
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorelistingsforassociatedproductsoperation.cpp
ChkHr(MakeAndInitialize<GetAssociatedStoreProductsPagedOperation>( spPagedOperation.GetAddressOf(), _PFN.Get(), nullptr, _storeContext.Get(), cv.GetAnsi(), productKinds.Get(), -1, asyncId ))
Windows::Services::Store::GetAssociatedStoreProductsOperation::DoWork
ChkHr(spPagedOperation->GetResults( &hresult, &hasMoreResults, products, spNextQueryOperation))
ChkHr(BlockOnCompletion(spPagedOperation.Get()))
ChkHr(products.CopyTo(&_products))
ChkHr(hresult)
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::RuntimeClassInitialize
ChkBool(_spNextQueryOperation == nullptr, ((HRESULT)0x8000FFFFL))
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::GetResults
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorelistingsforassociatedproductspagedoperation.cpp
ChkHr(_products.CopyTo(spProducts.GetAddressOf()))
ChkHr(_spNextQueryOperation->HasMorePages(hasMorePages))
ChkBool(_spNextQueryOperation != nullptr, ((HRESULT)0x8000FFFFL))
ChkHr(_spNextQueryOperation.CopyTo(spNextPagedOperation.GetAddressOf()))
ChkBool(_storeContext == nullptr, ((HRESULT)0x8000FFFFL))
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::BeginWork
ChkHr(storeContextServer->GetAssociatedStoreProducts( productKinds.Get(), maxCountPerPage, cv.GetHStringReference().Get(), productJsonString.GetAddressOf(), &_spNextQueryOperation))
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::DoWork
ChkHr(nextOp.CopyTo(_spNextQueryOperation.ReleaseAndGetAddressOf()))
ChkHr(_spNextQueryOperation->GetNextAsync( productJsonString.GetAddressOf(), nextOp.GetAddressOf()))
ChkHr(_spNextQueryOperation->HasMorePages(&hasMorePages))
ChkHr(_products->get_Size(&countOfProducts))
MakeAndInitialize<StoreProductPagedQueryResult>( &_results, _products, productKinds.Get(), _maxCountPerPage, hasMorePages, _hresultOfOperation, _spNextQueryOperation)
onecoreuap\enduser\winstore\licensing\winrt\lib\getusercollectionoperation.cpp
Windows::Services::Store::GetUserCollectionOperation::RuntimeClassInitialize
Windows::Services::Store::GetUserCollectionOperation::GetResults
ChkArg(ppStoreProductQueryResult)
Windows::Services::Store::GetUserCollectionOperation::DoWork
ChkHr(_results.CopyTo(ppStoreProductQueryResult))
ChkHr(MakeAndInitialize<GetUserCollectionPagedOperation>( spPagedOperation.GetAddressOf(), _PFN.Get(), nullptr, _storeContext.Get(), _szCV, productKinds.Get(), -1, asyncId ))
ChkBool(_spNextQueryOperation == nullptr, ((HRESULT)0x803F6107L))
onecoreuap\enduser\winstore\licensing\winrt\lib\getusercollectionpagedoperation.cpp
Windows::Services::Store::GetUserCollectionPagedOperation::RuntimeClassInitialize
Windows::Services::Store::GetUserCollectionPagedOperation::GetResults
ChkHr(storeContextServer->GetUserCollection( productKinds.Get(), maxCountPerPage, cv.GetHStringReference().Get(), productJson.GetAddressOf(), &_spNextQueryOperation))
Windows::Services::Store::GetUserCollectionPagedOperation::DoWork
ChkHr(JsonParser::ParseJSONStringToObject( productJson, this, productQueryResultsTable))
ChkHr(_spNextQueryOperation->GetNextAsync( productJson.GetAddressOf(), nextOp.GetAddressOf()))
MakeAndInitialize<StoreProductPagedQueryResult>( &_results, _products, productKinds.Get(), _maxPageSize, hasMorePages, _hresultOfOperation, _spNextQueryOperation)
Windows::Services::Store::GetConsumableBalanceRemainingOperation::RuntimeClassInitialize
Windows::Services::Store::GetConsumableBalanceRemainingOperation::GetResults
onecoreuap\enduser\winstore\licensing\winrt\lib\getconsumablebalanceremainingoperation.cpp
ChkHr(storeContextServer->GetConsumableBalanceRemaining( _productId.Get(), cv.GetHStringReference().Get(), jsonString.GetAddressOf()))
ChkHr(MakeAndInitialize<StoreConsumableResult>( ppResults, GUID_NULL, _consumableStatus, _quantity, _hresultOfOperation ))
ChkHr(JsonParser::ParseJSONStringToObject( jsonString, this, queryResultsTable))
Windows::Services::Store::GetConsumableBalanceRemainingOperation::DoWork
Windows::Services::Store::AcquireStoreLicenseForOptionalPackageOperation::RuntimeClassInitialize
Windows::Services::Store::AcquireStoreLicenseForOptionalPackageOperation::GetResults
onecoreuap\enduser\winstore\licensing\winrt\lib\acquirestorelicenseforoptionalpackageoperation.cpp
ChkHr(MakeAndInitialize<StorePackageLicense>( &_pStorePackageLicense, _pOptionalPackage.Get(), _storeContext.Get() ))
ChkHr(MakeAndInitialize<StoreAcquireLicenseResult>( ppResults, _pStorePackageLicense.Get(), _hresultOfOperation ))
Windows::Services::Store::AcquireStoreLicenseForOptionalPackageOperation::DoWork
Windows::Services::Store::CanAcquireStoreLicenseForOptionalPackageOperation::RuntimeClassInitialize
ChkHr(_packageIdentifier.Set(packageIdentifier))
onecoreuap\enduser\winstore\licensing\winrt\lib\canacquirestorelicenseforoptionalpackageoperation.cpp
ChkHr(MakeAndInitialize<StoreCanAcquireLicenseResult>( ppResults, _licenseQueryStatus, _licensableSku.Get(), _hresultOfOperation ))
Windows::Services::Store::CanAcquireStoreLicenseForOptionalPackageOperation::GetResults
Windows::Services::Store::CanAcquireStoreLicenseForOptionalPackageOperation::DoWork
ChkHr(storeContextServer->GetPreviewLicenseResultForPackage( _packageIdentifier.Get(), cv.GetHStringReference().Get(), licenseSatisfactionResult.GetAddressOf()))
ChkHr(JsonParser::ParseJSONStringToObject( licenseSatisfactionResult, this, previewLicenseResultsTable))
Windows::Services::Store::CanAcquireStoreLicenseOperation::RuntimeClassInitialize
Windows::Services::Store::CanAcquireStoreLicenseOperation::GetResults
onecoreuap\enduser\winstore\licensing\winrt\lib\canacquirestorelicenseoperation.cpp
Windows::Services::Store::CanAcquireStoreLicenseOperation::DoWork
ChkHr(_pStoreContextServer.As(&storeContextServer2))
ChkHr(storeContextServer2->GetPreviewLicenseResultForStoreId( _productStoreId.Get(), cv.GetHStringReference().Get(), licenseSatisfactionResult.GetAddressOf()))
QuantityAvailable:
InsufficientConsumeQuantity
onecoreuap\enduser\winstore\licensing\winrt\lib\reportconsumableoperation.cpp
Windows::Services::Store::ReportConsumableOperation::RuntimeClassInitialize
ChkHr(MakeAndInitialize<StoreConsumableResult>( ppResults, _trackingId, _consumableStatus, _balanceRemaining, _hresultOfOperation ))
Windows::Services::Store::ReportConsumableOperation::GetResults
storeContextServer->ConsumeConsumable( _productId.Get(), _quantity, _trackingId, cv.GetHStringReference().Get(), jsonString.GetAddressOf())
Windows::Services::Store::ReportConsumableOperation::DoWork
ChkHr(_data->get_Size(&dataSize))
innererror
ChkHr(StringHelpers::SplitString(data.Get(), L":", quantityParts.GetAddressOf()))
ChkHr(_data->GetAt(index, data.GetAddressOf()))
ChkHr(quantityParts->GetAt(1, newQuantity.GetAddressOf()))
ChkHr(quantityParts->get_Size(&partsSize))
onecoreuap\enduser\winstore\licensing\winrt\lib\requestpurchaseoperation.cpp
Windows::Services::Store::RequestPurchaseOperation::RuntimeClassInitialize
Windows::Services::Store::RequestPurchaseOperation::GetResults
ChkHr(_storeId.Set(storeId))
ChkHr(MakeAndInitialize<StorePurchaseResult>(ppResults, _status, _hresultOfOperation))
Windows::Services::Store::RequestPurchaseOperation::DoWork
ChkHr(storeContextServer->RequestPurchase( _storeContextCallerData.Get(), _storeId.Get(), _storePurchaseProperties.Get(), _jsonData.Get(), cv.GetHStringReference().Get(), _response.GetAddressOf()))
ChkHr(_ChangeStatusStringToEnumValue())
ChkHr(JsonParser::ParseJSONStringToObject( _response, this, purchaseResultsTable))
Succeeded
ChkHr(_hresultOfOperation)
onecoreuap\enduser\winstore\licensing\winrt\lib\getisanyskuinstalledoperation.cpp
Windows::Services::Store::GetIsAnySkuInstalledOperation::RuntimeClassInitialize
Windows::Services::Store::GetIsAnySkuInstalledOperation::GetResults
ChkArg(pResults)
Windows::Services::Store::GetIsAnySkuInstalledOperation::DoWork
ChkHr(storeContextServer->IsStoreProductInstalled( _productStoreId.Get(), cv.GetHStringReference().Get(), &_isInstalled))
Windows::Services::Store::GetAppAndSupplementalStorePackageUpdatesOperation::RuntimeClassInitialize
ChkArg(ppUpdateList)
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getappandsupplementalstorepackageupdatesoperation.cpp
Windows::Services::Store::GetAppAndSupplementalStorePackageUpdatesOperation::GetResults
Windows::Services::Store::GetAppAndSupplementalStorePackageUpdatesOperation::DoWork
ChkHr(storeContextServer->GetAppAndOptionalStorePackageUpdates(cv.GetHStringReference().Get(), &queuedItems))
Windows::Services::Store::FindStoreProductForPackageOperation::RuntimeClassInitialize
Windows::Services::Store::FindStoreProductForPackageOperation::GetResults
onecoreuap\enduser\winstore\licensing\winrt\lib\findstoreproductforpackageoperation.cpp
Windows::Services::Store::FindStoreProductForPackageOperation::DoWork
ChkHr(MakeAndInitialize<StoreProductResult>(ppResults, _products, _hresultOfOperation))
ChkHr(storeContextServer->GetProductForPackage( productKinds.Get(), packageFullName.Get(), cv.GetHStringReference().Get(), productJson.GetAddressOf()))
ChkHr(_package->get_Id(packageId.GetAddressOf()))
ChkHr(_packageFamilyName.Set(packageFamilyName))
onecoreuap\enduser\winstore\licensing\winrt\lib\getassociatedstorequeueitemsoperation.cpp
Windows::Services::Store::GetAssociatedStoreQueueItemsOperation::RuntimeClassInitialize
ChkHr(newOrder->First(&iter))
ChkHr(AgileVector<HSTRING>::Make(&_newOrder))
ChkHr(_newOrder->Append(productId.Get()))
ChkHr(iter->get_Current(&item))
Attempting to set the install order to: %hs
ChkHr(StringHelpers::Join(_newOrder.Get(), false, productIdList.GetAddressOf()))
Windows::Services::Store::GetAssociatedStoreQueueItemsOperation::GetResults
ChkArg(result)
ChkHr(spStoreContextServer.As(&spStoreContextServer3))
ChkHr(_queueItems.CopyTo(result))
ChkHr(spStoreContextServer3->SetInstallOrderForAssociatedStoreQueueItems( cv.GetHStringReference().Get(), _newOrder.Get()))
Windows::Services::Store::GetAssociatedStoreQueueItemsOperation::DoWork
ChkHr(spStoreContextServer->GetAssociatedStoreQueueItems( cv.GetHStringReference().Get(), &_queueItems))
Windows::Services::Store::GetStoreQueueItemsOperation::RuntimeClassInitialize
Windows::Services::Store::GetStoreQueueItemsOperation::GetResults
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorequeueitemsoperation.cpp
ChkHr(spStoreContextServer->GetStoreQueueItems( storeIds.Get(), cv.GetHStringReference().Get(), &_queueItems))
Windows::Services::Store::GetStoreQueueItemsOperation::DoWork
onecoreuap\enduser\winstore\licensing\winrt\lib\requeststorerateandreviewoperation.cpp
Windows::Services::Store::RequestStoreRateAndReviewOperation::RuntimeClassInitialize
ChkHr(MakeAndInitialize<StoreRateAndReviewResult>( ppResults, _status, _jsonResponse.Get(), _wasUpdated, _hresultOfOperation))
Windows::Services::Store::RequestStoreRateAndReviewOperation::GetResults
status
updated
Windows::Services::Store::RequestStoreRateAndReviewOperation::DoWork
ChkHr(storeContextServer->SendStoreRequest( _storeContextCallerData.Get(), 16, cv.GetHStringReference().Get(), nullptr, &statusCode, _jsonResponse.GetAddressOf()))
Request Rate and Review Operation failed to get any status due to a purchase app not install error.
ChkHr(JsonParser::ParseJSONStringToObject( _jsonResponse, this, requestStoreRateAndReviewTable))
ChkHr(_jsonResponse.Set(LR"({"status": "aborted"})"))
{"status": "aborted"}
aborted
success
Error
networkError
onecoreuap\enduser\winstore\licensing\winrt\lib\storeuninstallstorepackageoperation.cpp
Windows::Services::Store::StoreUninstallStorePackageResult::get_ExtendedError
Windows::Services::Store::UninstallStorePackageOperation::RuntimeClassInitialize
Windows::Services::Store::StoreUninstallStorePackageResult::get_Status
ChkArg(results)
ChkHr(_packageFamilyNameToUninstall.Set(packageFamilyNameToUninstall))
ChkHr(MakeAndInitialize<StoreUninstallStorePackageResult>( &result, _resultCode, _resultStatus ))
Windows::Services::Store::UninstallStorePackageOperation::GetResults
ChkHr(storeContextServer->UninstallStorePackage( _storeId.Get(), _packageFamilyNameToUninstall.Get(), cv.GetHStringReference().Get(), _shouldPrompt, _dialogHelper.Get(), &_resultStatus ))
ChkHr(result.CopyTo(results))
Windows::Services::Store::UninstallStorePackageOperation::DoWork
GetFormattedPriceUsingCurrencyFormatter
ChkHr(GetFormattedPriceUsingCurrencyFormatter( dblPrice, currencyCode, locale, region, formattedPrice))
ChkHr(userLocale.Set(locale))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\priceformat.cpp
ChkHr(_GetCurrencyFormatter(currencyCode, userLocale.Get(), region, &spNumberFormatter))
ChkHr(userLocale.Set(szUserLocale))
ChkHr(spNumberFormatter->FormatDouble(price, formattedPrice))
IsTrial
DevOfferId
CampaignId
StartDate
AcquiredDate
Windows::Services::Store::StoreCollectionData::RuntimeClassInitialize
TrialTimeRemaining
Windows::Services::Store::StoreCollectionData::get_IsTrial
onecoreuap\enduser\winstore\licensing\winrt\lib\storecollectiondata.cpp
Windows::Services::Store::StoreCollectionData::get_CampaignId
::WindowsDuplicateString(_campaignId.Get(), pValue)
Windows::Services::Store::StoreCollectionData::get_DeveloperOfferId
::WindowsDuplicateString(_devOfferId.Get(), pValue)
Windows::Services::Store::StoreCollectionData::get_StartDate
Windows::Services::Store::StoreCollectionData::get_AcquiredDate
Windows::Services::Store::StoreCollectionData::get_TrialTimeRemaining
Windows::Services::Store::StoreCollectionData::get_EndDate
Windows::Services::Store::StoreCollectionData::get_ProductId
::WindowsDuplicateString(_productId.Get(), pValue)
Windows::Services::Store::StoreCollectionData::get_SkuId
::WindowsDuplicateString(_skuId.Get(), pValue)
jsonValue->GetString(timeString.GetAddressOf())
Windows::Services::Store::JsonParser::ParseDate
StringToFileTime(timeString.GetRawBuffer(nullptr), &ft, FALSE)
ChkHr(JsonParser::ParseJSONToObject( json, this, imageTable))
Caption
onecoreuap\enduser\winstore\licensing\winrt\lib\storeimage.cpp
Windows::Services::Store::StoreImage::RuntimeClassInitialize
http:
Windows::Services::Store::StoreImage::get_Uri
ChkHr(IAPUtils::CreateUri(uri.Get(), &_spUri))
ChkHr(WindowsConcatString(HStringReference(L"http:").Get(), _ImageUri.Get(), uri.GetAddressOf()))
::WindowsDuplicateString(_Purpose.Get(), pValue)
ChkHr(_spUri.CopyTo(ppValue))
Windows::Services::Store::StoreImage::get_Width
Windows::Services::Store::StoreImage::get_ImagePurposeTag
::WindowsDuplicateString(_Caption.Get(), pValue)
Windows::Services::Store::StoreImage::get_Height
Windows::Services::Store::StoreImage::get_Caption
PreviewImage
VideoPurpose
Windows::Services::Store::StoreVideo::RuntimeClassInitialize
ChkHr(JsonParser::ParseJSONToObject( json, this, videoTable))
Windows::Services::Store::StoreVideo::get_Uri
onecoreuap\enduser\winstore\licensing\winrt\lib\storevideo.cpp
Windows::Services::Store::StoreVideo::get_VideoPurposeTag
ChkHr(WindowsConcatString(HStringReference(L"http:").Get(), _VideoUri.Get(), uri.GetAddressOf()))
Windows::Services::Store::StoreVideo::get_Height
Windows::Services::Store::StoreVideo::get_Width
_spPreviewImage.CopyTo(ppValue)
Windows::Services::Store::StoreVideo::get_Caption
jsonValue->GetObject(jsonObject.GetAddressOf())
Windows::Services::Store::StoreVideo::get_PreviewImage
MakeAndInitialize<T>(obj.GetAddressOf(), DEBUG_PARSER_PARAMETERS_ARGS jsonObject)
Windows::Services::Store::JsonParser::ParseComPtr
FulfillmentType
BundledSkus
SkuDisplayRank
Windows::Services::Store::StoreSku::RuntimeClassInitialize
RecurrencePolicy
ChkHr(Vector<HSTRING>::Make(&_bundledSkuIds))
onecoreuap\enduser\winstore\licensing\winrt\lib\storesku.cpp
ChkHr(JsonParser::ParseJSONToObject( json, this, DisplaySkuAvailabilitiesTable))
ChkHr(IAPUtils::BuildStoreId( _productId.Get(), _skuId.Get(), nullptr, _storeId.GetAddressOf()))
ChkHr(_SortAvailabilities())
ChkHr(::WindowsDuplicateString(_storeId.Get(), pValue))
Windows::Services::Store::StoreSku::get_StoreId
Windows::Services::Store::StoreSku::get_Title
Windows::Services::Store::StoreSku::get_Language
Windows::Services::Store::StoreSku::get_IsTrial
Windows::Services::Store::StoreSku::get_Description
Windows::Services::Store::StoreSku::get_CustomDeveloperData
::WindowsDuplicateString(_customDeveloperData.Get(), pValue)
Windows::Services::Store::StoreSku::get_Videos
Windows::Services::Store::StoreSku::get_Images
Windows::Services::Store::StoreSku::get_Availabilities
_availabilities->GetView(ppValue)
ChkHr(_availabilities->First(&iter))
Windows::Services::Store::StoreSku::get_Price
ChkHr(availability->get_Price(ppValue))
ChkHr(iter->get_Current(&availability))
Windows::Services::Store::StoreSku::get_SubscriptionInfo
Windows::Services::Store::StoreSku::get_IsSubscription
Windows::Services::Store::StoreSku::get_IsInUserCollection
ChkHr(_subscriptionInfo.CopyTo(ppValue))
ChkHr(_bundledSkuIds->GetView(ppValue))
Windows::Services::Store::StoreSku::get_BundledSkus
ChkHr(_collectionData.CopyTo(ppValue))
Windows::Services::Store::StoreSku::get_CollectionData
ChkHr(_storeContext->GetIsAnySkuInstalledAsync(_storeId.Get(), ppOperation))
Windows::Services::Store::StoreSku::GetIsInstalledAsync
Windows::Services::Store::StoreSku::RequestPurchaseWithPurchasePropertiesAsync
Windows::Services::Store::StoreSku::RequestPurchaseAsync
Windows::Services::Store::StoreSku::set_ProductId
ChkHr(_productId.Set(value))
ChkHr(availabilityIter->get_HasCurrent(&hasCurrent))
ChkHr(_availabilities->First(&availabilityIter))
ChkHr(availability.As(&availabilityPrivate))
ChkHr(availabilityIter->get_Current(&availability))
ChkHr(availabilityIter->MoveNext(&hasCurrent))
ChkHr(availabilityPrivate->set_ProductIdSkuId(_productId.Get(), _skuId.Get()))
::WindowsDuplicateString(_fulfillmentType.Get(), pValue)
Windows::Services::Store::StoreSku::get_SkuId
ChkHr(_availabilities.As(&inspectableProducts))
Windows::Services::Store::StoreSku::get_FulfillmentType
ChkHr(Vector<StoreAvailability*>::Make(&sortedAvailabilities))
Windows::Services::Store::StoreSku::SetStoreContext
ChkHr(_availabilities->get_Size(&size))
Windows::Services::Store::StoreSku::_SortAvailabilities
ChkHr(currentAvailability.As(&currentAvailabilityPrivate))
ChkHr(_availabilities->GetAt(index, &currentAvailability))
ChkHr(sortedAvailabilities->Append(bestAvailability.Get()))
ChkHr(currentAvailabilityPrivate->get_Rank(&currentRank))
ChkHr(_availabilities->RemoveAt(bestIndex))
BigId
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreAvailability>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreAvailability>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreAvailability>
Windows::Services::Store::PurchaseEventArgsRedstone::RuntimeClassInitialize
ChkHr(_request.Set(jsonRequest))
ChkHr(_response.Set(jsonInitialResponse))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchaseeventargsredstone.cpp
Windows::Services::Store::PurchaseEventArgsRedstone::get_JsonRequest
_request.CopyTo(json)
Windows::Services::Store::PurchaseEventArgsRedstone::get_JsonResponse
_response.CopyTo(json)
Windows::Services::Store::PurchaseEventArgsRedstone::put_JsonResponse
_response.Set(json)
_modalManager != nullptr
Windows::Services::Store::PurchaseEventArgsRedstone::SetSize
ChkHr(ProductLicenseHashMap::Make(&m_spHashMap))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productlicensemap.cpp
Windows::ApplicationModel::Store::CProductLicenseMap::Initialize
ChkAlloc(spProductLicense)
ChkHr(pLicenseInstance->GetIsActive(&isActive))
ChkHr(spAppAddOn->GetProductId(&pszProductId))
ChkHr(spProductLicense->Initialize(spAppAddOn.Get()))
ChkHr(m_spHashMap->Insert(strProductId.Get(), spProductLicense.Get(), &replaced))
ChkHr(strProductId.Set(pszProductId))
ChkHr(pUnfulfilledList->GetAt(lProduct, spUnfulfilledConsumable.GetAddressOf()))
ChkHr(pUnfulfilledList->get_Size(&size))
ChkHr(spUnfulfilledConsumable->get_ProductId(strProductId.GetAddressOf()))
ChkHr(spProductLicense->Initialize(spUnfulfilledConsumable.Get()))
ChkHr(m_spHashMap->get_Size(pcItems))
ChkHr(m_spHashMap.As(&m_spIterable))
ChkHr(m_spHashMap->HasKey(hstrKey, pfHasKey))
Windows::ApplicationModel::Store::CProductLicenseMap::get_Size
ChkAlloc(spNewProductLicense)
Windows::ApplicationModel::Store::CProductLicenseMap::HasKey
ChkHr(spNewProductLicense->InitializeInvalid(hstrKey))
Windows::ApplicationModel::Store::CProductLicenseMap::Lookup
Windows::ApplicationModel::Store::CProductLicenseMap::Split
ChkHr(m_spHashMap->GetView(&spHashView))
ChkHr(m_spIterable->First(ppIterator))
ChkHr(spHashView->Split(firstPartition, secondPartition))
ChkHr(m_spHashMap->GetView(view))
Windows::ApplicationModel::Store::CProductLicenseMap::First
Windows::ApplicationModel::Store::CProductLicenseMap::GetView
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductLicense>>
<??YzU
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductLicense>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductLicense>>
Windows.Foundation.Collections.IMap`2<String, Windows.ApplicationModel.Store.ProductLicense>
onecoreuap\enduser\winstore\licensing\winrt\lib\storepackageupdateresult.cpp
Windows::Services::Store::StorePackageUpdateResult::RuntimeClassInitialize
ChkArg(pUpdateState)
ChkHr(queueItems->GetView(&_spQueueItems))
ChkArg(ppUpdateStatuses)
Windows::Services::Store::StorePackageUpdateResult::get_OverallState
Windows::Services::Store::StorePackageUpdateResult::get_StorePackageUpdateStatuses
Windows::Services::Store::StorePackageUpdateResult::get_StoreQueueItems
ChkArg(ppQueueItems)
ChkHr(_spQueueItems.CopyTo(ppQueueItems))
Windows::Services::Store::StoreQueueItemStatus::get_PackageInstallState
Windows::Services::Store::StoreQueueItemStatus::get_PackageInstallExtendedState
onecoreuap\enduser\winstore\licensing\winrt\lib\storequeueitemstatus.cpp
ChkHr(StorePackageUpdateManagerUtils::StorePackageUpdateStatusLifetimeTraits::Construct(value, _status))
Windows::Services::Store::StoreQueueItemStatus::get_UpdateStatus
Windows::Services::Store::StoreQueueItemStatus::get_ExtendedError
Windows::Services::Store::StoreQueueItemCompletedEventArgs::get_Status
onecoreuap\enduser\winstore\licensing\winrt\lib\storequeueitemcompletedeventargs.cpp
UniversalStoreInApp
{client}
CClientSTAHelper::GetAddOnProduct
ChkHr(CatalogServiceProxyV6::GetProduct( _inAppProductId.Get(), _pCV, &spProduct))
ChkHr(addOns.Initialize(_spStoreCommerceServer.Get(), _pCV))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchasestahelper.cpp
ChkHr(JsonHelpers::GetNamedArray(spProduct, L"AlternateIds", &spAlternateIds))
ChkHr(addOns.GetNext(&spProduct))
ChkHr(spAlternateIds->GetObjectAt(i, &spAlternateId))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spAlternateIds, &alternateIdsSize))
ChkHr(JsonHelpers::GetNamedString(spAlternateId, L"Value", alternateIdValue.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spAlternateId, L"IdType", alternateIdType.GetAddressOf()))
Purchase
ChkBool((nullptr != *ppProduct), ((HRESULT)0x803F6102L))
CClientSTAHelper::GetBigCatIds
ChkHr(GetAddOnProduct(&spProduct))
ChkHr(pProductIdCache->AddItem( _inAppOfferToken.Get(), hstrProductId.Get()))
ChkHr(JsonHelpers::GetNamedString(spProduct, L"ProductId", hstrProductId.GetAddressOf()))
ChkHr((hrGetProduct == ((HRESULT)0x80190194L)) ? ((HRESULT)0x803F6101L) : hrGetProduct)
ChkHr(hstrProductId.Set(_spStoreCommerceServer->GetAppCatalogId(_pCV)))
ChkHr(hstrPreferredSkuId.Set(_inAppProductSkuId.Get()))
ChkHr(JsonHelpers::GetNamedString(spProduct, L"ProductType", hstrProductType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedArray(spProduct, L"DisplaySkuAvailabilities", &spDisplaySkuAvailabilities))
ChkHr(JsonHelpers::GetNamedString(spProduct, L"PreferredSkuId", hstrPreferredSkuId.GetAddressOf()))
ChkHr(spDisplaySkuAvailabilities->GetObjectAt(i, &spDisplaySkuAvailability))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spDisplaySkuAvailabilities, &displaySkuAvailabilitiesSize))
ChkHr(JsonHelpers::GetNamedString(spSku, L"SkuId", hstrSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedObject(spDisplaySkuAvailability, L"Sku", &spSku))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spAvailabilities, &availabilitiesSize))
ChkHr(JsonHelpers::GetNamedArray(spDisplaySkuAvailability, L"Availabilities", &spAvailabilities))
Actions
ChkHr(spAvailabilities->GetObjectAt(j, &spAvailability))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spActions, &actionsSize))
ChkHr(JsonHelpers::GetNamedArray(spAvailability, L"Actions", &spActions))
AvailabilityId
ChkHr(spActions->GetStringAt(k, action.GetAddressOf()))
ChkBool(hstrProductId.IsValid() && hstrSkuId.IsValid() && hstrAvailabilityId.IsValid(), (_apiType == ClientApiType_AppPurchase) ? ((HRESULT)0x803F6101L) : ((HRESULT)0x803F6102L))
ChkHr(JsonHelpers::GetNamedString(spAvailability, L"AvailabilityId", hstrAvailabilityId.GetAddressOf()))
CClientSTAHelper::DoWork
orderId
ChkHr(GetBigCatIds(productId.GetAddressOf(), skuId.GetAddressOf(), availabilityId.GetAddressOf(), productType.GetAddressOf()))
ChkHr(appProductId.Set(_spStoreCommerceServer->GetAppCatalogId(_pCV)))
ChkHr(IAPUtils::BuildStoreId(productId.Get(), skuId.Get(), availabilityId.Get(), storeId.GetAddressOf()))
ChkHr(_spStoreCommerceServer->GetExclusiveLockForProduct(productId.Get(), &pendingPurchaseOperationForProduct))
ChkHr(JsonHelpers::SetNamedString(jsonTemp, L"DevOfferId", _devOfferId.Get()))
ChkHr(JsonHelpers::CreateJsonObject(jsonTemp.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(jsonTemp, overrideJsonRequest.GetAddressOf()))
ChkHr(JsonHelpers::SetNamedString(jsonTemp, L"StoreId", storeId.Get()))
ChkHr(MakeAndInitialize<StorePurchaseProperties>(&storePurchaseProperties, _nameOverride.Get()))
ChkHr(storeId.Set(L""))
ChkHr(BlockOnCompletionAndGetResults(purchaseOperation.Get(), jsonResponse.GetAddressOf()))
ChkHr(MakeAndInitialize<PurchaseOperation>( &purchaseOperation, _PFN.Get(), appProductId.Get(), storeId.Get(), storePurchaseProperties.Get(), overrideJsonRequest.Get(), nullptr, cv.GetHStringReference().Get(), _parentHwnd, _hasPreviewCapability, InvokedApi_RequestPurchase.Get() ))
_transactionId.IsValid()
ChkHr(JsonParser::ParseJSONStringToObject( jsonResponse, this, purchaseResultsTable))
_purchaseStatus == ProductPurchaseStatus_NotPurchased
ChkHr(ChangeStatusStringToEnumValue())
ChkHr(WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicket( 0, WinStoreAuth::AuthenticationEndpoint::OneStore, WinStoreAuth::PromptType::Silent, false, nullptr, authTicket.GetAddressOf(), providerType, spWebTokenRequestResult.GetAddressOf()))
ChkHr(UuidFromStringW((PWCHAR)_transactionId.GetRawBuffer(nullptr), _pTransactionId))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), _pCV, IAPReceiptType_App, nullptr, authTicket.Get(), spWebTokenRequestResult.Get(), _pReceipt))
authTicket.IsValid()
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), _pCV, IAPReceiptType_OneProduct, _inAppOfferToken.Get(), authTicket.Get(), spWebTokenRequestResult.Get(), _pReceipt))
ChkHr(_hstrReceiptXml.Set(receiptXml))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchaseresultsserver.cpp
Windows::ApplicationModel::Store::PurchaseResultsServer::Initialize
Windows::ApplicationModel::Store::PurchaseResultsServer::get_Status
ChkHr(_hstrOfferId.Set(offerId))
Windows::ApplicationModel::Store::PurchaseResultsServer::get_TransactionId
ChkArg(pProductPurchaseStatus)
Windows::ApplicationModel::Store::PurchaseResultsServer::get_ReceiptXml
ChkArg(transactionId)
Windows::ApplicationModel::Store::PurchaseResultsServer::get_OfferId
ChkHr(_hstrReceiptXml.CopyTo(hstrReceiptXml))
ChkHr(_hstrOfferId.CopyTo(hstrOfferId))
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::Initialize
ChkArg(pInAppSkuInformation)
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewskuinfoserver.cpp
ChkHr(_hstrSkuType.Set(pInAppSkuInformation->SkuType))
ChkHr(_hstrSkuId.Set(pInAppSkuInformation->SkuId))
ChkHr(_hstrDescription.Set(pInAppSkuInformation->Description))
ChkHr(_hstrTitle.Set(pInAppSkuInformation->Title))
ChkHr(ReceiptHelpers::GetFormattedPrice( locale, market, &pInAppSkuInformation->PricingInfo, false , _hstrFormattedListPrice.GetAddressOf()))
ChkHr(_hstrCurrencyCode.Set(pInAppSkuInformation->PricingInfo.CurrencyCode))
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_SkuId
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_ProductId
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_SkuType
ChkHr(_hstrSkuId.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_Title
ChkHr(_hstrSkuType.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_CustomDeveloperData
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_Description
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_CurrencyCode
ChkHr(_hstrCustomDeveloperData.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_FormattedListPrice
ChkHr(_hstrCurrencyCode.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_ExtendedData
ChkHr(_hstrFormattedListPrice.CopyTo(pValue))
ChkHr(_hstrExtendedData.CopyTo(pValue))
Windows::ApplicationModel::Store::ListingInformationServer::Initialize
ChkArg(pAppInfo)
ChkHr(CMiscHelpers::StringToGuid(WindowsGetStringRawBuffer(pAppInfo->Id, nullptr), &_id))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\listinginformationserver.cpp
ChkHr(_hstrLocale.Set(pAppInfo->Locale))
ChkHr(_hstrCurrentMarket.Set(pAppInfo->Market))
ChkHr(_hstrDescription.Set(pAppInfo->Description))
ChkHr(_hstrName.Set(pAppInfo->Name))
ChkHr((AgileHashMap<HSTRING, ProductListing*,StringUpperCaseHash, StringCaseInsensitiveEquals>::Make(&_spInAppOffers)))
ChkHr(ReceiptHelpers::GetFormattedPrice(pAppInfo->Locale, pAppInfo->Market, &pAppInfo->PricingInfo, false , _hstrFormattedPrice.GetAddressOf()))
ChkReturn(((HRESULT)0x8007000EL))
ChkAlloc(_spInAppOffers)
ChkHr(_spInAppOffers->Insert( pInAppOffer->InAppOfferToken, spProductListing.Get(), &replaced ))
ChkHr(spProductListing->Initialize(_hstrLocale.Get(), _hstrCurrentMarket.Get(), pAppInfo->IsUAP, pInAppOffer))
ChkHr(_hstrCurrencyCode.Set(pAppInfo->PricingInfo.CurrencyCode))
ChkHr(ReceiptHelpers::GetFormattedPrice(pAppInfo->Locale, pAppInfo->Market, &pAppInfo->PricingInfo, true , _hstrFormattedBasePrice.GetAddressOf()))
ChkHr(_hstrCurrentMarket.CopyTo(pValue))
Windows::ApplicationModel::Store::ListingInformationServer::get_CurrentMarket
Windows::ApplicationModel::Store::ListingInformationServer::get_ProductListings
Windows::ApplicationModel::Store::ListingInformationServer::get_Description
Windows::ApplicationModel::Store::ListingInformationServer::get_FormattedPrice
ChkHr(_spInAppOffers->GetView(ppValue))
Windows::ApplicationModel::Store::ListingInformationServer::get_Name
ChkHr(_hstrFormattedPrice.CopyTo(pValue))
Windows::ApplicationModel::Store::ListingInformationServer::get_AgeRating
ChkHr(_hstrName.CopyTo(pValue))
Windows::ApplicationModel::Store::ListingInformationServer::get_SaleEndDate
Windows::ApplicationModel::Store::ListingInformationServer::get_FormattedBasePrice
Windows::ApplicationModel::Store::ListingInformationServer::get_CurrencyCode
Windows::ApplicationModel::Store::ListingInformationServer::get_IsOnSale
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductListing>>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductListing>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductListing>>
Windows.Foundation.Collections.IMapView`2<String, Windows.ApplicationModel.Store.ProductListing>
Windows.Foundation.Collections.IMap`2<String, Windows.ApplicationModel.Store.ProductListing>
IAPReceiptType_OneProduct
IAPReceiptType_App
ReceiptHelpers::LicenseParseReceiptResponse
ChkHr(::ParseReceiptResponse(pbResponse, cbResponse, &tmpReceiptData, &cbReceiptData))
ChkAlloc(spReceiptData)
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\receipthelpers.cpp
ReceiptHelpers::GetPublisherId
ChkHr(CatalogServiceProxyV6::GetProduct(pStoreCommerceServer->GetAppCatalogId(pCV), pCV, &spJsonObject))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(jsonSKUAvailabilities, &cchSKUAvailablilities))
ChkHr(spJsonObject->GetNamedArray(HStringReference(L"DisplaySkuAvailabilities").Get(), &jsonSKUAvailabilities))
ChkHr(jsonSKUAvailability->GetNamedObject(HStringReference(L"Sku").Get(), &jsonSKU))
ChkHr(jsonSKUAvailabilities->GetObjectAt(0, &jsonSKUAvailability))
ChkHr(jsonProperties->GetNamedObject(HStringReference(L"LicensingData").Get(), &jsonLicensingData))
ChkHr(jsonSKU->GetNamedObject(HStringReference(L"Properties").Get(), &jsonProperties))
ChkHr(jsonLicensingData->GetNamedObject(HStringReference(L"LegacyWindowsPhoneLicensingData").Get(), &jsonLegacyWindowsPhoneLicensingData))
LegacyWindowsPhoneLicensingData
ChkHr(jsonLegacyWindowsPhoneLicensingData->GetNamedString(HStringReference(L"PublisherId").Get(), strPublisherId.GetAddressOf()))
PublisherId
ChkHr(UriHelper::GetUri(UriHelper::MDGetAppReceiptsDesktop, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrServiceUri.GetAddressOf()))
{receiptType}
ChkHr(CWSHttpHelper::AddTHAdditionalHeaders(arrRequestHeaders))
ReceiptHelpers::FetchDesktopReceipt
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrRequestHeaders, L"MS-SiteName", WindowsGetStringRawBuffer(authDomain, nullptr)))
MS-SiteName
ChkHr(hrRequest)
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrRequestHeaders, L"MS-CV", cv.GetUnicode()))
ChkHr(CMiscHelpers::ConvertTextBlob2WideChar(spbReceipt, cbReceipt, &shReceipt))
ChkHr(LicenseParseReceiptResponse(spbReceiptResponse, cbReceiptResponse, &spbReceipt, &cbReceipt))
ChkArg(cchFolder)
ChkHr(temp.Set(shReceipt))
ReceiptHelpers::GetReceiptCacheFolder
ReceiptHelpers::GetPackageLocalAppDataPath
_WinStoreSDK_Receipt_Cache
ChkHr(_GetPackageLocalAppDataPath(szPackageFamilyName, pszFolder, cchFolder))
ChkHr(PathCchAppendEx(pszFolder, cchFolder, L"_WinStoreSDK_Receipt_Cache", 0))
%s-%s-%d-%s
ReceiptHelpers::GetReceiptCacheFileName
Microsoft Enhanced RSA and AES Cryptographic Provider
ChkHr(StringCchPrintfW(szSeedName, (sizeof(*RtlpNumberOf(szSeedName))), L"%s-%s-%d-%s", WindowsGetStringRawBuffer(geoId, nullptr), WindowsGetStringRawBuffer(language, nullptr), static_cast<UINT32>(eReceiptType), WindowsGetStringRawBuffer(featureName, nullptr)))
ChkHr(HRESULT_FROM_WIN32(122L))
ChkHr(PathCchAddExtension(pszCacheFileName, cchCacheFileName, L".dat"))
ChkHr(GetReceiptCacheFolder(packageFullName, pszCacheFilepath, cchCacheFilepath))
ReceiptHelpers::GetPhoneReceiptFilepath
ChkHr(PathCchAppendEx(pszCacheFilepath, cchCacheFilepath, szCacheFileName, 0))
ChkHr(GetReceiptCacheFileName(geoId, language, eReceiptType, featureName, szCacheFileName, (sizeof(*RtlpNumberOf(szCacheFileName)))))
ReceiptHelpers::CachePhoneReceiptForOffline
ChkHr(GetPhoneReceiptFilepath(geoId, language, eReceiptType, featureName, packageFullName, szCacheFileFullPath, (sizeof(*RtlpNumberOf(szCacheFileFullPath)))))
ChkHr(LocalAllocBytes(cbReceipt, &pbReceipt))
ReceiptHelpers::GetCachedPhoneReceipt
ReceiptHelpers::DeleteCachedPhoneReceipt
ChkHr(WindowsCreateString(reinterpret_cast<PCWSTR>(pbReceipt), cbReceipt / 2, receipt))
ChkHr(GetPublisherId(pStoreCommerceServer, pCV, hstrPublisherId.GetAddressOf()))
%04u-%02u-%02uT%02u:%02u:%02uZ
ChkHr(IAPUtils::GetMarket(hstrGeoId.GetAddressOf()))
ReceiptHelpers::FetchPhoneReceipt
ChkHr(IAPUtils::GetLanguage(hstrLanguage.GetAddressOf()))
{parentProductId}
{lang}
{requestTime}
{installedPublisherId}
ChkHr(UriHelper::GetUri(UriHelper::MDGetOneProductReceiptMobile, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrServiceUri.GetAddressOf()))
{featureName}
ChkHr(IAPUtils::CreateHttpClient(&httpClient))
ChkHr(UriHelper::GetUri(UriHelper::MDGetAppReceiptsMobile, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrServiceUri.GetAddressOf()))
ChkHr(headers->Append(HStringReference(L"MS-SiteName").Get(), authDomain))
ChkHr(headers->TryAppendWithoutValidation(HStringReference(L"Authorization").Get(), authTicket, &b))
ChkHr(GuidToStringWithoutBraces(&anid, szAnid))
ChkHr(UuidCreate(&anid))
ChkHr(headers->Append(HStringReference(L"X-WP-ANID").Get(), HStringReference(szAnid).Get()))
X-WP-ANID
Cache-Control
no-cache, max-age=0
ChkHr(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Xml_Dom_XmlDocument).Get(), &spXMLResponse))
ChkHr(headers->Append(HStringReference(L"Cache-Control").Get(), HStringReference(L"no-cache, max-age=0").Get()))
ChkHr(spXmlDocumentIO->LoadXml(hResponse.Get()))
ChkHr(spXMLResponse.As(&spXmlDocumentIO))
ChkHr(spXMLResponse->GetElementsByTagName(HStringReference(L"Receipt").Get(), &spReceiptNodes))
Receipt
ChkBool(uReceiptNodesLength > 0, HRESULT_FROM_WIN32(1168L))
ChkHr(spReceiptNodes->get_Length(&uReceiptNodesLength))
ChkHr(spReceiptNode->get_ChildNodes(&spReceiptNodeChildren))
ChkHr(spReceiptNodes->Item(0, &spReceiptNode))
ChkBool(uReceiptNodeChildrenLength > 0, HRESULT_FROM_WIN32(1168L))
ChkHr(spReceiptNodeChildren->get_Length(&uReceiptNodeChildrenLength))
ChkHr(spReceiptContent.As(&spXmlNodeSerializer))
ChkHr(spReceiptNodeChildren->Item(0, &spReceiptContent))
ChkHr(WindowsSubstringWithSpecifiedLength(hstrReceiptContent.Get(), 9, WindowsGetStringLen(hstrReceiptContent.Get()) - 12, receipt))
ChkHr(spXmlNodeSerializer->GetXml(hstrReceiptContent.GetAddressOf()))
eReceiptType
ChkHr(hrGetString)
ChkHr(GuidToStringWithoutBraces(&pStoreCommerceServer->GetAppId(), szProductIdGuid))
ReceiptHelpers::FetchReceipt
ChkHr(WindowsConcatString(HStringReference(L"WLID1.0=").Get(), authTicket, hstrAuthTicketWithPrefix.GetAddressOf()))
ChkHr(UriHelper::GetUri(UriHelper::OneStoreAuthenticationDomain, hstrAuthDomain.GetAddressOf()))
Receipt fetched: %hs
ChkHr(hrFetch)
ReceiptHelpers::GetFormattedPrice
ChkBool(cchCurrency != 0, LR2HR(GetLastError()))
ChkHr(temp.Set(spszFormattedPrice))
ChkAlloc(spszFormattedPrice)
ChkHr(GetFormattedPriceUsingCurrencyFormatter( priceValue, pStorePricingInfo->CurrencyCode, locale, HStringReference(pwszUppercaseRegion).Get(), formattedPrice))
ChkHr(HRESULT_FROM_WIN32(15861L))
ChkHr(HRESULT_FROM_WIN32(5L))
ChkHr(HRESULT_FROM_WIN32(15862L))
ChkHr(HRESULT_FROM_WIN32(13L))
ChkHr(HRESULT_FROM_WIN32(1244L))
ChkReturn(hr)
ChkHr(((HRESULT)0x80190194L))
onecoreuap\enduser\Winstore\licensing\wsinc\WSErrorUtils.h
WSErrorUtils::ConvertInternalErrorCodeToExternal
ChkArg(lpszURL)
ChkArg(ppbResponseData)
ChkArg(authResponse)
ChkArg(pcbResponseData)
ChkHr(httpRequest.Initialize (0))
ChkHr(httpRequest.UploadAndFetchResourceByUrl ( lpszURL, 0, 0, 1, 1 ))
ChkHr(httpRequest.SetAuthorizationHeader(authResponse))
ChkHr(((HRESULT) (((unsigned long)(1)<<31) | ((unsigned long)(25)<<16) | ((unsigned long)(httpRequest.GetRequestStatusCode()))) ))
ChkAlloc(spbResponseData)
CWSHttpHelper::FetchURL
ChkHr(CreateGuid(&guidCorrelationId))
ChkHr(GuidToStringWithoutBraces(&guidCorrelationId, wszCorrelationId))
ChkHr(GuidToStringWithoutBraces(&guidRequestId, wszRequestId))
ChkHr(CreateGuid(&guidRequestId))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrAdditionalHeaders, L"MS-CorrelationId", wszCorrelationId))
MS-CorrelationId
ChkHr(LocalAllocArray(cchBuffer, &pszBuffer))
ChkHr(StringCchPrintfW(pszBuffer, cchBuffer, L"%s:%s", header, value))
%s:%s
ChkHr(STRAPI_Create(pszBuffer, &dhStr))
CWSHttpHelper::AddTHAdditionalRequestHeader
ChkHr(arrAdditionalHeaders.Append(dhStr))
MS-RequestId
CWSHttpHelper::AddTHAdditionalHeaders
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrAdditionalHeaders, L"MS-RequestId", wszRequestId))
onecoreuap\enduser\Winstore\licensing\wsinc\WSHttpHelper.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\unfulfilledconsumableserver.cpp
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::Initialize
ChkHr(_hstrProductId.CopyTo(hstrProductId))
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::get_ProductId
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::get_OfferId
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::get_TransactionId
ChkHr(_hstrOfferId.CopyTo(offerId))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewpurchaseresultsserver.cpp
Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResultsServer::get_ProductPurchaseStatus
ChkHr(_response.Set(response))
onecoreuap\enduser\winstore\licensing\winrt\lib\sendstorerequestresult.cpp
Windows::Services::Store::StoreSendRequestResult::RuntimeClassInitialize
Windows::Services::Store::StoreSendRequestResult::get_Response
::WindowsDuplicateString(_response.Get(), value)
Windows::Services::Store::StoreSendRequestResult::get_HttpStatusCode
Windows::Services::Store::StoreSendRequestResult::get_ExtendedError
onecoreuap\enduser\winstore\licensing\winrt\lib\storeapplicense.cpp
Windows::Services::Store::StoreAppLicense::RuntimeClassInitialize
ChkHr(IAPUtils::BuildStoreId( _productId.Get(), _skuId.Get(), nullptr, _skuStoreId.GetAddressOf()))
ChkHr(JsonParser::ParseJSONToObject( json, this, AppLicenseTable))
ChkHr(::WindowsDuplicateString(_skuStoreId.Get(), pValue))
Windows::Services::Store::StoreAppLicense::get_SkuStoreId
Windows::Services::Store::StoreAppLicense::get_IsTrial
Windows::Services::Store::StoreAppLicense::get_IsActive
Windows::Services::Store::StoreAppLicense::get_AddOnLicenses
Windows::Services::Store::StoreAppLicense::get_ExpirationDate
ChkHr(_addOnLicenses->get_Size(&count))
ChkAlloc(hashMap)
ChkHr(license->get_SkuStoreId(skuStoreId.GetAddressOf()))
ChkHr(_addOnLicenses->GetAt(i, license.GetAddressOf()))
ChkHr(hashMap->GetView(&_addOnLicensesMap))
ChkHr(hashMap->Insert(skuStoreId.Get(), license.Get(), &replaced))
Windows::Services::Store::StoreAppLicense::get_TrialTimeRemaining
::WindowsDuplicateString(_trialUniqueId.Get(), pValue)
Windows::Services::Store::StoreAppLicense::get_IsTrialOwnedByThisUser
Windows::Services::Store::StoreAppLicense::get_IsDiscLicense
Windows::Services::Store::StoreAppLicense::get_TrialUniqueId
Windows::Services::Store::JsonParser::ParseTimeSpan
IAPUtils::ParseTimeSpan(timeString.Get(), &date)
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreLicense>>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreLicense>>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.StoreLicense>
W.7t1E
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreLicense>
ChkHr(products.CopyTo(_products.GetAddressOf()))
onecoreuap\enduser\winstore\licensing\winrt\lib\storeproductresult.cpp
Windows::Services::Store::StoreProductResult::RuntimeClassInitialize
ChkHr(_products->get_Size(&count))
Windows::Services::Store::StoreProductResult::get_Product
ChkHr(_products->GetAt(0, &_product))
Windows::Services::Store::StoreProductResult::get_ExtendedError
ChkHr(StoreProductPagedQueryResult::BuildMap( products, productKinds, &_mapView))
onecoreuap\enduser\winstore\licensing\winrt\lib\storelistingqueryresult.cpp
Windows::Services::Store::StoreProductQueryResult::RuntimeClassInitialize
Windows::Services::Store::StoreProductQueryResult::get_Products
_mapView.CopyTo(ppValue)
Windows::Services::Store::StoreProductQueryResult::get_ExtendedError
onecoreuap\enduser\winstore\licensing\winrt\lib\storelistingpagedqueryresult.cpp
Windows::Services::Store::StoreProductPagedQueryResult::RuntimeClassInitialize
Windows::Services::Store::StoreProductPagedQueryResult::get_Products
ChkHr(spNextQueryOperation.CopyTo(_spNextQueryOperation.GetAddressOf()))
Windows::Services::Store::StoreProductPagedQueryResult::get_ExtendedError
Windows::Services::Store::StoreProductPagedQueryResult::get_HasMoreResults
ChkAlloc(spOperation)
Windows::Services::Store::StoreProductPagedQueryResult::GetNextAsync
Windows::Services::Store::StoreProductPagedQueryResult::BuildMap
ChkHr(spOperation->BeginWork(1))
ChkHr(pkIter->get_HasCurrent(&hasCurrent))
ChkHr(productKinds->First(&pkIter))
ChkHr(productKindHashMap->Insert(requestedProductKind.Get(), true, &replaced))
ChkHr(pkIter->get_Current(requestedProductKind.GetAddressOf()))
ChkHr(products->get_Size(&count))
ChkHr(pkIter->MoveNext(&hasCurrent))
ChkHr(product->get_ProductKind(actualProductKind.GetAddressOf()))
ChkHr(products->GetAt(i, product.GetAddressOf()))
ChkHr(product->get_StoreId(storeId.GetAddressOf()))
ChkHr(productKindHashMap->HasKey(actualProductKind.Get(), &found))
ChkHr(hashMap->GetView(ppMapView))
ChkHr(hashMap->Insert(storeId.Get(), product.Get(), &replaced))
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, UInt8>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreProduct>>
Windows.Foundation.Collections.IKeyValuePair`2<String, UInt8>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreProduct>>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, UInt8>>
Windows.Foundation.Collections.IMapView`2<String, UInt8>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IMap`2<String, UInt8>
ChkArg(status)
onecoreuap\enduser\winstore\licensing\winrt\lib\storeconsumableresult.cpp
Windows::Services::Store::StoreConsumableResult::get_Status
Windows::Services::Store::StoreConsumableResult::get_TrackingId
ChkArg(trackingId)
Windows::Services::Store::StoreConsumableResult::get_BalanceRemaining
ChkArg(balanceRemaining)
Windows::Services::Store::StoreConsumableResult::get_ExtendedError
_pPackageLicense.CopyTo(ppValue)
onecoreuap\enduser\winstore\licensing\winrt\lib\storeacquirelicenseresult.cpp
Windows::Services::Store::StoreAcquireLicenseResult::get_StorePackageLicense
Windows::Services::Store::StoreAcquireLicenseResult::get_ExtendedError
ChkHr(_pPackage->get_Id(packageId.GetAddressOf()))
onecoreuap\enduser\winstore\licensing\winrt\lib\storepackagelicense.cpp
Windows::Services::Store::StorePackageLicense::RuntimeClassInitialize
ChkHr(MakeAndInitialize<StorePackageLicenseLostCallback>(&spStorePackageLicenseLostCallback, this))
ChkHr(packageId->get_FullName(optionalPfn.GetAddressOf()))
ReleaseLicense()
ChkHr(storeContextServer->AcquireStoreLicenseForOptionalPackage( optionalPfn.Get(), spStorePackageLicenseLostCallback.Get(), &_valid))
_licenseLostEvent.Add(pHandler, pToken)
Windows::Services::Store::StorePackageLicense::~StorePackageLicense
_licenseLostEvent.Remove(token)
Windows::Services::Store::StorePackageLicense::add_LicenseLost
_pPackage.CopyTo(ppPackage)
Windows::Services::Store::StorePackageLicense::remove_LicenseLost
Windows::Services::Store::StorePackageLicense::get_IsValid
Windows::Services::Store::StorePackageLicense::get_Package
_pPackage->get_Id(packageId.GetAddressOf())
Windows::Services::Store::StorePackageLicense::Close
packageId->get_FullName(optionalPfn.GetAddressOf())
Windows::Services::Store::StorePackageLicense::ReleaseLicense
storeContextServer->ReleaseStoreLicenseForOptionalPackage(optionalPfn.Get())
Ylp)d_
ChkHr(AsWeak(pStorePackageLicense, &_wrStorePackageLicense))
onecoreuap\enduser\winstore\licensing\winrt\lib\StorePackageLicense.h
Windows::Services::Store::StorePackageLicenseLostCallback::RuntimeClassInitialize
ChkHr(_licensableSku.Set(licensableSku))
onecoreuap\enduser\winstore\licensing\winrt\lib\storecanacquirelicenseresult.cpp
Windows::Services::Store::StoreCanAcquireLicenseResult::RuntimeClassInitialize
Windows::Services::Store::StoreCanAcquireLicenseResult::get_LicensableSku
Windows::Services::Store::StoreCanAcquireLicenseResult::get_Status
Windows::Services::Store::StoreCanAcquireLicenseResult::get_ExtendedError
ChkHr(WindowsDuplicateString(_licensableSku.Get(), pValue))
onecoreuap\enduser\winstore\licensing\winrt\lib\storepurchaseresult.cpp
Windows::Services::Store::StorePurchaseResult::get_Status
Windows::Services::Store::StorePurchaseResult::get_ExtendedError
ChkArg(pHresult)
ChkHr(_extendedJsonData.Set(extendedJsonData))
onecoreuap\enduser\winstore\licensing\winrt\lib\storerateandreviewresult.cpp
Windows::Services::Store::StoreRateAndReviewResult::RuntimeClassInitialize
Windows::Services::Store::StoreRateAndReviewResult::get_ExtendedJsonData
Windows::Services::Store::StoreRateAndReviewResult::get_ExtendedError
Windows::Services::Store::StoreRateAndReviewResult::get_WasUpdated
ChkHr(::WindowsDuplicateString(_extendedJsonData.Get(), pValue))
Windows::Services::Store::StoreRateAndReviewResult::get_Status
Minute
Month
InitialDuration
UnitType
HasTrial
Duration
IsRecurring
Units
Windows::Services::Store::StoreSubscriptionInfo::RuntimeClassInitialize
ChkHr(JsonParser::ParseJSONToObject( json, this, RecurrenceTable))
ChkHr(_ConvertDuration(_billingPeriodUnitType.Get(), _billingPeriod, &_billingPeriodUnit))
onecoreuap\enduser\winstore\licensing\winrt\lib\storesubscriptiondata.cpp
Windows::Services::Store::StoreSubscriptionInfo::get_BillingPeriod
ChkHr(_ConvertDuration(_trialPeriodUnitType.Get(), _trialPeriod, &_trialPeriodUnit))
Windows::Services::Store::StoreSubscriptionInfo::get_HasTrialPeriod
Windows::Services::Store::StoreSubscriptionInfo::get_BillingPeriodUnit
Windows::Services::Store::StoreSubscriptionInfo::get_TrialPeriodUnit
Windows::Services::Store::StoreSubscriptionInfo::get_TrialPeriod
Windows::Services::Store::StoreSubscriptionInfo::_ConvertDuration
false && "Store service returned an unexpected enum!"
Store service returned an unexpected enum: %hs
Windows::Services::Store::StoreAvailability::RuntimeClassInitialize
DisplayRank
ChkHr(JsonParser::ParseJSONToObject( json, this, AvailabilityRootTable))
onecoreuap\enduser\winstore\licensing\winrt\lib\storeavailability.cpp
Windows::Services::Store::StoreAvailability::get_StoreId
Windows::Services::Store::StoreAvailability::get_EndDate
ChkHr(IAPUtils::BuildStoreId( _productId.Get(), _skuId.Get(), _availabilityId.Get(), _storeId.GetAddressOf()))
Windows::Services::Store::StoreAvailability::get_Price
ChkHr(_price.CopyTo(ppValue))
Windows::Services::Store::StoreAvailability::RequestPurchaseWithPurchasePropertiesAsync
Windows::Services::Store::StoreAvailability::RequestPurchaseAsync
Windows::Services::Store::StoreAvailability::get_AvailabilityId
::WindowsDuplicateString(_availabilityId.Get(), pValue)
Windows::Services::Store::StoreAvailability::set_ProductIdSkuId
Windows::ApplicationModel::Store::ProductLicenseServer::Initialize
ChkHr(pAppAddOn->GetProductId(&pszProductId))
ChkHr(m_hstrProductId.Set(pszProductId))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productlicenseserver.cpp
ChkHr(pAppAddOn->GetProductType(&m_eAddOnType))
ChkHr(pAppAddOn->GetExpireTime(&ftExpireTime))
ChkHr(pUnfulfilledConsumable->get_ProductId(m_hstrProductId.GetAddressOf()))
ChkHr(IAPUtils::SetDateTime(ftExpireTime, &m_dtExpiration))
ChkHr(m_hstrProductId.Set(featureId))
ChkHr(IAPUtils::SetMaxDateTime(&m_dtExpiration))
Windows::ApplicationModel::Store::ProductLicenseServer::get_ProductId
Windows::ApplicationModel::Store::ProductLicenseServer::InitializeInvalid
Windows::ApplicationModel::Store::ProductLicenseServer::get_IsActive
ChkHr(m_hstrProductId.CopyTo(pValue))
Windows::ApplicationModel::Store::ProductLicenseServer::get_IsConsumable
Windows::ApplicationModel::Store::ProductLicenseServer::get_ExpirationDate
ChkArg(pInAppOffer)
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productlistingserver.cpp
Windows::ApplicationModel::Store::ProductListingServer::Initialize
ChkHr(_hstrName.Set(pInAppOffer->Name))
ChkHr(_hstrInAppOfferToken.Set(pInAppOffer->InAppOfferToken))
ChkHr(_hstrDescription.Set(pInAppOffer->Description))
ChkHr(ReceiptHelpers::GetFormattedPrice(locale, market, &pInAppOffer->PricingInfo, false , _hstrFormattedPrice.GetAddressOf()))
ChkHr(_hstrImageUri.Set(pInAppOffer->ImageUri))
ChkHr(_hstrProductTag.Set(pInAppOffer->ProductTag))
ChkHr(pInAppOffer->spKeywords->get_Size(&cKeywords))
ChkHr(AgileVector<HSTRING>::Make(&_keywords))
ChkHr(_keywords->Append(keyword.Get()))
ChkHr(pInAppOffer->spKeywords->GetAt(i, keyword.GetAddressOf()))
ChkHr(_hstrCurrencyCode.Set(pInAppOffer->PricingInfo.CurrencyCode))
ChkHr(ReceiptHelpers::GetFormattedPrice(locale, market, &pInAppOffer->PricingInfo, true , _hstrFormattedBasePrice.GetAddressOf()))
ChkHr(_hstrInAppOfferToken.CopyTo(pValue))
Windows::ApplicationModel::Store::ProductListingServer::get_ProductId
Windows::ApplicationModel::Store::ProductListingServer::get_Name
Windows::ApplicationModel::Store::ProductListingServer::get_FormattedPrice
Windows::ApplicationModel::Store::ProductListingServer::get_Description
Windows::ApplicationModel::Store::ProductListingServer::get_ProductType
ChkHr(_keywords->GetView(&spVectorView))
Windows::ApplicationModel::Store::ProductListingServer::get_Keywords
Windows::ApplicationModel::Store::ProductListingServer::get_Tag
ChkHr(spVectorView.As(&spIterable))
Windows::ApplicationModel::Store::ProductListingServer::get_ImageUri
ChkHr(_hstrProductTag.CopyTo(pValue))
ChkHr(IAPUtils::CreateUri(_hstrImageUri.Get(), &_spImageUri))
ChkHr(WindowsConcatString(HStringReference(L"http:").Get(), _hstrImageUri.Get(), uri.GetAddressOf()))
Windows::ApplicationModel::Store::ProductListingServer::get_FormattedBasePrice
ChkHr(_spImageUri.CopyTo(pValue))
Windows::ApplicationModel::Store::ProductListingServer::get_SaleEndDate
ChkHr(_hstrFormattedBasePrice.CopyTo(pValue))
Windows::ApplicationModel::Store::ProductListingServer::get_CurrencyCode
Windows::ApplicationModel::Store::ProductListingServer::get_IsOnSale
ChkHr(IAPUtils::SetMaxDateTime(&_expirationDate))
onecoreuap\enduser\winstore\licensing\winrt\lib\storelicense.cpp
Windows::Services::Store::StoreLicense::RuntimeClassInitialize
Windows::Services::Store::StoreLicense::get_SkuStoreId
ChkHr(JsonParser::ParseJSONToObject( json, this, LicenseTable))
Windows::Services::Store::StoreLicense::get_InAppOfferToken
Windows::Services::Store::StoreLicense::get_IsActive
Windows::Services::Store::StoreLicense::get_ExpirationDate
RecurrencePrice
Windows::Services::Store::StorePrice::RuntimeClassInitialize
ChkHr(JsonParser::ParseJSONToObject( json, this, OrderManagementDataTable))
ChkHr(IAPUtils::GetFormattedPrice(_basePrice, _currencyCode.Get(), _formattedBasePrice.GetAddressOf()))
onecoreuap\enduser\winstore\licensing\winrt\lib\storeprice.cpp
ChkHr(IAPUtils::GetFormattedPrice(_recurrencePrice, _currencyCode.Get(), _formattedRecurrencePrice.GetAddressOf()))
ChkHr(IAPUtils::GetFormattedPrice(_listPrice, _currencyCode.Get(), _formattedPrice.GetAddressOf()))
Windows::Services::Store::StorePrice::get_FormattedBasePrice
::WindowsDuplicateString(_formattedBasePrice.Get(), pValue)
Windows::Services::Store::StorePrice::get_FormattedPrice
::WindowsDuplicateString(_formattedPrice.Get(), pValue)
Windows::Services::Store::StorePrice::get_SaleEndDate
Windows::Services::Store::StorePrice::get_IsOnSale
Windows::Services::Store::StorePrice::get_CurrencyCode
::WindowsDuplicateString(_currencyCode.Get(), pValue)
Windows::Services::Store::StorePrice::get_FormattedRecurrencePrice
::WindowsDuplicateString(_formattedRecurrencePrice.Get(), pValue)
Windows::Services::Store::JsonParser::ParseDouble
jsonValue->GetNumber(&valueAsDouble)
?456789:;<=
 !"#$%&'()*+,-./0123
Windows.BackgroundTasks
Windows.UpdateTask
Windows.PreInstalledConfigTask
Windows.AppointmentDataProvider
Windows.AppService
Windows.EmailDataProvider
Windows.ContactDataProvider
Windows.PrintWorkflowBackgroundTask
Windows.UserDataTaskDataProvider
Windows.PosPaymentConnector
Windows.BarcodeScannerProvider
Windows.PrintSupportWorkflow
Windows.PrintSupportExtension
onecoreuap\shell\lib\activationevents\src\activatedeventargsbase.cpp
Windows.Search
Windows.File
Windows.ShareTarget
Windows.FileOpenPicker
Windows.Protocol
Windows.CachedFileUpdater
Windows.FileSavePicker
Windows.Device
Windows.ContactPicker
Windows.Print3DWorkflow
Windows.PrintTaskSettings
Windows.AppointmentsProvider.AddAppointment
Windows.CameraSettings
Windows.AppointmentsProvider.RemoveAppointment
Windows.AppointmentsProvider.ReplaceAppointment
Windows.AppointmentsProvider.ShowAppointmentDetails
Windows.AppointmentsProvider.ShowTimeFrame
Windows.Contact.Message
Windows.Contact.Call
Windows.Contact.Post
Windows.Contact.Map
Windows.ContactsProvider.ShowContact
Windows.Contact.VideoCall
Windows.RestrictedLaunch
Windows.ContactsProvider.AddContact
Windows.VoiceCommand
windows.LockScreenCall
Windows.ComponentUI
Windows.WebAccountProvider
Windows.DialProtocol
windows.lockScreen
Windows.UserDataAccountsProvider
Windows.PersonalAssistant.Launch
Windows.AppUriHandler
Windows.Internal.FilePickerExperience
Windows.LockScreenComponent
Windows.PeoplePane
Windows.OopWebView
Windows.ContactPanel
Windows.StartupTask
Windows.PrintWorkflowForegroundTask
Windows.BarcodeScannerPreviewProvider
Windows.CommandLineLaunch
Windows.PhoneCallActivation
onecore\shell\lib\calleridentity\calleridentity.cpp
Software\Microsoft\Windows\CurrentVersion\Store\ContentId
wp8xappx
win8xappx
%s:%s:%s
win32
https://login.windows.local
XboxUserId
https://login.windows.net/common
{d6d5a677-0872-4ab0-9442-bb792fce85c5}
{268761a2-03f3-40df-8a8b-c3db24145b6b}
consumers
S-1-15-2-1609473798-1231923017-684268153-4268514328-882773646-2760585773-1760938157
organizations
service::%s::%s
S-1-15-2-903380885-3144618533-3326689759-1293738580-1356288723-3824823557-3342340653
AlwaysPromptBeforePurchase
MBI_SSL
OneStoreAuthenticationPolicy
x-xbl-contract-version:2
Accept:application/json
AADResource
AADAuthority
XboxLiveAuthenticationDomain
MOBillingAuthenticationDomain
mbi_ssl
www.microsoft.com
mobilling.microsoft.com
https://onestore.microsoft.com
https://purchase.mp.microsoft.com
user.auth.xboxlive.com
WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicketForUri
//ServiceEnvironment/Authentication
onecoreuap\enduser\winstore\auth\lib\winstoreauth.cpp
WinStoreAuth::AuthenticationInternal::GetAllAccountTickets
WinStoreAuth::AuthenticationInternal::GetTicketForAccount
WinStoreAuth::GetAccountTicketsFromTokenBroker
WinStoreAuth::GetAccountTicketFromTokenBroker
WinStoreAuth::GetAADFromRegistry
Failed to get account from accounts vector
WinStoreAuth::AuthenticationInternal::GetDeviceTicketWithBroker
resource
authority
WinStoreAuth::AuthenticationInternal::GetXToken
WinStoreAuth::AuthenticationInternal::GetAllXTokens
WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountId
Bearer 
WinStoreAuth::AuthenticationInternal::PrefixTicketForMDollar
WinStoreAuth::AuthenticationInternal::ConvertWebAccountIdFromAppToRealIdInternal
MSAHW1.0=
WinStoreAuth::AuthenticationInternal::FetchStoreAccountIdFromRegistry
WinStoreAuth::AuthenticationInternal::ConvertWebAccountIdFromRealIdToAppInternal
Software\Microsoft\XboxLive
WinStoreAuth::AuthenticationInternal::FetchXboxLiveAccountId
RETAIL
Sandbox
WinStoreAuth::AuthenticationInternal::CreateAuthenticationManager
WinStoreAuth::AuthenticationInternal::GetCurrentIUser
WinStoreAuth::AuthenticationInternal::CreateTokenBrokerInternal
WinStoreAuth::AuthenticationInternal::CreateTokenBroker
WinStoreAuth::AuthenticationInternal::FindAccount
WinStoreAuth::AuthenticationInternal::GetAccountProvider
WinStoreAuth::AuthenticationInternal::CreateGoldenAccountTokenRequest
WinStoreAuth::AuthenticationInternal::GetAllTokenBrokerAccounts
Client_ShowSkipForceAuthentication
WinStoreAuth::AuthenticationInternal::CreateTokenRequestHelper
WinStoreAuth::AuthenticationInternal::CreateLegacyTicketRequest
Device
Account Ticket succesfully extracted. Ticket providerType: %ws web: %ws 
WinStoreAuth::AuthenticationInternal::ExtractTicketFromTokenResponse
SkipForceAuthentication
WinStoreAuth::AuthenticationInternal::ManagePropertiesFromTokenResponse
WebTokenRequestStatus: UserInteractionRequired
HR: 0x%x
WAM HR: 0x%x
ResponseErrorMessage: %ws
WinStoreAuth::AuthenticationInternal::ExtractTicketsFromTokenResult
WebTokenRequestStatus: ProviderError
HR: 0x%x
ResponseErrorMessage: %ws
WinStoreAuth::AuthenticationInternal::CaptureStorePrimaryAccountId
WinStoreAuth::_SendTokenRequestAndGetTickets
WinStoreAuth::AuthenticationInternal::CaptureGoldenAccountTicket
WinStoreAuth::AuthenticationInternal::CaptureStorePrimaryAccountTicket
WinStoreAuth::AuthenticationInternal::FindCachedStorePrimaryAccount
WinStoreAuth::AuthenticationInternal::ExtractAccountId
WinStoreAuth::AuthenticationInternal::ExtractProviderType
WinStoreAuth::SetProxyBlanket
WinStoreAuth::AuthenticationInternal::ExtractTicket
Windows.Foundation.Collections.IIterator`1<Object>
Windows.Foundation.Collections.IVectorView`1<Object>
Windows.Foundation.Collections.IVector`1<Object>
WinStoreAuth::GetStorePrimaryAccountIdForUser
onecoreuap\enduser\winstore\auth\lib\winstoreauthstatics.cpp
WinStoreAuth::ConvertWebAccountIdFromRealIdToAppForUser
WinStoreAuth::ConvertWebAccountIdFromAppToRealIdForUser
_hRequest == 0
_pConnection == nullptr
CreateEvent failed
CHttpRequest::~CHttpRequest
onecoreuap\enduser\winstore\lib\httprequest.cpp
CHttpRequest::s_WinHttpCompletionCallback
WaitForMultipleObjects returned %u
CHttpRequest::Initialize
dwContext != 0
CHttpRequest::_WinHttpCompletionCallback
Request 0x%08x failed, result %d
CHttpRequest::_WaitForLastAsyncCompletion
cbStatus >= sizeof(WINHTTP_ASYNC_RESULT)
_hRequest == hRequest
pszServerName && pszUrl
cbStatus >= sizeof(DWORD)
Canceling redirect for 0x%08x
http%s://%s/%s
CHttpRequest::_GetProxyInfoForUrl
ppszProxyList && ppszProxyByPass && pdwAccessType
CHttpRequest::_SetProxyForCurrentRequest
Proxy list = %s, Proxy bypass = %s, Proxy access type = %i
WinHttpSetOption failed
_SetProxyForCurrentRequest(pszCurrProxy, pszProxyBypass, dwAccessType)
CHttpRequest::_SendRequestWithRetry
text/xml
WinHttpOpenRequest failed
Server: %s, URL %s
CHttpRequest::_CreateConnectionAndSendRequest
WinHttpSetOption(WINHTTP_OPTION_AUTOLOGON_POLICY) failed
WinHttpSetOption(WINHTTP_ENABLE_SSL_REVOCATION failed
WinHttpSetStatusCallback failed
WinHttpSetOption CONTEXT_VALUE failed
WinHttpReadData failed
CHttpRequest::_DownloadData
Start callback failed
_GetProxyInfoForUrl(pszServerName, pszUrl, fUseSecure, &pszProxyList, &pszProxyByPass, &dwAccessType)
DataDownloaded callback failed
_ReceiveResponse failed
WinHttpReadData completion failed
_AppendToDataBuffer failed
Failed to convert systemtime to filetime
WinHttpReceiveResponse failed
CHttpRequest::_ReceiveResponse
WinHttpQueryHeaders failed, status code = %i
_WaitForLastAsyncCompletion failed
Machine
Request 0x%08x has machine %s and RID %s
_hRequest
WinHttpAddRequestHeaders(%s) failed
CHttpRequest::AddRequestHeader
_CreateConnectionAndSendRequest(pszServerName, pszUrl, fUseSecure, fUsePut ? L"PUT" : L"POST", _GetStreamSize(pUploadDataStream), port, 0, fUseAuthentication)
CHttpRequest::UploadAndFetchResource
Request to [%s] failed with connection error. Retrying %d more times
pszFullUrl
_DownloadData()
CHttpRequest::UploadAndFetchResourceByUrl
WinHttpCrackUrl failed
_hCancelInternal
CHttpRequest::AbortRequest
DWordAdd(dwNeeded, 1, &cbSizeToAlloc)
CHttpRequest::_LocalAllocHeader
Response buffer overflow
CHttpRequest::_AppendToDataBuffer
CHttpRequest response header: %s : %s
X-Windows-Store-Debugging-Id:%s
Added header %s
pszAuthorizationHeader
CHttpRequest::SetAuthorizationHeader
!_pszServer
CHttpConnection::_Initialize
CHttpRequest::_AddDebugHeaderIfPresent
X-Windows-Store-Debugging-Id
WinHttpConnect failed for %s:%d
CHttpSession::_Initialize
!_hInternet
CHttpConnection::Connect
WinHttpSetTimeouts failed
WinHttpOpen failed
Windows Store/1.0
WinHttpSetOption WINHTTP_OPTION_REDIRECT_POLICY failed
DPA_SortedInsertPtr failed on handle 0x%08x for %s:%d
CHttpConnectionCache::GetConnection
ntdll.dll
MicrosoftTelemetryAssertTriggeredUM
Version
ReceiptResponse
ReceiptBase64Encoded
ErrorCode
PurchaseOperation
__TlgCV__
Request
Response
HResultOfOperation
OutgoingServiceRequest
__TlgCV__
PartB_Ms.Qos.OutgoingServiceRequest
targetUri
latencyMs
protocolStatusCode
responseSizeBytes
succeeded
ErrorMessage
ErrorCode
ErrorLocation
LineNumber
ErrorMethod
Verbose
ErrorMessage
ErrorCode
ErrorLocation
LineNumber
ErrorMethod
Warning
ErrorMessage
ErrorCode
ErrorLocation
LineNumber
ErrorMethod
ApiInvoked
__TlgCV__
ErrorCode
Error
PartB_Ms.Telemetry.Error
ErrorMessage
ErrorCode
ErrorLocation
LineNumber
ErrorMethod
EndOperation
__TlgCV__
ErrorCode
BeginOperation
__TlgCV__
WinstoreAuth_SendTokenRequestAndGetTickets_Failure
WinstoreAuth_ProviderError
dwErrorCode != 0 ? HRESULT_FROM_WIN32(dwErrorCode) : ((HRESULT)0x80004005L)
WinstoreAuth_UserAuthRequired
HRESULT_FROM_WIN32(1317L)
WinstoreAuth_SLSFailure
GetLastError()
Microsoft.Windows.ApplicationModel.Store.Telemetry
RSDS~h&]Q
Windows.ApplicationModel.Store.pdb
.rdata$brc
.rdata$T$brc
.CRT$XCA
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIAA
.CRT$XIZ
.CRT$XLA
.CRT$XLZ
.gfids
.giats
.rdata
.rdata$sxdata
.rdata$voltmd
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zzzdbg
.text
.text$di
.text$mn
.text$x
.text$yd
.tls$
.tls$ZZZ
.xdata$x
minATL$__a
minATL$__m
minATL$__r
minATL$__z
.didat$2
.didat$3
.didat$4
.didat$6
.didat$7
.edata
.data$brc
.data
.idata$5
.00cfg
.idata$2
.idata$3
.idata$4
.idata$6
.didat$5
.rsrc$01
.rsrc$02
~h&]Q
E(SVW
u$WSQ
j%hpB
j=h`B
j%h8E
j(hP?
VWjbZ
VWjkZ
QQSVW
Pj1h`
Pj*h@
93uHWV
&PWSV
QQSVWh
QQSVWh
QQSVWh
QQSVWh
QQSVWh
QQSVWh
QQSVWh
QQSVWh
QQSVWh
T$pRQ
t$ Ph4!
Pj,h@D
D$(PQ
T$0QQV
L$4^3
FxVh 
XL93uIW
u'h0A
4SVWQQ
y"QVh`E
y'QVh
y'QVh
u#hPF
y$QVh
QQSVW
y'QVh
QVhhG
QVh`H
QVh(H
y'QVh
QVh@I
y:QVh
QVhHK
y"QVh
y'QVh
y'QVh|M
QVhDN
QVhtN
y"QWh
y"QVh
QVhXO
y$QVh
QVh@P
y"QVhxP
y'QVhHQ
y'QVh
y'QVh<R
y'QVh
jQVh8T
QVhHS
y'QVh
QVh`U
y"QVh
QVhHV
y/QWh
y,QWh
QWhxA
y5QWh
QWhxX
QWhdX
QWh@Y
QWh`W
QWh(W
QWhX[
QWh`Z
QWh$Z
QWhx\
QWh(\
QWhh]
QWhP`
QWhL_
QWh@A
y'QVhxa
QVh<b
QVhXc
QVhdb
y'QVh
GdPh0
9_8u+QVh
QVhTe
y#QVhxf
QVhLg
y,QVh
QVh@h
SSWh`
y"QVh
u'QWh
y"QWhxl
y"QWh
y"QVh
u'QVh
QVVPVj
y'QVh
y'QVh
y'QVh
y'QVhXp
y'QVh
y'QVh\q
L$,QVVPj
y<QVh
QVh s
y"QVh
y'QWh$u
QWhPu
y'QWh
y'QWh
y>QWh
D$PPV
9\$Pw&Q
D$ PSV
y0QWhpw
y2QWh
y^QWh`x
QWhPy
L$<QVPQ
y"QWh
L$7QP
QWhp{
8D$;Q
L$XQVPj
y'QWh8}
y'QVh
y'QVh$u
QVhPu
y6QVh
y'QVh
QWVPj
y'QVhx
y'QVh
D$TPj
yHQVh@
L$,QWP
y'QVh
y'QVh@
D$ PV
ywQVh
y'QVh`x
y'QVh`
y-QVh
y"QVh
y'QVh
QSVPj
y'QVh
y"QVh
y'QVh
QSVPj
y'QVh
y"QVh
y"QVh
D$XSV
\$4Pj
D$8Pj
D$PPj
y"QVh
y'QWh
y'QWh@
y6QWh
y-QWh
D$DPV
D$$Pj
y0QWhpw
L$;QP
y0QWh
y9QWh
L$@QP
L$(QSP
y0QWhl
y-QWh
y-QWh
L$@QP
yKQWhd
y0QWht
y3QWh
D$(Ph
y0QWh@
y7QWh
9\$0u/
yPQWhx
y"QWh
y'QVh@
y"QVhP
y"QVh
u'QSh
y0QSh@
y5QSh
D$`98
L$,QP
|$49L$4
L$XCS
y'QShd
D$,PV
y;QSh
y5QSh
y-QSh
yHQShp
L$8QP
D$(PS
L$4CS
y$QShd
y0QSh
L$XCS
L$4CS
y"QSh
y'QVhL
ykQVhx
D$(Pj
y'QVh
yVQVh
y<QVh
y5QVh
y-QVh@
D$4WP
y0QVh
y9QVh
y-QVh4
8F(u:
y'QVh
y0QVh@
y9QVh
L$@Pj
y'QVh
y'QVhx
L$WQP
y'QVh
y'QVh,
L$KQP
y0QVh
D$DPV
y5QVh(
D$dQQ
yyQVh8
y"QVh
y'QVh
y'QVh
y'QVh
y'QVh
y'QVhT
L$pQP
y'QVh
9\$pu&Q
L$(QSP
y'QVh
y'QVh
L$|QP
y9QVh
y0QVh
y9QVhx
L$WQP
y0QVh
y-QVh,
L$VQP
y0QVh
D$LPV
y5QVh(
D$\QQ
y'QVhp
y'QVhx
y3QVh
y2QVh
y'QVh
y'QVh`
y5QVh
y0QVh
y$QVh
y0QShp
y-QSh0
y'QShd
y'QSh
y6QSh
L$(QP
y0QShx
L$PQP
T$<9T$P
L$$QRP
L$CQP
T$<;T$P
y9QSh@
D$4PW
y-QSh
L$,Qj
y'QSh
y5QSh,
L$DQP
y:QShd
t$X9T$D
L$8QRP
D$TPV
D$<;D$Tr
T$X;T$D
y"QSh
y'QVh
y-QVh
T$49L$@
y"QVh
y"QVhX
y'QWh
D$tPV
y'QWh
L$pVP
y'QWh
y'QWhT
y'QWh
L$LQP
L$lQP
L$xQP
L$GQP
D$<PV
y6QWhh
D$0P3
y-QWh
y=QWh
L$8Qhl5
y-QWh
D$\PQ
L$,QS
L$dQP
L$HCS
y'QWh(
y"QWh
y5QWh
y-QWh
yNQWh
y-QWh
D$`PV
y0QWh
yPQWh
L$LQP
L$,QSP
y0QWhl
y-QWh
L$LQP
y-QWh
yDQWh@
D$DPSV
y0QWhpw
y-QWht
yxQWh
y>QWh
y-QWhp
L$8Qh
y-QWh
y2QWh
y-QWhh
y-QWh
\$DPV
y2QWh`
y0QWh
y0QWh
y-QWh
L$0QP
y-QWh
L$SQP
L$xQP
L$kQP
L$@QP
L$,QhT*
L$TQP
L$RQP
D$`PV
L$RQP
\$DPV
D$\PS
L$SQP
y"QVh|
y'QVh
y.VhX
y,QVh
y'QShh
y'QShP
y-QSh
y0QSh
y7QShT
yqQSh
y3QSh
y/QSh
y\QShp
y'QSh
y:QSh0
y?QSh
QShtN
QShDN
y'QVh
y'QVh
y'QVh
y/QVhh
y3QVh
y'QVh0
y2QVhp
y'QVh`x
y/QVh<
y*QVhp
y;QVh
QVh s
y'QVh
y:QVhP
y9QVh
y9QVhh
y"QVhP
,SVW3
y'QVh
D$8PV
y"QVhP
y#QVh
yDQWh
y^QWhp
yVQWh
y?QWh
yUQWh
y>QWh(
y,QWh
y/QWh
y"QVh
y6QSh
u0QSh
y-QSh@
y0QVhH
y-QVh
L$8QP
\$(9T$8
L$$QRP
L$4QP
\$09\$4vw
D$0;D$4r
T$(;T$8
y$QVh
PjOhX.
93uHWV
s2SVW
y$QVh
y"QVh
y%QVh
y%QVh
QVhxA
QVh`+
QVh$,
QVhL,
QVh@A
^Wh$E
QQSVW
ti9\$
9X$vC
Z9p,tL3
T$$;E
T$$;]
L$ ;u
_^[Y]
ti9\$
9X$vC
Z9p,tL3
T$$;E
T$$;]
L$ ;u
_^[Y]
^Whd*
PjWh8
PjLhH
@;G(v&
@;G(v&
QQSVW
A0;B@t
;K@t(
;w(s/
;K@t(
;H@t&
A ;B0t
;K0t(
G ;A0t(
;K0t<
;H0t&
;K@t<
P9w0u
P9w u
;Q@t2
;H@t?
;Q@t2
;Q@t3
;Q@tU
;Q0t2
;Q0t2
;Q0t3
;Q0tU
Pj;hP
Pj6h8
Pj#hx
PjQhX
;K0t<
y$QQS
$SVWj
y$QQS
S _^3
Pj3hP
x,SSh
S _^[
^Wh,#
S$_^[
Pjah@#
QPh@%
y%QVh
y%QVh
QVhxA
L$ QP
L$4QP
L$$QP
QVh`+
QVh$,
QVhL,
QVh@A
y QVh
y%QVh
y%QVh
QVhxA
QVh`+
QVh$,
QVhL,
QVh@A
y$QVh
y"QVh
y QVh
y QVh
y QVh
;Q@t=
;Q@t'
;K@t<
F$9^,u
9V$v)
P9w0u
;Q@t=
9^,t&h
;K@t(
;K0t<
;Q0t=
;Q0t'
;H0t?
;Q0t=
G ;A0t(
x(9s$t#
9_0t'
tw9^,t
@d;A(t
9^0u;
CiWWSP
@d;A(t
QQVW3
y"QWh >
SSWh@
} QVh
x,SSh
^Wh D
9wHu`
9wHu1VS
9wHu$QSh
YPhHF
QWh$G
QWh<G
QWhPG
y"QWh|G
QShDH
QSh<G
y-QShPG
QShTH
QWh<G
y$QWhPG
QWh I
y"QWh`I
8T$Pu
QQRRRRPhPJ
y'QVh
QVh<G
y-QVhPG
y"QVh
PPPPShPJ
y'QVh
QVh<G
y-QVhPG
y"QVh
T$@QQQQWh|L
y'QVh
QVh<G
y-QVh
y"QVh O
PPPPWh|L
t$0h|L
y'QVh
QVh<G
y"QVh@Q
8D$(u
QQPPPPPPW
QVh<G
QVhPG
ypQVh8S
PPPPPPW
8D$(u
QQPPPPPPW
QVh`T
QVh<G
QVhPG
ypQVh
PPPPPPW
8D$(u
QQPPPPPPW
QVh<G
ypQVh
PPPPPPW
QVh|W
QVh<G
T$0QQQQWh|L
QVh<G
y-QVhPG
yxQVh@Y
PPPPWh|L
T$8QQQh
QVh<G
QVhPG
T$8QQPh
QVh<G
QVhPG
L$ VW
T$0PPPPWh|L
y$QVh<G
y"QVhX]
PPPPWh|L
8D$(u
QQPPPPPPW
QVh<G
QVhPG
ypQVh
PPPPPPW
QVh<G
QVhPG
t$ PV
y~QVh0`
QVh<G
QVhPG
t$ PV
y~QVh
y'QVhXb
QVhXc
QVh8}
y0QVh
y0QVhPd
y QVh
QQSVW
QVh8}
y0QVh
y0QVhPd
y QVh
QVh8}
y0QVh
y0QVhPd
y QVh
693t%
QQSVW
y"QVh
9w4u`
9w4u1VS
9w4u$QSh
YPhHF
VPhHf
QVh|g
y'QVh
QVh<G
y-QVhPG
y"QVh
QQPPPPPPW
QVh<G
QVhPG
ypQVh
PPPPPPW
QVh8}
y0QVh
y0QVhPd
y QVh
Pj3hh
Pj#h8
y QVh8m
y QVh@n
QVh o
QVhDN
y"QVh
QVh o
QVhDN
y"QVh8p
y"QVh
8D$(u
QQPPPPPPV
y)QWh
T$$hP
y"QWh
QQSSSSSSV
QSh0q
y"QSh,r
PPPPPPVW
y"QVh
y"QVh@z
y"QVh
QVhP{
y"QWh
T$8PPPPVh
y"QWhx}
PPPPPPV
y"QSh,r
PPPPPPVW
QVh o
QVhDN
y"QVh
QVh o
QVhDN
y"QVh
y"QVhP
y"QVh
QQSVW
QVh o
QVhDN
y"QVh
QQSVW
QVh o
QVhDN
y"QVh
y'QVh
QVh o
QVhDN
y"QVh8
y'QVh
QVh o
QVhDN
y"QVh
QQSVW
QVh o
QVhDN
y"QVh
QQSVW
QVh o
QVhDN
y"QVh
y"QVhx
y'QVh
y"QVhx
y"QVh
y"QVhx
y(QWh@
y"QWhX
y-QWh
y"QWhp
y(QWh
y"QWh
y-QWh
y"QWh8
y$QVh@
y'QVh
y"QVh
QSVW3
y$QVhL
y$QVh
Pj'h(
Pjch`
G4VVWP
Pjgh`
;K0t<
;H0t*
;H0t*
;H0tES
;Q0tC
x,SSh
x,SSh
QQSVW
QQSVW
693t%
SVSPSj
QQSVW
QQSVW
y QVh$
y%QWh
y4QSh
y%QShx
QWPh`
y)QPh
y)QPhx
L$0QP
y$QVh
y$QVh`
t$4WP
y$QVh0
y-QVhX
D$XSV
\$4Pj
D$8Pj
D$PPj
y"QVh
y"QVh
y$QVh
QVh|W
y$QVh
L$4SV
y)QSh
L$$9L$
yMQSh
y2QSh
QVh|g
y$QVh
L$$SV
y"QWhH
QQSSSSSSVP
QQQQQQVP
yQQWh@
QWh8}
y$QVh(
y'QWhH
y:QWh
y QWh
L$$SV
y"QWh
QQSSSSSSVP
SSSSSSVP
y'QSh
PQh@D
y'QShX
PQh@D
y$QShX
PjhhX
ti9\$
9X$vC
Z9p,tL3
T$$;E
T$$;]
L$ ;u
PjlhX
@;G(v&
QQSVW
QQSVW
;K@t<
x,SSh
QQSVW
y"QVh
WjPSj
Wj[Sj
SjfhH
091t(P
WjxSj
y"QWh
PjHhP
y"QVh
y QVh
y%QWh8
y%QWh`
y%QWh
y"QWh\
L$ Qh
y QWh
y%QSh
y%QSh 
y1QSh
y/QSh
y'QSh
y"QSh
y"QVhl
y"QVh
y"QVh`
y'QSh\
y'QSh
D$LPW
y<QSh
D$HPQ
9D$Lv6
L$(QS
D$8;D$H
y"QSh
QQSVW
CYWWSP
QQSVW
9_ t'
x,SSh
x,SSh
x,SSh
QQSVW
y%QVh4
y.QVhXb
y+QVh
y+QVhXc
y4QVhX
y<QVh
9\$(t
y.QVh
D$0PjEh0
y QVh
D$ PjEh0
y QVh
PjPhh
y&QWhh
y QWh
D$(Ph
y&QWhh
y QWh
w\_^[
y"QVh
y"QVh
L$HQP
y0QVhP
yGQVh
D$ PQ
D$ PhX!
L$0QVPh
T$0QQj
8T$0u
D$4PQ
ymQWh
L$0QVPh8$
T$0QQj
8T$0u
D$4PQ
ymQWh
D$ Ph
T$(PPPPPPS
8\$ u
D$ PQ
y_QVhp&
QQSSSSSSW
D$ Ph
T$(PPPPPPS
8\$ u
D$ PQ
y_QVh()
QQSSSSSSW
L$8QVPhp(
QVhX*
QPhD*
QWhX+
D$0PQ
y~QVh
D$,QQj
L$(QPh
T$0QQQQPh4*
QVhX*
QPhD*
yjQVhP-
PPPPSh4*
QVhX*
QPhD*
D$,PQ
yzQVh
L$(QPh
T$0QQQQPh4*
QVhX*
QPhD*
yjQVhX1
PPPPSh4*
QVhX*
QPhD*
D$(PQ
yzQVhH3
L$ QPh
T$(QQQQWh$4
QWhP5
8T$ u
D$$PQ
yfQVh
PPPPWh$4
D$ Ph
T$(QQQQQQP
8T$ u
D$$PQ
ybQVh
PPPPPPW
D$(Ph
T$0QQQQQQP
QWhd7
QVh`9
D$,PQ
ynQVhT
PPPPPPW
L$ QPh
T$(QQQQWh$4
QWhP5
8T$ u
yfQVhT
PPPPWh$4
D$ Ph
QVh8;
y"QWh
QVh(=
QQPh\=
QWhP5
8T$`u
D$ PQ
QQPh\=
L$8QPh
T$@QQQQWhX@
8D$8u
D$@PQ
y"QVh
PPPPWhX@
L$8QPh
T$@QQQQWhX@
D$@PQ
y"QVh@B
PPPPWhX@
L$ QPh
T$(QQQQSh$4
yfQVh(C
PPPPSh$4
D$ Ph
T$(PPPPPPS
8\$ u
D$ PQ
y_QVh
QQSSSSSSW
D$0PhPE
T$8QQQQQQP
QVhHH
D$DPQ
y"QVhPG
PPPPPPW
D$0Ph
T$8QQQQQQP
QVhHH
D$DPQ
y"QVh
PPPPPPW
L$ QPh
T$(QQQQSh
QVhX+
yfQVh
PPPPSh
tP!|$
L$8QVPh
T$@PPPPPPV
QVhX*
QWhlN
D$,PQ
yjQVh
jjjjjj
y"QVhpP
D$(Ph
T$0QQQQQQP
8T$(u
D$<PQ
ybQWh
PPPPPPV
D$(Ph
T$0QQQQQQP
8T$(u
D$<PQ
ybQWh T
PPPPPPV
D$ PhhS
T$(PPPPPPS
8\$ u
D$$PQ
y_QVh V
QQSSSSSSW
L$(QPhpU
T$0QQQQPh
QWh *
QVhX+
8T$(u
D$ PQ
yjQVh
PPPPSh
L$(QVPh
T$0QQQQPh
QWhX+
D$,SQj
yjQWh
PPPPVh
L$@QP
L$PQWVPhHZ
D$$QQVhP[
QVhX*
QPhD*
QPh|[
QSh`[
D$<PQ
QVhh\
D$8QQWhP[
D$$Ph
T$(QQQQPh
QWh *
QVhX+
WQQQP
yqQVh@]
PPPPWh
D$(Ph(^
T$(PPPPPPS
QVh|M
y_QVh0`
QQSSSSSSW
D$(Ph
T$0PPPPPPW
D$(PQ
y"QVh
PPPPPPW
D$ Ph
T$(QQQQQQP
8T$ u
D$$PQ
ybQVh
PPPPPPW
D$ Ph
T$ PPPPPPV
y[QVh
PPPPPPW
D$(Ph
T$(PPPPPPS
QVh|M
y_QVh0f
QQSSSSSSW
D$ Ph@g
T$ PPPPPPV
y[QVh@h
PPPPPPW
QVhHH
y"QVh
y"QVh
y'QVh
y/QVh`j
y,QVh
y,QVh k
y,QVh0l
y/QVh
QVhll
y'QVh
0QVh,m
QVhTm
QWh *
QVhHH
y"QVhHo
$SVWj
x,SSh
$SVWj
x,SSh
$SVWj
x,SSh
y$QQS
y$QQS
y$QQS
QQSVW
QQSVW
QQSVW
QQSVW
QQSVW
QQSVW
QQSVW
QQSVW
QQSVW
QQSVW
QQSVW
QQSVW
u@PPW
Pj]h`s
PjSh t
PjRh(u
PjVh8w
y"QVhPy
$SVWj
y$QQS
x,SSh
$SVWj
y$QQS
x,SSh
$SVWj
y$QQS
x,SSh
$SVWj
y$QQS
x,SSh
$SVWj
y$QQS
x,SSh
$SVWj
y$QQS
x,SSh
$SVWj
y$QQS
x,SSh
$SVWj
y$QQS
$SVWj
y$QQS
x,SSh
PjYh0
$SVWj
y$QQS
x,SSh
x,SSh
y QVh
y QVh
y QVh
Pj.h@
D$hPQQ
y"QVhh
y'QWh 
y4QWhh
yMQWhx
y"QWhH
y'QVh
y'QVhp
y"QVh
RSWVj
y"QVhP
y QVh
y QVh
y QVh
y QVh
y QVh
y QVh
y"QVh
y"QVh
y"QVh
y"QVh
y"QVh
y$QVh
y$QVh
y"QVh
u$QWh
y$QVh
y"QVh\
tCf;}
r!f;E
v9f;}
/t.f;E
jSXf;
jSXf9E
j.Xf9
rj+_f;
j-_f;
ZuJf9Lr
j;Xf9E
j+Zf;
j-Zf;
j;Zf;
M QRSP
D$pPh
y)Wh0
y6QVh
y QVh8
QVhXc
y"QVhp
y"QVh(
y'QVh`
y'QVh
yQQVh4
yJQVh
y8QVhT
y-QWh
y*QWhd
D$(SV
y+QWh 
t$4Pj(h
y-QWh
y"QWh@
y'QWh
y/QVh
y0QVh
y-QVhh
L$ QWP
y'QVh
t$ Vj
y"QVh
y'QVh
y'QVhD
y'QVhH
y$QVh
y'QWh
y'QWh8
y*QShh
y$QWh
y"QVhH
y*QSh
y'QSh
y4QShl
y"QWhT
y'QWh
QSVW3
uW97t*h
y%QVhh
y%QVh
y%QVhH
y%QVh
y2QVh
yEQVh
Pj#hx
y=QVh 
y'QVh
y"QVh
y'QVh
Pj"h 
y"QVhX
yEQVh
y"QVh
y&WhP
y"QWh
y5QVh
Pj3hH
y"QVhD
y'QVh
y"QVh
y9QWh
y"QWh
y'QWh
y'QWh0
y'QWh
y'QWh
y'QWhT
y$QWh(
y'QVh
y'QVhT
y3QVh0
y1QVh
y3QVh
y=QVhH
y"QVh
y'QVh
Pj"h 
y'QVh
y/QVh
y,QVh@
y"QSh
y'QVhp
y$QVh
y$QVh
y"QVhP
L$4Pj
y"QVhP
yMQVh
y$QVh8
y'QSh`
T$<Zf;
9.u1h
j:[f9
\$ t)
t$8QP
T$(j:Yf9
D$,YY9D$
j-Yf9L$8u
ykQVh
y"QVh0
y'QWhx
y0QVh
y'QVh
y0QVh`
y'QVh
y'QVhx
yBQVh
y7QVh
"QVhX
"QVh@
y'QVh
y'QVhX
y"QVh\
y'QVh$
y'QVh
y"QVh
j+Xf;
u"QSh
y%QVh`x
y.QVh
y%QVh
y%QVhP
y%QVh
L$'QP
L$DQP
D$4PV
D$0PV
L$4PW
L$'QP
D$(P2
yUQVh
y5QVh 
y-QVh
y|QVhx
L$XQRP
PjXh 
PjVhp
;K0t<
y QVhT
y'QVh8
y'QVh8
y'QVh$
y"QVht
Q9O\u+
y0QVh
y"QVh
Q9K\u(
y"QVh
Q9K\u(
y"QVh 
Q9K\u(
y"QVhX
y"QVh8
y'QSh
PjIhX
PjKh(
I8QWh
PjOhX
PjMhx
PjKh@
;K0t<
C;\$ 
;H0t?
;H0t?
Pj!hP
y"QVh
QQSVW
u"QSh
y%QVh
y5QVh
y=QVh 
QVh0!
y5QVh@ 
D$DPQ
QVhL"
y.QVh`x
y+QVh<
y@QVh,"
L$7QP
D$(PV
L$7QP
QVh\#
|$8PW
YPhp"
y\QVh
|$<PQ
y$QVhH$
y QWh
QQSVW
y'QSh()
y'QSh
y1QVh
\$DPj$hP>
y0QVh
y-QVh
y2QVhH,
y0QVh
y9QVh01
L$D_^[3
QVhH4
y"QVh05
QVhh5
QVhx7
QVh05
y"QVhx8
y"QVh
y"QVh
y"QVh
y/QWh(:
y*QWh
y*QWhh;
QVhh<
y'QVh
y'QVhP=
QVhh<
y'QVh
y'QVh
y%QWh
QWh(A
y%QWh
y8QWh
QWh@A
QWh,B
QWh`B
QWh0C
y'QWh
QWh(D
QWh0E
y3QWh
y0QWh
y>QWh
QWh@G
y$QVh
y'QShXH
y9QSh
y7QSh
QShpI
QShxJ
y"QSh`K
QVhTM
y"QVh
y'QVh
y'QVh
y'QVhpO
y'QVh O
y'QVh
y'QVhPP
PPPPPPV
y'QPh
y2QVh
y/QVhh
y'QVh
PPPPPPV
QVh@T
y"QVh
yTQVhHU
y6QVh
QVhxV
y,QVh
QVh@W
y1QVh
Pj=hX
y.QVh(X
;Vh@Z
QQSVW
u'QVh,Z
QVh \
SSWhp
QVh ]
PPPPWhL^
y=QSh
yCQShd^
QShD_
QShh_
QShx`
yHQSh
QQQQWhL^
y$QVhha
y"QVh
9wlu&h
9wlu&h
9wlu&h
QSVWhtj
y$QVh
y$QVh<e
y"QVh
QPh8g
Pj^hHm
PjbhPl
^Whtk
u@PPW
;H0t?
PSSSSSSSj
QVh$o
Pj#h8
y QVh
y QVh
y QVhPs
y QVh@u
y'QWhLv
y'QWh
y'QWhlv
y0QWh
QWhhG
L$$u(j
D$/PW
D$$t,
QWh0y
D$4PQ
QWh`z
QWh,z
y0QWh
D$$PV
y-QWhT{
|$0PV
ykQWh
QWh$|
QWh\|
QWh }
PPPPPP
QVh<~
QVhx~
y"QVh
y'QVh 
y'QWh
y'QWh8
L$$QP
L$(QP
L$8QP
y0QWhT{
L$hQP
y]QWh
QWh\|
y'QVh 
WQVh8
y'QVh 
y"QVhD
y"QVh
PjYh(
xv9\$
CiWWSP
WSh|5
xB9t$
CiWWSP
Pj\h8
PjbhP
Pj]hh
sD+D$
y QSh
G ;A0t(
;K0t<
tw9^,t
tw9^,t
x(9s$t#
P9w u
&9N<u
;Q0tR
;Q0tR
;Q0t1
;Q0t'
QQSVW
y QVh,
y%QVh
y%QVhh
9_ tv
y-QVh8
y QVh 
y%QVh
y%QVhh
y-QVh8
y QVh
D$(SV3
D$ Pj
y'QVh
D$$Pj
y$QVh0
y"QVh`
y"QVh(
y'QWh
y'QVh
y"QVh
D$ PSW
y$QVh
y(QVh
y QVh
y QVh
y%QWhH
y3QWh
y3QWh
y+QWh8
y,QWh
y)QWh
t$4VP
y%QWh
L$ QP
D$<PQ
y%QWhP
D$(PQ
y%QWh
L$8QP
L$4QP
y-QWhl
y'QVh
y'QVh
y'QVh
y'QVh
QVhxA
y2QVh8
QVhL,
QVh@A
y'QVh\
y'QVh
QVhL,
Pj+h8
K<9{(t'
y'QVh
C8PVQ
y'QVh
C0PVQ
y"QVh(
y"QVh
y"QVh@
y'QVh,
L$,QP
y'QVh
y'QVh
L$(QP
D$DSP
L$PQP
L$HQP
y'QVh
t$4SWVPh
L$8QP
L$4QP
y$QVh
y"QVh
y"QVhT
y"QVh
y"QVh
y"QVh
y"QVh
y"QVh@
y"QVh
y"QVh@
y"QVh
y$QVh
y"QVh
y"QWh`
y$QVh
y$QVh8
9_ t%
x,SSh
x,SSh
x,SSh
9_$t%
y QVh
y QVh
y"QVhX
SVWh$
jjjjjj
y2QVh
y QVh0
y QVh<
y5QVh`
y QVh
y QVh
y QVhP
y QVh
y QVht
y QVh
y QVhl
y QVh
y"QVh
QQSVW
QVh(A
y QVh
yXQWh|
y%QWh
L$0QQVW
y"QWh
PjThx
$SVWj
y$QQS
x,SSh
y QVhh
y(QWh
y*QWh4
y-QWh
y*QWh
y"QWh
y%QWh
y%QWh
PQQQQ
y0QWh
y'QSh
PSSSS
y'QWh
PQQQQ
PVVVV
y=QWh`
y QWh
y1QSh
y'QSh
y'QSh@
y$QSh
y"QSh(
y+QVh
D$ Pj
D$lSP
y9QVh
y-QVh
y-QVh
y0QVh
y"QVh
y+QVhh
D$ Pj
y'QVh
y'QVh
yKQVh
y0QVh
y"QVh
QVhx!
y"QVh("
y"QVh
PQQQQ
QWhx%
pQWh\
QWh@$
y-QSh
y"QSh
QVhp'
y'QVh4'
y'QVh()
y$QVh
y:QVhh*
y%QSh
y-QSh
y-QSh
y-QSh4-
y-QSh
QShP.
0SVW3
y%QVh
y QVhh/
QVh|1
QVh(1
QVh(0
y'QVhX
y'QVhP2
QVhH3
y'QVh
y'QVh
y'QVhp5
y'QVh
y&Vh`6
QVhP7
y$QVh
y'QVhP8
QVh89
y;QVh
y'QVh
y'QVh
QVh`:
y'QVhh;
yKQVh
QVh@=
QVhT<
QVhh?
y;QVh
QVhx>
QVh@>
y'QVh(?
y7QVh8@
y,QVh
QVhhA
QVh B
y'QVh
QVhtC
QVh$D
y'QVh
QVh`:
y'QVhh;
y'QVh
QVhXD
y/QVh<R
y'QVhhE
ykQWh`J
y?QWh
QWh8J
y(QWh<K
ybQWhhL
QWh|K
WjUSj
Wj`Sj
QVhtM
WjkSj
WjvSj
QVh|N
ti9\$
9X$vC
Z9p,tL3
T$$;E
T$$;]
L$ ;u
Pjhh(G
PjfhHF
@;G(v&
;K@t<
Pj>h`
y QWh
QVh(P
y QVh
QVh`P
y QVh
y%QVhPQ
VQVhdR
QQSVW
CYWWSP
Pjjh(T
y QVh
QVh(A
y QVh
y QVh
\$ WVP
QQQQPhPJ
y QVh
QVh(A
y QVh
y QVh
L$$QQ
t$@WS
y"QVh
QVh(A
y QVh
y%QWh
L$(QQVWQ
y QWh
QVh8[
y%QVh
QVhd\
QVh8\
QWhL]
QWh ^
VSPQh
SWVPh
WVPSh(b
y'QWhxc
QWhtd
QWh<d
QVh(A
QVh8e
y"QVh
y-QVh
PPPPPP
$SVWj
y$QQS
x,SSh
QVh(A
y QVh
QWhLk
y QVh
PVVVV
y"QVh
y QVhxk
PPPPPP
QVh8l
QVh(A
y QVh
QWh,m
y QVh
D$ PSSSS
y"QVh
y QVh
QVh(A
QVhPo
y QVh
QVhXp
y-QVh
y%QVhxp
QVhPs
QVh0r
y"QVhht
PPPPPP
yIQVh(v
j-Xf;F
f;F$u
f;F.u
$SVWj
y$QQS
x,SSh
QVh(A
y QVh
QVhT|
t$$h|L
$SVWj
y$QQS
x,SSh
y QVh
QVh(A
y QVh
L$ Qj
y.QSh@
L$$QSQW
y"QSh
$SVWj
y$QQS
x,SSh
y QVhl
y QVh
y QVh4
QQSVW
y QSh
QVh(A
y QVh
y QVh0
y QVh
PPPPPP
y QVh`P
QVh(A
y QVh
y QVh
y QVh@
PPPPPP
QVh(A
y QVh
y QVh0
y QVh
PPPPPP
QVh(A
y QVh
y QVh
L$0VW
y QVh
PPPPPP
PjLh 
$SVWj
y$QQS
x,SSh
QVh(A
y QVh
y QVh
y4QVh
y QVh8
PPPPPP
y QVh<^
Pj)h8
QVh(A
y QVh
y QVh4
y%QVh
QVhLv
y4QVh(
y QVh8
PPPPPP
Pj.h 
QVh(A
y QVh
y QVh4
T$,RQ
y%QVh
y$VhX
y QVh
T$(QQ
D$ 9D$
QQQQQQ
QVh(A
y QVh
y QVh4
y QVh@
VWu$Q
y QVh
y'QVh
D$,PQ
@9D$,
QQQQQQ
QQSVW
QQSVW
QVh(A
y QVh
y QVh0
y!QVh
y Vhh
PPPPPP
QVh(A
y QVh
y QVh4
y QVh@
y%QVh
D$(PQ
@9D$(
9D$ t
QQQQQQ
QVh(A
QVh8l
y QVh
y QVhH
L$(VW
y%QVh
PPPPPP
y$QVh
y"QVh
QVh(A
y QVh
y QVh
y QWh
PPPPPP
Pj0h8
y QVh
y QVh
y"QVh
PPPPPP
y QVh
y QVh
L$(VW
y%QVhl
y"QVh
PPPPPP
QVh8l
QVh(A
y QVh
y QVhH
y%QWh
D$ PQ
D$,PV
D$(;D$ 
y"QVhT
PPPPPP
QQSVW
QVh(A
y QVh
y QVh 
L$ VW
y+QVh
y QVh
QQPPPPPP
Pj*hh
QVh(A
y QVh
L$(VW
y QVhp
WWWWWW
y QVh
y"QWh
PPPPPP
y QVh
y QVhH
y%QVh
y%QVh8
y%QVh
y QVhp
PPPPPP
y-QVhX
y QVh
y QVh<
y@QVh
y+QVh`
y QVh(
jjjjjj
y QVh
y QVh<
y%QVhLv
y QVh
PPPPPP
QVh(A
y QVh
y QVh
L$(VW
y=QVh
y QVh
QQPPPPPP
y QVh
Pj7h`
QQSVW
QVh(A
y QVh
yFQVh8
y QVh
L$(VW
y"QVh
VVVVVV
[ShPd
y"QVh8
ycQVh
y"QVh
y"QVhd
y QVh
y,QVh
y QVhx
y QVh
y,QVh
y QVhx
y QVh
y QVh
y'QVh
y"QVh
y"QVh
y"QVh
y"QVhd
y"QVh
Q9Ktu(
y"QVh 
Q9Ktu(
y"QVhX
y'QVh
y/QVhh
(QVh0
y"QVh8
y/QShT
y'QSh
PjVh0
;K0t<
x(Qh(Y
Pj,hX
y"QVh
y-QSh8}
.QSh@
y QShd
y QVh<
y QVh
y"QVhd
y"QVh<
y"QVh
K\!t$ P
xi9t$
tw9^,t
F$9^(t(
y+QWhh
y QWh
y QVhP
y QVhh
y%QVhh
0QSh(
"QShh
y3QSh
yoQSh
y5QShH
y9QSh
y;QSh
yCShH
y2QSh
y2QSh
y6QSh`
y5QSh
u/9wHu*h
w@t*h
PVVVV
y>QSh
O<VuKj
yYQSh`
y"QVh
Sj+h0
WjESj
WjPSj
VWu5j
y"QVhX
Wj9Sj
WjDSj
WjOSj
WjZSj
WjeSj
QVh|N
WjpSj
Wj{Sj
9>u3WP
9>u"QPhH!
yrQWh
QWhh!
QWh@"
WjPSj
Wj[Sj
QVh|N
WjfSj
WjtSj
QVht%
Pj`h@*
Pjeh8(
tw9^,t
Pj1hH
y"QSh`,
y%QVh@-
y%QVh
y%QVh
y%QVh
y%QVh
y%QVh /
y%QVh
y%QVh
y,QShP1
y<QSh
y%QShp2
QSh(3
y:QVh
y:QSh
y5QSh
y*QSh`4
u)QWhL4
y"QVh$o
QVhX5
y"QVh$o
y)QVhX6
y"QVh
y"QVhX8
y'QVh`9
y'QWh`9
y"QWh
y$QVh`9
y5QSh
QSht;
y5QSh
y'QShT=
y=QShT
QShp>
QSh >
y'QSh
QSh(?
QShP@
y'QSh
yKQSh
y2QSh(A
y2QShLB
y/QSh
y2QShDC
y/QSh
y$QSh
QVh`D
PPPPVhPD
y'QVhxD
y'QVhhE
SShPd
y5QWh`F
y"QWh
ywQVh
y QWh
QWh`I
VPj@Z
QVhDL
y QVh
QVhPJ
QVhxJ
QVh(K
y QVh
y"QVh
Wj)Sj
QVhTN
WjASj
QVhtO
y QVh
y QVh\S
D$ PQ
yFQVh
;T$ r
yyQVhtU
QVh<U
PjVh(\
PjQhpZ
;K0t<
tw9^,t
y-QVh`_
y QVh
QVhXb
y QVh
QVhDc
t$,QQ
yDQSh<d
D$,PQ
QSh`d
T$(9T$,
D$ PV
T$(;T$,
y"QSh4f
QSh@e
QShXf
PjRhhm
QQSVW
CiWWSP
PjVhHk
Pj[h`i
tw9^,t
tw9^,t
QVh|n
QShXo
9{ t'
y%QVh(q
y2QVhTr
y"QVh
y QVh
QVh0s
QQSVW
y QVh
y"QVh
y QVh
y QVhp{
QVhP}
y QVhH~
y"QVhd
y QVh
y QVh
Q9KTu&
y QVh 
Q9KTu(
y"QVhX
QVh8l
y"QVhl
y%QVh
QQSV3
y"QVh
8^)uY
y"QShL
WjhSj
Pj-hH
yOQVh
WjOSj
Wj[Sj
WjfSj
QVht%
Sjqh`
QVh|N
y.QVhX
y"QVh
Pj-hx
y QVh@
y QVh\S
y QVh
t+9O(t&
9~ t(
QQSVW
|$4Pj#h8
L$4_^[3
xcWWW
 SVW3
 SVW3
D$Hl5
L$4Qh
L$XQP
|$lPj
L$l_^[3
scPPh g
t1SV3
<SVWj
PSVQQ
PVSSS
Pj?hx
Pj#h8
WPQQV
QQSVW
D$<Pj
Pj?hx
Pj?hx
Pj#h8
D$ SVW
PjEh0
D$ SVW
Pj"h(
PjEh 
D$$Pj
QSVWj@3
xAj@j
Pj4h(
;K0t<
QQSVW
QQSVW3
QQSVW3
t#Sh4
 9>t#ShT
f9:t3
t\j;V
OWShX
r(SP3
PQQSVW
Y__^[
QRPh$2
QRPhD2
QRPhd2
QRPh$3
QRPhD3
QRPhd3
QRPh$4
QRPhD4
QRPhd4
QRPh$5
QRPhD5
QRPhd5
RoOriginateError
RoOriginateErrorW
WindowsCreateString
WindowsGetStringRawBuffer
WindowsDeleteString
WindowsIsStringEmpty
WindowsStringHasEmbeddedNull
HSTRING_UserSize
HSTRING_UserMarshal
HSTRING_UserFree
HSTRING_UserUnmarshal
SHTaskPoolQueueTask
SHTaskPoolAllowThreadReuse
SHCreateMemStream
CoTaskMemAlloc
CoCreateInstance
CoCreateFreeThreadedMarshaler
UuidCreate
NdrDllGetClassObject
NdrDllCanUnloadNow
NdrOleFree
NdrOleAllocate
NdrStubForwardingFunction
CoGetApartmentType
CoWaitForMultipleHandles
RoReportFailedDelegate
RoGetMatchingRestrictedErrorInfo
RoTransformError
IsErrorPropagationEnabled
WindowsCreateStringReference
RoGetActivationFactory
SetRestrictedErrorInfo
CoSwitchCallContext
WindowsDuplicateString
WindowsCompareStringOrdinal
CoTaskMemFree
CoReleaseMarshalData
RoInitialize
RoUninitialize
CreateStreamOnHGlobal
CoMarshalInterface
GetRestrictedErrorInfo
RoGetAgileReference
RoActivateInstance
CoGetInterfaceAndReleaseStream
CoImpersonateClient
CoRevertToSelf
CoSetProxyBlanket
WindowsGetStringLen
WindowsDeleteStringBuffer
WindowsPreallocateStringBuffer
WindowsPromoteStringBuffer
WindowsSubstringWithSpecifiedLength
WindowsSubstring
I_RpcBindingInqLocalClientPID
CoGetMalloc
ConvertSidToStringSidW
RpcServerInqCallAttributesW
CoGetCallerTID
CoGetCallContext
CoTaskMemRealloc
WindowsConcatString
WindowsTrimStringStart
WindowsTrimStringEnd
RpcStringBindingComposeW
RpcBindingFromStringBindingW
RpcBindingSetAuthInfoExW
RpcStringFreeW
UuidFromStringW
StringFromGUID2
NdrClientCall4
IIDFromString
CreateRandomAccessStreamOverStream
EvtExportLog
OpenStateExplicit
GetStateFolder
CloseState
PackageFamilyNameFromFullName
GetPackageFullName
CryptAcquireContextW
CryptCreateHash
CryptHashData
CryptGetHashParam
CryptDestroyHash
CryptReleaseContext
ComposeLegacyXboxContentIdFromInstalledContentId
GetRequiredEkbFromContentId
GetERAPackageFullNameByAumid
GetPurchaseAppLaunchAumid
GetPurchaseAppPackageFamilyName
PolicyManager_GetPolicyInt
keybd_event
MapVirtualKeyW
SetForegroundWindow
GetForegroundWindow
FindWindowExW
GetWindowThreadProcessId
GetWindowTextW
UMgrGetConstrainedUserToken
UMgrOpenProcessTokenForQuery
UMgrOpenProcessHandleForAccess
UMgrQueryUserContext
UMgrQueryUserToken
QueryTraceW
FlushTraceW
CapabilityCheck
GetPackageFullNameFromToken
GetCurrentPackageFullName
GetPackageFamilyNameFromToken
PackageNameAndPublisherIdFromFamilyName
WinHttpCloseHandle
WinHttpGetDefaultProxyConfiguration
WinHttpGetIEProxyConfigForCurrentUser
WinHttpGetProxyForUrl
WinHttpSetOption
WinHttpSendRequest
WinHttpOpenRequest
WinHttpSetStatusCallback
WinHttpReadData
WinHttpReceiveResponse
WinHttpQueryHeaders
WinHttpAddRequestHeaders
WinHttpCrackUrl
WinHttpConnect
WinHttpOpen
WinHttpSetTimeouts
WsReadChars
WsFindAttribute
WsReadStartAttribute
WsReadEndAttribute
WsFreeError
WsFreeHeap
WsFreeReader
WsCreateError
WsCreateHeap
WsCreateReader
WsReadXmlBufferFromBytes
WsSetInputToBuffer
WsMoveReader
WsReadToStartElement
WsGetReaderPosition
WsReadBytes
WsReadStartElement
Windows.ApplicationModel.Store.dll
DllCanUnloadNow
DllGetActivationFactory
DllGetClassObject
_vsnwprintf
memcpy_s
_purecall
??_V@YAXPAX@Z
wcscpy_s
malloc
_XcptFilter
_amsg_exit
_initterm
_lock
_unlock
__dllonexit
_onexit
msvcrt.dll
__CxxFrameHandler3
_except_handler4_common
_errno
realloc
EtwEventRegister
EtwEventUnregister
EtwEventSetInformation
RtlUnsubscribeWnfStateChangeNotification
EtwEventWriteTransfer
ntdll.dll
api-ms-win-core-kernel32-legacy-l1-1-0.dll
GetModuleHandleExW
GetProcAddress
FormatMessageW
GetCurrentThreadId
HeapAlloc
GetProcessHeap
HeapFree
GetModuleFileNameA
DebugBreak
GetModuleHandleW
GetLastError
IsDebuggerPresent
OutputDebugStringW
SetLastError
CloseHandle
ReleaseSemaphore
ReleaseMutex
WaitForSingleObjectEx
AcquireSRWLockExclusive
AcquireSRWLockShared
WaitForSingleObject
OpenSemaphoreW
DisableThreadLibraryCalls
InitializeSRWLock
ReleaseSRWLockExclusive
DecodePointer
GetCurrentProcessId
CreateMutexExW
InitOnceExecuteOnce
CreateSemaphoreExW
ReleaseSRWLockShared
EncodePointer
CompareStringW
MultiByteToWideChar
RaiseException
Sleep
UnhandledExceptionFilter
SetUnhandledExceptionFilter
GetCurrentProcess
TerminateProcess
QueryPerformanceCounter
GetSystemTimeAsFileTime
GetTickCount
EventActivityIdControl
SetThreadpoolTimer
CreateThreadpoolTimer
LeaveCriticalSection
EnterCriticalSection
DeleteCriticalSection
InitializeCriticalSectionEx
WaitForThreadpoolTimerCallbacks
CloseThreadpoolTimer
GetTokenInformation
SetEvent
FreeLibrary
CreateEventExW
OpenProcess
OpenProcessToken
ImpersonateLoggedOnUser
RevertToSelf
OpenThreadToken
GetCurrentThread
CompareStringOrdinal
EventWriteTransfer
FileTimeToSystemTime
SystemTimeToFileTime
LocalFree
OpenThread
GetProcessIdOfThread
GetProcessId
DuplicateTokenEx
GetUserGeoID
GetGeoInfoW
CompareFileTime
CheckTokenMembershipEx
FindResourceExW
LoadResource
SizeofResource
LockResource
FreeResource
GetTickCount64
CreateEventW
AllocateAndInitializeSid
FreeSid
LocalAlloc
LoadStringW
CreateFileA
ReadFile
WriteFile
SetFilePointer
DeleteFileA
GetTempPathA
GetTempFileNameA
GetFileInformationByHandle
FileTimeToLocalFileTime
ExpandEnvironmentStringsA
FindFirstFileExA
FindNextFileA
FindClose
FindFirstFileA
GetLocalTime
GetTempPath2W
DeleteFileW
ExpandEnvironmentStringsW
CreateProcessW
GetExitCodeProcess
RegGetValueW
RegSetKeyValueW
RegCloseKey
RegOpenKeyExW
RegDeleteKeyValueW
GetLocaleInfoEx
GetUserDefaultLocaleName
CreateDirectoryW
PathCchAppendEx
PathCchAddExtension
CreateFileW
GetFileSize
GetSystemTime
GetCurrencyFormatEx
GetVersionExA
GetLengthSid
CopySid
LCMapStringEx
RegOpenCurrentUser
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-core-localization-l1-2-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-util-l1-1-0.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-string-l1-1-0.dll
api-ms-win-core-processenvironment-l1-1-0.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-eventing-provider-l1-1-0.dll
api-ms-win-core-threadpool-l1-2-0.dll
api-ms-win-security-base-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
api-ms-win-core-timezone-l1-1-0.dll
api-ms-win-core-heap-l2-1-0.dll
api-ms-win-core-file-l1-1-0.dll
api-ms-win-security-base-l1-2-0.dll
api-ms-win-core-file-l1-2-2.dll
api-ms-win-core-file-l1-2-4.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-core-registry-l1-1-1.dll
api-ms-win-core-path-l1-1-0.dll
api-ms-win-core-localization-l2-1-0.dll
sprintf_s
wcstombs
strncpy_s
strtol
_set_errno
strrchr
strchr
memmove_s
mbstowcs_s
_wcsicmp
_itow_s
wcsstr
_wtol
_wcsdup
_wcsupr
_wcstoi64
wcstod
wcsrchr
wcschr
_wcstoui64
_snwprintf_s
_vsnprintf
wcstombs_s
wcstoul
_wtof
wcscspn
_wtoi
_callnewh
RtlUnsubscribeWnfNotificationWaitForCompletion
RtlQueryWnfStateData
RtlSubscribeWnfStateChangeNotification
RtlPublishWnfStateData
RtlGetDeviceFamilyInfoEnum
RtlIsStateSeparationEnabled
NtQueryWnfStateData
NtQueryInformationProcess
RtlNtStatusToDosError
RtlUpcaseUnicodeChar
UrlEscapeW
ResolveDelayLoadedAPI
DelayLoadFailureHook
api-ms-win-core-url-l1-1-0.dll
api-ms-win-core-delayload-l1-1-1.dll
api-ms-win-core-delayload-l1-1-0.dll
QueueUserWorkItem
FileTimeToDosDateTime
PathCombineA
PathRemoveFileSpecA
PathAppendA
PathAppendW
api-ms-win-core-threadpool-legacy-l1-1-0.dll
api-ms-win-core-shlwapi-legacy-l1-1-0.dll
GlobalFree
api-ms-win-core-heap-obsolete-l1-1-0.dll
InitializeCriticalSection
WaitForMultipleObjectsEx
ResetEvent
WakeAllConditionVariable
SleepConditionVariableSRW
GetModuleHandleExA
HeapReAlloc
ApiSetQueryApiSetPresence
api-ms-win-core-apiquery-l1-1-0.dll
_ftol2
_ftol2_sse
floor
memcmp
memcpy
memmove
memset
WEVT_TEMPLATE
JSON_RESPONSE(JSON_RESPONSE_ONE_STORE_CLIENT_DATA_URLS+JSON_RESPONSE_STORE_ENDPOINT_EXTENSION_URLS4JSON_RESPONSE_INTERNAL_STORE_ENDPOINT_EXTENSION_URLS
JSON_RESPONSE_MODAL_FLOW_SIZES
VS_VERSION_INFO
StringFileInfo
040904B0
CompanyName
Microsoft Corporation
FileDescription
Microsoft Store Runtime DLL
FileVersion
10.0.22621.1 (WinBuild.160101.0800)
InternalName
Microsoft Store Runtime DLL
LegalCopyright
 Microsoft Corporation. All rights reserved.
OriginalFilename
Windows.ApplicationModel.Store.dll
ProductName
Microsoft
 Windows
 Operating System
ProductVersion
10.0.22621.1
VarFileInfo
Translation
CHANh
Microsoft-Windows-Store/Operational
TEMPx
EventData
Message
Function
Error Code
Source
Line Number
Message
Function
Error Code
Source
Line Number
TEMPx
EventData
Message
Function
Error Code
Source
Line Number
Message
Function
Error Code
Source
Line Number
EventData
Process Name
Module Name
Build Name
Process Name
Module Name
Build Name
EventData
EventData
Message
Line Number
File Name
Member Name
Message
Line Number
File Name
Member Name
EventData
Message
Line Number
File Name
Function
Error Code
Message
Line Number
File Name
Function
Error Code
EventData
Message
Line Number
File Name
Function
Exception Details
Message
Line Number
File Name
Function
Exception Details
PRVA\
Windows-ApplicationModel-Store-SDK
OPCO 
win:Info
Error
Error
Warning
Warning
Verbose
Verbose
win:Error
win:Warning
win:Informational
win:Verbose
StorefrontClientErrorTask
StorefrontClientExceptionTask
StorefrontClientWarningTask
StorefrontClientInformationTask
StorefrontClientVerboseTask
ModuleLoaded
LogMessage
StorePurchaseAppMessage
StorefrontClient
Messages
StorePurchaseApp
    "MDCollections": "https://collections.mp.microsoft.com/",
    "MDGetAppReceiptsDesktop": "https://licensingwindows.mp.microsoft.com/Licensing/License/AcquireReceipt/6.2/0?productId={productId}&receiptType={receiptType}",
    "MDGetAppReceiptsMobile": "https://licensingphone.mp.microsoft.com/v9/purchases/appreceipts?os=8.10.12400.0&requestTime={requestTime}&cc={cc}&lang={lang}&parentProductId={parentProductId}&installedPublisherId={installedPublisherId}",
    "MDGetOneProductReceiptMobile": "https://licensingphone.mp.microsoft.com/v9/purchases/receipts?os=8.10.12400.0&requestTime={requestTime}&cc={cc}&lang={lang}&parentProductId={parentProductId}&featureName={featureName}&installedPublisherId={installedPublisherId}",
    "OneStoreAuthenticationDomain": "www.microsoft.com",
    "LinkUriFormat": "https://www.microsoft.com/store/{idType}/{id}",
    "MDDisplayCatalog": "https://displaycatalog.mp.microsoft.com/",
    "MDPurchase": "https://purchase.mp.microsoft.com"
    {
        "__COMMENT__": "#0 purchase StoreID with extended response",
        "Index": 0,
        "BodyBufferMaxSize": 300,
        "InvokePurchaseFlow": true,
        "RequiresCapability": "xboxXDK",
        "RequireValidLicense": false,
        "RefreshLicenses": true,
        "BodyTemplate": {
            "StoreId": {
                "__tag": true,
                "key": "StoreId",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#1 invoke background task",
        "Index": 1,
        "BodyBufferMaxSize": 300,
        "UseBackgroundTask": true,
        "AnonymousRequest": true,
        "RequiresCapability": "previewStore",
        "RequireValidLicense": false,
        "BodyTemplate": {
            "AppServiceName": {
                "__tag": true,
                "key": "AppServiceName",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#2 TVOD",
        "Index": 2,
        "BodyBufferMaxSize": 10000,
        "InvokePurchaseFlow": true,
        "RequireValidLicense": false,
        "BodyTemplate": {
            "Offer": {
                "__tag": true,
                "key": "Offer",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#3 purchase StoreID with force retail sandbox without license refresh",
        "Index": 3,
        "BodyBufferMaxSize": 300,
        "InvokePurchaseFlow": true,
        "RequireValidLicense": false,
        "ForceRetailSandbox": true,
        "BodyTemplate": {
            "StoreId": {
                "__tag": true,
                "key": "StoreId",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#4 Force license refresh for all online running licenses",
        "Index": 4,
        "AnonymousRequest": true,
        "RequiresCapability": "storeAppInstallation",
        "RequireValidLicense": false,
        "RefreshLicenses": true
    },
    {
        "__COMMENT__": "#5 Acquire a device license - RS2+ Only",
        "Index": 5,
        "URI": "https://purchase.mp.microsoft.com/v7.0/users/me/orders",
        "DoPost": true,
        "AuthType": 4,
        "BodyBufferMaxSize": 10000,
        "RequiresCapability": "storeAppInstallation",
        "RequireValidLicense": false,
        "RefreshLicenses": true,
        "BodyTemplate": {
            "clientContext": {
                "client": "UniversalStoreInApp",
                "deviceFamily": {
                    "__tag": true,
                    "key": "deviceFamily",
                    "type": "string"
                }
            },
            "language": {
                "__tag": true,
                "key": "locale",
                "type": "string"
            },
            "market": {
                "__tag": true,
                "key": "market",
                "type": "string"
            },
            "orderId": {
                "__tag": true,
                "key": "orderId",
                "type": "string"
            },
            "items": [
                {
                    "productId": {
                        "__tag": true,
                        "key": "productId",
                        "type": "string"
                    },
                    "skuId": {
                        "__tag": true,
                        "key": "skuId",
                        "type": "string"
                    },
                    "availabilityId": {
                        "__tag": true,
                        "key": "availabilityId",
                        "type": "string"
                    },
                    "quantity": "1",
                    "devOfferId": {
                        "__tag": true,
                        "key": "devOfferId",
                        "type": "string"
                    }
                }
            ],
            "orderState": "Purchased",
            "alwaysEnforceDoublePurchasePolicy": true
        }
    },
    {
        "__COMMENT__": "#6 Acquire a license token -  RS2+ Version",
        "Index": 6,
        "URI": "https://licensing.mp.microsoft.com/v8.0/licenseToken",
        "DoPost": true,
        "AuthType": 4,
        "BodyBufferMaxSize": 10000,
        "BodyTemplate": {
            "parentProductId": {
                "__tag": true,
                "key": "parentProductId",
                "type": "string"
            },
            "enforceSellableBy": true,
            "relatedProductIds": {
                "__tag": true,
                "key": "relatedProductIds",
                "type": "string"
            },
            "customDeveloperString": {
                "__tag": true,
                "key": "customDeveloperString",
                "type": "string"
            },
            "beneficiaries": {
                "__tag": true,
                "type": "beneficiaryArray"
            }
        },
        "UserTokenTypes": 3,
        "OmitAuthTokenPrefix": true
    },
    {
        "__COMMENT__": "#7 Device token based monetization apis - RS2+ Only",
        "Index": 7,
        "URI": "https://manage.devcenter.microsoft.com/v1.0/my/storeextension/device",
        "DoPost": true,
        "AuthType": 4,
        "BodyBufferMaxSize": 10000,
        "BodyTemplate": {
            "applicationId": {
                "__tag": true,
                "key": "parentProductId",
                "type": "string"
            },
            "market": {
                "__tag": true,
                "key": "market",
                "type": "string"
            },
            "locale": {
                "__tag": true,
                "key": "locale",
                "type": "string"
            },
            "deviceFamily": {
                "__tag": true,
                "key": "deviceFamily",
                "type": "string"
            },
            "deviceMoid": {
                "__tag": true,
                "key": "deviceMoid",
                "type": "string"
            },
            "deviceOemid": {
                "__tag": true,
                "key": "deviceOemid",
                "type": "string"
            },
            "deviceScmid": {
                "__tag": true,
                "key": "deviceScmid",
                "type": "string"
            },
            "type": {
                "__tag": true,
                "key": "type",
                "type": "string"
            },
            "parameters": {
                "__tag": true,
                "key": "parameters",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#8 Store User token based monetization apis",
        "Index": 8,
        "URI": "https://manage.devcenter.microsoft.com/v1.0/my/storeextension/user",
        "DoPost": true,
        "BodyBufferMaxSize": 10000,
        "BodyTemplate": {
            "applicationId": {
                "__tag": true,
                "key": "parentProductId",
                "type": "string"
            },
            "market": {
                "__tag": true,
                "key": "market",
                "type": "string"
            },
            "locale": {
                "__tag": true,
                "key": "locale",
                "type": "string"
            },
            "deviceFamily": {
                "__tag": true,
                "key": "deviceFamily",
                "type": "string"
            },
            "deviceMoid": {
                "__tag": true,
                "key": "deviceMoid",
                "type": "string"
            },
            "deviceOemid": {
                "__tag": true,
                "key": "deviceOemid",
                "type": "string"
            },
            "deviceScmid": {
                "__tag": true,
                "key": "deviceScmid",
                "type": "string"
            },
            "type": {
                "__tag": true,
                "key": "type",
                "type": "string"
            },
            "parameters": {
                "__tag": true,
                "key": "parameters",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#9 Lookup ProductId from PackageFamilyName",
        "Index": 9,
        "URI": "https://displaycatalog.mp.microsoft.com/v7.0/products/lookup{market:market}{languages:languages}{packageFamilyName:value}&fieldsTemplate=empty&alternateid=PackageFamilyName",
        "URIBufferMaxSize": 1024,
        "AnonymousRequest": true,
        "RequireValidLicense": false
    },
    {
        "__COMMENT__": "#10 StoreList Query",
        "Index": 10,
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/StoreList/{storeListId}{market:market}{languages:languages}{locale:locale}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{top:$top}{continuationToken:continuationToken}{storeListItemTypeFilter:storeListItemTypeFilter}{productKindFilter:productKindFilter}{categoryFilter:categoryFilter}{targetDeviceFamily:targetDeviceFamily}",
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#11 Search for products by query",
        "Index": 11,
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/sdk/search{market:market}{languages:languages}{locale:locale}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{top:$top}{continuationToken:continuationToken}{productKindFilter:productKindFilter}{categoryFilter:categoryFilter}{query:query}",
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#12 Given a set of product IDs, return the average ratings and counts",
        "Index": 12,
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/sdk/products/ratingsAverage{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{productIds:productIds}{displayMode:displayMode}",
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#13 ContentId/KeyId lookup by ProductId for ParentProduct",
        "Index": 13,
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/products/contentId{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{productIds:productIds}",
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#14 ContentId/KeyId lookup by ProductId NO ParentProduct",
        "Index": 14,
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/products/contentId{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{productIds:productIds}&parentProductId=",
        "RequiresCapability": "previewStore",
        "RequireValidLicense": false,
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#15 Invoke In App Redeem using Purchase Flow",
        "Index": 15,
        "BodyBufferMaxSize": 10000,
        "InvokePurchaseFlow": true,
        "AnonymousRequest": true,
        "RequireValidLicense": false,
        "BodyTemplate": {
            "ModalFlow": "redeem",
            "parentProductId": {
                "__tag": true,
                "key": "parentProductId",
                "type": "string"
            },
            "OptionalData": {
                "__tag": true,
                "key": "optionalData",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#16 Invoke In App Rating & Review using Purchase Flow",
        "Index": 16,
        "BodyBufferMaxSize": 10000,
        "InvokePurchaseFlow": true,
        "AnonymousRequest": true,
        "BodyTemplate": {
            "ModalFlow": "writeRatingsAndReview",
            "ParentProductId": {
                "__tag": true,
                "key": "parentProductId",
                "type": "string"
            },
            "PFN": {
                "__tag": true,
                "key": "PFN",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#17 StoreList Query with previewStore",
        "Index": 17,
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/StoreList/{storeListId}{market:market}{languages:languages}{locale:locale}{deviceFamily:deviceFamily}{top:$top}{continuationToken:continuationToken}{storeListItemTypeFilter:storeListItemTypeFilter}{productKindFilter:productKindFilter}{categoryFilter:categoryFilter}{targetDeviceFamily:targetDeviceFamily}&parentProductId=",
        "RequiresCapability": "previewStore",
        "RequireValidLicense": false,
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#18 Given a set of product IDs, return the average ratings and counts (previewStore)",
        "Index": 18,
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/sdk/products/ratingsAverage{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{productIds:productIds}{displayMode:displayMode}&parentProductId=",
        "RequiresCapability": "previewStore",
        "RequireValidLicense": false,
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#19 Ad SDK to get Mixer Ad data for Inline Purchase experience",
        "Index": 19,
        "URI": "https://adbroker.mp.dse.microsoft.com/v1/adbroker/srtb2",
        "DoPost": true,
        "BodyBufferMaxSize": 10000,
        "RequireValidLicense": false,
        "BodyTemplate": {
            "bidRequest": {
                "__tag": true,
                "key": "bidRequest",
                "type": "string"
            },
            "storeSdkAttributes": {
                "languages": {
                    "__tag": true,
                    "key": "languages",
                    "type": "string"
                },
                "market": {
                    "__tag": true,
                    "key": "market",
                    "type": "string"
                },
                "deviceMoId": {
                    "__tag": true,
                    "key": "deviceMoid",
                    "type": "string"
                },
                "deviceScmId": {
                    "__tag": true,
                    "key": "deviceScmid",
                    "type": "string"
                },
                "deviceOemId": {
                    "__tag": true,
                    "key": "deviceOemid",
                    "type": "string"
                },
                "deviceFamily": {
                    "__tag": true,
                    "key": "deviceFamily",
                    "type": "string"
                }
            }
        },
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#20 Get list of PTI devices for a user",
        "Index": 20,
        "URI": "https://pti.store.microsoft.com/v1/pti/devices{market:market}{languages:languages}{productId:productId}{skuId:skuId}",
        "RequiresCapability": "storeAppInstallation",
        "RequireValidLicense": false
    },
    {
        "__COMMENT__": "#21 Push product to device",
        "Index": 21,
        "URI": "https://pti.store.microsoft.com/v1/pti/push{market:market}",
        "DoPost": true,
        "RequiresCapability": "storeAppInstallation",
        "RequireValidLicense": false,
        "BodyTemplate": {
            "ProductId": {
                "__tag": true,
                "key": "ProductId",
                "type": "string"
            },
            "SkuId": {
                "__tag": true,
                "key": "SkuId",
                "type": "string"
            },
            "DeviceId": {
                "__tag": true,
                "key": "DeviceId",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#22 AAD token based monetization apis - RS4+ Only",
        "Index": 22,
        "URI": "https://manage.devcenter.microsoft.com/v1.0/my/storeextension/aad",
        "DoPost": true,
        "AuthType": 2,
        "BodyBufferMaxSize": 10000,
        "BodyTemplate": {
            "applicationId": {
                "__tag": true,
                "key": "parentProductId",
                "type": "string"
            },
            "market": {
                "__tag": true,
                "key": "market",
                "type": "string"
            },
            "locale": {
                "__tag": true,
                "key": "locale",
                "type": "string"
            },
            "deviceFamily": {
                "__tag": true,
                "key": "deviceFamily",
                "type": "string"
            },
            "deviceMoid": {
                "__tag": true,
                "key": "deviceMoid",
                "type": "string"
            },
            "deviceOemid": {
                "__tag": true,
                "key": "deviceOemid",
                "type": "string"
            },
            "deviceScmid": {
                "__tag": true,
                "key": "deviceScmid",
                "type": "string"
            },
            "type": {
                "__tag": true,
                "key": "type",
                "type": "string"
            },
            "parameters": {
                "__tag": true,
                "key": "parameters",
                "type": "string"
            }
        },
        "OmitAuthTokenPrefix": true
    },
    {
        "__COMMENT__": "#23 SFDS Suggestion Service - RS5+ Only",
        "Index": 23,
        "URI": "https://sfdataservice.microsoft.com/smartinstall/v1.0/suggestions/suggest",
        "DoPost": true,
        "AuthType": 1,
        "BodyBufferMaxSize": 20000,
        "RequiresCapability": "storeAppInstallation",
        "RequireValidLicense": false,
        "BodyTemplate": {
            "data": {
                "__tag": true,
                "key": "data",
                "type": "string"
            }
        },
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#24 Invoking PurchaseApp (SXH) for the Smart Install scenario - RS5+ Only",
        "Index": 24,
        "BodyBufferMaxSize": 10000,
        "InvokePurchaseFlow": true,
        "AnonymousRequest": true,
        "RequiresCapability": "storeAppInstallation",
        "RequireValidLicense": false,
        "BodyTemplate": {
            "ModalFlow": "smartInstall",
            "data": {
                "__tag": true,
                "key": "data",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "Get campaign ID for user or device (RS5+)",
        "Index": 25,
        "URI": "https://storeedgefd.dsx.mp.microsoft.com/v8.0/campaigns/cid{parentProductId:productId}",
        "FallbackToDeviceAuth": true
    },
    {
        "__COMMENT__": "Get campaign ID for device (RS4+)",
        "Index": 26,
        "URI": "https://storeedgefd.dsx.mp.microsoft.com/v8.0/campaigns/cid{parentProductId:productId}",
        "AuthType": 4
    },
    {
        "__COMMENT__": "Get Microsoft Accrued for user or device (RS5+)",
        "Index": 27,
        "URI": "https://storeedgefd.dsx.mp.microsoft.com/v8.0/campaigns/isMicrosoftAccrued{parentProductId:productId}",
        "FallbackToDeviceAuth": true
    },
    {
        "__COMMENT__": "Get Microsoft Accrued for device (RS4+)",
        "Index": 28,
        "URI": "https://storeedgefd.dsx.mp.microsoft.com/v8.0/campaigns/isMicrosoftAccrued{parentProductId:productId}",
        "AuthType": 4
    },
    {
        "__COMMENT__": "#29 - Digital attach redeem",
        "Index": 29,
        "BodyBufferMaxSize": 1024,
        "InvokePurchaseFlow": true,
        "RequireValidLicense": false,
        "BodyTemplate": {
          "StoreId": {
            "__tag": true,
            "key": "StoreId",
            "type": "string"
          },
          "isDigitalAttachment": true,
          "attachRecordId": {
            "__tag": true,
            "key": "attachRecordId",
            "type": "string"
          },
          "hostType": {
            "__tag": true,
            "key": "hostType",
            "type": "string"
          }
      }
    }
    {
        "__COMMENT__": "#0 - Get Parent Product",
        "Index": 0,
        "URI": "https://displaycatalog.mp.microsoft.com/v7.0/products/{parentProductId}{market:market}{languages:languages}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}&fieldsTemplate=StoreSDK",
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#1 - Get User Collection for Parent Product",
        "Index": 1,
        "URI": "https://collections.md.mp.microsoft.com/v7.0/collections/sdkQuery",
        "DoPost": true,
        "BodyTemplate": {
            "validityType": "Valid",
            "beneficiaries": {
                "__tag": true,
                "type": "goldenBeneficiaryArray"
            },
            "productSkuIds": [
                {
                    "productId": {
                        "__tag": true,
                        "key": "parentProductId",
                        "type": "string"
                    }
                }
            ]
        },
        "OmitAuthTokenPrefix": true
    },
    {
        "__COMMENT__": "#2 - Get User Collection for Products",
        "Index": 2,
        "URI": "https://collections.md.mp.microsoft.com/v7.0/collections/sdkQuery",
        "DoPost": true,
        "RequireValidLicense": false,
        "BodyTemplate": {
            "validityType": "Valid",
            "beneficiaries": {
                "__tag": true,
                "type": "goldenBeneficiaryArray"
            },
            "productSkuIds": {
                "__tag": true,
                "key": "productSkuIds",
                "type": "array",
                "isOptional": true
            },
            "entitlementFilters": {
                "__tag": true,
                "key": "entitlementFilters",
                "type": "array",
                "isOptional": true
            }
        },
        "OmitAuthTokenPrefix": true
    },
    {
        "__COMMENT__": "#3 - Get Products, No Parent (No license needed)",
        "Index": 3,
        "URI": "https://displaycatalog.mp.microsoft.com/v7/products{productIdsWithCommas:bigIds}{market:market}{languages:languages}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}{actionFilter:actionFilter:OPTIONAL}&fieldsTemplate=StoreSDK",
        "RequireValidLicense": false,
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#4 - Get Products From Parent (Must have a valid license)",
        "Index": 4,
        "URI": "https://displaycatalog.mp.microsoft.com/v7/products{productIdsWithCommas:bigIds}{market:market}{languages:languages}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}{actionFilter:actionFilter:OPTIONAL}&fieldsTemplate=StoreSDK",
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#5 - Get User Collection for Parent Product by Family",
        "Index": 5,
        "URI": "https://collections.md.mp.microsoft.com/v7.0/collections/sdkQuery",
        "DoPost": true,
        "BodyTemplate": {
            "validityType": "Valid",
            "beneficiaries": {
                "__tag": true,
                "type": "goldenBeneficiaryArray"
            },
            "maxPageSize": {
                "__tag": true,
                "key": "maxPageSize",
                "type": "number",
                "defaultValue": 25
            },
            "continuationToken": {
                "__tag": true,
                "key": "continuationToken",
                "type": "string",
                "isOptional": true
            },
            "includeRelationship": {
                "__tag": true,
                "key": "includeRelationship",
                "type": "object"
            },
            "entitlementFilters": {
                "__tag": true,
                "key": "entitlementFilters",
                "type": "array",
                "isOptional": true
            }
        },
        "OmitAuthTokenPrefix": true
    },
    {
        "__COMMENT__": "#6 - Consume Consumable",
        "Index": 6,
        "URI": "https://collections.md.mp.microsoft.com/v7.0/collections/consume",
        "DoPost": true,
        "BodyTemplate": {
            "beneficiary": {
                "__tag": true,
                "type": "goldenBeneficiary",
                "isOptional": true
            },
            "productId": {
                "__tag": true,
                "key": "consumableProductId",
                "type": "string"
            },
            "trackingId": {
                "__tag": true,
                "key": "trackingId",
                "type": "string"
            },
            "removeQuantity": {
                "__tag": true,
                "key": "quantity",
                "type": "number",
                "isOptional": true
            }
        },
        "OmitAuthTokenPrefix": true
    },
    {
        "__COMMENT__": "#7 - Get Customer Purchase Id",
        "Index": 7,
        "URI": "https://purchase.mp.microsoft.com/v7.0/users/me/keys",
        "DoPost": true,
        "BodyTemplate": {
            "serviceTicket": {
                "__tag": true,
                "key": "serviceTicket",
                "type": "string"
            },
            "publisherUserId": {
                "__tag": true,
                "key": "publisherUserId",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#8 - Get Customer Collections Id",
        "Index": 8,
        "URI": "https://collections.mp.microsoft.com/v7.0/beneficiaries/me/keys",
        "DoPost": true,
        "BodyTemplate": {
            "serviceTicket": {
                "__tag": true,
                "key": "serviceTicket",
                "type": "string"
            },
            "publisherUserId": {
                "__tag": true,
                "key": "publisherUserId",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#9 - Get Products by Family from Parent",
        "Index": 9,
        "URI": "https://displaycatalog.mp.microsoft.com/v7/products/lookup{parentProductId:value}{market:market}{languages:languages}{itemCount:$top}{skipCount:$skip}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}&fieldsTemplate=StoreSDK&actionFilter=Purchase&alternateId=SellableBy",
        "UseAuthIfAvailable": true
    }
    "writeRatingsAndReview": {
        "Width": 456,
        "Height": 384
    },
    "smartInstall": {
        "Width": 640,
        "Height": 560
    }
JSON_RESPONSE
WEVT_TEMPLATE
en-US
0$0,040<0D0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7\7`7d7h7p7t7x7|7
8$8(8,80888<8@8D8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:t:x:
;4;8;P;h;
<$<(<@<X<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3@3T3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7x7|7
80848<8D8H8`8h8p8x8
9H9L9P9T9X9`9d9l9p9|9
:$:,:4:<:@:D:P:T:X:l:p:t:x:|:
;$;(;,;0;4;<;@;`;d;h;l;p;|;
< <$<(<,<8<@<D<H<L<d<h<x<|<
<0=4=8=<=d=h=p=t=x=|=
> >(>4>8>@>D>H>L>P>h>l>t>x>|>
? ?$?,?0?D?L?P?T?d?h?p?t?
0(0,000@0D0L0T0X0t0x0
1 141<1@1T1X1d1l1t1|1
2 2,20282<2@2D2H2P2T2h2p2x2
3 3(30383@3D3H3X3\3p3t3|3
4 4$4(4,444<4@4D4H4\4d4h4l4
5 5$5,54585@5D5X5`5d5x5|5
6$6(6064686<6@6P6T6X6\6d6h6p6t6
7(7,707@7H7L7d7l7t7x7|7
8$8(8084888<8@8D8X8`8d8l8p8
90949<9@9l9p9t9x9|9
:<:@:D:H:P:T:`:d:l:p:
;$;(;,;@;H;L;T;X;p;|;
<,<0<4<8<<<P<T<X<\<`<h<p<x<
=(=0=4=L=T=X=\=d=
>(>0>4><>@>T>\>`>x>|>
? ?$?,?0?8?<?L?P?T?d?h?|?
0(0,0D0H0P0T0X0\0`0d0t0x0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2(2D2H2L2P2T2`2d2h2l2|2
3034383<3@3`3d3
4 4$4(4,4044484<4@4D4L4T4X4l4p4x4|4
5 5$5(5,5054585<5@5D5L5P5T5X5`5h5l5p5
6 6(60686<6@6L6P6X6\6p6t6
7 7(7,707@7H7L7`7d7t7x7
888@8D8X8\8`8p8x8|8
9(90949H9L9T9X9h9p9t9
:,:4:8:P:T:X:\:p:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<4<8<@<H<L<`<d<h<x<|<
=(=,=0=@=H=L=`=d=|=
> >$>,>4>8>L>P>X>\>
?$?(?<?@?D?T?\?`?x?|?
0H0L0T0X0l0t0x0
1,101@1D1T1X1d1h1l1t1x1
2 2024282P2T2\2`2d2h2l2p2
30383<3@3D3T3\3`3x3
4 4$484@4D4X4\4l4p4x4|4
5 5$5(5,5054585<5@5D5H5P5T5t5x5|5
6 6$6(6,64686<6@6P6T6X6p6t6|6
7(7,7@7H7L7T7X7p7t7|7
84888<8@8D8L8T8X8l8p8t8
9 9$989@9D9X9\9`9p9t9x9
: :$:8:@:H:P:X:`:d:l:p:
;D;H;L;P;T;X;h;l;|;
<,<0<P<T<X<`<d<p<t<x<
=$=,=0=8=<=P=T=t=x=|=
> >$>4><>@>T>\>`>t>x>|>
?,?0?4?D?H?P?T?X?h?l?t?x?
00040<0@0P0T0X0\0d0l0p0t0|0
1 1(1,1<1@1D1H1P1T1X1h1l1p1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2t2x2|2
3$3(3,303@3D3L3P3`3d3l3p3
4 4(4,4@4D4L4P4`4h4l4
5$5(5054585H5L5\5d5h5|5
6 6(6,64686H6L6T6X6\6l6p6
7 74787<7L7P7`7d7h7x7|7
8 84888<8@8H8P8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;8;<;L;T;X;l;p;t;
< <$<8<@<D<X<\<h<l<p<
=,=4=8=<=L=P=T=d=l=p=
>$>(>8><>L>P>X>\>p>x>|>
? ?4?8?<?L?T?X?l?p?
00408
80D0L0P0X0\0p0x0|0
1 1$1,101D1H1P1T1X1h1p1t1
242<2D2H2P2T2h2l2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5$5(585<5D5H5P5X5\5p5t5|5
6 6(6,6064686<6L6P6T6h6p6t6x6
7 7$7,707D7H7X7`7d7|7
8$8,8084888H8P8T8h8l8|8
9 9$9(9@9D9L9P9T9X9\9h9l9p9|9
:(:0:4:L:P:X:\:p:t:
; ;$;4;8;@;D;H;X;\;d;h;l;
< <$<(<,<0<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<x<|<
=$=(=,=0=4=8=<=@=D=H=L=P=T=X=`=d=h=p=t=x=|=
>,>0>D>H>L>P>d>l>x>|>
?8?<?@?D?H?P?T?X?l?t?x?|?
0$0(080@0D0X0\0l0t0x0
1 1,10141<1D1H1\1`1p1x1|1
2(20242<2@2T2X2`2d2t2|2
30383<3@3H3L3P3`3d3l3p3x3|3
4044484<4D4H4\4d4h4|4
5,54585<5@5T5\5d5l5p5t5x5
6 6$6(60686<6P6X6\6p6t6x6
7 7(7,7074787H7P7T7l7t7x7|7
8 8(8,80888@8D8L8P8d8l8p8
9$9(9,9<9@9P9T9X9h9p9t9
9 :$:(:4:8:<:L:P:T:d:l:p:
; ;$;(;H;L;P;T;d;h;p;t;|;
<(<,<0<D<H<L<T<X<d<l<t<x<|<
=,=0=X=\=`=d=h=p=x=|=
>0>4>8><>@>H>L>T>X>\>l>p>t>x>
? ?$?(?8?@?D?X?\?`?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$242<2@2T2X2|2
3 3$3(383<3@3P3X3\3
4$4,40444D4H4L4\4`4p4t4
5 5$5(585@5D5\5`5h5l5
6(6,64686H6L6X6`6d6h6x6|6
7 7$74787D7H7L7\7`7d7t7|7
8$8(8,8<8@8H8P8T8l8p8t8x8
9(9,90949D9H9\9d9
:(:4:8:@:D:H:P:X:`:d:h:p:t:
;8;<;@;D;H;P;T;X;p;t;|;
<,<0<@<D<P<X<`<l<p<x<|<
= =$=(=,=<=@=P=T=X=h=p=t=
> >$>4>8>@>D>H>L>P>\>d>h>l>p>
?,?0?4?<?@?H?L?\?`?h?p?t?
00080<0@0P0X0\0p0t0x0
1 1$141<1@1T1\1`1x1
2$2(2,2<2@2P2T2\2d2h2|2
3 30343D3L3P3d3h3x3
4$4(4<4@4L4T4X4\4l4p4x4|4
5 5$50585<5@5P5T5X5h5l5
5 6$6(6,60686<6@6P6T6h6p6t6x6
7 7$787<7@7P7T7d7h7p7t7
8 8(8,8H8L8T8X8\8`8h8l8
9 9$94989@9H9L9`9h9l9
: :0:4:8:H:L:P:T:\:d:l:t:|:
; ;(;,;@;D;T;X;h;l;t;x;|;
< <$<,<4<8<T<X<`<d<h<p<x<
= =$=<=D=H=L=P=`=d=l=p=
> >(>,>@>D>T>\>`>t>|>
? ?(?,?0?4?<?@?T?X?\?l?p?t?
0 0(00080@0H0P0X0`0h0p0x0
1 1(10181@1H1P1X1`1h1l1p1t1x1|1
1$2(20282P2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
3$3*313I3S3Y3^3c3j3
5(6Q6
9!9A9b9f9l9p9v9z9
:6:Q:r:v:|:
;#;3;Q;V;];c;s;
<#<3<Q<V<]<c<s<
=#=3=Q=V=]=c=s=
>#>3>Q>V>]>c>s>
?#?3?Q?V?]?c?s?
0#030Q0V0]0c0s0
1#131Q1V1]1c1s1
2#232Q2V2]2c2s2
3#333Q3V3]3c3s3
4#434Q4V4]4c4s4
5:5?5I5a5f5m5s5
6!6&6-636C6a6f6m6s6
7!7&7-737C7a7f7m7s7
8'8<8W8l8
91969=9C9S9q9v9}9
:1:6:=:C:S:q:v:}:
;!;&;-;3;C;a;f;m;s;
<!<&<-<3<C<a<f<m<s<
=!=&=-=3=C=a=f=m=s=
>!>&>->3>C>a>f>m>s>
?#?3?Q?V?]?c?s?
0#0A0F0M0S0c0
1#1A1F1M1S1c1
2#2A2F2M2S2c2
31363=3C3S3q3v3}3
41464;4@4E4J4O4T4Y4^4c4h4m4r4w4
5,545:5@5F5O5e5n5s5{5
6E7K7V7]7b7h7w7
7'888E8Y8q8~8
9+9A9d9z9
;2;D;f;
;B<I<U<`<r<
>^?h?t?
1;1D1P1]1s1}1
2%2-2:2
4.4g4
5H5v5
6)686n6
; ;s;
<'<6<?<E<J<h<q<}<
='=b=
?"?*?0?6?<?
010Q0a0q0
0M1V1]1d1k1y1
272@2I2P2W2^2
3C4P4W4^4e4k4~4
5a6q6
637@7G7M7`7i7r7}7
8b9l9~9
:(:6:
;F;v;
<c<m<
=V=h=v=
=C>M>c>u>
?(?6?B?N?
071v1
2c2m2
3V3h3v3
3C4M4c4u4
495y5
636E6
797P7
8'8G8Y8d8k8
8c9z9
; ;&;,;2;D;K;O;V;Z;
<*=1=C>
>J?Z?
0,0M0V0b0o0
5;6k6
:9;Z;
<3<_<o<}<
=9=O=
>->H>Y>o>
?<?u?
030C0|0
0&1;1i1
2#252q2
4?4U4g4
525l5
6Y6s6
7!7{7
8Q8k8|8
:U:m:
;6;@;Q;[;j;
<!<(<B<K<T<v<
=(=1=:=A=H=j=w=}=
>4>A>H>N>a>j>w>~>
:$:1:P:\:
:!;X;r;
<.<U<c<u<
>'>A>N>a>y>
1 1E1S1\1
2#272Q2a2q2
3$343>3L3j3
5M6g6
808;8F8K8p8x8
979V9i9
9L:U:
<*<]<
= =(=J=,>3>
2(242<2]2
3$3,3C3h3q3z3
6n6w6
7A8h8
3'393X3^3g3p3z3
5I5[5n5
8*8j8
969y9
:J:P:
:P;x;
;0<7<=<B<Y<r<x<?=N=h=
>.>;>C>K>Q>l>v>
0"0@0
0k1u1
2%2,222<2F2T2q2
2G3c3
4=4I4Y4]4c4h4m4r4
5-545@5`5o5y5~5
5X6n6
7;7N7r7
7*8g8q8v8
9'9?9D9N9
:-:O:\:a:s:
;*;<;F;K;h;
<E<V<q<
>*>_>d>n>
?1?6?@?
%080B0G0t0
1?1c1p1
4!4>4L4f4
535B5`5
566J6P6{6
8S8^8p8
8"909H9M9R9i9s9x9
:(:b:
<(<.<5<?<q<
<'===t=
=<>A>K>c>m>r>
?(?6?@?E?e?w?}?
0)03080P0h0
0M1Y1i1m1t1x1~1
2a2k2p2
2,3c3
4.474n4s4x4
5*575_5d5n5
6 6)6?6O6X6_6j6
797C7H7q7
8&8J8Z8_8r8z8
8"9*9/9R9~9
:s:|:
:";6;<;F;M;^;c;w;
<2<=<l<
?3?<?d?{?
1 262;2E2r2
2&30353T3f3w3
4E4J4U4y4
5Z6x6
6f7k7p7
8 8Q8[8`8
8,969;9Z9z9
:.:=:B:L:b:
;0;P;d;m;
<1<P<^<|<
=5=J=s=
=)>3>8>`>l>
>/?4?9?Z?m?
0g0l0q0
1 1.1=1N1\1k1z1
2)2.282P2
3H3N3h3w3
3$43484B4r4w4
5,5N5S5X5l5{5
6R6g6p6
7:7L7
8(92979Q9Z9m9
:5:E:[:e:j:
:S;X;];
<M<R<\<
><?b?h?
1.131=1X1m1r1w1
2%242p2u2
3)3E3T3^3c3
4_4n4x4}4
5%5*545T5o5t5~5
6d7{7
8 8%8/8E8d8i8n8
9)9S9g9v9
:":S:
;Z;d;j;
0!040F0V0
1D2e2
3%3*343D3]3
4(575c5h5r5
7$7)7?7Y7c7h7~7
8@8b8
8#9(929H9o9t9~9
91:}:
:);C;b;g;q;
<E=}=
>->Z>d>i>
>t?y?~?
I0S0X0
011=1X1
2o2y2~2
3'3K3U3Z3
6:6f6p6u6
6A7P7
8(92979Y9p9
:*:c:r:|:
;";>;w;
<"<'<X<g<
=)=3=8=`=o=
>*>L>U>h>m>w>
?*?A?c?m?r?
1=1B1L1
2)282h2m2w2
2'363;3E3~3
3.484=4z4
4*595[5`5e5
6#6Y6h6m6w6
7U7Z7d7
8Z8`8e8
9A9L9
: :;:w:
;%;B;S;`;p;|;
=M=V=e=j=t=
=,>6>;>}>
1K1g1l1v1
2;2N2]2b2l2
353D3x3
4)4H4[4s4y4
5!5K5Y5g5u5
5(676A6F6
7$7.7p7
858v8
879]9':-:4:>:o:y:~:
:.;8;=;R;`;
<3=B=L=Q=
>#?,?1?[?b?l?
0O0b0
13191@1J1p1
2#2(2-2B2G2Q2i2s2x2
3-474<4
475A5F5
6#646S6g6
7#7\7k7p7z7
:Y:l:
:!;+;0;F;
<)<.<8<P<Z<_<w<
=%=/=4=n=}=
=B>Q>V>`>
?a?f?p?
2C3T3b3g3q3
4`4e4o4o5
6/6O6z6
7 7*7@7X7
7F8K8U8
969;9@9j9y9~9
:%:2:M:W:\:
;6;C;H;R;t;
<V<`<e<
=9=>=H=^=
>?>N>S>]>
?@?F?P?]?b?l?
000S0~0
1+101:1x1
2$2_2
575\5
6G6j6
6!7E7
7B8G8Q8
9$9<9F9K9c9q9v9
:&:E:O:T:]:b:l:
;!;7;G;X;];g;
<0<6<@<L<k<
< =>=M=W=\=
>P>U>_>
&0D0N0S0
1)1H1M1W1o1y1
2(2<2N2`2s2
3E3W3k3u3z3
44494C4f4r4
515;5@5c5o5
6/6:6M6e6p6
777<7F7^7
9-:2:7:>:H:k:
;H<|<
<F=t=z=
>_>i>n>
1#1(1S1a1k1p1
2!232A2R2\2a2
3-3M3w3
3@4T4`4e4o4
4)5p5|5
5&6,666@6]6b6g6
7#757<7|7
8#8)8/85898?8C8I8O8U8Y8_8c8i8o8u8y8
9#9)9/95999?9C9I9O9U9Y9_9c9i9o9u9y9
:$:(:.:4:::>:D:H:N:T:Z:^:d:h:n:t:z:~:
;!;f;k;u;
<E<T<^<c<
=/=7=J=Z=l=t=
>?>c>
0'030J0X0f0k0u0
1.1Q1V1a1
2x2}2
3$3.333K3g3m3
4f4u4
6 6E6Z6d6
7/7A7i7
979F9k9
:#:=:
;4;F;U;k;
<(<7<A<F<e<
>=>S>X>b>
?"?2???M?b?i?
060@0E0y0
1&141B1P1g1
3#373M3[3
4 414B4S4d4n4s4
6 6%6
7?7{7
738G8L8V8
83989B9
:I:l:
<A<K<P<e<s<x<
===|=
0b1l1~1&2
3"3g3
5(565B5
6 6T6
6"7<7B7p788
8"979h9
:*:0:6:<:B:H:
:^;g;n;
?5?D?
01060@0t0
0#1,171q1v1~1
2<2X2i2
2!34393>3]3{3
4C4P4Z4
5%5*525u5~5
5R6[6c6
748F8Q8V8}8
9$9/9a9j9q9
:A:p:w:
;#;(;O;e;
=}>b?
020P2
2_3d4
5"6,6
6(7d7m7x7
7+8g8
;[=w=
2]3B4
6o7t8
92:<:
;$;/;g;y;
<!<&<M<c<
=!=O=e=
>/>=>k>
?d?k?r?
0&0-030F0O0\0c0
1S1,252f2x2
4F4X4f4
5r6|6
6<7E7v7
969H9V9b9
:%:V:h:v:
:<;I;V;];c;j;};
<A<[<
=a>i>r>
?%?,?3?:?L?V?b?i?p?
3!3.353<3N3X3c3j3
3h4^5r5c6y6
8?9t:
:$;Y;
<Z<e<
>>>O>
>=?f?w?
0u0D1U1y1
4E4L4S4Y4
4E5n5
6F7W7
9=9F9d9
:):5:*;n;
 060b0r0
1<1R1~1
2*2X2n2
3@3G3e3r3y3
4+424E4R4Y4`4s4~4
5$515;5
6'606A6H6O6
6R7`7l7x7
:$:-:V:d:p:
;8;F;R;
="=4=T=\=c=j=p=
=:>?>P>p>z>
>@?P?
00=0J0Q0W0i0q0z0
1#1*111F1q1~1
2%20272>2S2
3#3.3;3B3I3P3b3m3t3{3
4 4)4
5'5,51585B5]5
6%686?6c6}6
7C7p7
8&8A8
8/9_9
:::C:^:
;I;y;
<"<S<\<w<
=!='=
?Y?p?
60Y0p0
2)2.282j2r2w2
273X3{3
3#4A4L4u4
5/5V5r5
5;6g6
777S7
8T8z8
:-:^:k:
;K;|;
889H9V9
:(:6:
:*;z;
;M<u<
=6=H=V=
> >T>
>:?~?
0,151
192F2M2_2j2q2
5f5x5
6L6U6s6
7-7:7A7H7Z7e7l7s7
8)9@9t9
='>:>B>{>
0-0=0V0|0
1(1I1Q1[1`1u1
2l2{2
3 313y3
3R4\4n4
5V6h6v6
6/767
:(:Q:`:q:
;5;q;x;
<D=T=b=
!0+0;0T0
1.1<1M1x1
21282p2y2
434m4
4j5s5~5
9L:U:z:
:);6;=;O;Z;a;v;
;7<r<
>@>G>L>T>
R0_0f0l0
0J1d1o1
232;2F2V2
3"3'3/3W3f3k3
4=4`4
4.5}5
6#6(6I6W6\6d6p6u6
7$7,7L7X7d7h7o7s7y7
728<8N8
8;9@9J9q9
:7:?:D:N:
;&;+;3;Y;h;m;
;0<Q<
=Y=n=
>)>.>6>B>G>R>W>a>y>~>
?O?^?
0!0B0N0Z0^0d0i0n0s0
151K1
1R2\2n2
4/444V4[4c4z4
5Q5\5}5
7+7?7
8D8j8{8
9(969B9
:0:~:
;D;Z;
=&>9>f>
6\6e6
727V7e7y7+8J8{8
;';S;c;q;
<#<5<=<F<M<b<
=S=m=
>U>_>j>w>~>
131I1
1,252i2
3#3y3
414<4]4j4q4x4
8`9p9~9
:D:{:
:<;I;P;W;i;t;{;
<F=Y=
>'>2>
2)30373c3}3
626V6e6y6+7J7{7
:A:W:
;";b;
<&<-<?<I<T<[<
<e=|=
>:>N>
1J1g1p1
2'3F3Q3X3_3
484\4
5$7P7s7
9d9z9
:N;j;
<?=U=
=#>*>1>
3&3f3x3
404@4N4|4
606>6J6
>V?h?v?
0;1F1S1Z1a1s1
1A2q2$3v3
3<4E4p4
565F5T5
6/666[6
81989?9u9
9-:4:;:Q:
>O>b>
0W0a0l0y0
1)282?3D3U3L4
6$6)616
768C8
:S:w:G;^;q;
<%<1<O<o<
1;1E1\1c1
2G3}3
4<4D4
6%6e6u6
7"7^7n7|7
8I8e8k8
9!9(9/959;9N9
9L:X:]:e:
:O;V;[;};
= =6=Q=V=f=
>'?,?Q?V?`?
0G1T1j1q1v1
1!2&202}2
4f4l4y4
4$5J5O5Y5
5F6U6\6
7[7a7w7~7
8.838=8
91:6:?:V:]:b:l:
;V;e;o;t;
;?<~<
<'=M=
?G?m?
1)1.1W1}1
3r3w3}3
3L4_4i4n4
6(6-6V6|6
6?7I7
8#8p8v8
9-9b9u9
: ;&;/;E;L;V;[;
<%</<4<
=R=X=_=i=
>:>I>N>X>
?N?U?a?
0O0^0h0m0
1l1s1
1(2N2
4"494@4J4O4x4
4G5P5U5
5$636Y6u6
808S8m8
8U9d9i9q9
;!;);
<.<3<;<`<
="='=/=
>%>4>9>A>f>
>#?,?7?P?V?c?v?
3"3'3/3V3v3
5)5@5t5
6!6'6A6J6X6^6
6@7L7Q7Y7x7
8m8r8x8
8$9J9O9Y9
9/:5:<:
;!;(;2;7;`;
;(<x<
?9?P?
010U0a0
1I1s1
2)212@2G2N2U2\2b2h2y2~2
32383>3_3d3l3
494>4F4e4k4q4{4
5<5F5K5i5y5
6-6=6W6j6
6>7\7w7
7G8e8j8t8
8-9G9L9V9
:G:Z:x:
:7;>;H;M;l;s;
=M>h>m>w>
?.?;?]?g?l?
!0+000N0^0w0
1#1(1o1v1
2#282M2
353?3D3Y3n3
414;4@4U4j4
525<5A5V5k5
6(656T6^6c6x6
767H7U7u7
8+8J8
869_9
=!='=4=M=\=k=u=z=
? ?*?/?d?
0!0'0@0R0d0n0s0
1)1;1G1U1[1`1w1
292I2O2T2k2u2z2
3"3]3b3l3
3+4;4A4F4]4g4l4
5O5T5^5{5
6!6&6,6r6
7=7l7
8.8E8K8i8
9c9m9r9
: :0:5:?:
:=;L;Q;[;
<'<,<Q<Z<l<
=>=M=|=
=@>E>O>Y>c>m>w>
?$?+?2?9?@?G?N?U?\?c?|?
2k2r2
889?9|9
:0p0w0~0
1!1M1]1k1
1L2U2
2,353f3x3
4>4a4{4
6>8g8
:":N:^:l:
:M;Z;a;s;~;
</<`<
<>=_=
>,?N?
1I1v1
2&2-242;2B2I2P2W2^2q2
5V6h6v6
;B<S<X<^<x<
=#=6= >Q?
0I0`0
484V425=5
8*8@8
;:;C;w;
<Z<y<
=0=>=t=
0Y0b0m0
1`1g1
1k2x2
3-4:4G4N4U4\4c4j4q4x4
5B6v6|6
7#787
7`8z8
?'?i?
0L1n1
3 3P3
434k4~4
4V5h5v5
5"606<6H6u6
7,73797L7W7l7s7
9%9Y9c9y9
:$:):1:Q:V:j:z:
;-;8;E;L;S;Z;a;h;o;v;
<Q<^<k<
=:=W=\=k=
>2>B>I>S>
?#?(?-?_?
0$0.0X0_0h0m0r0
1N2S2]2
2*313;3@3n3
5%5/545
5?6F6K6U6
7(7J7\7a7k7
9X9_9
:B;L;Q;
<0<@<O<Y<^<
<a=f=p=
=4>;>@>J>
0:0M0i0|0
1!1&101F1P1^1q1z1
2&2<2_2
4X4_4d4n4
7%717>7H7M7d7
8>8E8J8T8
:U:f:|:
;3;H;O;_;
<3=8=B=x=
>T?[?`?j?
2 2o2
3*3;3E3J3g3x3
4[4a4k4}4
5o5t5}5
6'6I6V6[6e6
7q8x8K9R9
:8:?:k:
;,;K;r;
>]?r?
334:4A4H4q4
5'5R5b5p5
5L6U6
6l7u7
8H8R8]8j8q8x8
;D<y<
>$>_>
0*1~1
2$2n2
2'373E3s3
5+545]5k5w5
6!636;6D6K6`6
7B7r7
:":E:
=Y=p=
>$>7> ?
1I1`1
585V5<6
:;:K:a:
<6=C=P=W=^=e=l=s=z=
?!?(?/?6?=?O?n?t?
1F1L1R1W1f1l1
9<:E:^:v:
;9<P<
=9={=
>$>->6>
071@1I1R1[1r2|2
3L4Y4`4f4y4
5?5D5L5
5J6Y6^6v6{6
7K7Q7\7a7f7
838<8{8
:?:n:
;6;H;V;
=c=p=w=~=
><>E>
?h?p?
0A0G0i0u0|0
1G1N1S1[1
2%2*222W2
3/343<3m3|3
4K4\4
5+505;5@5v5
666N6`6j6o6
727Z7_7i7
969R9
:`:u:
;D;I;S;
;!<;<d<y<
=&=1=8=D=K=W=
>H>[>l>q>{>
?#?F?U?a?f?p?
0X0,151f1x1
2.2~2
2b3l3~3
4 4T4q4
5C5J5Q5
:o;|;
;8<p<
=J=`=
>,?5?f?x?
3(3V3h3v3
7/7I7
8(848;8B8L8V8
:4;D;R;
<$<P<`<n<
=@>k>
P0]0d0w0
2 3C3
3$414t4
5N5%6K6`6m6t6{6
959Y9
:2:;:V:`:
:Z;$=\=~=
>1>i>
0"0~0
1%1,131:1A1H1O1V1i1+2
4+4v5
8&8V8]8d8k8r8y8
9(9F9w9
<l=v=
>!>Y>b>
1:2\2
2/3B3
4d4k4
5!545 6Q7
8I8`8
<8<V<
=#=*=1=8=>=
>!>@>G>N>U>\>c>j>q>w>
10171o1x1
2J2i2y2
223D3R3x3
33494?4D4S4Y4n4c5
6 6c6j6
7#7B7H7U7\7c7j7q7x7
788K8
=!=,=L=|=
=6>;>C>
?*?/?T?g?v?{?
050D0W0h0r0
151D1I1h1n1
2*2.24282>2D2J2N2T2Z2`2f2
3$33383@3
4"4)4L4U4
4,555
6s6z6
6L7Q7Y7
7`8g8n8
9P9U9]9
:,:7:?:F:M:T:[:b:h:n:
>h>~>
>*?\?n?
0m0|0
1r1x1
373r3
3K4V4b4i4s4
5%5=5D5
7#7m7s7y7
7n8s8}8
:t:~:
;d<n<s<
>^>k>p>
0#020
1#1-1}1
1W2a2f2
3[4h4m4
4t5~5
6M7V7p7w7
7'81868z8
9':4:9:W:^:
;!;m;s;
;\<g<n<x<
?(?B?P?
001F1M1W1\1
1.282=2S2
2\3g3n3x3
6(6-676u6
6+777D7i7t7
8_9l9q9w9
9S:X:b:
< <'<1<6<c<o<v<
<T=^=c=
?(?-?Z?f?m?
H0R0W0
1n1y1
1m2w2|2
3d4n4s4
6'6.6N6Z6a6f6p6
6<7F7K7
7i8p8z8
9>9J9Q9V9`9
9,:6:;:
::;|;
;*<5<y<
>`>z>
0;1J1O1Y1
1i2p2z2
4$5:5H5b5p5
6"7)737u7
9W9b9i9s9
9#:*:<:
<.<:<A<M<Y<`<j<
=b=l=
=4>X>
?]?k?y?
0#010N0\0w0
0n1x1}1
2!2o2
3l3u3
4'424
4d5m5
6.696[6n6x6}6
8A8M8T8
9(9-9
9I:P:Z:
:a;k;p;
<U<a<j<
=#=.=
=4>=>u>|>
?*?=?G?L?
0U0a0j0
1#1.1
2$2.2N2U2
3)3.3
474<4F4
4+515B5K5X5]5g5
5(62676e6t6
7[7j7o7y7
8#8(8E8S8X8b8
9)909S9
:$:4:?:V:
;&;2;
>$?.?4?D?O?f?
0(060B0
344>4D4T4_4v4
4&585F5R5
<"<'<,<3<=<O<x<
=/=6=n=w=
>8>G>X>y>
>.?7?l?
090A0K0P0e0
222K2
2)343x3
3N4e4p4
606;6h6
6"7y7
8%828b8
9L9d9q9
:=:m:t:{:
;J;b;o;
<1<<<j<
>b>y>
?-?8?g?
0A0V0a0
1"1-1]1
1)2v2
3I4`4k4
515a5h5o5v5
5V6m6x6
7U8`8
8'929h9x9
:^:e:
;E;N;Y;
<0<F<
>e>m>t>{>
?7?[?b?i?
0(0R0Y0`0|0
0 1'1.1J1R1Y1`1f1}1
2 292@2G2c2k2r2y2
3)3J3Q3X3t3|3
4/454Z4a4h4
4/5C5U5g5
9::M:
<`<s<
>0>v>
?9?A?H?O?U?l?
0(020_0f0k0r0
1!10161?1F1M1T1f1
252?2l2s2x2
3"3'3.3=3C3L3S3Z3a3s3
4"4B4L4y4
4(5/545;5J5P5Y5`5g5n5
6/6O6Y6
757<7A7H7W7]7f7m7t7{7
8#8*8<8
=(=5=B=H=[=g=m=
6,757O8X8
9L9U9
9<:E:
=f>o>
?!?+?X?r?
(080F0t0
1(161B1
5(5I5Q5[5`5u5
6/6=6k6
60797
8W9^9d9k9
<L=d=n=v=
>!>+>0>E>
?;?Q?
0R0c0h0n0
1'2.242;2
646>6F6R6W6\6c6m6
7T7^7d7t7
8!8p8z8
8"93989>9X9
;_<f<
<f=#>x>
?"?'?,?3?=?O?x?
$0.040D0O0f0
0@1J1a1h1
2(2c2l2w2
3V4h4v4
4/565
8H8W8h8
969_9o9}9
:1:8:p:y:
:3;<;G;
<&=8=F=R=
1'181Y1a1k1p1
2/2?2M2{2
3@3I3
4g5n5t5{5
8\9t9~9
:):1:;:@:U:
;K;a;
<b<s<x<~<
=7>>>D>K>/?6?
2H2W2h2
363R3Y3_3f3
6<7T7^7f7r7w7|7
8 858t8~8
8+9A9
9B:S:X:^:x:
<$<+<R<
<Q=[=
>+?2?9?
0%0,030:0L0m0u0|0
4<5T5^5f5r5w5|5
6 656t6~6
6+7A7
7B8S8X8^8x8
:E:L:S:
:p;z;
;"<3<8<><X<
>">P>f>
?J?Q?V?n?
:0?0G0q0w0|0
171<1D1v1}1
3A4N4{4
4/5<5C5I5\5e5v5}5
6d7~7
748I8Z8
9)9:9
;);>;D;];
<%=G=|=
>">E>R>
?$?.?s?
0,0B0[0t0
1$1J1V1l1v1{1
252D2N2S2y2
3+3H3`3y3
3,4M4y4
4*5G5l5
5S6_6
8*828E8P8U8|8
9-9B9
9$:P:U:n:t:
< <8<G<L<T<
=.=3=o=~=
>F>K>t>
?:?I?N?V?
0J0Y0c0h0
161E1q1
2-282?2L2s2
3Z3s3}3
4 4G4
5i5z5
6#6O6^6h6m6
7$7)7l7{7
8 8+828?8I8N8
9.989=9
:>:d:
<K<W<k<u<z<
=.=8===
=$>->4>O>
304F4K4P4W4^4
4e5u5
6-7N7f7
858Y8
:C:S:g:
;G;m;r;
;$<)<1<Q<x<}<
=_=d=i=
=B>O>x>
?!?6?;?@?c?h?o?|?
0 0C0g0
161F1R1Y1
2#2*2K2h2u2z2
3%3*343c3x3
444B4p4
5L5[5x5
5/696>6j6
6$707[7m7
8(8?8Z8_8i8
8,999C9H9p9z9
:&:9:C:X:|:
;#;D;I;S;m;s;
<%<C<I<i<t<{<
=#>G>M>Z>_>i>
>.?F?^?c?m?
050D0I0S0
1?1b1h1
1%2?2W2\2f2
3-3<3W3a3f3{3
4h4r4w4
5$5)5<5S5]5q5
616@6{6
7o7t7y7
7:8C8J8
9H9Q9X9
:7:M:c:*;
>L>[>`>h>
?k?q?
0A0G0j0x0
1R1a1
344G4L4
4 5/545>5q5
6'6L6[6
8D8I8S8y8
:,:J:^:h:m:
:X;];b;
<W<s<
=#=.=A=Y=d=k=x=
=6>@>E>q>
0!0<0W0
0G1\1{1
272L2^2
3.3F3K3U3j3s3
3!4+404C4L4W4
4%5+5L5Q5[5
6$6X6g6l6v6
818F8L8b8o8t8~8
9q9w9
:/:9:>:S:d:t:
;?;k;p;z;
<8<G<W<
=$=.=m=r=|=
>'>,>6>[>d>
0#0(0L0S0q0w0
1X2]2g2
3 3%3@3K3U3f3
4#4`4
4l5{5
5A6m6z6
727M7h7
819E9a9p9
:):[:j:t:y:
;.;7;R;];y;~;
< <%</<L<Y<`<m<r<|<
=(=5=?=D=Y=m=z=
>*>4>9>_>n>
?4?>?C?X?d?p?~?
0(02070x0
111P1o1
2%212m2
3(343^3j3
4c4h4r4
5'5,565[5k5y5
6%6:6F6K6U6
7,7N7S7]7|7
8!9&9+9O9j9y9
:?:Y:f:k:u:
:0;7;O;e;|;
;#<J<Z<t<~<
=*=V=b=y=
>#>)>0>:>Y>^>~>
?7?<?A?V?g?l?v?
0(0;0W0v0
1F1r1{1
2V2]2c2
5:5P5
6)6@6
828c8l8
9*91979r9
:&:0:K:|:
;&;-;C;J;P;
;6<Y<p<
=:=f=
2/2<2A2I2
3,313F3O3b3g3
4 4<4E4X4]4i4o4x4
5"5.5:5S5_5d5n5
64696i6
717h7
8*8J8Z8
9(9:9C9V9g9
:(:<:S:a:
;";8;H;V;x;
=2>k>
1&121
242N2
2-363T3
3/4j4z4
5D5Z5{5
6/6:6A6H6]6
6/777<7F7g7l7v7
7D8Q8X8_8q8{8
979D9K9R9X9k9v9
:\;e;
<%<i<
=!=E=J=s=x=
>*>/>7>X>c>p>v>z>
?!?'?-?3?C?N?[?a?e?k?o?u?{?
0#0'0-03070=0D0J0N0T0Z0`0f0
1$1Q1W1\1f1
2!2&202]2l2q2{2
3>3O3
4#4/4=4G4L4q4~4
5"5'515j5r5w5
6L6[6`6j6
7j7q7v7
878F8_8n8x8}8
9?9D9I9h9y9
:7:D:x:
; ;*;/;D;x;
<+<5<:<O<
=#=2=Q=`=j=o=
>->U>_>d>
1*14191f1t1
4"4T4
4&585F5R5
627k7
9,:3:::
;";0;^;t;
<.<><L<z<
=l>u>
><?E?v?
0%0V0h0v0
0&181F1R1
2&2T2n2
313>3E3L3^3h3s3z3
3#40474>4P4Z4e4l4
5M5V5t5
8#818_8u8
9/9?9M9{9
:K:[:i:
;U;b;i;p;
<(<b<o<v<}<
= =5=o=|=
>%>_>h>s>
?(?;?P?_?
(0S0q0|0
1&111d1i1s1
21262@2_2g2l2v2
3#3(323d3l3q3{3
3?4G4L4W4x4
5d5i5s5
5!6)6.686Z6_6i6
9 939>9V9]9{9
:Y:f:s:
80H0V0
1(161
1,252f2x2
2)3@3t3
4"5)5.565Y5r5w5
5:6?6G6r6w6
7i7n7v7
9#969;9N9z9
:$:3:8:u:z:
;2;A;F;N;
;=<F<
=+=7=E=V=g=l=v=
= >*>/>E>a>n>
>W?\?f?
0$0(0-02070<0
0*1W1]1e1w1|1
2/2<2A2I2\2
3;3G3h3m3w3
494Q4q4
545D5M5R5f5
6!6&606W6i6x6
7 70767;7A7F7X7l7
898?8H8W8a8f8
9$:`:j:o:
;&;<;R;
<)<.<J<X<w<
="='=,=9=c=z=
>9>K>d>
>'?C?M?R?
0#0h0m0w0
1<1[1x1}1
2)2.232F2
3#3-3O3
3/4D4I4S4
4'5,565X5
6$6F6p6
6@7t7
8]9b9j9
;(;-;m;r;
<%<8<=<S<z<
=.=E=Q=X=k=}=
>%>*>4>\>
>)?V?
30<0Z0s0
1+1f1k1u1
2;2H2M2W2o2
3%3*3?3F3V3_3w3
4$4W4q4
5)585T5c5
6%6*6F6
6!7,7?7D7N7
8$8=8g8l8v8
9E9f9k9u9
9):.:8:p:
:0;?;m;u;
;h<p<
<H=c=h=r=
>5>T>c>~>
?#?-?2?J?]?
0'0w0
171X1]1g1
2V2[2q2
3&414C4
5.646I6
7=7^7d7y7
8)898@8G8M8T8[8b8i8|8
9*9S9f9w9
:N:h:y:
;@;^;f;s;
>9?^?c?
+060C0J0Q0X0j0t0
2T2g2u2
2*3M3o3x3~3
4'4L4
4W5s5z5
60666S6\6k6u6z6
7@7\7w7
8A8[8b8l8
8'9P9V9
9*:o:{:
;/;P;o;
;)<~<
<'=.=3===_=d=i=p=z=
>">/>M>T>_>
>.?8?=?B?O?m?t?
-020<0U0[0
0*151[1z1
2*292>2Y2f2
3$3;3H3c3i3p3z3
505F5
6)656]6l6r6y6
777N7k7
8D8I8O8
9":[:
::;|;
;#<3<A<o<
<&=4=>=Q=\=
0-1:1A1H1Z1d1o1v1
2C2Y2
3!343@3F3f3s3z3
4%4,434H4
4#505=5
6A6_6j6L8U8
9%9i9
9,:5:f:x:
;9;P;
=1=6=^=h=
=,>B>U>p>w>
?%?0?7?e?
0#0,0;0c0
0"1?1Q1`1t1
1!2*252
2+30383
4'5,565e5w5|5
556G6L6V6
7"7a7p7z7
8,9;9E9R9q9
:X:b:g:
;4;Y;
<&<s<
T0c0h0r0
1N1a1p1u1
2-2K2Z2
2!3|3
4%4S4
6V6e6j6t6
6"7C7
8$8?8g8q8v8
9,919;9X9
9!:/:9:>:
;-;H;W;y;
<7<=<D<N<q<{<
<l=u=
?"?T?
&080F0R0
0M1`1p1
4k5|5
;";);Y;
1B1U1
2A3H3~3
5L657
8`8q8{8
9!9/9]9s9
:-:=:K:y:
;&;7;>;E;
<"<)<
=1=8=?=
4O5X5
6%6V6h6v6
767H7V7j8
9%9V9h9v9
;4;N;
=C>\>
>C?w?
0v0{0
1$11181?1F1Y1b1n1u1|1
1,282
4/484D4K4R4Y4c4m4
9=9F9d9(;8;F;t;
<D<T<b<
=4=`=p=~=
>:>P>|>
?(?V?l?
0;0{1
5%5+5>5K5o5v5
6#696j6q6x6
6&7-747J7
8_8u8D9Z9
:D;c;j;q;
=D>c>j>q>
0N0%1=1G1R1_1f1m1t1
2#2*2=2Y2d2q2x2
4.4R4
6%707
9\:i:p:
;";);>;;=a=h=o=q>
?<?[?f?m?t?
0"0)0/0\0d0k0r0x0\1
6,6U6
757k7
858F8e8m8z8
8,<5<f<x<
=D=^=o=
>B>Q>k>
?3?O?Z?a?n?s?
04090A0p0
10151T1c1h1
2)2.262R2W2q2
2%3*323a3p3u3}3
3!4&4D4S4X4`4
5G6d6
7>7D7f7k7u7
7*898>8H8
9=9m9s9
:7:F:
;7;h;w;
<4<;<t<
>,>A>F>K>
???u?
$0:0h0
181V1e1
242Z2d2i2
3$4)4.4
5+616?6T6
6?7l7q7{7
8c8m8
9C9M9{9
:*:A:N:a:j:
;Y;p;
<%<*<2<{<
=$=<=J=`=e=m=
>#>(>0>N>k>p>x>
?7?F?K?S?
0*0/070f0k0
111@1E1s1x1
1"2@2_2d2n2
2!343C3
4$4X4g4q4v4
5-5N5
5 656O6x6
6#7D7i7
838B8P8^8l8}8
:H:d:u:
;5;A;^;x;
<&<E<h<
="=D=c=
>$>G>i>
>4?d?
0+000:0O0l0|0
1&171R1^1o1t1~1
2+3=3H3M3t3
4 4X4a4l4
4(515B5G5L5S5]5x5
6'6-6@6S6Z6p6w6}6
7A7J7[7`7e7l7v7
7&838@8F8Y8l8s8
909v9
:H:U:z:
;\;e;
;,<5<
<6=<=A=z=|>
?*?3?P?g?l?v?
0#0L0S0|0
1#1;1^1
2F2M2k2z2
373<3A3H3R3
4+444C4M4R4z4
4$5U5v5
6<6M6T6_6
7+787G7R7q7
9$9.9
:1:o:t:~:
;';,;6;
;/<4<><z<
<Z=a=f=p=
=:>r>
?$?3?L?[?e?j?
0,060;0
011@1E1O1
1&282F2
2*333>3x3
434N4
5e5u5
6?6U6
7!7,7]7
8F8h8
8&9H9y9
;J;W;^;d;w;
<)</<B<N<T<s<
> >P>v>
?L?n?
0L0S0Z0a0h0o0v0}0
1(1F1v1}1
2#2(2.2H2f2
223C3H3N3h3
5:5C5g5q5
6T6]6
9$969U9\9c9j9q9x9
:,:3:::A:H:O:V:]:o:
:K;X;e;l;s;z;
=F=L=R=W=f=l=
> >T>Z>`>e>t>z>
0&1-121Q1V1^1
3)3k3
484E4m4
4)5m5
6*626E6J6P6]6b6h6r6
747>7C7|7
8%8I8a8
9&9G9i9{9
: :8:U:
;$<D<]<f<x<
=8=\=}=
>)>:>@>T>
?G?M?
0-0B0L0]0c0o0
1s1y1
454O4T4r4
5 535I5
7"757B7G7O7
8"858B8G8O8
8&9+939r9w9
9.:N:
;';3;?;J;g;
<7<T<f<
=>=C=c=h=y=
>?>D>V>c>w>
?$?4?:???y?~?
$03080
141j1
1@2E2P2
3\3d3k3r3x3
4!4(4:4
6O7V7
:#:-:?:h:w:
;$;4;?;V;
;0<:<Q<X<
=S=\=g=
?.?3?;?
0'0,080K0P0\0a0s0x0
1<1N1S1_1r1w1
242\2|2
32373V3
3D4O4
636K6P6X6
7.7k7~7
8(8-878a8f8n8
9 9+90989M9R9]9b9j9
:F:l:
</<:<j<u<>=
?5???D?z?
0*0B0G0L0d0i0s0
1#1F1R1
2%2?2U2
3'3B3G3
5 5.5<5J5[5`5j5
5%7b7g7
8.8F8K8U8k8v8~8
9A9P9i9s9x9
:#:-:2:e:l:
;-;B;K;T;c;i;
;.<F<P<U<u<
<1=@=P=f=p=u=
>5>?>D>
?%?*?4?t?y?
0-0K0h0~0
1O1`1
2#282m2
5(565D5I5S5v5
596Q6c6{6
7!787P7_7u7
7,8N8]8
9'9.9R9
9$:>:H:M:f:
<&<G<]<b<n<
=(=-=5=f=u=z=
>(>4>
?<?A?X?]?
0%010_0
1'1,141I1N1Y1^1f1{1
1A2F2K2s2
3)3.3W3t3
4-4D4I4S4{4
5"5'515g5v5
7F7e7j7o7
858N8^8s8}8
9 9*9N9Y9c9w9
:4:C:M:R:k:
;7;r;
<I<b<l<q<
=<=z=
>#>(>2>S>i>s>x>
?'?,?6?`?w?|?
0>0]0
04191C1k1p1z1
2:2~2
3>3g3
4 484b4w4
515G5V5l5
6-676<6`6v6
83898>8z8
<8<?<
=9=@=E=e=j=r=
>3>8>[>`>
> ?o?
0!0,01060R0_0
1!1,11161R1_1
1 2%2*212;2[2
2,353f3x3
9/:4;q;L<
=+=;=I=w=
=,>5>f>x>
>L?U?
(020=0J0Q0X0_0q0{0
2'3A3L3}3
4)474e4{4
5Q5\5x5
6&6G6T6a6h6n6
7(737:7A7H7]7
889H9V9
9::?:g:r:{:
;/;4;I;N;V;
<$<3<8<Y<h<m<u<
=5=B=l=y=
=\>e>
1#2y2
2A3a3l3
5Q5X5_5
6&626a6h6?7
9F9X9f9
;&;T;n;
<!<(</<B<K<W<^<e<o<y<
>C>J>Q>f>
?:?J?X?
1;2k2
32393O3
596f6
7\7e7
:":A:~:
:O;l;u;
;N=t={=
>">(>
0&0-0g0n0u0|0
0'1,1=1J1O1j1o1w1
2:2_2
3.353^3o3
4R4W4t4y4
435:5A5H5T5r5
6*6/6J6O6`6m6r6z6
7:7_7
8+808u8
949M9R9Z9
=Q=e=l=q=y=
=5>S>Y>^>
>:?I?
0.030;0Q0~0
0[1b1l1q1
2I2]2h2z2
353F3|3
4!4&41464@4Y4^4
5!5:5L5Z5j5
6>6R6i6v6~6
7$7.7C7O7]7k7p7z7
8.858?8U8a8h8o8z8
939?9Q9d9m9u9
:%:/:5:;:E:l:r:~:
;0;];b;g;
</<;<G<Z<
<*=4=9=i=x=
>7>F>
$0T0|0
1[1h1|1
2N2S2]2
3!3(373=3F3M3T3[3m3]4
8<9T9^9f9r9w9|9
: :5:t:~:
:+;A;
;B<S<X<^<x<
>$>+>v>
?a?u?|?
0?0Z0
1*1b1
1(2;2N2
3A3U3\3a3u3
4>4j4o4w4
5=5K5
7I7P7U7]7
8"8*8r8
8'9-949<9T9`9
:+:H:[:
;';7;K;R;Y;
<)<;<N<S<[<{<
<?=|=
=$>b>
1#1*11181J1
4_5f5
5f6#7x7
8"8'8,838=8O8x8
8$9.949D9O9f9
9@:J:a:h:
;(;c;l;w;
=6=<=N=S=Z=a=
=0>5>b>g>
>N?U?Z?}?
0!0)0D0m0
1E1J1S1
2$2+222D2,353
6L7d7n7v7
8!8+808E8
9;9Q9
:R:c:h:n:
;'<.<4<;<
=#=(=0=l=t={=
=+>2>9>@>Q>p>
?4?9?Y?^?x?
0i0v0
121a1g1l1
2l2q2y2
474<4d4o4t4
5 5%5D5S5
:,;D;N;V;b;g;l;s;};
<%<d<n<t<
=2>C>H>N>h>
0b0g0
1X1_1d1l1
1>2M2R2w2
2H3O3T3\3
4H5O5T5\5
61666>6
7F7M7R7o7
:(:6:B:
;Y;p;
<#<6<?<L<S<a<
= =%=-=w=~=
=/>r>
>n?s?
70>0C0K0u0z0
021a1p1u1}1
2%2<2B2[2b2i2
3>3C3K3
4 4P4W4\4
54595Z5_5g5
6@6G6L6S6b6h6q6x6
6,797
7,858
;L<d<n<v<
=!=+=0=E=
>;>Q>
?R?c?h?n?
0'1.141;1
2#2+2U2Z2|2
2#32373?3U3k3s3
4!4@4
5J5O5W5v5
566H6V6
617A7O7}7
8(8.8;8
9J9O9j9o9w9
:):.:::E:T:Y:a:
;!;O;T;i;
< <2<7<^<c<
0C0Y0
171<1D1
2$2)212o2
2X3]3e3
4u4z4
5#6P6|6
7!7a7n7{7
7)8@8
9^9k9r9y9
:$:|:
:(;-;H;Y;^;j;u;
<!<<<A<I<
=L=V=[=
>@>T>l>
>U?~?
0)0.0L0]0k0u0z0
121N1_1
3l3u3
4!4,4A4O4r4
4n5s5
6H6M6h6y6~6
7"7+7
8/888
:9:>:Y:^:f:
;*;5;D;I;Q;
=N=o=
?+?I?S?X?y?
0e0j0t0
1)1-13181=1B1
2$2,2w2~2
4'4@4L4Q4[4m4r4
5 5%5*5/5?5K5[5_5e5j5o5t5
5$6I6T6u6z6
8@8K8x8
8&989F9
:1;6;Q;V;^;
<$<,<\<c<h<
<1=q=|=
>R>_>f>l>
0:1T1e1
1<2E2v2
343J3
3l4q4
5F5K5z5
5)686=6E6f6n6
6_7k7{7
8'8X8e8l8r8
9%9V9h9v9
:$;);1;x;
;/<o<t<|<
='=3=8=B=T=Y=p=
>&>*>0>6><>@>E>J>O>T>
?#?+?w?~?
1/1;1@1J1\1a1i1
242[2{2
2#3(34393A3W3o3
5#53575>5B5G5M5Q5V5[5`5e5j5
7>7C7c7h7
7I8N8V8
839B9G9O9x9
;1;?;M;Z;g;
<'<.<4<G<P<Y<`<
=h=x=
=1>6>V>[>
>\?c?h?p?
1#1i1p1u1}1
4=4B4J4
4?5|5
6(6-656W6
7+7:7
7f8k8
8)989=9o9
:7:<:D:Y:i:n:y:~:
;*;/;7;w;~;
<r<{<
=A>F>~>
?E?J?g?l?t?
\0k0p0x0j1o1
1`2e2m2
3G3V3[3n3v3
4!4.434K4P4X4
5*565F5J5Q5U5Z5`5d5i5n5s5x5}5
7%787A7N7U7
7,858f8x8
8$9:9|9
:X:_:d:l:
;6;;;e;
#00070=0P0Y0b0i0
1)1/1;1A1M1\1f1
313?3F3
454:4D4t4
5*5V5
5&6P6\6
7"7(7,72787>7B7H7L7R7X7^7b7h7l7r7x7~7
8X8_8d8l8
989?9D9L9
<$<;<P<[<
=!=%=*=/=5=9=?=C=I=O=U=Y=_=c=i=o=u=y=
=/>M>S>k>x>}>
>A?G?L?T?
A0G0L0T0
191E1Q1U1\1`1e1j1p1t1z1~1
2,2L2S2X2
3!3/3D3I3Q3
3H4O4T4\4
5A5I5N5S5{5
5!676<6]6s6x6
7"7C7N7[7a7e7k7o7u7{7
8%8+8/85898?8E8K8O8U8Y8_8f8l8p8v8z8
9!9%9+92989<9B9F9L9R9X9\9b9f9l9r9x9|9
:#:(:7:D:I:Q:
;&;X;_;d;n;
<J<R<W<a<
=4=C=M=R=x=
=X>_>d>n>
?H?O?T?^?
(0/0J0U0d0n0s0
1X1_1d1n1
2/2h2o2y2~2
313@3J3O3d3
3*494s4
5$5)5
5E6N6]6
6$73787B7
9?9I9N9{9
:";[;
;:<|<
>$?>?m?z?
070Q0\0
2%353C3q3
464C4J4\4g4n4
6+6x6
7(7p7u7
8>8C8M8l8t8y8
9Q9^9
:#:*:q:~:
;";z;
=L>U>
?I?`?
"0,0>0
0>1C1K1u1z1
2J2O2W2
31373L3V3|3
384S4m4
5%6.6I6N6V6
7M7^7l7
838e8t8y8
9(9=9
:!:):=:C:H:b:
;_<n<
=Y=h=m=w=
=&>8>F>R>
374f4
4A5H5O5V5
7_8h8
9<:E:v:
;!;,;9;@;G;N;a;j;v;};
= =L=\=j=
=&><>
1)1;1B1c1j1q1x1
2!222
3&4T4a4
5(5H5~5U6m6w6
8'8B8L8o8
:':.:5:p:
:A;L;h;q;
</=c=h=p=
>g>n>s>{>
?h?o?t?|?
&0-020N0S0[0
3 3,3K3]3w3
4)4.464K4P4X4m4z4
4I5O5
6'6E6
767K7m7
979@9J9X9q9|9
: :%:/:D:Q:_:i:n:
;+;0;:;
<H<\<e<y<
<-=4=U=Z=_=
>">R>\>a>y>
?2?c?h?r?
020=0P0f0
1"1,1M1
292_2i2n2
3$3=3B3G3N3X3v3
4(4-42494C4[4}4
5$585=5B5I5S5
6"646F6
7"727>7M7Q7W7[7a7g7m7q7w7{7
748?8
9%9,959B9
:;:B:K:
;!;,;1;6;R;_;
;<<E<v<
=4=J=
=?>F>M>V>d>p>|>
>"?)?.?F?M?R?s?x?
0&0+0:0\0a0i0
0;1A1L1Q1V1r1
1;2A2L2Q2V2r2
2;3A3L3Q3V3r3
3;4A4L4Q4V4u4
7D7Z7
8_8f8m8t8}8
9#9@9W9\9|9
:*:/:r:w:
<k<q<|<
="=/=k=q=|=
>!>&>B>O>
?!?.?N?U?`?
0<0G0L0Q0^0~0
1%101k1q1|1
3"3T3[3b3i3
5P7j7
8&8q8x8
969H9V9b9
;?<H<v<
<T=u=
>%>V>h>v>
? ?'?.?A?J?V?]?d?k?u?
0L0b0
1,1:1h1~1 2K2
3$414>4E4K4^4i4{4
5#5\5a5r5
7#7*717
939>9K9R9Y9k9
9a:~:
<F<e<p<w<~<
="=>=G=p=~=
*0D0U0
051:1B1[1|1
24292A2|2
3 3(3g3m3
4U4[4p4
5%5:5@5X5g5l5t5
6T6c6}6
7M7R7\7
8!808\8q8v8
8A9F9P9
9 :F:Q:
:N;Z;_;i;
<4<><C<V<|<
=&=0===W=a=f=
> >*>I>Y>c>x>
?=?G?\?
101e1j1t1
2"2'2G2L2Q2h2
3%303W3a3f3}3
404=4B4L4|4
6+6>6V6x6~6
7"7U7[7
8-828<8
9*9d9i9s9
9%:+:O:^:
;#;-;
<"<?<N<a<
<#=(=2=_=h=w=
>=>L>V>[>
?W?f?p?u?
0!0&000i0r0
1#101K1|1
1*2R2}2
3o3w3
4/444>4W4q4w4
4N5U5_5r5|5
707=7J7W7`7j7
8%8,8H8M8R8d8
;H<Z<e<j<
<'=.=0>7>C>H>P>j>o>
?<?@?D?H?
B0`0e0m0
10151Z1_1
476>6w7|7
8>8K8
91969B9W9\9k9
:^:e:l:u:
;;;A;L;Q;V;r;
<K<Q<\<a<f<
<&=8=F=
=?>L>S>Y>l>u>~>
>,?7?<?A?K?k?r?{?
0(060
01171<1D1x1
1,292@2G2M2`2k2
3$303T3`3
4"4(4,42464<4B4H4L4R4V4\4b4h4l4r4v4|4
5 5W5s5x5
5H6O6T6\6
6.757:7B7
7;8Z8m8
9-979<9R9x9
9H:O:T:^:
=&=2=r=
3;3K3Y3
4,555f5x5
7o8x8
8<9E9v9
:%:V:h:v:4;U;
<6<H<V<
<!=+=6=C=J=Q=X=k=t=
=N>w>
$040B0p0
1@1P1^1
202\2l2z2
4d5q5~5
6?6F6M6c6
8D8c8j8q8
:":/:6:=:D:W:s:~:
<U<b<i<{<
="=7=$>J>Q>X>
?d?o?
1060@0g0
1-151:1D1
2O2x2
3(333N3U3
7&727
7*8D8U8
8,959f9x9
9$:::
;!;&;.;\;
<)<@<
=V=[=c=
=#>(>E>J>h>
?$?,?x?
0k0r0w0
0P1W1\1d1
2'2J2]2
3'3,3B3j3x3
4=4P4
5'5A5O5T5^5t5
848;8B8I8
:0<Q<X<_<f<
2/2=2k2
3!4(4/4
6\7e7
7l8u8
<$=E=
=&>8>F>
>l?u?
0I0c0
4(4T4d4r4
5.5D5p5
6J6`6
:+:k;
<%<+<><I<[<b<{<
="=S=Z=a=w=
>3>l>q>
030:0A0
3#3*313|3
6#6*616D6`6k6x6
7!7.757<7N7
9$9-9H9R9u9
=-=4=;=v=
>6>>>E>L>R>
?E?S?_?
2$2,2y2
283?3D3L3
484?4D4L4
515[5`5h5
6!6,61696
7!7)7V7[7c7
8H8P8U8]8r8
829G9
;(;Y;p;
<&<=<J<W<]<p<|<
<F=X=f=
>r>w>
>(?/?4?<?
0h0o0t0|0
0(1/141<1
2h2o2t2|2
3;3@3`3e3m3
4 4$4*40464:4@4F4L4R4b4n4}4
4H5O5T5\5
6h6o6t6|6
7&7E7d7{7
7M8Y8j8
9!9&9+90959E9Q9a9e9l9p9v9|9
:;:@:O:\:a:i:
;";';/;
<!<:<I<N<V<k<
=2=C=R=q=
>?>I>N>
0-080M0T0
161H1V1
2O2\2c2j2p2
3i3x3}3
4*4/4I4
4;5@5H5k5p5
6L6W6\6a6k6
7%707|7
9F9X9f9r9
:.:j:
:$;c;p;w;~;
;?<F<M<T<[<b<k<y<
="=L=Q=n=s=
>+>0>]>b>
?0?5?C?H?S?X?`?v?
0[0a0l0q0v0
1\1g1l1q1{1
2"2/2o2z2
2 3)383=3
4*4/444;4E4`4g4
5;5L5d5n5s5
6$6l6w6|6
7!7.7N7U7`7
;\;e;
;r<|<
<J=d=u=
?#?D?P?_?c?i?m?s?z?
70S0X0g0t0y0
0!1'1,141h1o1t1|1
2!2:2\2a2w2
3!3%3+3/353<3B3F3L3P3V3]3c3g3m3q3w3}3
4$4X4_4d4l4
4!5'5,545a5g5l5t5
8R8W8^8u8
8K9g9}9
:A:\:
;@;S;
;"<<<]<
=9=M=V=f=
>7>x>
020Z0
12181U1m1z1
2!3*3X3^3v3
4D4b4
4$535Q5g5
7,777=7G7X7^7f7l7r7x7~7
8 8&8,82878>8D8J8P8Z8`8z8
999?9
9$:O:_:
;I;Z;r;
;0<<<h<m<
=,=5=B=d=p=
>5>v>
>'?,?T?j?o?
1A2F2{2
3`3v3{3
475<5n5{5
6=6B6e6y6
8+9J9O9]9{9
;(;.;W;\;
<?<D<[<d<j<~<
=/=4=[=
=1>v>|>
?%?;?@?b?x?}?
0-020_0d0}0
1+181A1O1U1Z1n1
2<2b2k2
3$3R3_3l3u3
4"4r4
6!6*6l6
6A7F7
8.8A8d8
9%9+9C9W9\9n9
:*:/:V:
;6;;;e;j;
<F<K<a<k<
=H=]=q=v=
>A>N>\>p>u>
>;?O?T?|?
2!2M2W2
3K3}3
404=4_4s4x4
5 5L5
6-666L6Q6q6
7>7C7`7i7
8:8A8k8p8
8D9I9r9{9
9*:T:j:o:
: ;%;:;B;H;i;n;
;%<*<
?"?J?O?
0Q1W1
2"2t2z2
3'3;3I3]3
3"4(4H4S4Z4n4s4
5$5F5R5
6:6H6f6
7%7,787>7g7
8C8Z8`8x8
8%9;9@9
:#:=:w:
;4;B;o;
= =D=I=k=p=
>3>9>Q>Z>
0S0X0
03181c1
252K2P2
2,313
5E5J5]5
6-6>6T6Y6f6x6
73787h7q7x7
8(868B8
9#9>9
:';l;
;Y<K=g=
?#?@?T?Y?
0J0`0e0
1J1S1Z1
2&2d2v2
3>3T3
3&484F4R4
5&5T5n5
5>6g6
7'757c7y7
8(858<8N8Y8`8u8
9J9z9
:3:<:W:
;B;r;
;.<7<R<
===m=
=)>2>M>
>8?h?
"0+0F0
011a1
2#2>2~2
2)3Y3
494y4
496P6
797P7
898P8
979h9u9
:):U:
;";G;s;
<3<@<e<
>Y>b>y>
0Z0L1n1s1
202Y2^2|2
6&626>6Q6g6s6z6
7&777H7n7s7x7
8%8/8
92979<9I9\9
:3:8:=:D:N:
:4;9;>;E;O;{;
=S=V>]>g>}>
?,?6?@?[?
0(1a1f1p1
2"2O2
3+393A3M3\3{3
3!4.444;4m4r4|4
515s5y5
6 6,6Y6m6
717e7
8"8C8J8T8
9!929T9Z9d9
:4:9:C:
<)<<<A<H<N<T<\<
<6=A=F=\=
>->;>A>Y>}>
?'?f?k?
000=0F0K0U0z0
0;1@1E1L1V1
3.363<3M3U3[3g3t3
4"4'4/4
5)5.5A5K5S5Y5a5g5
7E7S7
7<8F8U8p8
9=:h:
;!;&;2;g;|;
< <N<
=5=`=k=
>.>>>C>n>
?@?W?q?
3B3Y3g3x3
3%4.494@4X4^4d4j4p4v4}4
5$5*565F5O5h5y5
6)656
8"8*898E8b8
929B9R9b9r9
:.:;:O:\:p:}:
;2;=;R;];m;};
</<?<O<_<o<
= =0=@=P=`=p=
>!>1>A>Q>a>q>~>
?#?0?
$0,090L0Q0W0d0w0
1*1:1J1_1z1
2!212>2R2g2
313A3Q3a3v3
4*4>4N4[4o4|4
5"5/5C5S5c5s5
6#606D6T6d6t6
7$747D7U7
9#9(9-929B9a9q9
:":2:B:R:b:r:
;";2;B;R;b;r;
<2<B<R<b<r<
=8=h=
>2>B>R>b>r>
?"?2?B?R?X?^?r?
0"020B0R0b0r0
1$1(1H1X1|1
0T0X0\0`0d0p0
303`3
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5
6(6X6
787h7
:X;`;h;p;x;
<X<x<
<(=,=0=
0 0$0(0004080<0@0D0H0L0P0T0X0\0`0d0l0p0t0x0|0
1$1(1,10141<1@1D1L1P1T1X1`1d1h1l1p1t1x1|1
2$2(20282@2D2H2L2P2X2\2`2d2h2p2t2x2|2
`HDon
sFsrY
\uHP'
<TQ$`
30,Dg;
" LK"\
fCm;]
s(]yC@
vv(F0s
dyAL~
RU#`[N
vO,8o
R*9):
zy;<q
uvQ.S
>ZwIE
Rr*I1^[
Cj(u-
J~eAT[
%c+nj14zvGL
 NqXNR
,<9|o
h@81Lt
:3+enS
+FQ}5I
b}t14
$UP[cO^
Lqd0P
7|FD6/-pu
0k\oRe6
|>i<@
#o,}xL
Zu<=h
5'OB'
|c%Q%+
TD'w#-D
VHZ1^(
<h5mL~
1PrQ8
6zkEs
P()~y
G,x0m
P[fT91
r9C?,
{^-ag
1GmpRS
Or?!NC
D:}=x
Washington1
Redmond1
Microsoft Corporation1(0&
Microsoft Code Signing PCA 20100
210902182559Z
220901182559Z0t1
Washington1
Redmond1
Microsoft Corporation1
Microsoft Corporation0
jGkBZ\
I0G1-0+
$Microsoft Ireland Operations Limited1
230865+4673990
O0M0K
Ehttp://crl.microsoft.com/pki/crl/products/MicCodSigPCA_2010-07-06.crl0Z
N0L0J
>http://www.microsoft.com/pki/certs/MicCodSigPCA_2010-07-06.crt0
c &M8
Washington1
Redmond1
Microsoft Corporation1200
)Microsoft Root Certificate Authority 20100
100706204017Z
250706205017Z0~1
Washington1
Redmond1
Microsoft Corporation1(0&
Microsoft Code Signing PCA 20100
KnILk
O0M0K
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
N0L0J
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
1http://www.microsoft.com/PKI/docs/CPS/default.htm0@
Legal_Policy_Statement
% moa
#Vx"&6
7Z>@B1
Washington1
Redmond1
Microsoft Corporation1(0&
Microsoft Code Signing PCA 2010
,ET/KmM6kidqRyWJOlaGtatDN4mJMAZzyPvO4+PuMig4=0Z
"Microsoft Window
 http://www.microsoft.com/windows0
3H\Zr
v<hXA
~K2KY
Dmf$r
n>g2;,
blJ-(
20220506220653.895Z0
Washington1
Redmond1
Microsoft Corporation1-0+
$Microsoft Ireland Operations Limited1&0$
Thales TSS ESN:3BD4-4B80-69C31%0#
Microsoft Time-Stamp Service
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
211028192741Z
230126192741Z0
Washington1
Redmond1
Microsoft Corporation1-0+
$Microsoft Ireland Operations Limited1&0$
Thales TSS ESN:3BD4-4B80-69C31%0#
Microsoft Time-Stamp Service0
F'HKX
X0V0T
Nhttp://www.microsoft.com/pkiops/crl/Microsoft%20Time-Stamp%20PCA%202010(1).crl0l
`0^0\
Phttp://www.microsoft.com/pkiops/certs/Microsoft%20Time-Stamp%20PCA%202010(1).crt0
iYB8+
.|m}-
O!~qCQ
Washington1
Redmond1
Microsoft Corporation1200
)Microsoft Root Certificate Authority 20100
210930182225Z
300930183225Z0|1
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
q\Q17
&S|9a
!]_0t
U0S0Q
3http://www.microsoft.com/pkiops/Docs/Repository.htm0
O0M0K
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
N0L0J
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
>NGdx
fg:SM
xSu$W
as.,k{n?,
J>f;O
!TkjE
Washington1
Redmond1
Microsoft Corporation1-0+
$Microsoft Ireland Operations Limited1&0$
Thales TSS ESN:3BD4-4B80-69C31%0#
Microsoft Time-Stamp Service
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
20220507042607Z
20220508042607Z0t0:
1,0*0
1(0&0
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 2010
 fwG1
PWUln
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 2010
Ut.*H
#.2*jy}
/pz"B
+d;xE
_G_'B
