!This program cannot be run in DOS mode.
Rich3
.text
`.rdata
@.data
.pdata
@.didat
.rsrc
@.reloc
L$0H3
q0R^G'
q0R^G'
q:_0#
|$ AVH
VWAVH
p:_0#
p:_0#
p:_0#
@A^_^
q:_0#
p:_0#
\$ UH
M H1E
 H3E H3E
@SVWH
ntelA
ineID
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
H SVWH
oD$ f
oL$0f
oT$@f
o\$PH
WAVAWH
 A_A^_
x AVH
WAVAWH
0A_A^_
H9y(u
{ ATAVAWH
f9<Au
fA9<vu
A_A^A\
R$fA;Z*
fA9Z*v#A
L$ E3
L$PH3
D$(E3
UVWATAUAVAWH
pA[r@
fF9,@u
fD9,xu
GD9l$@uO
A_A^A]A\_^]
{ AVH
UVWAVAWH
fB9<@u
D$PH+D$t
9|$@uGH;
L$DE3
A_A^_^]
UVWAVAWH
fF9<Bu
A_A^_^]
UVWATAUAVAWH
D$`H+D$tH
9D$@u
A_A^A]A\_^]
@USVWATAUAVAWH
L$PE3
D$XH;
D$0$?<
A_A^A]A\_^[]
t5fA9(t/I
\$ UVWAVAWH
t,D8=B
L9{Hu
A_A^_^]
\$ VWAVH
D$0H;
@SVWH
K SVWH
f94Cu
UVWATAUAVAWH
9\$pt
9\$tt
A_A^A]A\_^]
9t$ptBH
UVWATAUAVAWH
D$ E3
A_A^A]A\_^]
SVWAVAWH
`A_A^_^[
x AVH
H9;s!
L$ SVWH
L$HH3
L$@H3
H!\$@H
x ATAVAWH
fA;Tn
fA;Tn
fD9$Bs
0A_A^A\
WAVAWH
D$PE3
fF9<Gu
0A_A^_
VATAUAVAWH
0A_A^A]A\^
\$ VWATAVAWH
fE9$Fu
fD9$pu
fD9$pu
A_A^A\_^
VWAVH
fF94@u
UWATAUAWH
A_A]A\_]
UVWATAUAVAWH
pcPtE
A_A^A]A\_^]
E?L9u'
D$PH!\$ A
VWAVH
fB94@u
x UAVAWH
A_A^]
@USVWATAUAVAWH
A_A^A]A\_^[]
UAVAWH
A_A^]
L$pH3
L$pH3
L$pH3
D$HE3
D$H9\$@u
H!]gH
@USVWATAVAWH
D$hfD
CL$XH
CD$xH
A_A^A\_^[]
@USVWATAVAWH
D9d$pH
A_A^A\_^[]
\$ UVWAVAWH
D9|$pL
A_A^_^]
|$ UH
f9,Ou
9+}EH
L$(E3
L$(E3
(t$`L
SVWATAUAVAWH
0A_A^A]A\_^[
t2x5M
L$ZE3
L$`H3
{ AVH
@USVWH
X_^[]
|$ UH
x AVH
8\$Nu
8\$<t
UVWATAUAVAWH
M9 t,A
d$ E3
A_A^A]A\_^]
t$ WH
9\$@u
9\$Ht
UWATAVAWH
t$PI+
A_A^A\_]
@USVWATAUAVAWH
A_A^A]A\_^[]
f90w+A
WAVAWH
fF94@u
A_A^_
WAVAWH
 A_A^_
x UATAUAVAWH
A_A^A]A\]
|$ UH
x UATAUAVAWH
L$0H9]
L$0H9\$htoH
L$0H9\$ptkH
L$0H9\$`tkH
L$0H9]
A_A^A]A\]
x UATAUAVAWH
A_A^A]A\]
\$ E3
UVWATAUAVAWH
D;|$H
A_A^A]A\_^]
t$ WH
@SVWATAUAVAWH
CT$8I
fF9,Bu
L$XH3
`A_A^A]A\_^[
D$8E3
@SVWH
[ VWAVH
0A^_^
\$ VWAV
fF94@u
fD94xu
L$pH3
u%H!\$8H
D$@E3
SUVWAVH
T$@E3
PA^_^][
UVWATAUAVAWH
ty@8=
t"@8=
fA9>u
@A_A^A]A\_^]
WATAUAVAWH
H9/sDH
 A_A^A]A\_
x AVH
uPH9i
HcT$0HcL$4H
t@L;P
D$pE3
D$0E3
|$ E3
x ATAVAWH
0A_A^A\
D$(E3
H!\$ E3
L$8E3
D$(E3
D$(E3
WAVAWH
L$xE3
t$ E3
@A_A^_
!\$ H
@USVWATAUAVAWH
A_A^A]A\_^[]
UWATAVAWH
A_A^A\_]
@USVWATAVAWH
A_A^A\_^[]
t$ UWAVH
UATAUAVAWH
tW9z(vRH9z0tL
tiD9b(vPL9b0tJA
A_A^A]A\]
@USVWAVH
A^_^[]
UWAVH
D91vk
SVWATAUAVAWH
0A_A^A]A\_^[
t$ UWATAVAWH
A_A^A\_]
x UAVAWH
A_A^]
UVWATAUAVAWH
A_A^A]A\_^]
x UAVAWH
A_A^]
@USVWATAUAVAWH
A9>v+
A_A^A]A\_^[]
UVWATAUAVAWH
pA_A^A]A\_^]
WATAUAVAWH
Ct$xH
A_A^A]A\_
t$ WH
@USWH
@USVWAVAWH
A_A^_^[]
@USVWATAVAWH
fD9$Fu
A_A^A\_^[]
t$ WH
t$ WH
t$ WH
WATAUAVAWH
w\I;H
 A_A^A]A\_
t$ WAVAWH
A_A^_
WAVAWH
pHT<m
fF94@u
A_A^_
[ VWATAVAWH
D9t$0t5
fF94@u
A_A^A\_^
prVPP
UWAVH
SVWAVAWH
L$@H;
PA_A^_^[
\$ UVWH
|$ AVH
BMSRE3
BMSRH
!\$(A
H!\$ L
x AVH
bad allocation
ext-ms-win-storage-sense-l1-1-0
ext-ms-win-storage-sense-l1-2-0
ext-ms-win-storage-sense-l1-2-1
ext-ms-win-storage-sense-l1-2-2
ext-ms-win-storage-sense-l1-2-3
ext-ms-win-storage-sense-l1-2-4
ext-ms-win-storage-sense-l1-2-5
ext-ms-win-storage-sense-l1-1-0.dll
ext-ms-win-devmgmt-policy-l1-1-0
ext-ms-win-devmgmt-policy-l1-1-1
ext-ms-win-devmgmt-policy-l1-1-2
ext-ms-win-devmgmt-policy-l1-1-3
ext-ms-win-devmgmt-policy-l1-1-0.dll
ext-ms-win-session-usermgr-l1-1-0.dll
api-ms-win-core-com-l1-1-0.dll
K.$Unknown exception
bad array new length
string too long
-RegisterDevice
-RegisterUserDevice
-RegisterPhone
-IntegrityCheck
-WnsCommand
-SmsCommand
-HandleCommand
-LocateCommandRetry
-UpdateStatusRetry
-UserSessionCommand
-HandleUpgrade
-DeviceUnlocked
-Light
-DebugBreak
-Full
-FreeNetworkOnly
-Periodic
-SettingChange
-AccountChange
-ConnectedToNetwork
-ScreenOnOff
-NewAccount
-FirstTimeSignIn
-SimCardChanged
-ProtectionStateChanged
CBR(eTrigger == MdmRegistrationTrigger_Unknown)
onecoreuap\shell\devicedirectory\devicedirectoryclient\dll\devicedirectoryclient.cpp
CBR(eTrigger != MdmRegistrationTrigger_Unknown)
CHR(Windows::Foundation::Initialize(RO_INIT_MULTITHREADED))
CPR(pwszConfiguration)
CHR(((HRESULT)0x8007000EL))
CHR(ProcessRegisterDevice(wstrConfiguration, pdcHandle))
CHR(ProcessRegisterUserDevice(wstrConfiguration, pdcHandle))
CHR(ProcessRegisterPhone(wstrConfiguration, pdcHandle))
CHR(DdcStateController::IntegrityCheck())
CHR(DdcStateController::HandleUpgrade())
CHR(DdcCommandController::HandleWnsCommand())
CHR(DdcCommandController::HandleSmsCommands())
CHR(DdcCommandController::HandleCommand(pdcHandle))
CHR(DdcCommandController::HandleLocateCommandRetry(wstrConfiguration, pdcHandle))
CHR(DdcCommandController::UserSessionCommand())
CHR(DdcCommandController::HandleUpdateStatusRetry(wstrConfiguration, pdcHandle))
CHR(DdcCommandController::DeviceUnlocked(wstrConfiguration, pdcHandle))
CHR(((HRESULT)0x80070057L))
CHR(GetTriggerArgument(wstrConfiguration, eTrigger))
CHR(DdcRegistrationController::RegisterDevice(this, fFullRefresh, fFreeNetworkOnly, fLight, eTrigger, pdcHandle))
CHR(DdcRegistrationController::RegisterUserDevice(this, fFullRefresh, eTrigger, pdcHandle))
Windows.Data.Json.JsonValue
Windows.Data.Json.JsonObject
Windows.Data.Json.JsonArray
JTk_S/
Windows.Networking.PushNotifications.PushNotificationChannelManager
CHR(hr)
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddccommandcontroller.cpp
CHR(HandleCommandData( dwProfileId, dwRequestId, dwTimestamp, pbCommandData, cbCommandData, MdmCommandChannelType_WNS, ftUtc))
CHR(CoCreateInstance(CLSID_SmsSharedSecret, 0, CLSCTX_INPROC_SERVER, IID_ISmsSharedSecret, (LPVOID *)pSmsSharedSecret.GetAddressOf()))
CHR(pSmsSharedSecret->GetSmsCommands(&pwszCommands, &cCommands))
CBR(wcsncmp(pwszCommand, SMS_NOTIFICATION_PREFIX, SMS_NOTIFICATION_PREFIX_LENGTH) == 0)
CHR(b64coder.Decode(pwszCommand + 4, wcslen(pwszCommand + 4)))
CHR(pSmsSharedSecret->GetSecretCurrentId(&dwCurrentSecretId))
CHR(pSmsSharedSecret->GetSecretUpdatingId(&dwUpdatingSecretId))
CHR(pSmsSharedSecret->GetSharedSecret(dwCurrentSecretId, 0, &cbCurrentSecretSize))
CPR(pbCurrentSecret)
CHR(pSmsSharedSecret->GetSharedSecret(dwCurrentSecretId, pbCurrentSecret, &cbCurrentSecretSize))
CHR(pSmsSharedSecret->GetSharedSecret(dwUpdatingSecretId, 0, &cbUpdatingSecretSize))
CPR(pbUpdatingSecret)
CHR(pSmsSharedSecret->GetSharedSecret(dwUpdatingSecretId, pbUpdatingSecret, &cbUpdatingSecretSize))
CHR(pSmsSharedSecret->SetUpdatingSecretAsCurrentSecret())
CHR(HandleCommandData( dwProfileId, dwRequestId, dwTimestamp, pbCommandData, cbCommandData, MdmCommandChannelType_SMS, ftUtc))
CBR(dwProfileId == FMP_PROFILE_ID)
CBR(cbCommandDataWithPrefix <= 4096)
CPR(pbCommandDataWithPrefix)
CBR(memcpy_s(pbCommandDataWithPrefix, cbCommandDataWithPrefix, (BYTE *)&prefix, sizeof(CommandPrefix)) == 0)
CBR(memcpy_s(pbCommandDataWithPrefix + sizeof(CommandPrefix), cbCommandDataWithPrefix - sizeof(CommandPrefix), pbCommandData, cbCommandData) == 0)
CHR(NotifyClient(PARSED_COMMAND_WNF_STATE, pbCommandDataWithPrefix, cbCommandDataWithPrefix))
CBR(((NTSTATUS)0x00000000L) == ntStatus)
CPR(pPrefix)
CPR(pCmdType)
CBR(ntStatus == ((NTSTATUS)0x00000000L))
CBR(cbBuffer >= sizeof(CommandPrefix) + 1)
CHR(MdmParseCommandData(bCommand, cbCommand, &cmdType))
CPR(ppwszPin)
CPR(ppwszCpn)
CPR(pfRingAfterLock)
CPR(pvCids)
CHR(MdmParseLockCommand(bCommand, cbCommand, &pwszPin, &pwszCpn, &fRingAfterLock, vCids))
CPR(pfEnableLocation)
CHR(MdmParseLocateCommand(bCommand, cbCommand, &fEnableLocation))
CHR(DdcCommandExecutor::ProcessLocateCommand(&prefix, pdcHandle, fEnableLocation))
CHR(DdcCommandExecutor::ProcessRingCommand(&prefix, pdcHandle))
CHR(DdcCommandExecutor::ProcessLockCommand(&prefix, pdcHandle, pwszPin, pwszCpn, fRingAfterLock, vCids))
CHR(DdcCommandExecutor::ProcessWipeCommand(&prefix, pdcHandle))
CHR(DdcCommandExecutor::ProcessStartFamilySafetyCommand(&prefix))
CHR(((HRESULT)0x8000FFFFL))
%s %lu %s
CBR(swscanf_s(wstrConfiguration.c_str(), L"%s %lu %s", pwszSwitch, c_cchSwitch, &dwRetries, pwszEncodedPrefix, c_cchEncodedPrefix) == 3)
CHR(b64coder.Decode(pwszEncodedPrefix, wcslen(pwszEncodedPrefix)))
CBR(b64coder.DecodedLength() == sizeof(CommandPrefix))
CHR(DdcDeviceInfoHelper::FmdDisabledByPolicy(&fIsFmdDisabledByPolicy))
CHR(taskSchedulerWrapper.Initialize())
CHR(taskSchedulerWrapper.DeleteLocateCommandRetrySchedule(&prefix))
CHR(DdcCommandExecutor::ProcessLocateCommand(&prefix, pdcHandle, 0, dwRetries))
%s %s %s
CBR(swscanf_s(wstrConfiguration.c_str(), L"%s %s %s", pwszSwitch, c_cchSwitch, pwszEncodedPrefix, c_cchEncodedPrefix, pwszEncodedContext, c_cchEncodedContext) == 3)
CHR(b64coder.Decode(pwszEncodedContext, wcslen(pwszEncodedContext)))
CBR(b64coder.DecodedLength() == sizeof(UpdateStatusContext))
CHR(taskSchedulerWrapper.DeleteUpdateStatusRetrySchedule(&prefix))
CHR(DdcCommandExecutor::UpdateStatus(&prefix, &context, pdcHandle, &dwHttpStatus))
CHR(QueryCommandState(&prefix, &cmdType, &pwszPin, &pwszCpn, &fRingAfterLock, &fEnableLocation, &vCids))
CHR(DdcToastHelper::PostToastNotification( 603, 604, 0, 0))
SOFTWARE\Microsoft\DeviceDirectory
LastUserRegistrationTimestamp
Local\C9E8AF12-FA27-4748-EC04-38CA71239739_RegisterDevice
RegisterUserDevice
Exception
ReturnNt
ReturnHr
LogNt
LogHr
FailFast
%hs(%u)\%hs!%p: 
%hs!%p: 
(caller: %p) 
%hs(%d) tid(%x) %08X %ws
Msg:[%ws] 
CallContext:[%hs] 
[%hs(%hs)]
[%hs]
kernelbase.dll
RaiseFailFastException
std::exception: %hs
ntdll.dll
RtlDllShutdownInProgress
RtlDisownModuleHeapAllocation
WilFailureNotifyWatchers
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcregistrationcontroller.cpp
CPR(pfFreeNetwork)
CHR(CoCreateInstance( CLSID_NetworkListManager, 0, (CLSCTX_INPROC_SERVER| CLSCTX_INPROC_HANDLER| CLSCTX_LOCAL_SERVER| CLSCTX_REMOTE_SERVER), __uuidof(INetworkCostManager), (LPVOID *)pNetworkCostManager.GetAddressOf()))
CHR(pNetworkCostManager->GetCost(&dwCost, 0))
CPR(pfTooSoonForUserRegistration)
CHR(DdcRegistry::SetByteValue( (( HKEY ) (ULONG_PTR)((LONG)0x80000001) ), REGISTRY_KEY_DEVICEDIRECTORY, REGISTRY_VALUE_LAST_USER_REGISTRATION_TIMESTAMP, (BYTE *)&ftNow, (DWORD)sizeof(FILETIMEEX)))
CHR(DdcAccountHelper::EnumerateUsers(pAdmins.GetAddressOf(), pDeviceOwners.GetAddressOf(), pStandardUsers.GetAddressOf(), pConnectedAdmins.GetAddressOf()))
CHR(MdmConnectedAccountsChanged(MdmDeviceContext_Desktop, pAdmins.Get(), pDeviceOwners.Get(), pStandardUsers.Get(), pConnectedAdmins.Get(), &fConnectedAccountsChanged))
CHR(DdcCommandController::NotifyClient(WNF_SHEL_DDC_CONNECTED_ACCOUNTS_CHANGED))
CBR(hMutex != 0)
CHR(HRESULT_FROM_WIN32(GetLastError()))
CHR(DdcProtectionStateHelper::GetProtectionState(pProtectionState.GetAddressOf()))
CHR(MdmProtectionStateChanged(MdmDeviceContext_Desktop, pProtectionState.Get(), &fProtectionStateChanged))
CHR(IsFreeNetwork(&fFreeNetwork))
CHR(DdcAccountHelper::EnumerateUsers( pAdmins.GetAddressOf(), pDeviceOwners.GetAddressOf(), pStandardUsers.GetAddressOf(), pConnectedAdmins.GetAddressOf(), &cAdmins, &cDeviceOwners, &cStandardUsers))
CHR(MdmIsRegisteredWithService(MdmDeviceContext_Desktop, &fRegistered))
CHR(DdcDeviceInfoHelper::GetDeviceInfo(pDeviceInfo.GetAddressOf(), fLight))
CHR(DdcDeviceInfoHelper::GetDeviceHardwareInfo(pHardwareInfo.GetAddressOf()))
CHR(DdcDrivesHelper::FormatDeviceStorageInfo(pStorageInfo.GetAddressOf()))
CHR(DdcMobileNetworksHelper::GetMobileNetworksProperties(pMobileNetworks.GetAddressOf()))
RegisterDevice
CHR(pdcActivationWrapper.ActivateClient(L"RegisterDevice"))
CHR(MdmShouldRegisterDevice(&fShouldRegister, &parameters))
CHR(DdcMsaHelper::GetDeviceTicket(&wstrTicket))
CHR(MdmRegisterDevice(&dwHttpStatus, wstrTicket.c_str(), &parameters))
CHR(IsTooSoonForUserRegistration(&fTooSoonForRegistration))
CHR(DdcUserInfoHelper::GetUserInfo(pUserInfo.GetAddressOf()))
CHR(pdcActivationWrapper.ActivateClient(L"RegisterUserDevice"))
CHR(MdmRegisterUserDevice( &dwHttpStatus, wstrTicket.c_str(), eTrigger, nullptr, pUserInfo.Get() ))
\Microsoft\Windows\DeviceDirectoryClient
RegisterPhoneUpgrade
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcstatecontroller.cpp
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_REGISTER_PHONE_UPGRADE_TASK, 1))
CHR(taskSchedulerWrapper.RunTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_REGISTER_PHONE_UPGRADE_TASK))
CHR(ProcessStateChange())
CHR(pTaskStateHandler->ProcessStateChange())
CPR(pbBinaryData)
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcbase64coder.cpp
CHR(_Encode(pbBinaryData, cbBinaryData, 0, cchEncodedData))
CBR(0 != pszBuffer)
CHR(_Encode( pbBinaryData, cbBinaryData, pszBuffer, cchEncodedData ))
CPR(pbEndOfTriplets)
CBR(pch + 3 < (pchEncodedData + cchEncodedData))
CBR(pch < pchEncodedData + cchEncodedData)
CBR(cchEncodedData > 0 && cchEncodedData % 4 == 0)
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
LockMessage
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddccommandexecutor.cpp
CHR(MdmUpdateStatus( pdwHttpStatus, wstrTicket.c_str(), dwRequestId, eStatus, eCommandSource, dwRetries, dwErrorCode, ftReceivedTime, pftWorkStarted, pftWorkFinished, pfLocation, pAuthorizedCids, pAdmins, pDeviceOwners, pStandardUsers, pConnectedAdmins, pfMasterLocationSwitchOn, pfLocationSyncEnabled, pfMasterLocationEnabledByClient, pfLocationSyncEnabledByClient, ppwszBuffer))
CHR(DdcAccountHelper::UsersAuthorizedToSeeLocation(pAuthorizedCids.GetAddressOf()))
CHR(DdcDeviceInfoHelper::MasterLocationSwitchOn(&fMasterLocationSwitchOn))
CHR(DdcDeviceInfoHelper::LocationSyncEnabled(&fLocationSyncEnabled))
QuickLocationSync
AccurateLocationSync
CHR(taskSchedulerWrapper.ScheduleLocateCommandRetry(pPrefix, dwRetries))
CHR(taskSchedulerWrapper.DeleteLocateCommandRetrySchedule(pPrefix))
RingUpdateStatus
CHR(taskSchedulerWrapper.ScheduleUpdateStatusRetry(pPrefix, &updateStatusContext))
CHR(GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), pJsonObjectStatics.GetAddressOf()))
CHR(pJsonObjectStatics->Parse(HStringReference(pwszResponse).Get(), pJsonObject.GetAddressOf()))
CHR(pJsonObject->GetNamedValue(HStringReference(JSON_LOCK_MESSAGE).Get(), pJsonValue.GetAddressOf()))
CHR(pJsonValue->get_ValueType(&eValueType))
CBR(eValueType == JsonValueType_String)
CHR(pJsonValue->GetString(hstrMessage.GetAddressOf()))
CPR(pCommandHandler)
CHR(pCommandHandler->LoadResource(MdmResource_DefaultLockMessageWithCpn, &dwResourceId))
DeviceDirectoryClient.dll
CBR(LoadStringW( GetModuleHandleW(L"DeviceDirectoryClient.dll"), dwResourceId, pwszLoadedString, (sizeof(*RtlpNumberOf(pwszLoadedString)))) != 0)
CHR(StringCchPrintfW(pwszFormattedString, (sizeof(*RtlpNumberOf(pwszFormattedString))), pwszLoadedString, pwszCpn))
CHR(pCommandHandler->LoadResource(MdmResource_DefaultLockMessage, &dwResourceId))
CHR(pCommandHandler->LoadResource(MdmResource_LockScreenTitle, &dwResourceId))
LockUpdateStatus
CHR(taskSchedulerWrapper.ScheduleDeviceUnlockedEvent(pPrefix, &updateStatusContext, pCommandHandler.Get()))
WipeUpdateStatus
CPR(pContext)
CPR(pdwHttpStatus)
UpdateStatus
CHR(taskSchedulerWrapper.ScheduleUpdateStatusRetry(pPrefix, pContext))
CHR(taskSchedulerWrapper.DeleteUpdateStatusRetrySchedule(pPrefix))
LocateCommandRetry%lu
UpdateStatusRetry%lu
DeviceUnlocked%lu
RegisterDeviceWnsFallback
<WnfStateChangeTrigger><StateName>7510bca323028b41</StateName><Data>01</Data><DataOffset>0</DataOffset></WnfStateChangeTrigger>
<Task version="1.4" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task"><RegistrationInfo><SecurityDescriptor>D:P(A;;FA;;;SY)(A;;FRFX;;;BA)</SecurityDescriptor></RegistrationInfo><Principals><Principal id="System"><UserId>S-1-5-18</UserId><RunLevel>LeastPrivilege</RunLevel></Principal></Principals><Triggers><TimeTrigger><Repetition><Interval>PT%luM</Interval></Repetition><StartBoundary>%.4u-%.2u-%.2uT%.2u:%.2u:%.2u</StartBoundary></TimeTrigger>%s</Triggers><Settings><MultipleInstancesPolicy>Parallel</MultipleInstancesPolicy><DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries><StopIfGoingOnBatteries>false</StopIfGoingOnBatteries><AllowHardTerminate>false</AllowHardTerminate><StartWhenAvailable>true</StartWhenAvailable><RunOnlyIfNetworkAvailable>true</RunOnlyIfNetworkAvailable><AllowStartOnDemand>true</AllowStartOnDemand><Enabled>true</Enabled><Hidden>true</Hidden><RunOnlyIfIdle>false</RunOnlyIfIdle><DisallowStartOnRemoteAppSession>false</DisallowStartOnRemoteAppSession><UseUnifiedSchedulingEngine>true</UseUnifiedSchedulingEngine><WakeToRun>false</WakeToRun><ExecutionTimeLimit>PT0S</ExecutionTimeLimit><Priority>10</Priority></Settings><Actions Context="System"><ComHandler><ClassId>{AE31B729-D5FD-401E-AF42-784074835AFE}</ClassId><Data>%s %lu %s</Data></ComHandler></Actions></Task>
<Task version="1.4" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task"><RegistrationInfo><SecurityDescriptor>D:P(A;;FA;;;SY)(A;;FRFX;;;BA)</SecurityDescriptor></RegistrationInfo><Principals><Principal id="System"><UserId>S-1-5-18</UserId><RunLevel>LeastPrivilege</RunLevel></Principal></Principals><Triggers><TimeTrigger><Repetition><Interval>PT%luM</Interval></Repetition><StartBoundary>%.4u-%.2u-%.2uT%.2u:%.2u:%.2u</StartBoundary></TimeTrigger>%s</Triggers><Settings><MultipleInstancesPolicy>Parallel</MultipleInstancesPolicy><DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries><StopIfGoingOnBatteries>false</StopIfGoingOnBatteries><AllowHardTerminate>false</AllowHardTerminate><StartWhenAvailable>true</StartWhenAvailable><RunOnlyIfNetworkAvailable>true</RunOnlyIfNetworkAvailable><AllowStartOnDemand>true</AllowStartOnDemand><Enabled>true</Enabled><Hidden>true</Hidden><RunOnlyIfIdle>false</RunOnlyIfIdle><DisallowStartOnRemoteAppSession>false</DisallowStartOnRemoteAppSession><UseUnifiedSchedulingEngine>true</UseUnifiedSchedulingEngine><WakeToRun>false</WakeToRun><ExecutionTimeLimit>PT0S</ExecutionTimeLimit><Priority>10</Priority></Settings><Actions Context="System"><ComHandler><ClassId>{AE31B729-D5FD-401E-AF42-784074835AFE}</ClassId><Data>%s %s %s</Data></ComHandler></Actions></Task>
<Task version="1.4" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task"><RegistrationInfo><SecurityDescriptor>D:P(A;;FA;;;SY)(A;;FRFX;;;BA)</SecurityDescriptor></RegistrationInfo><Principals><Principal id="System"><UserId>S-1-5-18</UserId><RunLevel>LeastPrivilege</RunLevel></Principal></Principals><Triggers>%s</Triggers><Settings><MultipleInstancesPolicy>Parallel</MultipleInstancesPolicy><DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries><StopIfGoingOnBatteries>false</StopIfGoingOnBatteries><AllowHardTerminate>false</AllowHardTerminate><StartWhenAvailable>true</StartWhenAvailable><RunOnlyIfNetworkAvailable>true</RunOnlyIfNetworkAvailable><AllowStartOnDemand>true</AllowStartOnDemand><Enabled>true</Enabled><Hidden>true</Hidden><RunOnlyIfIdle>false</RunOnlyIfIdle><DisallowStartOnRemoteAppSession>false</DisallowStartOnRemoteAppSession><UseUnifiedSchedulingEngine>true</UseUnifiedSchedulingEngine><WakeToRun>false</WakeToRun><ExecutionTimeLimit>PT0S</ExecutionTimeLimit><Priority>10</Priority></Settings><Actions Context="System"><ComHandler><ClassId>{AE31B729-D5FD-401E-AF42-784074835AFE}</ClassId><Data>%s %s %s</Data></ComHandler></Actions></Task>
<Task version="1.4" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task"><RegistrationInfo><SecurityDescriptor>D:P(A;;FA;;;SY)(A;;FRFX;;;BA)</SecurityDescriptor></RegistrationInfo><Principals><Principal id="System"><UserId>S-1-5-18</UserId><RunLevel>LeastPrivilege</RunLevel></Principal></Principals><Triggers><TimeTrigger><StartBoundary>%.4u-%.2u-%.2uT%.2u:%.2u:%.2u</StartBoundary></TimeTrigger></Triggers><Settings><MultipleInstancesPolicy>Parallel</MultipleInstancesPolicy><DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries><StopIfGoingOnBatteries>false</StopIfGoingOnBatteries><AllowHardTerminate>false</AllowHardTerminate><StartWhenAvailable>true</StartWhenAvailable><RunOnlyIfNetworkAvailable>true</RunOnlyIfNetworkAvailable><AllowStartOnDemand>true</AllowStartOnDemand><Enabled>true</Enabled><Hidden>true</Hidden><RunOnlyIfIdle>false</RunOnlyIfIdle><DisallowStartOnRemoteAppSession>false</DisallowStartOnRemoteAppSession><UseUnifiedSchedulingEngine>true</UseUnifiedSchedulingEngine><WakeToRun>false</WakeToRun><ExecutionTimeLimit>PT0S</ExecutionTimeLimit><Priority>10</Priority><RestartOnFailure><Interval>PT12H</Interval><Count>14</Count></RestartOnFailure></Settings><Actions Context="System"><ComHandler><ClassId>{AE31B729-D5FD-401E-AF42-784074835AFE}</ClassId><Data>-RegisterDevice -Periodic</Data></ComHandler></Actions></Task>
CPR(pfConnected)
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddctaskschedulerwrapper.cpp
CHR(CoCreateInstance(CLSID_TaskScheduler, 0, CLSCTX_INPROC_SERVER, IID_ITaskService, (PVOID*)&pTaskService))
CHR(pTaskService->Connect(vtEmpty, vtEmpty, vtEmpty, vtEmpty))
CPR(pwszTaskName)
CPR(bszTaskFolder)
CPR(bszTaskName)
CHR(m_pTaskService->GetFolder(bszTaskFolder, pTaskFolder.GetAddressOf()))
CHR(pRegisteredTask->Run(vtEmpty, 0))
CHR(pRegisteredTask->put_Enabled(fEnabled ? ((VARIANT_BOOL)-1) : ((VARIANT_BOOL)0)))
CPR(pwszXml)
CPR(bszTaskXml)
CHR(pTaskFolder->RegisterTask( bszTaskName, bszTaskXml, TASK_CREATE_OR_UPDATE, vtEmpty, vtEmpty, TASK_LOGON_SERVICE_ACCOUNT, vtEmpty, pCreatedTask.GetAddressOf() ))
CHR(b64coder.Encode((BYTE *)pPrefix, sizeof(CommandPrefix), wstrEncodedPrefix))
CHR(DeviceConnected(&fConnected))
CHR(StringCchPrintfW( pwszTaskXml, 1800, pwszLocateCommandRetryXmlFormat, COMMAND_RETRY_PERIOD_DEFAULT, now.wYear, now.wMonth, now.wDay, now.wHour, now.wMinute, now.wSecond, fConnected ? L"" : pwszConnectivityBackUpTrigger, DEVICE_DIRECTORY_CLIENT_LOCATE_COMMAND_RETRY_SWITCH, dwRetries + 1, wstrEncodedPrefix.c_str()))
CHR(StringCchPrintfW( pwszTaskName, 32, TASK_SCHEDULER_LOCATE_COMMAND_RETRY_FORMAT, pPrefix->dwRequestId))
CHR(DeleteTaskIfExists( TASK_SCHEDULER_DIRECTORY_NAME, pwszTaskName ))
CHR(CreateTask( TASK_SCHEDULER_DIRECTORY_NAME, pwszTaskName, pwszTaskXml ))
CHR(b64coder.Encode((BYTE *)pContext, sizeof(UpdateStatusContext), wstrEncodedContext))
CHR(StringCchPrintfW( pwszTaskXml, 1800, pwszUpdateStatusRetryXmlFormat, COMMAND_RETRY_PERIOD_DEFAULT, now.wYear, now.wMonth, now.wDay, now.wHour, now.wMinute, now.wSecond, fConnected ? L"" : pwszConnectivityBackUpTrigger, DEVICE_DIRECTORY_CLIENT_UPDATE_STATUS_RETRY_SWITCH, wstrEncodedPrefix.c_str(), wstrEncodedContext.c_str()))
CHR(StringCchPrintfW( pwszTaskName, 32, TASK_SCHEDULER_UPDATE_STATUS_RETRY_FORMAT, pPrefix->dwRequestId))
CHR(pCommandHandler->GetDeviceUnlockedTrigger(pwszTrigger, &cchTrigger))
CHR(StringCchPrintfW( pwszTaskXml, 1800, pwszDeviceUnlockedXmlFormat, pwszTrigger, DEVICE_DIRECTORY_CLIENT_DEVICE_UNLOCKED_SWITCH, wstrEncodedPrefix.c_str(), wstrEncodedContext.c_str()))
CHR(StringCchPrintfW( pwszTaskName, 32, TASK_SCHEDULER_DEVICE_UNLOCKED_FORMAT, pPrefix->dwRequestId))
CBR(FileTimeToLocalFileTime(&ftExpiration.ftTime, &ftLocalTime))
CBR(FileTimeToSystemTime(&ftLocalTime, &stStartTime))
CHR(StringCchPrintfW( pwszTaskXml, 1800, pwszWnsChannelRegistrationFallbackFormat, stStartTime.wYear, stStartTime.wMonth, stStartTime.wDay, stStartTime.wHour, stStartTime.wMinute, stStartTime.wSecond))
CHR(DeleteTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_WNS_CHANNEL_REGISTRATION))
CHR(CreateTask(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_WNS_CHANNEL_REGISTRATION, pwszTaskXml))
SYSTEM\CurrentControlSet\Control\SystemInformation
SYSTEM\Platform\DeviceTargetingInfo
SOFTWARE\Microsoft\Shell\OOBE
SOFTWARE\Microsoft\Windows NT\CurrentVersion
SOFTWARE\Microsoft\WindowsUpdate\Orchestrator\Installation\Target
SOFTWARE\Microsoft\Windows\CurrentVersion\OOBE\Stats
SOFTWARE\Microsoft\Windows\CurrentVersion\Product
SystemProductName
SystemManufacturer
EditionID
PhoneManufacturerModelName
PhoneManufacturer
ReleaseId
UpdateTimestamp
OobeCompleteTime
InstallDate
Windows
PowerPlatformRole
ChassisType
OemModelNameCorrected
OemManufacturer
OemSerialNumber
OSLocale
FriendlyName
OSEdition
ShortOSVersion
LocationCollectionOptIn
DeviceLocationEnabled
ResetProtectionCapable
DeviceBatteryCapable
OneCoreDeviceFamily
OneCoreDeviceForm
OsSku
OsGenuineState
OsReactivationPolicyState
InstalledRam
NumProcessors
ProcessorType
ProcessorSpeed
SystemType
ReleaseShortName
CommonTargetingAttributes
ProductId
GraphicsCardsInfo
GraphicCardId
DisplayName
Description
InstalledMemory
CriticalUpdatesAvailable
CriticalUpdatesLastCheckedTime
LastMajorUpdateTime
onecore\internal\sdk\inc\wil\opensource\wil\resource.h
WilError_03
MaxClockSpeed
select MaxClockSpeed from Win32_Processor
HARDWARE\DESCRIPTION\System\CentralProcessor\0
Identifier
ProcessorNameString
root\cimv2
%1.2f GHz
%ld MHz
map/set too long
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), pDeviceInfo.GetAddressOf()))
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcdeviceinfohelper.cpp
CHR(GetDeviceInfoLight(pDeviceInfo.Get()))
CHR(GetDeviceInfoHeavy(pDeviceInfo.Get()))
CHR(pDeviceInfo.As(&pDeviceInfoAsValue))
CHR(GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonValue).Get(), pJsonValueStatics.GetAddressOf()))
CHR(pJsonValueStatics->CreateBooleanValue((boolean)*pfLocationCollectionOptIn, pJsonValue.ReleaseAndGetAddressOf()))
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonValue).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_LOCATION_COLLECTION_OPT_IN).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateBooleanValue((boolean)*pfMasterLocationSwitchOn, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_MASTER_LOCATION_SWITCH_IN).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateBooleanValue((boolean)*pfUpdatesAvailable, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_UPDATES_AVAILABLE).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszTimestamp).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_LAST_UPDATE_TIME).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszFriendlyName).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_FRIENDLY_NAME).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszOs).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_OS).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateNumberValue(ePowerPlatformRole, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_POWER_PLATFORM).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateNumberValue(dwOneCoreDeviceFamily, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_ONECORE_DEVICE_FAMILY).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateNumberValue(dwOneCoreDeviceForm, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_ONECORE_DEVICE_FORM).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateBooleanValue((boolean)*pfResetProtectionCapable, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_RESET_PROTECTION_CAPABLE).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateNumberValue(*piChassisType, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_CHASSIS_TYPE).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszOemModelName).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_OEM_MODEL_NAME).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszOemManufacturer).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_OEM_MANUFACTURER).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszOemSerialNumber).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_OEM_SERIAL_NUMBER).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszOsEdition).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_OS_EDITION).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszReleaseShortName).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_RELEASE_SHORT_NAME).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszOsLocale).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_OS_LOCALE).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszShortOsVersion).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_SHORT_OS_VERSION).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateBooleanValue((boolean)*pfDeviceBatteryCapable, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_DEVICE_BATTERY_CAPABLE).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateNumberValue(*pdwOsSku, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_OS_SKU).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateNumberValue((DWORD)*peOsGenuineState, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_OS_GENUINE_STATE).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateNumberValue(*piOsReactivationPolicyState, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_OS_REACTIVATION_POLICY_STATE).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszLastMajorUpdateTime).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_LAST_MAJOR_UPDATE_TIMESTAMP).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszCommonTargetingAttributes).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_COMMON_TARGETING_ATTRIBUTES).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateNumberValue(*pdwProductId, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_PRODUCT_ID).Get(), pJsonValue.Get()))
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), pDeviceHardwareInfo.GetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszRandomAccessMemory).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceHardwareInfo->SetNamedValue(HStringReference(JSON_RANDOM_ACCESS_MEMORY).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateNumberValue(dwNumProcessors, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceHardwareInfo->SetNamedValue(HStringReference(JSON_NUM_PROCESSORS).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszProcessorName).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceHardwareInfo->SetNamedValue(HStringReference(JSON_PROCESSOR_NAME).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszProcessorSpeed).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceHardwareInfo->SetNamedValue(HStringReference(JSON_PROCESSOR_SPEED).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszSystemType).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pDeviceHardwareInfo->SetNamedValue(HStringReference(JSON_SYSTEM_TYPE).Get(), pJsonValue.Get()))
CHR(FormatHardwareDisplayInfo(&pJsonValue))
CHR(pDeviceHardwareInfo->SetNamedValue(HStringReference(JSON_DISPLAY_CARDS).Get(), pJsonValue.Get()))
CHR(pDeviceHardwareInfo.As(&pDeviceHardwareInfoAsValue))
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), pJsonObject.GetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(wstrDeviceId.c_str()).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_DISPLAY_ID).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(wstrDeviceName.c_str()).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_DISPLAY_NAME).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(wstrDeviceDescription.c_str()).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_DISPLAY_DESCRIPTION).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(wstrMemory.c_str()).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_DISPLAY_MEMORY).Get(), pJsonValue.Get()))
CHR(pJsonObject.As(&pJsonObjectAsValue))
CPR(ppJsonValue)
CBR(*ppJsonValue == nullptr)
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonArray).Get(), pJsonArray.GetAddressOf()))
CHR(pJsonArray.As(&pJsonArrayAsVector))
CHR(FormatIndividualHardwareDisplayInfo( pDisplayInfo->m_szDeviceIdentifier, pDisplayInfo->m_szDeviceName, pDisplayInfo->m_szDescription, pDisplayInfo->m_szDisplayMemoryEnglish, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonArrayAsVector->Append(pJsonValue.Get()))
CHR(pJsonArray.As(&pJsonArrayAsValue))
CPR(pfLocationSyncEnabled)
CHR(MdmSetFindMyDevice(fEnable))
CPR(pfFmdDisabledByPolicy)
CPR(pfMasterLocationSwitchOn)
CHR(CoCreateInstance( __uuidof(LocationManager), nullptr, CLSCTX_LOCAL_SERVER, __uuidof(**(pLocationManager.GetAddressOf())), IID_PPV_ARGS_Helper(pLocationManager.GetAddressOf())))
CHR(pLocationManager->get_LocationMasterSwitch(&fMasterLocationSwitchOn))
CHR(pLocationManager->put_LocationMasterSwitch(fEnable))
CPR(pfCapable)
CBR(GetPwrCapabilities(&spc) != 0)
CPR(ppwszFriendlyName)
CBR(*ppwszFriendlyName == nullptr)
CBR(wcscpy_s(pwszFriendlyName, cchPhoneName, wszPhoneName) == 0)
CBR(!GetComputerNameExW(ComputerNamePhysicalDnsHostname, nullptr, &cchFriendlyName))
CBR(GetLastError() == 234L)
CBR(cchFriendlyName > 0)
CPR(pwszFriendlyName)
CBR(GetComputerNameExW(ComputerNamePhysicalDnsHostname, pwszFriendlyName, &cchFriendlyName))
CPR(ppwszOsLocale)
CBR(*ppwszOsLocale == nullptr)
CBR(GetSystemPreferredUILanguages(0x8, &ulNumLanguages, nullptr, &cchLanguages))
CBR(ulNumLanguages > 0 && cchLanguages > 0)
CPR(pwszOsLocale)
CBR(GetSystemPreferredUILanguages(0x8, &ulNumLanguages, pwszOsLocale, &cchLanguages))
CPR(ppwszShortOsVersion)
CBR(*ppwszShortOsVersion == nullptr)
CPR(pwszShortOsVersion)
%u.%u.%u.%u
CHR(StringCchPrintfW( pwszShortOsVersion, c_cchShortOsVersion, L"%u.%u.%u.%u", ((UINT16 *)&ullPlatformVersion)[3], ((UINT16 *)&ullPlatformVersion)[2], ((UINT16 *)&ullPlatformVersion)[1], ((UINT16 *)&ullPlatformVersion)[0] ))
CPR(piChassisType)
ROOT\CIMV2
select ChassisTypes from Win32_SystemEnclosure
CHR(ExecuteWmiQuery(L"select ChassisTypes from Win32_SystemEnclosure", L"ROOT\\CIMV2", pEnumerator.GetAddressOf()))
CHR(pEnumerator->Next(5000, 1, pEnclosureInfo.GetAddressOf(), &cObjects))
CBR(cObjects >= 1)
ChassisTypes
CHR(pEnclosureInfo->Get(L"ChassisTypes", 0, &chassisTypesRawVariant, 0, 0))
CBR(chassisTypesVariant.vt == (VT_ARRAY + VT_I4))
CBR(chassisTypesVariant.parray != nullptr)
CBR(chassisTypesVariant.parray->cDims > 0)
CBR(chassisTypesVariant.parray->pvData != nullptr)
CPR(pwstrSerialNumber)
CHR(GetSmBiosData(&pSmBiosData))
CHR(FindSmBiosTable(pSmBiosData, 1, (TSmBiosTable**)&pSystemInfo))
CBR(pSystemInfo != nullptr)
CHR(GetSmBiosString(pSystemInfo, pSystemInfo->SerialNumber, &pwszSerialNumber))
CBR(pwszSerialNumber != nullptr)
CPR(ppEnumerator)
CBR(*ppEnumerator == nullptr)
CHR(CoCreateInstance( CLSID_WbemLocator, nullptr, CLSCTX_INPROC_SERVER, __uuidof(IWbemLocator), (LPVOID*)pWbemLocator.ReleaseAndGetAddressOf()))
CHR(pWbemLocator->ConnectServer( _bstr_t(wstrServer.c_str()), nullptr, nullptr, 0, 0, nullptr, nullptr, pWbemServices.ReleaseAndGetAddressOf()))
CHR(CoSetProxyBlanket( pWbemServices.Get(), 0xFFFFFFFFL, 0xffffffff, ( ( OLECHAR * )( INT_PTR )-1 ), 0, 3, ( ( void * )( INT_PTR )-1 ), EOAC_DEFAULT))
CHR(pWbemServices->ExecQuery( _bstr_t(L"WQL"), _bstr_t(wstrQuery.c_str()), WBEM_FLAG_RETURN_IMMEDIATELY | WBEM_FLAG_FORWARD_ONLY, nullptr, pEnumerator.ReleaseAndGetAddressOf()))
CHR(CoSetProxyBlanket( pEnumerator.Get(), 0xFFFFFFFFL, 0xffffffff, ( ( OLECHAR * )( INT_PTR )-1 ), 0, 3, ( ( void * )( INT_PTR )-1 ), EOAC_DEFAULT))
phoneinfo.dll
CBR(hModule != nullptr)
QueryPhoneInformation
CBR(pFunc != nullptr)
CBR(pFunc(phoneKey, pwszPhoneInfo, phoneInfoSize, pOutputSize))
CPR(pUllBytes)
CBR(GlobalMemoryStatusEx(&ms))
CPR(pwstrSystemType)
OSType32BitX86
OSType64BitX64
CPR(pwstrProcessorName)
CPR(pwstrProcessorSpeed)
CPR(pwstrRandomAccessMemory)
CPR(pwstrDeviceAge)
CHR(GetSystemMemory(&ullRam))
CHR(GetSystemType(pwstrSystemType))
CHR(GetProcessorInformation(pdwNumProcessors, pwstrProcessorName, pwstrProcessorSpeed))
CPR(pdwSku)
CBR(GetVersionExW((OSVERSIONINFO *)&osVersion))
CBR(GetProductInfo(osVersion.dwMajorVersion, osVersion.dwMinorVersion, osVersion.wServicePackMajor, osVersion.wServicePackMinor, &dwSku))
Slwga.dll
SLIsGenuineLocal
CHR(pFunc(pAppId, pGenuineState, pUIOptions))
CPR(piPolicyState)
AllowWindowsEntitlementReactivation
Licensing
CPR(pftTime)
CBR(SystemTimeToFileTime(&stSystemTime, &ftTime.ftTime))
CHR(HRESULT_FROM_WIN32(2L))
CHR(GetActivationFactory( HStringReference(RuntimeClass_Windows_Internal_Flighting_ClientAttributes).Get(), spCommonTargetingAttributesFactory.GetAddressOf()))
CHR(spCommonTargetingAttributesFactory->GetClientAttributesForApp( HStringReference(CTAC_APP_NAME).Get(), HStringReference(L"6").Get(), spClientAttributes.GetAddressOf()))
CHR(spClientAttributes->ToJsonString(hstrJsonAtttributes.GetAddressOf()))
CHR(pObject->GetPropW( wstrName, &var ))
CBR(var.vt == VT_BSTR)
DxDiag_DisplayDevices
CHR(pDxDiagRoot->GetChildContainer( L"DxDiag_DisplayDevices", &pContainer))
CHR(pContainer->GetNumberOfChildContainers(&nInstanceCount))
CPR(pInfo)
CHR(pContainer->EnumChildContainerNames(nItem, wszContainer, 256))
CHR(pContainer->GetChildContainer(wszContainer, &pObject))
CBR(pObject != nullptr)
szDeviceIdentifier
CHR(GetStringValue(pObject.Get(), L"szDeviceIdentifier", pDisplayInfo->m_szDeviceIdentifier, sizeof(pDisplayInfo->m_szDeviceIdentifier)/sizeof(TCHAR)))
szManufacturer
CHR(GetStringValue(pObject.Get(), L"szManufacturer", pDisplayInfo->m_szDeviceName, sizeof(pDisplayInfo->m_szDeviceName)/sizeof(TCHAR)))
szDescription
CHR(GetStringValue(pObject.Get(), L"szDescription", pDisplayInfo->m_szDescription, sizeof(pDisplayInfo->m_szDescription)/sizeof(TCHAR)))
szDisplayMemoryEnglish
CHR(GetStringValue(pObject.Get(), L"szDisplayMemoryEnglish", pDisplayInfo->m_szDisplayMemoryEnglish, sizeof(pDisplayInfo->m_szDisplayMemoryEnglish)/sizeof(TCHAR)))
CHR(CoCreateInstance( CLSID_DxDiagProvider, nullptr, CLSCTX_INPROC_SERVER, IID_IDxDiagProvider, (LPVOID*) &pDxDiagProvider))
CBR(pDxDiagProvider != nullptr)
CHR(pDxDiagProvider->Initialize( &dxDiagInitParam ))
CHR(pDxDiagProvider->GetRootContainer( &pDxDiagRoot ))
CHR(GetDisplayInfoValues(pDxDiagRoot.Get(), vDisplayInfo))
Local\SM0:%lu:%lu:%hs
vector too long
Windows.Internal.Flighting.ClientAttributes
CPR(pszMessageTemplate)
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddctoasthelper.cpp
CPR(ppszMessage)
CBR(FormatMessageW( 0x00000400 | 0x00000100 | 0x00002000, pszMessageTemplate, 0, 0, (LPWSTR)ppszMessage, 0, (va_list *)vlArgs) != 0)
CHR(spPlatform.CoCreateInstance( __uuidof(CWindowsPushNotificationPlatform), 0, CLSCTX_LOCAL_SERVER))
CHR(spPlatform->CreateAppEndpoint(&spAppEndpoint))
CHR(BuildToastPayload( uiResIdDescription, uiResIdAction, pcszDescriptionParam, cchDescriptionParam, &pszFormattedToastXMLPayload))
CHR(spAppEndpoint->PostNotification( pszPackageName, pszAppId, 0, WPN_FLAGS_NONE, pszFormattedToastXMLPayload, sc_szSettingsTag, sc_szSettingsGroup, wftExpirationTime, 0, 0, nullptr, nullptr, nullptr, 0, &dwCookie))
https://account.microsoft.com/devices
<toast activationType="protocol" launch="%1"><visual><binding template="ToastGeneric"><text id="1">%2</text><text id="2">%3</text></binding></visual></toast>
CBR(LoadStringW( GetModuleHandleW(L"DeviceDirectoryClient.dll"), uiResIdAction, pszActionValue, (sizeof(*RtlpNumberOf(pszActionValue)))) != 0)
CBR(LoadStringW( GetModuleHandleW(L"DeviceDirectoryClient.dll"), uiResIdDescription, pszTitleDescription, (sizeof(*RtlpNumberOf(pszTitleDescription)))) != 0)
CHR(FormatMessageFromStringAlloc( ppszFormattedToastXMLPayload, c_szToastPayloadFormat, c_szTaskUri, pszTitleDescription, pszActionValue))
UpdateGroup
UpdateTag
windows.immersivecontrolpanel_cw5n1h2txyewy!microsoft.windows.immersivecontrolpanel
windows.immersivecontrolpanel_cw5n1h2txyewy
CBR(0L == dwResult)
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcregistry.cpp
CBR(cbValue >= cbSize)
CBR(lRet != 2L && lRet != 3L)
CBR(lRet == 0L)
CBR(dwType == ( 1ul ) || cbSize <= 1 || (cbSize & 0x1) != 0)
CHR(EnumerateUsers(0, ppAdmins, ppDeviceOwners, ppStandardUsers, pcAdmins, pcDeviceOwners, pcStandardUsers))
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcaccounthelper.cpp
CHR(EnumerateUsers(1, ppConnectedAdmins, nullptr, nullptr, pcConnectedAdmins, nullptr, nullptr))
CBR(*ppAdmins == nullptr)
CBR(*ppDeviceOwners == nullptr)
CBR(*ppStandardUsers == nullptr)
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonArray).Get(), pAdmins.GetAddressOf()))
CHR(pAdmins.As(&pAdminsAsVector))
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonArray).Get(), pDeviceOwners.GetAddressOf()))
CHR(pDeviceOwners.As(&pDeviceOwnersAsVector))
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonArray).Get(), pStandardUsers.GetAddressOf()))
CHR(pStandardUsers.As(&pStandardUsersAsVector))
CHR(MdmEnumerateUsers(&vAdmins, &vDeviceOwners, &vStandardUsers, fConnectedOnly))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(iter.c_str()).Get(), pCID.ReleaseAndGetAddressOf()))
CHR(pAdminsAsVector->Append(pCID.Get()))
CHR(pDeviceOwnersAsVector->Append(pCID.Get()))
CHR(pStandardUsersAsVector->Append(pCID.Get()))
CHR(pAdmins.As(&pAdminsAsValue))
CHR(pDeviceOwners.As(&pDeviceOwnersAsValue))
CHR(pStandardUsers.As(&pStandardUsersAsValue))
CPR(ppAuthorizedCids)
CBR(*ppAuthorizedCids == nullptr)
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonArray).Get(), pAuthorizedCids.GetAddressOf()))
CHR(pAuthorizedCids.As(&pAuthorizedCidsAsVector))
CHR(MdmUsersAuthorizedToSeeLocation(&vAuthorizedCids))
CHR(pAuthorizedCidsAsVector->Append(pCID.Get()))
CHR(pAuthorizedCids.As(&pAuthorizedCidsAsValue))
DefenderHealth
DefenderStatus
DefenderRunning
DefenderCloudBasedProtectionStatus
DefenderCloudBasedProtectionOrigin
DefenderSampleSubmissionEnabled
DefenderSampleSubmissionOrigin
DefenderRtpEnabled
DefenderRtpOrigin
DefenderFolderGuardEnabled
DefenderFolderGuardOrigin
ThreatProtectionHealth
ThreatProtectionStatus
ThreatProtectionThirdPartyAvActive
ThreatProtectionAvProviders
AvProviderName
AvProviderRtpStatus
AvProviderSignatureStatus
AvProviderHealth
AvProviderStatus
NetworkProtectionHealth
NetworkProtectionStatus
NetworkProtectionDomainNetwork
NetworkProtectionPrivateNetwork
NetworkProtectionPublicNetwork
AppsAndBrowserHealth
AppsAndBrowserStatus
AppInstallRule
AppInstallRuleControlledByPolicy
BrowserSmartScreen
BrowserSmartScreenControlledByPolicy
AppsSmartScreen
AppsSmartScreenControlledByPolicy
HealthAdvisorHealth
HealthAdvisorStatus
StorageHealthEvalAssessmentHealth
StorageHealthEvalAssessmentStatus
PillarHealth_Green
PillarHealth_Yellow
PillarHealth_Red
PillarHealth_Grey
PillarStatusFlag_Common_Healthy
PillarStatusFlag_Defender_Unknown
PillarStatusFlag_Defender_Healthy
PillarStatusFlag_Defender_ServiceStopped
PillarStatusFlag_Defender_EngineUnavailable
PillarStatusFlag_Defender_ActiveThreats
PillarStatusFlag_Defender_RtpDisabled
PillarStatusFlag_Defender_FullScanRequired
PillarStatusFlag_Defender_RebootRequired
PillarStatusFlag_Defender_WdoRequired
PillarStatusFlag_Defender_AvSigsDue
PillarStatusFlag_Defender_AsSigsDue
PillarStatusFlag_Defender_QuickScanDue
PillarStatusFlag_Defender_FullScanDue
PillarStatusFlag_Defender_CloudProtectionDisabled
PillarStatusFlag_Defender_AutoSampleSubmissionDisabled
PillarStatusFlag_Defender_TamperProtectionDisabled
PillarStatusFlag_Defender_SModeSigsDue
PillarStatusFlag_Network_Unknown
PillarStatusFlag_Network_Healthy
PillarStatusFlag_Network_ServiceStopped
PillarStatusFlag_Network_NonSecureState
PillarStatusFlag_Network_ThirdPartyInstalled
PillarStatusFlag_Network_DomainFwOff
PillarStatusFlag_Network_PrivateFwOff
PillarStatusFlag_Network_PublicFwOff
PillarStatusFlag_Network_MultipleFwOff
PillarStatusFlag_HealthAdvisor_Unknown
PillarStatusFlag_HealthAdvisor_Healthy
PillarStatusFlag_HealthAdvisor_Warning
PillarStatusFlag_HealthAdvisor_Critical
PillarStatusFlag_HealthAdvisor_StorageDiskspaceLow
PillarStatusFlag_HealthAdvisor_StorageHealthOkWithIssues
PillarStatusFlag_HealthAdvisor_PristineShellContentPresent
PillarStatusFlag_HealthAdvisor_BatteryBrightnessAlert
PillarStatusFlag_HealthAdvisor_BatterySleepSettingsAlert
PillarStatusFlag_AppAndBrowser_Unknown
PillarStatusFlag_AppAndBrowser_Healthy
PillarStatusFlag_AppAndBrowser_EdgeSmartScreenOff
PillarStatusFlag_AppAndBrowser_AppRepSmartScreenOff
PillarStatusFlag_AppAndBrowser_StoreAppsSmartScreenOff
PillarStatusFlag_Threat_3rdP_NoAction
PillarStatusFlag_Threat_3rdP_Off
PillarStatusFlag_Threat_3rdP_Expired
PillarStatusFlag_Threat_3rdP_Snoozed
PillarStatusFlag_Threat_3rdP_ScanRecommended
PillarStatusFlag_Threat_3rdP_ScanNeeded
PillarStatusFlag_Threat_3rdP_SettingsRecommended
PillarStatusFlag_Threat_3rdP_SettingsNeeded
PillarStatusFlag_Threat_3rdP_UpdatesRecommended
PillarStatusFlag_Threat_3rdP_UpdatesNeeded
PillarStatusFlag_Threat_3rdP_ScanUpdatesRecommended
PillarStatusFlag_Threat_3rdP_ScanSettingsRecommended
PillarStatusFlag_Threat_3rdP_SettingsUpdatesRecommended
PillarStatusFlag_Threat_3rdP_ScanSettingsUpdatesRecommended
PillarStatusFlag_Threat_3rdP_ScanUpdatesNeeded
PillarStatusFlag_Threat_3rdP_ScanSettingsNeeded
PillarStatusFlag_Threat_3rdP_SettingsUpdatesNeeded
PillarStatusFlag_Threat_3rdP_ScanSettingsUpdatesNeeded
PillarStatusFlag_Threat_3rdP_ScanUpdatesNeeded_SettingsRecommended
PillarStatusFlag_Threat_3rdP_ScanSettingsNeeded_UpdatesRecommended
PillarStatusFlag_Threat_3rdP_SettingsUpdatesNeeded_ScanRecommended
PillarStatusFlag_Threat_3rdP_ScanNeeded_SettingsRecommended
PillarStatusFlag_Threat_3rdP_ScanNeeded_UpdatesRecommended
PillarStatusFlag_Threat_3rdP_ScanNeeded_SettingsUpdatesRecommended
PillarStatusFlag_Threat_3rdP_SettingsNeeded_ScanRecommended
PillarStatusFlag_Threat_3rdP_SettingsNeeded_UpdatesRecommended
PillarStatusFlag_Threat_3rdP_SettingsNeeded_ScanUpdatesRecommended
PillarStatusFlag_Threat_3rdP_UpdatesNeeded_ScanRecommended
PillarStatusFlag_Threat_3rdP_UpdatesNeeded_SettingsRecommended
PillarStatusFlag_Threat_3rdP_UpdatesNeeded_ScanSettingsRecommended
PillarStatusFlag_Common_ThirdParty_UnknownStatus
PillarStatusFlag_Threat_3rdP_L1_NoAction
PillarStatusFlag_Threat_3rdP_L1_SingleActionRecommended
PillarStatusFlag_Threat_3rdP_L1_SingleActionNeeded
PillarStatusFlag_Threat_3rdP_L1_MultipleActionRecommended
PillarStatusFlag_Threat_3rdP_L1_MultipleActionNeeded
PillarStatusFlag_Network_3rdP_NoAction
PillarStatusFlag_Network_3rdP_Off
PillarStatusFlag_Network_3rdP_Expired
PillarStatusFlag_Network_3rdP_Snoozed
PillarStatusFlag_Network_3rdP_ActionRecommended
PillarStatusFlag_Network_3rdP_ActionNeeded
PillarStatusFlag_Network_3rdP_L2L1_NoAction
PillarStatusFlag_Network_3rdP_L2L1_ActionRecommended
PillarStatusFlag_Network_3rdP_L2L1_ActionNeeded
PillarStatusFlag_Network_3rdP_L2L1_MultipleActionRecommended
PillarStatusFlag_Network_3rdP_L2L1_MultipleActionNeeded
PillarStatusFlag_Common_Unknown
Snoozed
Expired
Unknown
OutOfDate
UpToDate
Normal
Passive
SideBySidePassive
NotRunning
AuditMode
Default
Preferences
Policy
NotSupported
Block
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcprotectionstatehelper.cpp
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), pProtectionState.GetAddressOf()))
CHR(GetProtectionPillarStatus(pDashboard.Get(), Pillars_ThreatProtection, pProtectionState.Get()))
CHR(GetProtectionPillarStatus(pDashboard.Get(), Pillars_Defender, pProtectionState.Get()))
CHR(GetProtectionPillarStatus(pDashboard.Get(), Pillars_NetworkProtection, pProtectionState.Get()))
CHR(GetProtectionPillarStatus(pDashboard.Get(), Pillars_AppAndBrowserProtection, pProtectionState.Get()))
CHR(GetProtectionPillarStatus(pDashboard.Get(), Pillars_HealthAdvisor, pProtectionState.Get()))
CHR(GetThreatProtectionValues(pProtectionState.Get()))
CHR(GetDefenderValues(pProtectionState.Get()))
CHR(GetNetworkProtectionValues(pProtectionState.Get()))
CHR(GetAppAndBrowserValues(pProtectionState.Get()))
CHR(GetHealthAdvisorValues(pProtectionState.Get()))
CHR(pProtectionState.As(&pProtectionStateAsValue))
CPR(ppwszJsonHealth)
CPR(ppwszJsonStatus)
CHR(GetProtectionPillarFieldNames(ePillar, &pwszJsonHealth, &pwszJsonStatus))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszHealthAsString).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pProtectionState->SetNamedValue(HStringReference(pwszJsonHealth).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszStatusAsString).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pProtectionState->SetNamedValue(HStringReference(pwszJsonStatus).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszProviderName).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_AV_PROVIDER_NAME).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszRtpStatus).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_AV_PROVIDER_RTP_STATUS).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszSignatureStatus).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_AV_PROVIDER_SIGNATURE_STATUS).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszHealth).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_AV_PROVIDER_HEALTH).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszStatus).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_AV_PROVIDER_STATUS).Get(), pJsonValue.Get()))
CPR(pProtectionState)
CHR(GetAvProviderValues(&pProducts->pList[i], pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszThirdPartyAvActive).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_THIRD_PARTY_AV_ACTIVE).Get(), pJsonValue.Get()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_THREAT_PROTECTION_AV_PROVIDERS).Get(), pJsonArrayAsValue.Get()))
EnableControlledFolderAccess
Windows Defender Exploit Guard\Controlled Folder Access
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszDefenderRunning).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_DEFENDER_RUNNING).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszDefenderCloudBasedProtectionStatus).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_DEFENDER_CLOUD_BASED_PROTECTION_STATUS).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszDefenderCloudBasedProtectionOrigin).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_DEFENDER_CLOUD_BASED_PROTECTION_ORIGIN).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszDefenderSampleSubmissionEnabled).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_DEFENDER_SAMPLE_SUBMISSION_ENABLED).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszDefenderSampleSubmissionOrigin).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_DEFENDER_SAMPLE_SUBMISSION_ORIGIN).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszDefenderRtpEnabled).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_DEFENDER_RTP_ENABLED).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszDefenderRtpOrigin).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_DEFENDER_RTP_ORIGIN).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszFolderGuardEnabled).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_DEFENDER_FOLDER_GUARD_ENABLED).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszFolderGuardOrigin).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_DEFENDER_FOLDER_GUARD_ORIGIN).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(ppwszStatus[i]).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pProtectionState->SetNamedValue(HStringReference(ppwszJsonFields[i]).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszAppInstallRule).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_APP_INSTALL_RULE).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszAppInstallRuleControlledByPolicy).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_APP_INSTALL_RULE_CONTROLLED_BY_POLICY).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszBrowserSmartScreen).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_BROWSER_SMART_SCREEN_).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszBrowserSmartScreenControlledByPolicy).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_BROWSER_SMART_SCREEN_CONTROLLED_BY_POLICY).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszAppsSmartScreen).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_APPS_SMART_SCREEN_).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszAppsSmartScreenControlledByPolicy).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_APPS_SMART_SCREEN_CONTROLLED_BY_POLICY).Get(), pJsonValue.Get()))
CHR(GetAssessmentFieldNames(eAssessment, &pwszJsonHealth, &pwszJsonStatus))
CHR(pJsonValueStatics->CreateNumberValue(pAssessmentStatus[i].uiStatusCode, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszAssessmentHealth).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pProtectionState->SetNamedValue(HStringReference(pwszJsonStatus).Get(), pJsonArrayAsValue.Get()))
CHR(GetAssessmentValues(eAssessments[i], pHealthAdvisorShield.Get(), pProtectionState))
CPR(ppObj)
CBR(*ppObj == nullptr)
CHR(CoCreateInstance(rclsid, nullptr, CLSCTX_LOCAL_SERVER, riid, (LPVOID*)pObj.GetAddressOf()))
CHR(CoSetProxyBlanket( pObj.Get(), 0xFFFFFFFFL, 0xffffffff, ( ( OLECHAR * )( INT_PTR )-1 ), 0, 3, nullptr, EOAC_STATIC_CLOAKING))
StorageDrivesInfo
VolumeIdentifier
StorageType
DriveLetter
DriveName
StorageFree
Capacity
BitLockerVolumeState
EncryptionCapable
BitLockerKeyId
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcdriveshelper.cpp
CHR(GetDrivesInfo(vVolumeInfo))
CHR(pVolInfo->Format(pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_STORAGE_DRIVE_INFO).Get(), pJsonArrayAsValue.Get()))
CHR(StringFromCLSID(this->StorageId, &pocGuidStorageId))
CHR(StringFromCLSID(this->BitLockerKeyId, &pocGuidBlKeyId))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pocGuidStorageId).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_STORAGE_ID).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateNumberValue(this->Store, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_STORAGE_TYPE).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateNumberValue(this->DeviceInstance, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_STORAGE_DEVICE_INSTANCE).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(this->Name).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_STORAGE_DEVICE_NAME).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(to_wstring(this->FreeSpace).c_str()).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_STORAGE_FREE_SPACE).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(to_wstring(this->TotalSize).c_str()).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_STORAGE_TOTAL_SPACE).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pocGuidBlKeyId).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_STORAGE_BL_KEYID).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateNumberValue(static_cast<double>(this->BitLockerState), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_STORAGE_BL_STATE).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateBooleanValue(!!(this->BitLockerCapable), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_STORAGE_BL_CAPABLE).Get(), pJsonValue.Get()))
CBR(!!IsOpenStorageTypeSearchPresent())
CHR(OpenStorageTypeSearch(&phContext))
fveapi.dll
FveOpenVolumeW
FveCloseVolume
FveIsVolumeEncryptable
FveGetStatusW
FveGetAuthMethodInformation
CBR(GetVolumeNameForVolumeMountPointW(pathName, volumeName, sizeof(*__countof_helper(volumeName))))
CBR(hr == HRESULT_FROM_WIN32(122L))
CBR(authInfo != nullptr)
SOFTWARE\Microsoft\Zune\Settings
CurrentMOID
SimSlotNumber
PhoneNumber
BillingMobileOperatorId
HomeOperatorMcc
HomeOperatorMnc
HomeOperatorSid
HomeOperatorNid
HomeOperatorMcc2
HomeOperatorMnc2
HomeOperatorSid2
HomeOperatorNid2
CdmaExists
GsmExists
Iccid
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcmobilenetworkshelper.cpp
CBR(*ppJsonValue == 0)
CHR(GetSimCount(&eSimCount))
CBR(dwCan == 0 || dwCan == 1)
CHR(QueryWnfState(dwCan == 0 ? &WNF_CELL_CONFIGURED_LINES_CAN0 : &WNF_CELL_CONFIGURED_LINES_CAN1, (PVOID)&canConfiguration, &dwSize))
CHR(CreateMobileNetworkPropertiesForCanJsonValue( &canConfiguration, pDeviceInfo, pPhoneNumber, pHomeOperatorInfo, pRilSystemType, pwszBillingOperatorId, ppJsonValue))
CPR(pCanConfiguration)
CHR(pJsonValueStatics->CreateNumberValue(pCanConfiguration->dwSlotAffinity, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_SIM_SLOT_NUMBER).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(wszIccid).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_ICCID).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pDeviceInfo->wszSerialNumber3gpp).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_IMEI).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pDeviceInfo->wszSerialNumber3gpp2).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_MEID).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pPhoneNumber->wszNumber).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_PHONE_NUMBER).Get(), pJsonValue.Get()))
CBR(pHomeOperatorInfo->cHomeOperator <= 2)
CHR(FormatNetworkCode(&pHomeOperatorInfo->stHomeOperator[0], 1, pJsonObject.Get()))
CHR(FormatNetworkCode(&pHomeOperatorInfo->stHomeOperator[1], 2, pJsonObject.Get()))
CHR(FormatNetworkCode(0, 2, pJsonObject.Get()))
CHR(FormatNetworkCode(0, 1, pJsonObject.Get()))
CHR(pJsonValueStatics->CreateBooleanValue((boolean)(*pRilSystemType & RIL_SYSTEMTYPE_CDMA), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_CDMA_EXISTS).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateBooleanValue((boolean)(*pRilSystemType & RIL_SYSTEMTYPE_3GPP), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_GSM_EXISTS).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszBillingOperatorId).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_BILLING_OPERATOR_ID).Get(), pJsonValue.Get()))
CPR(pJsonObject)
CBR(dwNetworkNumber == 1 || dwNetworkNumber == 2)
CHR(pJsonObject->SetNamedValue(HStringReference(dwNetworkNumber == 1 ? JSON_HOME_OPERATOR_MCC : JSON_HOME_OPERATOR_MCC_2).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(dwNetworkNumber == 1 ? JSON_HOME_OPERATOR_MNC : JSON_HOME_OPERATOR_MNC_2).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(dwNetworkNumber == 1 ? JSON_HOME_OPERATOR_SID : JSON_HOME_OPERATOR_SID_2).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(dwNetworkNumber == 1 ? JSON_HOME_OPERATOR_NID : JSON_HOME_OPERATOR_NID_2).Get(), pJsonValue.Get()))
CHR(pJsonValueStatics->CreateNumberValue(pRilNetworkCode->dwMCC, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(pRilNetworkCode->dwMNC, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(pRilNetworkCode->dwSID, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(pRilNetworkCode->dwNID, pJsonValue.ReleaseAndGetAddressOf()))
CPR(peSimCount)
onecoreuap\private\base\inc\CreateWpnSystemPlatform.h
MICROSOFT.WINDOWSPHONECCPSERVICE_8WEKYB3D8BBWE
7bf7f519-2c1b-439d-b296-0878bd5c4991
DeviceDirectoryClient
Software\Microsoft\MdmCommon\SettingValues
CHR(HRESULT_FROM_WIN32(GetPersistedRegistryLocationW( wszMdmCommonPersistedKeyId, wszMdmCommonSettingsKey, pwszPath, *pcchPath, pcchPath)))
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcwnslistener.cpp
CPR(pfChannelRenewed)
CPR(pftExpiration)
CHR(GetMdmCommonSettingValuesPersistedLocation(wszMdmSettingsKey, &cchMdmSettingsKey))
CHR(RegisterChannel(&ftExpiration, pwszChannelUri, pcchChannelUri))
CHR(DdcRegistry::SetByteValue( (( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), wszMdmSettingsKey, REGISTRY_VALUE_CHANNEL_URL_EXPIRATION, (BYTE *)&ftExpiration, (DWORD)sizeof(FILETIMEEX)))
CHR(RegisterApplication())
CHR(RegisterWnsChannel(pftExpiration, pwszChannelUri, pcchChannelUri))
CHR(GetSystemOrDefaultWpnPlatform(&spWpnPlatform))
CHR(spWpnPlatform->CreateAppEndpoint(spAppEndpoint.GetAddressOf()))
CHR(spWpnPlatform->CreateRegistrationEndpoint(spWpnRegistrationEndpoint.GetAddressOf()))
CHR(spWpnRegistrationEndpoint.As(&spWpnRegistrationSystemEndpoint))
CHR(spWpnRegistrationSystemEndpoint->RegisterSystemApplication( wszPfn, wszAppId, CAPABLE_INTERNET | CAPABLE_CLOUD, sizeof(WNS_COMMAND_WNF_STATE), (PBYTE)(&(WNS_COMMAND_WNF_STATE.Data))))
CPR(pwszChannelUri)
CPR(pcchChannelUri)
CBR(*pcchChannelUri == 2048)
CHR(GetActivationFactory( HStringReference(RuntimeClass_Windows_Networking_PushNotifications_PushNotificationChannelManager).Get(), spChannelManagerStatics.GetAddressOf()))
CHR(spChannelManagerStatics->CreatePushNotificationChannelForApplicationAsyncWithId( HStringReference(wszAppId).Get(), spChannelOperation.GetAddressOf()))
CHR(BlockOnCompletionAndGetResults<IAsyncOperationCompletedHandler<PushNotificationChannel*>>( spChannelOperation.Get(), spChannel.GetAddressOf()))
CHR(spChannel->get_Uri(hstrUri.GetAddressOf()))
CHR(spChannel->get_ExpirationTime(&expiryDateTime))
CBR(wcscpy_s(pwszChannelUri, 2048, WindowsGetStringRawBuffer(hstrUri.Get(), nullptr)) == 0)
ChannelUrlExpiration
MBI_SSL
https://login.windows.local
consumers
CPR(pwstrToken)
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcmsahelper.cpp
CHR(MdmGetServiceTarget(&pwszServiceTarget))
CHR(ActivateInstance( HStringReference(RuntimeClass_Windows_Internal_Security_WebAuthentication_AuthenticationManager).Get(), pManager.GetAddressOf()))
CHR(GetActivationFactory( HStringReference(RuntimeClass_Windows_Security_Authentication_OnlineId_OnlineIdServiceTicketRequest).Get(), pRequestFactory.GetAddressOf()))
CHR(pRequestFactory->CreateOnlineIdServiceTicketRequest( HStringReference(pwszServiceTarget).Get(), HStringReference(LIVE_ID_SERVICE_POLICY).Get(), pRequest.GetAddressOf()))
CHR(pManager->put_ApplicationId(g_ApplicationId))
CHR(pManager->AuthenticateUserHostAsync(pRequest.Get(), pOperation.GetAddressOf()))
CHR(BlockOnCompletionAndGetResults(pOperation.Get(), pIdentity.GetAddressOf()))
CHR(pIdentity->get_Tickets(&pTickets))
CHR(pTickets->GetAt(0, &pTicket))
CHR(pTicket->get_Value(hstrTicket.GetAddressOf()))
CHR(GetActivationFactory( HStringReference(RuntimeClass_Windows_Security_Authentication_Web_Core_WebAuthenticationCoreManager).Get(), pWebdAuthenticator.GetAddressOf()))
CHR(pWebdAuthenticator->FindAccountProviderAsync( HStringReference(DEFAULT_PROVIDER_ID).Get(), pFindProviderOperation.GetAddressOf()))
CHR(BlockOnCompletionAndGetResults(pFindProviderOperation.Get(), pProvider.GetAddressOf()))
CHR(HRESULT_FROM_WIN32(1317L))
CHR(pProvider.As(&pProvider2))
CHR(pProvider2->get_Authority(providerAuthority.GetAddressOf()))
CHR(GetActivationFactory( HStringReference(RuntimeClass_Windows_Security_Authentication_Web_Core_WebTokenRequest).Get(), pWebTokenRequestFactory.GetAddressOf()))
CHR(CreateScope(pwszServiceTarget, LIVE_ID_SERVICE_POLICY, strScopeRequested))
CHR(StringFromCLSID(g_ApplicationId, &strAppId))
CHR(pWebTokenRequestFactory->Create( pProvider.Get(), HStringReference(strScopeRequested.c_str()).Get(), HStringReference(strAppId).Get(), tokenRequest.GetAddressOf()))
CHR(pWebdAuthenticator->GetTokenSilentlyAsync(tokenRequest.Get(), &pTokenRequestOperation))
CHR(BlockOnCompletionAndGetResults(pTokenRequestOperation.Get(), &pWebTokenRequestResult))
CBR(pWebTokenRequestResult.Get() != 0)
CHR(pWebTokenRequestResult->get_ResponseStatus(&responseStatus))
CBR(responseStatus == WebTokenRequestStatus_Success)
CHR(pWebTokenRequestResult->get_ResponseData(&pTokenRequestResponses))
CHR(pTokenRequestResponses->GetAt(0, &pTokenRequestResponse))
CHR(pTokenRequestResponse->get_Token(ustrToken.GetAddressOf()))
service::
Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager
Windows.Security.Authentication.Web.Core.WebTokenRequest
Windows.Internal.Security.WebAuthentication.AuthenticationManager
Windows.Security.Authentication.OnlineId.OnlineIdServiceTicketRequest
DefaultBrowser
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), pUserInfo.GetAddressOf()))
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcuserinfohelper.cpp
CHR(pJsonValueStatics->CreateStringValue(HStringReference(browser.get()).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pUserInfo->SetNamedValue(HStringReference(JSON_DEFAULT_BROWSER).Get(), pJsonValue.Get()))
CHR(pUserInfo.As(&pUserInfoAsValue))
OCPR(pfAvailable)
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcupdatehelper.cpp
IsInstalled=0 and Type='Software' and IsHidden=0 and IsAssigned=1 and CategoryIDs contains 'e6cf1350-c01b-414d-a61f-263d14d133b4'
CHR(CoCreateInstance(__uuidof(UpdateSession), nullptr, CLSCTX_INPROC_SERVER, __uuidof(IUpdateSession), (void**)&pUpdateSession))
CHR(pUpdateSession->CreateUpdateSearcher(&pUpdateSearcher))
CHR(pUpdateSearcher->put_Online(((VARIANT_BOOL)0)))
CHR(pUpdateSearcher->Search(SelectionFilter.get(), &pSearchResult))
CHR(pSearchResult->get_Updates(&pUpdates))
CHR(pUpdates->get_Count(&lCountOfUpdates))
CPR(pftLastUpdateCheckedTime)
CHR(CoCreateInstance(__uuidof(UpdateSessionOrchestrator), nullptr, CLSCTX_LOCAL_SERVER, __uuidof(**(&pOrchestrator)), IID_PPV_ARGS_Helper(&pOrchestrator)))
CHR(pOrchestrator->CreateUpdateSession(UpdateSessionTypeOTAOS, __uuidof(**(&pSession)), IID_PPV_ARGS_Helper(&pSession)))
CHR(pSession->get_LastUpdateCheckTime(&ftLastUpdateCheckTime))
TraceDeviceUnlockedEventResult
PrefixParsed
ContextParsed
RequestId
FmdDisabledByPolicy
HttpStatus
HRESULT
TraceUpdateStatusRetryResult
PrefixParsed
ContextParsed
RequestId
Retries
CommandTooOld
FmdDisabledByPolicy
HttpStatus
HRESULT
TraceCommandResult
PdcClientActivated
RequestId
CommandType
CommandChannelType
CommandResult
HttpStatus
HRESULT
TraceLocateCommandRetryResult
PrefixParsed
RequestId
Retries
CommandTooOld
FmdDisabledByPolicy
HRESULT
TraceLocateCommandResult
PdcClientActivated
RequestId
CommandChannelType
DeviceLocationEnabled
LocationSyncEnabled
EnableMasterLocation
MasterLocationEnabledByClient
Retries
QuickFixResult
FirstUpdateStatusResult
FirstUpdateStatusHttpResult
AccurateFixResult
SecondUpdateStatusResult
SecondUpdateStatusHttpResult
HRESULT
TraceHandleCommandResult
PrefixParsed
RequestId
CommandId
CommandChannelType
HRESULT
TraceHandleSmsCommandResult
CurrentSecretId
UpdatingSecretId
ProfileId
RequestId
HRESULT
TraceHandleWnsCommandResult
ProfileId
RequestId
HRESULT
TraceRegisterUserDeviceResult
TaskStopped
PdcClientActivated
Trigger
UserDeviceRegistered
MsaStatus
TicketObtained
NoPrimaryMsa
FmdDisabledByPolicy
HRESULT
HttpStatus
TraceRegisterDeviceResult
TaskStopped
PdcClientActivated
Trigger
AnotherInstanceRunning
AdminsCount
DeviceOwnersCount
StandardUsersCount
LastAccountRemoved
NotOnFreeNetwork
FmdDisabledByPolicy
HRESULT
HttpStatus
Microsoft.Windows.DeviceDirectoryClient
DeviceDirectoryClient.pdb
.text
.text$di
.text$mn
.text$mn$00
.text$x
.text$yd
.rdata$brc
.idata$5
.00cfg
.CRT$XCA
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIC
.CRT$XIZ
.CRT$XPA
.CRT$XPZ
.CRT$XTA
.CRT$XTZ
.gehcont
.gfids
.giats
.rdata
.rdata$r
.rdata$voltmd
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zzzdbg
.rtc$IAA
.rtc$IZZ
.rtc$TAA
.rtc$TZZ
.xdata
.xdata$x
.didat$2
.didat$3
.didat$4
.didat$6
.didat$7
.edata
.idata$2
.idata$3
.idata$4
.idata$6
.data$brc
.data$r$brc
.data$rs$brc
.data
.pdata
.didat$5
.rsrc$01
.rsrc$02
 P"P$P&4
N N"(
  "/(
&N(j*v,N.B
OpenStorageTypeSearch
GetStorageInstanceCount
GetStorageDeviceInfo
SelectStorageVolumeEx
CloseFindStorageSearch
PolicyManager_GetPolicyInt
UMgrQueryDefaultAccountToken
UMgrQueryUserContext
CoCreateInstance
CoTaskMemFree
CoCreateFreeThreadedMarshaler
CoSetProxyBlanket
CoWaitForMultipleHandles
StringFromCLSID
DeviceDirectoryClient.dll
DllCanUnloadNow
DllGetClassObject
DllRegisterServer
DllUnregisterServer
?_Xlength_error@std@@YAXPEBD@Z
msvcp_win.dll
_initterm
_initterm_e
api-ms-win-crt-runtime-l1-1-0.dll
__CxxFrameHandler4
__std_terminate
_o___std_exception_copy
_o___std_exception_destroy
_o___std_type_info_destroy_list
_o___stdio_common_vsnprintf_s
_o___stdio_common_vswprintf
_o___stdio_common_vswscanf
_o__callnewh
_o__cexit
_o__configure_narrow_argv
_o__crt_atexit
_o__errno
_o__execute_onexit_table
_o__initialize_narrow_environment
_o__initialize_onexit_table
_o__invalid_parameter_noinfo
_o__invalid_parameter_noinfo_noreturn
_o__purecall
_o__register_onexit_function
_o__seh_filter_dll
_o__wcsdup
_o_free
_o_malloc
_o_wcscpy_s
__C_specific_handler
memset
_CxxThrowException
api-ms-win-crt-private-l1-1-0.dll
api-ms-win-crt-string-l1-1-0.dll
GetModuleHandleExW
EventUnregister
WaitForSingleObject
FreeLibraryAndExitThread
ResumeThread
Sleep
EventSetInformation
GetLastError
RoUninitialize
DisableThreadLibraryCalls
CloseHandle
CreateThread
EventRegister
EventWriteTransfer
FreeLibrary
DebugBreak
RoInitialize
IsDebuggerPresent
QueryPerformanceCounter
GetCurrentProcessId
GetCurrentThreadId
GetSystemTimeAsFileTime
InitializeSListHead
RtlCaptureContext
RtlLookupFunctionEntry
RtlVirtualUnwind
UnhandledExceptionFilter
SetUnhandledExceptionFilter
IsProcessorFeaturePresent
GetModuleHandleW
GetCurrentProcess
TerminateProcess
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-eventing-provider-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-winrt-l1-1-0.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-interlocked-l1-1-0.dll
api-ms-win-core-rtlsupport-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
Pdcv2ActivationClientRegister
Pdcv2ActivationClientDeactivate
Pdcv2ActivationClientUnregister
UMPDC.dll
GetPersistedRegistryLocationW
api-ms-win-stateseparation-helpers-l1-1-0.dll
combase.dll
wcsncmp
__CxxFrameHandler3
RtlPublishWnfStateData
NtQueryWnfStateData
ReleaseMutex
RtlNtStatusToDosError
FormatMessageW
HeapAlloc
GetProcessHeap
HeapFree
GetModuleFileNameA
GetProcAddress
CompareFileTime
CreateMutexW
RaiseException
WindowsDeleteString
WindowsGetStringRawBuffer
WindowsCreateStringReference
LoadStringW
RoGetActivationFactory
GetLocalTime
FileTimeToLocalFileTime
FileTimeToSystemTime
OutputDebugStringW
SetLastError
SetEvent
ReleaseSemaphore
WaitForSingleObjectEx
OpenSemaphoreW
SHTaskPoolGetUniqueContext
SHTaskPoolQueueTask
RegOpenKeyExW
SHRegGetValueW
RegCloseKey
GlobalMemoryStatusEx
PowerDeterminePlatformRoleEx
RtlGetDeviceFamilyInfoEnum
GetPwrCapabilities
GetComputerNameExW
GetSystemPreferredUILanguages
LoadLibraryExW
GetVersionExW
GetProductInfo
SystemTimeToFileTime
CreateMutexExW
CreateSemaphoreExW
CreateEventExW
RoActivateInstance
LocalFree
RegQueryValueExW
RegCreateKeyExW
RegSetValueExW
LoadLibraryW
GetVolumeNameForVolumeMountPointW
RtlIsMultiUsersInSessionSku
WindowsCompareStringOrdinal
GetSystemFirmwareTable
MultiByteToWideChar
ApiSetQueryApiSetPresence
ResolveDelayLoadedAPI
DelayLoadFailureHook
ntdll.dll
api-ms-win-core-localization-l1-2-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-file-l1-1-0.dll
OLEAUT32.dll
api-ms-win-core-winrt-string-l1-1-0.dll
api-ms-win-core-timezone-l1-1-0.dll
api-ms-win-shcore-taskpool-l1-1-0.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-shcore-registry-l1-1-0.dll
api-ms-win-power-base-l1-1-0.dll
api-ms-win-shcore-sysinfo-l1-1-0.dll
api-ms-win-core-sysinfo-l1-2-0.dll
api-ms-win-core-heap-l2-1-0.dll
api-ms-win-core-libraryloader-l1-2-1.dll
api-ms-win-core-file-l1-2-0.dll
api-ms-win-core-string-l1-1-0.dll
api-ms-win-core-apiquery-l1-1-0.dll
api-ms-win-core-delayload-l1-1-1.dll
api-ms-win-core-delayload-l1-1-0.dll
Pdcv2ActivationClientActivate
MdmHandlePushNotification
MdmParseEncryptedRequest
MdmParseCommandData
MdmParseLockCommand
MdmParseLocateCommand
MdmConnectedAccountsChanged
MdmClearAllHashes
MdmProtectionStateChanged
MdmIsRegisteredWithService
MdmShouldRegisterDevice
MdmRegisterDevice
MdmRegisterUserDevice
MdmUpdateStatus
MdmGetLocation
MdmIsFindMyDeviceEnabled
MdmSetFindMyDevice
MdmEnumerateUsers
MdmUsersAuthorizedToSeeLocation
MdmGetServiceTarget
MdmCommon.DLL
memcpy
memmove
.?AVbad_alloc@std@@
.?AVexception@std@@
.?AVbad_array_new_length@std@@
.?AVResultException@wil@@
.?AV_com_error@@
.?AVtype_info@@
VS_VERSION_INFO
StringFileInfo
040904B0
CompanyName
Microsoft Corporation
FileDescription
DeviceDirectoryClient Task
FileVersion
10.0.22621.1 (WinBuild.160101.0800)
InternalName
DeviceDirectoryClient
LegalCopyright
 Microsoft Corporation. All rights reserved.
OriginalFilename
DeviceDirectoryClient.dll
ProductName
Microsoft
 Windows
 Operating System
ProductVersion
10.0.22621.1
VarFileInfo
Translation
en-US
