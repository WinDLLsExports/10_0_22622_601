!This program cannot be run in DOS mode.
.text
`.rsrc
@.reloc
-XrC&
Z.(+t
\.,+b
p*rAQ
p*r]U
z*Jr-i
!.>+c
z*Bss
lSystem.Resources.ResourceReader, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADPZ|
Cv}ZD 
aSF-X
LZ2+L
=5YX|
]PdvJ
O`f ;fg
AppService_Disabled
AppService_MultiplePaths
AppService_RequiredSSL=
AppService_UnknownProfilePropertyb
ApplicationServiceManager_Path
ArgumentMustBeCurrentUser
ArgumentMustBeNull
AsyncPostBackTrigger_CannotFindEvent
AsyncPostBackTrigger_EventName
AsyncPostBackTrigger_InvalidEvent
AttributeNotRecognized
Category_Sorting
ClientService_BadJsonResponse
Common_ArgumentInvalidType
Common_GreaterThanOrEqualToZero
Common_GreaterThanOrEqualToZeroAndLessThanOrEqualToOne
Common_NullOrEmpty
Common_PageCannotBeNull
Common_ScriptManagerRequired
CompositeScriptReference_Scripts
ConvertersCollection_NotJavaScriptConverter
ConvertersCollection_UnknownType
DataBoundControlHelper_NoNamingContainer
DataPagerField_Visible
DataPager_ControlIsntPageable
DataPager_Fields
DataPager_NoNamingContainer
DataPager_NoPageableItemContainer
DataPager_PagePropertiesCannotBeSet
DataPager_PageSize
DataPager_PageableItemContainerNotFound
DataPager_PagedControlID
DataPager_QueryStringField
DynamicControlBase_ConvertEmptyStringToNull
DynamicControlBase_DataField
DynamicControlBase_DataFormatString
DynamicControlBase_HtmlEncode
DynamicControlBase_NullDisplayText
DynamicControlBase_UIHint
DynamicControlBase_ValidationGroup
DynamicFilterRepeater_DynamicFilterContainerId
DynamicNavigatorDataSource_NoAccessibleTablesFound
DynamicNavigatorDataSource_NoModelsRegistered
DynamicNavigatorDataSource_NoTablesInModels
ExpressionParser_AmbiguousConstructorInvocation
ExpressionParser_AmbiguousIndexerInvocation
ExpressionParser_AmbiguousMethodInvocation
ExpressionParser_ArgsIncompatibleWithLambda
ExpressionParser_BothTypesConvertToOther
ExpressionParser_CannotConvertValue
ExpressionParser_CannotIndexMultipleDimensionalArray
ExpressionParser_CloseBracketOrCommaExpected
ExpressionParser_CloseParenOrCommaExpected
ExpressionParser_CloseParenOrOperatorExpected
ExpressionParser_ColonExpected
ExpressionParser_DigitExpected
ExpressionParser_DotOrOpenParenExpected
ExpressionParser_DuplicateIdentifier
ExpressionParser_ExpressionExpected
ExpressionParser_ExpressionTypeMismatch
ExpressionParser_FirstExprMustBeBool
ExpressionParser_IdentifierExpected
ExpressionParser_IifRequiresThreeArgs
ExpressionParser_IncompatibleOperand
ExpressionParser_IncompatibleOperands
ExpressionParser_InvalidCharacter
ExpressionParser_InvalidCharacterLiteral
ExpressionParser_InvalidIndex
ExpressionParser_InvalidIntegerLiteral
ExpressionParser_InvalidRealLiteral
ExpressionParser_MethodIsVoid
ExpressionParser_MethodsAreInaccessible
ExpressionParser_MissingAsClause
ExpressionParser_NeitherTypeConvertsToOther
ExpressionParser_NoApplicableAggregate
ExpressionParser_NoApplicableIndexer
ExpressionParser_NoApplicableMethod
ExpressionParser_NoItInScope
ExpressionParser_NoMatchingConstructor
ExpressionParser_OpenBracketExpected
ExpressionParser_OpenParenExpected
ExpressionParser_SyntaxError
ExpressionParser_TokenExpected
ExpressionParser_TypeHasNoNullableForm
ExpressionParser_UnknownIdentifier
ExpressionParser_UnknownPropertyOrField
ExpressionParser_UnterminatedStringLiteral
ExtenderControl_TargetControlDifferentUpdatePanel
ExtenderControl_TargetControlID
ExtenderControl_TargetControlIDEmpty
ExtenderControl_TargetControlIDInvalid
FilterRepeater_TableName
JSON_ArrayTypeNotSupported
JSON_BadEscape
JSON_CannotConvertObjectToType
JSON_CannotCreateListType
JSON_CircularReference
JSON_DepthLimitExceeded
JSON_DeserializerTypeMismatch
JSON_DictionaryTypeNotSupported
JSON_ExpectedOpenBrace
JSON_IllegalPrimitive
JSON_InvalidArrayEnd
JSON_InvalidArrayExpectComma
JSON_InvalidArrayExtraComma
JSON_InvalidArrayStart
JSON_InvalidEnumType
JSON_InvalidMaxJsonLength
JSON_InvalidMemberName
JSON_InvalidObject
JSON_InvalidRecursionLimit
JSON_MaxJsonLengthExceeded
JSON_NoConstructor
JSON_StringNotQuoted
JSON_UnterminatedString
JSON_ValueTypeCannotBeNull
LinqDataSourceValidationException_ValidationFailed
LinqDataSourceView_CannotConvertType
LinqDataSourceView_ContextTypeNameChanged
LinqDataSourceView_ContextTypeNameNotFound
LinqDataSourceView_ContextTypeNameNotSpecified
LinqDataSourceView_DeleteNotSupported
LinqDataSourceView_EnableObjectTrackingChanged
LinqDataSourceView_GroupByNotSupportedOnEdit
LinqDataSourceView_InsertNotSupported
LinqDataSourceView_InsertRequiresValues
LinqDataSourceView_InvalidContextType
LinqDataSourceView_InvalidOrderByFieldName
LinqDataSourceView_InvalidParameterName
LinqDataSourceView_InvalidTablePropertyType
LinqDataSourceView_OrderByAlreadySpecified
LinqDataSourceView_OrderGroupsByRequiresGroupBy
LinqDataSourceView_OriginalValuesNotFound
LinqDataSourceView_PagingNotHandled
LinqDataSourceView_ParametersMustBeNamed
LinqDataSourceView_SelectNewNotSupportedOnEdit
LinqDataSourceView_TableCannotBeStatic
LinqDataSourceView_TableNameChanged
LinqDataSourceView_TableNameNotFound
LinqDataSourceView_TableNameNotSpecified
LinqDataSourceView_UpdateNotSupported
LinqDataSourceView_ValidationFailed
LinqDataSourceView_WhereAlreadySpecified
LinqDataSource_AutoGenerateOrderByClause
LinqDataSource_AutoGenerateWhereClause
LinqDataSource_AutoPage
LinqDataSource_AutoSort
LinqDataSource_ContextCreated
LinqDataSource_ContextCreating
LinqDataSource_ContextDisposing
LinqDataSource_ContextTypeName
LinqDataSource_DeleteParameters
LinqDataSource_Deleted
LinqDataSource_Deleting
LinqDataSource_Description
LinqDataSource_DisplayName
LinqDataSource_EnableDelete
LinqDataSource_EnableInsert
LinqDataSource_EnableObjectTracking
LinqDataSource_EnableUpdate
LinqDataSource_GroupBy
LinqDataSource_GroupByParameters
LinqDataSource_InsertParameters
LinqDataSource_Inserted
LinqDataSource_Inserting
LinqDataSource_InvalidViewName
LinqDataSource_OrderBy
LinqDataSource_OrderByParameters
LinqDataSource_OrderGroupsBy
LinqDataSource_OrderGroupsByParameters
LinqDataSource_Select
LinqDataSource_SelectParameters
LinqDataSource_Selected
LinqDataSource_Selecting
LinqDataSource_StoreOriginalValuesInViewState
LinqDataSource_TableName
LinqDataSource_UpdateParameters
LinqDataSource_Updated
LinqDataSource_Updating
LinqDataSource_Where
LinqDataSource_WhereParameters
ListViewPagedDataSource_CannotGetCount
ListViewPagedDataSource_EnumeratorMoveNextNotCalled
ListView_AlternatingItemTemplate
ListView_ContainerNameMustNotBeEmpty
ListView_ConvertEmptyStringToNull
ListView_DataKeyNames
ListView_DataKeyNamesMustBeSpecified
ListView_DataKeys
ListView_DataSourceDoesntSupportPaging
ListView_DataSourceMustBeCollectionWhenNotDataBinding
ListView_EditIndex
ListView_EditItem
ListView_EditItemTemplate
ListView_EmptyDataTemplate
ListView_EmptyItemTemplate
ListView_EnableDataBoundControlManager
ListView_EnableModelValidation
ListView_GroupContainerID
ListView_GroupItemCount
ListView_GroupItemCountNoGroupTemplate
ListView_GroupSeparatorTemplate
ListView_GroupTemplate
ListView_InsertItem
ListView_InsertItemPosition
ListView_InsertItemTemplate
ListView_InsertTemplateRequired
ListView_InvalidCancel
ListView_InvalidDelete
ListView_InvalidEdit
ListView_InvalidInsert
ListView_InvalidSelect
ListView_InvalidUpdate
ListView_ItemPlaceholderID
ListView_ItemSeparatorTemplate
ListView_ItemTemplate
ListView_ItemTemplateRequired
ListView_Items
ListView_ItemsNotDataItems
ListView_LayoutTemplate
ListView_Missing_VirtualItemCount
ListView_NeedICollectionOrTotalRowCount
ListView_NoGroupPlaceholder
ListView_NoInsertItem
ListView_NoItemPlaceholder
ListView_NullView
ListView_OnItemCanceling
ListView_OnItemCommand
ListView_OnItemCreated
ListView_OnItemDataBound
ListView_OnItemDeleted
ListView_OnItemDeleting
ListView_OnItemEditing
ListView_OnItemInserted
ListView_OnItemInserting
ListView_OnItemUpdated
ListView_OnItemUpdating
ListView_OnLayoutCreated
ListView_OnPagePropertiesChanged
ListView_OnPagePropertiesChanging
ListView_OnSelectedIndexChanged
ListView_OnSelectedIndexChanging
ListView_OnSorted
ListView_OnSorting
ListView_SelectedIndex
ListView_SelectedItemTemplate
ListView_SortDirection
ListView_SortExpression
ListView_StyleNotSupported
ListView_StylePropertiesNotSupported
ListView_UnhandledEvent
NextPrevPagerField_DefaultFirstPageText
NextPrevPagerField_DefaultLastPageText
NextPrevPagerField_DefaultNextPageText
NextPrevPagerField_DefaultPreviousPageText
NextPreviousPagerField_ButtonCssClass
NextPreviousPagerField_ButtonType
NextPreviousPagerField_FirstPageImageUrl
NextPreviousPagerField_FirstPageText
NextPreviousPagerField_LastPageImageUrl
NextPreviousPagerField_LastPageText
NextPreviousPagerField_NextPageImageUrl
NextPreviousPagerField_NextPageText
NextPreviousPagerField_PreviousPageImageUrl
NextPreviousPagerField_PreviousPageText
NextPreviousPagerField_RenderDisabledButtonsAsLabels
NextPreviousPagerField_RenderNonBreakingSpacesBetweenControls
NextPreviousPagerField_ShowFirstPageButton
NextPreviousPagerField_ShowLastPageButton
NextPreviousPagerField_ShowNextPageButton
NextPreviousPagerField_ShowPreviousPageButton
NumericPagerField_ButtonCount
NumericPagerField_ButtonType
NumericPagerField_CurrentPageLabelCssClass
NumericPagerField_DefaultNextPageText
NumericPagerField_DefaultPreviousPageText
NumericPagerField_NextPageImageUrl
NumericPagerField_NextPageText
NumericPagerField_NextPreviousButtonCssClass
NumericPagerField_NumericButtonCssClass
NumericPagerField_PreviousPageImageUrl
NumericPagerField_PreviousPageText
NumericPagerField_RenderNonBreakingSpacesBetweenControls
PageRequestManager_RegisterDataItemInNonAsyncRequest
PageRequestManager_RegisterDataItemTwice
PagerFieldCollection_InvalidType
PagerFieldCollection_InvalidTypeIndex
ParseException_ParseExceptionFormat
ProfileServiceManager_LoadProperitesWithNonDefaultPath
ProfileServiceManager_LoadProperties
ProxyGenerator_UnsupportedType
ProxyHelper_BadStatusCode
RoleServiceManager_LoadRoles
RoleServiceManager_LoadRolesWithNonDefaultPath
RoleService_RoleProviderNotFound
RoleService_RolesFeatureNotEnabled
ScriptControlDescriptor_IDNotSettable
ScriptControlManager_ExtenderControlNotRegistered
ScriptControlManager_NoTargetControlTypes
ScriptControlManager_RegisterExtenderControlTooEarly
ScriptControlManager_RegisterExtenderControlTooLate
ScriptControlManager_RegisterScriptControlTooEarly
ScriptControlManager_RegisterScriptControlTooLate
ScriptControlManager_ScriptControlNotRegistered
ScriptControlManager_TargetControlTypeInvalid
ScriptManager_AllowCustomErrorsRedirect
ScriptManager_AsyncPostBackError
ScriptManager_AsyncPostBackErrorMessage
ScriptManager_AsyncPostBackNotInPartialRenderingMode
ScriptManager_AsyncPostBackTimeout
ScriptManager_AuthenticationService
ScriptManager_CannotAddHistoryPointOutsideOfAsyncPostBack
ScriptManager_CannotAddHistoryPointWithHistoryDisabled
ScriptManager_CannotChangeEnableHistory
ScriptManager_CannotChangeEnablePartialRendering
ScriptManager_CannotChangeEnableScriptGlobalization
ScriptManager_CannotChangeSupportsPartialRendering
ScriptManager_CannotRegisterBothPostBacks
ScriptManager_CannotRegisterScriptInMultipleCompositeReferences
ScriptManager_CannotSetSupportsPartialRenderingWhenDisabled
ScriptManager_ClientNavigateHandler
ScriptManager_CompositeScript
ScriptManager_EmptyPageUrl
ScriptManager_EnableHistory
ScriptManager_EnablePageMethods
ScriptManager_EnablePartialRendering
ScriptManager_EnableScriptGlobalization
ScriptManager_EnableScriptLocalization
ScriptManager_EnableSecureHistoryState
ScriptManager_FrameworkFailedToLoad
ScriptManager_InvalidControlRegistration
ScriptManager_LoadScriptsBeforeUI
ScriptManager_Navigate
ScriptManager_OnlyOneScriptManager
ScriptManager_PageUntitled
ScriptManager_ProfileService
ScriptManager_ResolveCompositeScriptReference
ScriptManager_ResolveScriptReference
ScriptManager_RoleService
ScriptManager_ScriptMode
ScriptManager_ScriptPath
ScriptManager_Scripts
ScriptManager_Services
ScriptManager_UpdatePanelNotRegistered
ScriptReference_Assembly
ScriptReference_AssemblyRequiresName
ScriptReference_IgnoreScriptPath
ScriptReference_InvalidReleaseScriptName
ScriptReference_InvalidReleaseScriptPath
ScriptReference_Name
ScriptReference_NameAndPathCannotBeEmpty
ScriptReference_NotifyScriptLoaded
ScriptReference_Path
ScriptReference_ResourceUICultures
ScriptReference_ScriptMode
ScriptRegistrationManager_ControlNotOnPage
ScriptRegistrationManager_InvalidChars
ScriptRegistrationManager_NoCloseTag
ScriptRegistrationManager_NoTags
ScriptResourceHandler_AssemblyNotFileBased
ScriptResourceHandler_DuplicateScriptResources
ScriptResourceHandler_InvalidRequest
ScriptResourceHandler_ResourceUrlLongerThan1024Characters
ScriptResourceHandler_TypeNameMismatch
ScriptResourceHandler_UnknownResource
ServiceReference_InlineScript
ServiceReference_Path
ServiceReference_PathCannotBeEmpty
ServiceUriNotFound
SqlHelper_SqlEverywhereNotInstalled
TemplatePagerField_OnPagerCommand
TemplatePagerField_PagerTemplate
TemplatePagerField_UnhandledEvent
Timer_IntervalMustBeGreaterThanZero
Timer_TimerEnable
Timer_TimerInterval
Timer_TimerTick
UnhandledExceptionEventLogMessage
UpdatePanelControlTrigger_ControlID
UpdatePanelControlTrigger_ControlNotFound
UpdatePanelControlTrigger_NoControlID
UpdatePanel_CannotModifyControlCollection
UpdatePanel_CannotSetContentTemplate
UpdatePanel_ChildrenAsTriggers
UpdatePanel_ChildrenTriggersAndUpdateAlways
UpdatePanel_RenderMode
UpdatePanel_SetPartialRenderingModeCalledOnce
UpdatePanel_Triggers
UpdatePanel_UpdateConditional
UpdatePanel_UpdateMode
UpdatePanel_UpdateTooLate
UpdateProgress_AssociatedUpdatePanelID
UpdateProgress_DisplayAfter
UpdateProgress_DisplayAfterInvalid
UpdateProgress_DynamicLayout
UpdateProgress_NoUpdatePanel
UpdateProgress_ProgressTemplate
UpdateProgress_TemplateRequired
UserIsNotAuthenticated
WebResourceUtil_AssemblyDoesNotContainDebugWebResource
WebResourceUtil_AssemblyDoesNotContainEmbeddedResource
WebResourceUtil_AssemblyDoesNotContainReleaseWebResource
WebService_Error
WebService_InvalidGenerateScriptType
WebService_InvalidInlineVirtualPath
WebService_InvalidVerbRequest
WebService_InvalidWebServiceCall
WebService_InvalidXmlReturnType
WebService_MissingArg
WebService_NoScriptServiceAttribute
WebService_NoWebServiceData
WebService_NoWebServiceDataInlineScript
WebService_RedirectError
WebService_UnknownWebMethod
{0} is disabled.
)Cannot specify more than one unique path.
#SSL is required for this operation.
Unknown profile property '{0}'.
&Specifies the path to the web service.
9Argument must be null, empty or same as the current user.
Argument must be null or empty.
eCould not find an event named '{0}' on associated control '{1}' for the trigger in UpdatePanel '{2}'.
The event that the trigger will hook up to determine whether to refresh the UpdatePanel. If the property is not set then the UpdatePanel will be refreshed only if the postback was initiated by the target control.
The '{0}' event on associated control '{1}' for the trigger in UpdatePanel '{2}' does not match the standard event handler signature.
?The following configuration attribute was not recognized: '{0}'
Sorting
(The server method returned invalid data.
Value must be of type '{0}'.
)Value must be greater than or equal to 0.
EValue must be greater than or equal to 0 and less than or equal to 1.
Value cannot be null or empty.
oPage cannot be null. Please ensure that this operation is being performed in the context of an ASP.NET request.
The control with ID '{0}' requires a ScriptManager on the page. The ScriptManager must appear before any controls that need it.
_A collection of script references that the CompositeScriptReference should include in the page.
7Type: '{0}' does not inherits from JavaScriptConverter.
Type: '{0}' cannot be found.
~The {0} control '{1}' does not have a naming container.  Ensure that the control is added to the page before calling DataBind.
(Whether the data pager field is visible.
8Control '{0}' does not implement IPageableItemContainer.
"The collection of DataPagerFields.
The DataPager control '{0}' does not have a naming container.  Ensure that the DataPager is added to the page before calling DataBind.
No IPageableItemContainer was found. Verify that either the DataPager is inside an IPageableItemContainer or PagedControlID is set to the control ID of an IPageableItemContainer.
OPage properties cannot be set because no IPageableItemContainer has been found.
?The number of records displayed in a page by the paged control.
'IPageableItemContainer '{0}' not found.
1The ID of the control this DataPager should page.
}The name of the query string field for the current page index. The pager will use the query string when this property is set.
JSpecifies whether the field value should be converted to a null reference.
KSpecifies the name of the data field to which the DynamicControl will bind.
1Specifies the display format for the field value.
ISpecifies whether the field value is HTML-encoded before it is displayed.
=Specifies the caption displayed when the field value is null.
CSpecifies the user control with which the field should be rendered.
eSpecifies the name of the validation group to which validation controls in the DynamicControl belong.
DThe ID of the DynamicFilter control that exists in the ItemTemplate.
eNo accessible tables found. Make sure scaffolds are enabled or custom templates exist for your model.
$No data models have been registered.
:There are no tables defined in the registered data models.
)Ambiguous invocation of '{0}' constructor
-Ambiguous invocation of indexer in type '{0}'
2Ambiguous invocation of method '{0}' in type '{1}'
1Argument list incompatible with lambda expression
6Both of the types '{0}' and '{1}' convert to the other
7A value of type '{0}' cannot be converted to type '{1}'
8Indexing of multiple-dimensional arrays is not supported
']' or ',' expected
')' or ',' expected
')' or operator expected
':' expected
Digit expected
'.' or '(' expected
/The identifier '{0}' was defined more than once
Expression expected
!Expression of type '{0}' expected
.The first expression must be of type 'Boolean'
Identifier expected
+The 'iif' function requires three arguments
3Operator '{0}' incompatible with operand type '{1}'
>Operator '{0}' incompatible with operand types '{1}' and '{2}'
Syntax error '{0}'
4Character literal must contain exactly one character
)Array index must be an integer expression
Invalid integer literal '{0}'
Invalid real literal '{0}'
2Method '{0}' in type '{1}' does not return a value
(Methods on type '{0}' are not accessible
$Expression is missing an 'as' clause
:Neither of the types '{0}' and '{1}' converts to the other
+No applicable aggregate method '{0}' exists
*No applicable indexer exists in type '{0}'
/No applicable method '{0}' exists in type '{1}'
No 'it' is in scope
%No matching constructor in type '{0}'
'[' expected
'(' expected
Syntax error
{0} expected
Type '{0}' has no nullable form
Unknown identifier '{0}'
/No property or field '{0}' exists in type '{1}'
Unterminated string literal
LAn extender can't be in a different UpdatePanel than the control it extends.
!Identifies the control to extend.
MThe TargetControlID of '{0}' is not valid. The value cannot be null or empty.
VThe TargetControlID of '{0}' is not valid. A control with ID '{1}' could not be found.
xSpecifies an override for the table name used by the FilterRepeater. By default the table is inferred from the page URL.
<Type '{0}' is not supported for deserialization of an array.
Unrecognized escape sequence.
1Cannot convert object of type '{0}' to type '{1}'
Cannot create instance of {0}.
LA circular reference was detected while serializing an object of type '{0}'.
RecursionLimit exceeded.
3Cannot deserialize object graph into type of '{0}'.
oType '{0}' is not supported for serialization/deserialization of a dictionary, keys must be strings or objects.
'Invalid object passed in, '{' expected.
Invalid JSON primitive: {0}.
&Invalid array passed in, ']' expected.
&Invalid array passed in, ',' expected.
,Invalid array passed in, extra trailing ','.
&Invalid array passed in, '[' expected.
Enums based on System.Int64 or System.UInt64 are not JSON-serializable because JavaScript does not support the necessary precision.
!Value must be a positive integer.
/Invalid object passed in, member name expected.
.Invalid object passed in, ':' or '}' expected.
*RecursionLimit must be a positive integer.
Error during serialization or deserialization using the JSON JavaScriptSerializer. The length of the string exceeds the value set on the maxJsonLength property.
7No parameterless constructor defined for type of '{0}'.
(Invalid string passed in, '\"' expected.
Unterminated string passed in.
$Cannot convert null to a value type.
Failed to set one or more properties on the data object.  Ensure that the input values are valid and can be converted to the corresponding property types.
<Cannot convert value of parameter '{0}' from '{1}' to '{2}'.
oThe ContextTypeName property of LinqDataSource '{0}' cannot be changed after the data context has been created.
ZCould not find the type specified in the ContextTypeName property of LinqDataSource '{0}'.
VThe ContextTypeName property of LinqDataSource '{0}' must specify a data context type.
WLinqDataSource '{0}' does not support the Delete operation unless EnableDelete is true.
tThe EnableObjectTracking property of LinqDataSource '{0}' cannot be changed after the data context has been created.
tLinqDataSource '{0}' does not support the GroupBy property when the Delete, Insert or Update operations are enabled.
WLinqDataSource '{0}' does not support the Insert operation unless EnableInsert is true.
aLinqDataSource '{0}' has no values to insert. Check that the 'values' dictionary contains values.
The data context used by LinqDataSource '{0}' must extend DataContext when the Delete, Insert or Update operations are enabled.
FThe value '{0}' for parameter '{1}' is not a valid OrderBy field name.
TThe name for parameter '{0}' on LinqDataSource '{1}' is not a valid identifier name.
~The table property used by LinqDataSource '{0}' must extend Table<T> when the Delete, Insert or Update operations are enabled.
bLinqDataSource '{0}' does not support the OrderBy property when AutoGenerateOrderByClause is true.
mLinqDataSource '{0}' does not support the OrderGroupsBy property when the GroupsBy property has not been set.
Could not find a row that matches the given keys in the original values stored in ViewState.  Ensure that the 'keys' dictionary contains unique key values that correspond to a row returned from the previous Select operation.
AutoPage is disabled on LinqDataSource {0} but paging has not been handled.  Ensure you have set the LinqDataSourceSelectArguments.Arguments.TotalRowCount property to the total number of rows.
\Parameters for LinqDataSource '{0}' that are not used for AutoGenerateOrderBy must be named.
sLinqDataSource '{0}' does not support the Select property when the Delete, Insert or Update operations are enabled.
Member '{0}' on the data context type '{1}' of LinqDataSource '{2}' is not a valid table. For Insert, Update and Delete the table must not be a static member.
iThe TableName property of LinqDataSource '{0}' cannot be changed after the data context has been created.
gCould not find a property or field called '{0}' on the data context type '{1}' of LinqDataSource '{2}'.
oThe TableName property of LinqDataSource '{0}' must specify a table property or field on the data context type.
WLinqDataSource '{0}' does not support the Update operation unless EnableUpdate is true.
6Failed to set one or more properties on type {0}.  {1}
^LinqDataSource '{0}' does not support the Where property when AutoGenerateWhereClause is true.
ZSpecifies whether to automatically generate the OrderBy clause from the OrderByParameters.
VSpecifies whether to automatically generate the Where clause from the WhereParameters.
.Specifies whether data is automatically paged.
/Specifies whether data is automatically sorted.
hEvent raised after the context is created unless a query result is specified during the Selecting event.
iEvent raised before the context is created unless a query result is specified during the Selecting event.
,Event raised before the context is disposed.
7The data context type that contains the table property.
Collection of parameters used during the Delete operation. These parameters are merged with the parameters provided by data-bound controls.
5Event raised after the Delete operation is completed.
5Event raised before the Delete operation is executed.
dUse LINQ to connect to a DataContext or object in the Bin or App_Code directory for the application.
2Specifies whether the Delete operation is enabled.
2Specifies whether the Insert operation is enabled.
[Specifies whether ObjectTracking should be disabled on read-only Linq to SQL data contexts.
2Specifies whether the Update operation is enabled.
FThe expression passed to the GroupBy operator during the Select query.
OCollection of parameters used for the GroupBy operator during the Select query.
Collection of parameters used during the Insert operation. These parameters are merged with the parameters provided by data-bound controls.
5Event raised after the Insert operation is completed.
5Event raised before the Insert operation is executed.
LinqDataSource '{0}' only supports a single view named '{1}'. You may also leave the view name empty for the default view to be chosen.
FThe expression passed to the OrderBy operator during the Select query.
OCollection of parameters used for the OrderBy operator during the Select query.
The expression passed to the OrderBy operator used for ordering groups after a GroupBy has been performed during the Select query.
UCollection of parameters used for the OrderGroupsBy operator during the Select query.
BThe expression defining a projection used during the Select query.
HCollection of parameters used in the projection during the Select query.
5Event raised after the Select operation is completed.
5Event raised before the Select operation is executed.
Specifies whether to store original data values in ViewState.  This property is used for conflict detection during Update and Delete operations.
3The name of the table property on the data context.
Collection of parameters used during the Update operation. These parameters are merged with the parameters provided by data-bound controls.
5Event raised after the Update operation is completed.
5Event raised before the Update operation is executed.
DThe expression passed to the Where operator during the Select query.
MCollection of parameters used for the Where operator during the Select query.
KCannot compute Count for a data source that does not implement ICollection.
LYou must call MoveNext on IEnumerator before accessing the Current property.
(The template used for alternating items.
#The value of {0} must not be empty.
\Whether the ListView treats empty strings as null when the value is extracted from the item.
8A comma-separated list of key fields in the data source.
Data keys must be specified on ListView '{0}' before the selected data keys can be retrieved.  Use the DataKeyNames property to specify data keys.
(The collection of data key field values.
YThe data source '{0}' does not support server-side paging and it returned non-ICollection
_Data source must implement ICollection when calling CreateChildControls with dataBinding=false.
)The index of the item shown in edit mode.
0The ListViewItem that is currently being edited.
)The template used for items in edit mode.
uThe template used when no data is returned from the data source. This template replaces the LayoutTemplate when used.
oThe template used in the GroupTemplate when the number of remaining data items is less than the GroupItemCount.
bWhether the data bound control will register itself with a data bound control manager on the page.
PWhether page validation will be performed after validation is done in the model.
WThe ID of the server control that will be replaced with instances of the GroupTemplate.
?The number of items that are rendered inside the GroupTemplate.
ListView '{0}' has a GroupItemCount specified on it but no GroupTemplate. A GroupTemplate must be present for ListView to render groups.
>The template used for group separators between GroupTemplates.
"The template used for item groups.
2The ListViewItem that is currently being inserted.
4The position of the insert item within the ListView.
+The template used for items in insert mode.
nAn InsertItemTemplate must be defined on ListView '{0}' if InsertItemPosition is set to FirstItem or LastItem.
MCancel can only be called from the currently-edited record or an insert item.
/Delete can only be called on a valid data item.
-Edit can only be called on a valid data item.
qInsert can only be called on an insert item. Ensure only the InsertTemplate has a button with CommandName=Insert.
/Select can only be called on a valid data item.
/Update can only be called on a valid data item.
VThe ID of the server control that will be replaced with instances of the ItemTemplate.
&The template used for separator items.
The template used for items.
2An ItemTemplate must be defined on ListView '{0}'.
 The collection of visible items.
GListViewItems that have type DataItem must be of type ListViewDataItem.
*The template used for the ListView layout.
ListView with id '{0}' must have a data source that either implements ICollection or can perform data source paging if AllowPaging is true.
If a data source does not return ICollection and cannot return the total row count, it cannot be used by the {0} to implement server-side paging.
A group placeholder must be specified on ListView '{0}' when the GroupTemplate is defined. Specify a group placeholder by setting its ID property to "{1}". The group placeholder control must also specify runat="server".
An insert item wasn't found.
An item placeholder must be specified on ListView '{0}'. Specify an item placeholder by setting a control's ID property to "{1}". The item placeholder control must also specify runat="server".
BThe data source retrieved by '{0}' returned a null DataSourceView.
;Fires when a Cancel event is generated within the ListView.
5Fires when an event is generated within the ListView.
Fires when an item is created.
(Fires after an item has been data-bound.
<Fires after a Delete Command is executed on the data source.
=Fires before a Delete Command is executed on the data source.
:Fires when an Edit event is generated within the ListView.
=Fires after an Insert Command is executed on the data source.
>Fires before an Insert Command is executed on the data source.
=Fires after an Update Command is executed on the data source.
>Fires before an Update Command is executed on the data source.
,Fires when the ListView's layout is created.
9Fires when the ListView's paging properties have changed.
9Fires when the ListView's paging properties are changing.
PFires when an item is selected in the ListView, after the selection is complete.
LFires when an item is selected in the ListView, before the item is selected.
IFires when a field is sorted in the ListView, after the sort is complete.
EFires when a field is sorted in the ListView, before the sort occurs.
)The index of the currently selected item.
2The template used for the currently selected item.
)The direction in which to sort the field.
NSort expression used to sort the data source to which the ListView is binding.
/Style properties are not supported on ListView.
zStyle properties are not supported on ListView.  Apply styling or CSS classes to the elements inside ListView's templates.
9The ListView '{0}' raised event {1} which wasn't handled.
First
Previous
7The CSS class applied to the next and previous buttons.
4The type of button contained within the pager field.
IThe URL of the image of the first page button if the ButtonType is Image.
"The text of the first page button.
HThe URL of the image of the last page button if the ButtonType is Image.
!The text of the last page button.
HThe URL of the image of the next page button if the ButtonType is Image.
!The text of the next page button.
LThe URL of the image of the previous page button if the ButtonType is Image.
%The text of the previous page button.
NWhether disabled pager links should be rendered as labels rather than buttons.
FWhether non-breaking spaces should be rendered between pager controls.
=Whether the pager field should display the first page button.
<Whether the pager field should display the last page button.
<Whether the pager field should display the next page button.
@Whether the pager field should display the previous page button.
SThe maximum number of page number buttons that can be displayed by the pager field.
4The type of button contained within the pager field.
FThe CSS class applied to the label containing the current page number.
HThe URL of the image of the next page button if the ButtonType is Image.
!The text of the next page button.
7The CSS class applied to the next and previous buttons.
3The CSS class applied to the numeric pager buttons.
LThe URL of the image of the previous page button if the ButtonType is Image.
%The text of the previous page button.
FWhether non-breaking spaces should be rendered between pager controls.
=RegisterDataItem can only be called during an async postback.
5The control '{0}' already has a data item registered.
Object is not a DataPagerField.
Type index is out of bounds.
{0} (at index {1})
VThe attribute 'LoadProperties' can only be used when using the default ProfileService.
JSpecifies profile properties that should be rendered inline with the page.
Type {0} is not supported.
SError status code returned by the Web Service: {0}. Error details from service: {1}
?Indicates whether user roles are rendered inline with the page.
For RoleService, 'loadRoles' property must be set to false when the 'path' property is set to a value different from the default value.
!Role Provider could not be found.
.The Role Manager feature has not been enabled.
The 'ID' property on ScriptControlDescriptor is not settable. The client ID of a script control is always equal to its element ID.
Extender control '{0}' is not a registered extender control. Extender controls must be registered using RegisterExtenderControl() before calling RegisterScriptDescriptors().
Extender control type '{0}' does not have any attributes of type '{1}'. Extender control types must have at least one attribute of type '{1}'.
9Extender controls may not be registered before PreRender.
8Extender controls may not be registered after PreRender.
7Script controls may not be registered before PreRender.
6Script controls may not be registered after PreRender.
Script control '{0}' is not a registered script control. Script controls must be registered using RegisterScriptControl() before calling RegisterScriptDescriptors().
qExtender control '{0}' cannot extend '{1}'. Extender controls of type '{2}' cannot extend controls of type '{3}'.
MIndicates whether custom error redirects will occur during an async postback.
mThis event is raised to allow customization of the error message sent to the client during an async postback.
The error message to be sent to the client when an unhandled exception occurs on the server. The property can be set declaratively in the page markup or during the ScriptManager's AsyncPostBackError event. If the value is empty the exception's message will be used.
The page is performing an async postback but the ScriptManager.SupportsPartialRendering property is set to false. Ensure that the property is set to true during an async postback.
XThe timeout period in seconds for async postbacks. A value of zero indicates no timeout.
@Contains preferences for the client side authentication service.
DA history point can only be created during an asynchronous postback.
BA history point can only be added if EnableHistory is set to true.
BThe EnableHistory property cannot be changed after the Init event.
KThe EnablePartialRendering property cannot be changed after the Init event.
hThe EnableScriptGlobalization property cannot be changed during async postbacks or after the Init event.
MThe SupportsPartialRendering property cannot be changed after the Init event.
Control with ID '{0}' cannot be registered through both RegisterAsyncPostBackControl and RegisterPostBackControl. This can happen if you have conflicting triggers associated with the target control.
TA script reference cannot be included multiple times in composite script references.
YThe SupportsPartialRendering property cannot be set when EnablePartialRendering is false.
BSpecifies a client-side event handler name for the navigate event.
rEnables the composition of individual script references into one to minimize the number of requests to the server.
The URL of an empty page that will be used to manage history on Internet Explorer. The script manager uses a built-in, resource-based page if this property is unspecified.
FEnables ScriptManager to manage browser history on supported browsers.
Enables page methods.
Enables asynchronous postbacks for the UpdatePanel control on supported browsers. To override the default browser support detection you can set the SupportsPartialRendering property.
gEnables ScriptManager to add client-side globalization information to the page for the current culture.
[Enables ScriptManager to generate localized versions of script files if they are available.
When true, the server-side history state is hashed using the same settings as ViewState. When false, the server history state is a clear-text string dictionary that can be modified by the end user by modifying the url.
2ASP.NET Ajax client-side framework failed to load.
Control with ID '{0}' being registered through RegisterAsyncPostBackControl or RegisterPostBackControl must implement either INamingContainer, IPostBackDataHandler, or IPostBackEventHandler.
[Specifies that script references should be loaded before the UI is rendered in the browser.
^This event is raised during asynchronous postbacks when the server-side history state changes.
>Only one instance of a ScriptManager can be added to the page.
Untitled Page
9Contains preferences for the client side profile service.
dThis event is raised to allow modifications to composite script references before they are rendered.
ZThis event is raised to allow modifications to script references before they are rendered.
@Contains preferences for the client side authentication service.
KIndicates the type of scripts to load when more than one type is available.
^Specifies that scripts should be loaded from this path instead of from assembly web resources.
A collection of script references that the ScriptManager should include in the page. The Scripts collections on the ScriptManager and ScriptManagerProxy controls are merged at runtime.
A collection of service references that the ScriptManager should include in the page. The Services collections on the ScriptManager and ScriptManagerProxy controls are merged at runtime.
Cannot unregister UpdatePanel with ID '{0}' since it was not registered with the ScriptManager. This might occur if the UpdatePanel was removed from the control tree and later added again, which is not supported.
8The assembly that contains the script as a web resource.
(Assembly cannot be defined without Name.
\Indicates whether this script reference should ignore the ScriptManager.ScriptPath property.
>'{0}' is not a valid script name.  The name must end in '.js'.
>'{0}' is not a valid script path.  The path must end in '.js'.
The name of the web resource.
#Name and Path cannot both be empty.
kSpecifies if the script resource loader should automatically append a script loaded notification statement.
The path to the script.
pA comma-delimited string of valid UI cultures supported by the path. ResourceUICultures is only valid with Path.
KSpecifies the algorithm for choosing between the debug and release scripts.
2The control must be in the control tree of a page.
The script tag registered for type '{0}' and key '{1}' has invalid characters outside of the script tags: {2}. Only properly formatted script tags can be registered.
WThe script tag registered for type '{0}' and key '{1}' is missing a matching close tag.
^The script tag registered for type '{0}' and key '{1}' does not contain any valid script tags.
LScript resource handler can only serve resources from file-based assemblies.
OMore than one ScriptResourceAttribute points to script '{0}' in assembly '{1}'.
+This is an invalid script resource request.
The resource URL cannot be longer than 1024 characters. If using a CompositeScriptReference, reduce the number of ScriptReferences it contains, or combine them into a single static file and set the Path property to the location of it.
NThe type names for the debug and release versions of resource {0} don't match.
!Web resource '{0}' was not found.
bIndicates whether this service reference should have its proxy script rendered inline in the page.
)The path to the service being referenced.
Path cannot be empty.
3The serviceUri configuration setting was not found.
Unable to connect to the Microsoft SQL Everywhere Service using the specified connection string. Make sure that Microsoft SQL Server Everywhere is correctly installed on this computer.
8Fires when an event is generated within the pager field.
%The template used in the pager field.
=The TemplatePagerField raised event {0} which wasn't handled.
'The interval must be greater than zero.
Enables raising of Tick events.
1The duration between Tick events in milliseconds.
4Occurs whenever the specified interval time elapses.
$An unhandled exception has occurred.
 The trigger's target control ID.
PA control with ID '{0}' could not be found for the trigger in UpdatePanel '{1}'.
GThe ControlID property must be set on the trigger in UpdatePanel '{0}'.
The Controls property of UpdatePanel with ID '{0}' cannot be modified directly. To change the contents of the UpdatePanel modify the child controls of the ContentTemplateContainer property.
bThe ContentTemplate of UpdatePanel with ID '{0}' cannot be changed after it has been instantiated.
oIndicates whether postbacks coming from the UpdatePanel's child controls will cause the UpdatePanel to refresh.
`ChildrenAsTriggers cannot be set to false when UpdateMode is set to Always on UpdatePanel '{0}'.
aIndicates whether the UpdatePanel should render as a block tag (<div>) or an inline tag (<span>).
0SetPartialRenderingMode can only be called once.
FA collection of triggers that can cause the UpdatePanel to be updated.
hThe Update method can only be called on UpdatePanel with ID '{0}' when UpdateMode is set to Conditional.
Indicates whether the UpdatePanel will refresh on every asynchronous postback or only as the result of a specific action, such as a call to UpdatePanel.Update().
PThe Update method can only be called on UpdatePanel with ID '{0}' before Render.
8UpdatePanel that this UpdateProgress is associated with.
9Time in ms after which the ProgressTemplate is displayed.
,DisplayAfter must be a non negative integer.
ADetermines whether the progress template is dynamically rendered.
7No UpdatePanel found for AssociatedUpdatePanelID '{0}'.
;ProgressTemplate which is displayed during async postbacks.
MA ProgressTemplate must be specified on UpdateProgress control with ID '{0}'.
$You must log on to call this method.
Assembly '{0}' does not contain a Web resource with name '{1}'.  Setting the ScriptReference.ScriptMode property to ScriptMode.Auto or ScriptMode.Release will cause the release script to be used.
rAssembly '{0}' contains a Web resource with name '{1}', but does not contain an embedded resource with name '{1}'.
?Assembly '{0}' does not contain a Web resource with name '{1}'.
*There was an error processing the request.
Using the GenerateScriptTypes attribute is not supported for types in the following categories: primitive types; DateTime; generic types taking more than one parameter; types implementing IEnumerable or IDictionary; interfaces; Abstract classes; classes without a public default constructor.
The path "{0}" is not supported. When InlineScript=true, the path should be a relative path pointing to the same web application as the current page.
WAn attempt was made to call the method '{0}' using a {1} request, which is not allowed.
=Invalid web service call, expected path info of /js/<Method>.
fThe method '{0}' returns a value of type '{1}', which cannot be serialized as Xml. Original error: {2}
=Invalid web service call, missing value for parameter: '{0}'.
eOnly Web services with a [ScriptService] attribute on the class definition can be called from script.
No web service found at: {0}.
No web service found at: {0}. This error can occur if a ServiceReference to a WCF service has InlineScript set to 'true'. For WCF services InlineScript should be 'false'.
Authentication failed.
Unknown web method {0}.
lSystem.Resources.ResourceReader, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADPg
PRM_CannotRegisterTwice
PRM_MissingPanel>
PRM_ParserError
PRM_ServerError
PRM_TimeoutError
<The PageRequestManager cannot be initialized more than once.
xCould not find UpdatePanel with ID '{0}'. If it is being updated dynamically then it must be inside another UpdatePanel.
9The message received from the server could not be parsed.
wAn unknown error occurred while processing the request on the server. The status code returned from the server was: {0}
The server request timed out.
lSystem.Resources.ResourceReader, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADP 
1L-ViL
addHandlerCantBeUsedForError
appComponentMustBeInitializedl
appDuplicateComponent
argumentDomNode
argumentTypeName
arrayParseBadFormat
badTypeName
baseNotAClass
behaviorDuplicateName
boolTrueOrFalse
cantAddNonFunctionhandler
cantAddWithoutId
cantBeCalledAfterDispose
cantSetId
cantSetIdAfterInit
cantSetNameAfterInit
circularParentChain
componentCantSetIdAfterAddedToApp
componentCantSetIdTwice
controlAlreadyDefined
createComponentOnDom
createNoDom
createNotComponent
enumInvalidValueName
enumReservedName
enumValueNotInteger
eventHandlerInvalid
eventHandlerNotFound
eventHandlerNotFunction
historyCannotAddHistoryPointWithHistoryDisabled
historyCannotEnableHistory
historyInvalidHistorySettingCombination
historyMissingFrame
historyMissingHiddenInput
invalidNameSpace
methodNotFound
methodRegisteredTwice
namespaceContainsObject
notAMethod
notATypeName
notAnInterface
propertyNotAnArray
propertyNotWritable
propertyNullOrUndefined
propertyUndefined
referenceNotFound
scriptLoadFailedDebug
scriptLoadFailedNoHead
stateFieldNameInvalid
stateMustBeStringDictionary
stringFormatBraceMismatch
stringFormatInvalid
typeRegisteredTwice
typeShouldBeTypeOrString
undefinedEvent
urlMustBeLessThan1024chars
jCan't add a handler for the error event using this method. Please set the window.onerror property instead.
OComponents must be initialized before they are added to the Application object.
HTwo components with the same id '{0}' can't be added to the application.
+Value must be a DOM element or a text node.
*Value is not the name of an existing type.
fValue must be a valid string representation for an array. It must start with a '[' and end with a ']'.
RValue is not the name of the type being registered or the name is a reserved word.
Value is not a class.
jA behavior with name '{0}' already exists or it is the name of an existing property on the target element.
 Value must be 'true' or 'false'.
+Can't add a handler that is not a function.
.Can't add a component that doesn't have an id.
Can't be called after dispose.
,The id property can't be set on this object.
AThe id property can't be set on this object after initialization.
CThe name property can't be set on this object after initialization.
<The chain of control parents can't have circular references.
\The id property of a component can't be set after it's been added to the Application object.
;The id property of a component can't be set more than once.
1A control is already associated with the element.
EValue must be null for Components that are not Controls or Behaviors.
2Value must not be null for Controls and Behaviors.
'{0} does not derive from Sys.Component.
,'{0}' is not a valid name for an enum value.
B'{0}' is a reserved name that can't be used as an enum value name.
:An enumeration definition can only contain integer values.
DHandler was not added through the Sys.UI.DomEvent.addHandler method.
Handler not found.
Handler must be a function.
BA history point can only be added if enableHistory is set to true.
.Cannot set enableHistory after initialization.
KCannot set enableHistory to false when ScriptManager.EnableHistory is true.
For the history feature to work in IE, the page must have an iFrame element with id '__historyFrame' pointed to a page that gets its title from the 'title' query string parameter and calls Sys.Application._onIFrameLoad() on the parent window. This can be done by setting EnableHistory to true on ScriptManager.
kFor the history feature to work in Safari 2, the page must have a hidden input element with id '__history'.
*Value is not a valid namespace identifier.
 No method found with name '{0}'.
'Method {0} has already been registered.
1Object {0} already exists and is not a namespace.
{0} is not a method.
Value is not a valid type name.
Value is not a valid interface.
'{0}' is not an Array property.
!'{0}' is not a writable property.
DCannot set the properties of '{0}' because it returned a null value.
-'{0}' is not a property or an existing field.
Component '{0}' was not found.
The script '{0}' failed to load. Check for:
 Inaccessible path.
 Script errors. (IE) Enable 'Display a notification about every script error' under advanced settings.
 Missing call to Sys.Application.notifyScriptLoaded().
8ScriptLoader requires pages to contain a <head> element.
6State field names must not contain any '=' characters.
6The state object can only have null and string fields.
AThe format string contains an unmatched opening or closing brace.
The format string is invalid.
Type {0} has already been registered. The type may be defined multiple times or the script file that defines it may have already been loaded. A possible cause is a change of settings during a partial update.
/Value is not a valid type or a valid type name.
'{0}' is not an event.
WThe history state must be small enough to not make the url larger than 1024 characters.
lSystem.Resources.ResourceReader, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADPpQD
actualValue
argument
argumentDomElementG
argumentIntegere
argumentNull
argumentOutOfRange
argumentType
argumentTypeWithTypes
argumentUndefined
assertFailed
assertFailedCaller
badBaseUrl1
badBaseUrl2
badBaseUrl3
breakIntoDebugger
cannotAbortBeforeStart
cannotCallBeforeResponse
cannotCallOnceStarted
cannotCallOutsideHandler
cannotDeserializeEmptyString
cannotDeserializeInvalidJson
cannotSerializeNonFiniteNumbers
cannotSerializeObjectWithCycle
controlCantSetId
enumInvalidValue
eventHandlerInvalid
format
formatBadFormatSpecifier
formatInvalidString
invalidExecutorType
invalidHttpVerb
invalidOperation
invalidTimeout
invokeCalledTwice
notImplemented
nullWebRequest
paramName
parameterCount
scriptLoadFailed
scriptLoadMultipleCallbacks
servicePathNotSet
setExecutorAfterActive
webServiceFailed
webServiceFailedNoMsg
webServiceInvalidJsonWrapper
webServiceInvalidReturnType
webServiceTimedOut
Actual value was {0}.
.Value does not fall within the expected range.
Value must be a DOM element.
Value must be an integer.
Value cannot be null.
8Specified argument was out of the range of valid values.
0Object cannot be converted to the required type.
7Object of type '{0}' cannot be converted to type '{1}'.
Value cannot be undefined.
Assertion Failed: {0}
Assertion Failed: {0}
at {1}
Base URL does not contain ://.
$Base URL does not contain another /.
Cannot find last / in base URL.
Break into debugger?
+Cannot abort when executor has not started.
0Cannot call {0} when responseAvailable is false.
Cannot call {0} once started.
5Cannot call {0} outside of a completed event handler.
 Cannot deserialize empty string.
?Cannot deserialize. The data does not correspond to valid JSON.
$Cannot serialize non finite numbers.
FCannot serialize object with cyclic reference within child properties.
*The id property can't be set on a control.
('{0}' is not a valid value for enum {1}.
DHandler was not added through the Sys.UI.DomEvent.addHandler method.
5One of the identified items was in an invalid format.
Format specifier was invalid.
)Input string was not in a correct format.
>Could not create a valid Sys.Net.WebRequestExecutor from: {0}.
2httpVerb cannot be set to an empty or null string.
>Operation is not valid due to the current state of the object.
,Value must be greater than or equal to zero.
"Cannot call invoke more than once.
+The method or operation is not implemented.
2Cannot call executeRequest with a null webRequest.
Parameter name: {0}
Parameter count mismatch.
%The script '{0}' could not be loaded.
fThe script '{0}' contains multiple calls to Sys.Application.notifyScriptLoaded(). Only one is allowed.
-The path to the web service has not been set.
/Cannot set executor after it has become active.
<The server method '{0}' failed with the following error: {1}
The server method '{0}' failed.
aThe server method '{0}' returned invalid data. The 'd' property is missing from the JSON wrapper.
DThe server method '{0}' returned an invalid type. Expected type: {1}
"The server method '{0}' timed out.
lSystem.Resources.ResourceReader, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADP
PRM_CannotRegisterTwice
PRM_MissingPanel>
PRM_ParserError
PRM_ParserErrorDetails
PRM_ServerError
PRM_TimeoutError
PRM_UnknownToken
<The PageRequestManager cannot be initialized more than once.
xCould not find UpdatePanel with ID '{0}'. If it is being updated dynamically then it must be inside another UpdatePanel.
The message received from the server could not be parsed. Common causes for this error are when the response is modified by calls to Response.Write(), response filters, HttpModules, or server trace is enabled.
Details: {0}
Error parsing near '{0}'.
wAn unknown error occurred while processing the request on the server. The status code returned from the server was: {0}
The server request timed out.
Unknown token: '{0}'.
lSystem.Resources.ResourceReader, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADPn&C
DataService_MoreThanOneMetadataFile
DataService_NoMetadataFilesu
ReferenceGroup_AppendLinePosition
ReferenceGroup_DataContractExcludedAndIncluded
ReferenceGroup_DuplicatedSchemaItems
ReferenceGroup_DuplicatedSchemaItemsIgnored
ReferenceGroup_EmptyAddress
ReferenceGroup_EmptyProtocol
ReferenceGroup_FailedToGenerateCode
ReferenceGroup_FailedToLoadAssembly
ReferenceGroup_FieldDefinedDifferentlyInDuplicatedMessage
ReferenceGroup_FieldDefinedInOneOfDuplicatedMessage
ReferenceGroup_InvalidFileName
ReferenceGroup_InvalidSourceId
ReferenceGroup_OperationDefinedDifferently
ReferenceGroup_OperationDefinedInOneOfDuplicatedServiceContract
ReferenceGroup_ServiceContractMappingMissMatch
ReferenceGroup_SharedTypeMustBePublic
ReferenceGroup_TwoExternalFilesWithSameName
sThe specified .datasvcmap file at '{0}' has more than one metadata file in it. That is not supported by the system.
FNo metadata files found or failed to load them for data service '{0}'.
{0} Line {1}, position {2}.
oThe type '{0}' is listed as a shared data contract type, but is also listed in the type sharing exclusion list.
]The global {0} ('{1}') has been defined in both '{2}' and '{3}'. They are different at '{4}'.
pThe global {0} ('{1}') has been defined in both '{2}' and '{3}'. The difference between them ('{4}') is ignored.
Address must be specified.
Protocol must be specified.
=Failed to generate code for the service reference '{0}'.
Shared assembly '{0}' could not be loaded. If this is a referenced project, please make sure that you have built the project first.
QThe message part '{0}' in message contract '{1}' is different in '{2}' and '{3}'.
hThe message contract '{0}' is defined in both '{1}' and '{2}', but only one contains message part '{3}'.
H'{0}' is invalid file name.  Absolute or relative path is not supported.
;SourceId of a metadata source should be a positive integer.
The operation '{0}' in service contract '{1}' is different in '{2}' and '{3}'. Check the input, output and fault messages of the operation.
qThe service contract '{0}' is defined in both '{1}' and '{2}', but only one of them contains the operation '{3}'.
The type '{0}' in the service contract mapping has different TargetNamespace('{1}') and Name('{2}') than the TargetNamespace('{3}') and Name('{4}') in the service reference file.
GThe type '{0}' cannot be used in type sharing because it is not public.
XTwo metadata items or extension items in the .svcmap file have the same file name '{0}'.
cI5cI5cI5cI5cI5j
cI5cI5cI5cI5cI5j
t=x=@~@C
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
//-----------------------------------------------------------------------
// Copyright (C) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------
// MicrosoftAjax.js
// Microsoft AJAX Framework.
Function.__typeName = 'Function';
Function.__class = true;
Function.createCallback = function Function$createCallback(method, context) {
    /// <summary locid="M:J#Function.createCallback" />
    /// <param name="method" type="Function"></param>
    /// <param name="context" mayBeNull="true"></param>
    /// <returns type="Function"></returns>
    var e = Function._validateParams(arguments, [
        {name: "method", type: Function},
        {name: "context", mayBeNull: true}
    ]);
    if (e) throw e;
    return function() {
        var l = arguments.length;
        if (l > 0) {
            var args = [];
            for (var i = 0; i < l; i++) {
                args[i] = arguments[i];
            }
            args[l] = context;
            return method.apply(this, args);
        }
        return method.call(this, context);
    }
Function.createDelegate = function Function$createDelegate(instance, method) {
    /// <summary locid="M:J#Function.createDelegate" />
    /// <param name="instance" mayBeNull="true"></param>
    /// <param name="method" type="Function"></param>
    /// <returns type="Function"></returns>
    var e = Function._validateParams(arguments, [
        {name: "instance", mayBeNull: true},
        {name: "method", type: Function}
    ]);
    if (e) throw e;
    return function() {
        return method.apply(instance, arguments);
    }
Function.emptyFunction = Function.emptyMethod = function Function$emptyMethod() {
    /// <summary locid="M:J#Function.emptyMethod" />
    if (arguments.length !== 0) throw Error.parameterCount();
Function._validateParams = function Function$_validateParams(params, expectedParams) {
    var e;
    e = Function._validateParameterCount(params, expectedParams);
    if (e) {
        e.popStackFrame();
        return e;
    }
    for (var i=0; i < params.length; i++) {
        var expectedParam = expectedParams[Math.min(i, expectedParams.length - 1)];
        var paramName = expectedParam.name;
        if (expectedParam.parameterArray) {
            paramName += "[" + (i - expectedParams.length + 1) + "]";
        }
        e = Function._validateParameter(params[i], expectedParam, paramName);
        if (e) {
            e.popStackFrame();
            return e;
        }
    }
    return null;
Function._validateParameterCount = function Function$_validateParameterCount(params, expectedParams) {
    var maxParams = expectedParams.length;
    var minParams = 0;
    for (var i=0; i < expectedParams.length; i++) {
        if (expectedParams[i].parameterArray) {
            maxParams = Number.MAX_VALUE;
        }
        else if (!expectedParams[i].optional) {
            minParams++;
        }
    }
    if (params.length < minParams || params.length > maxParams) {
        var e = Error.parameterCount();
        e.popStackFrame();
        return e;
    }
    return null;
Function._validateParameter = function Function$_validateParameter(param, expectedParam, paramName) {
    var e;
    var expectedType = expectedParam.type;
    var expectedInteger = !!expectedParam.integer;
    var expectedDomElement = !!expectedParam.domElement;
    var mayBeNull = !!expectedParam.mayBeNull;
    e = Function._validateParameterType(param, expectedType, expectedInteger, expectedDomElement, mayBeNull, paramName);
    if (e) {
        e.popStackFrame();
        return e;
    }
    var expectedElementType = expectedParam.elementType;
    var elementMayBeNull = !!expectedParam.elementMayBeNull;
    if (expectedType === Array && typeof(param) !== "undefined" && param !== null &&
        (expectedElementType || !elementMayBeNull)) {
        var expectedElementInteger = !!expectedParam.elementInteger;
        var expectedElementDomElement = !!expectedParam.elementDomElement;
        for (var i=0; i < param.length; i++) {
            var elem = param[i];
            e = Function._validateParameterType(elem, expectedElementType,
                expectedElementInteger, expectedElementDomElement, elementMayBeNull,
                paramName + "[" + i + "]");
            if (e) {
                e.popStackFrame();
                return e;
            }
        }
    }
    return null;
Function._validateParameterType = function Function$_validateParameterType(param, expectedType, expectedInteger, expectedDomElement, mayBeNull, paramName) {
    var e;
    if (typeof(param) === "undefined") {
        if (mayBeNull) {
            return null;
        }
        else {
            e = Error.argumentUndefined(paramName);
            e.popStackFrame();
            return e;
        }
    }
    if (param === null) {
        if (mayBeNull) {
            return null;
        }
        else {
            e = Error.argumentNull(paramName);
            e.popStackFrame();
            return e;
        }
    }
    if (expectedType && expectedType.__enum) {
        if (typeof(param) !== 'number') {
            e = Error.argumentType(paramName, Object.getType(param), expectedType);
            e.popStackFrame();
            return e;
        }
        if ((param % 1) === 0) {
            var values = expectedType.prototype;
            if (!expectedType.__flags || (param === 0)) {
                for (var i in values) {
                    if (values[i] === param) return null;
                }
            }
            else {
                var v = param;
                for (var i in values) {
                    var vali = values[i];
                    if (vali === 0) continue;
                    if ((vali & param) === vali) {
                        v -= vali;
                    }
                    if (v === 0) return null;
                }
            }
        }
        e = Error.argumentOutOfRange(paramName, param, String.format(Sys.Res.enumInvalidValue, param, expectedType.getName()));
        e.popStackFrame();
        return e;
    }
    if (expectedDomElement) {
        var val;
        if (typeof(param.nodeType) !== 'number') {
            var doc = param.ownerDocument || param.document || param;
            if (doc != param) {
                var w = doc.defaultView || doc.parentWindow;
                val = (w != param) && !(w.document && param.document && (w.document === param.document));
            }
            else {
                val = (typeof(doc.body) === 'undefined');
            }
        }
        else {
            val = (param.nodeType === 3);
        }
        if (val) {
            e = Error.argument(paramName, Sys.Res.argumentDomElement);
            e.popStackFrame();
            return e;
        }
    }
    if (expectedType && !expectedType.isInstanceOfType(param)) {
        e = Error.argumentType(paramName, Object.getType(param), expectedType);
        e.popStackFrame();
        return e;
    }
    if (expectedType === Number && expectedInteger) {
        if ((param % 1) !== 0) {
            e = Error.argumentOutOfRange(paramName, param, Sys.Res.argumentInteger);
            e.popStackFrame();
            return e;
        }
    }
    return null;
Error.__typeName = 'Error';
Error.__class = true;
Error.create = function Error$create(message, errorInfo) {
    /// <summary locid="M:J#Error.create" />
    /// <param name="message" type="String" optional="true" mayBeNull="true"></param>
    /// <param name="errorInfo" optional="true" mayBeNull="true"></param>
    /// <returns type="Error"></returns>
    var e = Function._validateParams(arguments, [
        {name: "message", type: String, mayBeNull: true, optional: true},
        {name: "errorInfo", mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var e = new Error(message);
    e.message = message;
    if (errorInfo) {
        for (var v in errorInfo) {
            e[v] = errorInfo[v];
        }
    }
    e.popStackFrame();
    return e;
Error.argument = function Error$argument(paramName, message) {
    /// <summary locid="M:J#Error.argument" />
    /// <param name="paramName" type="String" optional="true" mayBeNull="true"></param>
    /// <param name="message" type="String" optional="true" mayBeNull="true"></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: "paramName", type: String, mayBeNull: true, optional: true},
        {name: "message", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var displayMessage = "Sys.ArgumentException: " + (message ? message : Sys.Res.argument);
    if (paramName) {
        displayMessage += "\n" + String.format(Sys.Res.paramName, paramName);
    }
    var e = Error.create(displayMessage, { name: "Sys.ArgumentException", paramName: paramName });
    e.popStackFrame();
    return e;
Error.argumentNull = function Error$argumentNull(paramName, message) {
    /// <summary locid="M:J#Error.argumentNull" />
    /// <param name="paramName" type="String" optional="true" mayBeNull="true"></param>
    /// <param name="message" type="String" optional="true" mayBeNull="true"></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: "paramName", type: String, mayBeNull: true, optional: true},
        {name: "message", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var displayMessage = "Sys.ArgumentNullException: " + (message ? message : Sys.Res.argumentNull);
    if (paramName) {
        displayMessage += "\n" + String.format(Sys.Res.paramName, paramName);
    }
    var e = Error.create(displayMessage, { name: "Sys.ArgumentNullException", paramName: paramName });
    e.popStackFrame();
    return e;
Error.argumentOutOfRange = function Error$argumentOutOfRange(paramName, actualValue, message) {
    /// <summary locid="M:J#Error.argumentOutOfRange" />
    /// <param name="paramName" type="String" optional="true" mayBeNull="true"></param>
    /// <param name="actualValue" optional="true" mayBeNull="true"></param>
    /// <param name="message" type="String" optional="true" mayBeNull="true"></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: "paramName", type: String, mayBeNull: true, optional: true},
        {name: "actualValue", mayBeNull: true, optional: true},
        {name: "message", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var displayMessage = "Sys.ArgumentOutOfRangeException: " + (message ? message : Sys.Res.argumentOutOfRange);
    if (paramName) {
        displayMessage += "\n" + String.format(Sys.Res.paramName, paramName);
    }
    if (typeof(actualValue) !== "undefined" && actualValue !== null) {
        displayMessage += "\n" + String.format(Sys.Res.actualValue, actualValue);
    }
    var e = Error.create(displayMessage, {
        name: "Sys.ArgumentOutOfRangeException",
        paramName: paramName,
        actualValue: actualValue
    });
    e.popStackFrame();
    return e;
Error.argumentType = function Error$argumentType(paramName, actualType, expectedType, message) {
    /// <summary locid="M:J#Error.argumentType" />
    /// <param name="paramName" type="String" optional="true" mayBeNull="true"></param>
    /// <param name="actualType" type="Type" optional="true" mayBeNull="true"></param>
    /// <param name="expectedType" type="Type" optional="true" mayBeNull="true"></param>
    /// <param name="message" type="String" optional="true" mayBeNull="true"></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: "paramName", type: String, mayBeNull: true, optional: true},
        {name: "actualType", type: Type, mayBeNull: true, optional: true},
        {name: "expectedType", type: Type, mayBeNull: true, optional: true},
        {name: "message", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var displayMessage = "Sys.ArgumentTypeException: ";
    if (message) {
        displayMessage += message;
    }
    else if (actualType && expectedType) {
        displayMessage +=
            String.format(Sys.Res.argumentTypeWithTypes, actualType.getName(), expectedType.getName());
    }
    else {
        displayMessage += Sys.Res.argumentType;
    }
    if (paramName) {
        displayMessage += "\n" + String.format(Sys.Res.paramName, paramName);
    }
    var e = Error.create(displayMessage, {
        name: "Sys.ArgumentTypeException",
        paramName: paramName,
        actualType: actualType,
        expectedType: expectedType
    });
    e.popStackFrame();
    return e;
Error.argumentUndefined = function Error$argumentUndefined(paramName, message) {
    /// <summary locid="M:J#Error.argumentUndefined" />
    /// <param name="paramName" type="String" optional="true" mayBeNull="true"></param>
    /// <param name="message" type="String" optional="true" mayBeNull="true"></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: "paramName", type: String, mayBeNull: true, optional: true},
        {name: "message", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var displayMessage = "Sys.ArgumentUndefinedException: " + (message ? message : Sys.Res.argumentUndefined);
    if (paramName) {
        displayMessage += "\n" + String.format(Sys.Res.paramName, paramName);
    }
    var e = Error.create(displayMessage, { name: "Sys.ArgumentUndefinedException", paramName: paramName });
    e.popStackFrame();
    return e;
Error.format = function Error$format(message) {
    /// <summary locid="M:J#Error.format" />
    /// <param name="message" type="String" optional="true" mayBeNull="true"></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: "message", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var displayMessage = "Sys.FormatException: " + (message ? message : Sys.Res.format);
    var e = Error.create(displayMessage, {name: 'Sys.FormatException'});
    e.popStackFrame();
    return e;
Error.invalidOperation = function Error$invalidOperation(message) {
    /// <summary locid="M:J#Error.invalidOperation" />
    /// <param name="message" type="String" optional="true" mayBeNull="true"></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: "message", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var displayMessage = "Sys.InvalidOperationException: " + (message ? message : Sys.Res.invalidOperation);
    var e = Error.create(displayMessage, {name: 'Sys.InvalidOperationException'});
    e.popStackFrame();
    return e;
Error.notImplemented = function Error$notImplemented(message) {
    /// <summary locid="M:J#Error.notImplemented" />
    /// <param name="message" type="String" optional="true" mayBeNull="true"></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: "message", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var displayMessage = "Sys.NotImplementedException: " + (message ? message : Sys.Res.notImplemented);
    var e = Error.create(displayMessage, {name: 'Sys.NotImplementedException'});
    e.popStackFrame();
    return e;
Error.parameterCount = function Error$parameterCount(message) {
    /// <summary locid="M:J#Error.parameterCount" />
    /// <param name="message" type="String" optional="true" mayBeNull="true"></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: "message", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var displayMessage = "Sys.ParameterCountException: " + (message ? message : Sys.Res.parameterCount);
    var e = Error.create(displayMessage, {name: 'Sys.ParameterCountException'});
    e.popStackFrame();
    return e;
Error.prototype.popStackFrame = function Error$popStackFrame() {
    /// <summary locid="M:J#checkParam" />
    if (arguments.length !== 0) throw Error.parameterCount();
    if (typeof(this.stack) === "undefined" || this.stack === null ||
        typeof(this.fileName) === "undefined" || this.fileName === null ||
        typeof(this.lineNumber) === "undefined" || this.lineNumber === null) {
        return;
    }
    var stackFrames = this.stack.split("\n");
    var currentFrame = stackFrames[0];
    var pattern = this.fileName + ":" + this.lineNumber;
    while(typeof(currentFrame) !== "undefined" &&
          currentFrame !== null &&
          currentFrame.indexOf(pattern) === -1) {
        stackFrames.shift();
        currentFrame = stackFrames[0];
    }
    var nextFrame = stackFrames[1];
    if (typeof(nextFrame) === "undefined" || nextFrame === null) {
        return;
    }
    var nextFrameParts = nextFrame.match(/@(.*):(\d+)$/);
    if (typeof(nextFrameParts) === "undefined" || nextFrameParts === null) {
        return;
    }
    this.fileName = nextFrameParts[1];
    this.lineNumber = parseInt(nextFrameParts[2]);
    stackFrames.shift();
    this.stack = stackFrames.join("\n");
Object.__typeName = 'Object';
Object.__class = true;
Object.getType = function Object$getType(instance) {
    /// <summary locid="M:J#Object.getType" />
    /// <param name="instance"></param>
    /// <returns type="Type"></returns>
    var e = Function._validateParams(arguments, [
        {name: "instance"}
    ]);
    if (e) throw e;
    var ctor = instance.constructor;
    if (!ctor || (typeof(ctor) !== "function") || !ctor.__typeName || (ctor.__typeName === 'Object')) {
        return Object;
    }
    return ctor;
Object.getTypeName = function Object$getTypeName(instance) {
    /// <summary locid="M:J#Object.getTypeName" />
    /// <param name="instance"></param>
    /// <returns type="String"></returns>
    var e = Function._validateParams(arguments, [
        {name: "instance"}
    ]);
    if (e) throw e;
    return Object.getType(instance).getName();
String.__typeName = 'String';
String.__class = true;
String.prototype.endsWith = function String$endsWith(suffix) {
    /// <summary locid="M:J#String.endsWith" />
    /// <param name="suffix" type="String"></param>
    /// <returns type="Boolean"></returns>
    var e = Function._validateParams(arguments, [
        {name: "suffix", type: String}
    ]);
    if (e) throw e;
    return (this.substr(this.length - suffix.length) === suffix);
String.prototype.startsWith = function String$startsWith(prefix) {
    /// <summary locid="M:J#String.startsWith" />
    /// <param name="prefix" type="String"></param>
    /// <returns type="Boolean"></returns>
    var e = Function._validateParams(arguments, [
        {name: "prefix", type: String}
    ]);
    if (e) throw e;
    return (this.substr(0, prefix.length) === prefix);
String.prototype.trim = function String$trim() {
    /// <summary locid="M:J#String.trim" />
    /// <returns type="String"></returns>
    if (arguments.length !== 0) throw Error.parameterCount();
    return this.replace(/^\s+|\s+$/g, '');
String.prototype.trimEnd = function String$trimEnd() {
    /// <summary locid="M:J#String.trimEnd" />
    /// <returns type="String"></returns>
    if (arguments.length !== 0) throw Error.parameterCount();
    return this.replace(/\s+$/, '');
String.prototype.trimStart = function String$trimStart() {
    /// <summary locid="M:J#String.trimStart" />
    /// <returns type="String"></returns>
    if (arguments.length !== 0) throw Error.parameterCount();
    return this.replace(/^\s+/, '');
String.format = function String$format(format, args) {
    /// <summary locid="M:J#String.format" />
    /// <param name="format" type="String"></param>
    /// <param name="args" parameterArray="true" mayBeNull="true"></param>
    /// <returns type="String"></returns>
    var e = Function._validateParams(arguments, [
        {name: "format", type: String},
        {name: "args", mayBeNull: true, parameterArray: true}
    ]);
    if (e) throw e;
    return String._toFormattedString(false, arguments);
String.localeFormat = function String$localeFormat(format, args) {
    /// <summary locid="M:J#String.localeFormat" />
    /// <param name="format" type="String"></param>
    /// <param name="args" parameterArray="true" mayBeNull="true"></param>
    /// <returns type="String"></returns>
    var e = Function._validateParams(arguments, [
        {name: "format", type: String},
        {name: "args", mayBeNull: true, parameterArray: true}
    ]);
    if (e) throw e;
    return String._toFormattedString(true, arguments);
String._toFormattedString = function String$_toFormattedString(useLocale, args) {
    var result = '';
    var format = args[0];
    for (var i=0;;) {
        var open = format.indexOf('{', i);
        var close = format.indexOf('}', i);
        if ((open < 0) && (close < 0)) {
            result += format.slice(i);
            break;
        }
        if ((close > 0) && ((close < open) || (open < 0))) {
            if (format.charAt(close + 1) !== '}') {
                throw Error.argument('format', Sys.Res.stringFormatBraceMismatch);
            }
            result += format.slice(i, close + 1);
            i = close + 2;
            continue;
        }
        result += format.slice(i, open);
        i = open + 1;
        if (format.charAt(i) === '{') {
            result += '{';
            i++;
            continue;
        }
        if (close < 0) throw Error.argument('format', Sys.Res.stringFormatBraceMismatch);
        var brace = format.substring(i, close);
        var colonIndex = brace.indexOf(':');
        var argNumber = parseInt((colonIndex < 0)? brace : brace.substring(0, colonIndex), 10) + 1;
        if (isNaN(argNumber)) throw Error.argument('format', Sys.Res.stringFormatInvalid);
        var argFormat = (colonIndex < 0)? '' : brace.substring(colonIndex + 1);
        var arg = args[argNumber];
        if (typeof(arg) === "undefined" || arg === null) {
            arg = '';
        }
        if (arg.toFormattedString) {
            result += arg.toFormattedString(argFormat);
        }
        else if (useLocale && arg.localeFormat) {
            result += arg.localeFormat(argFormat);
        }
        else if (arg.format) {
            result += arg.format(argFormat);
        }
        else
            result += arg.toString();
        i = close + 1;
    }
    return result;
Boolean.__typeName = 'Boolean';
Boolean.__class = true;
Boolean.parse = function Boolean$parse(value) {
    /// <summary locid="M:J#Boolean.parse" />
    /// <param name="value" type="String"></param>
    /// <returns type="Boolean"></returns>
    var e = Function._validateParams(arguments, [
        {name: "value", type: String}
    ]);
    if (e) throw e;
    var v = value.trim().toLowerCase();
    if (v === 'false') return false;
    if (v === 'true') return true;
    throw Error.argumentOutOfRange('value', value, Sys.Res.boolTrueOrFalse);
Date.__typeName = 'Date';
Date.__class = true;
Date._appendPreOrPostMatch = function Date$_appendPreOrPostMatch(preMatch, strBuilder) {
    var quoteCount = 0;
    var escaped = false;
    for (var i = 0, il = preMatch.length; i < il; i++) {
        var c = preMatch.charAt(i);
        switch (c) {
        case '\'':
            if (escaped) strBuilder.append("'");
            else quoteCount++;
            escaped = false;
            break;
        case '\\':
            if (escaped) strBuilder.append("\\");
            escaped = !escaped;
            break;
        default:
            strBuilder.append(c);
            escaped = false;
            break;
        }
    }
    return quoteCount;
Date._expandFormat = function Date$_expandFormat(dtf, format) {
    if (!format) {
        format = "F";
    }
    if (format.length === 1) {
        switch (format) {
        case "d":
            return dtf.ShortDatePattern;
        case "D":
            return dtf.LongDatePattern;
        case "t":
            return dtf.ShortTimePattern;
        case "T":
            return dtf.LongTimePattern;
        case "F":
            return dtf.FullDateTimePattern;
        case "M": case "m":
            return dtf.MonthDayPattern;
        case "s":
            return dtf.SortableDateTimePattern;
        case "Y": case "y":
            return dtf.YearMonthPattern;
        default:
            throw Error.format(Sys.Res.formatInvalidString);
        }
    }
    return format;
Date._expandYear = function Date$_expandYear(dtf, year) {
    if (year < 100) {
        var curr = new Date().getFullYear();
        year += curr - (curr % 100);
        if (year > dtf.Calendar.TwoDigitYearMax) {
            return year - 100;
        }
    }
    return year;
Date._getParseRegExp = function Date$_getParseRegExp(dtf, format) {
    if (!dtf._parseRegExp) {
        dtf._parseRegExp = {};
    }
    else if (dtf._parseRegExp[format]) {
        return dtf._parseRegExp[format];
    }
    var expFormat = Date._expandFormat(dtf, format);
    expFormat = expFormat.replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1");
    var regexp = new Sys.StringBuilder("^");
    var groups = [];
    var index = 0;
    var quoteCount = 0;
    var tokenRegExp = Date._getTokenRegExp();
    var match;
    while ((match = tokenRegExp.exec(expFormat)) !== null) {
        var preMatch = expFormat.slice(index, match.index);
        index = tokenRegExp.lastIndex;
        quoteCount += Date._appendPreOrPostMatch(preMatch, regexp);
        if ((quoteCount%2) === 1) {
            regexp.append(match[0]);
            continue;
        }
        switch (match[0]) {
            case 'dddd': case 'ddd':
            case 'MMMM': case 'MMM':
                regexp.append("(\\D+)");
                break;
            case 'tt': case 't':
                regexp.append("(\\D*)");
                break;
            case 'yyyy':
                regexp.append("(\\d{4})");
                break;
            case 'fff':
                regexp.append("(\\d{3})");
                break;
            case 'ff':
                regexp.append("(\\d{2})");
                break;
            case 'f':
                regexp.append("(\\d)");
                break;
            case 'dd': case 'd':
            case 'MM': case 'M':
            case 'yy': case 'y':
            case 'HH': case 'H':
            case 'hh': case 'h':
            case 'mm': case 'm':
            case 'ss': case 's':
                regexp.append("(\\d\\d?)");
                break;
            case 'zzz':
                regexp.append("([+-]?\\d\\d?:\\d{2})");
                break;
            case 'zz': case 'z':
                regexp.append("([+-]?\\d\\d?)");
                break;
        }
        Array.add(groups, match[0]);
    }
    Date._appendPreOrPostMatch(expFormat.slice(index), regexp);
    regexp.append("$");
    var regexpStr = regexp.toString().replace(/\s+/g, "\\s+");
    var parseRegExp = {'regExp': regexpStr, 'groups': groups};
    dtf._parseRegExp[format] = parseRegExp;
    return parseRegExp;
Date._getTokenRegExp = function Date$_getTokenRegExp() {
    return /dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z/g;
Date.parseLocale = function Date$parseLocale(value, formats) {
    /// <summary locid="M:J#Date.parseLocale" />
    /// <param name="value" type="String"></param>
    /// <param name="formats" parameterArray="true" optional="true" mayBeNull="true"></param>
    /// <returns type="Date"></returns>
    var e = Function._validateParams(arguments, [
        {name: "value", type: String},
        {name: "formats", mayBeNull: true, optional: true, parameterArray: true}
    ]);
    if (e) throw e;
    return Date._parse(value, Sys.CultureInfo.CurrentCulture, arguments);
Date.parseInvariant = function Date$parseInvariant(value, formats) {
    /// <summary locid="M:J#Date.parseInvariant" />
    /// <param name="value" type="String"></param>
    /// <param name="formats" parameterArray="true" optional="true" mayBeNull="true"></param>
    /// <returns type="Date"></returns>
    var e = Function._validateParams(arguments, [
        {name: "value", type: String},
        {name: "formats", mayBeNull: true, optional: true, parameterArray: true}
    ]);
    if (e) throw e;
    return Date._parse(value, Sys.CultureInfo.InvariantCulture, arguments);
Date._parse = function Date$_parse(value, cultureInfo, args) {
    var custom = false;
    for (var i = 1, il = args.length; i < il; i++) {
        var format = args[i];
        if (format) {
            custom = true;
            var date = Date._parseExact(value, format, cultureInfo);
            if (date) return date;
        }
    }
    if (! custom) {
        var formats = cultureInfo._getDateTimeFormats();
        for (var i = 0, il = formats.length; i < il; i++) {
            var date = Date._parseExact(value, formats[i], cultureInfo);
            if (date) return date;
        }
    }
    return null;
Date._parseExact = function Date$_parseExact(value, format, cultureInfo) {
    value = value.trim();
    var dtf = cultureInfo.dateTimeFormat;
    var parseInfo = Date._getParseRegExp(dtf, format);
    var match = new RegExp(parseInfo.regExp).exec(value);
    if (match === null) return null;
    var groups = parseInfo.groups;
    var year = null, month = null, date = null, weekDay = null;
    var hour = 0, min = 0, sec = 0, msec = 0, tzMinOffset = null;
    var pmHour = false;
    for (var j = 0, jl = groups.length; j < jl; j++) {
        var matchGroup = match[j+1];
        if (matchGroup) {
            switch (groups[j]) {
                case 'dd': case 'd':
                    date = parseInt(matchGroup, 10);
                    if ((date < 1) || (date > 31)) return null;
                    break;
                case 'MMMM':
                    month = cultureInfo._getMonthIndex(matchGroup);
                    if ((month < 0) || (month > 11)) return null;
                    break;
                case 'MMM':
                    month = cultureInfo._getAbbrMonthIndex(matchGroup);
                    if ((month < 0) || (month > 11)) return null;
                    break;
                case 'M': case 'MM':
                    var month = parseInt(matchGroup, 10) - 1;
                    if ((month < 0) || (month > 11)) return null;
                    break;
                case 'y': case 'yy':
                    year = Date._expandYear(dtf,parseInt(matchGroup, 10));
                    if ((year < 0) || (year > 9999)) return null;
                    break;
                case 'yyyy':
                    year = parseInt(matchGroup, 10);
                    if ((year < 0) || (year > 9999)) return null;
                    break;
                case 'h': case 'hh':
                    hour = parseInt(matchGroup, 10);
                    if (hour === 12) hour = 0;
                    if ((hour < 0) || (hour > 11)) return null;
                    break;
                case 'H': case 'HH':
                    hour = parseInt(matchGroup, 10);
                    if ((hour < 0) || (hour > 23)) return null;
                    break;
                case 'm': case 'mm':
                    min = parseInt(matchGroup, 10);
                    if ((min < 0) || (min > 59)) return null;
                    break;
                case 's': case 'ss':
                    sec = parseInt(matchGroup, 10);
                    if ((sec < 0) || (sec > 59)) return null;
                    break;
                case 'tt': case 't':
                    var upperToken = matchGroup.toUpperCase();
                    pmHour = (upperToken === dtf.PMDesignator.toUpperCase());
                    if (!pmHour && (upperToken !== dtf.AMDesignator.toUpperCase())) return null;
                    break;
                case 'f':
                    msec = parseInt(matchGroup, 10) * 100;
                    if ((msec < 0) || (msec > 999)) return null;
                    break;
                case 'ff':
                    msec = parseInt(matchGroup, 10) * 10;
                    if ((msec < 0) || (msec > 999)) return null;
                    break;
                case 'fff':
                    msec = parseInt(matchGroup, 10);
                    if ((msec < 0) || (msec > 999)) return null;
                    break;
                case 'dddd':
                    weekDay = cultureInfo._getDayIndex(matchGroup);
                    if ((weekDay < 0) || (weekDay > 6)) return null;
                    break;
                case 'ddd':
                    weekDay = cultureInfo._getAbbrDayIndex(matchGroup);
                    if ((weekDay < 0) || (weekDay > 6)) return null;
                    break;
                case 'zzz':
                    var offsets = matchGroup.split(/:/);
                    if (offsets.length !== 2) return null;
                    var hourOffset = parseInt(offsets[0], 10);
                    if ((hourOffset < -12) || (hourOffset > 13)) return null;
                    var minOffset = parseInt(offsets[1], 10);
                    if ((minOffset < 0) || (minOffset > 59)) return null;
                    tzMinOffset = (hourOffset * 60) + (matchGroup.startsWith('-')? -minOffset : minOffset);
                    break;
                case 'z': case 'zz':
                    var hourOffset = parseInt(matchGroup, 10);
                    if ((hourOffset < -12) || (hourOffset > 13)) return null;
                    tzMinOffset = hourOffset * 60;
                    break;
            }
        }
    }
    var result = new Date();
    if (year === null) {
        year = result.getFullYear();
    }
    if (month === null) {
        month = result.getMonth();
    }
    if (date === null) {
        date = result.getDate();
    }
    result.setFullYear(year, month, date);
    if (result.getDate() !== date) return null;
    if ((weekDay !== null) && (result.getDay() !== weekDay)) {
        return null;
    }
    if (pmHour && (hour < 12)) {
        hour += 12;
    }
    result.setHours(hour, min, sec, msec);
    if (tzMinOffset !== null) {
        var adjustedMin = result.getMinutes() - (tzMinOffset + result.getTimezoneOffset());
        result.setHours(result.getHours() + parseInt(adjustedMin/60, 10), adjustedMin%60);
    }
    return result;
Date.prototype.format = function Date$format(format) {
    /// <summary locid="M:J#Date.format" />
    /// <param name="format" type="String"></param>
    /// <returns type="String"></returns>
    var e = Function._validateParams(arguments, [
        {name: "format", type: String}
    ]);
    if (e) throw e;
    return this._toFormattedString(format, Sys.CultureInfo.InvariantCulture);
Date.prototype.localeFormat = function Date$localeFormat(format) {
    /// <summary locid="M:J#Date.localeFormat" />
    /// <param name="format" type="String"></param>
    /// <returns type="String"></returns>
    var e = Function._validateParams(arguments, [
        {name: "format", type: String}
    ]);
    if (e) throw e;
    return this._toFormattedString(format, Sys.CultureInfo.CurrentCulture);
Date.prototype._toFormattedString = function Date$_toFormattedString(format, cultureInfo) {
    if (!format || (format.length === 0) || (format === 'i')) {
        if (cultureInfo && (cultureInfo.name.length > 0)) {
            return this.toLocaleString();
        }
        else {
            return this.toString();
        }
    }
    var dtf = cultureInfo.dateTimeFormat;
    format = Date._expandFormat(dtf, format);
    var ret = new Sys.StringBuilder();
    var hour;
    function addLeadingZero(num) {
        if (num < 10) {
            return '0' + num;
        }
        return num.toString();
    }
    function addLeadingZeros(num) {
        if (num < 10) {
            return '00' + num;
        }
        if (num < 100) {
            return '0' + num;
        }
        return num.toString();
    }
    var quoteCount = 0;
    var tokenRegExp = Date._getTokenRegExp();
    for (;;) {
        var index = tokenRegExp.lastIndex;
        var ar = tokenRegExp.exec(format);
        var preMatch = format.slice(index, ar ? ar.index : format.length);
        quoteCount += Date._appendPreOrPostMatch(preMatch, ret);
        if (!ar) break;
        if ((quoteCount%2) === 1) {
            ret.append(ar[0]);
            continue;
        }
        switch (ar[0]) {
        case "dddd":
            ret.append(dtf.DayNames[this.getDay()]);
            break;
        case "ddd":
            ret.append(dtf.AbbreviatedDayNames[this.getDay()]);
            break;
        case "dd":
            ret.append(addLeadingZero(this.getDate()));
            break;
        case "d":
            ret.append(this.getDate());
            break;
        case "MMMM":
            ret.append(dtf.MonthNames[this.getMonth()]);
            break;
        case "MMM":
            ret.append(dtf.AbbreviatedMonthNames[this.getMonth()]);
            break;
        case "MM":
            ret.append(addLeadingZero(this.getMonth() + 1));
            break;
        case "M":
            ret.append(this.getMonth() + 1);
            break;
        case "yyyy":
            ret.append(this.getFullYear());
            break;
        case "yy":
            ret.append(addLeadingZero(this.getFullYear() % 100));
            break;
        case "y":
            ret.append(this.getFullYear() % 100);
            break;
        case "hh":
            hour = this.getHours() % 12;
            if (hour === 0) hour = 12;
            ret.append(addLeadingZero(hour));
            break;
        case "h":
            hour = this.getHours() % 12;
            if (hour === 0) hour = 12;
            ret.append(hour);
            break;
        case "HH":
            ret.append(addLeadingZero(this.getHours()));
            break;
        case "H":
            ret.append(this.getHours());
            break;
        case "mm":
            ret.append(addLeadingZero(this.getMinutes()));
            break;
        case "m":
            ret.append(this.getMinutes());
            break;
        case "ss":
            ret.append(addLeadingZero(this.getSeconds()));
            break;
        case "s":
            ret.append(this.getSeconds());
            break;
        case "tt":
            ret.append((this.getHours() < 12) ? dtf.AMDesignator : dtf.PMDesignator);
            break;
        case "t":
            ret.append(((this.getHours() < 12) ? dtf.AMDesignator : dtf.PMDesignator).charAt(0));
            break;
        case "f":
            ret.append(addLeadingZeros(this.getMilliseconds()).charAt(0));
            break;
        case "ff":
            ret.append(addLeadingZeros(this.getMilliseconds()).substr(0, 2));
            break;
        case "fff":
            ret.append(addLeadingZeros(this.getMilliseconds()));
            break;
        case "z":
            hour = this.getTimezoneOffset() / 60;
            ret.append(((hour <= 0) ? '+' : '-') + Math.floor(Math.abs(hour)));
            break;
        case "zz":
            hour = this.getTimezoneOffset() / 60;
            ret.append(((hour <= 0) ? '+' : '-') + addLeadingZero(Math.floor(Math.abs(hour))));
            break;
        case "zzz":
            hour = this.getTimezoneOffset() / 60;
            ret.append(((hour <= 0) ? '+' : '-') + addLeadingZero(Math.floor(Math.abs(hour))) +
                dtf.TimeSeparator + addLeadingZero(Math.abs(this.getTimezoneOffset() % 60)));
            break;
        }
    }
    return ret.toString();
Number.__typeName = 'Number';
Number.__class = true;
Number.parseLocale = function Number$parseLocale(value) {
    /// <summary locid="M:J#Number.parseLocale" />
    /// <param name="value" type="String"></param>
    /// <returns type="Number"></returns>
    var e = Function._validateParams(arguments, [
        {name: "value", type: String}
    ]);
    if (e) throw e;
    return Number._parse(value, Sys.CultureInfo.CurrentCulture);
Number.parseInvariant = function Number$parseInvariant(value) {
    /// <summary locid="M:J#Number.parseInvariant" />
    /// <param name="value" type="String"></param>
    /// <returns type="Number"></returns>
    var e = Function._validateParams(arguments, [
        {name: "value", type: String}
    ]);
    if (e) throw e;
    return Number._parse(value, Sys.CultureInfo.InvariantCulture);
Number._parse = function Number$_parse(value, cultureInfo) {
    value = value.trim();
    if (value.match(/^[+-]?infinity$/i)) {
        return parseFloat(value);
    }
    if (value.match(/^0x[a-f0-9]+$/i)) {
        return parseInt(value);
    }
    var numFormat = cultureInfo.numberFormat;
    var signInfo = Number._parseNumberNegativePattern(value, numFormat, numFormat.NumberNegativePattern);
    var sign = signInfo[0];
    var num = signInfo[1];
    if ((sign === '') && (numFormat.NumberNegativePattern !== 1)) {
        signInfo = Number._parseNumberNegativePattern(value, numFormat, 1);
        sign = signInfo[0];
        num = signInfo[1];
    }
    if (sign === '') sign = '+';
    var exponent;
    var intAndFraction;
    var exponentPos = num.indexOf('e');
    if (exponentPos < 0) exponentPos = num.indexOf('E');
    if (exponentPos < 0) {
        intAndFraction = num;
        exponent = null;
    }
    else {
        intAndFraction = num.substr(0, exponentPos);
        exponent = num.substr(exponentPos + 1);
    }
    var integer;
    var fraction;
    var decimalPos = intAndFraction.indexOf(numFormat.NumberDecimalSeparator);
    if (decimalPos < 0) {
        integer = intAndFraction;
        fraction = null;
    }
    else {
        integer = intAndFraction.substr(0, decimalPos);
        fraction = intAndFraction.substr(decimalPos + numFormat.NumberDecimalSeparator.length);
    }
    integer = integer.split(numFormat.NumberGroupSeparator).join('');
    var altNumGroupSeparator = numFormat.NumberGroupSeparator.replace(/\u00A0/g, " ");
    if (numFormat.NumberGroupSeparator !== altNumGroupSeparator) {
        integer = integer.split(altNumGroupSeparator).join('');
    }
    var p = sign + integer;
    if (fraction !== null) {
        p += '.' + fraction;
    }
    if (exponent !== null) {
        var expSignInfo = Number._parseNumberNegativePattern(exponent, numFormat, 1);
        if (expSignInfo[0] === '') {
            expSignInfo[0] = '+';
        }
        p += 'e' + expSignInfo[0] + expSignInfo[1];
    }
    if (p.match(/^[+-]?\d*\.?\d*(e[+-]?\d+)?$/)) {
        return parseFloat(p);
    }
    return Number.NaN;
Number._parseNumberNegativePattern = function Number$_parseNumberNegativePattern(value, numFormat, numberNegativePattern) {
    var neg = numFormat.NegativeSign;
    var pos = numFormat.PositiveSign;    
    switch (numberNegativePattern) {
        case 4: 
            neg = ' ' + neg;
            pos = ' ' + pos;
        case 3: 
            if (value.endsWith(neg)) {
                return ['-', value.substr(0, value.length - neg.length)];
            }
            else if (value.endsWith(pos)) {
                return ['+', value.substr(0, value.length - pos.length)];
            }
            break;
        case 2: 
            neg += ' ';
            pos += ' ';
        case 1: 
            if (value.startsWith(neg)) {
                return ['-', value.substr(neg.length)];
            }
            else if (value.startsWith(pos)) {
                return ['+', value.substr(pos.length)];
            }
            break;
        case 0: 
            if (value.startsWith('(') && value.endsWith(')')) {
                return ['-', value.substr(1, value.length - 2)];
            }
            break;
    }
    return ['', value];
Number.prototype.format = function Number$format(format) {
    /// <summary locid="M:J#Number.format" />
    /// <param name="format" type="String"></param>
    /// <returns type="String"></returns>
    var e = Function._validateParams(arguments, [
        {name: "format", type: String}
    ]);
    if (e) throw e;
    return this._toFormattedString(format, Sys.CultureInfo.InvariantCulture);
Number.prototype.localeFormat = function Number$localeFormat(format) {
    /// <summary locid="M:J#Number.localeFormat" />
    /// <param name="format" type="String"></param>
    /// <returns type="String"></returns>
    var e = Function._validateParams(arguments, [
        {name: "format", type: String}
    ]);
    if (e) throw e;
    return this._toFormattedString(format, Sys.CultureInfo.CurrentCulture);
Number.prototype._toFormattedString = function Number$_toFormattedString(format, cultureInfo) {
    if (!format || (format.length === 0) || (format === 'i')) {
        if (cultureInfo && (cultureInfo.name.length > 0)) {
            return this.toLocaleString();
        }
        else {
            return this.toString();
        }
    }
    var _percentPositivePattern = ["n %", "n%", "%n" ];
    var _percentNegativePattern = ["-n %", "-n%", "-%n"];
    var _numberNegativePattern = ["(n)","-n","- n","n-","n -"];
    var _currencyPositivePattern = ["$n","n$","$ n","n $"];
    var _currencyNegativePattern = ["($n)","-$n","$-n","$n-","(n$)","-n$","n-$","n$-","-n $","-$ n","n $-","$ n-","$ -n","n- $","($ n)","(n $)"];
    function zeroPad(str, count, left) {
        for (var l=str.length; l < count; l++) {
            str = (left ? ('0' + str) : (str + '0'));
        }
        return str;
    }
    function expandNumber(number, precision, groupSizes, sep, decimalChar) {
        
        var curSize = groupSizes[0];
        var curGroupIndex = 1;
        var factor = Math.pow(10, precision);
        var rounded = (Math.round(number * factor) / factor);
        if (!isFinite(rounded)) {
            rounded = number;
        }
        number = rounded;
        
        var numberString = number.toString();
        var right = "";
        var exponent;
        
        
        var split = numberString.split(/e/i);
        numberString = split[0];
        exponent = (split.length > 1 ? parseInt(split[1]) : 0);
        split = numberString.split('.');
        numberString = split[0];
        right = split.length > 1 ? split[1] : "";
        
        var l;
        if (exponent > 0) {
            right = zeroPad(right, exponent, false);
            numberString += right.slice(0, exponent);
            right = right.substr(exponent);
        }
        else if (exponent < 0) {
            exponent = -exponent;
            numberString = zeroPad(numberString, exponent+1, true);
            right = numberString.slice(-exponent, numberString.length) + right;
            numberString = numberString.slice(0, -exponent);
        }
        if (precision > 0) {
            if (right.length > precision) {
                right = right.slice(0, precision);
            }
            else {
                right = zeroPad(right, precision, false);
            }
            right = decimalChar + right;
        }
        else { 
            right = "";
        }
        var stringIndex = numberString.length-1;
        var ret = "";
        while (stringIndex >= 0) {
            if (curSize === 0 || curSize > stringIndex) {
                if (ret.length > 0)
                    return numberString.slice(0, stringIndex + 1) + sep + ret + right;
                else
                    return numberString.slice(0, stringIndex + 1) + right;
            }
            if (ret.length > 0)
                ret = numberString.slice(stringIndex - curSize + 1, stringIndex+1) + sep + ret;
            else
                ret = numberString.slice(stringIndex - curSize + 1, stringIndex+1);
            stringIndex -= curSize;
            if (curGroupIndex < groupSizes.length) {
                curSize = groupSizes[curGroupIndex];
                curGroupIndex++;
            }
        }
        return numberString.slice(0, stringIndex + 1) + sep + ret + right;
    }
    var nf = cultureInfo.numberFormat;
    var number = Math.abs(this);
    if (!format)
        format = "D";
    var precision = -1;
    if (format.length > 1) precision = parseInt(format.slice(1), 10);
    var pattern;
    switch (format.charAt(0)) {
    case "d":
    case "D":
        pattern = 'n';
        if (precision !== -1) {
            number = zeroPad(""+number, precision, true);
        }
        if (this < 0) number = -number;
        break;
    case "c":
    case "C":
        if (this < 0) pattern = _currencyNegativePattern[nf.CurrencyNegativePattern];
        else pattern = _currencyPositivePattern[nf.CurrencyPositivePattern];
        if (precision === -1) precision = nf.CurrencyDecimalDigits;
        number = expandNumber(Math.abs(this), precision, nf.CurrencyGroupSizes, nf.CurrencyGroupSeparator, nf.CurrencyDecimalSeparator);
        break;
    case "n":
    case "N":
        if (this < 0) pattern = _numberNegativePattern[nf.NumberNegativePattern];
        else pattern = 'n';
        if (precision === -1) precision = nf.NumberDecimalDigits;
        number = expandNumber(Math.abs(this), precision, nf.NumberGroupSizes, nf.NumberGroupSeparator, nf.NumberDecimalSeparator);
        break;
    case "p":
    case "P":
        if (this < 0) pattern = _percentNegativePattern[nf.PercentNegativePattern];
        else pattern = _percentPositivePattern[nf.PercentPositivePattern];
        if (precision === -1) precision = nf.PercentDecimalDigits;
        number = expandNumber(Math.abs(this) * 100, precision, nf.PercentGroupSizes, nf.PercentGroupSeparator, nf.PercentDecimalSeparator);
        break;
    default:
        throw Error.format(Sys.Res.formatBadFormatSpecifier);
    }
    var regex = /n|\$|-|%/g;
    var ret = "";
    for (;;) {
        var index = regex.lastIndex;
        var ar = regex.exec(pattern);
        ret += pattern.slice(index, ar ? ar.index : pattern.length);
        if (!ar)
            break;
        switch (ar[0]) {
        case "n":
            ret += number;
            break;
        case "$":
            ret += nf.CurrencySymbol;
            break;
        case "-":
            ret += nf.NegativeSign;
            break;
        case "%":
            ret += nf.PercentSymbol;
            break;
        }
    }
    return ret;
RegExp.__typeName = 'RegExp';
RegExp.__class = true;
Array.__typeName = 'Array';
Array.__class = true;
Array.add = Array.enqueue = function Array$enqueue(array, item) {
    /// <summary locid="M:J#Array.enqueue" />
    /// <param name="array" type="Array" elementMayBeNull="true"></param>
    /// <param name="item" mayBeNull="true"></param>
    var e = Function._validateParams(arguments, [
        {name: "array", type: Array, elementMayBeNull: true},
        {name: "item", mayBeNull: true}
    ]);
    if (e) throw e;
    array[array.length] = item;
Array.addRange = function Array$addRange(array, items) {
    /// <summary locid="M:J#Array.addRange" />
    /// <param name="array" type="Array" elementMayBeNull="true"></param>
    /// <param name="items" type="Array" elementMayBeNull="true"></param>
    var e = Function._validateParams(arguments, [
        {name: "array", type: Array, elementMayBeNull: true},
        {name: "items", type: Array, elementMayBeNull: true}
    ]);
    if (e) throw e;
    array.push.apply(array, items);
Array.clear = function Array$clear(array) {
    /// <summary locid="M:J#Array.clear" />
    /// <param name="array" type="Array" elementMayBeNull="true"></param>
    var e = Function._validateParams(arguments, [
        {name: "array", type: Array, elementMayBeNull: true}
    ]);
    if (e) throw e;
    array.length = 0;
Array.clone = function Array$clone(array) {
    /// <summary locid="M:J#Array.clone" />
    /// <param name="array" type="Array" elementMayBeNull="true"></param>
    /// <returns type="Array" elementMayBeNull="true"></returns>
    var e = Function._validateParams(arguments, [
        {name: "array", type: Array, elementMayBeNull: true}
    ]);
    if (e) throw e;
    if (array.length === 1) {
        return [array[0]];
    }
    else {
        return Array.apply(null, array);
    }
Array.contains = function Array$contains(array, item) {
    /// <summary locid="M:J#Array.contains" />
    /// <param name="array" type="Array" elementMayBeNull="true"></param>
    /// <param name="item" mayBeNull="true"></param>
    /// <returns type="Boolean"></returns>
    var e = Function._validateParams(arguments, [
        {name: "array", type: Array, elementMayBeNull: true},
        {name: "item", mayBeNull: true}
    ]);
    if (e) throw e;
    return (Array.indexOf(array, item) >= 0);
Array.dequeue = function Array$dequeue(array) {
    /// <summary locid="M:J#Array.dequeue" />
    /// <param name="array" type="Array" elementMayBeNull="true"></param>
    /// <returns mayBeNull="true"></returns>
    var e = Function._validateParams(arguments, [
        {name: "array", type: Array, elementMayBeNull: true}
    ]);
    if (e) throw e;
    return array.shift();
Array.forEach = function Array$forEach(array, method, instance) {
    /// <summary locid="M:J#Array.forEach" />
    /// <param name="array" type="Array" elementMayBeNull="true"></param>
    /// <param name="method" type="Function"></param>
    /// <param name="instance" optional="true" mayBeNull="true"></param>
    var e = Function._validateParams(arguments, [
        {name: "array", type: Array, elementMayBeNull: true},
        {name: "method", type: Function},
        {name: "instance", mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    for (var i = 0, l = array.length; i < l; i++) {
        var elt = array[i];
        if (typeof(elt) !== 'undefined') method.call(instance, elt, i, array);
    }
Array.indexOf = function Array$indexOf(array, item, start) {
    /// <summary locid="M:J#Array.indexOf" />
    /// <param name="array" type="Array" elementMayBeNull="true"></param>
    /// <param name="item" optional="true" mayBeNull="true"></param>
    /// <param name="start" optional="true" mayBeNull="true"></param>
    /// <returns type="Number"></returns>
    var e = Function._validateParams(arguments, [
        {name: "array", type: Array, elementMayBeNull: true},
        {name: "item", mayBeNull: true, optional: true},
        {name: "start", mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    if (typeof(item) === "undefined") return -1;
    var length = array.length;
    if (length !== 0) {
        start = start - 0;
        if (isNaN(start)) {
            start = 0;
        }
        else {
            if (isFinite(start)) {
                start = start - (start % 1);
            }
            if (start < 0) {
                start = Math.max(0, length + start);
            }
        }
        for (var i = start; i < length; i++) {
            if ((typeof(array[i]) !== "undefined") && (array[i] === item)) {
                return i;
            }
        }
    }
    return -1;
Array.insert = function Array$insert(array, index, item) {
    /// <summary locid="M:J#Array.insert" />
    /// <param name="array" type="Array" elementMayBeNull="true"></param>
    /// <param name="index" mayBeNull="true"></param>
    /// <param name="item" mayBeNull="true"></param>
    var e = Function._validateParams(arguments, [
        {name: "array", type: Array, elementMayBeNull: true},
        {name: "index", mayBeNull: true},
        {name: "item", mayBeNull: true}
    ]);
    if (e) throw e;
    array.splice(index, 0, item);
Array.parse = function Array$parse(value) {
    /// <summary locid="M:J#Array.parse" />
    /// <param name="value" type="String" mayBeNull="true"></param>
    /// <returns type="Array" elementMayBeNull="true"></returns>
    var e = Function._validateParams(arguments, [
        {name: "value", type: String, mayBeNull: true}
    ]);
    if (e) throw e;
    if (!value) return [];
    var v = eval(value);
    if (!Array.isInstanceOfType(v)) throw Error.argument('value', Sys.Res.arrayParseBadFormat);
    return v;
Array.remove = function Array$remove(array, item) {
    /// <summary locid="M:J#Array.remove" />
    /// <param name="array" type="Array" elementMayBeNull="true"></param>
    /// <param name="item" mayBeNull="true"></param>
    /// <returns type="Boolean"></returns>
    var e = Function._validateParams(arguments, [
        {name: "array", type: Array, elementMayBeNull: true},
        {name: "item", mayBeNull: true}
    ]);
    if (e) throw e;
    var index = Array.indexOf(array, item);
    if (index >= 0) {
        array.splice(index, 1);
    }
    return (index >= 0);
Array.removeAt = function Array$removeAt(array, index) {
    /// <summary locid="M:J#Array.removeAt" />
    /// <param name="array" type="Array" elementMayBeNull="true"></param>
    /// <param name="index" mayBeNull="true"></param>
    var e = Function._validateParams(arguments, [
        {name: "array", type: Array, elementMayBeNull: true},
        {name: "index", mayBeNull: true}
    ]);
    if (e) throw e;
    array.splice(index, 1);
if (!window) this.window = this;
window.Type = Function;
Type.__fullyQualifiedIdentifierRegExp = new RegExp("^[^.0-9 \\s|,;:&*=+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\]([^ \\s|,;:&*=+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\]*[^. \\s|,;:&*=+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\])?$", "i");
Type.__identifierRegExp = new RegExp("^[^.0-9 \\s|,;:&*=+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\][^. \\s|,;:&*=+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\]*$", "i");
Type.prototype.callBaseMethod = function Type$callBaseMethod(instance, name, baseArguments) {
    /// <summary locid="M:J#Type.callBaseMethod" />
    /// <param name="instance"></param>
    /// <param name="name" type="String"></param>
    /// <param name="baseArguments" type="Array" optional="true" mayBeNull="true" elementMayBeNull="true"></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: "instance"},
        {name: "name", type: String},
        {name: "baseArguments", type: Array, mayBeNull: true, optional: true, elementMayBeNull: true}
    ]);
    if (e) throw e;
    var baseMethod = this.getBaseMethod(instance, name);
    if (!baseMethod) throw Error.invalidOperation(String.format(Sys.Res.methodNotFound, name));
    if (!baseArguments) {
        return baseMethod.apply(instance);
    }
    else {
        return baseMethod.apply(instance, baseArguments);
    }
Type.prototype.getBaseMethod = function Type$getBaseMethod(instance, name) {
    /// <summary locid="M:J#Type.getBaseMethod" />
    /// <param name="instance"></param>
    /// <param name="name" type="String"></param>
    /// <returns type="Function" mayBeNull="true"></returns>
    var e = Function._validateParams(arguments, [
        {name: "instance"},
        {name: "name", type: String}
    ]);
    if (e) throw e;
    if (!this.isInstanceOfType(instance)) throw Error.argumentType('instance', Object.getType(instance), this);
    var baseType = this.getBaseType();
    if (baseType) {
        var baseMethod = baseType.prototype[name];
        return (baseMethod instanceof Function) ? baseMethod : null;
    }
    return null;
Type.prototype.getBaseType = function Type$getBaseType() {
    /// <summary locid="M:J#Type.getBaseType" />
    /// <returns type="Type" mayBeNull="true"></returns>
    if (arguments.length !== 0) throw Error.parameterCount();
    return (typeof(this.__baseType) === "undefined") ? null : this.__baseType;
Type.prototype.getInterfaces = function Type$getInterfaces() {
    /// <summary locid="M:J#Type.getInterfaces" />
    /// <returns type="Array" elementType="Type" mayBeNull="false" elementMayBeNull="false"></returns>
    if (arguments.length !== 0) throw Error.parameterCount();
    var result = [];
    var type = this;
    while(type) {
        var interfaces = type.__interfaces;
        if (interfaces) {
            for (var i = 0, l = interfaces.length; i < l; i++) {
                var interfaceType = interfaces[i];
                if (!Array.contains(result, interfaceType)) {
                    result[result.length] = interfaceType;
                }
            }
        }
        type = type.__baseType;
    }
    return result;
Type.prototype.getName = function Type$getName() {
    /// <summary locid="M:J#Type.getName" />
    /// <returns type="String"></returns>
    if (arguments.length !== 0) throw Error.parameterCount();
    return (typeof(this.__typeName) === "undefined") ? "" : this.__typeName;
Type.prototype.implementsInterface = function Type$implementsInterface(interfaceType) {
    /// <summary locid="M:J#Type.implementsInterface" />
    /// <param name="interfaceType" type="Type"></param>
    /// <returns type="Boolean"></returns>
    var e = Function._validateParams(arguments, [
        {name: "interfaceType", type: Type}
    ]);
    if (e) throw e;
    this.resolveInheritance();
    var interfaceName = interfaceType.getName();
    var cache = this.__interfaceCache;
    if (cache) {
        var cacheEntry = cache[interfaceName];
        if (typeof(cacheEntry) !== 'undefined') return cacheEntry;
    }
    else {
        cache = this.__interfaceCache = {};
    }
    var baseType = this;
    while (baseType) {
        var interfaces = baseType.__interfaces;
        if (interfaces) {
            if (Array.indexOf(interfaces, interfaceType) !== -1) {
                return cache[interfaceName] = true;
            }
        }
        baseType = baseType.__baseType;
    }
    return cache[interfaceName] = false;
Type.prototype.inheritsFrom = function Type$inheritsFrom(parentType) {
    /// <summary locid="M:J#Type.inheritsFrom" />
    /// <param name="parentType" type="Type"></param>
    /// <returns type="Boolean"></returns>
    var e = Function._validateParams(arguments, [
        {name: "parentType", type: Type}
    ]);
    if (e) throw e;
    this.resolveInheritance();
    var baseType = this.__baseType;
    while (baseType) {
        if (baseType === parentType) {
            return true;
        }
        baseType = baseType.__baseType;
    }
    return false;
Type.prototype.initializeBase = function Type$initializeBase(instance, baseArguments) {
    /// <summary locid="M:J#Type.initializeBase" />
    /// <param name="instance"></param>
    /// <param name="baseArguments" type="Array" optional="true" mayBeNull="true" elementMayBeNull="true"></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: "instance"},
        {name: "baseArguments", type: Array, mayBeNull: true, optional: true, elementMayBeNull: true}
    ]);
    if (e) throw e;
    if (!this.isInstanceOfType(instance)) throw Error.argumentType('instance', Object.getType(instance), this);
    this.resolveInheritance();
    if (this.__baseType) {
        if (!baseArguments) {
            this.__baseType.apply(instance);
        }
        else {
            this.__baseType.apply(instance, baseArguments);
        }
    }
    return instance;
Type.prototype.isImplementedBy = function Type$isImplementedBy(instance) {
    /// <summary locid="M:J#Type.isImplementedBy" />
    /// <param name="instance" mayBeNull="true"></param>
    /// <returns type="Boolean"></returns>
    var e = Function._validateParams(arguments, [
        {name: "instance", mayBeNull: true}
    ]);
    if (e) throw e;
    if (typeof(instance) === "undefined" || instance === null) return false;
    var instanceType = Object.getType(instance);
    return !!(instanceType.implementsInterface && instanceType.implementsInterface(this));
Type.prototype.isInstanceOfType = function Type$isInstanceOfType(instance) {
    /// <summary locid="M:J#Type.isInstanceOfType" />
    /// <param name="instance" mayBeNull="true"></param>
    /// <returns type="Boolean"></returns>
    var e = Function._validateParams(arguments, [
        {name: "instance", mayBeNull: true}
    ]);
    if (e) throw e;
    if (typeof(instance) === "undefined" || instance === null) return false;
    if (instance instanceof this) return true;
    var instanceType = Object.getType(instance);
    return !!(instanceType === this) ||
           (instanceType.inheritsFrom && instanceType.inheritsFrom(this)) ||
           (instanceType.implementsInterface && instanceType.implementsInterface(this));
Type.prototype.registerClass = function Type$registerClass(typeName, baseType, interfaceTypes) {
    /// <summary locid="M:J#Type.registerClass" />
    /// <param name="typeName" type="String"></param>
    /// <param name="baseType" type="Type" optional="true" mayBeNull="true"></param>
    /// <param name="interfaceTypes" parameterArray="true" type="Type"></param>
    /// <returns type="Type"></returns>
    var e = Function._validateParams(arguments, [
        {name: "typeName", type: String},
        {name: "baseType", type: Type, mayBeNull: true, optional: true},
        {name: "interfaceTypes", type: Type, parameterArray: true}
    ]);
    if (e) throw e;
    if (!Type.__fullyQualifiedIdentifierRegExp.test(typeName)) throw Error.argument('typeName', Sys.Res.notATypeName);
    var parsedName;
    try {
        parsedName = eval(typeName);
    }
    catch(e) {
        throw Error.argument('typeName', Sys.Res.argumentTypeName);
    }
    if (parsedName !== this) throw Error.argument('typeName', Sys.Res.badTypeName);
    if (Sys.__registeredTypes[typeName]) throw Error.invalidOperation(String.format(Sys.Res.typeRegisteredTwice, typeName));
    if ((arguments.length > 1) && (typeof(baseType) === 'undefined')) throw Error.argumentUndefined('baseType');
    if (baseType && !baseType.__class) throw Error.argument('baseType', Sys.Res.baseNotAClass);
    this.prototype.constructor = this;
    this.__typeName = typeName;
    this.__class = true;
    if (baseType) {
        this.__baseType = baseType;
        this.__basePrototypePending = true;
    }
    Sys.__upperCaseTypes[typeName.toUpperCase()] = this;
    if (interfaceTypes) {
        this.__interfaces = [];
        this.resolveInheritance();
        for (var i = 2, l = arguments.length; i < l; i++) {
            var interfaceType = arguments[i];
            if (!interfaceType.__interface) throw Error.argument('interfaceTypes[' + (i - 2) + ']', Sys.Res.notAnInterface);
            for (var methodName in interfaceType.prototype) {
                var method = interfaceType.prototype[methodName];
                if (!this.prototype[methodName]) {
                    this.prototype[methodName] = method;
                }
            }
            this.__interfaces.push(interfaceType);
        }
    }
    Sys.__registeredTypes[typeName] = true;
    return this;
Type.prototype.registerInterface = function Type$registerInterface(typeName) {
    /// <summary locid="M:J#Type.registerInterface" />
    /// <param name="typeName" type="String"></param>
    /// <returns type="Type"></returns>
    var e = Function._validateParams(arguments, [
        {name: "typeName", type: String}
    ]);
    if (e) throw e;
    if (!Type.__fullyQualifiedIdentifierRegExp.test(typeName)) throw Error.argument('typeName', Sys.Res.notATypeName);
    var parsedName;
    try {
        parsedName = eval(typeName);
    }
    catch(e) {
        throw Error.argument('typeName', Sys.Res.argumentTypeName);
    }
    if (parsedName !== this) throw Error.argument('typeName', Sys.Res.badTypeName);
    if (Sys.__registeredTypes[typeName]) throw Error.invalidOperation(String.format(Sys.Res.typeRegisteredTwice, typeName));
    Sys.__upperCaseTypes[typeName.toUpperCase()] = this;
    this.prototype.constructor = this;
    this.__typeName = typeName;
    this.__interface = true;
    Sys.__registeredTypes[typeName] = true;
    return this;
Type.prototype.resolveInheritance = function Type$resolveInheritance() {
    /// <summary locid="M:J#Type.resolveInheritance" />
    if (arguments.length !== 0) throw Error.parameterCount();
    if (this.__basePrototypePending) {
        var baseType = this.__baseType;
        baseType.resolveInheritance();
        for (var memberName in baseType.prototype) {
            var memberValue = baseType.prototype[memberName];
            if (!this.prototype[memberName]) {
                this.prototype[memberName] = memberValue;
            }
        }
        delete this.__basePrototypePending;
    }
Type.getRootNamespaces = function Type$getRootNamespaces() {
    /// <summary locid="M:J#Type.getRootNamespaces" />
    /// <returns type="Array"></returns>
    if (arguments.length !== 0) throw Error.parameterCount();
    return Array.clone(Sys.__rootNamespaces);
Type.isClass = function Type$isClass(type) {
    /// <summary locid="M:J#Type.isClass" />
    /// <param name="type" mayBeNull="true"></param>
    /// <returns type="Boolean"></returns>
    var e = Function._validateParams(arguments, [
        {name: "type", mayBeNull: true}
    ]);
    if (e) throw e;
    if ((typeof(type) === 'undefined') || (type === null)) return false;
    return !!type.__class;
Type.isInterface = function Type$isInterface(type) {
    /// <summary locid="M:J#Type.isInterface" />
    /// <param name="type" mayBeNull="true"></param>
    /// <returns type="Boolean"></returns>
    var e = Function._validateParams(arguments, [
        {name: "type", mayBeNull: true}
    ]);
    if (e) throw e;
    if ((typeof(type) === 'undefined') || (type === null)) return false;
    return !!type.__interface;
Type.isNamespace = function Type$isNamespace(object) {
    /// <summary locid="M:J#Type.isNamespace" />
    /// <param name="object" mayBeNull="true"></param>
    /// <returns type="Boolean"></returns>
    var e = Function._validateParams(arguments, [
        {name: "object", mayBeNull: true}
    ]);
    if (e) throw e;
    if ((typeof(object) === 'undefined') || (object === null)) return false;
    return !!object.__namespace;
Type.parse = function Type$parse(typeName, ns) {
    /// <summary locid="M:J#Type.parse" />
    /// <param name="typeName" type="String" mayBeNull="true"></param>
    /// <param name="ns" optional="true" mayBeNull="true"></param>
    /// <returns type="Type" mayBeNull="true"></returns>
    var e = Function._validateParams(arguments, [
        {name: "typeName", type: String, mayBeNull: true},
        {name: "ns", mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var fn;
    if (ns) {
        fn = Sys.__upperCaseTypes[ns.getName().toUpperCase() + '.' + typeName.toUpperCase()];
        return fn || null;
    }
    if (!typeName) return null;
    if (!Type.__htClasses) {
        Type.__htClasses = {};
    }
    fn = Type.__htClasses[typeName];
    if (!fn) {
        fn = eval(typeName);
        if (typeof(fn) !== 'function') throw Error.argument('typeName', Sys.Res.notATypeName);
        Type.__htClasses[typeName] = fn;
    }
    return fn;
Type.registerNamespace = function Type$registerNamespace(namespacePath) {
    /// <summary locid="M:J#Type.registerNamespace" />
    /// <param name="namespacePath" type="String"></param>
    var e = Function._validateParams(arguments, [
        {name: "namespacePath", type: String}
    ]);
    if (e) throw e;
    if (!Type.__fullyQualifiedIdentifierRegExp.test(namespacePath)) throw Error.argument('namespacePath', Sys.Res.invalidNameSpace);
    var rootObject = window;
    var namespaceParts = namespacePath.split('.');
    for (var i = 0; i < namespaceParts.length; i++) {
        var currentPart = namespaceParts[i];
        var ns = rootObject[currentPart];
        if (ns && !ns.__namespace) {
            throw Error.invalidOperation(String.format(Sys.Res.namespaceContainsObject, namespaceParts.splice(0, i + 1).join('.')));
        }
        if (!ns) {
            ns = rootObject[currentPart] = {
                __namespace: true,
                __typeName: namespaceParts.slice(0, i + 1).join('.')
            };
            if (i === 0) {
                Sys.__rootNamespaces[Sys.__rootNamespaces.length] = ns;
            }
            var parsedName;
            try {
                parsedName = eval(ns.__typeName);
            }
            catch(e) {
                parsedName = null;
            }
            if (parsedName !== ns) {
                delete rootObject[currentPart];
                throw Error.argument('namespacePath', Sys.Res.invalidNameSpace);
            }
            ns.getName = function ns$getName() {return this.__typeName;}
        }
        rootObject = ns;
    }
window.Sys = {
    __namespace: true,
    __typeName: "Sys",
    getName: function() {return "Sys";},
    __upperCaseTypes: {}
Sys.__rootNamespaces = [Sys];
Sys.__registeredTypes = {};
Sys.IDisposable = function Sys$IDisposable() {
    throw Error.notImplemented();
    function Sys$IDisposable$dispose() {
        throw Error.notImplemented();
    }
Sys.IDisposable.prototype = {
    dispose: Sys$IDisposable$dispose
Sys.IDisposable.registerInterface('Sys.IDisposable');
Sys.StringBuilder = function Sys$StringBuilder(initialText) {
    /// <summary locid="M:J#Sys.StringBuilder.#ctor" />
    /// <param name="initialText" optional="true" mayBeNull="true"></param>
    var e = Function._validateParams(arguments, [
        {name: "initialText", mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    this._parts = (typeof(initialText) !== 'undefined' && initialText !== null && initialText !== '') ?
        [initialText.toString()] : [];
    this._value = {};
    this._len = 0;
    function Sys$StringBuilder$append(text) {
        /// <summary locid="M:J#Sys.StringBuilder.append" />
        /// <param name="text" mayBeNull="true"></param>
        var e = Function._validateParams(arguments, [
            {name: "text", mayBeNull: true}
        ]);
        if (e) throw e;
        this._parts[this._parts.length] = text;
    }
    function Sys$StringBuilder$appendLine(text) {
        /// <summary locid="M:J#Sys.StringBuilder.appendLine" />
        /// <param name="text" optional="true" mayBeNull="true"></param>
        var e = Function._validateParams(arguments, [
            {name: "text", mayBeNull: true, optional: true}
        ]);
        if (e) throw e;
        this._parts[this._parts.length] =
            ((typeof(text) === 'undefined') || (text === null) || (text === '')) ?
            '\r\n' : text + '\r\n';
    }
    function Sys$StringBuilder$clear() {
        /// <summary locid="M:J#Sys.StringBuilder.clear" />
        if (arguments.length !== 0) throw Error.parameterCount();
        this._parts = [];
        this._value = {};
        this._len = 0;
    }
    function Sys$StringBuilder$isEmpty() {
        /// <summary locid="M:J#Sys.StringBuilder.isEmpty" />
        /// <returns type="Boolean"></returns>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (this._parts.length === 0) return true;
        return this.toString() === '';
    }
    function Sys$StringBuilder$toString(separator) {
        /// <summary locid="M:J#Sys.StringBuilder.toString" />
        /// <param name="separator" type="String" optional="true" mayBeNull="true"></param>
        /// <returns type="String"></returns>
        var e = Function._validateParams(arguments, [
            {name: "separator", type: String, mayBeNull: true, optional: true}
        ]);
        if (e) throw e;
        separator = separator || '';
        var parts = this._parts;
        if (this._len !== parts.length) {
            this._value = {};
            this._len = parts.length;
        }
        var val = this._value;
        if (typeof(val[separator]) === 'undefined') {
            if (separator !== '') {
                for (var i = 0; i < parts.length;) {
                    if ((typeof(parts[i]) === 'undefined') || (parts[i] === '') || (parts[i] === null)) {
                        parts.splice(i, 1);
                    }
                    else {
                        i++;
                    }
                }
            }
            val[separator] = this._parts.join(separator);
        }
        return val[separator];
    }
Sys.StringBuilder.prototype = {
    append: Sys$StringBuilder$append,
    appendLine: Sys$StringBuilder$appendLine,
    clear: Sys$StringBuilder$clear,
    isEmpty: Sys$StringBuilder$isEmpty,
    toString: Sys$StringBuilder$toString
Sys.StringBuilder.registerClass('Sys.StringBuilder');
if (!window.XMLHttpRequest) {
    window.XMLHttpRequest = function window$XMLHttpRequest() {
        var progIDs = [ 'Msxml2.XMLHTTP.3.0', 'Msxml2.XMLHTTP' ];
        for (var i = 0, l = progIDs.length; i < l; i++) {
            try {
                return new ActiveXObject(progIDs[i]);
            }
            catch (ex) {
            }
        }
        return null;
    }
Sys.Browser = {};
Sys.Browser.InternetExplorer = {};
Sys.Browser.Firefox = {};
Sys.Browser.Safari = {};
Sys.Browser.Opera = {};
Sys.Browser.agent = null;
Sys.Browser.hasDebuggerStatement = false;
Sys.Browser.name = navigator.appName;
Sys.Browser.version = parseFloat(navigator.appVersion);
Sys.Browser.documentMode = 0;
if (navigator.userAgent.indexOf(' MSIE ') > -1) {
    Sys.Browser.agent = Sys.Browser.InternetExplorer;
    Sys.Browser.version = parseFloat(navigator.userAgent.match(/MSIE (\d+\.\d+)/)[1]);
    if (Sys.Browser.version >= 8) {
        if (document.documentMode >= 7) {
            Sys.Browser.documentMode = document.documentMode;    
        }
    }
    Sys.Browser.hasDebuggerStatement = true;
else if (navigator.userAgent.indexOf(' Firefox/') > -1) {
    Sys.Browser.agent = Sys.Browser.Firefox;
    Sys.Browser.version = parseFloat(navigator.userAgent.match(/ Firefox\/(\d+\.\d+)/)[1]);
    Sys.Browser.name = 'Firefox';
    Sys.Browser.hasDebuggerStatement = true;
else if (navigator.userAgent.indexOf(' AppleWebKit/') > -1) {
    Sys.Browser.agent = Sys.Browser.Safari;
    Sys.Browser.version = parseFloat(navigator.userAgent.match(/ AppleWebKit\/(\d+(\.\d+)?)/)[1]);
    Sys.Browser.name = 'Safari';
else if (navigator.userAgent.indexOf('Opera/') > -1) {
    Sys.Browser.agent = Sys.Browser.Opera;
Type.registerNamespace('Sys.UI');
Sys._Debug = function Sys$_Debug() {
    /// <summary locid="M:J#Sys.Debug.#ctor" />
    /// <field name="isDebug" type="Boolean" locid="F:J#Sys.Debug.isDebug"></field>
    if (arguments.length !== 0) throw Error.parameterCount();
    function Sys$_Debug$_appendConsole(text) {
        if ((typeof(Debug) !== 'undefined') && Debug.writeln) {
            Debug.writeln(text);
        }
        if (window.console && window.console.log) {
            window.console.log(text);
        }
        if (window.opera) {
            window.opera.postError(text);
        }
        if (window.debugService) {
            window.debugService.trace(text);
        }
    }
    function Sys$_Debug$_appendTrace(text) {
        var traceElement = document.getElementById('TraceConsole');
        if (traceElement && (traceElement.tagName.toUpperCase() === 'TEXTAREA')) {
            traceElement.value += text + '\n';
        }
    }
    function Sys$_Debug$assert(condition, message, displayCaller) {
        /// <summary locid="M:J#Sys.Debug.assert" />
        /// <param name="condition" type="Boolean"></param>
        /// <param name="message" type="String" optional="true" mayBeNull="true"></param>
        /// <param name="displayCaller" type="Boolean" optional="true"></param>
        var e = Function._validateParams(arguments, [
            {name: "condition", type: Boolean},
            {name: "message", type: String, mayBeNull: true, optional: true},
            {name: "displayCaller", type: Boolean, optional: true}
        ]);
        if (e) throw e;
        if (!condition) {
            message = (displayCaller && this.assert.caller) ?
                String.format(Sys.Res.assertFailedCaller, message, this.assert.caller) :
                String.format(Sys.Res.assertFailed, message);
            if (confirm(String.format(Sys.Res.breakIntoDebugger, message))) {
                this.fail(message);
            }
        }
    }
    function Sys$_Debug$clearTrace() {
        /// <summary locid="M:J#Sys.Debug.clearTrace" />
        if (arguments.length !== 0) throw Error.parameterCount();
        var traceElement = document.getElementById('TraceConsole');
        if (traceElement && (traceElement.tagName.toUpperCase() === 'TEXTAREA')) {
            traceElement.value = '';
        }
    }
    function Sys$_Debug$fail(message) {
        /// <summary locid="M:J#Sys.Debug.fail" />
        /// <param name="message" type="String" mayBeNull="true"></param>
        var e = Function._validateParams(arguments, [
            {name: "message", type: String, mayBeNull: true}
        ]);
        if (e) throw e;
        this._appendConsole(message);
        if (Sys.Browser.hasDebuggerStatement) {
            eval('debugger');
        }
    }
    function Sys$_Debug$trace(text) {
        /// <summary locid="M:J#Sys.Debug.trace" />
        /// <param name="text"></param>
        var e = Function._validateParams(arguments, [
            {name: "text"}
        ]);
        if (e) throw e;
        this._appendConsole(text);
        this._appendTrace(text);
    }
    function Sys$_Debug$traceDump(object, name) {
        /// <summary locid="M:J#Sys.Debug.traceDump" />
        /// <param name="object" mayBeNull="true"></param>
        /// <param name="name" type="String" mayBeNull="true" optional="true"></param>
        var e = Function._validateParams(arguments, [
            {name: "object", mayBeNull: true},
            {name: "name", type: String, mayBeNull: true, optional: true}
        ]);
        if (e) throw e;
        var text = this._traceDump(object, name, true);
    }
    function Sys$_Debug$_traceDump(object, name, recursive, indentationPadding, loopArray) {
        name = name? name : 'traceDump';
        indentationPadding = indentationPadding? indentationPadding : '';
        if (object === null) {
            this.trace(indentationPadding + name + ': null');
            return;
        }
        switch(typeof(object)) {
            case 'undefined':
                this.trace(indentationPadding + name + ': Undefined');
                break;
            case 'number': case 'string': case 'boolean':
                this.trace(indentationPadding + name + ': ' + object);
                break;
            default:
                if (Date.isInstanceOfType(object) || RegExp.isInstanceOfType(object)) {
                    this.trace(indentationPadding + name + ': ' + object.toString());
                    break;
                }
                if (!loopArray) {
                    loopArray = [];
                }
                else if (Array.contains(loopArray, object)) {
                    this.trace(indentationPadding + name + ': ...');
                    return;
                }
                Array.add(loopArray, object);
                if ((object == window) || (object === document) ||
                    (window.HTMLElement && (object instanceof HTMLElement)) ||
                    (typeof(object.nodeName) === 'string')) {
                    var tag = object.tagName? object.tagName : 'DomElement';
                    if (object.id) {
                        tag += ' - ' + object.id;
                    }
                    this.trace(indentationPadding + name + ' {' +  tag + '}');
                }
                else {
                    var typeName = Object.getTypeName(object);
                    this.trace(indentationPadding + name + (typeof(typeName) === 'string' ? ' {' + typeName + '}' : ''));
                    if ((indentationPadding === '') || recursive) {
                        indentationPadding += "    ";
                        var i, length, properties, p, v;
                        if (Array.isInstanceOfType(object)) {
                            length = object.length;
                            for (i = 0; i < length; i++) {
                                this._traceDump(object[i], '[' + i + ']', recursive, indentationPadding, loopArray);
                            }
                        }
                        else {
                            for (p in object) {
                                v = object[p];
                                if (!Function.isInstanceOfType(v)) {
                                    this._traceDump(v, p, recursive, indentationPadding, loopArray);
                                }
                            }
                        }
                    }
                }
                Array.remove(loopArray, object);
        }
    }
Sys._Debug.prototype = {
    _appendConsole: Sys$_Debug$_appendConsole,
    _appendTrace: Sys$_Debug$_appendTrace,
    assert: Sys$_Debug$assert,
    clearTrace: Sys$_Debug$clearTrace,
    fail: Sys$_Debug$fail,
    trace: Sys$_Debug$trace,
    traceDump: Sys$_Debug$traceDump,
    _traceDump: Sys$_Debug$_traceDump
Sys._Debug.registerClass('Sys._Debug');
Sys.Debug = new Sys._Debug();
    Sys.Debug.isDebug = true;
function Sys$Enum$parse(value, ignoreCase) {
    /// <summary locid="M:J#Sys.Enum.parse" />
    /// <param name="value" type="String"></param>
    /// <param name="ignoreCase" type="Boolean" optional="true"></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: "value", type: String},
        {name: "ignoreCase", type: Boolean, optional: true}
    ]);
    if (e) throw e;
    var values, parsed, val;
    if (ignoreCase) {
        values = this.__lowerCaseValues;
        if (!values) {
            this.__lowerCaseValues = values = {};
            var prototype = this.prototype;
            for (var name in prototype) {
                values[name.toLowerCase()] = prototype[name];
            }
        }
    }
    else {
        values = this.prototype;
    }
    if (!this.__flags) {
        val = (ignoreCase ? value.toLowerCase() : value);
        parsed = values[val.trim()];
        if (typeof(parsed) !== 'number') throw Error.argument('value', String.format(Sys.Res.enumInvalidValue, value, this.__typeName));
        return parsed;
    }
    else {
        var parts = (ignoreCase ? value.toLowerCase() : value).split(',');
        var v = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
            var part = parts[i].trim();
            parsed = values[part];
            if (typeof(parsed) !== 'number') throw Error.argument('value', String.format(Sys.Res.enumInvalidValue, value.split(',')[i].trim(), this.__typeName));
            v |= parsed;
        }
        return v;
    }
function Sys$Enum$toString(value) {
    /// <summary locid="M:J#Sys.Enum.toString" />
    /// <param name="value" optional="true" mayBeNull="true"></param>
    /// <returns type="String"></returns>
    var e = Function._validateParams(arguments, [
        {name: "value", mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    if ((typeof(value) === 'undefined') || (value === null)) return this.__string;
    if ((typeof(value) != 'number') || ((value % 1) !== 0)) throw Error.argumentType('value', Object.getType(value), this);
    var values = this.prototype;
    var i;
    if (!this.__flags || (value === 0)) {
        for (i in values) {
            if (values[i] === value) {
                return i;
            }
        }
    }
    else {
        var sorted = this.__sortedValues;
        if (!sorted) {
            sorted = [];
            for (i in values) {
                sorted[sorted.length] = {key: i, value: values[i]};
            }
            sorted.sort(function(a, b) {
                return a.value - b.value;
            });
            this.__sortedValues = sorted;
        }
        var parts = [];
        var v = value;
        for (i = sorted.length - 1; i >= 0; i--) {
            var kvp = sorted[i];
            var vali = kvp.value;
            if (vali === 0) continue;
            if ((vali & value) === vali) {
                parts[parts.length] = kvp.key;
                v -= vali;
                if (v === 0) break;
            }
        }
        if (parts.length && v === 0) return parts.reverse().join(', ');
    }
    throw Error.argumentOutOfRange('value', value, String.format(Sys.Res.enumInvalidValue, value, this.__typeName));
Type.prototype.registerEnum = function Type$registerEnum(name, flags) {
    /// <summary locid="M:J#Sys.UI.LineType.#ctor" />
    /// <param name="name" type="String"></param>
    /// <param name="flags" type="Boolean" optional="true"></param>
    var e = Function._validateParams(arguments, [
        {name: "name", type: String},
        {name: "flags", type: Boolean, optional: true}
    ]);
    if (e) throw e;
    if (!Type.__fullyQualifiedIdentifierRegExp.test(name)) throw Error.argument('name', Sys.Res.notATypeName);
    var parsedName;
    try {
        parsedName = eval(name);
    }
    catch(e) {
        throw Error.argument('name', Sys.Res.argumentTypeName);
    }
    if (parsedName !== this) throw Error.argument('name', Sys.Res.badTypeName);
    if (Sys.__registeredTypes[name]) throw Error.invalidOperation(String.format(Sys.Res.typeRegisteredTwice, name));
    for (var i in this.prototype) {
        var val = this.prototype[i];
        if (!Type.__identifierRegExp.test(i)) throw Error.invalidOperation(String.format(Sys.Res.enumInvalidValueName, i));
        if (typeof(val) !== 'number' || (val % 1) !== 0) throw Error.invalidOperation(Sys.Res.enumValueNotInteger);
        if (typeof(this[i]) !== 'undefined') throw Error.invalidOperation(String.format(Sys.Res.enumReservedName, i));
    }
    Sys.__upperCaseTypes[name.toUpperCase()] = this;
    for (var i in this.prototype) {
        this[i] = this.prototype[i];
    }
    this.__typeName = name;
    this.parse = Sys$Enum$parse;
    this.__string = this.toString();
    this.toString = Sys$Enum$toString;
    this.__flags = flags;
    this.__enum = true;
    Sys.__registeredTypes[name] = true;
Type.isEnum = function Type$isEnum(type) {
    /// <summary locid="M:J#Type.isEnum" />
    /// <param name="type" mayBeNull="true"></param>
    /// <returns type="Boolean"></returns>
    var e = Function._validateParams(arguments, [
        {name: "type", mayBeNull: true}
    ]);
    if (e) throw e;
    if ((typeof(type) === 'undefined') || (type === null)) return false;
    return !!type.__enum;
Type.isFlags = function Type$isFlags(type) {
    /// <summary locid="M:J#Type.isFlags" />
    /// <param name="type" mayBeNull="true"></param>
    /// <returns type="Boolean"></returns>
    var e = Function._validateParams(arguments, [
        {name: "type", mayBeNull: true}
    ]);
    if (e) throw e;
    if ((typeof(type) === 'undefined') || (type === null)) return false;
    return !!type.__flags;
Sys.EventHandlerList = function Sys$EventHandlerList() {
    /// <summary locid="M:J#Sys.EventHandlerList.#ctor" />
    if (arguments.length !== 0) throw Error.parameterCount();
    this._list = {};
    function Sys$EventHandlerList$addHandler(id, handler) {
        /// <summary locid="M:J#Sys.EventHandlerList.addHandler" />
        /// <param name="id" type="String"></param>
        /// <param name="handler" type="Function"></param>
        var e = Function._validateParams(arguments, [
            {name: "id", type: String},
            {name: "handler", type: Function}
        ]);
        if (e) throw e;
        Array.add(this._getEvent(id, true), handler);
    }
    function Sys$EventHandlerList$removeHandler(id, handler) {
        /// <summary locid="M:J#Sys.EventHandlerList.removeHandler" />
        /// <param name="id" type="String"></param>
        /// <param name="handler" type="Function"></param>
        var e = Function._validateParams(arguments, [
            {name: "id", type: String},
            {name: "handler", type: Function}
        ]);
        if (e) throw e;
        var evt = this._getEvent(id);
        if (!evt) return;
        Array.remove(evt, handler);
    }
    function Sys$EventHandlerList$getHandler(id) {
        /// <summary locid="M:J#Sys.EventHandlerList.getHandler" />
        /// <param name="id" type="String"></param>
        /// <returns type="Function"></returns>
        var e = Function._validateParams(arguments, [
            {name: "id", type: String}
        ]);
        if (e) throw e;
        var evt = this._getEvent(id);
        if (!evt || (evt.length === 0)) return null;
        evt = Array.clone(evt);
        return function(source, args) {
            for (var i = 0, l = evt.length; i < l; i++) {
                evt[i](source, args);
            }
        };
    }
    function Sys$EventHandlerList$_getEvent(id, create) {
        if (!this._list[id]) {
            if (!create) return null;
            this._list[id] = [];
        }
        return this._list[id];
    }
Sys.EventHandlerList.prototype = {
    addHandler: Sys$EventHandlerList$addHandler,
    removeHandler: Sys$EventHandlerList$removeHandler,
    getHandler: Sys$EventHandlerList$getHandler,
    _getEvent: Sys$EventHandlerList$_getEvent
Sys.EventHandlerList.registerClass('Sys.EventHandlerList');
Sys.EventArgs = function Sys$EventArgs() {
    /// <summary locid="M:J#Sys.EventArgs.#ctor" />
    if (arguments.length !== 0) throw Error.parameterCount();
Sys.EventArgs.registerClass('Sys.EventArgs');
Sys.EventArgs.Empty = new Sys.EventArgs();
Sys.CancelEventArgs = function Sys$CancelEventArgs() {
    /// <summary locid="M:J#Sys.CancelEventArgs.#ctor" />
    if (arguments.length !== 0) throw Error.parameterCount();
    Sys.CancelEventArgs.initializeBase(this);
    this._cancel = false;
    function Sys$CancelEventArgs$get_cancel() {
        /// <value type="Boolean" locid="P:J#Sys.CancelEventArgs.cancel"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._cancel;
    }
    function Sys$CancelEventArgs$set_cancel(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: Boolean}]);
        if (e) throw e;
        this._cancel = value;
    }
Sys.CancelEventArgs.prototype = {
    get_cancel: Sys$CancelEventArgs$get_cancel,
    set_cancel: Sys$CancelEventArgs$set_cancel
Sys.CancelEventArgs.registerClass('Sys.CancelEventArgs', Sys.EventArgs);
Sys.INotifyPropertyChange = function Sys$INotifyPropertyChange() {
    /// <summary locid="M:J#Sys.INotifyPropertyChange.#ctor" />
    if (arguments.length !== 0) throw Error.parameterCount();
    throw Error.notImplemented();
    function Sys$INotifyPropertyChange$add_propertyChanged(handler) {
    /// <summary locid="E:J#Sys.INotifyPropertyChange.propertyChanged" />
    var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
    if (e) throw e;
        throw Error.notImplemented();
    }
    function Sys$INotifyPropertyChange$remove_propertyChanged(handler) {
    var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
    if (e) throw e;
        throw Error.notImplemented();
    }
Sys.INotifyPropertyChange.prototype = {
    add_propertyChanged: Sys$INotifyPropertyChange$add_propertyChanged,
    remove_propertyChanged: Sys$INotifyPropertyChange$remove_propertyChanged
Sys.INotifyPropertyChange.registerInterface('Sys.INotifyPropertyChange');
Sys.PropertyChangedEventArgs = function Sys$PropertyChangedEventArgs(propertyName) {
    /// <summary locid="M:J#Sys.PropertyChangedEventArgs.#ctor" />
    /// <param name="propertyName" type="String"></param>
    var e = Function._validateParams(arguments, [
        {name: "propertyName", type: String}
    ]);
    if (e) throw e;
    Sys.PropertyChangedEventArgs.initializeBase(this);
    this._propertyName = propertyName;
    function Sys$PropertyChangedEventArgs$get_propertyName() {
        /// <value type="String" locid="P:J#Sys.PropertyChangedEventArgs.propertyName"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._propertyName;
    }
Sys.PropertyChangedEventArgs.prototype = {
    get_propertyName: Sys$PropertyChangedEventArgs$get_propertyName
Sys.PropertyChangedEventArgs.registerClass('Sys.PropertyChangedEventArgs', Sys.EventArgs);
Sys.INotifyDisposing = function Sys$INotifyDisposing() {
    /// <summary locid="M:J#Sys.INotifyDisposing.#ctor" />
    if (arguments.length !== 0) throw Error.parameterCount();
    throw Error.notImplemented();
    function Sys$INotifyDisposing$add_disposing(handler) {
    /// <summary locid="E:J#Sys.INotifyDisposing.disposing" />
    var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
    if (e) throw e;
        throw Error.notImplemented();
    }
    function Sys$INotifyDisposing$remove_disposing(handler) {
    var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
    if (e) throw e;
        throw Error.notImplemented();
    }
Sys.INotifyDisposing.prototype = {
    add_disposing: Sys$INotifyDisposing$add_disposing,
    remove_disposing: Sys$INotifyDisposing$remove_disposing
Sys.INotifyDisposing.registerInterface("Sys.INotifyDisposing");
Sys.Component = function Sys$Component() {
    /// <summary locid="M:J#Sys.Component.#ctor" />
    if (arguments.length !== 0) throw Error.parameterCount();
    if (Sys.Application) Sys.Application.registerDisposableObject(this);
    function Sys$Component$get_events() {
        /// <value type="Sys.EventHandlerList" locid="P:J#Sys.Component.events"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._events) {
            this._events = new Sys.EventHandlerList();
        }
        return this._events;
    }
    function Sys$Component$get_id() {
        /// <value type="String" locid="P:J#Sys.Component.id"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._id;
    }
    function Sys$Component$set_id(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: String}]);
        if (e) throw e;
        if (this._idSet) throw Error.invalidOperation(Sys.Res.componentCantSetIdTwice);
        this._idSet = true;
        var oldId = this.get_id();
        if (oldId && Sys.Application.findComponent(oldId)) throw Error.invalidOperation(Sys.Res.componentCantSetIdAfterAddedToApp);
        this._id = value;
    }
    function Sys$Component$get_isInitialized() {
        /// <value type="Boolean" locid="P:J#Sys.Component.isInitialized"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._initialized;
    }
    function Sys$Component$get_isUpdating() {
        /// <value type="Boolean" locid="P:J#Sys.Component.isUpdating"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._updating;
    }
    function Sys$Component$add_disposing(handler) {
        /// <summary locid="E:J#Sys.Component.disposing" />
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this.get_events().addHandler("disposing", handler);
    }
    function Sys$Component$remove_disposing(handler) {
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this.get_events().removeHandler("disposing", handler);
    }
    function Sys$Component$add_propertyChanged(handler) {
        /// <summary locid="E:J#Sys.Component.propertyChanged" />
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this.get_events().addHandler("propertyChanged", handler);
    }
    function Sys$Component$remove_propertyChanged(handler) {
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this.get_events().removeHandler("propertyChanged", handler);
    }
    function Sys$Component$beginUpdate() {
        this._updating = true;
    }
    function Sys$Component$dispose() {
        if (this._events) {
            var handler = this._events.getHandler("disposing");
            if (handler) {
                handler(this, Sys.EventArgs.Empty);
            }
        }
        delete this._events;
        Sys.Application.unregisterDisposableObject(this);
        Sys.Application.removeComponent(this);
    }
    function Sys$Component$endUpdate() {
        this._updating = false;
        if (!this._initialized) this.initialize();
        this.updated();
    }
    function Sys$Component$initialize() {
        this._initialized = true;
    }
    function Sys$Component$raisePropertyChanged(propertyName) {
        /// <summary locid="M:J#Sys.Component.raisePropertyChanged" />
        /// <param name="propertyName" type="String"></param>
        var e = Function._validateParams(arguments, [
            {name: "propertyName", type: String}
        ]);
        if (e) throw e;
        if (!this._events) return;
        var handler = this._events.getHandler("propertyChanged");
        if (handler) {
            handler(this, new Sys.PropertyChangedEventArgs(propertyName));
        }
    }
    function Sys$Component$updated() {
    }
Sys.Component.prototype = {
    _id: null,
    _idSet: false,
    _initialized: false,
    _updating: false,
    get_events: Sys$Component$get_events,
    get_id: Sys$Component$get_id,
    set_id: Sys$Component$set_id,
    get_isInitialized: Sys$Component$get_isInitialized,
    get_isUpdating: Sys$Component$get_isUpdating,
    add_disposing: Sys$Component$add_disposing,
    remove_disposing: Sys$Component$remove_disposing,
    add_propertyChanged: Sys$Component$add_propertyChanged,
    remove_propertyChanged: Sys$Component$remove_propertyChanged,
    beginUpdate: Sys$Component$beginUpdate,
    dispose: Sys$Component$dispose,
    endUpdate: Sys$Component$endUpdate,
    initialize: Sys$Component$initialize,
    raisePropertyChanged: Sys$Component$raisePropertyChanged,
    updated: Sys$Component$updated
Sys.Component.registerClass('Sys.Component', null, Sys.IDisposable, Sys.INotifyPropertyChange, Sys.INotifyDisposing);
function Sys$Component$_setProperties(target, properties) {
    /// <summary locid="M:J#Sys.Component._setProperties" />
    /// <param name="target"></param>
    /// <param name="properties"></param>
    var e = Function._validateParams(arguments, [
        {name: "target"},
        {name: "properties"}
    ]);
    if (e) throw e;
    var current;
    var targetType = Object.getType(target);
    var isObject = (targetType === Object) || (targetType === Sys.UI.DomElement);
    var isComponent = Sys.Component.isInstanceOfType(target) && !target.get_isUpdating();
    if (isComponent) target.beginUpdate();
    for (var name in properties) {
        var val = properties[name];
        var getter = isObject ? null : target["get_" + name];
        if (isObject || typeof(getter) !== 'function') {
            var targetVal = target[name];
            if (!isObject && typeof(targetVal) === 'undefined') throw Error.invalidOperation(String.format(Sys.Res.propertyUndefined, name));
            if (!val || (typeof(val) !== 'object') || (isObject && !targetVal)) {
                target[name] = val;
            }
            else {
                Sys$Component$_setProperties(targetVal, val);
            }
        }
        else {
            var setter = target["set_" + name];
            if (typeof(setter) === 'function') {
                setter.apply(target, [val]);
            }
            else if (val instanceof Array) {
                current = getter.apply(target);
                if (!(current instanceof Array)) throw new Error.invalidOperation(String.format(Sys.Res.propertyNotAnArray, name));
                for (var i = 0, j = current.length, l= val.length; i < l; i++, j++) {
                    current[j] = val[i];
                }
            }
            else if ((typeof(val) === 'object') && (Object.getType(val) === Object)) {
                current = getter.apply(target);
                if ((typeof(current) === 'undefined') || (current === null)) throw new Error.invalidOperation(String.format(Sys.Res.propertyNullOrUndefined, name));
                Sys$Component$_setProperties(current, val);
            }
            else {
                throw new Error.invalidOperation(String.format(Sys.Res.propertyNotWritable, name));
            }
        }
    }
    if (isComponent) target.endUpdate();
function Sys$Component$_setReferences(component, references) {
    for (var name in references) {
        var setter = component["set_" + name];
        var reference = $find(references[name]);
        if (typeof(setter) !== 'function') throw new Error.invalidOperation(String.format(Sys.Res.propertyNotWritable, name));
        if (!reference) throw Error.invalidOperation(String.format(Sys.Res.referenceNotFound, references[name]));
        setter.apply(component, [reference]);
    }
var $create = Sys.Component.create = function Sys$Component$create(type, properties, events, references, element) {
    /// <summary locid="M:J#Sys.Component.create" />
    /// <param name="type" type="Type"></param>
    /// <param name="properties" optional="true" mayBeNull="true"></param>
    /// <param name="events" optional="true" mayBeNull="true"></param>
    /// <param name="references" optional="true" mayBeNull="true"></param>
    /// <param name="element" domElement="true" optional="true" mayBeNull="true"></param>
    /// <returns type="Sys.UI.Component"></returns>
    var e = Function._validateParams(arguments, [
        {name: "type", type: Type},
        {name: "properties", mayBeNull: true, optional: true},
        {name: "events", mayBeNull: true, optional: true},
        {name: "references", mayBeNull: true, optional: true},
        {name: "element", mayBeNull: true, domElement: true, optional: true}
    ]);
    if (e) throw e;
    if (!type.inheritsFrom(Sys.Component)) {
        throw Error.argument('type', String.format(Sys.Res.createNotComponent, type.getName()));
    }
    if (type.inheritsFrom(Sys.UI.Behavior) || type.inheritsFrom(Sys.UI.Control)) {
        if (!element) throw Error.argument('element', Sys.Res.createNoDom);
    }
    else if (element) throw Error.argument('element', Sys.Res.createComponentOnDom);
    var component = (element ? new type(element): new type());
    var app = Sys.Application;
    var creatingComponents = app.get_isCreatingComponents();
    component.beginUpdate();
    if (properties) {
        Sys$Component$_setProperties(component, properties);
    }
    if (events) {
        for (var name in events) {
            if (!(component["add_" + name] instanceof Function)) throw new Error.invalidOperation(String.format(Sys.Res.undefinedEvent, name));
            if (!(events[name] instanceof Function)) throw new Error.invalidOperation(Sys.Res.eventHandlerNotFunction);
            component["add_" + name](events[name]);
        }
    }
    if (component.get_id()) {
        app.addComponent(component);
    }
    if (creatingComponents) {
        app._createdComponents[app._createdComponents.length] = component;
        if (references) {
            app._addComponentToSecondPass(component, references);
        }
        else {
            component.endUpdate();
        }
    }
    else {
        if (references) {
            Sys$Component$_setReferences(component, references);
        }
        component.endUpdate();
    }
    return component;
Sys.UI.MouseButton = function Sys$UI$MouseButton() {
    /// <summary locid="M:J#Sys.UI.MouseButton.#ctor" />
    /// <field name="leftButton" type="Number" integer="true" static="true" locid="F:J#Sys.UI.MouseButton.leftButton"></field>
    /// <field name="middleButton" type="Number" integer="true" static="true" locid="F:J#Sys.UI.MouseButton.middleButton"></field>
    /// <field name="rightButton" type="Number" integer="true" static="true" locid="F:J#Sys.UI.MouseButton.rightButton"></field>
    if (arguments.length !== 0) throw Error.parameterCount();
    throw Error.notImplemented();
Sys.UI.MouseButton.prototype = {
    leftButton: 0,
    middleButton: 1,
    rightButton: 2
Sys.UI.MouseButton.registerEnum("Sys.UI.MouseButton");
Sys.UI.Key = function Sys$UI$Key() {
    /// <summary locid="M:J#Sys.UI.Key.#ctor" />
    /// <field name="backspace" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.backspace"></field>
    /// <field name="tab" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.tab"></field>
    /// <field name="enter" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.enter"></field>
    /// <field name="esc" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.esc"></field>
    /// <field name="space" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.space"></field>
    /// <field name="pageUp" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.pageUp"></field>
    /// <field name="pageDown" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.pageDown"></field>
    /// <field name="end" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.end"></field>
    /// <field name="home" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.home"></field>
    /// <field name="left" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.left"></field>
    /// <field name="up" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.up"></field>
    /// <field name="right" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.right"></field>
    /// <field name="down" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.down"></field>
    /// <field name="del" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.del"></field>
    if (arguments.length !== 0) throw Error.parameterCount();
    throw Error.notImplemented();
Sys.UI.Key.prototype = {
    backspace: 8,
    tab: 9,
    enter: 13,
    esc: 27,
    space: 32,
    pageUp: 33,
    pageDown: 34,
    end: 35,
    home: 36,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    del: 127
Sys.UI.Key.registerEnum("Sys.UI.Key");
Sys.UI.Point = function Sys$UI$Point(x, y) {
    /// <summary locid="M:J#Sys.UI.Point.#ctor" />
    /// <param name="x" type="Number"></param>
    /// <param name="y" type="Number"></param>
    /// <field name="x" type="Number" integer="true" locid="F:J#Sys.UI.Point.x"></field>
    /// <field name="y" type="Number" integer="true" locid="F:J#Sys.UI.Point.y"></field>
    var e = Function._validateParams(arguments, [
        {name: "x", type: Number},
        {name: "y", type: Number}
    ]);
    if (e) throw e;
    this.x = Math.round(x);
    this.y = Math.round(y);
Sys.UI.Point.registerClass('Sys.UI.Point');
Sys.UI.Bounds = function Sys$UI$Bounds(x, y, width, height) {
    /// <summary locid="M:J#Sys.UI.Bounds.#ctor" />
    /// <param name="x" type="Number" integer="true"></param>
    /// <param name="y" type="Number" integer="true"></param>
    /// <param name="height" type="Number" integer="true"></param>
    /// <param name="width" type="Number" integer="true"></param>
    /// <field name="x" type="Number" integer="true" locid="F:J#Sys.UI.Bounds.x"></field>
    /// <field name="y" type="Number" integer="true" locid="F:J#Sys.UI.Bounds.y"></field>
    /// <field name="height" type="Number" integer="true" locid="F:J#Sys.UI.Bounds.height"></field>
    /// <field name="width" type="Number" integer="true" locid="F:J#Sys.UI.Bounds.width"></field>
    var e = Function._validateParams(arguments, [
        {name: "x", type: Number, integer: true},
        {name: "y", type: Number, integer: true},
        {name: "height", type: Number, integer: true},
        {name: "width", type: Number, integer: true}
    ]);
    if (e) throw e;
    this.x = x;
    this.y = y;
    this.height = height;
    this.width = width;
Sys.UI.Bounds.registerClass('Sys.UI.Bounds');
Sys.UI.DomEvent = function Sys$UI$DomEvent(eventObject) {
    /// <summary locid="M:J#Sys.UI.DomEvent.#ctor" />
    /// <param name="eventObject"></param>
    /// <field name="altKey" type="Boolean" locid="F:J#Sys.UI.DomEvent.altKey"></field>
    /// <field name="button" type="Sys.UI.MouseButton" locid="F:J#Sys.UI.DomEvent.button"></field>
    /// <field name="charCode" type="Number" integer="true" locid="F:J#Sys.UI.DomEvent.charCode"></field>
    /// <field name="clientX" type="Number" integer="true" locid="F:J#Sys.UI.DomEvent.clientX"></field>
    /// <field name="clientY" type="Number" integer="true" locid="F:J#Sys.UI.DomEvent.clientY"></field>
    /// <field name="ctrlKey" type="Boolean" locid="F:J#Sys.UI.DomEvent.ctrlKey"></field>
    /// <field name="keyCode" type="Number" integer="true" locid="F:J#Sys.UI.DomEvent.keyCode"></field>
    /// <field name="offsetX" type="Number" integer="true" locid="F:J#Sys.UI.DomEvent.offsetX"></field>
    /// <field name="offsetY" type="Number" integer="true" locid="F:J#Sys.UI.DomEvent.offsetY"></field>
    /// <field name="screenX" type="Number" integer="true" locid="F:J#Sys.UI.DomEvent.screenX"></field>
    /// <field name="screenY" type="Number" integer="true" locid="F:J#Sys.UI.DomEvent.screenY"></field>
    /// <field name="shiftKey" type="Boolean" locid="F:J#Sys.UI.DomEvent.shiftKey"></field>
    /// <field name="target" locid="F:J#Sys.UI.DomEvent.target"></field>
    /// <field name="type" type="String" locid="F:J#Sys.UI.DomEvent.type"></field>
    var e = Function._validateParams(arguments, [
        {name: "eventObject"}
    ]);
    if (e) throw e;
    var e = eventObject;
    var etype = this.type = e.type.toLowerCase();
    this.rawEvent = e;
    this.altKey = e.altKey;
    if (typeof(e.button) !== 'undefined') {
        this.button = (typeof(e.which) !== 'undefined') ? e.button :
            (e.button === 4) ? Sys.UI.MouseButton.middleButton :
            (e.button === 2) ? Sys.UI.MouseButton.rightButton :
            Sys.UI.MouseButton.leftButton;
    }
    if (etype === 'keypress') {
        this.charCode = e.charCode || e.keyCode;
    }
    else if (e.keyCode && (e.keyCode === 46)) {
        this.keyCode = 127;
    }
    else {
        this.keyCode = e.keyCode;
    }
    this.clientX = e.clientX;
    this.clientY = e.clientY;
    this.ctrlKey = e.ctrlKey;
    this.target = e.target ? e.target : e.srcElement;
    if (!etype.startsWith('key')) {
        if ((typeof(e.offsetX) !== 'undefined') && (typeof(e.offsetY) !== 'undefined')) {
            this.offsetX = e.offsetX;
            this.offsetY = e.offsetY;
        }
        else if (this.target && (this.target.nodeType !== 3) && (typeof(e.clientX) === 'number')) {
            var loc = Sys.UI.DomElement.getLocation(this.target);
            var w = Sys.UI.DomElement._getWindow(this.target);
            this.offsetX = (w.pageXOffset || 0) + e.clientX - loc.x;
            this.offsetY = (w.pageYOffset || 0) + e.clientY - loc.y;
        }
    }
    this.screenX = e.screenX;
    this.screenY = e.screenY;
    this.shiftKey = e.shiftKey;
    function Sys$UI$DomEvent$preventDefault() {
        /// <summary locid="M:J#Sys.UI.DomEvent.preventDefault" />
        if (arguments.length !== 0) throw Error.parameterCount();
        if (this.rawEvent.preventDefault) {
            this.rawEvent.preventDefault();
        }
        else if (window.event) {
            this.rawEvent.returnValue = false;
        }
    }
    function Sys$UI$DomEvent$stopPropagation() {
        /// <summary locid="M:J#Sys.UI.DomEvent.stopPropagation" />
        if (arguments.length !== 0) throw Error.parameterCount();
        if (this.rawEvent.stopPropagation) {
            this.rawEvent.stopPropagation();
        }
        else if (window.event) {
            this.rawEvent.cancelBubble = true;
        }
    }
Sys.UI.DomEvent.prototype = {
    preventDefault: Sys$UI$DomEvent$preventDefault,
    stopPropagation: Sys$UI$DomEvent$stopPropagation
Sys.UI.DomEvent.registerClass('Sys.UI.DomEvent');
var $addHandler = Sys.UI.DomEvent.addHandler = function Sys$UI$DomEvent$addHandler(element, eventName, handler) {
    /// <summary locid="M:J#Sys.UI.DomEvent.addHandler" />
    /// <param name="element"></param>
    /// <param name="eventName" type="String"></param>
    /// <param name="handler" type="Function"></param>
    var e = Function._validateParams(arguments, [
        {name: "element"},
        {name: "eventName", type: String},
        {name: "handler", type: Function}
    ]);
    if (e) throw e;
    Sys.UI.DomEvent._ensureDomNode(element);
    if (eventName === "error") throw Error.invalidOperation(Sys.Res.addHandlerCantBeUsedForError);
    if (!element._events) {
        element._events = {};
    }
    var eventCache = element._events[eventName];
    if (!eventCache) {
        element._events[eventName] = eventCache = [];
    }
    var browserHandler;
    if (element.addEventListener) {
        browserHandler = function(e) {
            return handler.call(element, new Sys.UI.DomEvent(e));
        }
        element.addEventListener(eventName, browserHandler, false);
    }
    else if (element.attachEvent) {
        browserHandler = function() {
            var e = {};
            try {e = Sys.UI.DomElement._getWindow(element).event} catch(ex) {}
            return handler.call(element, new Sys.UI.DomEvent(e));
        }
        element.attachEvent('on' + eventName, browserHandler);
    }
    eventCache[eventCache.length] = {handler: handler, browserHandler: browserHandler};
var $addHandlers = Sys.UI.DomEvent.addHandlers = function Sys$UI$DomEvent$addHandlers(element, events, handlerOwner) {
    /// <summary locid="M:J#Sys.UI.DomEvent.addHandlers" />
    /// <param name="element"></param>
    /// <param name="events" type="Object"></param>
    /// <param name="handlerOwner" optional="true"></param>
    var e = Function._validateParams(arguments, [
        {name: "element"},
        {name: "events", type: Object},
        {name: "handlerOwner", optional: true}
    ]);
    if (e) throw e;
    Sys.UI.DomEvent._ensureDomNode(element);
    for (var name in events) {
        var handler = events[name];
        if (typeof(handler) !== 'function') throw Error.invalidOperation(Sys.Res.cantAddNonFunctionhandler);
        if (handlerOwner) {
            handler = Function.createDelegate(handlerOwner, handler);
        }
        $addHandler(element, name, handler);
    }
var $clearHandlers = Sys.UI.DomEvent.clearHandlers = function Sys$UI$DomEvent$clearHandlers(element) {
    /// <summary locid="M:J#Sys.UI.DomEvent.clearHandlers" />
    /// <param name="element"></param>
    var e = Function._validateParams(arguments, [
        {name: "element"}
    ]);
    if (e) throw e;
    Sys.UI.DomEvent._ensureDomNode(element);
    if (element._events) {
        var cache = element._events;
        for (var name in cache) {
            var handlers = cache[name];
            for (var i = handlers.length - 1; i >= 0; i--) {
                $removeHandler(element, name, handlers[i].handler);
            }
        }
        element._events = null;
    }
var $removeHandler = Sys.UI.DomEvent.removeHandler = function Sys$UI$DomEvent$removeHandler(element, eventName, handler) {
    /// <summary locid="M:J#Sys.UI.DomEvent.removeHandler" />
    /// <param name="element"></param>
    /// <param name="eventName" type="String"></param>
    /// <param name="handler" type="Function"></param>
    var e = Function._validateParams(arguments, [
        {name: "element"},
        {name: "eventName", type: String},
        {name: "handler", type: Function}
    ]);
    if (e) throw e;
    Sys.UI.DomEvent._ensureDomNode(element);
    var browserHandler = null;
    if ((typeof(element._events) !== 'object') || (element._events == null)) throw Error.invalidOperation(Sys.Res.eventHandlerInvalid);
    var cache = element._events[eventName];
    if (!(cache instanceof Array)) throw Error.invalidOperation(Sys.Res.eventHandlerInvalid);
    for (var i = 0, l = cache.length; i < l; i++) {
        if (cache[i].handler === handler) {
            browserHandler = cache[i].browserHandler;
            break;
        }
    }
    if (typeof(browserHandler) !== 'function') throw Error.invalidOperation(Sys.Res.eventHandlerInvalid);
    if (element.removeEventListener) {
        element.removeEventListener(eventName, browserHandler, false);
    }
    else if (element.detachEvent) {
        element.detachEvent('on' + eventName, browserHandler);
    }
    cache.splice(i, 1);
Sys.UI.DomEvent._ensureDomNode = function Sys$UI$DomEvent$_ensureDomNode(element) {
    if (element.tagName && (element.tagName.toUpperCase() === "SCRIPT")) return;
    var doc = element.ownerDocument || element.document || element;
    if ((typeof(element.document) !== 'object') && (element != doc) && (typeof(element.nodeType) !== 'number')) {
        throw Error.argument("element", Sys.Res.argumentDomNode);
    }
Sys.UI.DomElement = function Sys$UI$DomElement() {
    /// <summary locid="M:J#Sys.UI.DomElement.#ctor" />
    if (arguments.length !== 0) throw Error.parameterCount();
    throw Error.notImplemented();
Sys.UI.DomElement.registerClass('Sys.UI.DomElement');
Sys.UI.DomElement.addCssClass = function Sys$UI$DomElement$addCssClass(element, className) {
    /// <summary locid="M:J#Sys.UI.DomElement.addCssClass" />
    /// <param name="element" domElement="true"></param>
    /// <param name="className" type="String"></param>
    var e = Function._validateParams(arguments, [
        {name: "element", domElement: true},
        {name: "className", type: String}
    ]);
    if (e) throw e;
    if (!Sys.UI.DomElement.containsCssClass(element, className)) {
        if (element.className === '') {
            element.className = className;
        }
        else {
            element.className += ' ' + className;
        }
    }
Sys.UI.DomElement.containsCssClass = function Sys$UI$DomElement$containsCssClass(element, className) {
    /// <summary locid="M:J#Sys.UI.DomElement.containsCssClass" />
    /// <param name="element" domElement="true"></param>
    /// <param name="className" type="String"></param>
    /// <returns type="Boolean"></returns>
    var e = Function._validateParams(arguments, [
        {name: "element", domElement: true},
        {name: "className", type: String}
    ]);
    if (e) throw e;
    return Array.contains(element.className.split(' '), className);
Sys.UI.DomElement.getBounds = function Sys$UI$DomElement$getBounds(element) {
    /// <summary locid="M:J#Sys.UI.DomElement.getBounds" />
    /// <param name="element" domElement="true"></param>
    /// <returns type="Sys.UI.Bounds"></returns>
    var e = Function._validateParams(arguments, [
        {name: "element", domElement: true}
    ]);
    if (e) throw e;
    var offset = Sys.UI.DomElement.getLocation(element);
    return new Sys.UI.Bounds(offset.x, offset.y, element.offsetWidth || 0, element.offsetHeight || 0);
var $get = Sys.UI.DomElement.getElementById = function Sys$UI$DomElement$getElementById(id, element) {
    /// <summary locid="M:J#Sys.UI.DomElement.getElementById" />
    /// <param name="id" type="String"></param>
    /// <param name="element" domElement="true" optional="true" mayBeNull="true"></param>
    /// <returns domElement="true" mayBeNull="true"></returns>
    var e = Function._validateParams(arguments, [
        {name: "id", type: String},
        {name: "element", mayBeNull: true, domElement: true, optional: true}
    ]);
    if (e) throw e;
    if (!element) return document.getElementById(id);
    if (element.getElementById) return element.getElementById(id);
    var nodeQueue = [];
    var childNodes = element.childNodes;
    for (var i = 0; i < childNodes.length; i++) {
        var node = childNodes[i];
        if (node.nodeType == 1) {
            nodeQueue[nodeQueue.length] = node;
        }
    }
    while (nodeQueue.length) {
        node = nodeQueue.shift();
        if (node.id == id) {
            return node;
        }
        childNodes = node.childNodes;
        for (i = 0; i < childNodes.length; i++) {
            node = childNodes[i];
            if (node.nodeType == 1) {
                nodeQueue[nodeQueue.length] = node;
            }
        }
    }
    return null;
switch(Sys.Browser.agent) {
    case Sys.Browser.InternetExplorer:
        Sys.UI.DomElement.getLocation = function Sys$UI$DomElement$getLocation(element) {
            /// <summary locid="M:J#Sys.UI.DomElement.getLocation" />
            /// <param name="element" domElement="true"></param>
            /// <returns type="Sys.UI.Point"></returns>
            var e = Function._validateParams(arguments, [
                {name: "element", domElement: true}
            ]);
            if (e) throw e;
            if (element.self || element.nodeType === 9) return new Sys.UI.Point(0,0);
            var clientRect = element.getBoundingClientRect();
            if (!clientRect) {
                return new Sys.UI.Point(0,0);
            }
            var documentElement = element.ownerDocument.documentElement;
            var offsetX = clientRect.left - 2 + documentElement.scrollLeft,
                offsetY = clientRect.top - 2 + documentElement.scrollTop;
            
            try {
                var f = element.ownerDocument.parentWindow.frameElement || null;
                if (f) {
                    var offset = (f.frameBorder === "0" || f.frameBorder === "no") ? 2 : 0;
                    offsetX += offset;
                    offsetY += offset;
                }
            }
            catch(ex) {
            }    
            
            return new Sys.UI.Point(offsetX, offsetY);
        }
        break;
    case Sys.Browser.Safari:
        Sys.UI.DomElement.getLocation = function Sys$UI$DomElement$getLocation(element) {
            /// <summary locid="M:J#Sys.UI.DomElement.getLocation" />
            /// <param name="element" domElement="true"></param>
            /// <returns type="Sys.UI.Point"></returns>
            var e = Function._validateParams(arguments, [
                {name: "element", domElement: true}
            ]);
            if (e) throw e;
            if ((element.window && (element.window === element)) || element.nodeType === 9) return new Sys.UI.Point(0,0);
            var offsetX = 0;
            var offsetY = 0;
            var previous = null;
            var previousStyle = null;
            var currentStyle;
            for (var parent = element; parent; previous = parent, previousStyle = currentStyle, parent = parent.offsetParent) {
                currentStyle = Sys.UI.DomElement._getCurrentStyle(parent);
                var tagName = parent.tagName ? parent.tagName.toUpperCase() : null;
                if ((parent.offsetLeft || parent.offsetTop) &&
                    ((tagName !== "BODY") || (!previousStyle || previousStyle.position !== "absolute"))) {
                    offsetX += parent.offsetLeft;
                    offsetY += parent.offsetTop;
                }
            }
            currentStyle = Sys.UI.DomElement._getCurrentStyle(element);
            var elementPosition = currentStyle ? currentStyle.position : null;
            if (!elementPosition || (elementPosition !== "absolute")) {
                for (var parent = element.parentNode; parent; parent = parent.parentNode) {
                    tagName = parent.tagName ? parent.tagName.toUpperCase() : null;
                    if ((tagName !== "BODY") && (tagName !== "HTML") && (parent.scrollLeft || parent.scrollTop)) {
                        offsetX -= (parent.scrollLeft || 0);
                        offsetY -= (parent.scrollTop || 0);
                    }
                    currentStyle = Sys.UI.DomElement._getCurrentStyle(parent);
                    var parentPosition = currentStyle ? currentStyle.position : null;
                    if (parentPosition && (parentPosition === "absolute")) break;
                }
            }
            return new Sys.UI.Point(offsetX, offsetY);
        }
        break;
    case Sys.Browser.Opera:
        Sys.UI.DomElement.getLocation = function Sys$UI$DomElement$getLocation(element) {
            /// <summary locid="M:J#Sys.UI.DomElement.getLocation" />
            /// <param name="element" domElement="true"></param>
            /// <returns type="Sys.UI.Point"></returns>
            var e = Function._validateParams(arguments, [
                {name: "element", domElement: true}
            ]);
            if (e) throw e;
            if ((element.window && (element.window === element)) || element.nodeType === 9) return new Sys.UI.Point(0,0);
            var offsetX = 0;
            var offsetY = 0;
            var previous = null;
            for (var parent = element; parent; previous = parent, parent = parent.offsetParent) {
                var tagName = parent.tagName;
                offsetX += parent.offsetLeft || 0;
                offsetY += parent.offsetTop || 0;
            }
            var elementPosition = element.style.position;
            var elementPositioned = elementPosition && (elementPosition !== "static");
            for (var parent = element.parentNode; parent; parent = parent.parentNode) {
                tagName = parent.tagName ? parent.tagName.toUpperCase() : null;
                if ((tagName !== "BODY") && (tagName !== "HTML") && (parent.scrollLeft || parent.scrollTop) &&
                    ((elementPositioned &&
                    ((parent.style.overflow === "scroll") || (parent.style.overflow === "auto"))))) {
                    offsetX -= (parent.scrollLeft || 0);
                    offsetY -= (parent.scrollTop || 0);
                }
                var parentPosition = (parent && parent.style) ? parent.style.position : null;
                elementPositioned = elementPositioned || (parentPosition && (parentPosition !== "static"));
            }
            return new Sys.UI.Point(offsetX, offsetY);
        }
        break;
    default:
        Sys.UI.DomElement.getLocation = function Sys$UI$DomElement$getLocation(element) {
            /// <summary locid="M:J#Sys.UI.DomElement.getLocation" />
            /// <param name="element" domElement="true"></param>
            /// <returns type="Sys.UI.Point"></returns>
            var e = Function._validateParams(arguments, [
                {name: "element", domElement: true}
            ]);
            if (e) throw e;
            if ((element.window && (element.window === element)) || element.nodeType === 9) return new Sys.UI.Point(0,0);
            var offsetX = 0;
            var offsetY = 0;
            var previous = null;
            var previousStyle = null;
            var currentStyle = null;
            for (var parent = element; parent; previous = parent, previousStyle = currentStyle, parent = parent.offsetParent) {
                var tagName = parent.tagName ? parent.tagName.toUpperCase() : null;
                currentStyle = Sys.UI.DomElement._getCurrentStyle(parent);
                if ((parent.offsetLeft || parent.offsetTop) &&
                    !((tagName === "BODY") &&
                    (!previousStyle || previousStyle.position !== "absolute"))) {
                    offsetX += parent.offsetLeft;
                    offsetY += parent.offsetTop;
                }
                if (previous !== null && currentStyle) {
                    if ((tagName !== "TABLE") && (tagName !== "TD") && (tagName !== "HTML")) {
                        offsetX += parseInt(currentStyle.borderLeftWidth) || 0;
                        offsetY += parseInt(currentStyle.borderTopWidth) || 0;
                    }
                    if (tagName === "TABLE" &&
                        (currentStyle.position === "relative" || currentStyle.position === "absolute")) {
                        offsetX += parseInt(currentStyle.marginLeft) || 0;
                        offsetY += parseInt(currentStyle.marginTop) || 0;
                    }
                }
            }
            currentStyle = Sys.UI.DomElement._getCurrentStyle(element);
            var elementPosition = currentStyle ? currentStyle.position : null;
            if (!elementPosition || (elementPosition !== "absolute")) {
                for (var parent = element.parentNode; parent; parent = parent.parentNode) {
                    tagName = parent.tagName ? parent.tagName.toUpperCase() : null;
                    if ((tagName !== "BODY") && (tagName !== "HTML") && (parent.scrollLeft || parent.scrollTop)) {
                        offsetX -= (parent.scrollLeft || 0);
                        offsetY -= (parent.scrollTop || 0);
                        currentStyle = Sys.UI.DomElement._getCurrentStyle(parent);
                        if (currentStyle) {
                            offsetX += parseInt(currentStyle.borderLeftWidth) || 0;
                            offsetY += parseInt(currentStyle.borderTopWidth) || 0;
                        }
                    }
                }
            }
            return new Sys.UI.Point(offsetX, offsetY);
        }
        break;
Sys.UI.DomElement.removeCssClass = function Sys$UI$DomElement$removeCssClass(element, className) {
    /// <summary locid="M:J#Sys.UI.DomElement.removeCssClass" />
    /// <param name="element" domElement="true"></param>
    /// <param name="className" type="String"></param>
    var e = Function._validateParams(arguments, [
        {name: "element", domElement: true},
        {name: "className", type: String}
    ]);
    if (e) throw e;
    var currentClassName = ' ' + element.className + ' ';
    var index = currentClassName.indexOf(' ' + className + ' ');
    if (index >= 0) {
        element.className = (currentClassName.substr(0, index) + ' ' +
            currentClassName.substring(index + className.length + 1, currentClassName.length)).trim();
    }
Sys.UI.DomElement.setLocation = function Sys$UI$DomElement$setLocation(element, x, y) {
    /// <summary locid="M:J#Sys.UI.DomElement.setLocation" />
    /// <param name="element" domElement="true"></param>
    /// <param name="x" type="Number" integer="true"></param>
    /// <param name="y" type="Number" integer="true"></param>
    var e = Function._validateParams(arguments, [
        {name: "element", domElement: true},
        {name: "x", type: Number, integer: true},
        {name: "y", type: Number, integer: true}
    ]);
    if (e) throw e;
    var style = element.style;
    style.position = 'absolute';
    style.left = x + "px";
    style.top = y + "px";
Sys.UI.DomElement.toggleCssClass = function Sys$UI$DomElement$toggleCssClass(element, className) {
    /// <summary locid="M:J#Sys.UI.DomElement.toggleCssClass" />
    /// <param name="element" domElement="true"></param>
    /// <param name="className" type="String"></param>
    var e = Function._validateParams(arguments, [
        {name: "element", domElement: true},
        {name: "className", type: String}
    ]);
    if (e) throw e;
    if (Sys.UI.DomElement.containsCssClass(element, className)) {
        Sys.UI.DomElement.removeCssClass(element, className);
    }
    else {
        Sys.UI.DomElement.addCssClass(element, className);
    }
Sys.UI.DomElement.getVisibilityMode = function Sys$UI$DomElement$getVisibilityMode(element) {
    /// <summary locid="M:J#Sys.UI.DomElement.getVisibilityMode" />
    /// <param name="element" domElement="true"></param>
    /// <returns type="Sys.UI.VisibilityMode"></returns>
    var e = Function._validateParams(arguments, [
        {name: "element", domElement: true}
    ]);
    if (e) throw e;
    return (element._visibilityMode === Sys.UI.VisibilityMode.hide) ?
        Sys.UI.VisibilityMode.hide :
        Sys.UI.VisibilityMode.collapse;
Sys.UI.DomElement.setVisibilityMode = function Sys$UI$DomElement$setVisibilityMode(element, value) {
    /// <summary locid="M:J#Sys.UI.DomElement.setVisibilityMode" />
    /// <param name="element" domElement="true"></param>
    /// <param name="value" type="Sys.UI.VisibilityMode"></param>
    var e = Function._validateParams(arguments, [
        {name: "element", domElement: true},
        {name: "value", type: Sys.UI.VisibilityMode}
    ]);
    if (e) throw e;
    Sys.UI.DomElement._ensureOldDisplayMode(element);
    if (element._visibilityMode !== value) {
        element._visibilityMode = value;
        if (Sys.UI.DomElement.getVisible(element) === false) {
            if (element._visibilityMode === Sys.UI.VisibilityMode.hide) {
                element.style.display = element._oldDisplayMode;
            }
            else {
                element.style.display = 'none';
            }
        }
        element._visibilityMode = value;
    }
Sys.UI.DomElement.getVisible = function Sys$UI$DomElement$getVisible(element) {
    /// <summary locid="M:J#Sys.UI.DomElement.getVisible" />
    /// <param name="element" domElement="true"></param>
    /// <returns type="Boolean"></returns>
    var e = Function._validateParams(arguments, [
        {name: "element", domElement: true}
    ]);
    if (e) throw e;
    var style = element.currentStyle || Sys.UI.DomElement._getCurrentStyle(element);
    if (!style) return true;
    return (style.visibility !== 'hidden') && (style.display !== 'none');
Sys.UI.DomElement.setVisible = function Sys$UI$DomElement$setVisible(element, value) {
    /// <summary locid="M:J#Sys.UI.DomElement.setVisible" />
    /// <param name="element" domElement="true"></param>
    /// <param name="value" type="Boolean"></param>
    var e = Function._validateParams(arguments, [
        {name: "element", domElement: true},
        {name: "value", type: Boolean}
    ]);
    if (e) throw e;
    if (value !== Sys.UI.DomElement.getVisible(element)) {
        Sys.UI.DomElement._ensureOldDisplayMode(element);
        element.style.visibility = value ? 'visible' : 'hidden';
        if (value || (element._visibilityMode === Sys.UI.VisibilityMode.hide)) {
            element.style.display = element._oldDisplayMode;
        }
        else {
            element.style.display = 'none';
        }
    }
Sys.UI.DomElement._ensureOldDisplayMode = function Sys$UI$DomElement$_ensureOldDisplayMode(element) {
    if (!element._oldDisplayMode) {
        var style = element.currentStyle || Sys.UI.DomElement._getCurrentStyle(element);
        element._oldDisplayMode = style ? style.display : null;
        if (!element._oldDisplayMode || element._oldDisplayMode === 'none') {
            switch(element.tagName.toUpperCase()) {
                case 'DIV': case 'P': case 'ADDRESS': case 'BLOCKQUOTE': case 'BODY': case 'COL':
                case 'COLGROUP': case 'DD': case 'DL': case 'DT': case 'FIELDSET': case 'FORM':
                case 'H1': case 'H2': case 'H3': case 'H4': case 'H5': case 'H6': case 'HR':
                case 'IFRAME': case 'LEGEND': case 'OL': case 'PRE': case 'TABLE': case 'TD':
                case 'TH': case 'TR': case 'UL':
                    element._oldDisplayMode = 'block';
                    break;
                case 'LI':
                    element._oldDisplayMode = 'list-item';
                    break;
                default:
                    element._oldDisplayMode = 'inline';
            }
        }
    }
Sys.UI.DomElement._getWindow = function Sys$UI$DomElement$_getWindow(element) {
    var doc = element.ownerDocument || element.document || element;
    return doc.defaultView || doc.parentWindow;
Sys.UI.DomElement._getCurrentStyle = function Sys$UI$DomElement$_getCurrentStyle(element) {
    if (element.nodeType === 3) return null;
    var w = Sys.UI.DomElement._getWindow(element);
    if (element.documentElement) element = element.documentElement;
    var computedStyle = (w && (element !== w) && w.getComputedStyle) ?
        w.getComputedStyle(element, null) :
        element.currentStyle || element.style;
    if (!computedStyle && (Sys.Browser.agent === Sys.Browser.Safari) && element.style) {
        var oldDisplay = element.style.display;
        var oldPosition = element.style.position;
        element.style.position = 'absolute';
        element.style.display = 'block';
        var style = w.getComputedStyle(element, null);
        element.style.display = oldDisplay;
        element.style.position = oldPosition;
        computedStyle = {};
        for (var n in style) {
            computedStyle[n] = style[n];
        }
        computedStyle.display = 'none';
    }
    return computedStyle;
Sys.IContainer = function Sys$IContainer() {
    throw Error.notImplemented();
    function Sys$IContainer$addComponent(component) {
        /// <summary locid="M:J#Sys.IContainer.addComponent" />
        /// <param name="component" type="Sys.Component"></param>
        var e = Function._validateParams(arguments, [
            {name: "component", type: Sys.Component}
        ]);
        if (e) throw e;
        throw Error.notImplemented();
    }
    function Sys$IContainer$removeComponent(component) {
        /// <summary locid="M:J#Sys.IContainer.removeComponent" />
        /// <param name="component" type="Sys.Component"></param>
        var e = Function._validateParams(arguments, [
            {name: "component", type: Sys.Component}
        ]);
        if (e) throw e;
        throw Error.notImplemented();
    }
    function Sys$IContainer$findComponent(id) {
        /// <summary locid="M:J#Sys.IContainer.findComponent" />
        /// <param name="id" type="String"></param>
        /// <returns type="Sys.Component"></returns>
        var e = Function._validateParams(arguments, [
            {name: "id", type: String}
        ]);
        if (e) throw e;
        throw Error.notImplemented();
    }
    function Sys$IContainer$getComponents() {
        /// <summary locid="M:J#Sys.IContainer.getComponents" />
        /// <returns type="Array" elementType="Sys.Component"></returns>
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
Sys.IContainer.prototype = {
    addComponent: Sys$IContainer$addComponent,
    removeComponent: Sys$IContainer$removeComponent,
    findComponent: Sys$IContainer$findComponent,
    getComponents: Sys$IContainer$getComponents
Sys.IContainer.registerInterface("Sys.IContainer");
Sys._ScriptLoader = function Sys$_ScriptLoader() {
    this._scriptsToLoad = null;
    this._sessions = [];
    this._scriptLoadedDelegate = Function.createDelegate(this, this._scriptLoadedHandler);
    function Sys$_ScriptLoader$dispose() {
        this._stopSession();
        this._loading = false;
        if(this._events) {
            delete this._events;
        }
        this._sessions = null;
        this._currentSession = null;
        this._scriptLoadedDelegate = null;        
    }
    function Sys$_ScriptLoader$loadScripts(scriptTimeout, allScriptsLoadedCallback, scriptLoadFailedCallback, scriptLoadTimeoutCallback) {
        /// <summary locid="M:J#Sys._ScriptLoader.loadScripts" />
        /// <param name="scriptTimeout" type="Number" integer="true"></param>
        /// <param name="allScriptsLoadedCallback" type="Function" mayBeNull="true"></param>
        /// <param name="scriptLoadFailedCallback" type="Function" mayBeNull="true"></param>
        /// <param name="scriptLoadTimeoutCallback" type="Function" mayBeNull="true"></param>
        var e = Function._validateParams(arguments, [
            {name: "scriptTimeout", type: Number, integer: true},
            {name: "allScriptsLoadedCallback", type: Function, mayBeNull: true},
            {name: "scriptLoadFailedCallback", type: Function, mayBeNull: true},
            {name: "scriptLoadTimeoutCallback", type: Function, mayBeNull: true}
        ]);
        if (e) throw e;
        var session = {
            allScriptsLoadedCallback: allScriptsLoadedCallback,
            scriptLoadFailedCallback: scriptLoadFailedCallback,
            scriptLoadTimeoutCallback: scriptLoadTimeoutCallback,
            scriptsToLoad: this._scriptsToLoad,
            scriptTimeout: scriptTimeout };
        this._scriptsToLoad = null;
        this._sessions[this._sessions.length] = session;
        
        if (!this._loading) {
            this._nextSession();
        }
    }
    function Sys$_ScriptLoader$notifyScriptLoaded() {
        /// <summary locid="M:J#Sys._ScriptLoader.notifyScriptLoaded" />
        if (arguments.length !== 0) throw Error.parameterCount();
        
        if(!this._loading) {
            return;
        }
        this._currentTask._notified++;
        
        if(Sys.Browser.agent === Sys.Browser.Safari) {           
            if(this._currentTask._notified === 1) {
                window.setTimeout(Function.createDelegate(this, function() {
                    this._scriptLoadedHandler(this._currentTask.get_scriptElement(), true);
                }), 0);
            }
        }
    }
    function Sys$_ScriptLoader$queueCustomScriptTag(scriptAttributes) {
        /// <summary locid="M:J#Sys._ScriptLoader.queueCustomScriptTag" />
        /// <param name="scriptAttributes" mayBeNull="false"></param>
        var e = Function._validateParams(arguments, [
            {name: "scriptAttributes"}
        ]);
        if (e) throw e;
        if(!this._scriptsToLoad) {
            this._scriptsToLoad = [];
        }
        Array.add(this._scriptsToLoad, scriptAttributes);
    }
    function Sys$_ScriptLoader$queueScriptBlock(scriptContent) {
        /// <summary locid="M:J#Sys._ScriptLoader.queueScriptBlock" />
        /// <param name="scriptContent" type="String" mayBeNull="false"></param>
        var e = Function._validateParams(arguments, [
            {name: "scriptContent", type: String}
        ]);
        if (e) throw e;
        if(!this._scriptsToLoad) {
            this._scriptsToLoad = [];
        }
        Array.add(this._scriptsToLoad, {text: scriptContent});
    }
    function Sys$_ScriptLoader$queueScriptReference(scriptUrl) {
        /// <summary locid="M:J#Sys._ScriptLoader.queueScriptReference" />
        /// <param name="scriptUrl" type="String" mayBeNull="false"></param>
        var e = Function._validateParams(arguments, [
            {name: "scriptUrl", type: String}
        ]);
        if (e) throw e;
        if(!this._scriptsToLoad) {
            this._scriptsToLoad = [];
        }
        Array.add(this._scriptsToLoad, {src: scriptUrl});
    }
    function Sys$_ScriptLoader$_createScriptElement(queuedScript) {
        var scriptElement = document.createElement('script');
        scriptElement.type = 'text/javascript';
        for (var attr in queuedScript) {
            scriptElement[attr] = queuedScript[attr];
        }
        
        return scriptElement;
    }
    function Sys$_ScriptLoader$_loadScriptsInternal() {
        var session = this._currentSession;
        if (session.scriptsToLoad && session.scriptsToLoad.length > 0) {
            var nextScript = Array.dequeue(session.scriptsToLoad);
            var scriptElement = this._createScriptElement(nextScript);
            
            if (scriptElement.text && Sys.Browser.agent === Sys.Browser.Safari) {
                scriptElement.innerHTML = scriptElement.text;
                delete scriptElement.text;
            }            
            if (typeof(nextScript.src) === "string") {
                this._currentTask = new Sys._ScriptLoaderTask(scriptElement, this._scriptLoadedDelegate);
                this._currentTask.execute();
            }
            else {
                var headElements = document.getElementsByTagName('head');
                if (headElements.length === 0) {
                     throw new Error.invalidOperation(Sys.Res.scriptLoadFailedNoHead);
                }
                else {
                     headElements[0].appendChild(scriptElement);
                }
                
                
                Sys._ScriptLoader._clearScript(scriptElement);
                this._loadScriptsInternal();
            }
        }
        else {
            this._stopSession();
            var callback = session.allScriptsLoadedCallback;
            if(callback) {
                callback(this);
            }
            this._nextSession();
        }
    }
    function Sys$_ScriptLoader$_nextSession() {
        if (this._sessions.length === 0) {
            this._loading = false;
            this._currentSession = null;
            return;
        }
        this._loading = true;
        
        var session = Array.dequeue(this._sessions);
        this._currentSession = session;
        this._loadScriptsInternal();
    }
    function Sys$_ScriptLoader$_raiseError(multipleCallbacks) {
        var callback = this._currentSession.scriptLoadFailedCallback;
        var scriptElement = this._currentTask.get_scriptElement();
        this._stopSession();
        
        if(callback) {
            callback(this, scriptElement, multipleCallbacks);
            this._nextSession();
        }
        else {
            this._loading = false;
            throw Sys._ScriptLoader._errorScriptLoadFailed(scriptElement.src, multipleCallbacks);
        }
    }
    function Sys$_ScriptLoader$_scriptLoadedHandler(scriptElement, loaded) {
        if(loaded && this._currentTask._notified) {
            if(this._currentTask._notified > 1) {
                this._raiseError(true);
            }
            else {
                Array.add(Sys._ScriptLoader._getLoadedScripts(), scriptElement.src);
                this._currentTask.dispose();
                this._currentTask = null;
                this._loadScriptsInternal();
            }
        }
        else {
            this._raiseError(false);
        }
    }
    function Sys$_ScriptLoader$_scriptLoadTimeoutHandler() {
        var callback = this._currentSession.scriptLoadTimeoutCallback;
        this._stopSession();
        if(callback) {
            callback(this);
        }
        this._nextSession();
    }
    function Sys$_ScriptLoader$_stopSession() {
        if(this._currentTask) {
            this._currentTask.dispose();
            this._currentTask = null;
        }
    }
Sys._ScriptLoader.prototype = {
    dispose: Sys$_ScriptLoader$dispose,
    loadScripts: Sys$_ScriptLoader$loadScripts,
    notifyScriptLoaded: Sys$_ScriptLoader$notifyScriptLoaded,
    queueCustomScriptTag: Sys$_ScriptLoader$queueCustomScriptTag,
    queueScriptBlock: Sys$_ScriptLoader$queueScriptBlock,
    queueScriptReference: Sys$_ScriptLoader$queueScriptReference,
    _createScriptElement: Sys$_ScriptLoader$_createScriptElement,
    _loadScriptsInternal: Sys$_ScriptLoader$_loadScriptsInternal,
    _nextSession: Sys$_ScriptLoader$_nextSession,
    _raiseError: Sys$_ScriptLoader$_raiseError,
    _scriptLoadedHandler: Sys$_ScriptLoader$_scriptLoadedHandler,
    _scriptLoadTimeoutHandler: Sys$_ScriptLoader$_scriptLoadTimeoutHandler,
    _stopSession: Sys$_ScriptLoader$_stopSession    
Sys._ScriptLoader.registerClass('Sys._ScriptLoader', null, Sys.IDisposable);
Sys._ScriptLoader.getInstance = function Sys$_ScriptLoader$getInstance() {
    var sl = Sys._ScriptLoader._activeInstance;
    if(!sl) {
        sl = Sys._ScriptLoader._activeInstance = new Sys._ScriptLoader();
    }
    return sl;
Sys._ScriptLoader.isScriptLoaded = function Sys$_ScriptLoader$isScriptLoaded(scriptSrc) {
    var dummyScript = document.createElement('script');
    dummyScript.src = scriptSrc;
    return Array.contains(Sys._ScriptLoader._getLoadedScripts(), dummyScript.src);
Sys._ScriptLoader.readLoadedScripts = function Sys$_ScriptLoader$readLoadedScripts() {
    if(!Sys._ScriptLoader._referencedScripts) {
        var referencedScripts = Sys._ScriptLoader._referencedScripts = [];
        var existingScripts = document.getElementsByTagName('script');
        for (i = existingScripts.length - 1; i >= 0; i--) {
            var scriptNode = existingScripts[i];
            var scriptSrc = scriptNode.src;
            if (scriptSrc.length) {
                if (!Array.contains(referencedScripts, scriptSrc)) {
                    Array.add(referencedScripts, scriptSrc);
                }
            }
        }
    }
Sys._ScriptLoader._clearScript = function Sys$_ScriptLoader$_clearScript(scriptElement) {
    if (!Sys.Debug.isDebug) {
        scriptElement.parentNode.removeChild(scriptElement);
    }
Sys._ScriptLoader._errorScriptLoadFailed = function Sys$_ScriptLoader$_errorScriptLoadFailed(scriptUrl, multipleCallbacks) {
    var errorMessage;
    if(multipleCallbacks) {
        errorMessage = Sys.Res.scriptLoadMultipleCallbacks;
    }
    else {
        errorMessage = Sys.Res.scriptLoadFailedDebug;
    }
    var displayMessage = "Sys.ScriptLoadFailedException: " + String.format(errorMessage, scriptUrl);
    var e = Error.create(displayMessage, {name: 'Sys.ScriptLoadFailedException', 'scriptUrl': scriptUrl });
    e.popStackFrame();
    return e;
Sys._ScriptLoader._getLoadedScripts = function Sys$_ScriptLoader$_getLoadedScripts() {
    if(!Sys._ScriptLoader._referencedScripts) {
        Sys._ScriptLoader._referencedScripts = [];
        Sys._ScriptLoader.readLoadedScripts();
    }
    return Sys._ScriptLoader._referencedScripts;
Sys._ScriptLoaderTask = function Sys$_ScriptLoaderTask(scriptElement, completedCallback) {
    /// <summary locid="M:J#Sys._ScriptLoaderTask.#ctor" />
    /// <param name="scriptElement" domElement="true"></param>
    /// <param name="completedCallback" type="Function"></param>
    var e = Function._validateParams(arguments, [
        {name: "scriptElement", domElement: true},
        {name: "completedCallback", type: Function}
    ]);
    if (e) throw e;
    this._scriptElement = scriptElement;
    this._completedCallback = completedCallback;
    this._notified = 0;
    function Sys$_ScriptLoaderTask$get_scriptElement() {
        /// <value domElement="true" locid="P:J#Sys._ScriptLoaderTask.scriptElement"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._scriptElement;
    }
    function Sys$_ScriptLoaderTask$dispose() {
        if(this._disposed) {
            return;
        }
        this._disposed = true;
        this._removeScriptElementHandlers();
        Sys._ScriptLoader._clearScript(this._scriptElement);
        this._scriptElement = null;
    }
    function Sys$_ScriptLoaderTask$execute() {
        /// <summary locid="M:J#Sys._ScriptLoaderTask.execute" />
        if (arguments.length !== 0) throw Error.parameterCount();
        this._addScriptElementHandlers();
        var headElements = document.getElementsByTagName('head');
        if (headElements.length === 0) {
             throw new Error.invalidOperation(Sys.Res.scriptLoadFailedNoHead);
        }
        else {
             headElements[0].appendChild(this._scriptElement);
        }
    }
    function Sys$_ScriptLoaderTask$_addScriptElementHandlers() {
        this._scriptLoadDelegate = Function.createDelegate(this, this._scriptLoadHandler);
        
        if (Sys.Browser.agent !== Sys.Browser.InternetExplorer) {
            this._scriptElement.readyState = 'loaded';
            $addHandler(this._scriptElement, 'load', this._scriptLoadDelegate);
        }
        else {
            $addHandler(this._scriptElement, 'readystatechange', this._scriptLoadDelegate);
        }    
        if (this._scriptElement.addEventListener) {
            this._scriptErrorDelegate = Function.createDelegate(this, this._scriptErrorHandler);
            this._scriptElement.addEventListener('error', this._scriptErrorDelegate, false);
        }
    }
    function Sys$_ScriptLoaderTask$_removeScriptElementHandlers() {
        if(this._scriptLoadDelegate) {
            var scriptElement = this.get_scriptElement();
            if (Sys.Browser.agent !== Sys.Browser.InternetExplorer) {
                $removeHandler(scriptElement, 'load', this._scriptLoadDelegate);
            }
            else {
                $removeHandler(scriptElement, 'readystatechange', this._scriptLoadDelegate);
            }
            if (this._scriptErrorDelegate) {
                this._scriptElement.removeEventListener('error', this._scriptErrorDelegate, false);
                this._scriptErrorDelegate = null;
            }
            this._scriptLoadDelegate = null;
        }
    }
    function Sys$_ScriptLoaderTask$_scriptErrorHandler() {
        if(this._disposed) {
            return;
        }
        
        this._completedCallback(this.get_scriptElement(), false);
    }
    function Sys$_ScriptLoaderTask$_scriptLoadHandler() {
        if(this._disposed) {
            return;
        }
        var scriptElement = this.get_scriptElement();
        if ((scriptElement.readyState !== 'loaded') &&
            (scriptElement.readyState !== 'complete')) {
            return;
        }
        
        var _this = this;
        window.setTimeout(function() {
            _this._completedCallback(scriptElement, true);
        }, 0);
    }
Sys._ScriptLoaderTask.prototype = {
    get_scriptElement: Sys$_ScriptLoaderTask$get_scriptElement,
    dispose: Sys$_ScriptLoaderTask$dispose,
    execute: Sys$_ScriptLoaderTask$execute,
    _addScriptElementHandlers: Sys$_ScriptLoaderTask$_addScriptElementHandlers,    
    _removeScriptElementHandlers: Sys$_ScriptLoaderTask$_removeScriptElementHandlers,    
    _scriptErrorHandler: Sys$_ScriptLoaderTask$_scriptErrorHandler,
    _scriptLoadHandler: Sys$_ScriptLoaderTask$_scriptLoadHandler  
Sys._ScriptLoaderTask.registerClass("Sys._ScriptLoaderTask", null, Sys.IDisposable);
Sys.ApplicationLoadEventArgs = function Sys$ApplicationLoadEventArgs(components, isPartialLoad) {
    /// <summary locid="M:J#Sys.ApplicationLoadEventArgs.#ctor" />
    /// <param name="components" type="Array" elementType="Sys.Component"></param>
    /// <param name="isPartialLoad" type="Boolean"></param>
    var e = Function._validateParams(arguments, [
        {name: "components", type: Array, elementType: Sys.Component},
        {name: "isPartialLoad", type: Boolean}
    ]);
    if (e) throw e;
    Sys.ApplicationLoadEventArgs.initializeBase(this);
    this._components = components;
    this._isPartialLoad = isPartialLoad;
    function Sys$ApplicationLoadEventArgs$get_components() {
        /// <value type="Array" elementType="Sys.Component" locid="P:J#Sys.ApplicationLoadEventArgs.components"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._components;
    }
    function Sys$ApplicationLoadEventArgs$get_isPartialLoad() {
        /// <value type="Boolean" locid="P:J#Sys.ApplicationLoadEventArgs.isPartialLoad"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._isPartialLoad;
    }
Sys.ApplicationLoadEventArgs.prototype = {
    get_components: Sys$ApplicationLoadEventArgs$get_components,
    get_isPartialLoad: Sys$ApplicationLoadEventArgs$get_isPartialLoad
Sys.ApplicationLoadEventArgs.registerClass('Sys.ApplicationLoadEventArgs', Sys.EventArgs);
Sys.HistoryEventArgs = function Sys$HistoryEventArgs(state) {
    /// <summary locid="M:J#Sys.HistoryEventArgs.#ctor" />
    /// <param name="state" type="Object"></param>
    var e = Function._validateParams(arguments, [
        {name: "state", type: Object}
    ]);
    if (e) throw e;
    Sys.HistoryEventArgs.initializeBase(this);
    this._state = state;
    function Sys$HistoryEventArgs$get_state() {
        /// <value type="Object" locid="P:J#Sys.HistoryEventArgs.state"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._state;
    }
Sys.HistoryEventArgs.prototype = {
    get_state: Sys$HistoryEventArgs$get_state
Sys.HistoryEventArgs.registerClass('Sys.HistoryEventArgs', Sys.EventArgs);
Sys._Application = function Sys$_Application() {
    /// <summary locid="M:J#Sys.Application.#ctor" />
    if (arguments.length !== 0) throw Error.parameterCount();
    Sys._Application.initializeBase(this);
    this._disposableObjects = [];
    this._components = {};
    this._createdComponents = [];
    this._secondPassComponents = [];
    this._appLoadHandler = null;
    this._beginRequestHandler = null;
    this._clientId = null;
    this._currentEntry = '';
    this._endRequestHandler = null;
    this._history = null;
    this._enableHistory = false;
    this._historyEnabledInScriptManager = false;
    this._historyFrame = null;
    this._historyInitialized = false;
    this._historyInitialLength = 0;
    this._historyLength = 0;
    this._historyPointIsNew = false;
    this._ignoreTimer = false;
    this._initialState = null;
    this._state = {};
    this._timerCookie = 0;
    this._timerHandler = null;
    this._uniqueId = null;
    this._unloadHandlerDelegate = Function.createDelegate(this, this._unloadHandler);
    this._loadHandlerDelegate = Function.createDelegate(this, this._loadHandler);
    Sys.UI.DomEvent.addHandler(window, "unload", this._unloadHandlerDelegate);
    Sys.UI.DomEvent.addHandler(window, "load", this._loadHandlerDelegate);
    function Sys$_Application$get_isCreatingComponents() {
        /// <value type="Boolean" locid="P:J#Sys.Application.isCreatingComponents"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._creatingComponents;
    }
    function Sys$_Application$get_stateString() {
        /// <value type="String" locid="P:J#Sys.Application.stateString"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        var hash = window.location.hash;
        if (this._isSafari2()) {
            var history = this._getHistory();
            if (history) {
                hash = history[window.history.length - this._historyInitialLength];
            }
        }
        if ((hash.length > 0) && (hash.charAt(0) === '#')) {
            hash = hash.substring(1);
        }
        if (Sys.Browser.agent === Sys.Browser.Firefox) {
            hash = this._serializeState(this._deserializeState(hash, true));
        }
        return hash;
    }
    function Sys$_Application$get_enableHistory() {
        /// <value type="Boolean" locid="P:J#Sys.Application.enableHistory"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._enableHistory;
    }
    function Sys$_Application$set_enableHistory(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: Boolean}]);
        if (e) throw e;
        if (this._initialized && !this._initializing) {
            throw Error.invalidOperation(Sys.Res.historyCannotEnableHistory);
        }
        else if (this._historyEnabledInScriptManager && !value) {
            throw Error.invalidOperation(Sys.Res.invalidHistorySettingCombination);
        }
        this._enableHistory = value;
    }
    function Sys$_Application$add_init(handler) {
        /// <summary locid="E:J#Sys.Application.init" />
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        if (this._initialized) {
            handler(this, Sys.EventArgs.Empty);
        }
        else {
            this.get_events().addHandler("init", handler);
        }
    }
    function Sys$_Application$remove_init(handler) {
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this.get_events().removeHandler("init", handler);
    }
    function Sys$_Application$add_load(handler) {
        /// <summary locid="E:J#Sys.Application.load" />
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this.get_events().addHandler("load", handler);
    }
    function Sys$_Application$remove_load(handler) {
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this.get_events().removeHandler("load", handler);
    }
    function Sys$_Application$add_navigate(handler) {
        /// <summary locid="E:J#Sys.Application.navigate" />
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this.get_events().addHandler("navigate", handler);
    }
    function Sys$_Application$remove_navigate(handler) {
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this.get_events().removeHandler("navigate", handler);
    }
    function Sys$_Application$add_unload(handler) {
        /// <summary locid="E:J#Sys.Application.unload" />
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this.get_events().addHandler("unload", handler);
    }
    function Sys$_Application$remove_unload(handler) {
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this.get_events().removeHandler("unload", handler);
    }
    function Sys$_Application$addComponent(component) {
        /// <summary locid="M:J#Sys.Application.addComponent" />
        /// <param name="component" type="Sys.Component"></param>
        var e = Function._validateParams(arguments, [
            {name: "component", type: Sys.Component}
        ]);
        if (e) throw e;
        var id = component.get_id();
        if (!id) throw Error.invalidOperation(Sys.Res.cantAddWithoutId);
        if (typeof(this._components[id]) !== 'undefined') throw Error.invalidOperation(String.format(Sys.Res.appDuplicateComponent, id));
        this._components[id] = component;
    }
    function Sys$_Application$addHistoryPoint(state, title) {
        /// <summary locid="M:J#Sys.Application.addHistoryPoint" />
        /// <param name="state" type="Object"></param>
        /// <param name="title" type="String" optional="true" mayBeNull="true"></param>
        var e = Function._validateParams(arguments, [
            {name: "state", type: Object},
            {name: "title", type: String, mayBeNull: true, optional: true}
        ]);
        if (e) throw e;
        if (!this._enableHistory) throw Error.invalidOperation(Sys.Res.historyCannotAddHistoryPointWithHistoryDisabled);
        for (var n in state) {
            var v = state[n];
            var t = typeof(v);
            if ((v !== null) && ((t === 'object') || (t === 'function') || (t === 'undefined'))) {
                throw Error.argument('state', Sys.Res.stateMustBeStringDictionary);
            }
        }
        this._ensureHistory();
        var initialState = this._state;
        for (var key in state) {
            var value = state[key];
            if (value === null) {
                if (typeof(initialState[key]) !== 'undefined') {
                    delete initialState[key];
                }
            }
            else {
                initialState[key] = value;
            }
        }
        var entry = this._serializeState(initialState);
        this._historyPointIsNew = true;
        this._setState(entry, title);
        this._raiseNavigate();
    }
    function Sys$_Application$beginCreateComponents() {
        /// <summary locid="M:J#Sys.Application.beginCreateComponents" />
        if (arguments.length !== 0) throw Error.parameterCount();
        this._creatingComponents = true;
    }
    function Sys$_Application$dispose() {
        /// <summary locid="M:J#Sys.Application.dispose" />
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._disposing) {
            this._disposing = true;
            if (this._timerCookie) {
                window.clearTimeout(this._timerCookie);
                delete this._timerCookie;
            }
            if (this._endRequestHandler) {
                Sys.WebForms.PageRequestManager.getInstance().remove_endRequest(this._endRequestHandler);
                delete this._endRequestHandler;
            }
            if (this._beginRequestHandler) {
                Sys.WebForms.PageRequestManager.getInstance().remove_beginRequest(this._beginRequestHandler);
                delete this._beginRequestHandler;
            }
            if (window.pageUnload) {
                window.pageUnload(this, Sys.EventArgs.Empty);
            }
            var unloadHandler = this.get_events().getHandler("unload");
            if (unloadHandler) {
                unloadHandler(this, Sys.EventArgs.Empty);
            }
            var disposableObjects = Array.clone(this._disposableObjects);
            for (var i = 0, l = disposableObjects.length; i < l; i++) {
                disposableObjects[i].dispose();
            }
            Array.clear(this._disposableObjects);
            Sys.UI.DomEvent.removeHandler(window, "unload", this._unloadHandlerDelegate);
            if(this._loadHandlerDelegate) {
                Sys.UI.DomEvent.removeHandler(window, "load", this._loadHandlerDelegate);
                this._loadHandlerDelegate = null;
            }
            var sl = Sys._ScriptLoader.getInstance();
            if(sl) {
                sl.dispose();
            }
            Sys._Application.callBaseMethod(this, 'dispose');
        }
    }
    function Sys$_Application$endCreateComponents() {
        /// <summary locid="M:J#Sys.Application.endCreateComponents" />
        if (arguments.length !== 0) throw Error.parameterCount();
        var components = this._secondPassComponents;
        for (var i = 0, l = components.length; i < l; i++) {
            var component = components[i].component;
            Sys$Component$_setReferences(component, components[i].references);
            component.endUpdate();
        }
        this._secondPassComponents = [];
        this._creatingComponents = false;
    }
    function Sys$_Application$findComponent(id, parent) {
        /// <summary locid="M:J#Sys.Application.findComponent" />
        /// <param name="id" type="String"></param>
        /// <param name="parent" optional="true" mayBeNull="true"></param>
        /// <returns type="Sys.Component" mayBeNull="true"></returns>
        var e = Function._validateParams(arguments, [
            {name: "id", type: String},
            {name: "parent", mayBeNull: true, optional: true}
        ]);
        if (e) throw e;
        return (parent ?
            ((Sys.IContainer.isInstanceOfType(parent)) ?
                parent.findComponent(id) :
                parent[id] || null) :
            Sys.Application._components[id] || null);
    }
    function Sys$_Application$getComponents() {
        /// <summary locid="M:J#Sys.Application.getComponents" />
        /// <returns type="Array" elementType="Sys.Component"></returns>
        if (arguments.length !== 0) throw Error.parameterCount();
        var res = [];
        var components = this._components;
        for (var name in components) {
            res[res.length] = components[name];
        }
        return res;
    }
    function Sys$_Application$initialize() {
        /// <summary locid="M:J#Sys.Application.initialize" />
        if (arguments.length !== 0) throw Error.parameterCount();
        if(!this._initialized && !this._initializing) {
            this._initializing = true;
            var check, er, app = this;
            function init() { if (!app._initialized) app._doInitialize(); }
            var onload = function() {
                Sys.UI.DomEvent.removeHandler(window, "load", onload);
                init();
            }
            Sys.UI.DomEvent.addHandler(window, "load", onload);
            if (document.addEventListener) {
                try {
                    document.addEventListener("DOMContentLoaded", check = function() {
                        document.removeEventListener("DOMContentLoaded", check, false);
                        init();
                    }, false);
                }
                catch (er) { }
            }
            else if (document.attachEvent) {
                if ((window == window.top) && document.documentElement.doScroll) {
                    var timeout, el = document.createElement("div");
                    check = function() {
                        try {
                            el.doScroll("left");
                        }
                        catch (er) {
                            timeout = window.setTimeout(check, 0);
                            return;
                        }
                        el = null;
                        init();
                    }
                    check();
                }
                else {
                    document.attachEvent("onreadystatechange", check = function() {
                        if (document.readyState === "complete") {
                            document.detachEvent("onreadystatechange", check);
                            init();
                        }
                    });
                }
            }
        }
    }
    function Sys$_Application$notifyScriptLoaded() {
        /// <summary locid="M:J#Sys.Application.notifyScriptLoaded" />
        if (arguments.length !== 0) throw Error.parameterCount();
        var sl = Sys._ScriptLoader.getInstance();
        if(sl) {
            sl.notifyScriptLoaded();
        }
    }
    function Sys$_Application$registerDisposableObject(object) {
        /// <summary locid="M:J#Sys.Application.registerDisposableObject" />
        /// <param name="object" type="Sys.IDisposable"></param>
        var e = Function._validateParams(arguments, [
            {name: "object", type: Sys.IDisposable}
        ]);
        if (e) throw e;
        if (!this._disposing) {
            this._disposableObjects[this._disposableObjects.length] = object;
        }
    }
    function Sys$_Application$raiseLoad() {
        /// <summary locid="M:J#Sys.Application.raiseLoad" />
        if (arguments.length !== 0) throw Error.parameterCount();
        var h = this.get_events().getHandler("load");
        var args = new Sys.ApplicationLoadEventArgs(Array.clone(this._createdComponents), !this._initializing);
        if (h) {
            h(this, args);
        }
        if (window.pageLoad) {
            window.pageLoad(this, args);
        }
        this._createdComponents = [];
    }
    function Sys$_Application$removeComponent(component) {
        /// <summary locid="M:J#Sys.Application.removeComponent" />
        /// <param name="component" type="Sys.Component"></param>
        var e = Function._validateParams(arguments, [
            {name: "component", type: Sys.Component}
        ]);
        if (e) throw e;
        var id = component.get_id();
        if (id) delete this._components[id];
    }
    function Sys$_Application$setServerId(clientId, uniqueId) {
        /// <summary locid="M:J#Sys.Application.setServerId" />
        /// <param name="clientId" type="String"></param>
        /// <param name="uniqueId" type="String"></param>
        var e = Function._validateParams(arguments, [
            {name: "clientId", type: String},
            {name: "uniqueId", type: String}
        ]);
        if (e) throw e;
        this._clientId = clientId;
        this._uniqueId = uniqueId;
    }
    function Sys$_Application$setServerState(value) {
        /// <summary locid="M:J#Sys.Application.setServerState" />
        /// <param name="value" type="String"></param>
        var e = Function._validateParams(arguments, [
            {name: "value", type: String}
        ]);
        if (e) throw e;
        this._ensureHistory();
        this._state.__s = value;
        this._updateHiddenField(value);
    }
    function Sys$_Application$unregisterDisposableObject(object) {
        /// <summary locid="M:J#Sys.Application.unregisterDisposableObject" />
        /// <param name="object" type="Sys.IDisposable"></param>
        var e = Function._validateParams(arguments, [
            {name: "object", type: Sys.IDisposable}
        ]);
        if (e) throw e;
        if (!this._disposing) {
            Array.remove(this._disposableObjects, object);
        }
    }
    function Sys$_Application$_addComponentToSecondPass(component, references) {
        this._secondPassComponents[this._secondPassComponents.length] = {component: component, references: references};
    }
    function Sys$_Application$_deserializeState(entry, skipDecodeUri) {
        var result = {};
        entry = entry || '';
        var serverSeparator = entry.indexOf('&&');
        if ((serverSeparator !== -1) && (serverSeparator + 2 < entry.length)) {
            result.__s = entry.substr(serverSeparator + 2);
            entry = entry.substr(0, serverSeparator);
        }
        var tokens = entry.split('&');
        for (var i = 0, l = tokens.length; i < l; i++) {
            var token = tokens[i];
            var equal = token.indexOf('=');
            if ((equal !== -1) && (equal + 1 < token.length)) {
                var name = token.substr(0, equal);
                var value = token.substr(equal + 1);
                result[name] = skipDecodeUri ? value : decodeURIComponent(value);
            }
        }
        return result;
    }
    function Sys$_Application$_doInitialize() {
        Sys._Application.callBaseMethod(this, 'initialize');
        
        var handler = this.get_events().getHandler("init");
        if (handler) {
            this.beginCreateComponents();
            handler(this, Sys.EventArgs.Empty);
            this.endCreateComponents();
        }
        if (Sys.WebForms) {
            this._beginRequestHandler = Function.createDelegate(this, this._onPageRequestManagerBeginRequest);
            Sys.WebForms.PageRequestManager.getInstance().add_beginRequest(this._beginRequestHandler);
            this._endRequestHandler = Function.createDelegate(this, this._onPageRequestManagerEndRequest);
            Sys.WebForms.PageRequestManager.getInstance().add_endRequest(this._endRequestHandler);
        }
        
        var loadedEntry = this.get_stateString();
        if (loadedEntry !== this._currentEntry) {
            this._navigate(loadedEntry);
        }
        this.raiseLoad();
        this._initializing = false;
    }
    function Sys$_Application$_enableHistoryInScriptManager() {
        this._enableHistory = true;
        this._historyEnabledInScriptManager = true;
    }
    function Sys$_Application$_ensureHistory() {
        if (!this._historyInitialized && this._enableHistory) {
            if ((Sys.Browser.agent === Sys.Browser.InternetExplorer) && (Sys.Browser.documentMode < 8)) {
                this._historyFrame = document.getElementById('__historyFrame');
                if (!this._historyFrame) throw Error.invalidOperation(Sys.Res.historyMissingFrame);
                this._ignoreIFrame = true;
            }
            if (this._isSafari2()) {
                var historyElement = document.getElementById('__history');
                if (!historyElement) throw Error.invalidOperation(Sys.Res.historyMissingHiddenInput);
                this._setHistory([window.location.hash]);
                this._historyInitialLength = window.history.length;
            }
            
            this._timerHandler = Function.createDelegate(this, this._onIdle);
            this._timerCookie = window.setTimeout(this._timerHandler, 100);
            
            try {
                this._initialState = this._deserializeState(this.get_stateString());
            } catch(e) {}
            
            this._historyInitialized = true;
        }
    }
    function Sys$_Application$_getHistory() {
        var historyElement = document.getElementById('__history');
        if (!historyElement) return '';
        var v = historyElement.value;
        return v ? Sys.Serialization.JavaScriptSerializer.deserialize(v, true) : '';
    }
    function Sys$_Application$_isSafari2() {
        return (Sys.Browser.agent === Sys.Browser.Safari) &&
            (Sys.Browser.version <= 419.3);
    }
    function Sys$_Application$_loadHandler() {
        if(this._loadHandlerDelegate) {
            Sys.UI.DomEvent.removeHandler(window, "load", this._loadHandlerDelegate);
            this._loadHandlerDelegate = null;
        }
        this.initialize();
    }
    function Sys$_Application$_navigate(entry) {
        this._ensureHistory();
        var state = this._deserializeState(entry);
        
        if (this._uniqueId) {
            var oldServerEntry = this._state.__s || '';
            var newServerEntry = state.__s || '';
            if (newServerEntry !== oldServerEntry) {
                this._updateHiddenField(newServerEntry);
                __doPostBack(this._uniqueId, newServerEntry);
                this._state = state;
                return;
            }
        }
        this._setState(entry);
        this._state = state;
        this._raiseNavigate();
    }
    function Sys$_Application$_onIdle() {
        delete this._timerCookie;
        
        var entry = this.get_stateString();
        if (entry !== this._currentEntry) {
            if (!this._ignoreTimer) {
                this._historyPointIsNew = false;
                this._navigate(entry);
                this._historyLength = window.history.length;
            }
        }
        else {
            this._ignoreTimer = false;
        }
        this._timerCookie = window.setTimeout(this._timerHandler, 100);
    }
    function Sys$_Application$_onIFrameLoad(entry) {
        this._ensureHistory();
        if (!this._ignoreIFrame) {
            this._historyPointIsNew = false;
            this._navigate(entry);
        }
        this._ignoreIFrame = false;
    }
    function Sys$_Application$_onPageRequestManagerBeginRequest(sender, args) {
        this._ignoreTimer = true;
    }
    function Sys$_Application$_onPageRequestManagerEndRequest(sender, args) {
        var dataItem = args.get_dataItems()[this._clientId];
        var eventTarget = document.getElementById("__EVENTTARGET");
        if (eventTarget && eventTarget.value === this._uniqueId) {
            eventTarget.value = '';
        }
        if (typeof(dataItem) !== 'undefined') {
            this.setServerState(dataItem);
            this._historyPointIsNew = true;
        }
        else {
            this._ignoreTimer = false;
        }
        var entry = this._serializeState(this._state);
        if (entry !== this._currentEntry) {
            this._ignoreTimer = true;
            this._setState(entry);
            this._raiseNavigate();
        }
    }
    function Sys$_Application$_raiseNavigate() {
        var h = this.get_events().getHandler("navigate");
        var stateClone = {};
        for (var key in this._state) {
            if (key !== '__s') {
                stateClone[key] = this._state[key];
            }
        }
        var args = new Sys.HistoryEventArgs(stateClone);
        if (h) {
            h(this, args);
        }
    }
    function Sys$_Application$_serializeState(state) {
        var serialized = [];
        for (var key in state) {
            var value = state[key];
            if (key === '__s') {
                var serverState = value;
            }
            else {
                if (key.indexOf('=') !== -1) throw Error.argument('state', Sys.Res.stateFieldNameInvalid);
                serialized[serialized.length] = key + '=' + encodeURIComponent(value);
            }
        }
        return serialized.join('&') + (serverState ? '&&' + serverState : '');
    }
    function Sys$_Application$_setHistory(historyArray) {
        var historyElement = document.getElementById('__history');
        if (historyElement) {
            historyElement.value = Sys.Serialization.JavaScriptSerializer.serialize(historyArray);
        }
    }
    function Sys$_Application$_setState(entry, title) {
        entry = entry || '';
        if (entry !== this._currentEntry) {
            if (window.theForm) {
                var action = window.theForm.action;
                var hashIndex = action.indexOf('#');
                window.theForm.action = ((hashIndex !== -1) ? action.substring(0, hashIndex) : action) + '#' + entry;
            }
            
            if (this._historyFrame && this._historyPointIsNew) {
                this._ignoreIFrame = true;
                this._historyPointIsNew = false;
                var frameDoc = this._historyFrame.contentWindow.document;
                frameDoc.open("javascript:'<html></html>'");
                frameDoc.write("<html><head><title>" + (title || document.title) +
                    "</title><scri" + "pt type=\"text/javascript\">parent.Sys.Application._onIFrameLoad('" + 
                    entry + "');</scri" + "pt></head><body></body></html>");
                frameDoc.close();
            }
            this._ignoreTimer = false;
            var currentHash = this.get_stateString();
            this._currentEntry = entry;
            if (entry !== currentHash) {
                var loc = document.location;
                if (loc.href.length - loc.hash.length + entry.length > 1024) {
                    throw Error.invalidOperation(Sys.Res.urlMustBeLessThan1024chars);
                }
                if (this._isSafari2()) {
                    var history = this._getHistory();
                    history[window.history.length - this._historyInitialLength + 1] = entry;
                    this._setHistory(history);
                    this._historyLength = window.history.length + 1;
                    var form = document.createElement('form');
                    form.method = 'get';
                    form.action = '#' + entry;
                    document.appendChild(form);
                    form.submit();
                    document.removeChild(form);
                }
                else {
                    window.location.hash = entry;
                }
                if ((typeof(title) !== 'undefined') && (title !== null)) {
                    document.title = title;
                }
            }
        }
    }
    function Sys$_Application$_unloadHandler(event) {
        this.dispose();
    }
    function Sys$_Application$_updateHiddenField(value) {
        if (this._clientId) {
            var serverStateField = document.getElementById(this._clientId);
            if (serverStateField) {
                serverStateField.value = value;
            }
        }
    }
Sys._Application.prototype = {
    _creatingComponents: false,
    _disposing: false,
    get_isCreatingComponents: Sys$_Application$get_isCreatingComponents,
    get_stateString: Sys$_Application$get_stateString,
    get_enableHistory: Sys$_Application$get_enableHistory,
    set_enableHistory: Sys$_Application$set_enableHistory,
    add_init: Sys$_Application$add_init,
    remove_init: Sys$_Application$remove_init,
    add_load: Sys$_Application$add_load,
    remove_load: Sys$_Application$remove_load,
    add_navigate: Sys$_Application$add_navigate,
    remove_navigate: Sys$_Application$remove_navigate,
    add_unload: Sys$_Application$add_unload,
    remove_unload: Sys$_Application$remove_unload,
    addComponent: Sys$_Application$addComponent,
    addHistoryPoint: Sys$_Application$addHistoryPoint,
    beginCreateComponents: Sys$_Application$beginCreateComponents,
    dispose: Sys$_Application$dispose,
    endCreateComponents: Sys$_Application$endCreateComponents,
    findComponent: Sys$_Application$findComponent,
    getComponents: Sys$_Application$getComponents,
    initialize: Sys$_Application$initialize,
    notifyScriptLoaded: Sys$_Application$notifyScriptLoaded,
    registerDisposableObject: Sys$_Application$registerDisposableObject,
    raiseLoad: Sys$_Application$raiseLoad,
    removeComponent: Sys$_Application$removeComponent,
    setServerId: Sys$_Application$setServerId,
    setServerState: Sys$_Application$setServerState,
    unregisterDisposableObject: Sys$_Application$unregisterDisposableObject,
    _addComponentToSecondPass: Sys$_Application$_addComponentToSecondPass,
    _deserializeState: Sys$_Application$_deserializeState,
    _doInitialize: Sys$_Application$_doInitialize,
    _enableHistoryInScriptManager: Sys$_Application$_enableHistoryInScriptManager,    
    _ensureHistory: Sys$_Application$_ensureHistory,
    _getHistory: Sys$_Application$_getHistory,
    _isSafari2: Sys$_Application$_isSafari2,
    _loadHandler: Sys$_Application$_loadHandler,
    _navigate: Sys$_Application$_navigate,
    _onIdle: Sys$_Application$_onIdle,
    _onIFrameLoad: Sys$_Application$_onIFrameLoad,
    _onPageRequestManagerBeginRequest: Sys$_Application$_onPageRequestManagerBeginRequest,
    _onPageRequestManagerEndRequest: Sys$_Application$_onPageRequestManagerEndRequest,
    _raiseNavigate: Sys$_Application$_raiseNavigate,
    _serializeState: Sys$_Application$_serializeState,
    _setHistory: Sys$_Application$_setHistory,
    _setState: Sys$_Application$_setState,
    _unloadHandler: Sys$_Application$_unloadHandler,
    _updateHiddenField: Sys$_Application$_updateHiddenField
Sys._Application.registerClass('Sys._Application', Sys.Component, Sys.IContainer);
Sys.Application = new Sys._Application();
var $find = Sys.Application.findComponent;
Type.registerNamespace('Sys.Net');
Sys.Net.WebRequestExecutor = function Sys$Net$WebRequestExecutor() {
    /// <summary locid="M:J#Sys.Net.WebRequestExecutor.#ctor" />
    if (arguments.length !== 0) throw Error.parameterCount();
    this._webRequest = null;
    this._resultObject = null;
    function Sys$Net$WebRequestExecutor$get_webRequest() {
        /// <value type="Sys.Net.WebRequest" locid="P:J#Sys.Net.WebRequestExecutor.webRequest"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._webRequest;
    }
    function Sys$Net$WebRequestExecutor$_set_webRequest(value) {
        if (this.get_started()) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallOnceStarted, 'set_webRequest'));
        }
        this._webRequest = value;
    }
    function Sys$Net$WebRequestExecutor$get_started() {
        /// <value type="Boolean" locid="P:J#Sys.Net.WebRequestExecutor.started"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
    function Sys$Net$WebRequestExecutor$get_responseAvailable() {
        /// <value type="Boolean" locid="P:J#Sys.Net.WebRequestExecutor.responseAvailable"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
    function Sys$Net$WebRequestExecutor$get_timedOut() {
        /// <value type="Boolean" locid="P:J#Sys.Net.WebRequestExecutor.timedOut"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
    function Sys$Net$WebRequestExecutor$get_aborted() {
        /// <value type="Boolean" locid="P:J#Sys.Net.WebRequestExecutor.aborted"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
    function Sys$Net$WebRequestExecutor$get_responseData() {
        /// <value type="String" locid="P:J#Sys.Net.WebRequestExecutor.responseData"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
    function Sys$Net$WebRequestExecutor$get_statusCode() {
        /// <value type="Number" locid="P:J#Sys.Net.WebRequestExecutor.statusCode"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
    function Sys$Net$WebRequestExecutor$get_statusText() {
        /// <value type="String" locid="P:J#Sys.Net.WebRequestExecutor.statusText"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
    function Sys$Net$WebRequestExecutor$get_xml() {
        /// <value locid="P:J#Sys.Net.WebRequestExecutor.xml"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
    function Sys$Net$WebRequestExecutor$get_object() {
        /// <value locid="P:J#Sys.Net.WebRequestExecutor.object"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._resultObject) {
            this._resultObject = Sys.Serialization.JavaScriptSerializer.deserialize(this.get_responseData());
        }
        return this._resultObject;
    }
    function Sys$Net$WebRequestExecutor$executeRequest() {
        /// <summary locid="M:J#Sys.Net.WebRequestExecutor.executeRequest" />
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
    function Sys$Net$WebRequestExecutor$abort() {
        /// <summary locid="M:J#Sys.Net.WebRequestExecutor.abort" />
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
    function Sys$Net$WebRequestExecutor$getResponseHeader(header) {
        /// <summary locid="M:J#Sys.Net.WebRequestExecutor.getResponseHeader" />
        /// <param name="header" type="String"></param>
        var e = Function._validateParams(arguments, [
            {name: "header", type: String}
        ]);
        if (e) throw e;
        throw Error.notImplemented();
    }
    function Sys$Net$WebRequestExecutor$getAllResponseHeaders() {
        /// <summary locid="M:J#Sys.Net.WebRequestExecutor.getAllResponseHeaders" />
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
Sys.Net.WebRequestExecutor.prototype = {
    get_webRequest: Sys$Net$WebRequestExecutor$get_webRequest,
    _set_webRequest: Sys$Net$WebRequestExecutor$_set_webRequest,
    get_started: Sys$Net$WebRequestExecutor$get_started,
    get_responseAvailable: Sys$Net$WebRequestExecutor$get_responseAvailable,
    get_timedOut: Sys$Net$WebRequestExecutor$get_timedOut,
    get_aborted: Sys$Net$WebRequestExecutor$get_aborted,
    get_responseData: Sys$Net$WebRequestExecutor$get_responseData,
    get_statusCode: Sys$Net$WebRequestExecutor$get_statusCode,
    get_statusText: Sys$Net$WebRequestExecutor$get_statusText,
    get_xml: Sys$Net$WebRequestExecutor$get_xml,
    get_object: Sys$Net$WebRequestExecutor$get_object,
    executeRequest: Sys$Net$WebRequestExecutor$executeRequest,
    abort: Sys$Net$WebRequestExecutor$abort,
    getResponseHeader: Sys$Net$WebRequestExecutor$getResponseHeader,
    getAllResponseHeaders: Sys$Net$WebRequestExecutor$getAllResponseHeaders
Sys.Net.WebRequestExecutor.registerClass('Sys.Net.WebRequestExecutor');
Sys.Net.XMLDOM = function Sys$Net$XMLDOM(markup) {
    /// <summary locid="M:J#Sys.Net.XMLDOM.#ctor" />
    /// <param name="markup" type="String"></param>
    var e = Function._validateParams(arguments, [
        {name: "markup", type: String}
    ]);
    if (e) throw e;
    if (!window.DOMParser) {
        var progIDs = [ 'Msxml2.DOMDocument.3.0', 'Msxml2.DOMDocument' ];
        for (var i = 0, l = progIDs.length; i < l; i++) {
            try {
                var xmlDOM = new ActiveXObject(progIDs[i]);
                xmlDOM.async = false;
                xmlDOM.loadXML(markup);
                xmlDOM.setProperty('SelectionLanguage', 'XPath');
                return xmlDOM;
            }
            catch (ex) {
            }
        }
    }
    else {
        try {
            var domParser = new window.DOMParser();
            return domParser.parseFromString(markup, 'text/xml');
        }
        catch (ex) {
        }
    }
    return null;
Sys.Net.XMLHttpExecutor = function Sys$Net$XMLHttpExecutor() {
    /// <summary locid="M:J#Sys.Net.XMLHttpExecutor.#ctor" />
    if (arguments.length !== 0) throw Error.parameterCount();
    Sys.Net.XMLHttpExecutor.initializeBase(this);
    var _this = this;
    this._xmlHttpRequest = null;
    this._webRequest = null;
    this._responseAvailable = false;
    this._timedOut = false;
    this._timer = null;
    this._aborted = false;
    this._started = false;
    this._onReadyStateChange = (function () {
        
        if (_this._xmlHttpRequest.readyState === 4 ) {
            try {
                if (typeof(_this._xmlHttpRequest.status) === "undefined") {
                    return;
                }
            }
            catch(ex) {
                return;
            }
            
            _this._clearTimer();
            _this._responseAvailable = true;
            try {
                _this._webRequest.completed(Sys.EventArgs.Empty);
            }
            finally {
                if (_this._xmlHttpRequest != null) {
                    _this._xmlHttpRequest.onreadystatechange = Function.emptyMethod;
                    _this._xmlHttpRequest = null;
                }
            }
        }
    });
    this._clearTimer = (function() {
        if (_this._timer != null) {
            window.clearTimeout(_this._timer);
            _this._timer = null;
        }
    });
    this._onTimeout = (function() {
        if (!_this._responseAvailable) {
            _this._clearTimer();
            _this._timedOut = true;
            _this._xmlHttpRequest.onreadystatechange = Function.emptyMethod;
            _this._xmlHttpRequest.abort();
            _this._webRequest.completed(Sys.EventArgs.Empty);
            _this._xmlHttpRequest = null;
        }
    });
    function Sys$Net$XMLHttpExecutor$get_timedOut() {
        /// <value type="Boolean" locid="P:J#Sys.Net.XMLHttpExecutor.timedOut"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._timedOut;
    }
    function Sys$Net$XMLHttpExecutor$get_started() {
        /// <value type="Boolean" locid="P:J#Sys.Net.XMLHttpExecutor.started"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._started;
    }
    function Sys$Net$XMLHttpExecutor$get_responseAvailable() {
        /// <value type="Boolean" locid="P:J#Sys.Net.XMLHttpExecutor.responseAvailable"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._responseAvailable;
    }
    function Sys$Net$XMLHttpExecutor$get_aborted() {
        /// <value type="Boolean" locid="P:J#Sys.Net.XMLHttpExecutor.aborted"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._aborted;
    }
    function Sys$Net$XMLHttpExecutor$executeRequest() {
        /// <summary locid="M:J#Sys.Net.XMLHttpExecutor.executeRequest" />
        if (arguments.length !== 0) throw Error.parameterCount();
        this._webRequest = this.get_webRequest();
        if (this._started) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallOnceStarted, 'executeRequest'));
        }
        if (this._webRequest === null) {
            throw Error.invalidOperation(Sys.Res.nullWebRequest);
        }
        var body = this._webRequest.get_body();
        var headers = this._webRequest.get_headers();
        this._xmlHttpRequest = new XMLHttpRequest();
        this._xmlHttpRequest.onreadystatechange = this._onReadyStateChange;
        var verb = this._webRequest.get_httpVerb();
        this._xmlHttpRequest.open(verb, this._webRequest.getResolvedUrl(), true );
        if (headers) {
            for (var header in headers) {
                var val = headers[header];
                if (typeof(val) !== "function")
                    this._xmlHttpRequest.setRequestHeader(header, val);
            }
        }
        if (verb.toLowerCase() === "post") {
            if ((headers === null) || !headers['Content-Type']) {
                this._xmlHttpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8');
            }
            if (!body) {
                body = "";
            }
        }
        var timeout = this._webRequest.get_timeout();
        if (timeout > 0) {
            this._timer = window.setTimeout(Function.createDelegate(this, this._onTimeout), timeout);
        }
        this._xmlHttpRequest.send(body);
        this._started = true;
    }
    function Sys$Net$XMLHttpExecutor$getResponseHeader(header) {
        /// <summary locid="M:J#Sys.Net.XMLHttpExecutor.getResponseHeader" />
        /// <param name="header" type="String"></param>
        /// <returns type="String"></returns>
        var e = Function._validateParams(arguments, [
            {name: "header", type: String}
        ]);
        if (e) throw e;
        if (!this._responseAvailable) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'getResponseHeader'));
        }
        if (!this._xmlHttpRequest) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'getResponseHeader'));
        }
        var result;
        try {
            result = this._xmlHttpRequest.getResponseHeader(header);
        } catch (e) {
        }
        if (!result) result = "";
        return result;
    }
    function Sys$Net$XMLHttpExecutor$getAllResponseHeaders() {
        /// <summary locid="M:J#Sys.Net.XMLHttpExecutor.getAllResponseHeaders" />
        /// <returns type="String"></returns>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._responseAvailable) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'getAllResponseHeaders'));
        }
        if (!this._xmlHttpRequest) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'getAllResponseHeaders'));
        }
        return this._xmlHttpRequest.getAllResponseHeaders();
    }
    function Sys$Net$XMLHttpExecutor$get_responseData() {
        /// <value type="String" locid="P:J#Sys.Net.XMLHttpExecutor.responseData"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._responseAvailable) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'get_responseData'));
        }
        if (!this._xmlHttpRequest) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'get_responseData'));
        }
        return this._xmlHttpRequest.responseText;
    }
    function Sys$Net$XMLHttpExecutor$get_statusCode() {
        /// <value type="Number" locid="P:J#Sys.Net.XMLHttpExecutor.statusCode"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._responseAvailable) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'get_statusCode'));
        }
        if (!this._xmlHttpRequest) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'get_statusCode'));
        }
        var result = 0;
        try {
            result = this._xmlHttpRequest.status;
        }
        catch(ex) {
        }
        return result;
    }
    function Sys$Net$XMLHttpExecutor$get_statusText() {
        /// <value type="String" locid="P:J#Sys.Net.XMLHttpExecutor.statusText"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._responseAvailable) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'get_statusText'));
        }
        if (!this._xmlHttpRequest) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'get_statusText'));
        }
        return this._xmlHttpRequest.statusText;
    }
    function Sys$Net$XMLHttpExecutor$get_xml() {
        /// <value locid="P:J#Sys.Net.XMLHttpExecutor.xml"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._responseAvailable) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'get_xml'));
        }
        if (!this._xmlHttpRequest) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'get_xml'));
        }
        var xml = this._xmlHttpRequest.responseXML;
        if (!xml || !xml.documentElement) {
            xml = Sys.Net.XMLDOM(this._xmlHttpRequest.responseText);
            if (!xml || !xml.documentElement)
                return null;
        }
        else if (navigator.userAgent.indexOf('MSIE') !== -1 && typeof(xml.setProperty) != 'undefined') {
            xml.setProperty('SelectionLanguage', 'XPath');
        }
        if (xml.documentElement.namespaceURI === "http://www.mozilla.org/newlayout/xml/parsererror.xml" &&
            xml.documentElement.tagName === "parsererror") {
            return null;
        }
        
        if (xml.documentElement.firstChild && xml.documentElement.firstChild.tagName === "parsererror") {
            return null;
        }
        
        return xml;
    }
    function Sys$Net$XMLHttpExecutor$abort() {
        /// <summary locid="M:J#Sys.Net.XMLHttpExecutor.abort" />
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._started) {
            throw Error.invalidOperation(Sys.Res.cannotAbortBeforeStart);
        }
        if (this._aborted || this._responseAvailable || this._timedOut)
            return;
        this._aborted = true;
        this._clearTimer();
        if (this._xmlHttpRequest && !this._responseAvailable) {
            this._xmlHttpRequest.onreadystatechange = Function.emptyMethod;
            this._xmlHttpRequest.abort();
            
            this._xmlHttpRequest = null;            
            this._webRequest.completed(Sys.EventArgs.Empty);
        }
    }
Sys.Net.XMLHttpExecutor.prototype = {
    get_timedOut: Sys$Net$XMLHttpExecutor$get_timedOut,
    get_started: Sys$Net$XMLHttpExecutor$get_started,
    get_responseAvailable: Sys$Net$XMLHttpExecutor$get_responseAvailable,
    get_aborted: Sys$Net$XMLHttpExecutor$get_aborted,
    executeRequest: Sys$Net$XMLHttpExecutor$executeRequest,
    getResponseHeader: Sys$Net$XMLHttpExecutor$getResponseHeader,
    getAllResponseHeaders: Sys$Net$XMLHttpExecutor$getAllResponseHeaders,
    get_responseData: Sys$Net$XMLHttpExecutor$get_responseData,
    get_statusCode: Sys$Net$XMLHttpExecutor$get_statusCode,
    get_statusText: Sys$Net$XMLHttpExecutor$get_statusText,
    get_xml: Sys$Net$XMLHttpExecutor$get_xml,
    abort: Sys$Net$XMLHttpExecutor$abort
Sys.Net.XMLHttpExecutor.registerClass('Sys.Net.XMLHttpExecutor', Sys.Net.WebRequestExecutor);
Sys.Net._WebRequestManager = function Sys$Net$_WebRequestManager() {
    /// <summary locid="P:J#Sys.Net.WebRequestManager.#ctor" />
    if (arguments.length !== 0) throw Error.parameterCount();
    this._defaultTimeout = 0;
    this._defaultExecutorType = "Sys.Net.XMLHttpExecutor";
    function Sys$Net$_WebRequestManager$add_invokingRequest(handler) {
        /// <summary locid="E:J#Sys.Net.WebRequestManager.invokingRequest" />
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this._get_eventHandlerList().addHandler("invokingRequest", handler);
    }
    function Sys$Net$_WebRequestManager$remove_invokingRequest(handler) {
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this._get_eventHandlerList().removeHandler("invokingRequest", handler);
    }
    function Sys$Net$_WebRequestManager$add_completedRequest(handler) {
        /// <summary locid="E:J#Sys.Net.WebRequestManager.completedRequest" />
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this._get_eventHandlerList().addHandler("completedRequest", handler);
    }
    function Sys$Net$_WebRequestManager$remove_completedRequest(handler) {
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this._get_eventHandlerList().removeHandler("completedRequest", handler);
    }
    function Sys$Net$_WebRequestManager$_get_eventHandlerList() {
        if (!this._events) {
            this._events = new Sys.EventHandlerList();
        }
        return this._events;
    }
    function Sys$Net$_WebRequestManager$get_defaultTimeout() {
        /// <value type="Number" locid="P:J#Sys.Net.WebRequestManager.defaultTimeout"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._defaultTimeout;
    }
    function Sys$Net$_WebRequestManager$set_defaultTimeout(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: Number}]);
        if (e) throw e;
        if (value < 0) {
            throw Error.argumentOutOfRange("value", value, Sys.Res.invalidTimeout);
        }
        this._defaultTimeout = value;
    }
    function Sys$Net$_WebRequestManager$get_defaultExecutorType() {
        /// <value type="String" locid="P:J#Sys.Net.WebRequestManager.defaultExecutorType"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._defaultExecutorType;
    }
    function Sys$Net$_WebRequestManager$set_defaultExecutorType(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: String}]);
        if (e) throw e;
        this._defaultExecutorType = value;
    }
    function Sys$Net$_WebRequestManager$executeRequest(webRequest) {
        /// <summary locid="M:J#Sys.Net.WebRequestManager.executeRequest" />
        /// <param name="webRequest" type="Sys.Net.WebRequest"></param>
        var e = Function._validateParams(arguments, [
            {name: "webRequest", type: Sys.Net.WebRequest}
        ]);
        if (e) throw e;
        var executor = webRequest.get_executor();
        if (!executor) {
            var failed = false;
            try {
                var executorType = eval(this._defaultExecutorType);
                executor = new executorType();
            } catch (e) {
                failed = true;
            }
            if (failed  || !Sys.Net.WebRequestExecutor.isInstanceOfType(executor) || !executor) {
                throw Error.argument("defaultExecutorType", String.format(Sys.Res.invalidExecutorType, this._defaultExecutorType));
            }
            webRequest.set_executor(executor);
        }
        if (executor.get_aborted()) {
            return;
        }
        var evArgs = new Sys.Net.NetworkRequestEventArgs(webRequest);
        var handler = this._get_eventHandlerList().getHandler("invokingRequest");
        if (handler) {
            handler(this, evArgs);
        }
        if (!evArgs.get_cancel()) {
            executor.executeRequest();
        }
    }
Sys.Net._WebRequestManager.prototype = {
    add_invokingRequest: Sys$Net$_WebRequestManager$add_invokingRequest,
    remove_invokingRequest: Sys$Net$_WebRequestManager$remove_invokingRequest,
    add_completedRequest: Sys$Net$_WebRequestManager$add_completedRequest,
    remove_completedRequest: Sys$Net$_WebRequestManager$remove_completedRequest,
    _get_eventHandlerList: Sys$Net$_WebRequestManager$_get_eventHandlerList,
    get_defaultTimeout: Sys$Net$_WebRequestManager$get_defaultTimeout,
    set_defaultTimeout: Sys$Net$_WebRequestManager$set_defaultTimeout,
    get_defaultExecutorType: Sys$Net$_WebRequestManager$get_defaultExecutorType,
    set_defaultExecutorType: Sys$Net$_WebRequestManager$set_defaultExecutorType,
    executeRequest: Sys$Net$_WebRequestManager$executeRequest
Sys.Net._WebRequestManager.registerClass('Sys.Net._WebRequestManager');
Sys.Net.WebRequestManager = new Sys.Net._WebRequestManager();
Sys.Net.NetworkRequestEventArgs = function Sys$Net$NetworkRequestEventArgs(webRequest) {
    /// <summary locid="M:J#Sys.Net.NetworkRequestEventArgs.#ctor" />
    /// <param name="webRequest" type="Sys.Net.WebRequest"></param>
    var e = Function._validateParams(arguments, [
        {name: "webRequest", type: Sys.Net.WebRequest}
    ]);
    if (e) throw e;
    Sys.Net.NetworkRequestEventArgs.initializeBase(this);
    this._webRequest = webRequest;
    function Sys$Net$NetworkRequestEventArgs$get_webRequest() {
        /// <value type="Sys.Net.WebRequest" locid="P:J#Sys.Net.NetworkRequestEventArgs.webRequest"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._webRequest;
    }
Sys.Net.NetworkRequestEventArgs.prototype = {
    get_webRequest: Sys$Net$NetworkRequestEventArgs$get_webRequest
Sys.Net.NetworkRequestEventArgs.registerClass('Sys.Net.NetworkRequestEventArgs', Sys.CancelEventArgs);
Sys.Net.WebRequest = function Sys$Net$WebRequest() {
    /// <summary locid="M:J#Sys.Net.WebRequest.#ctor" />
    if (arguments.length !== 0) throw Error.parameterCount();
    this._url = "";
    this._headers = { };
    this._body = null;
    this._userContext = null;
    this._httpVerb = null;
    this._executor = null;
    this._invokeCalled = false;
    this._timeout = 0;
    function Sys$Net$WebRequest$add_completed(handler) {
    /// <summary locid="E:J#Sys.Net.WebRequest.completed" />
    var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
    if (e) throw e;
        this._get_eventHandlerList().addHandler("completed", handler);
    }
    function Sys$Net$WebRequest$remove_completed(handler) {
    var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
    if (e) throw e;
        this._get_eventHandlerList().removeHandler("completed", handler);
    }
    function Sys$Net$WebRequest$completed(eventArgs) {
        /// <summary locid="M:J#Sys.Net.WebRequest.completed" />
        /// <param name="eventArgs" type="Sys.EventArgs"></param>
        var e = Function._validateParams(arguments, [
            {name: "eventArgs", type: Sys.EventArgs}
        ]);
        if (e) throw e;
        var handler = Sys.Net.WebRequestManager._get_eventHandlerList().getHandler("completedRequest");
        if (handler) {
            handler(this._executor, eventArgs);
        }
        handler = this._get_eventHandlerList().getHandler("completed");
        if (handler) {
            handler(this._executor, eventArgs);
        }
    }
    function Sys$Net$WebRequest$_get_eventHandlerList() {
        if (!this._events) {
            this._events = new Sys.EventHandlerList();
        }
        return this._events;
    }
    function Sys$Net$WebRequest$get_url() {
        /// <value type="String" locid="P:J#Sys.Net.WebRequest.url"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._url;
    }
    function Sys$Net$WebRequest$set_url(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: String}]);
        if (e) throw e;
        this._url = value;
    }
    function Sys$Net$WebRequest$get_headers() {
        /// <value locid="P:J#Sys.Net.WebRequest.headers"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._headers;
    }
    function Sys$Net$WebRequest$get_httpVerb() {
        /// <value type="String" locid="P:J#Sys.Net.WebRequest.httpVerb"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (this._httpVerb === null) {
            if (this._body === null) {
                return "GET";
            }
            return "POST";
        }
        return this._httpVerb;
    }
    function Sys$Net$WebRequest$set_httpVerb(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: String}]);
        if (e) throw e;
        if (value.length === 0) {
            throw Error.argument('value', Sys.Res.invalidHttpVerb);
        }
        this._httpVerb = value;
    }
    function Sys$Net$WebRequest$get_body() {
        /// <value mayBeNull="true" locid="P:J#Sys.Net.WebRequest.body"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._body;
    }
    function Sys$Net$WebRequest$set_body(value) {
        var e = Function._validateParams(arguments, [{name: "value", mayBeNull: true}]);
        if (e) throw e;
        this._body = value;
    }
    function Sys$Net$WebRequest$get_userContext() {
        /// <value mayBeNull="true" locid="P:J#Sys.Net.WebRequest.userContext"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._userContext;
    }
    function Sys$Net$WebRequest$set_userContext(value) {
        var e = Function._validateParams(arguments, [{name: "value", mayBeNull: true}]);
        if (e) throw e;
        this._userContext = value;
    }
    function Sys$Net$WebRequest$get_executor() {
        /// <value type="Sys.Net.WebRequestExecutor" locid="P:J#Sys.Net.WebRequest.executor"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._executor;
    }
    function Sys$Net$WebRequest$set_executor(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: Sys.Net.WebRequestExecutor}]);
        if (e) throw e;
        if (this._executor !== null && this._executor.get_started()) {
            throw Error.invalidOperation(Sys.Res.setExecutorAfterActive);
        }
        this._executor = value;
        this._executor._set_webRequest(this);
    }
    function Sys$Net$WebRequest$get_timeout() {
        /// <value type="Number" locid="P:J#Sys.Net.WebRequest.timeout"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (this._timeout === 0) {
            return Sys.Net.WebRequestManager.get_defaultTimeout();
        }
        return this._timeout;
    }
    function Sys$Net$WebRequest$set_timeout(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: Number}]);
        if (e) throw e;
        if (value < 0) {
            throw Error.argumentOutOfRange("value", value, Sys.Res.invalidTimeout);
        }
        this._timeout = value;
    }
    function Sys$Net$WebRequest$getResolvedUrl() {
        /// <summary locid="M:J#Sys.Net.WebRequest.getResolvedUrl" />
        /// <returns type="String"></returns>
        if (arguments.length !== 0) throw Error.parameterCount();
        return Sys.Net.WebRequest._resolveUrl(this._url);
    }
    function Sys$Net$WebRequest$invoke() {
        /// <summary locid="M:J#Sys.Net.WebRequest.invoke" />
        if (arguments.length !== 0) throw Error.parameterCount();
        if (this._invokeCalled) {
            throw Error.invalidOperation(Sys.Res.invokeCalledTwice);
        }
        Sys.Net.WebRequestManager.executeRequest(this);
        this._invokeCalled = true;
    }
Sys.Net.WebRequest.prototype = {
    add_completed: Sys$Net$WebRequest$add_completed,
    remove_completed: Sys$Net$WebRequest$remove_completed,
    completed: Sys$Net$WebRequest$completed,
    _get_eventHandlerList: Sys$Net$WebRequest$_get_eventHandlerList,
    get_url: Sys$Net$WebRequest$get_url,
    set_url: Sys$Net$WebRequest$set_url,
    get_headers: Sys$Net$WebRequest$get_headers,
    get_httpVerb: Sys$Net$WebRequest$get_httpVerb,
    set_httpVerb: Sys$Net$WebRequest$set_httpVerb,
    get_body: Sys$Net$WebRequest$get_body,
    set_body: Sys$Net$WebRequest$set_body,
    get_userContext: Sys$Net$WebRequest$get_userContext,
    set_userContext: Sys$Net$WebRequest$set_userContext,
    get_executor: Sys$Net$WebRequest$get_executor,
    set_executor: Sys$Net$WebRequest$set_executor,
    get_timeout: Sys$Net$WebRequest$get_timeout,
    set_timeout: Sys$Net$WebRequest$set_timeout,
    getResolvedUrl: Sys$Net$WebRequest$getResolvedUrl,
    invoke: Sys$Net$WebRequest$invoke
Sys.Net.WebRequest._resolveUrl = function Sys$Net$WebRequest$_resolveUrl(url, baseUrl) {
    if (url && url.indexOf('://') !== -1) {
        return url;
    }
    if (!baseUrl || baseUrl.length === 0) {
        var baseElement = document.getElementsByTagName('base')[0];
        if (baseElement && baseElement.href && baseElement.href.length > 0) {
            baseUrl = baseElement.href;
        }
        else {
            baseUrl = document.URL;
        }
    }
    var qsStart = baseUrl.indexOf('?');
    if (qsStart !== -1) {
        baseUrl = baseUrl.substr(0, qsStart);
    }
    qsStart = baseUrl.indexOf('#');
    if (qsStart !== -1) {
        baseUrl = baseUrl.substr(0, qsStart);
    }
    baseUrl = baseUrl.substr(0, baseUrl.lastIndexOf('/') + 1);
    if (!url || url.length === 0) {
        return baseUrl;
    }
    if (url.charAt(0) === '/') {
        var slashslash = baseUrl.indexOf('://');
        if (slashslash === -1) {
            throw Error.argument("baseUrl", Sys.Res.badBaseUrl1);
        }
        var nextSlash = baseUrl.indexOf('/', slashslash + 3);
        if (nextSlash === -1) {
            throw Error.argument("baseUrl", Sys.Res.badBaseUrl2);
        }
        return baseUrl.substr(0, nextSlash) + url;
    }
    else {
        var lastSlash = baseUrl.lastIndexOf('/');
        if (lastSlash === -1) {
            throw Error.argument("baseUrl", Sys.Res.badBaseUrl3);
        }
        return baseUrl.substr(0, lastSlash+1) + url;
    }
Sys.Net.WebRequest._createQueryString = function Sys$Net$WebRequest$_createQueryString(queryString, encodeMethod) {
    if (!encodeMethod)
        encodeMethod = encodeURIComponent;
    var sb = new Sys.StringBuilder();
    var i = 0;
    for (var arg in queryString) {
        var obj = queryString[arg];
        if (typeof(obj) === "function") continue;
        var val = Sys.Serialization.JavaScriptSerializer.serialize(obj);
        if (i !== 0) {
            sb.append('&');
        }
        sb.append(arg);
        sb.append('=');
        sb.append(encodeMethod(val));
        i++;
    }
    return sb.toString();
Sys.Net.WebRequest._createUrl = function Sys$Net$WebRequest$_createUrl(url, queryString) {
    if (!queryString) {
        return url;
    }
    var qs = Sys.Net.WebRequest._createQueryString(queryString);
    if (qs.length > 0) {
        var sep = '?';
        if (url && url.indexOf('?') !== -1)
            sep = '&';
        return url + sep + qs;
    } else {
        return url;
    }
Sys.Net.WebRequest.registerClass('Sys.Net.WebRequest');
Sys.Net.WebServiceProxy = function Sys$Net$WebServiceProxy() {
    function Sys$Net$WebServiceProxy$get_timeout() {
        /// <value type="Number" locid="P:J#Sys.Net.WebServiceProxy.timeout"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._timeout;
    }
    function Sys$Net$WebServiceProxy$set_timeout(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: Number}]);
        if (e) throw e;
        if (value < 0) { throw Error.argumentOutOfRange('value', value, Sys.Res.invalidTimeout); }
        this._timeout = value;
    }
    function Sys$Net$WebServiceProxy$get_defaultUserContext() {
        /// <value mayBeNull="true" locid="P:J#Sys.Net.WebServiceProxy.defaultUserContext"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._userContext;
    }
    function Sys$Net$WebServiceProxy$set_defaultUserContext(value) {
        var e = Function._validateParams(arguments, [{name: "value", mayBeNull: true}]);
        if (e) throw e;
        this._userContext = value;
    }
    function Sys$Net$WebServiceProxy$get_defaultSucceededCallback() {
        /// <value type="Function" mayBeNull="true" locid="P:J#Sys.Net.WebServiceProxy.defaultSucceededCallback"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._succeeded;
    }
    function Sys$Net$WebServiceProxy$set_defaultSucceededCallback(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: Function, mayBeNull: true}]);
        if (e) throw e;
        this._succeeded = value;
    }
    function Sys$Net$WebServiceProxy$get_defaultFailedCallback() {
        /// <value type="Function" mayBeNull="true" locid="P:J#Sys.Net.WebServiceProxy.defaultFailedCallback"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._failed;
    }
    function Sys$Net$WebServiceProxy$set_defaultFailedCallback(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: Function, mayBeNull: true}]);
        if (e) throw e;
        this._failed = value;
    }
    function Sys$Net$WebServiceProxy$get_path() {
        /// <value type="String" locid="P:J#Sys.Net.WebServiceProxy.path"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._path;
    }
    function Sys$Net$WebServiceProxy$set_path(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: String}]);
        if (e) throw e;
        this._path = value;
    }
    function Sys$Net$WebServiceProxy$_invoke(servicePath, methodName, useGet, params, onSuccess, onFailure, userContext) {
        /// <summary locid="M:J#Sys.Net.WebServiceProxy._invoke" />
        /// <param name="servicePath" type="String"></param>
        /// <param name="methodName" type="String"></param>
        /// <param name="useGet" type="Boolean"></param>
        /// <param name="params"></param>
        /// <param name="onSuccess" type="Function" mayBeNull="true" optional="true"></param>
        /// <param name="onFailure" type="Function" mayBeNull="true" optional="true"></param>
        /// <param name="userContext" mayBeNull="true" optional="true"></param>
        /// <returns type="Sys.Net.WebRequest"></returns>
        var e = Function._validateParams(arguments, [
            {name: "servicePath", type: String},
            {name: "methodName", type: String},
            {name: "useGet", type: Boolean},
            {name: "params"},
            {name: "onSuccess", type: Function, mayBeNull: true, optional: true},
            {name: "onFailure", type: Function, mayBeNull: true, optional: true},
            {name: "userContext", mayBeNull: true, optional: true}
        ]);
        if (e) throw e;
        if (onSuccess === null || typeof onSuccess === 'undefined') onSuccess = this.get_defaultSucceededCallback();
        if (onFailure === null || typeof onFailure === 'undefined') onFailure = this.get_defaultFailedCallback();
        if (userContext === null || typeof userContext === 'undefined') userContext = this.get_defaultUserContext();
        
        return Sys.Net.WebServiceProxy.invoke(servicePath, methodName, useGet, params, onSuccess, onFailure, userContext, this.get_timeout());
    }
Sys.Net.WebServiceProxy.prototype = {
    get_timeout: Sys$Net$WebServiceProxy$get_timeout,
    set_timeout: Sys$Net$WebServiceProxy$set_timeout,
    get_defaultUserContext: Sys$Net$WebServiceProxy$get_defaultUserContext,
    set_defaultUserContext: Sys$Net$WebServiceProxy$set_defaultUserContext,
    get_defaultSucceededCallback: Sys$Net$WebServiceProxy$get_defaultSucceededCallback,
    set_defaultSucceededCallback: Sys$Net$WebServiceProxy$set_defaultSucceededCallback,
    get_defaultFailedCallback: Sys$Net$WebServiceProxy$get_defaultFailedCallback,
    set_defaultFailedCallback: Sys$Net$WebServiceProxy$set_defaultFailedCallback,
    get_path: Sys$Net$WebServiceProxy$get_path,
    set_path: Sys$Net$WebServiceProxy$set_path,
    _invoke: Sys$Net$WebServiceProxy$_invoke
Sys.Net.WebServiceProxy.registerClass('Sys.Net.WebServiceProxy');
Sys.Net.WebServiceProxy.invoke = function Sys$Net$WebServiceProxy$invoke(servicePath, methodName, useGet, params, onSuccess, onFailure, userContext, timeout) {
    /// <summary locid="M:J#Sys.Net.WebServiceProxy.invoke" />
    /// <param name="servicePath" type="String"></param>
    /// <param name="methodName" type="String"></param>
    /// <param name="useGet" type="Boolean" optional="true"></param>
    /// <param name="params" mayBeNull="true" optional="true"></param>
    /// <param name="onSuccess" type="Function" mayBeNull="true" optional="true"></param>
    /// <param name="onFailure" type="Function" mayBeNull="true" optional="true"></param>
    /// <param name="userContext" mayBeNull="true" optional="true"></param>
    /// <param name="timeout" type="Number" optional="true"></param>
    /// <returns type="Sys.Net.WebRequest"></returns>
    var e = Function._validateParams(arguments, [
        {name: "servicePath", type: String},
        {name: "methodName", type: String},
        {name: "useGet", type: Boolean, optional: true},
        {name: "params", mayBeNull: true, optional: true},
        {name: "onSuccess", type: Function, mayBeNull: true, optional: true},
        {name: "onFailure", type: Function, mayBeNull: true, optional: true},
        {name: "userContext", mayBeNull: true, optional: true},
        {name: "timeout", type: Number, optional: true}
    ]);
    if (e) throw e;
    var request = new Sys.Net.WebRequest();
    request.get_headers()['Content-Type'] = 'application/json; charset=utf-8';
    if (!params) params = {};
    var urlParams = params;
    if (!useGet || !urlParams) urlParams = {};
    request.set_url(Sys.Net.WebRequest._createUrl(servicePath+"/"+encodeURIComponent(methodName), urlParams));
    var body = null;
    if (!useGet) {
        body = Sys.Serialization.JavaScriptSerializer.serialize(params);
        if (body === "{}") body = "";
    }
    request.set_body(body);
    request.add_completed(onComplete);
    if (timeout && timeout > 0) request.set_timeout(timeout);
    request.invoke();
    function onComplete(response, eventArgs) {
        if (response.get_responseAvailable()) {
            var statusCode = response.get_statusCode();
            var result = null;
           
            try {
                var contentType = response.getResponseHeader("Content-Type");
                if (contentType.startsWith("application/json")) {
                    result = response.get_object();
                }
                else if (contentType.startsWith("text/xml")) {
                    result = response.get_xml();
                }
                else {
                    result = response.get_responseData();
                }
            } catch (ex) {
            }
            var error = response.getResponseHeader("jsonerror");
            var errorObj = (error === "true");
            if (errorObj) {
                if (result) {
                    result = new Sys.Net.WebServiceError(false, result.Message, result.StackTrace, result.ExceptionType);
                }
            }
            else if (contentType.startsWith("application/json")) {
                if (!result || typeof(result.d) === "undefined") {
                    throw Sys.Net.WebServiceProxy._createFailedError(methodName, String.format(Sys.Res.webServiceInvalidJsonWrapper, methodName));
                }
                result = result.d;
            }
            if (((statusCode < 200) || (statusCode >= 300)) || errorObj) {
                if (onFailure) {
                    if (!result || !errorObj) {
                        result = new Sys.Net.WebServiceError(false , String.format(Sys.Res.webServiceFailedNoMsg, methodName), "", "");
                    }
                    result._statusCode = statusCode;
                    onFailure(result, userContext, methodName);
                }
                else {
                    var error;
                    if (result && errorObj) {
                        error = result.get_exceptionType() + "-- " + result.get_message();
                    }
                    else {
                        error = response.get_responseData();
                    }
                    throw Sys.Net.WebServiceProxy._createFailedError(methodName, String.format(Sys.Res.webServiceFailed, methodName, error));
                }
            }
            else if (onSuccess) {
                onSuccess(result, userContext, methodName);
            }
        }
        else {
            var msg;
            if (response.get_timedOut()) {
                msg = String.format(Sys.Res.webServiceTimedOut, methodName);
            }
            else {
                msg = String.format(Sys.Res.webServiceFailedNoMsg, methodName)
            }
            if (onFailure) {
                onFailure(new Sys.Net.WebServiceError(response.get_timedOut(), msg, "", ""), userContext, methodName);
            }
            else {
                throw Sys.Net.WebServiceProxy._createFailedError(methodName, msg);
            }
        }
    }
    return request;
Sys.Net.WebServiceProxy._createFailedError = function Sys$Net$WebServiceProxy$_createFailedError(methodName, errorMessage) {
    var displayMessage = "Sys.Net.WebServiceFailedException: " + errorMessage;
    var e = Error.create(displayMessage, { 'name': 'Sys.Net.WebServiceFailedException', 'methodName': methodName });
    e.popStackFrame();
    return e;
Sys.Net.WebServiceProxy._defaultFailedCallback = function Sys$Net$WebServiceProxy$_defaultFailedCallback(err, methodName) {
    var error = err.get_exceptionType() + "-- " + err.get_message();
    throw Sys.Net.WebServiceProxy._createFailedError(methodName, String.format(Sys.Res.webServiceFailed, methodName, error));
Sys.Net.WebServiceProxy._generateTypedConstructor = function Sys$Net$WebServiceProxy$_generateTypedConstructor(type) {
    return function(properties) {
        if (properties) {
            for (var name in properties) {
                this[name] = properties[name];
            }
        }
        this.__type = type;
    }
Sys.Net.WebServiceError = function Sys$Net$WebServiceError(timedOut, message, stackTrace, exceptionType) {
    /// <summary locid="M:J#Sys.Net.WebServiceError.#ctor" />
    /// <param name="timedOut" type="Boolean"></param>
    /// <param name="message" type="String" mayBeNull="true"></param>
    /// <param name="stackTrace" type="String" mayBeNull="true"></param>
    /// <param name="exceptionType" type="String" mayBeNull="true"></param>
    var e = Function._validateParams(arguments, [
        {name: "timedOut", type: Boolean},
        {name: "message", type: String, mayBeNull: true},
        {name: "stackTrace", type: String, mayBeNull: true},
        {name: "exceptionType", type: String, mayBeNull: true}
    ]);
    if (e) throw e;
    this._timedOut = timedOut;
    this._message = message;
    this._stackTrace = stackTrace;
    this._exceptionType = exceptionType;
    this._statusCode = -1;
    function Sys$Net$WebServiceError$get_timedOut() {
        /// <value type="Boolean" locid="P:J#Sys.Net.WebServiceError.timedOut"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._timedOut;
    }
    function Sys$Net$WebServiceError$get_statusCode() {
        /// <value type="Number" locid="P:J#Sys.Net.WebServiceError.statusCode"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._statusCode;
    }
    function Sys$Net$WebServiceError$get_message() {
        /// <value type="String" locid="P:J#Sys.Net.WebServiceError.message"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._message;
    }
    function Sys$Net$WebServiceError$get_stackTrace() {
        /// <value type="String" locid="P:J#Sys.Net.WebServiceError.stackTrace"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._stackTrace;
    }
    function Sys$Net$WebServiceError$get_exceptionType() {
        /// <value type="String" locid="P:J#Sys.Net.WebServiceError.exceptionType"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._exceptionType;
    }
Sys.Net.WebServiceError.prototype = {
    get_timedOut: Sys$Net$WebServiceError$get_timedOut,
    get_statusCode: Sys$Net$WebServiceError$get_statusCode,
    get_message: Sys$Net$WebServiceError$get_message,
    get_stackTrace: Sys$Net$WebServiceError$get_stackTrace,
    get_exceptionType: Sys$Net$WebServiceError$get_exceptionType
Sys.Net.WebServiceError.registerClass('Sys.Net.WebServiceError');
Type.registerNamespace('Sys.Services');
Sys.Services._ProfileService = function Sys$Services$_ProfileService() {
    /// <summary locid="M:J#Sys.Net.ProfileService.#ctor" />
    if (arguments.length !== 0) throw Error.parameterCount();
    Sys.Services._ProfileService.initializeBase(this);
    this.properties = {};
Sys.Services._ProfileService.DefaultWebServicePath = '';
    function Sys$Services$_ProfileService$get_defaultLoadCompletedCallback() {
        /// <value type="Function" mayBeNull="true" locid="P:J#Sys.Services.ProfileService.defaultLoadCompletedCallback"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._defaultLoadCompletedCallback;
    }
    function Sys$Services$_ProfileService$set_defaultLoadCompletedCallback(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: Function, mayBeNull: true}]);
        if (e) throw e;
        this._defaultLoadCompletedCallback = value;
    }
    function Sys$Services$_ProfileService$get_defaultSaveCompletedCallback() {
        /// <value type="Function" mayBeNull="true" locid="P:J#Sys.Services.ProfileService.defaultSaveCompletedCallback"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._defaultSaveCompletedCallback;
    }
    function Sys$Services$_ProfileService$set_defaultSaveCompletedCallback(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: Function, mayBeNull: true}]);
        if (e) throw e;
        this._defaultSaveCompletedCallback = value;
    }
    function Sys$Services$_ProfileService$get_path() {
        /// <value type="String" mayBeNull="true" locid="P:J#Sys.Services.ProfileService.path"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._path || '';
    }
    function Sys$Services$_ProfileService$load(propertyNames, loadCompletedCallback, failedCallback, userContext) {
        /// <summary locid="M:J#Sys.Services.ProfileService.load" />
        /// <param name="propertyNames" type="Array" elementType="String" optional="true" elementMayBeNull="false" mayBeNull="true"></param>
        /// <param name="loadCompletedCallback" type="Function" optional="true" mayBeNull="true"></param>
        /// <param name="failedCallback" type="Function" optional="true" mayBeNull="true"></param>
        /// <param name="userContext" optional="true" mayBeNull="true"></param>
        var e = Function._validateParams(arguments, [
            {name: "propertyNames", type: Array, mayBeNull: true, optional: true, elementType: String},
            {name: "loadCompletedCallback", type: Function, mayBeNull: true, optional: true},
            {name: "failedCallback", type: Function, mayBeNull: true, optional: true},
            {name: "userContext", mayBeNull: true, optional: true}
        ]);
        if (e) throw e;
        var parameters;
        var methodName;
        if (!propertyNames) {
            methodName = "GetAllPropertiesForCurrentUser";
            parameters = { authenticatedUserOnly: false };
        }
        else {
            methodName = "GetPropertiesForCurrentUser";
            parameters = { properties: this._clonePropertyNames(propertyNames), authenticatedUserOnly: false };
        }
        this._invoke(this._get_path(),
                                        methodName,
                                        false,
                                        parameters,
                                        Function.createDelegate(this, this._onLoadComplete),
                                        Function.createDelegate(this, this._onLoadFailed),
                                        [loadCompletedCallback, failedCallback, userContext]);
    }
    function Sys$Services$_ProfileService$save(propertyNames, saveCompletedCallback, failedCallback, userContext) {
        /// <summary locid="M:J#Sys.Services.ProfileService.save" />
        /// <param name="propertyNames" type="Array" elementType="String" optional="true" elementMayBeNull="false" mayBeNull="true"></param>
        /// <param name="saveCompletedCallback" type="Function" optional="true" mayBeNull="true"></param>
        /// <param name="failedCallback" type="Function" optional="true" mayBeNull="true"></param>
        /// <param name="userContext" optional="true" mayBeNull="true"></param>
        var e = Function._validateParams(arguments, [
            {name: "propertyNames", type: Array, mayBeNull: true, optional: true, elementType: String},
            {name: "saveCompletedCallback", type: Function, mayBeNull: true, optional: true},
            {name: "failedCallback", type: Function, mayBeNull: true, optional: true},
            {name: "userContext", mayBeNull: true, optional: true}
        ]);
        if (e) throw e;
        var flattenedProperties = this._flattenProperties(propertyNames, this.properties);
        this._invoke(this._get_path(),
                                        "SetPropertiesForCurrentUser",
                                        false,
                                        { values: flattenedProperties.value, authenticatedUserOnly: false },
                                        Function.createDelegate(this, this._onSaveComplete),
                                        Function.createDelegate(this, this._onSaveFailed),
                                        [saveCompletedCallback, failedCallback, userContext, flattenedProperties.count]);
    }
    function Sys$Services$_ProfileService$_clonePropertyNames(arr) {
        var nodups = [];
        var seen = {};
        for (var i=0; i < arr.length; i++) {
            var prop = arr[i];
            if(!seen[prop]) { Array.add(nodups, prop); seen[prop]=true; };
        }
        return nodups;
    }
    function Sys$Services$_ProfileService$_flattenProperties(propertyNames, properties, groupName) {
        var flattenedProperties = {};
        var val;
        var key;
        var count = 0;
        if (propertyNames && propertyNames.length === 0) {
            return { value: flattenedProperties, count: 0 };
        }
        for (var property in properties) {
            val = properties[property];
            key = groupName ? groupName + "." + property : property;
            if(Sys.Services.ProfileGroup.isInstanceOfType(val)) {
                var obj = this._flattenProperties(propertyNames, val, key);
                var groupProperties = obj.value;
                count += obj.count; 
                for(var subKey in groupProperties) {
                    var subVal = groupProperties[subKey];
                    flattenedProperties[subKey] = subVal;
                }
            }
            else {
                if(!propertyNames || Array.indexOf(propertyNames, key) !== -1) {
                    flattenedProperties[key] = val;
                    count++; 
                }
            }
        }
        return { value: flattenedProperties, count: count };
    }
    function Sys$Services$_ProfileService$_get_path() {
        var path = this.get_path();
        if (!path.length) {
            path = Sys.Services._ProfileService.DefaultWebServicePath;
        }
        if (!path || !path.length) {
            throw Error.invalidOperation(Sys.Res.servicePathNotSet);
        }
        return path;
    }
    function Sys$Services$_ProfileService$_onLoadComplete(result, context, methodName) {
        if (typeof(result) !== "object") {
            throw Error.invalidOperation(String.format(Sys.Res.webServiceInvalidReturnType, methodName, "Object"));
        }
        var unflattened = this._unflattenProperties(result);
        for (var name in unflattened) {
            this.properties[name] = unflattened[name];
        }
        
        var callback = context[0] || this.get_defaultLoadCompletedCallback() || this.get_defaultSucceededCallback();
        if (callback) {
            var userContext = context[2] || this.get_defaultUserContext();        
            callback(result.length, userContext, "Sys.Services.ProfileService.load");
        }
    }
    function Sys$Services$_ProfileService$_onLoadFailed(err, context, methodName) {
        var callback = context[1] || this.get_defaultFailedCallback();
        if (callback) {
            var userContext = context[2] || this.get_defaultUserContext();        
            callback(err, userContext, "Sys.Services.ProfileService.load");
        }
        else {
            Sys.Net.WebServiceProxy._defaultFailedCallback(err, methodName);
        }
    }
    function Sys$Services$_ProfileService$_onSaveComplete(result, context, methodName) {
        var count = context[3];
        if (result !== null) { 
            if (result instanceof Array) {
                count -= result.length;
            }
            else if (typeof(result) === 'number') {
                count = result;
            }
            else {
                throw Error.invalidOperation(String.format(Sys.Res.webServiceInvalidReturnType, methodName, "Array"));
            }
        }
        
        var callback = context[0] || this.get_defaultSaveCompletedCallback() || this.get_defaultSucceededCallback();
        if (callback) {
            var userContext = context[2] || this.get_defaultUserContext();
            callback(count, userContext, "Sys.Services.ProfileService.save");
        }
    }
    function Sys$Services$_ProfileService$_onSaveFailed(err, context, methodName) {
        var callback = context[1] || this.get_defaultFailedCallback();
        if (callback) {
            var userContext = context[2] || this.get_defaultUserContext();
            callback(err, userContext, "Sys.Services.ProfileService.save");
        }
        else {
            Sys.Net.WebServiceProxy._defaultFailedCallback(err, methodName);
        }
    }
    function Sys$Services$_ProfileService$_unflattenProperties(properties) {
        var unflattenedProperties = {};
        var dotIndex;
        var val;
        var count = 0;
        for (var key in properties) {
            count++;
            val = properties[key];
            dotIndex = key.indexOf('.');
            if (dotIndex !== -1) {
                var groupName = key.substr(0, dotIndex);
                key = key.substr(dotIndex+1);
                var group = unflattenedProperties[groupName];
                if (!group || !Sys.Services.ProfileGroup.isInstanceOfType(group)) {
                    group = new Sys.Services.ProfileGroup();
                    unflattenedProperties[groupName] = group;
                }
                group[key] = val;
            }
            else {
                unflattenedProperties[key] = val;
            }
        }
        properties.length = count;
        return unflattenedProperties;
    }
Sys.Services._ProfileService.prototype = {
    _defaultLoadCompletedCallback: null,
    _defaultSaveCompletedCallback: null,
    _path: '',
    _timeout: 0,
    get_defaultLoadCompletedCallback: Sys$Services$_ProfileService$get_defaultLoadCompletedCallback,
    set_defaultLoadCompletedCallback: Sys$Services$_ProfileService$set_defaultLoadCompletedCallback,
    get_defaultSaveCompletedCallback: Sys$Services$_ProfileService$get_defaultSaveCompletedCallback,
    set_defaultSaveCompletedCallback: Sys$Services$_ProfileService$set_defaultSaveCompletedCallback,
    get_path: Sys$Services$_ProfileService$get_path,
    load: Sys$Services$_ProfileService$load,
    save: Sys$Services$_ProfileService$save,
    _clonePropertyNames: Sys$Services$_ProfileService$_clonePropertyNames,    
    _flattenProperties: Sys$Services$_ProfileService$_flattenProperties,
    _get_path: Sys$Services$_ProfileService$_get_path,    
    _onLoadComplete: Sys$Services$_ProfileService$_onLoadComplete,
    _onLoadFailed: Sys$Services$_ProfileService$_onLoadFailed,
    _onSaveComplete: Sys$Services$_ProfileService$_onSaveComplete,
    _onSaveFailed: Sys$Services$_ProfileService$_onSaveFailed,
    _unflattenProperties: Sys$Services$_ProfileService$_unflattenProperties
Sys.Services._ProfileService.registerClass('Sys.Services._ProfileService', Sys.Net.WebServiceProxy);
Sys.Services.ProfileService = new Sys.Services._ProfileService();
Sys.Services.ProfileGroup = function Sys$Services$ProfileGroup(properties) {
    /// <summary locid="M:J#Sys.Services.ProfileGroup.#ctor" />
    /// <param name="properties" optional="true" mayBeNull="true"></param>
    var e = Function._validateParams(arguments, [
        {name: "properties", mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    if (properties) {
        for (var property in properties) {
            this[property] = properties[property];
        }
    }
Sys.Services.ProfileGroup.registerClass('Sys.Services.ProfileGroup');
Sys.Services._AuthenticationService = function Sys$Services$_AuthenticationService() {
    /// <summary locid="M:J#Sys.Services.AuthenticationService.#ctor" />
    if (arguments.length !== 0) throw Error.parameterCount();
    Sys.Services._AuthenticationService.initializeBase(this);
Sys.Services._AuthenticationService.DefaultWebServicePath = '';
    function Sys$Services$_AuthenticationService$get_defaultLoginCompletedCallback() {
        /// <value type="Function" mayBeNull="true" locid="P:J#Sys.Services.AuthenticationService.defaultLoginCompletedCallback"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._defaultLoginCompletedCallback;
    }
    function Sys$Services$_AuthenticationService$set_defaultLoginCompletedCallback(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: Function, mayBeNull: true}]);
        if (e) throw e;
        this._defaultLoginCompletedCallback = value;
    }
    function Sys$Services$_AuthenticationService$get_defaultLogoutCompletedCallback() {
        /// <value type="Function" mayBeNull="true" locid="P:J#Sys.Services.AuthenticationService.defaultLogoutCompletedCallback"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._defaultLogoutCompletedCallback;
    }
    function Sys$Services$_AuthenticationService$set_defaultLogoutCompletedCallback(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: Function, mayBeNull: true}]);
        if (e) throw e;
        this._defaultLogoutCompletedCallback = value;
    }
    function Sys$Services$_AuthenticationService$get_isLoggedIn() {
        /// <value type="Boolean" locid="P:J#Sys.Services.AuthenticationService.isLoggedIn"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._authenticated;
    }
    function Sys$Services$_AuthenticationService$get_path() {
        /// <value type="String" mayBeNull="true" locid="P:J#Sys.Services.AuthenticationService.path"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._path || '';
    }
    function Sys$Services$_AuthenticationService$login(username, password, isPersistent, customInfo, redirectUrl, loginCompletedCallback, failedCallback, userContext) {
        /// <summary locid="M:J#Sys.Services.AuthenticationService.login" />
        /// <param name="username" type="String" mayBeNull="false"></param>
        /// <param name="password" type="String" mayBeNull="true"></param>
        /// <param name="isPersistent" type="Boolean" optional="true" mayBeNull="true"></param>
        /// <param name="customInfo" type="String" optional="true" mayBeNull="true"></param>
        /// <param name="redirectUrl" type="String" optional="true" mayBeNull="true"></param>
        /// <param name="loginCompletedCallback" type="Function" optional="true" mayBeNull="true"></param>
        /// <param name="failedCallback" type="Function" optional="true" mayBeNull="true"></param>
        /// <param name="userContext" optional="true" mayBeNull="true"></param>
        var e = Function._validateParams(arguments, [
            {name: "username", type: String},
            {name: "password", type: String, mayBeNull: true},
            {name: "isPersistent", type: Boolean, mayBeNull: true, optional: true},
            {name: "customInfo", type: String, mayBeNull: true, optional: true},
            {name: "redirectUrl", type: String, mayBeNull: true, optional: true},
            {name: "loginCompletedCallback", type: Function, mayBeNull: true, optional: true},
            {name: "failedCallback", type: Function, mayBeNull: true, optional: true},
            {name: "userContext", mayBeNull: true, optional: true}
        ]);
        if (e) throw e;
        this._invoke(this._get_path(), "Login", false,
                                        { userName: username, password: password, createPersistentCookie: isPersistent },
                                        Function.createDelegate(this, this._onLoginComplete),
                                        Function.createDelegate(this, this._onLoginFailed),
                                        [username, password, isPersistent, customInfo, redirectUrl, loginCompletedCallback, failedCallback, userContext]);
    }
    function Sys$Services$_AuthenticationService$logout(redirectUrl, logoutCompletedCallback, failedCallback, userContext) {
        /// <summary locid="M:J#Sys.Services.AuthenticationService.logout" />
        /// <param name="redirectUrl" type="String" optional="true" mayBeNull="true"></param>
        /// <param name="logoutCompletedCallback" type="Function" optional="true" mayBeNull="true"></param>
        /// <param name="failedCallback" type="Function" optional="true" mayBeNull="true"></param>
        /// <param name="userContext" optional="true" mayBeNull="true"></param>
        var e = Function._validateParams(arguments, [
            {name: "redirectUrl", type: String, mayBeNull: true, optional: true},
            {name: "logoutCompletedCallback", type: Function, mayBeNull: true, optional: true},
            {name: "failedCallback", type: Function, mayBeNull: true, optional: true},
            {name: "userContext", mayBeNull: true, optional: true}
        ]);
        if (e) throw e;
        this._invoke(this._get_path(), "Logout", false, {}, 
                                        Function.createDelegate(this, this._onLogoutComplete),
                                        Function.createDelegate(this, this._onLogoutFailed),
                                        [redirectUrl, logoutCompletedCallback, failedCallback, userContext]);
    }
    function Sys$Services$_AuthenticationService$_get_path() {
        var path = this.get_path();
        if(!path.length) {
            path = Sys.Services._AuthenticationService.DefaultWebServicePath;
        }
        if(!path || !path.length) {
            throw Error.invalidOperation(Sys.Res.servicePathNotSet);
        }
        return path;
    }
    function Sys$Services$_AuthenticationService$_onLoginComplete(result, context, methodName) {
        if(typeof(result) !== "boolean") {
            throw Error.invalidOperation(String.format(Sys.Res.webServiceInvalidReturnType, methodName, "Boolean"));
        }
        
        var redirectUrl = context[4];
        var userContext = context[7] || this.get_defaultUserContext();
        var callback = context[5] || this.get_defaultLoginCompletedCallback() || this.get_defaultSucceededCallback();
        
        if(result) {
            this._authenticated = true;
            if (callback) {
                callback(true, userContext, "Sys.Services.AuthenticationService.login");
            }
            
            if (typeof(redirectUrl) !== "undefined" && redirectUrl !== null) {
                window.location.href = redirectUrl;
            }
        }
        else if (callback) {
            callback(false, userContext, "Sys.Services.AuthenticationService.login");
        }
    }
    function Sys$Services$_AuthenticationService$_onLoginFailed(err, context, methodName) {
        var callback = context[6] || this.get_defaultFailedCallback();
        if (callback) {
            var userContext = context[7] || this.get_defaultUserContext();
            callback(err, userContext, "Sys.Services.AuthenticationService.login");
        }
        else {
            Sys.Net.WebServiceProxy._defaultFailedCallback(err, methodName);
        }
    }
    function Sys$Services$_AuthenticationService$_onLogoutComplete(result, context, methodName) {
        if(result !== null) {
            throw Error.invalidOperation(String.format(Sys.Res.webServiceInvalidReturnType, methodName, "null"));
        }
        
        var redirectUrl = context[0];
        var userContext = context[3] || this.get_defaultUserContext();
        var callback = context[1] || this.get_defaultLogoutCompletedCallback() || this.get_defaultSucceededCallback();
        this._authenticated = false;
        
        if (callback) {
            callback(null, userContext, "Sys.Services.AuthenticationService.logout");
        }
        
        if(!redirectUrl) {
            window.location.reload();
        }
        else {
            window.location.href = redirectUrl;
        }
    }
    function Sys$Services$_AuthenticationService$_onLogoutFailed(err, context, methodName) {
        var callback = context[2] || this.get_defaultFailedCallback();
        if (callback) {
            callback(err, context[3], "Sys.Services.AuthenticationService.logout");
        }
        else {
            Sys.Net.WebServiceProxy._defaultFailedCallback(err, methodName);
        }
    }
    function Sys$Services$_AuthenticationService$_setAuthenticated(authenticated) {
        this._authenticated = authenticated;
    }
Sys.Services._AuthenticationService.prototype = {
    _defaultLoginCompletedCallback: null,
    _defaultLogoutCompletedCallback: null,
    _path: '',
    _timeout: 0,
    _authenticated: false,
    get_defaultLoginCompletedCallback: Sys$Services$_AuthenticationService$get_defaultLoginCompletedCallback,
    set_defaultLoginCompletedCallback: Sys$Services$_AuthenticationService$set_defaultLoginCompletedCallback,
    get_defaultLogoutCompletedCallback: Sys$Services$_AuthenticationService$get_defaultLogoutCompletedCallback,
    set_defaultLogoutCompletedCallback: Sys$Services$_AuthenticationService$set_defaultLogoutCompletedCallback,
    get_isLoggedIn: Sys$Services$_AuthenticationService$get_isLoggedIn,
    get_path: Sys$Services$_AuthenticationService$get_path,  
    login: Sys$Services$_AuthenticationService$login,
    logout: Sys$Services$_AuthenticationService$logout,
    _get_path: Sys$Services$_AuthenticationService$_get_path,
    _onLoginComplete: Sys$Services$_AuthenticationService$_onLoginComplete,
    _onLoginFailed: Sys$Services$_AuthenticationService$_onLoginFailed,
    _onLogoutComplete: Sys$Services$_AuthenticationService$_onLogoutComplete,
    _onLogoutFailed: Sys$Services$_AuthenticationService$_onLogoutFailed,
    _setAuthenticated: Sys$Services$_AuthenticationService$_setAuthenticated    
Sys.Services._AuthenticationService.registerClass('Sys.Services._AuthenticationService', Sys.Net.WebServiceProxy);
Sys.Services.AuthenticationService = new Sys.Services._AuthenticationService();
Sys.Services._RoleService = function Sys$Services$_RoleService() {
    /// <summary locid="M:J#Sys.Services.RoleService.#ctor" />
    if (arguments.length !== 0) throw Error.parameterCount();
    Sys.Services._RoleService.initializeBase(this);
    this._roles = [];
Sys.Services._RoleService.DefaultWebServicePath = '';
    function Sys$Services$_RoleService$get_defaultLoadCompletedCallback() {
        /// <value type="Function" mayBeNull="true" locid="P:J#Sys.Services.RoleService.defaultLoadCompletedCallback"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._defaultLoadCompletedCallback;
    }
    function Sys$Services$_RoleService$set_defaultLoadCompletedCallback(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: Function, mayBeNull: true}]);
        if (e) throw e;
        this._defaultLoadCompletedCallback = value;
    }
    function Sys$Services$_RoleService$get_path() {
        /// <value type="String" mayBeNull="true" locid="P:J#Sys.Services.RoleService.path"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._path || '';
    }
    function Sys$Services$_RoleService$get_roles() {
        /// <value type="Array" elementType="String" mayBeNull="false" locid="P:J#Sys.Services.RoleService.roles"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return Array.clone(this._roles);
    }
    function Sys$Services$_RoleService$isUserInRole(role) {
        /// <summary locid="M:J#Sys.Services.RoleService.isUserInRole" />
        /// <param name="role" type="String" mayBeNull="false"></param>
        /// <returns type="Boolean"></returns>
        var e = Function._validateParams(arguments, [
            {name: "role", type: String}
        ]);
        if (e) throw e;
        var v = this._get_rolesIndex()[role.trim().toLowerCase()];
        return !!v;
    }
    function Sys$Services$_RoleService$load(loadCompletedCallback, failedCallback, userContext) {
        /// <summary locid="M:J#Sys.Services.RoleService.load" />
        /// <param name="loadCompletedCallback" type="Function" optional="true" mayBeNull="true"></param>
        /// <param name="failedCallback" type="Function" optional="true" mayBeNull="true"></param>
        /// <param name="userContext" optional="true" mayBeNull="true"></param>
        var e = Function._validateParams(arguments, [
            {name: "loadCompletedCallback", type: Function, mayBeNull: true, optional: true},
            {name: "failedCallback", type: Function, mayBeNull: true, optional: true},
            {name: "userContext", mayBeNull: true, optional: true}
        ]);
        if (e) throw e;
        Sys.Net.WebServiceProxy.invoke(
                    this._get_path(),
                    "GetRolesForCurrentUser",
                    false,
                    {} ,
                    Function.createDelegate(this, this._onLoadComplete),
                    Function.createDelegate(this, this._onLoadFailed),
                    [loadCompletedCallback, failedCallback, userContext],
                    this.get_timeout());
    }
    function Sys$Services$_RoleService$_get_path() {
        var path = this.get_path();
        if(!path || !path.length) {
            path = Sys.Services._RoleService.DefaultWebServicePath;
        }
        if(!path || !path.length) {
            throw Error.invalidOperation(Sys.Res.servicePathNotSet);
        }
        return path;
    }
    function Sys$Services$_RoleService$_get_rolesIndex() {
        if (!this._rolesIndex) {
            var index = {};
            for(var i=0; i < this._roles.length; i++) {
                index[this._roles[i].toLowerCase()] = true;
            }
            this._rolesIndex = index;
        }
        return this._rolesIndex;
    }
    function Sys$Services$_RoleService$_onLoadComplete(result, context, methodName) {
        if(result && !(result instanceof Array)) {
            throw Error.invalidOperation(String.format(Sys.Res.webServiceInvalidReturnType, methodName, "Array"));
        }
        this._roles = result;
        this._rolesIndex = null;
        var callback = context[0] || this.get_defaultLoadCompletedCallback() || this.get_defaultSucceededCallback();
        if (callback) {
            var userContext = context[2] || this.get_defaultUserContext();
            var clonedResult = Array.clone(result);
            callback(clonedResult, userContext, "Sys.Services.RoleService.load");
        }
    }
    function Sys$Services$_RoleService$_onLoadFailed(err, context, methodName) {
        var callback = context[1] || this.get_defaultFailedCallback();
        if (callback) {
            var userContext = context[2] || this.get_defaultUserContext();
            callback(err, userContext, "Sys.Services.RoleService.load");
        }
        else {
            Sys.Net.WebServiceProxy._defaultFailedCallback(err, methodName);
        }
    }
Sys.Services._RoleService.prototype = {
    _defaultLoadCompletedCallback: null,
    _rolesIndex: null,
    _timeout: 0,
    _path: '',
    get_defaultLoadCompletedCallback: Sys$Services$_RoleService$get_defaultLoadCompletedCallback,
    set_defaultLoadCompletedCallback: Sys$Services$_RoleService$set_defaultLoadCompletedCallback,
    get_path: Sys$Services$_RoleService$get_path,
    get_roles: Sys$Services$_RoleService$get_roles,
    isUserInRole: Sys$Services$_RoleService$isUserInRole,
    load: Sys$Services$_RoleService$load,
    _get_path: Sys$Services$_RoleService$_get_path,  
    _get_rolesIndex: Sys$Services$_RoleService$_get_rolesIndex,
    _onLoadComplete: Sys$Services$_RoleService$_onLoadComplete,
    _onLoadFailed: Sys$Services$_RoleService$_onLoadFailed
Sys.Services._RoleService.registerClass('Sys.Services._RoleService', Sys.Net.WebServiceProxy);
Sys.Services.RoleService = new Sys.Services._RoleService();
Type.registerNamespace('Sys.Serialization');
Sys.Serialization.JavaScriptSerializer = function Sys$Serialization$JavaScriptSerializer() {
    /// <summary locid="M:J#Sys.Serialization.JavaScriptSerializer.#ctor" />
    if (arguments.length !== 0) throw Error.parameterCount();
Sys.Serialization.JavaScriptSerializer.registerClass('Sys.Serialization.JavaScriptSerializer');
Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs = [];
Sys.Serialization.JavaScriptSerializer._charsToEscape = [];
Sys.Serialization.JavaScriptSerializer._dateRegEx = new RegExp('(^|[^\\\\])\\"\\\\/Date\\((-?[0-9]+)(?:[a-zA-Z]|(?:\\+|-)[0-9]{4})?\\)\\\\/\\"', 'g');
Sys.Serialization.JavaScriptSerializer._escapeChars = {};
Sys.Serialization.JavaScriptSerializer._escapeRegEx = new RegExp('["\\\\\\x00-\\x1F]', 'i');
Sys.Serialization.JavaScriptSerializer._escapeRegExGlobal = new RegExp('["\\\\\\x00-\\x1F]', 'g');
Sys.Serialization.JavaScriptSerializer._jsonRegEx = new RegExp('[^,:{}\\[\\]0-9.\\-+Eaeflnr-u \\n\\r\\t]', 'g');
Sys.Serialization.JavaScriptSerializer._jsonStringRegEx = new RegExp('"(\\\\.|[^"\\\\])*"', 'g');
Sys.Serialization.JavaScriptSerializer._serverTypeFieldName = '__type';
Sys.Serialization.JavaScriptSerializer._init = function Sys$Serialization$JavaScriptSerializer$_init() {
    var replaceChars = ['\\u0000','\\u0001','\\u0002','\\u0003','\\u0004','\\u0005','\\u0006','\\u0007',
                        '\\b','\\t','\\n','\\u000b','\\f','\\r','\\u000e','\\u000f','\\u0010','\\u0011',
                        '\\u0012','\\u0013','\\u0014','\\u0015','\\u0016','\\u0017','\\u0018','\\u0019',
                        '\\u001a','\\u001b','\\u001c','\\u001d','\\u001e','\\u001f'];
    Sys.Serialization.JavaScriptSerializer._charsToEscape[0] = '\\';
    Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs['\\'] = new RegExp('\\\\', 'g');
    Sys.Serialization.JavaScriptSerializer._escapeChars['\\'] = '\\\\';
    Sys.Serialization.JavaScriptSerializer._charsToEscape[1] = '"';
    Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs['"'] = new RegExp('"', 'g');
    Sys.Serialization.JavaScriptSerializer._escapeChars['"'] = '\\"';
    for (var i = 0; i < 32; i++) {
        var c = String.fromCharCode(i);
        Sys.Serialization.JavaScriptSerializer._charsToEscape[i+2] = c;
        Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs[c] = new RegExp(c, 'g');
        Sys.Serialization.JavaScriptSerializer._escapeChars[c] = replaceChars[i];
    }
Sys.Serialization.JavaScriptSerializer._serializeBooleanWithBuilder = function Sys$Serialization$JavaScriptSerializer$_serializeBooleanWithBuilder(object, stringBuilder) {
    stringBuilder.append(object.toString());
Sys.Serialization.JavaScriptSerializer._serializeNumberWithBuilder = function Sys$Serialization$JavaScriptSerializer$_serializeNumberWithBuilder(object, stringBuilder) {
    if (isFinite(object)) {
        stringBuilder.append(String(object));
    }
    else {
        throw Error.invalidOperation(Sys.Res.cannotSerializeNonFiniteNumbers);
    }
Sys.Serialization.JavaScriptSerializer._serializeStringWithBuilder = function Sys$Serialization$JavaScriptSerializer$_serializeStringWithBuilder(string, stringBuilder) {
    stringBuilder.append('"');
    if (Sys.Serialization.JavaScriptSerializer._escapeRegEx.test(string)) {
        if (Sys.Serialization.JavaScriptSerializer._charsToEscape.length === 0) {
            Sys.Serialization.JavaScriptSerializer._init();
        }
        if (string.length < 128) {
            string = string.replace(Sys.Serialization.JavaScriptSerializer._escapeRegExGlobal,
                function(x) { return Sys.Serialization.JavaScriptSerializer._escapeChars[x]; });
        }
        else {
            for (var i = 0; i < 34; i++) {
                var c = Sys.Serialization.JavaScriptSerializer._charsToEscape[i];
                if (string.indexOf(c) !== -1) {
                    if (Sys.Browser.agent === Sys.Browser.Opera || Sys.Browser.agent === Sys.Browser.FireFox) {
                        string = string.split(c).join(Sys.Serialization.JavaScriptSerializer._escapeChars[c]);
                    }
                    else {
                        string = string.replace(Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs[c],
                            Sys.Serialization.JavaScriptSerializer._escapeChars[c]);
                    }
                }
            }
       }
    }
    stringBuilder.append(string);
    stringBuilder.append('"');
Sys.Serialization.JavaScriptSerializer._serializeWithBuilder = function Sys$Serialization$JavaScriptSerializer$_serializeWithBuilder(object, stringBuilder, sort, prevObjects) {
    var i;
    switch (typeof object) {
    case 'object':
        if (object) {
            if (prevObjects){
                for( var j = 0; j < prevObjects.length; j++) {
                    if (prevObjects[j] === object) {
                        throw Error.invalidOperation(Sys.Res.cannotSerializeObjectWithCycle);
                    }
                }
            }
            else {
                prevObjects = new Array();
            }
            try {
                Array.add(prevObjects, object);
                
                if (Number.isInstanceOfType(object)){
                    Sys.Serialization.JavaScriptSerializer._serializeNumberWithBuilder(object, stringBuilder);
                }
                else if (Boolean.isInstanceOfType(object)){
                    Sys.Serialization.JavaScriptSerializer._serializeBooleanWithBuilder(object, stringBuilder);
                }
                else if (String.isInstanceOfType(object)){
                    Sys.Serialization.JavaScriptSerializer._serializeStringWithBuilder(object, stringBuilder);
                }
            
                else if (Array.isInstanceOfType(object)) {
                    stringBuilder.append('[');
                   
                    for (i = 0; i < object.length; ++i) {
                        if (i > 0) {
                            stringBuilder.append(',');
                        }
                        Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(object[i], stringBuilder,false,prevObjects);
                    }
                    stringBuilder.append(']');
                }
                else {
                    if (Date.isInstanceOfType(object)) {
                        stringBuilder.append('"\\/Date(');
                        stringBuilder.append(object.getTime());
                        stringBuilder.append(')\\/"');
                        break;
                    }
                    var properties = [];
                    var propertyCount = 0;
                    for (var name in object) {
                        if (name.startsWith('$')) {
                            continue;
                        }
                        if (name === Sys.Serialization.JavaScriptSerializer._serverTypeFieldName && propertyCount !== 0){
                            properties[propertyCount++] = properties[0];
                            properties[0] = name;
                        }
                        else{
                            properties[propertyCount++] = name;
                        }
                    }
                    if (sort) properties.sort();
                    stringBuilder.append('{');
                    var needComma = false;
                     
                    for (i=0; i<propertyCount; i++) {
                        var value = object[properties[i]];
                        if (typeof value !== 'undefined' && typeof value !== 'function') {
                            if (needComma) {
                                stringBuilder.append(',');
                            }
                            else {
                                needComma = true;
                            }
                           
                            Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(properties[i], stringBuilder, sort, prevObjects);
                            stringBuilder.append(':');
                            Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(value, stringBuilder, sort, prevObjects);
                          
                        }
                    }
                stringBuilder.append('}');
                }
            }
            finally {
                Array.removeAt(prevObjects, prevObjects.length - 1);
            }
        }
        else {
            stringBuilder.append('null');
        }
        break;
    case 'number':
        Sys.Serialization.JavaScriptSerializer._serializeNumberWithBuilder(object, stringBuilder);
        break;
    case 'string':
        Sys.Serialization.JavaScriptSerializer._serializeStringWithBuilder(object, stringBuilder);
        break;
    case 'boolean':
        Sys.Serialization.JavaScriptSerializer._serializeBooleanWithBuilder(object, stringBuilder);
        break;
    default:
        stringBuilder.append('null');
        break;
    }
Sys.Serialization.JavaScriptSerializer.serialize = function Sys$Serialization$JavaScriptSerializer$serialize(object) {
    /// <summary locid="M:J#Sys.Serialization.JavaScriptSerializer.serialize" />
    /// <param name="object" mayBeNull="true"></param>
    /// <returns type="String"></returns>
    var e = Function._validateParams(arguments, [
        {name: "object", mayBeNull: true}
    ]);
    if (e) throw e;
    var stringBuilder = new Sys.StringBuilder();
    Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(object, stringBuilder, false);
    return stringBuilder.toString();
Sys.Serialization.JavaScriptSerializer.deserialize = function Sys$Serialization$JavaScriptSerializer$deserialize(data, secure) {
    /// <summary locid="M:J#Sys.Serialization.JavaScriptSerializer.deserialize" />
    /// <param name="data" type="String"></param>
    /// <param name="secure" type="Boolean" optional="true"></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: "data", type: String},
        {name: "secure", type: Boolean, optional: true}
    ]);
    if (e) throw e;
    if (data.length === 0) throw Error.argument('data', Sys.Res.cannotDeserializeEmptyString);
    try {    
        var exp = data.replace(Sys.Serialization.JavaScriptSerializer._dateRegEx, "$1new Date($2)");
        
        if (secure && Sys.Serialization.JavaScriptSerializer._jsonRegEx.test(
             exp.replace(Sys.Serialization.JavaScriptSerializer._jsonStringRegEx, ''))) throw null;
        return eval('(' + exp + ')');
    }
    catch (e) {
         throw Error.argument('data', Sys.Res.cannotDeserializeInvalidJson);
    }
Sys.CultureInfo = function Sys$CultureInfo(name, numberFormat, dateTimeFormat) {
    /// <summary locid="M:J#Sys.CultureInfo.#ctor" />
    /// <param name="name" type="String"></param>
    /// <param name="numberFormat" type="Object"></param>
    /// <param name="dateTimeFormat" type="Object"></param>
    var e = Function._validateParams(arguments, [
        {name: "name", type: String},
        {name: "numberFormat", type: Object},
        {name: "dateTimeFormat", type: Object}
    ]);
    if (e) throw e;
    this.name = name;
    this.numberFormat = numberFormat;
    this.dateTimeFormat = dateTimeFormat;
    function Sys$CultureInfo$_getDateTimeFormats() {
        if (! this._dateTimeFormats) {
            var dtf = this.dateTimeFormat;
            this._dateTimeFormats =
              [ dtf.MonthDayPattern,
                dtf.YearMonthPattern,
                dtf.ShortDatePattern,
                dtf.ShortTimePattern,
                dtf.LongDatePattern,
                dtf.LongTimePattern,
                dtf.FullDateTimePattern,
                dtf.RFC1123Pattern,
                dtf.SortableDateTimePattern,
                dtf.UniversalSortableDateTimePattern ];
        }
        return this._dateTimeFormats;
    }
    function Sys$CultureInfo$_getMonthIndex(value) {
        if (!this._upperMonths) {
            this._upperMonths = this._toUpperArray(this.dateTimeFormat.MonthNames);
        }
        return Array.indexOf(this._upperMonths, this._toUpper(value));
    }
    function Sys$CultureInfo$_getAbbrMonthIndex(value) {
        if (!this._upperAbbrMonths) {
            this._upperAbbrMonths = this._toUpperArray(this.dateTimeFormat.AbbreviatedMonthNames);
        }
        return Array.indexOf(this._upperAbbrMonths, this._toUpper(value));
    }
    function Sys$CultureInfo$_getDayIndex(value) {
        if (!this._upperDays) {
            this._upperDays = this._toUpperArray(this.dateTimeFormat.DayNames);
        }
        return Array.indexOf(this._upperDays, this._toUpper(value));
    }
    function Sys$CultureInfo$_getAbbrDayIndex(value) {
        if (!this._upperAbbrDays) {
            this._upperAbbrDays = this._toUpperArray(this.dateTimeFormat.AbbreviatedDayNames);
        }
        return Array.indexOf(this._upperAbbrDays, this._toUpper(value));
    }
    function Sys$CultureInfo$_toUpperArray(arr) {
        var result = [];
        for (var i = 0, il = arr.length; i < il; i++) {
            result[i] = this._toUpper(arr[i]);
        }
        return result;
    }
    function Sys$CultureInfo$_toUpper(value) {
        return value.split("\u00A0").join(' ').toUpperCase();
    }
Sys.CultureInfo.prototype = {
    _getDateTimeFormats: Sys$CultureInfo$_getDateTimeFormats,
    _getMonthIndex: Sys$CultureInfo$_getMonthIndex,
    _getAbbrMonthIndex: Sys$CultureInfo$_getAbbrMonthIndex,
    _getDayIndex: Sys$CultureInfo$_getDayIndex,
    _getAbbrDayIndex: Sys$CultureInfo$_getAbbrDayIndex,
    _toUpperArray: Sys$CultureInfo$_toUpperArray,
    _toUpper: Sys$CultureInfo$_toUpper
Sys.CultureInfo._parse = function Sys$CultureInfo$_parse(value) {
    var cultureInfo = Sys.Serialization.JavaScriptSerializer.deserialize(value);
    return new Sys.CultureInfo(cultureInfo.name, cultureInfo.numberFormat, cultureInfo.dateTimeFormat);
Sys.CultureInfo.registerClass('Sys.CultureInfo');
Sys.CultureInfo.InvariantCulture = Sys.CultureInfo._parse('{"name":"","numberFormat":{"CurrencyDecimalDigits":2,"CurrencyDecimalSeparator":".","IsReadOnly":true,"CurrencyGroupSizes":[3],"NumberGroupSizes":[3],"PercentGroupSizes":[3],"CurrencyGroupSeparator":",","CurrencySymbol":"\u00A4","NaNSymbol":"NaN","CurrencyNegativePattern":0,"NumberNegativePattern":1,"PercentPositivePattern":0,"PercentNegativePattern":0,"NegativeInfinitySymbol":"-Infinity","NegativeSign":"-","NumberDecimalDigits":2,"NumberDecimalSeparator":".","NumberGroupSeparator":",","CurrencyPositivePattern":0,"PositiveInfinitySymbol":"Infinity","PositiveSign":"+","PercentDecimalDigits":2,"PercentDecimalSeparator":".","PercentGroupSeparator":",","PercentSymbol":"%","PerMilleSymbol":"\u2030","NativeDigits":["0","1","2","3","4","5","6","7","8","9"],"DigitSubstitution":1},"dateTimeFormat":{"AMDesignator":"AM","Calendar":{"MinSupportedDateTime":"@-62135568000000@","MaxSupportedDateTime":"@253402300799999@","AlgorithmType":1,"CalendarType":1,"Eras":[1],"TwoDigitYearMax":2029,"IsReadOnly":true},"DateSeparator":"/","FirstDayOfWeek":0,"CalendarWeekRule":0,"FullDateTimePattern":"dddd, dd MMMM yyyy HH:mm:ss","LongDatePattern":"dddd, dd MMMM yyyy","LongTimePattern":"HH:mm:ss","MonthDayPattern":"MMMM dd","PMDesignator":"PM","RFC1123Pattern":"ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'","ShortDatePattern":"MM/dd/yyyy","ShortTimePattern":"HH:mm","SortableDateTimePattern":"yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss","TimeSeparator":":","UniversalSortableDateTimePattern":"yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'","YearMonthPattern":"yyyy MMMM","AbbreviatedDayNames":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"ShortestDayNames":["Su","Mo","Tu","We","Th","Fr","Sa"],"DayNames":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"AbbreviatedMonthNames":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],"MonthNames":["January","February","March","April","May","June","July","August","September","October","November","December",""],"IsReadOnly":true,"NativeCalendarName":"Gregorian Calendar","AbbreviatedMonthGenitiveNames":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],"MonthGenitiveNames":["January","February","March","April","May","June","July","August","September","October","November","December",""]}}');
if (typeof(__cultureInfo) === 'undefined') {
    var __cultureInfo = '{"name":"en-US","numberFormat":{"CurrencyDecimalDigits":2,"CurrencyDecimalSeparator":".","IsReadOnly":false,"CurrencyGroupSizes":[3],"NumberGroupSizes":[3],"PercentGroupSizes":[3],"CurrencyGroupSeparator":",","CurrencySymbol":"$","NaNSymbol":"NaN","CurrencyNegativePattern":0,"NumberNegativePattern":1,"PercentPositivePattern":0,"PercentNegativePattern":0,"NegativeInfinitySymbol":"-Infinity","NegativeSign":"-","NumberDecimalDigits":2,"NumberDecimalSeparator":".","NumberGroupSeparator":",","CurrencyPositivePattern":0,"PositiveInfinitySymbol":"Infinity","PositiveSign":"+","PercentDecimalDigits":2,"PercentDecimalSeparator":".","PercentGroupSeparator":",","PercentSymbol":"%","PerMilleSymbol":"\u2030","NativeDigits":["0","1","2","3","4","5","6","7","8","9"],"DigitSubstitution":1},"dateTimeFormat":{"AMDesignator":"AM","Calendar":{"MinSupportedDateTime":"@-62135568000000@","MaxSupportedDateTime":"@253402300799999@","AlgorithmType":1,"CalendarType":1,"Eras":[1],"TwoDigitYearMax":2029,"IsReadOnly":false},"DateSeparator":"/","FirstDayOfWeek":0,"CalendarWeekRule":0,"FullDateTimePattern":"dddd, MMMM dd, yyyy h:mm:ss tt","LongDatePattern":"dddd, MMMM dd, yyyy","LongTimePattern":"h:mm:ss tt","MonthDayPattern":"MMMM dd","PMDesignator":"PM","RFC1123Pattern":"ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'","ShortDatePattern":"M/d/yyyy","ShortTimePattern":"h:mm tt","SortableDateTimePattern":"yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss","TimeSeparator":":","UniversalSortableDateTimePattern":"yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'","YearMonthPattern":"MMMM, yyyy","AbbreviatedDayNames":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"ShortestDayNames":["Su","Mo","Tu","We","Th","Fr","Sa"],"DayNames":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"AbbreviatedMonthNames":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],"MonthNames":["January","February","March","April","May","June","July","August","September","October","November","December",""],"IsReadOnly":false,"NativeCalendarName":"Gregorian Calendar","AbbreviatedMonthGenitiveNames":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],"MonthGenitiveNames":["January","February","March","April","May","June","July","August","September","October","November","December",""]}}';
Sys.CultureInfo.CurrentCulture = Sys.CultureInfo._parse(__cultureInfo);
delete __cultureInfo;
Sys.UI.Behavior = function Sys$UI$Behavior(element) {
    /// <summary locid="M:J#Sys.UI.Behavior.#ctor" />
    /// <param name="element" domElement="true"></param>
    var e = Function._validateParams(arguments, [
        {name: "element", domElement: true}
    ]);
    if (e) throw e;
    Sys.UI.Behavior.initializeBase(this);
    this._element = element;
    var behaviors = element._behaviors;
    if (!behaviors) {
        element._behaviors = [this];
    }
    else {
        behaviors[behaviors.length] = this;
    }
    function Sys$UI$Behavior$get_element() {
        /// <value domElement="true" locid="P:J#Sys.UI.Behavior.element"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._element;
    }
    function Sys$UI$Behavior$get_id() {
        /// <value type="String" locid="P:J#Sys.UI.Behavior.id"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        var baseId = Sys.UI.Behavior.callBaseMethod(this, 'get_id');
        if (baseId) return baseId;
        if (!this._element || !this._element.id) return '';
        return this._element.id + '$' + this.get_name();
    }
    function Sys$UI$Behavior$get_name() {
        /// <value type="String" locid="P:J#Sys.UI.Behavior.name"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (this._name) return this._name;
        var name = Object.getTypeName(this);
        var i = name.lastIndexOf('.');
        if (i != -1) name = name.substr(i + 1);
        if (!this.get_isInitialized()) this._name = name;
        return name;
    }
    function Sys$UI$Behavior$set_name(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: String}]);
        if (e) throw e;
        if ((value === '') || (value.charAt(0) === ' ') || (value.charAt(value.length - 1) === ' '))
            throw Error.argument('value', Sys.Res.invalidId);
        if (typeof(this._element[value]) !== 'undefined')
            throw Error.invalidOperation(String.format(Sys.Res.behaviorDuplicateName, value));
        if (this.get_isInitialized()) throw Error.invalidOperation(Sys.Res.cantSetNameAfterInit);
        this._name = value;
    }
    function Sys$UI$Behavior$initialize() {
        Sys.UI.Behavior.callBaseMethod(this, 'initialize');
        var name = this.get_name();
        if (name) this._element[name] = this;
    }
    function Sys$UI$Behavior$dispose() {
        Sys.UI.Behavior.callBaseMethod(this, 'dispose');
        if (this._element) {
            var name = this.get_name();
            if (name) {
                this._element[name] = null;
            }
            Array.remove(this._element._behaviors, this);
            delete this._element;
        }
    }
Sys.UI.Behavior.prototype = {
    _name: null,
    get_element: Sys$UI$Behavior$get_element,
    get_id: Sys$UI$Behavior$get_id,
    get_name: Sys$UI$Behavior$get_name,
    set_name: Sys$UI$Behavior$set_name,
    initialize: Sys$UI$Behavior$initialize,
    dispose: Sys$UI$Behavior$dispose
Sys.UI.Behavior.registerClass('Sys.UI.Behavior', Sys.Component);
Sys.UI.Behavior.getBehaviorByName = function Sys$UI$Behavior$getBehaviorByName(element, name) {
    /// <summary locid="M:J#Sys.UI.Behavior.getBehaviorByName" />
    /// <param name="element" domElement="true"></param>
    /// <param name="name" type="String"></param>
    /// <returns type="Sys.UI.Behavior" mayBeNull="true"></returns>
    var e = Function._validateParams(arguments, [
        {name: "element", domElement: true},
        {name: "name", type: String}
    ]);
    if (e) throw e;
    var b = element[name];
   return (b && Sys.UI.Behavior.isInstanceOfType(b)) ? b : null;
Sys.UI.Behavior.getBehaviors = function Sys$UI$Behavior$getBehaviors(element) {
    /// <summary locid="M:J#Sys.UI.Behavior.getBehaviors" />
    /// <param name="element" domElement="true"></param>
    /// <returns type="Array" elementType="Sys.UI.Behavior"></returns>
    var e = Function._validateParams(arguments, [
        {name: "element", domElement: true}
    ]);
    if (e) throw e;
    if (!element._behaviors) return [];
    return Array.clone(element._behaviors);
Sys.UI.Behavior.getBehaviorsByType = function Sys$UI$Behavior$getBehaviorsByType(element, type) {
    /// <summary locid="M:J#Sys.UI.Behavior.getBehaviorsByType" />
    /// <param name="element" domElement="true"></param>
    /// <param name="type" type="Type"></param>
    /// <returns type="Array" elementType="Sys.UI.Behavior"></returns>
    var e = Function._validateParams(arguments, [
        {name: "element", domElement: true},
        {name: "type", type: Type}
    ]);
    if (e) throw e;
    var behaviors = element._behaviors;
    var results = [];
    if (behaviors) {
        for (var i = 0, l = behaviors.length; i < l; i++) {
            if (type.isInstanceOfType(behaviors[i])) {
                results[results.length] = behaviors[i];
            }
        }
    }
    return results;
Sys.UI.VisibilityMode = function Sys$UI$VisibilityMode() {
    /// <summary locid="M:J#Sys.UI.VisibilityMode.#ctor" />
    /// <field name="hide" type="Number" integer="true" static="true" locid="F:J#Sys.UI.VisibilityMode.hide"></field>
    /// <field name="collapse" type="Number" integer="true" static="true" locid="F:J#Sys.UI.VisibilityMode.collapse"></field>
    if (arguments.length !== 0) throw Error.parameterCount();
    throw Error.notImplemented();
Sys.UI.VisibilityMode.prototype = {
    hide: 0,
    collapse: 1
Sys.UI.VisibilityMode.registerEnum("Sys.UI.VisibilityMode");
Sys.UI.Control = function Sys$UI$Control(element) {
    /// <summary locid="M:J#Sys.UI.Control.#ctor" />
    /// <param name="element" domElement="true"></param>
    var e = Function._validateParams(arguments, [
        {name: "element", domElement: true}
    ]);
    if (e) throw e;
    if (typeof(element.control) != 'undefined') throw Error.invalidOperation(Sys.Res.controlAlreadyDefined);
    Sys.UI.Control.initializeBase(this);
    this._element = element;
    element.control = this;
    function Sys$UI$Control$get_element() {
        /// <value domElement="true" locid="P:J#Sys.UI.Control.element"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._element;
    }
    function Sys$UI$Control$get_id() {
        /// <value type="String" locid="P:J#Sys.UI.Control.id"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._element) return '';
        return this._element.id;
    }
    function Sys$UI$Control$set_id(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: String}]);
        if (e) throw e;
        throw Error.invalidOperation(Sys.Res.cantSetId);
    }
    function Sys$UI$Control$get_parent() {
        /// <value type="Sys.UI.Control" locid="P:J#Sys.UI.Control.parent"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (this._parent) return this._parent;
        if (!this._element) return null;
        
        var parentElement = this._element.parentNode;
        while (parentElement) {
            if (parentElement.control) {
                return parentElement.control;
            }
            parentElement = parentElement.parentNode;
        }
        return null;
    }
    function Sys$UI$Control$set_parent(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: Sys.UI.Control}]);
        if (e) throw e;
        if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        var parents = [this];
        var current = value;
        while (current) {
            if (Array.contains(parents, current)) throw Error.invalidOperation(Sys.Res.circularParentChain);
            parents[parents.length] = current;
            current = current.get_parent();
        }
        this._parent = value;
    }
    function Sys$UI$Control$get_visibilityMode() {
        /// <value type="Sys.UI.VisibilityMode" locid="P:J#Sys.UI.Control.visibilityMode"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        return Sys.UI.DomElement.getVisibilityMode(this._element);
    }
    function Sys$UI$Control$set_visibilityMode(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: Sys.UI.VisibilityMode}]);
        if (e) throw e;
        if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        Sys.UI.DomElement.setVisibilityMode(this._element, value);
    }
    function Sys$UI$Control$get_visible() {
        /// <value type="Boolean" locid="P:J#Sys.UI.Control.visible"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        return Sys.UI.DomElement.getVisible(this._element);
    }
    function Sys$UI$Control$set_visible(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: Boolean}]);
        if (e) throw e;
        if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        Sys.UI.DomElement.setVisible(this._element, value)
    }
    function Sys$UI$Control$addCssClass(className) {
        /// <summary locid="M:J#Sys.UI.Control.addCssClass" />
        /// <param name="className" type="String"></param>
        var e = Function._validateParams(arguments, [
            {name: "className", type: String}
        ]);
        if (e) throw e;
        if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        Sys.UI.DomElement.addCssClass(this._element, className);
    }
    function Sys$UI$Control$dispose() {
        Sys.UI.Control.callBaseMethod(this, 'dispose');
        if (this._element) {
            this._element.control = undefined;
            delete this._element;
        }
        if (this._parent) delete this._parent;
    }
    function Sys$UI$Control$onBubbleEvent(source, args) {
        /// <summary locid="M:J#Sys.UI.Control.onBubbleEvent" />
        /// <param name="source"></param>
        /// <param name="args" type="Sys.EventArgs"></param>
        /// <returns type="Boolean"></returns>
        var e = Function._validateParams(arguments, [
            {name: "source"},
            {name: "args", type: Sys.EventArgs}
        ]);
        if (e) throw e;
        return false;
    }
    function Sys$UI$Control$raiseBubbleEvent(source, args) {
        /// <summary locid="M:J#Sys.UI.Control.raiseBubbleEvent" />
        /// <param name="source"></param>
        /// <param name="args" type="Sys.EventArgs"></param>
        var e = Function._validateParams(arguments, [
            {name: "source"},
            {name: "args", type: Sys.EventArgs}
        ]);
        if (e) throw e;
        var currentTarget = this.get_parent();
        while (currentTarget) {
            if (currentTarget.onBubbleEvent(source, args)) {
                return;
            }
            currentTarget = currentTarget.get_parent();
        }
    }
    function Sys$UI$Control$removeCssClass(className) {
        /// <summary locid="M:J#Sys.UI.Control.removeCssClass" />
        /// <param name="className" type="String"></param>
        var e = Function._validateParams(arguments, [
            {name: "className", type: String}
        ]);
        if (e) throw e;
        if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        Sys.UI.DomElement.removeCssClass(this._element, className);
    }
    function Sys$UI$Control$toggleCssClass(className) {
        /// <summary locid="M:J#Sys.UI.Control.toggleCssClass" />
        /// <param name="className" type="String"></param>
        var e = Function._validateParams(arguments, [
            {name: "className", type: String}
        ]);
        if (e) throw e;
        if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        Sys.UI.DomElement.toggleCssClass(this._element, className);
    }
Sys.UI.Control.prototype = {
    _parent: null,
    _visibilityMode: Sys.UI.VisibilityMode.hide,
    get_element: Sys$UI$Control$get_element,
    get_id: Sys$UI$Control$get_id,
    set_id: Sys$UI$Control$set_id,
    get_parent: Sys$UI$Control$get_parent,
    set_parent: Sys$UI$Control$set_parent,
    get_visibilityMode: Sys$UI$Control$get_visibilityMode,
    set_visibilityMode: Sys$UI$Control$set_visibilityMode,
    get_visible: Sys$UI$Control$get_visible,
    set_visible: Sys$UI$Control$set_visible,
    addCssClass: Sys$UI$Control$addCssClass,
    dispose: Sys$UI$Control$dispose,
    onBubbleEvent: Sys$UI$Control$onBubbleEvent,
    raiseBubbleEvent: Sys$UI$Control$raiseBubbleEvent,
    removeCssClass: Sys$UI$Control$removeCssClass,
    toggleCssClass: Sys$UI$Control$toggleCssClass
Sys.UI.Control.registerClass('Sys.UI.Control', Sys.Component);
//-----------------------------------------------------------------------
// Copyright (C) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------
// MicrosoftAjaxTimer.js
// Sys.UI._Timer component
Sys.UI._Timer = function Sys$UI$_Timer(element) {
    Sys.UI._Timer.initializeBase(this,[element]);
    this._interval = 60000;
    this._enabled = true;
    this._postbackPending = false;
    this._raiseTickDelegate = null;
    this._endRequestHandlerDelegate = null;
    this._timer = null;
    this._pageRequestManager = null;
    this._uniqueID = null;
    function Sys$UI$_Timer$get_enabled() {
        /// <value type="Boolean" locid="P:J#Sys.UI._Timer.enabled"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._enabled;
    }
    function Sys$UI$_Timer$set_enabled(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: Boolean}]);
        if (e) throw e;
        this._enabled = value;
    }
    function Sys$UI$_Timer$get_interval() {
        /// <value type="Number" locid="P:J#Sys.UI._Timer.interval"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._interval;
    }
    function Sys$UI$_Timer$set_interval(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: Number}]);
        if (e) throw e;
        this._interval = value;
    }
    function Sys$UI$_Timer$get_uniqueID(){
        /// <value type="String" locid="P:J#Sys.UI._Timer.uniqueID"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._uniqueID;
    }
    function Sys$UI$_Timer$set_uniqueID(value){
        var e = Function._validateParams(arguments, [{name: "value", type: String}]);
        if (e) throw e;
        this._uniqueID = value;
    }
    function Sys$UI$_Timer$dispose(){
       this._stopTimer();
       if(this._pageRequestManager !== null){
           this._pageRequestManager.remove_endRequest(this._endRequestHandlerDelegate);
       }
       Sys.UI._Timer.callBaseMethod(this,"dispose");
    }
    function Sys$UI$_Timer$_doPostback(){
        __doPostBack(this.get_uniqueID(),'');
    }
    function Sys$UI$_Timer$_handleEndRequest(sender, arg){
        var dataItem = arg.get_dataItems()[this.get_id()];
    if (dataItem){
            this._update(dataItem[0],dataItem[1]);
    if ((this._postbackPending === true) && (this._pageRequestManager !== null)&&(this._pageRequestManager.get_isInAsyncPostBack() === false)){
this._postbackPending = false;
            this._doPostback();
        }
    }
    function Sys$UI$_Timer$initialize(){
        Sys.UI._Timer.callBaseMethod(this, 'initialize');
this._raiseTickDelegate = Function.createDelegate(this,this._raiseTick);
this._endRequestHandlerDelegate = Function.createDelegate(this,this._handleEndRequest);
if (Sys.WebForms && Sys.WebForms.PageRequestManager){
           this._pageRequestManager = Sys.WebForms.PageRequestManager.getInstance();  
if (this._pageRequestManager !== null ){
    this._pageRequestManager.add_endRequest(this._endRequestHandlerDelegate);
        if(this.get_enabled()) {
            this._startTimer();
        }
    }
    function Sys$UI$_Timer$_raiseTick() {
        this._startTimer();
        if ((this._pageRequestManager === null) || (!this._pageRequestManager.get_isInAsyncPostBack())){
            this._doPostback();
            this._postbackPending = false;
        } 
        else {
            this._postbackPending = true;
        }
    }
    function Sys$UI$_Timer$_startTimer(){
        this._timer = window.setTimeout(Function.createDelegate(this,this._raiseTick),this.get_interval());
    }
    function Sys$UI$_Timer$_stopTimer(){
    if (this._timer !== null){
    window.clearTimeout(this._timer);
    this._timer = null;
       } 
    }
    function Sys$UI$_Timer$_update(enabled,interval) {
        var stopped = !this.get_enabled();
        var intervalChanged= (this.get_interval() !== interval);
    if ((!stopped) && ((!enabled)||(intervalChanged))){
this._stopTimer();
stopped = true;
       
this.set_enabled(enabled);
this.set_interval(interval);
if ((this.get_enabled()) && (stopped)){
    this._startTimer();
    }
Sys.UI._Timer.prototype = {
    get_enabled: Sys$UI$_Timer$get_enabled,
    set_enabled: Sys$UI$_Timer$set_enabled,
    get_interval: Sys$UI$_Timer$get_interval,
    set_interval: Sys$UI$_Timer$set_interval,
    get_uniqueID: Sys$UI$_Timer$get_uniqueID,
    set_uniqueID: Sys$UI$_Timer$set_uniqueID,
    dispose: Sys$UI$_Timer$dispose,
    _doPostback: Sys$UI$_Timer$_doPostback,
    _handleEndRequest: Sys$UI$_Timer$_handleEndRequest,
    initialize: Sys$UI$_Timer$initialize,
    _raiseTick: Sys$UI$_Timer$_raiseTick,
    _startTimer: Sys$UI$_Timer$_startTimer,
    _stopTimer: Sys$UI$_Timer$_stopTimer,
    _update: Sys$UI$_Timer$_update
Sys.UI._Timer.registerClass('Sys.UI._Timer', Sys.UI.Control);
//-----------------------------------------------------------------------
// Copyright (C) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------
// MicrosoftAjaxWebForms.js
// Microsoft AJAX ASP.NET WebForms Framework.
Type.registerNamespace('Sys.WebForms');
Sys.WebForms.BeginRequestEventArgs = function Sys$WebForms$BeginRequestEventArgs(request, postBackElement) {
    /// <summary locid="M:J#Sys.WebForms.BeginRequestEventArgs.#ctor" />
    /// <param name="request" type="Sys.Net.WebRequest"></param>
    /// <param name="postBackElement" domElement="true" mayBeNull="true"></param>
    var e = Function._validateParams(arguments, [
        {name: "request", type: Sys.Net.WebRequest},
        {name: "postBackElement", mayBeNull: true, domElement: true}
    ]);
    if (e) throw e;
    Sys.WebForms.BeginRequestEventArgs.initializeBase(this);
    this._request = request;
    this._postBackElement = postBackElement;
    function Sys$WebForms$BeginRequestEventArgs$get_postBackElement() {
        /// <value domElement="true" mayBeNull="true" locid="P:J#Sys.WebForms.BeginRequestEventArgs.postBackElement"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._postBackElement;
    }
    function Sys$WebForms$BeginRequestEventArgs$get_request() {
        /// <value type="Sys.Net.WebRequest" locid="P:J#Sys.WebForms.BeginRequestEventArgs.request"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._request;
    }
Sys.WebForms.BeginRequestEventArgs.prototype = {
    get_postBackElement: Sys$WebForms$BeginRequestEventArgs$get_postBackElement,
    get_request: Sys$WebForms$BeginRequestEventArgs$get_request
Sys.WebForms.BeginRequestEventArgs.registerClass('Sys.WebForms.BeginRequestEventArgs', Sys.EventArgs);
Sys.WebForms.EndRequestEventArgs = function Sys$WebForms$EndRequestEventArgs(error, dataItems, response) {
    /// <summary locid="M:J#Sys.WebForms.EndRequestEventArgs.#ctor" />
    /// <param name="error" type="Error" mayBeNull="true"></param>
    /// <param name="dataItems" type="Object" mayBeNull="true"></param>
    /// <param name="response" type="Sys.Net.WebRequestExecutor"></param>
    var e = Function._validateParams(arguments, [
        {name: "error", type: Error, mayBeNull: true},
        {name: "dataItems", type: Object, mayBeNull: true},
        {name: "response", type: Sys.Net.WebRequestExecutor}
    ]);
    if (e) throw e;
    Sys.WebForms.EndRequestEventArgs.initializeBase(this);
    this._errorHandled = false;
    this._error = error;
    this._dataItems = dataItems || new Object();
    this._response = response;
    function Sys$WebForms$EndRequestEventArgs$get_dataItems() {
        /// <value type="Object" locid="P:J#Sys.WebForms.EndRequestEventArgs.dataItems"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._dataItems;
    }
    function Sys$WebForms$EndRequestEventArgs$get_error() {
        /// <value type="Error" locid="P:J#Sys.WebForms.EndRequestEventArgs.error"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._error;
    }
    function Sys$WebForms$EndRequestEventArgs$get_errorHandled() {
        /// <value type="Boolean" locid="P:J#Sys.WebForms.EndRequestEventArgs.errorHandled"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._errorHandled;
    }
    function Sys$WebForms$EndRequestEventArgs$set_errorHandled(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: Boolean}]);
        if (e) throw e;
        this._errorHandled = value;
    }
    function Sys$WebForms$EndRequestEventArgs$get_response() {
        /// <value type="Sys.Net.WebRequestExecutor" locid="P:J#Sys.WebForms.EndRequestEventArgs.response"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._response;
    }
Sys.WebForms.EndRequestEventArgs.prototype = {
    get_dataItems: Sys$WebForms$EndRequestEventArgs$get_dataItems,
    get_error: Sys$WebForms$EndRequestEventArgs$get_error,
    get_errorHandled: Sys$WebForms$EndRequestEventArgs$get_errorHandled,
    set_errorHandled: Sys$WebForms$EndRequestEventArgs$set_errorHandled,
    get_response: Sys$WebForms$EndRequestEventArgs$get_response
Sys.WebForms.EndRequestEventArgs.registerClass('Sys.WebForms.EndRequestEventArgs', Sys.EventArgs);
Sys.WebForms.InitializeRequestEventArgs = function Sys$WebForms$InitializeRequestEventArgs(request, postBackElement) {
    /// <summary locid="M:J#Sys.WebForms.InitializeRequestEventArgs.#ctor" />
    /// <param name="request" type="Sys.Net.WebRequest"></param>
    /// <param name="postBackElement" domElement="true" mayBeNull="true"></param>
    var e = Function._validateParams(arguments, [
        {name: "request", type: Sys.Net.WebRequest},
        {name: "postBackElement", mayBeNull: true, domElement: true}
    ]);
    if (e) throw e;
    Sys.WebForms.InitializeRequestEventArgs.initializeBase(this);
    this._request = request;
    this._postBackElement = postBackElement;
    function Sys$WebForms$InitializeRequestEventArgs$get_postBackElement() {
        /// <value domElement="true" mayBeNull="true" locid="P:J#Sys.WebForms.InitializeRequestEventArgs.postBackElement"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._postBackElement;
    }
    function Sys$WebForms$InitializeRequestEventArgs$get_request() {
        /// <value type="Sys.Net.WebRequest" locid="P:J#Sys.WebForms.InitializeRequestEventArgs.request"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._request;
    }
Sys.WebForms.InitializeRequestEventArgs.prototype = {
    get_postBackElement: Sys$WebForms$InitializeRequestEventArgs$get_postBackElement,
    get_request: Sys$WebForms$InitializeRequestEventArgs$get_request
Sys.WebForms.InitializeRequestEventArgs.registerClass('Sys.WebForms.InitializeRequestEventArgs', Sys.CancelEventArgs);
Sys.WebForms.PageLoadedEventArgs = function Sys$WebForms$PageLoadedEventArgs(panelsUpdated, panelsCreated, dataItems) {
    /// <summary locid="M:J#Sys.WebForms.PageLoadedEventArgs.#ctor" />
    /// <param name="panelsUpdated" type="Array"></param>
    /// <param name="panelsCreated" type="Array"></param>
    /// <param name="dataItems" type="Object" mayBeNull="true"></param>
    var e = Function._validateParams(arguments, [
        {name: "panelsUpdated", type: Array},
        {name: "panelsCreated", type: Array},
        {name: "dataItems", type: Object, mayBeNull: true}
    ]);
    if (e) throw e;
    Sys.WebForms.PageLoadedEventArgs.initializeBase(this);
    this._panelsUpdated = panelsUpdated;
    this._panelsCreated = panelsCreated;
    this._dataItems = dataItems || new Object();
    function Sys$WebForms$PageLoadedEventArgs$get_dataItems() {
        /// <value type="Object" locid="P:J#Sys.WebForms.PageLoadedEventArgs.dataItems"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._dataItems;
    }
    function Sys$WebForms$PageLoadedEventArgs$get_panelsCreated() {
        /// <value type="Array" locid="P:J#Sys.WebForms.PageLoadedEventArgs.panelsCreated"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._panelsCreated;
    }
    function Sys$WebForms$PageLoadedEventArgs$get_panelsUpdated() {
        /// <value type="Array" locid="P:J#Sys.WebForms.PageLoadedEventArgs.panelsUpdated"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._panelsUpdated;
    }
Sys.WebForms.PageLoadedEventArgs.prototype = {
    get_dataItems: Sys$WebForms$PageLoadedEventArgs$get_dataItems,
    get_panelsCreated: Sys$WebForms$PageLoadedEventArgs$get_panelsCreated,
    get_panelsUpdated: Sys$WebForms$PageLoadedEventArgs$get_panelsUpdated
Sys.WebForms.PageLoadedEventArgs.registerClass('Sys.WebForms.PageLoadedEventArgs', Sys.EventArgs);
Sys.WebForms.PageLoadingEventArgs = function Sys$WebForms$PageLoadingEventArgs(panelsUpdating, panelsDeleting, dataItems) {
    /// <summary locid="M:J#Sys.WebForms.PageLoadingEventArgs.#ctor" />
    /// <param name="panelsUpdating" type="Array"></param>
    /// <param name="panelsDeleting" type="Array"></param>
    /// <param name="dataItems" type="Object" mayBeNull="true"></param>
    var e = Function._validateParams(arguments, [
        {name: "panelsUpdating", type: Array},
        {name: "panelsDeleting", type: Array},
        {name: "dataItems", type: Object, mayBeNull: true}
    ]);
    if (e) throw e;
    Sys.WebForms.PageLoadingEventArgs.initializeBase(this);
    this._panelsUpdating = panelsUpdating;
    this._panelsDeleting = panelsDeleting;
    this._dataItems = dataItems || new Object();
    function Sys$WebForms$PageLoadingEventArgs$get_dataItems() {
        /// <value type="Object" locid="P:J#Sys.WebForms.PageLoadingEventArgs.dataItems"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._dataItems;
    }
    function Sys$WebForms$PageLoadingEventArgs$get_panelsDeleting() {
        /// <value type="Array" locid="P:J#Sys.WebForms.PageLoadingEventArgs.panelsDeleting"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._panelsDeleting;
    }
    function Sys$WebForms$PageLoadingEventArgs$get_panelsUpdating() {
        /// <value type="Array" locid="P:J#Sys.WebForms.PageLoadingEventArgs.panelsUpdating"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._panelsUpdating;
    }
Sys.WebForms.PageLoadingEventArgs.prototype = {
    get_dataItems: Sys$WebForms$PageLoadingEventArgs$get_dataItems,
    get_panelsDeleting: Sys$WebForms$PageLoadingEventArgs$get_panelsDeleting,
    get_panelsUpdating: Sys$WebForms$PageLoadingEventArgs$get_panelsUpdating
Sys.WebForms.PageLoadingEventArgs.registerClass('Sys.WebForms.PageLoadingEventArgs', Sys.EventArgs);
Sys.WebForms.PageRequestManager = function Sys$WebForms$PageRequestManager() {
    this._form = null;
    this._activeDefaultButton = null;
    this._activeDefaultButtonClicked = false;
    this._updatePanelIDs = null;
    this._updatePanelClientIDs = null;
    this._updatePanelHasChildrenAsTriggers = null;
    this._asyncPostBackControlIDs = null;
    this._asyncPostBackControlClientIDs = null;
    this._postBackControlIDs = null;
    this._postBackControlClientIDs = null;
    this._scriptManagerID = null;
    this._pageLoadedHandler = null;
    this._additionalInput = null;
    this._onsubmit = null;
    this._onSubmitStatements = [];
    this._originalDoPostBack = null;
    this._originalDoPostBackWithOptions = null;
    this._originalFireDefaultButton = null;
    this._originalDoCallback = null;
    this._isCrossPost = false;
    this._postBackSettings = null;
    this._request = null;
    this._onFormSubmitHandler = null;
    this._onFormElementClickHandler = null;
    this._onWindowUnloadHandler = null;
    this._asyncPostBackTimeout = null;
    this._controlIDToFocus = null;
    this._scrollPosition = null;
    this._processingRequest = false;
    this._scriptDisposes = {};
    this._transientFields = ["__VIEWSTATEENCRYPTED", "__VIEWSTATEFIELDCOUNT"];
    function Sys$WebForms$PageRequestManager$_get_eventHandlerList() {
        if (!this._events) {
            this._events = new Sys.EventHandlerList();
        }
        return this._events;
    }
    function Sys$WebForms$PageRequestManager$get_isInAsyncPostBack() {
        /// <value type="Boolean" locid="P:J#Sys.WebForms.PageRequestManager.isInAsyncPostBack"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._request !== null;
    }
    function Sys$WebForms$PageRequestManager$add_beginRequest(handler) {
        /// <summary locid="E:J#Sys.WebForms.PageRequestManager.beginRequest" />
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this._get_eventHandlerList().addHandler("beginRequest", handler);
    }
    function Sys$WebForms$PageRequestManager$remove_beginRequest(handler) {
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this._get_eventHandlerList().removeHandler("beginRequest", handler);
    }
    function Sys$WebForms$PageRequestManager$add_endRequest(handler) {
        /// <summary locid="E:J#Sys.WebForms.PageRequestManager.endRequest" />
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this._get_eventHandlerList().addHandler("endRequest", handler);
    }
    function Sys$WebForms$PageRequestManager$remove_endRequest(handler) {
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this._get_eventHandlerList().removeHandler("endRequest", handler);
    }
    function Sys$WebForms$PageRequestManager$add_initializeRequest(handler) {
        /// <summary locid="E:J#Sys.WebForms.PageRequestManager.initializeRequest" />
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this._get_eventHandlerList().addHandler("initializeRequest", handler);
    }
    function Sys$WebForms$PageRequestManager$remove_initializeRequest(handler) {
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this._get_eventHandlerList().removeHandler("initializeRequest", handler);
    }
    function Sys$WebForms$PageRequestManager$add_pageLoaded(handler) {
        /// <summary locid="E:J#Sys.WebForms.PageRequestManager.pageLoaded" />
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this._get_eventHandlerList().addHandler("pageLoaded", handler);
    }
    function Sys$WebForms$PageRequestManager$remove_pageLoaded(handler) {
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this._get_eventHandlerList().removeHandler("pageLoaded", handler);
    }
    function Sys$WebForms$PageRequestManager$add_pageLoading(handler) {
        /// <summary locid="E:J#Sys.WebForms.PageRequestManager.pageLoading" />
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this._get_eventHandlerList().addHandler("pageLoading", handler);
    }
    function Sys$WebForms$PageRequestManager$remove_pageLoading(handler) {
        var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
        if (e) throw e;
        this._get_eventHandlerList().removeHandler("pageLoading", handler);
    }
    function Sys$WebForms$PageRequestManager$abortPostBack() {
        if (!this._processingRequest && this._request) {
            this._request.get_executor().abort();
            this._request = null;
        }
    }
    function Sys$WebForms$PageRequestManager$_cancelPendingCallbacks() {
        for (var i = 0, l = window.__pendingCallbacks.length; i < l; i++) {
            var callback = window.__pendingCallbacks[i];
            if (callback) {
                if (!callback.async) {
                    window.__synchronousCallBackIndex = -1;
                }
                window.__pendingCallbacks[i] = null;
                var callbackFrameID = "__CALLBACKFRAME" + i;
                var xmlRequestFrame = document.getElementById(callbackFrameID);
                if (xmlRequestFrame) {
                    xmlRequestFrame.parentNode.removeChild(xmlRequestFrame);
                }
            }
        }
    }
    function Sys$WebForms$PageRequestManager$_commitControls(updatePanelData, asyncPostBackTimeout) {
        if (updatePanelData) {
            this._updatePanelIDs = updatePanelData.updatePanelIDs;
            this._updatePanelClientIDs = updatePanelData.updatePanelClientIDs;
            this._updatePanelHasChildrenAsTriggers = updatePanelData.updatePanelHasChildrenAsTriggers;
            this._asyncPostBackControlIDs = updatePanelData.asyncPostBackControlIDs;
            this._asyncPostBackControlClientIDs = updatePanelData.asyncPostBackControlClientIDs;
            this._postBackControlIDs = updatePanelData.postBackControlIDs;
            this._postBackControlClientIDs = updatePanelData.postBackControlClientIDs;
        }
        if (typeof(asyncPostBackTimeout) !== 'undefined' && asyncPostBackTimeout !== null) {
            this._asyncPostBackTimeout = asyncPostBackTimeout * 1000;
        }
    }
    function Sys$WebForms$PageRequestManager$_createHiddenField(id, value) {
        var container, field = document.getElementById(id);
        if (field) {
            if (!field._isContained) {
                field.parentNode.removeChild(field);
            }
            else {
                container = field.parentNode;
            }
        }
        if (!container) {
            container = document.createElement('span');
            container.style.cssText = "display:none !important";
            this._form.appendChild(container);
        }
        container.innerHTML = "<input type='hidden' />";
        field = container.childNodes[0];
        field._isContained = true;
        field.id = field.name = id;
        field.value = value;
    }
    function Sys$WebForms$PageRequestManager$_createPageRequestManagerTimeoutError() {
        var displayMessage = "Sys.WebForms.PageRequestManagerTimeoutException: " + Sys.WebForms.Res.PRM_TimeoutError;
        var e = Error.create(displayMessage, {name: 'Sys.WebForms.PageRequestManagerTimeoutException'});
        e.popStackFrame();
        return e;
    }
    function Sys$WebForms$PageRequestManager$_createPageRequestManagerServerError(httpStatusCode, message) {
        var displayMessage = "Sys.WebForms.PageRequestManagerServerErrorException: " +
            (message || String.format(Sys.WebForms.Res.PRM_ServerError, httpStatusCode));
        var e = Error.create(displayMessage, {
            name: 'Sys.WebForms.PageRequestManagerServerErrorException',
            httpStatusCode: httpStatusCode
        });
        e.popStackFrame();
        return e;
    }
    function Sys$WebForms$PageRequestManager$_createPageRequestManagerParserError(parserErrorMessage) {
        var displayMessage = "Sys.WebForms.PageRequestManagerParserErrorException: " + String.format(Sys.WebForms.Res.PRM_ParserError, parserErrorMessage);
        var e = Error.create(displayMessage, {name: 'Sys.WebForms.PageRequestManagerParserErrorException'});
        e.popStackFrame();
        return e;
    }
    function Sys$WebForms$PageRequestManager$_createPostBackSettings(async, panelID, sourceElement) {
        return { async:async, panelID:panelID, sourceElement:sourceElement };
    }
    function Sys$WebForms$PageRequestManager$_convertToClientIDs(source, destinationIDs, destinationClientIDs) {
        if (source) {
            for (var i = 0, l = source.length; i < l; i++) {
                Array.add(destinationIDs, source[i]);
                Array.add(destinationClientIDs, this._uniqueIDToClientID(source[i]));
            }
        }
    }
    function Sys$WebForms$PageRequestManager$_destroyTree(element) {
        if (element.nodeType === 1) {
            var childNodes = element.childNodes;
            for (var i = childNodes.length - 1; i >= 0; i--) {
                var node = childNodes[i];
                if (node.nodeType === 1) {
                    if (node.dispose && typeof(node.dispose) === "function") {
                        node.dispose();
                    }
                    else if (node.control && typeof(node.control.dispose) === "function") {
                        node.control.dispose();
                    }
                    var behaviors = Sys.UI.Behavior.getBehaviors(node);
                    for (var j = behaviors.length - 1; j >= 0; j--) {
                        behaviors[j].dispose();
                    }
                    this._destroyTree(node);
                }
            }
        }
    }
    function Sys$WebForms$PageRequestManager$dispose() {
        if (this._form) {
            Sys.UI.DomEvent.removeHandler(this._form, 'submit', this._onFormSubmitHandler);
            Sys.UI.DomEvent.removeHandler(this._form, 'click', this._onFormElementClickHandler);
            Sys.UI.DomEvent.removeHandler(window, 'unload', this._onWindowUnloadHandler);
            Sys.UI.DomEvent.removeHandler(window, 'load', this._pageLoadedHandler);
        }
        if (this._originalDoPostBack) {
            window.__doPostBack = this._originalDoPostBack;
            this._originalDoPostBack = null;
        }
        if (this._originalDoPostBackWithOptions) {
            window.WebForm_DoPostBackWithOptions = this._originalDoPostBackWithOptions;
            this._originalDoPostBackWithOptions = null;
        }
        if (this._originalFireDefaultButton) {
            window.WebForm_FireDefaultButton = this._originalFireDefaultButton;
            this._originalFireDefaultButton = null;
        }
        if (this._originalDoCallback) {
            window.WebForm_DoCallback = this._originalDoCallback;
            this._originalDoCallback = null;
        }
        this._form = null;
        this._updatePanelIDs = null;
        this._updatePanelClientIDs = null;
        this._asyncPostBackControlIDs = null;
        this._asyncPostBackControlClientIDs = null;
        this._postBackControlIDs = null;
        this._postBackControlClientIDs = null;
        this._asyncPostBackTimeout = null;
        this._scrollPosition = null;
    }
    function Sys$WebForms$PageRequestManager$_doCallback(eventTarget, eventArgument, eventCallback, context, errorCallback, useAsync) {
        if (!this.get_isInAsyncPostBack()) {
            this._originalDoCallback(eventTarget, eventArgument, eventCallback, context, errorCallback, useAsync);
        }
    }
    function Sys$WebForms$PageRequestManager$_doPostBack(eventTarget, eventArgument) {
        this._additionalInput = null;
        var form = this._form;
        if ((eventTarget === null) || (typeof(eventTarget) === "undefined") || (this._isCrossPost)) {
            this._postBackSettings = this._createPostBackSettings(false, null, null);
            this._isCrossPost = false;
        }
        else {
            var clientID = this._uniqueIDToClientID(eventTarget);
            var postBackElement = document.getElementById(clientID);
            if (!postBackElement) {
                if (Array.contains(this._asyncPostBackControlIDs, eventTarget)) {
                    this._postBackSettings = this._createPostBackSettings(true, this._scriptManagerID + '|' + eventTarget, null);
                }
                else {
                    if (Array.contains(this._postBackControlIDs, eventTarget)) {
                        this._postBackSettings = this._createPostBackSettings(false, null, null);
                    }
                    else {
                        var nearestUniqueIDMatch = this._findNearestElement(eventTarget);
                        if (nearestUniqueIDMatch) {
                            this._postBackSettings = this._getPostBackSettings(nearestUniqueIDMatch, eventTarget);
                        }
                        else {
                            this._postBackSettings = this._createPostBackSettings(false, null, null);
                        }
                    }
                }
            }
            else {
                this._postBackSettings = this._getPostBackSettings(postBackElement, eventTarget);
            }
        }
        if (!this._postBackSettings.async) {
            form.onsubmit = this._onsubmit;
            this._originalDoPostBack(eventTarget, eventArgument);
            form.onsubmit = null;
            return;
        }
        form.__EVENTTARGET.value = eventTarget;
        form.__EVENTARGUMENT.value = eventArgument;
        this._onFormSubmit();
    }
    function Sys$WebForms$PageRequestManager$_doPostBackWithOptions(options) {
        this._isCrossPost = options && options.actionUrl;
        this._originalDoPostBackWithOptions(options);
    }
    function Sys$WebForms$PageRequestManager$_elementContains(container, element) {
        while (element) {
            if (element === container) {
                return true;
            }
            element = element.parentNode;
        }
        return false;
    }
    function Sys$WebForms$PageRequestManager$_endPostBack(error, executor, data) {
        if (this._request === executor.get_webRequest()) {
            this._processingRequest = false;
            this._additionalInput = null;
            this._request = null;
        }
        var handler = this._get_eventHandlerList().getHandler("endRequest");
        var errorHandled = false;
        if (handler) {
            var eventArgs = new Sys.WebForms.EndRequestEventArgs(error, data ? data.dataItems : {}, executor);
            handler(this, eventArgs);
            errorHandled = eventArgs.get_errorHandled();
        }
        if (error && !errorHandled) {
            throw error;
        }
    }
    function Sys$WebForms$PageRequestManager$_findNearestElement(uniqueID) {
        while (uniqueID.length > 0) {
            var clientID = this._uniqueIDToClientID(uniqueID);
            var element = document.getElementById(clientID);
            if (element) {
                return element;
            }
            var indexOfLastDollar = uniqueID.lastIndexOf('$');
            if (indexOfLastDollar === -1) {
                return null;
            }
            uniqueID = uniqueID.substring(0, indexOfLastDollar);
        }
        return null;
    }
    function Sys$WebForms$PageRequestManager$_findText(text, location) {
        var startIndex = Math.max(0, location - 20);
        var endIndex = Math.min(text.length, location + 20);
        return text.substring(startIndex, endIndex);
    }
    function Sys$WebForms$PageRequestManager$_fireDefaultButton(event, target) {
        if (event.keyCode === 13) {
            var src = event.srcElement || event.target;
            if (!src || (src.tagName.toLowerCase() !== "textarea")) {
                var defaultButton = document.getElementById(target);
                if (defaultButton && (typeof(defaultButton.click) !== "undefined")) {
                    
                    
                    this._activeDefaultButton = defaultButton;
                    this._activeDefaultButtonClicked = false;
                    try {
                        defaultButton.click();
                    }
                    finally {
                        this._activeDefaultButton = null;
                    }
                    
                    
                    event.cancelBubble = true;
                    if (typeof(event.stopPropagation) === "function") {
                        event.stopPropagation();
                    }
                    return false;
                }
            }
        }
        return true;
    }
    function Sys$WebForms$PageRequestManager$_getPageLoadedEventArgs(initialLoad, data) {
        var updated = [];
        var created = [];
        var upData = data ? data.updatePanelData : null;
        var newIDs, childIDs, refreshedIDs;
        if (!upData) {
            newIDs = this._updatePanelIDs;
            childIDs = null;
            refreshedIDs = null;
        }
        else {
            newIDs = upData.updatePanelIDs;
            childIDs = upData.childUpdatePanelIDs;
            refreshedIDs = upData.panelsToRefreshIDs;
        }
        var i, l;
        if (refreshedIDs) {
            for (i = 0, l = refreshedIDs.length; i < l; i++) {
                Array.add(updated, document.getElementById(this._uniqueIDToClientID(refreshedIDs[i])));
            }
        }
        for (i = 0, l = newIDs.length; i < l; i++) {
            if (initialLoad || Array.indexOf(childIDs, newIDs[i]) !== -1) {
                Array.add(created, document.getElementById(this._uniqueIDToClientID(newIDs[i])));
            }
        }
        return new Sys.WebForms.PageLoadedEventArgs(updated, created, data ? data.dataItems : {});
    }
    function Sys$WebForms$PageRequestManager$_getPageLoadingEventArgs(data) {
        var updated = [];
        var deleted = [];
        var upData = data.updatePanelData;
        var oldIDs = upData.oldUpdatePanelIDs;
        var newIDs = upData.updatePanelIDs;
        var childIDs = upData.childUpdatePanelIDs;
        var refreshedIDs = upData.panelsToRefreshIDs;
        var i, l;
        for (i = 0, l = refreshedIDs.length; i < l; i++) {
            Array.add(updated, document.getElementById(this._uniqueIDToClientID(refreshedIDs[i])));
        }
        for (i = 0, l = oldIDs.length; i < l; i++) {
            if (Array.indexOf(refreshedIDs, oldIDs[i]) === -1 &&
                (Array.indexOf(newIDs, oldIDs[i]) === -1 || Array.indexOf(childIDs, oldIDs[i]) > -1)) {
                Array.add(deleted, document.getElementById(this._uniqueIDToClientID(oldIDs[i])));
            }
        }
        return new Sys.WebForms.PageLoadingEventArgs(updated, deleted, data.dataItems);
    }
    function Sys$WebForms$PageRequestManager$_getPostBackSettings(element, elementUniqueID) {
        var originalElement = element;
        var proposedSettings = null;
        while (element) {
            if (element.id) {
                if (!proposedSettings && Array.contains(this._asyncPostBackControlClientIDs, element.id)) {
                    proposedSettings = this._createPostBackSettings(true, this._scriptManagerID + '|' + elementUniqueID, originalElement);
                }
                else {
                    if (!proposedSettings && Array.contains(this._postBackControlClientIDs, element.id)) {
                        return this._createPostBackSettings(false, null, null);
                    }
                    else {
                        var indexOfPanel = Array.indexOf(this._updatePanelClientIDs, element.id);
                        if (indexOfPanel !== -1) {
                            if (this._updatePanelHasChildrenAsTriggers[indexOfPanel]) {
                                return this._createPostBackSettings(true, this._updatePanelIDs[indexOfPanel] + '|' + elementUniqueID, originalElement);
                            }
                            else {
                                return this._createPostBackSettings(true, this._scriptManagerID + '|' + elementUniqueID, originalElement);
                            }
                        }
                    }
                }
                if (!proposedSettings && this._matchesParentIDInList(element.id, this._asyncPostBackControlClientIDs)) {
                    proposedSettings = this._createPostBackSettings(true, this._scriptManagerID + '|' + elementUniqueID, originalElement);
                }
                else {
                    if (!proposedSettings && this._matchesParentIDInList(element.id, this._postBackControlClientIDs)) {
                        return this._createPostBackSettings(false, null, null);
                    }
                }
            }
            element = element.parentNode;
        }
        if (!proposedSettings) {
            return this._createPostBackSettings(false, null, null);
        }
        else {
            return proposedSettings;
        }
    }
    function Sys$WebForms$PageRequestManager$_getScrollPosition() {
        var d = document.documentElement;
        if (d && (this._validPosition(d.scrollLeft) || this._validPosition(d.scrollTop))) {
            return {
                x: d.scrollLeft,
                y: d.scrollTop
            };
        }
        else {
            d = document.body;
            if (d && (this._validPosition(d.scrollLeft) || this._validPosition(d.scrollTop))) {
                return {
                    x: d.scrollLeft,
                    y: d.scrollTop
                };
            }
            else {
                if (this._validPosition(window.pageXOffset) || this._validPosition(window.pageYOffset)) {
                    return {
                        x: window.pageXOffset,
                        y: window.pageYOffset
                    };
                }
                else {
                    return {
                        x: 0,
                        y: 0
                    };
                }
            }
        }
    }
    function Sys$WebForms$PageRequestManager$_initializeInternal(scriptManagerID, formElement) {
        if (this._prmInitialized) {
            throw Error.invalidOperation(Sys.WebForms.Res.PRM_CannotRegisterTwice);
        }
        this._prmInitialized = true;
        this._scriptManagerID = scriptManagerID;
        this._form = formElement;
        this._onsubmit = this._form.onsubmit;
        this._form.onsubmit = null;
        this._onFormSubmitHandler = Function.createDelegate(this, this._onFormSubmit);
        this._onFormElementClickHandler = Function.createDelegate(this, this._onFormElementClick);
        this._onWindowUnloadHandler = Function.createDelegate(this, this._onWindowUnload);
        Sys.UI.DomEvent.addHandler(this._form, 'submit', this._onFormSubmitHandler);
        Sys.UI.DomEvent.addHandler(this._form, 'click', this._onFormElementClickHandler);
        Sys.UI.DomEvent.addHandler(window, 'unload', this._onWindowUnloadHandler);
        this._originalDoPostBack = window.__doPostBack;
        if (this._originalDoPostBack) {
            window.__doPostBack = Function.createDelegate(this, this._doPostBack);
        }
        this._originalDoPostBackWithOptions = window.WebForm_DoPostBackWithOptions;
        if (this._originalDoPostBackWithOptions) {
            window.WebForm_DoPostBackWithOptions = Function.createDelegate(this, this._doPostBackWithOptions);
        }
        this._originalFireDefaultButton = window.WebForm_FireDefaultButton;
        if (this._originalFireDefaultButton) {
            window.WebForm_FireDefaultButton = Function.createDelegate(this, this._fireDefaultButton);
        }
        this._originalDoCallback = window.WebForm_DoCallback;
        if (this._originalDoCallback) {
            window.WebForm_DoCallback = Function.createDelegate(this, this._doCallback);
        }
        this._pageLoadedHandler = Function.createDelegate(this, this._pageLoadedInitialLoad);
        Sys.UI.DomEvent.addHandler(window, 'load', this._pageLoadedHandler);
    }
    function Sys$WebForms$PageRequestManager$_matchesParentIDInList(clientID, parentIDList) {
        for (var i = 0, l = parentIDList.length; i < l; i++) {
            if (clientID.startsWith(parentIDList[i] + "_")) {
                return true;
            }
        }
        return false;
    }
    function Sys$WebForms$PageRequestManager$_onFormElementActive(element, offsetX, offsetY) {
        if (element.disabled) {
            return;
        }
        this._postBackSettings = this._getPostBackSettings(element, element.name);
        if (element.name) {
            var tagName = element.tagName.toUpperCase();
            if (tagName === 'INPUT') {
                var type = element.type;
                if (type === 'submit') {
                    this._additionalInput = encodeURIComponent(element.name) + '=' + encodeURIComponent(element.value);
                }
                else if (type === 'image') {
                    this._additionalInput = encodeURIComponent(element.name) + '.x=' + offsetX + '&' + encodeURIComponent(element.name) + '.y=' + offsetY;
                }
            }
            else if ((tagName === 'BUTTON') && (element.name.length !== 0) && (element.type === 'submit')) {
                this._additionalInput = encodeURIComponent(element.name) + '=' + encodeURIComponent(element.value);
            }
        }
    }
    function Sys$WebForms$PageRequestManager$_onFormElementClick(evt) {
        this._activeDefaultButtonClicked = (evt.target === this._activeDefaultButton);
        this._onFormElementActive(evt.target, evt.offsetX, evt.offsetY);
    }
    function Sys$WebForms$PageRequestManager$_onFormSubmit(evt) {
        var continueSubmit = true;
        var isCrossPost = this._isCrossPost;
        this._isCrossPost = false;
        var i, l;
        if (this._onsubmit) {
            continueSubmit = this._onsubmit();
        }
        if (continueSubmit) {
            for (i = 0, l = this._onSubmitStatements.length; i < l; i++) {
                if (!this._onSubmitStatements[i]()) {
                    continueSubmit = false;
                    break;
                }
            }
        }
        if (!continueSubmit) {
            if (evt) {
                evt.preventDefault();
            }
            return;
        }
        var form = this._form;
        if (isCrossPost) {
            return;
        }
        if (this._activeDefaultButton && !this._activeDefaultButtonClicked) {
            this._onFormElementActive(this._activeDefaultButton, 0, 0);
        }
        if (!this._postBackSettings.async) {
            return;
        }
        var formBody = new Sys.StringBuilder();
        formBody.append(encodeURIComponent(this._scriptManagerID) + '=' + encodeURIComponent(this._postBackSettings.panelID) + '&');
        var count = form.elements.length;
        for (i = 0; i < count; i++) {
            var element = form.elements[i];
            var name = element.name;
            if (typeof(name) === "undefined" || (name === null) || (name.length === 0) || (name === this._scriptManagerID)) {
                continue;
            }
            var tagName = element.tagName.toUpperCase();
            if (tagName === 'INPUT') {
                var type = element.type;
                if ((type === 'text') ||
                    (type === 'password') ||
                    (type === 'hidden') ||
                    (((type === 'checkbox') || (type === 'radio')) && element.checked)) {
                    formBody.append(encodeURIComponent(name));
                    formBody.append('=');
                    formBody.append(encodeURIComponent(element.value));
                    formBody.append('&');
                }
            }
            else if (tagName === 'SELECT') {
                var optionCount = element.options.length;
                for (var j = 0; j < optionCount; j++) {
                    var option = element.options[j];
                    if (option.selected) {
                        formBody.append(encodeURIComponent(name));
                        formBody.append('=');
                        formBody.append(encodeURIComponent(option.value));
                        formBody.append('&');
                    }
                }
            }
            else if (tagName === 'TEXTAREA') {
                formBody.append(encodeURIComponent(name));
                formBody.append('=');
                formBody.append(encodeURIComponent(element.value));
                formBody.append('&');
            }
        }
        formBody.append("__ASYNCPOST=true&");
        if (this._additionalInput) {
            formBody.append(this._additionalInput);
            this._additionalInput = null;
        }
        
        var request = new Sys.Net.WebRequest();
        var action = form.action;
        if (Sys.Browser.agent === Sys.Browser.InternetExplorer) {
            var fragmentIndex = action.indexOf('#');
            if (fragmentIndex !== -1) {
                action = action.substr(0, fragmentIndex);
            }
            var queryIndex = action.indexOf('?');
            if (queryIndex !== -1) {
                var path = action.substr(0, queryIndex);
                if (path.indexOf("%") === -1) {
                    action = encodeURI(path) + action.substr(queryIndex);
                }
            }
            else if (action.indexOf("%") === -1) {
                action = encodeURI(action);
            }
        }
        request.set_url(action);
        request.get_headers()['X-MicrosoftAjax'] = 'Delta=true';
        request.get_headers()['Cache-Control'] = 'no-cache';
        request.set_timeout(this._asyncPostBackTimeout);
        request.add_completed(Function.createDelegate(this, this._onFormSubmitCompleted));
        request.set_body(formBody.toString());
        var eventArgs, handler = this._get_eventHandlerList().getHandler("initializeRequest");
        if (handler) {
            eventArgs = new Sys.WebForms.InitializeRequestEventArgs(request, this._postBackSettings.sourceElement);
            handler(this, eventArgs);
            continueSubmit = !eventArgs.get_cancel();
        }
        if (!continueSubmit) {
            if (evt) {
                evt.preventDefault();
            }
            return;
        }
        this._scrollPosition = this._getScrollPosition();
        this.abortPostBack();
        handler = this._get_eventHandlerList().getHandler("beginRequest");
        if (handler) {
            eventArgs = new Sys.WebForms.BeginRequestEventArgs(request, this._postBackSettings.sourceElement);
            handler(this, eventArgs);
        }
        
        if (this._originalDoCallback) {
            this._cancelPendingCallbacks();
        }
        this._request = request;
        this._processingRequest = false;
        request.invoke();
        if (evt) {
            evt.preventDefault();
        }
    }
    function Sys$WebForms$PageRequestManager$_onFormSubmitCompleted(sender, eventArgs) {
        this._processingRequest = true;
        if (sender.get_timedOut()) {
            this._endPostBack(this._createPageRequestManagerTimeoutError(), sender, null);
            return;
        }
        if (sender.get_aborted()) {
            this._endPostBack(null, sender, null);
            return;
        }
        if (!this._request || (sender.get_webRequest() !== this._request)) {
            return;
        }
        if (sender.get_statusCode() !== 200) {
            this._endPostBack(this._createPageRequestManagerServerError(sender.get_statusCode()), sender, null);
            return;
        }
        var data = this._parseDelta(sender);
        if (!data) return;
        
        var i, l;
        if (data.asyncPostBackControlIDsNode && data.postBackControlIDsNode &&
            data.updatePanelIDsNode && data.panelsToRefreshNode && data.childUpdatePanelIDsNode) {
            
            var oldUpdatePanelIDs = this._updatePanelIDs;
            var childUpdatePanelIDsString = data.childUpdatePanelIDsNode.content;
            var childUpdatePanelIDs = childUpdatePanelIDsString.length ? childUpdatePanelIDsString.split(',') : [];
            var asyncPostBackControlIDsArray = this._splitNodeIntoArray(data.asyncPostBackControlIDsNode);
            var postBackControlIDsArray = this._splitNodeIntoArray(data.postBackControlIDsNode);
            var updatePanelIDsArray = this._splitNodeIntoArray(data.updatePanelIDsNode);
            var panelsToRefreshIDs = this._splitNodeIntoArray(data.panelsToRefreshNode);
            for (i = 0, l = panelsToRefreshIDs.length; i < l; i++) {
                var panelClientID = this._uniqueIDToClientID(panelsToRefreshIDs[i]);
                if (!document.getElementById(panelClientID)) {
                    this._endPostBack(Error.invalidOperation(String.format(Sys.WebForms.Res.PRM_MissingPanel, panelClientID)), sender, data);
                    return;
                }
            }
            
            var updatePanelData = this._processUpdatePanelArrays(
                updatePanelIDsArray,
                asyncPostBackControlIDsArray,
                postBackControlIDsArray);
            updatePanelData.oldUpdatePanelIDs = oldUpdatePanelIDs;
            updatePanelData.childUpdatePanelIDs = childUpdatePanelIDs;
            updatePanelData.panelsToRefreshIDs = panelsToRefreshIDs;
            data.updatePanelData = updatePanelData;
        }
        data.dataItems = {};
        var node;
        for (i = 0, l = data.dataItemNodes.length; i < l; i++) {
            node = data.dataItemNodes[i];
            data.dataItems[node.id] = node.content;
        }
        for (i = 0, l = data.dataItemJsonNodes.length; i < l; i++) {
            node = data.dataItemJsonNodes[i];
            data.dataItems[node.id] = Sys.Serialization.JavaScriptSerializer.deserialize(node.content);
        }
        var handler = this._get_eventHandlerList().getHandler("pageLoading");
        if (handler) {
            handler(this, this._getPageLoadingEventArgs(data));
        }
        
        Sys._ScriptLoader.readLoadedScripts();
        Sys.Application.beginCreateComponents();
        var scriptLoader = Sys._ScriptLoader.getInstance();
        this._queueScripts(scriptLoader, data.scriptBlockNodes, true, false);
        
        this._processingRequest = true;
        scriptLoader.loadScripts(0,
            Function.createDelegate(this, Function.createCallback(this._scriptIncludesLoadComplete, data)),
            Function.createDelegate(this, Function.createCallback(this._scriptIncludesLoadFailed, data)),
            null);        
    }
    function Sys$WebForms$PageRequestManager$_onWindowUnload(evt) {
        this.dispose();
    }
    function Sys$WebForms$PageRequestManager$_pageLoaded(initialLoad, data) {
        var handler = this._get_eventHandlerList().getHandler("pageLoaded");
        if (handler) {
            handler(this, this._getPageLoadedEventArgs(initialLoad, data));
        }
        if (!initialLoad) {
            Sys.Application.raiseLoad();
        }
    }
    function Sys$WebForms$PageRequestManager$_pageLoadedInitialLoad(evt) {
        this._pageLoaded(true, null);
    }
    function Sys$WebForms$PageRequestManager$_parseDelta(executor) {
        var reply = executor.get_responseData();
        var delimiterIndex, len, type, id, content;
        var replyIndex = 0;
        var parserErrorDetails = null;
        var delta = [];
        while (replyIndex < reply.length) {
            delimiterIndex = reply.indexOf('|', replyIndex);
            if (delimiterIndex === -1) {
                parserErrorDetails = this._findText(reply, replyIndex);
                break;
            }
            len = parseInt(reply.substring(replyIndex, delimiterIndex), 10);
            if ((len % 1) !== 0) {
                parserErrorDetails = this._findText(reply, replyIndex);
                break;
            }
            replyIndex = delimiterIndex + 1;
            delimiterIndex = reply.indexOf('|', replyIndex);
            if (delimiterIndex === -1) {
                parserErrorDetails = this._findText(reply, replyIndex);
                break;
            }
            type = reply.substring(replyIndex, delimiterIndex);
            replyIndex = delimiterIndex + 1;
            delimiterIndex = reply.indexOf('|', replyIndex);
            if (delimiterIndex === -1) {
                parserErrorDetails = this._findText(reply, replyIndex);
                break;
            }
            id = reply.substring(replyIndex, delimiterIndex);
            replyIndex = delimiterIndex + 1;
            if ((replyIndex + len) >= reply.length) {
                parserErrorDetails = this._findText(reply, reply.length);
                break;
            }
            content = reply.substr(replyIndex, len);
            replyIndex += len;
            if (reply.charAt(replyIndex) !== '|') {
                parserErrorDetails = this._findText(reply, replyIndex);
                break;
            }
            replyIndex++;
            Array.add(delta, {type: type, id: id, content: content});
        }
        if (parserErrorDetails) {
            this._endPostBack(this._createPageRequestManagerParserError(String.format(Sys.WebForms.Res.PRM_ParserErrorDetails, parserErrorDetails)), executor, null);
            return null;
        }
        var updatePanelNodes = [];
        var hiddenFieldNodes = [];
        var arrayDeclarationNodes = [];
        var scriptBlockNodes = [];
        var scriptStartupNodes = [];
        var expandoNodes = [];
        var onSubmitNodes = [];
        var dataItemNodes = [];
        var dataItemJsonNodes = [];
        var scriptDisposeNodes = [];
        var asyncPostBackControlIDsNode, postBackControlIDsNode,
            updatePanelIDsNode, asyncPostBackTimeoutNode,
            childUpdatePanelIDsNode, panelsToRefreshNode, formActionNode;
        for (var i = 0, l = delta.length; i < l; i++) {
            var deltaNode = delta[i];
            switch (deltaNode.type) {
                case "updatePanel":
                    Array.add(updatePanelNodes, deltaNode);
                    break;
                case "hiddenField":
                    Array.add(hiddenFieldNodes, deltaNode);
                    break;
                case "arrayDeclaration":
                    Array.add(arrayDeclarationNodes, deltaNode);
                    break;
                case "scriptBlock":
                    Array.add(scriptBlockNodes, deltaNode);
                    break;
                case "scriptStartupBlock":
                    Array.add(scriptStartupNodes, deltaNode);
                    break;
                case "expando":
                    Array.add(expandoNodes, deltaNode);
                    break;
                case "onSubmit":
                    Array.add(onSubmitNodes, deltaNode);
                    break;
                case "asyncPostBackControlIDs":
                    asyncPostBackControlIDsNode = deltaNode;
                    break;
                case "postBackControlIDs":
                    postBackControlIDsNode = deltaNode;
                    break;
                case "updatePanelIDs":
                    updatePanelIDsNode = deltaNode;
                    break;
                case "asyncPostBackTimeout":
                    asyncPostBackTimeoutNode = deltaNode;
                    break;
                case "childUpdatePanelIDs":
                    childUpdatePanelIDsNode = deltaNode;
                    break;
                case "panelsToRefreshIDs":
                    panelsToRefreshNode = deltaNode;
                    break;
                case "formAction":
                    formActionNode = deltaNode;
                    break;
                case "dataItem":
                    Array.add(dataItemNodes, deltaNode);
                    break;
                case "dataItemJson":
                    Array.add(dataItemJsonNodes, deltaNode);
                    break;
                case "scriptDispose":
                    Array.add(scriptDisposeNodes, deltaNode);
                    break;
                case "pageRedirect":
                    if (Sys.Browser.agent === Sys.Browser.InternetExplorer) {
                        var anchor = document.createElement("a");
                        anchor.style.display = 'none';
                        anchor.attachEvent("onclick", cancelBubble);
                        anchor.href = deltaNode.content;
                        this._form.parentNode.insertBefore(anchor, this._form);
                        anchor.click();
                        anchor.detachEvent("onclick", cancelBubble);
                        this._form.parentNode.removeChild(anchor);
                        
                        function cancelBubble(e) {
                            e.cancelBubble = true;
                        }
                    }
                    else {
                        window.location.href = deltaNode.content;
                    }
                    return;
                case "error":
                    this._endPostBack(this._createPageRequestManagerServerError(Number.parseInvariant(deltaNode.id), deltaNode.content), executor, null);
                    return null;
                case "pageTitle":
                    document.title = deltaNode.content;
                    break;
                case "focus":
                    this._controlIDToFocus = deltaNode.content;
                    break;
                default:
                    this._endPostBack(this._createPageRequestManagerParserError(String.format(Sys.WebForms.Res.PRM_UnknownToken, deltaNode.type)), executor, null);
                    return null;
            } 
        } 
        return {
            executor: executor,
            updatePanelNodes: updatePanelNodes,
            hiddenFieldNodes: hiddenFieldNodes,
            arrayDeclarationNodes: arrayDeclarationNodes,
            scriptBlockNodes: scriptBlockNodes,
            scriptStartupNodes: scriptStartupNodes,
            expandoNodes: expandoNodes,
            onSubmitNodes: onSubmitNodes,
            dataItemNodes: dataItemNodes,
            dataItemJsonNodes: dataItemJsonNodes,
            scriptDisposeNodes: scriptDisposeNodes,
            asyncPostBackControlIDsNode: asyncPostBackControlIDsNode,
            postBackControlIDsNode: postBackControlIDsNode,
            updatePanelIDsNode: updatePanelIDsNode,
            asyncPostBackTimeoutNode: asyncPostBackTimeoutNode,
            childUpdatePanelIDsNode: childUpdatePanelIDsNode,
            panelsToRefreshNode: panelsToRefreshNode,
            formActionNode: formActionNode };
    }
    function Sys$WebForms$PageRequestManager$_processUpdatePanelArrays(updatePanelIDs, asyncPostBackControlIDs, postBackControlIDs) {
        var newUpdatePanelIDs;
        var newUpdatePanelClientIDs;
        var newUpdatePanelHasChildrenAsTriggers;
        
        if (updatePanelIDs) {
            var l = updatePanelIDs.length;
            newUpdatePanelIDs = new Array(l);
            newUpdatePanelClientIDs = new Array(l);
            newUpdatePanelHasChildrenAsTriggers = new Array(l);
            
            for (var i = 0; i < l; i++) {
                var realPanelID = updatePanelIDs[i].substr(1);
                var childrenAsTriggers = (updatePanelIDs[i].charAt(0) === 't');
                newUpdatePanelHasChildrenAsTriggers[i] = childrenAsTriggers;
                newUpdatePanelIDs[i] = realPanelID;
                newUpdatePanelClientIDs[i] = this._uniqueIDToClientID(realPanelID);
            }
        }
        else {
            newUpdatePanelIDs = [];
            newUpdatePanelClientIDs = [];
            newUpdatePanelHasChildrenAsTriggers = [];
        }
        var newAsyncPostBackControlIDs = [];
        var newAsyncPostBackControlClientIDs = [];
        this._convertToClientIDs(asyncPostBackControlIDs, newAsyncPostBackControlIDs, newAsyncPostBackControlClientIDs);
        var newPostBackControlIDs = [];
        var newPostBackControlClientIDs = [];
        this._convertToClientIDs(postBackControlIDs, newPostBackControlIDs, newPostBackControlClientIDs);
        
        return {
            updatePanelIDs: newUpdatePanelIDs,
            updatePanelClientIDs: newUpdatePanelClientIDs,
            updatePanelHasChildrenAsTriggers: newUpdatePanelHasChildrenAsTriggers,
            asyncPostBackControlIDs: newAsyncPostBackControlIDs,
            asyncPostBackControlClientIDs: newAsyncPostBackControlClientIDs,
            postBackControlIDs: newPostBackControlIDs,
            postBackControlClientIDs: newPostBackControlClientIDs
        };
    }
    function Sys$WebForms$PageRequestManager$_queueScripts(scriptLoader, scriptBlockNodes, queueIncludes, queueBlocks) {
        
        for (var i = 0, l = scriptBlockNodes.length; i < l; i++) {
            var scriptBlockType = scriptBlockNodes[i].id;
            switch (scriptBlockType) {
                case "ScriptContentNoTags":
                    if (!queueBlocks) {
                        continue;
                    }
                    scriptLoader.queueScriptBlock(scriptBlockNodes[i].content);
                    break;
                case "ScriptContentWithTags":
                    var scriptTagAttributes;
                    eval("scriptTagAttributes = " + scriptBlockNodes[i].content);
                    if (scriptTagAttributes.src) {
                        if (!queueIncludes || Sys._ScriptLoader.isScriptLoaded(scriptTagAttributes.src)) {
                            continue;
                        }
                    }
                    else if (!queueBlocks) {
                        continue;
                    }
                    scriptLoader.queueCustomScriptTag(scriptTagAttributes);
                    break;
                case "ScriptPath":
                    if (!queueIncludes || Sys._ScriptLoader.isScriptLoaded(scriptBlockNodes[i].content)) {
                        continue;
                    }
                    scriptLoader.queueScriptReference(scriptBlockNodes[i].content);
                    break;
            }
        }        
    }
    function Sys$WebForms$PageRequestManager$_registerDisposeScript(panelID, disposeScript) {
        if (!this._scriptDisposes[panelID]) {
            this._scriptDisposes[panelID] = [disposeScript];
        }
        else {
            Array.add(this._scriptDisposes[panelID], disposeScript);
        }
    }
    function Sys$WebForms$PageRequestManager$_scriptIncludesLoadComplete(scriptLoader, data) {
        
        
        if (data.executor.get_webRequest() !== this._request) {
            return;
        }
        
        this._commitControls(data.updatePanelData,
            data.asyncPostBackTimeoutNode ? data.asyncPostBackTimeoutNode.content : null);
        if (data.formActionNode) {
            this._form.action = data.formActionNode.content;
        }
        
        var i, l, node;
        for (i = 0, l = data.updatePanelNodes.length; i < l; i++) {
            node = data.updatePanelNodes[i];
            var updatePanelElement = document.getElementById(node.id);
            if (!updatePanelElement) {
                this._endPostBack(Error.invalidOperation(String.format(Sys.WebForms.Res.PRM_MissingPanel, node.id)), data.executor, data);
                return;
            }
            this._updatePanel(updatePanelElement, node.content);
        }
        for (i = 0, l = data.scriptDisposeNodes.length; i < l; i++) {
            node = data.scriptDisposeNodes[i];
            this._registerDisposeScript(node.id, node.content);
        }
        for (i = 0, l = this._transientFields.length; i < l; i++) {
            var field = document.getElementById(this._transientFields[i]);
            if (field) {
                var toRemove = field._isContained ? field.parentNode : field;
                toRemove.parentNode.removeChild(toRemove);
            }
        }
        for (i = 0, l = data.hiddenFieldNodes.length; i < l; i++) {
            node = data.hiddenFieldNodes[i];
            this._createHiddenField(node.id, node.content);
        }
        
        if (data.scriptsFailed) {
            throw Sys._ScriptLoader._errorScriptLoadFailed(data.scriptsFailed.src, data.scriptsFailed.multipleCallbacks);
        }
        
        this._queueScripts(scriptLoader, data.scriptBlockNodes, false, true);
        var arrayScript = '';
        for (i = 0, l = data.arrayDeclarationNodes.length; i < l; i++) {
            node = data.arrayDeclarationNodes[i];
            arrayScript += "Sys.WebForms.PageRequestManager._addArrayElement('" + node.id + "', " + node.content + ");\r\n";
        }
        var expandoScript = '';
        for (i = 0, l = data.expandoNodes.length; i < l; i++) {
            node = data.expandoNodes[i];
            expandoScript += node.id + " = " + node.content + "\r\n";
        }
        if (arrayScript.length) {
            scriptLoader.queueScriptBlock(arrayScript);
        }
        if (expandoScript.length) {
            scriptLoader.queueScriptBlock(expandoScript);
        }
        
        this._queueScripts(scriptLoader, data.scriptStartupNodes, true, true);
        var onSubmitStatementScript = '';
        for (i = 0, l = data.onSubmitNodes.length; i < l; i++) {
            if (i === 0) {
                onSubmitStatementScript = 'Array.add(Sys.WebForms.PageRequestManager.getInstance()._onSubmitStatements, function() {\r\n';
            }
            onSubmitStatementScript += data.onSubmitNodes[i].content + "\r\n";
        }
        if (onSubmitStatementScript.length) {
            onSubmitStatementScript += "\r\nreturn true;\r\n});\r\n";
            scriptLoader.queueScriptBlock(onSubmitStatementScript);
        }
        scriptLoader.loadScripts(0,
            Function.createDelegate(this, Function.createCallback(this._scriptsLoadComplete, data)), null, null);
    }
    function Sys$WebForms$PageRequestManager$_scriptIncludesLoadFailed(scriptLoader, scriptElement, multipleCallbacks, data) {
        data.scriptsFailed = { src: scriptElement.src, multipleCallbacks: multipleCallbacks };
        this._scriptIncludesLoadComplete(scriptLoader, data);
    }
    function Sys$WebForms$PageRequestManager$_scriptsLoadComplete(scriptLoader, data) {
        
        
        var response = data.executor;
        if (window.__theFormPostData) {
            window.__theFormPostData = "";
        }
        if (window.__theFormPostCollection) {
            window.__theFormPostCollection = [];
        }
        if (window.WebForm_InitCallback) {
            window.WebForm_InitCallback();
        }
        if (this._scrollPosition) {
            if (window.scrollTo) {
                window.scrollTo(this._scrollPosition.x, this._scrollPosition.y);
            }
            this._scrollPosition = null;
        }
        Sys.Application.endCreateComponents();
        this._pageLoaded(false, data);
        this._endPostBack(null, response, data);
        if (this._controlIDToFocus) {
            var focusTarget;
            var oldContentEditableSetting;
            if (Sys.Browser.agent === Sys.Browser.InternetExplorer) {
                var targetControl = $get(this._controlIDToFocus);
                focusTarget = targetControl;
                if (targetControl && (!WebForm_CanFocus(targetControl))) {
                    focusTarget = WebForm_FindFirstFocusableChild(targetControl);
                }
                if (focusTarget && (typeof(focusTarget.contentEditable) !== "undefined")) {
                    oldContentEditableSetting = focusTarget.contentEditable;
                    focusTarget.contentEditable = false;
                }
                else {
                    focusTarget = null;
                }
            }
            WebForm_AutoFocus(this._controlIDToFocus);
            if (focusTarget) {
                focusTarget.contentEditable = oldContentEditableSetting;
            }
            this._controlIDToFocus = null;
        }
    }
    function Sys$WebForms$PageRequestManager$_splitNodeIntoArray(node) {
        var str = node.content;
        var arr = str.length ? str.split(',') : [];
        return arr;
    }
    function Sys$WebForms$PageRequestManager$_uniqueIDToClientID(uniqueID) {
        return uniqueID.replace(/\$/g, '_');
    }
    function Sys$WebForms$PageRequestManager$_updateControls(updatePanelIDs, asyncPostBackControlIDs, postBackControlIDs, asyncPostBackTimeout) {
        this._commitControls(
            this._processUpdatePanelArrays(updatePanelIDs, asyncPostBackControlIDs, postBackControlIDs),
            asyncPostBackTimeout);
    }
    function Sys$WebForms$PageRequestManager$_updatePanel(updatePanelElement, rendering) {
        for (var updatePanelID in this._scriptDisposes) {
            if (this._elementContains(updatePanelElement, document.getElementById(updatePanelID))) {
                var disposeScripts = this._scriptDisposes[updatePanelID];
                for (var i = 0, l = disposeScripts.length; i < l; i++) {
                    eval(disposeScripts[i]);
                }
                delete this._scriptDisposes[updatePanelID];
            }
        }
        this._destroyTree(updatePanelElement);
        updatePanelElement.innerHTML = rendering;
    }
    function Sys$WebForms$PageRequestManager$_validPosition(position) {
        return (typeof(position) !== "undefined") && (position !== null) && (position !== 0);
    }
Sys.WebForms.PageRequestManager.prototype = {
    _get_eventHandlerList: Sys$WebForms$PageRequestManager$_get_eventHandlerList,
    get_isInAsyncPostBack: Sys$WebForms$PageRequestManager$get_isInAsyncPostBack,
    add_beginRequest: Sys$WebForms$PageRequestManager$add_beginRequest,
    remove_beginRequest: Sys$WebForms$PageRequestManager$remove_beginRequest,
    add_endRequest: Sys$WebForms$PageRequestManager$add_endRequest,
    remove_endRequest: Sys$WebForms$PageRequestManager$remove_endRequest,
    add_initializeRequest: Sys$WebForms$PageRequestManager$add_initializeRequest,
    remove_initializeRequest: Sys$WebForms$PageRequestManager$remove_initializeRequest,
    add_pageLoaded: Sys$WebForms$PageRequestManager$add_pageLoaded,
    remove_pageLoaded: Sys$WebForms$PageRequestManager$remove_pageLoaded,
    add_pageLoading: Sys$WebForms$PageRequestManager$add_pageLoading,
    remove_pageLoading: Sys$WebForms$PageRequestManager$remove_pageLoading,
    abortPostBack: Sys$WebForms$PageRequestManager$abortPostBack,
    _cancelPendingCallbacks: Sys$WebForms$PageRequestManager$_cancelPendingCallbacks,
    _commitControls: Sys$WebForms$PageRequestManager$_commitControls,
    _createHiddenField: Sys$WebForms$PageRequestManager$_createHiddenField,
    _createPageRequestManagerTimeoutError: Sys$WebForms$PageRequestManager$_createPageRequestManagerTimeoutError,
    _createPageRequestManagerServerError: Sys$WebForms$PageRequestManager$_createPageRequestManagerServerError,
    _createPageRequestManagerParserError: Sys$WebForms$PageRequestManager$_createPageRequestManagerParserError,
    _createPostBackSettings: Sys$WebForms$PageRequestManager$_createPostBackSettings,
    _convertToClientIDs: Sys$WebForms$PageRequestManager$_convertToClientIDs,
    _destroyTree: Sys$WebForms$PageRequestManager$_destroyTree,
    dispose: Sys$WebForms$PageRequestManager$dispose,
    _doCallback: Sys$WebForms$PageRequestManager$_doCallback,
    _doPostBack: Sys$WebForms$PageRequestManager$_doPostBack,
    _doPostBackWithOptions: Sys$WebForms$PageRequestManager$_doPostBackWithOptions,
    _elementContains: Sys$WebForms$PageRequestManager$_elementContains,
    _endPostBack: Sys$WebForms$PageRequestManager$_endPostBack,
    _findNearestElement: Sys$WebForms$PageRequestManager$_findNearestElement,
    _findText: Sys$WebForms$PageRequestManager$_findText,
    _fireDefaultButton: Sys$WebForms$PageRequestManager$_fireDefaultButton,
    _getPageLoadedEventArgs: Sys$WebForms$PageRequestManager$_getPageLoadedEventArgs,
    _getPageLoadingEventArgs: Sys$WebForms$PageRequestManager$_getPageLoadingEventArgs,
    _getPostBackSettings: Sys$WebForms$PageRequestManager$_getPostBackSettings,
    _getScrollPosition: Sys$WebForms$PageRequestManager$_getScrollPosition,
    _initializeInternal: Sys$WebForms$PageRequestManager$_initializeInternal,
    _matchesParentIDInList: Sys$WebForms$PageRequestManager$_matchesParentIDInList,
    _onFormElementActive: Sys$WebForms$PageRequestManager$_onFormElementActive,
    _onFormElementClick: Sys$WebForms$PageRequestManager$_onFormElementClick,
    _onFormSubmit: Sys$WebForms$PageRequestManager$_onFormSubmit,
    _onFormSubmitCompleted: Sys$WebForms$PageRequestManager$_onFormSubmitCompleted,
    _onWindowUnload: Sys$WebForms$PageRequestManager$_onWindowUnload,
    _pageLoaded: Sys$WebForms$PageRequestManager$_pageLoaded,
    _pageLoadedInitialLoad: Sys$WebForms$PageRequestManager$_pageLoadedInitialLoad,
    _parseDelta: Sys$WebForms$PageRequestManager$_parseDelta,
    _processUpdatePanelArrays: Sys$WebForms$PageRequestManager$_processUpdatePanelArrays,
    _queueScripts: Sys$WebForms$PageRequestManager$_queueScripts,
    _registerDisposeScript: Sys$WebForms$PageRequestManager$_registerDisposeScript,
    _scriptIncludesLoadComplete: Sys$WebForms$PageRequestManager$_scriptIncludesLoadComplete,
    _scriptIncludesLoadFailed: Sys$WebForms$PageRequestManager$_scriptIncludesLoadFailed,
    _scriptsLoadComplete: Sys$WebForms$PageRequestManager$_scriptsLoadComplete,
    _splitNodeIntoArray: Sys$WebForms$PageRequestManager$_splitNodeIntoArray,
    _uniqueIDToClientID: Sys$WebForms$PageRequestManager$_uniqueIDToClientID,
    _updateControls: Sys$WebForms$PageRequestManager$_updateControls,
    _updatePanel: Sys$WebForms$PageRequestManager$_updatePanel,
    _validPosition: Sys$WebForms$PageRequestManager$_validPosition
Sys.WebForms.PageRequestManager.getInstance = function Sys$WebForms$PageRequestManager$getInstance() {
    /// <summary locid="M:J#Sys.WebForms.PageRequestManager.getInstance" />
    /// <returns type="Sys.WebForms.PageRequestManager"></returns>
    if (arguments.length !== 0) throw Error.parameterCount();
    var prm = Sys.WebForms.PageRequestManager._instance;
    if (!prm) {
        prm = Sys.WebForms.PageRequestManager._instance = new Sys.WebForms.PageRequestManager();
    }
    return prm;
Sys.WebForms.PageRequestManager._addArrayElement = function Sys$WebForms$PageRequestManager$_addArrayElement(arrayName) {
    if (!window[arrayName]) {
        window[arrayName] = new Array();
    }
    for (var i = 1, l = arguments.length; i < l; i++) {
        Array.add(window[arrayName], arguments[i]);
    }
Sys.WebForms.PageRequestManager._initialize = function Sys$WebForms$PageRequestManager$_initialize(scriptManagerID, formElement) {
    Sys.WebForms.PageRequestManager.getInstance()._initializeInternal(scriptManagerID, formElement);
Sys.WebForms.PageRequestManager.registerClass('Sys.WebForms.PageRequestManager');
Sys.UI._UpdateProgress = function Sys$UI$_UpdateProgress(element) {
    Sys.UI._UpdateProgress.initializeBase(this,[element]);
    this._displayAfter = 500;
    this._dynamicLayout = true;
    this._associatedUpdatePanelId = null;
    this._beginRequestHandlerDelegate = null;
    this._startDelegate = null;
    this._endRequestHandlerDelegate = null;
    this._pageRequestManager = null;
    this._timerCookie = null;
    function Sys$UI$_UpdateProgress$get_displayAfter() {
        /// <value type="Number" locid="P:J#Sys.UI._UpdateProgress.displayAfter"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._displayAfter;
    }
    function Sys$UI$_UpdateProgress$set_displayAfter(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: Number}]);
        if (e) throw e;
        this._displayAfter = value;
    }
    function Sys$UI$_UpdateProgress$get_dynamicLayout() {
        /// <value type="Boolean" locid="P:J#Sys.UI._UpdateProgress.dynamicLayout"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._dynamicLayout;
    }
    function Sys$UI$_UpdateProgress$set_dynamicLayout(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: Boolean}]);
        if (e) throw e;
        this._dynamicLayout = value;
    }
    function Sys$UI$_UpdateProgress$get_associatedUpdatePanelId() {
        /// <value type="String" mayBeNull="true" locid="P:J#Sys.UI._UpdateProgress.associatedUpdatePanelId"></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._associatedUpdatePanelId;
    }
    function Sys$UI$_UpdateProgress$set_associatedUpdatePanelId(value) {
        var e = Function._validateParams(arguments, [{name: "value", type: String, mayBeNull: true}]);
        if (e) throw e;
        this._associatedUpdatePanelId = value;
    }
    function Sys$UI$_UpdateProgress$_clearTimeout() {
        if (this._timerCookie) {
            window.clearTimeout(this._timerCookie);
            this._timerCookie = null;
        }
    }
    function Sys$UI$_UpdateProgress$_handleBeginRequest(sender, arg) {
        var curElem = arg.get_postBackElement();
        var showProgress = !this._associatedUpdatePanelId; 
        while (!showProgress && curElem) {
            if (curElem.id && this._associatedUpdatePanelId === curElem.id) {
                showProgress = true; 
            }
            curElem = curElem.parentNode; 
        } 
        if (showProgress) {
            this._timerCookie = window.setTimeout(this._startDelegate, this._displayAfter);
        }
    }
    function Sys$UI$_UpdateProgress$_startRequest() {
        if (this._pageRequestManager.get_isInAsyncPostBack()) {
            if (this._dynamicLayout) this.get_element().style.display = 'block';
            else this.get_element().style.visibility = 'visible';
        }
        this._timerCookie = null;
    }
    function Sys$UI$_UpdateProgress$_handleEndRequest(sender, arg) {
        if (this._dynamicLayout) this.get_element().style.display = 'none';
        else this.get_element().style.visibility = 'hidden';
        this._clearTimeout();
    }
    function Sys$UI$_UpdateProgress$dispose() {
        if (this._beginRequestHandlerDelegate !== null) {
            this._pageRequestManager.remove_beginRequest(this._beginRequestHandlerDelegate);
            this._pageRequestManager.remove_endRequest(this._endRequestHandlerDelegate);
            this._beginRequestHandlerDelegate = null;
            this._endRequestHandlerDelegate = null;
        }
        this._clearTimeout();
        Sys.UI._UpdateProgress.callBaseMethod(this,"dispose");
    }
    function Sys$UI$_UpdateProgress$initialize() {
        Sys.UI._UpdateProgress.callBaseMethod(this, 'initialize');
this._beginRequestHandlerDelegate = Function.createDelegate(this, this._handleBeginRequest);
this._endRequestHandlerDelegate = Function.createDelegate(this, this._handleEndRequest);
this._startDelegate = Function.createDelegate(this, this._startRequest);
if (Sys.WebForms && Sys.WebForms.PageRequestManager) {
           this._pageRequestManager = Sys.WebForms.PageRequestManager.getInstance();
if (this._pageRequestManager !== null ) {
    this._pageRequestManager.add_beginRequest(this._beginRequestHandlerDelegate);
    this._pageRequestManager.add_endRequest(this._endRequestHandlerDelegate);
    }
Sys.UI._UpdateProgress.prototype = {
    get_displayAfter: Sys$UI$_UpdateProgress$get_displayAfter,
    set_displayAfter: Sys$UI$_UpdateProgress$set_displayAfter,
    get_dynamicLayout: Sys$UI$_UpdateProgress$get_dynamicLayout,
    set_dynamicLayout: Sys$UI$_UpdateProgress$set_dynamicLayout,
    get_associatedUpdatePanelId: Sys$UI$_UpdateProgress$get_associatedUpdatePanelId,
    set_associatedUpdatePanelId: Sys$UI$_UpdateProgress$set_associatedUpdatePanelId,
    _clearTimeout: Sys$UI$_UpdateProgress$_clearTimeout,
    _handleBeginRequest: Sys$UI$_UpdateProgress$_handleBeginRequest,
    _startRequest: Sys$UI$_UpdateProgress$_startRequest,
    _handleEndRequest: Sys$UI$_UpdateProgress$_handleEndRequest,
    dispose: Sys$UI$_UpdateProgress$dispose,
    initialize: Sys$UI$_UpdateProgress$initialize
Sys.UI._UpdateProgress.registerClass('Sys.UI._UpdateProgress', Sys.UI.Control);
//----------------------------------------------------------
// Copyright (C) Microsoft Corporation. All rights reserved.
//----------------------------------------------------------
// MicrosoftAjax.js
Function.__typeName="Function";Function.__class=true;Function.createCallback=function(b,a){return function(){var e=arguments.length;if(e>0){var d=[];for(var c=0;c<e;c++)d[c]=arguments[c];d[e]=a;return b.apply(this,d)}return b.call(this,a)}};Function.createDelegate=function(a,b){return function(){return b.apply(a,arguments)}};Function.emptyFunction=Function.emptyMethod=function(){};Function._validateParams=function(e,c){var a;a=Function._validateParameterCount(e,c);if(a){a.popStackFrame();return a}for(var b=0;b<e.length;b++){var d=c[Math.min(b,c.length-1)],f=d.name;if(d.parameterArray)f+="["+(b-c.length+1)+"]";a=Function._validateParameter(e[b],d,f);if(a){a.popStackFrame();return a}}return null};Function._validateParameterCount=function(e,a){var c=a.length,d=0;for(var b=0;b<a.length;b++)if(a[b].parameterArray)c=Number.MAX_VALUE;else if(!a[b].optional)d++;if(e.length<d||e.length>c){var f=Error.parameterCount();f.popStackFrame();return f}return null};Function._validateParameter=function(c,a,h){var b,g=a.type,l=!!a.integer,k=!!a.domElement,m=!!a.mayBeNull;b=Function._validateParameterType(c,g,l,k,m,h);if(b){b.popStackFrame();return b}var e=a.elementType,f=!!a.elementMayBeNull;if(g===Array&&typeof c!=="undefined"&&c!==null&&(e||!f)){var j=!!a.elementInteger,i=!!a.elementDomElement;for(var d=0;d<c.length;d++){var n=c[d];b=Function._validateParameterType(n,e,j,i,f,h+"["+d+"]");if(b){b.popStackFrame();return b}}}return null};Function._validateParameterType=function(a,c,n,m,k,d){var b;if(typeof a==="undefined")if(k)return null;else{b=Error.argumentUndefined(d);b.popStackFrame();return b}if(a===null)if(k)return null;else{b=Error.argumentNull(d);b.popStackFrame();return b}if(c&&c.__enum){if(typeof a!=="number"){b=Error.argumentType(d,Object.getType(a),c);b.popStackFrame();return b}if(a%1===0){var e=c.prototype;if(!c.__flags||a===0){for(var i in e)if(e[i]===a)return null}else{var l=a;for(var i in e){var f=e[i];if(f===0)continue;if((f&a)===f)l-=f;if(l===0)return null}}}b=Error.argumentOutOfRange(d,a,String.format(Sys.Res.enumInvalidValue,a,c.getName()));b.popStackFrame();return b}if(m){var h;if(typeof a.nodeType!=="number"){var g=a.ownerDocument||a.document||a;if(g!=a){var j=g.defaultView||g.parentWindow;h=j!=a&&!(j.document&&a.document&&j.document===a.document)}else h=typeof g.body==="undefined"}else h=a.nodeType===3;if(h){b=Error.argument(d,Sys.Res.argumentDomElement);b.popStackFrame();return b}}if(c&&!c.isInstanceOfType(a)){b=Error.argumentType(d,Object.getType(a),c);b.popStackFrame();return b}if(c===Number&&n)if(a%1!==0){b=Error.argumentOutOfRange(d,a,Sys.Res.argumentInteger);b.popStackFrame();return b}return null};Error.__typeName="Error";Error.__class=true;Error.create=function(d,b){var a=new Error(d);a.message=d;if(b)for(var c in b)a[c]=b[c];a.popStackFrame();return a};Error.argument=function(a,c){var b="Sys.ArgumentException: "+(c?c:Sys.Res.argument);if(a)b+="\n"+String.format(Sys.Res.paramName,a);var d=Error.create(b,{name:"Sys.ArgumentException",paramName:a});d.popStackFrame();return d};Error.argumentNull=function(a,c){var b="Sys.ArgumentNullException: "+(c?c:Sys.Res.argumentNull);if(a)b+="\n"+String.format(Sys.Res.paramName,a);var d=Error.create(b,{name:"Sys.ArgumentNullException",paramName:a});d.popStackFrame();return d};Error.argumentOutOfRange=function(c,a,d){var b="Sys.ArgumentOutOfRangeException: "+(d?d:Sys.Res.argumentOutOfRange);if(c)b+="\n"+String.format(Sys.Res.paramName,c);if(typeof a!=="undefined"&&a!==null)b+="\n"+String.format(Sys.Res.actualValue,a);var e=Error.create(b,{name:"Sys.ArgumentOutOfRangeException",paramName:c,actualValue:a});e.popStackFrame();return e};Error.argumentType=function(d,c,b,e){var a="Sys.ArgumentTypeException: ";if(e)a+=e;else if(c&&b)a+=String.format(Sys.Res.argumentTypeWithTypes,c.getName(),b.getName());else a+=Sys.Res.argumentType;if(d)a+="\n"+String.format(Sys.Res.paramName,d);var f=Error.create(a,{name:"Sys.ArgumentTypeException",paramName:d,actualType:c,expectedType:b});f.popStackFrame();return f};Error.argumentUndefined=function(a,c){var b="Sys.ArgumentUndefinedException: "+(c?c:Sys.Res.argumentUndefined);if(a)b+="\n"+String.format(Sys.Res.paramName,a);var d=Error.create(b,{name:"Sys.ArgumentUndefinedException",paramName:a});d.popStackFrame();return d};Error.format=function(a){var c="Sys.FormatException: "+(a?a:Sys.Res.format),b=Error.create(c,{name:"Sys.FormatException"});b.popStackFrame();return b};Error.invalidOperation=function(a){var c="Sys.InvalidOperationException: "+(a?a:Sys.Res.invalidOperation),b=Error.create(c,{name:"Sys.InvalidOperationException"});b.popStackFrame();return b};Error.notImplemented=function(a){var c="Sys.NotImplementedException: "+(a?a:Sys.Res.notImplemented),b=Error.create(c,{name:"Sys.NotImplementedException"});b.popStackFrame();return b};Error.parameterCount=function(a){var c="Sys.ParameterCountException: "+(a?a:Sys.Res.parameterCount),b=Error.create(c,{name:"Sys.ParameterCountException"});b.popStackFrame();return b};Error.prototype.popStackFrame=function(){if(typeof this.stack==="undefined"||this.stack===null||typeof this.fileName==="undefined"||this.fileName===null||typeof this.lineNumber==="undefined"||this.lineNumber===null)return;var a=this.stack.split("\n"),c=a[0],e=this.fileName+":"+this.lineNumber;while(typeof c!=="undefined"&&c!==null&&c.indexOf(e)===-1){a.shift();c=a[0]}var d=a[1];if(typeof d==="undefined"||d===null)return;var b=d.match(/@(.*):(\d+)$/);if(typeof b==="undefined"||b===null)return;this.fileName=b[1];this.lineNumber=parseInt(b[2]);a.shift();this.stack=a.join("\n")};Object.__typeName="Object";Object.__class=true;Object.getType=function(b){var a=b.constructor;if(!a||typeof a!=="function"||!a.__typeName||a.__typeName==="Object")return Object;return a};Object.getTypeName=function(a){return Object.getType(a).getName()};String.__typeName="String";String.__class=true;String.prototype.endsWith=function(a){return this.substr(this.length-a.length)===a};String.prototype.startsWith=function(a){return this.substr(0,a.length)===a};String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")};String.prototype.trimEnd=function(){return this.replace(/\s+$/,"")};String.prototype.trimStart=function(){return this.replace(/^\s+/,"")};String.format=function(){return String._toFormattedString(false,arguments)};String.localeFormat=function(){return String._toFormattedString(true,arguments)};String._toFormattedString=function(l,j){var c="",e=j[0];for(var a=0;true;){var f=e.indexOf("{",a),d=e.indexOf("}",a);if(f<0&&d<0){c+=e.slice(a);break}if(d>0&&(d<f||f<0)){c+=e.slice(a,d+1);a=d+2;continue}c+=e.slice(a,f);a=f+1;if(e.charAt(a)==="{"){c+="{";a++;continue}if(d<0)break;var h=e.substring(a,d),g=h.indexOf(":"),k=parseInt(g<0?h:h.substring(0,g),10)+1,i=g<0?"":h.substring(g+1),b=j[k];if(typeof b==="undefined"||b===null)b="";if(b.toFormattedString)c+=b.toFormattedString(i);else if(l&&b.localeFormat)c+=b.localeFormat(i);else if(b.format)c+=b.format(i);else c+=b.toString();a=d+1}return c};Boolean.__typeName="Boolean";Boolean.__class=true;Boolean.parse=function(b){var a=b.trim().toLowerCase();if(a==="false")return false;if(a==="true")return true};Date.__typeName="Date";Date.__class=true;Date._appendPreOrPostMatch=function(e,b){var d=0,a=false;for(var c=0,g=e.length;c<g;c++){var f=e.charAt(c);switch(f){case "'":if(a)b.append("'");else d++;a=false;break;case "\\":if(a)b.append("\\");a=!a;break;default:b.append(f);a=false}}return d};Date._expandFormat=function(a,b){if(!b)b="F";if(b.length===1)switch(b){case "d":return a.ShortDatePattern;case "D":return a.LongDatePattern;case "t":return a.ShortTimePattern;case "T":return a.LongTimePattern;case "F":return a.FullDateTimePattern;case "M":case "m":return a.MonthDayPattern;case "s":return a.SortableDateTimePattern;case "Y":case "y":return a.YearMonthPattern;default:throw Error.format(Sys.Res.formatInvalidString)}return b};Date._expandYear=function(c,a){if(a<100){var b=(new Date).getFullYear();a+=b-b%100;if(a>c.Calendar.TwoDigitYearMax)return a-100}return a};Date._getParseRegExp=function(b,e){if(!b._parseRegExp)b._parseRegExp={};else if(b._parseRegExp[e])return b._parseRegExp[e];var c=Date._expandFormat(b,e);c=c.replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g,"\\\\$1");var a=new Sys.StringBuilder("^"),j=[],f=0,i=0,h=Date._getTokenRegExp(),d;while((d=h.exec(c))!==null){var l=c.slice(f,d.index);f=h.lastIndex;i+=Date._appendPreOrPostMatch(l,a);if(i%2===1){a.append(d[0]);continue}switch(d[0]){case "dddd":case "ddd":case "MMMM":case "MMM":a.append("(\\D+)");break;case "tt":case "t":a.append("(\\D*)");break;case "yyyy":a.append("(\\d{4})");break;case "fff":a.append("(\\d{3})");break;case "ff":a.append("(\\d{2})");break;case "f":a.append("(\\d)");break;case "dd":case "d":case "MM":case "M":case "yy":case "y":case "HH":case "H":case "hh":case "h":case "mm":case "m":case "ss":case "s":a.append("(\\d\\d?)");break;case "zzz":a.append("([+-]?\\d\\d?:\\d{2})");break;case "zz":case "z":a.append("([+-]?\\d\\d?)")}Array.add(j,d[0])}Date._appendPreOrPostMatch(c.slice(f),a);a.append("$");var k=a.toString().replace(/\s+/g,"\\s+"),g={"regExp":k,"groups":j};b._parseRegExp[e]=g;return g};Date._getTokenRegExp=function(){return /dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z/g};Date.parseLocale=function(a){return Date._parse(a,Sys.CultureInfo.CurrentCulture,arguments)};Date.parseInvariant=function(a){return Date._parse(a,Sys.CultureInfo.InvariantCulture,arguments)};Date._parse=function(g,c,h){var e=false;for(var a=1,i=h.length;a<i;a++){var f=h[a];if(f){e=true;var b=Date._parseExact(g,f,c);if(b)return b}}if(!e){var d=c._getDateTimeFormats();for(var a=0,i=d.length;a<i;a++){var b=Date._parseExact(g,d[a],c);if(b)return b}}return null};Date._parseExact=function(s,y,j){s=s.trim();var m=j.dateTimeFormat,v=Date._getParseRegExp(m,y),x=(new RegExp(v.regExp)).exec(s);if(x===null)return null;var w=v.groups,f=null,c=null,h=null,g=null,d=0,n=0,o=0,e=0,k=null,r=false;for(var p=0,z=w.length;p<z;p++){var a=x[p+1];if(a)switch(w[p]){case "dd":case "d":h=parseInt(a,10);if(h<1||h>31)return null;break;case "MMMM":c=j._getMonthIndex(a);if(c<0||c>11)return null;break;case "MMM":c=j._getAbbrMonthIndex(a);if(c<0||c>11)return null;break;case "M":case "MM":var c=parseInt(a,10)-1;if(c<0||c>11)return null;break;case "y":case "yy":f=Date._expandYear(m,parseInt(a,10));if(f<0||f>9999)return null;break;case "yyyy":f=parseInt(a,10);if(f<0||f>9999)return null;break;case "h":case "hh":d=parseInt(a,10);if(d===12)d=0;if(d<0||d>11)return null;break;case "H":case "HH":d=parseInt(a,10);if(d<0||d>23)return null;break;case "m":case "mm":n=parseInt(a,10);if(n<0||n>59)return null;break;case "s":case "ss":o=parseInt(a,10);if(o<0||o>59)return null;break;case "tt":case "t":var u=a.toUpperCase();r=u===m.PMDesignator.toUpperCase();if(!r&&u!==m.AMDesignator.toUpperCase())return null;break;case "f":e=parseInt(a,10)*100;if(e<0||e>999)return null;break;case "ff":e=parseInt(a,10)*10;if(e<0||e>999)return null;break;case "fff":e=parseInt(a,10);if(e<0||e>999)return null;break;case "dddd":g=j._getDayIndex(a);if(g<0||g>6)return null;break;case "ddd":g=j._getAbbrDayIndex(a);if(g<0||g>6)return null;break;case "zzz":var q=a.split(/:/);if(q.length!==2)return null;var i=parseInt(q[0],10);if(i<-12||i>13)return null;var l=parseInt(q[1],10);if(l<0||l>59)return null;k=i*60+(a.startsWith("-")?-l:l);break;case "z":case "zz":var i=parseInt(a,10);if(i<-12||i>13)return null;k=i*60}}var b=new Date;if(f===null)f=b.getFullYear();if(c===null)c=b.getMonth();if(h===null)h=b.getDate();b.setFullYear(f,c,h);if(b.getDate()!==h)return null;if(g!==null&&b.getDay()!==g)return null;if(r&&d<12)d+=12;b.setHours(d,n,o,e);if(k!==null){var t=b.getMinutes()-(k+b.getTimezoneOffset());b.setHours(b.getHours()+parseInt(t/60,10),t%60)}return b};Date.prototype.format=function(a){return this._toFormattedString(a,Sys.CultureInfo.InvariantCulture)};Date.prototype.localeFormat=function(a){return this._toFormattedString(a,Sys.CultureInfo.CurrentCulture)};Date.prototype._toFormattedString=function(e,h){if(!e||e.length===0||e==="i")if(h&&h.name.length>0)return this.toLocaleString();else return this.toString();var d=h.dateTimeFormat;e=Date._expandFormat(d,e);var a=new Sys.StringBuilder,b;function c(a){if(a<10)return "0"+a;return a.toString()}function g(a){if(a<10)return "00"+a;if(a<100)return "0"+a;return a.toString()}var j=0,i=Date._getTokenRegExp();for(;true;){var l=i.lastIndex,f=i.exec(e),k=e.slice(l,f?f.index:e.length);j+=Date._appendPreOrPostMatch(k,a);if(!f)break;if(j%2===1){a.append(f[0]);continue}switch(f[0]){case "dddd":a.append(d.DayNames[this.getDay()]);break;case "ddd":a.append(d.AbbreviatedDayNames[this.getDay()]);break;case "dd":a.append(c(this.getDate()));break;case "d":a.append(this.getDate());break;case "MMMM":a.append(d.MonthNames[this.getMonth()]);break;case "MMM":a.append(d.AbbreviatedMonthNames[this.getMonth()]);break;case "MM":a.append(c(this.getMonth()+1));break;case "M":a.append(this.getMonth()+1);break;case "yyyy":a.append(this.getFullYear());break;case "yy":a.append(c(this.getFullYear()%100));break;case "y":a.append(this.getFullYear()%100);break;case "hh":b=this.getHours()%12;if(b===0)b=12;a.append(c(b));break;case "h":b=this.getHours()%12;if(b===0)b=12;a.append(b);break;case "HH":a.append(c(this.getHours()));break;case "H":a.append(this.getHours());break;case "mm":a.append(c(this.getMinutes()));break;case "m":a.append(this.getMinutes());break;case "ss":a.append(c(this.getSeconds()));break;case "s":a.append(this.getSeconds());break;case "tt":a.append(this.getHours()<12?d.AMDesignator:d.PMDesignator);break;case "t":a.append((this.getHours()<12?d.AMDesignator:d.PMDesignator).charAt(0));break;case "f":a.append(g(this.getMilliseconds()).charAt(0));break;case "ff":a.append(g(this.getMilliseconds()).substr(0,2));break;case "fff":a.append(g(this.getMilliseconds()));break;case "z":b=this.getTimezoneOffset()/60;a.append((b<=0?"+":"-")+Math.floor(Math.abs(b)));break;case "zz":b=this.getTimezoneOffset()/60;a.append((b<=0?"+":"-")+c(Math.floor(Math.abs(b))));break;case "zzz":b=this.getTimezoneOffset()/60;a.append((b<=0?"+":"-")+c(Math.floor(Math.abs(b)))+d.TimeSeparator+c(Math.abs(this.getTimezoneOffset()%60)))}}return a.toString()};Number.__typeName="Number";Number.__class=true;Number.parseLocale=function(a){return Number._parse(a,Sys.CultureInfo.CurrentCulture)};Number.parseInvariant=function(a){return Number._parse(a,Sys.CultureInfo.InvariantCulture)};Number._parse=function(b,o){b=b.trim();if(b.match(/^[+-]?infinity$/i))return parseFloat(b);if(b.match(/^0x[a-f0-9]+$/i))return parseInt(b);var a=o.numberFormat,g=Number._parseNumberNegativePattern(b,a,a.NumberNegativePattern),h=g[0],e=g[1];if(h===""&&a.NumberNegativePattern!==1){g=Number._parseNumberNegativePattern(b,a,1);h=g[0];e=g[1]}if(h==="")h="+";var j,d,f=e.indexOf("e");if(f<0)f=e.indexOf("E");if(f<0){d=e;j=null}else{d=e.substr(0,f);j=e.substr(f+1)}var c,k,m=d.indexOf(a.NumberDecimalSeparator);if(m<0){c=d;k=null}else{c=d.substr(0,m);k=d.substr(m+a.NumberDecimalSeparator.length)}c=c.split(a.NumberGroupSeparator).join("");var n=a.NumberGroupSeparator.replace(/\u00A0/g," ");if(a.NumberGroupSeparator!==n)c=c.split(n).join("");var l=h+c;if(k!==null)l+="."+k;if(j!==null){var i=Number._parseNumberNegativePattern(j,a,1);if(i[0]==="")i[0]="+";l+="e"+i[0]+i[1]}if(l.match(/^[+-]?\d*\.?\d*(e[+-]?\d+)?$/))return parseFloat(l);return Number.NaN};Number._parseNumberNegativePattern=function(a,d,e){var b=d.NegativeSign,c=d.PositiveSign;switch(e){case 4:b=" "+b;c=" "+c;case 3:if(a.endsWith(b))return ["-",a.substr(0,a.length-b.length)];else if(a.endsWith(c))return ["+",a.substr(0,a.length-c.length)];break;case 2:b+=" ";c+=" ";case 1:if(a.startsWith(b))return ["-",a.substr(b.length)];else if(a.startsWith(c))return ["+",a.substr(c.length)];break;case 0:if(a.startsWith("(")&&a.endsWith(")"))return ["-",a.substr(1,a.length-2)]}return ["",a]};Number.prototype.format=function(a){return this._toFormattedString(a,Sys.CultureInfo.InvariantCulture)};Number.prototype.localeFormat=function(a){return this._toFormattedString(a,Sys.CultureInfo.CurrentCulture)};Number.prototype._toFormattedString=function(d,j){if(!d||d.length===0||d==="i")if(j&&j.name.length>0)return this.toLocaleString();else return this.toString();var o=["n %","n%","%n"],n=["-n %","-n%","-%n"],p=["(n)","-n","- n","n-","n -"],m=["$n","n$","$ n","n $"],l=["($n)","-$n","$-n","$n-","(n$)","-n$","n-$","n$-","-n $","-$ n","n $-","$ n-","$ -n","n- $","($ n)","(n $)"];function g(a,c,d){for(var b=a.length;b<c;b++)a=d?"0"+a:a+"0";return a}function i(j,i,l,n,p){var h=l[0],k=1,o=Math.pow(10,i),m=Math.round(j*o)/o;if(!isFinite(m))m=j;j=m;var b=j.toString(),a="",c,e=b.split(/e/i);b=e[0];c=e.length>1?parseInt(e[1]):0;e=b.split(".");b=e[0];a=e.length>1?e[1]:"";var q;if(c>0){a=g(a,c,false);b+=a.slice(0,c);a=a.substr(c)}else if(c<0){c=-c;b=g(b,c+1,true);a=b.slice(-c,b.length)+a;b=b.slice(0,-c)}if(i>0){if(a.length>i)a=a.slice(0,i);else a=g(a,i,false);a=p+a}else a="";var d=b.length-1,f="";while(d>=0){if(h===0||h>d)if(f.length>0)return b.slice(0,d+1)+n+f+a;else return b.slice(0,d+1)+a;if(f.length>0)f=b.slice(d-h+1,d+1)+n+f;else f=b.slice(d-h+1,d+1);d-=h;if(k<l.length){h=l[k];k++}}return b.slice(0,d+1)+n+f+a}var a=j.numberFormat,e=Math.abs(this);if(!d)d="D";var b=-1;if(d.length>1)b=parseInt(d.slice(1),10);var c;switch(d.charAt(0)){case "d":case "D":c="n";if(b!==-1)e=g(""+e,b,true);if(this<0)e=-e;break;case "c":case "C":if(this<0)c=l[a.CurrencyNegativePattern];else c=m[a.CurrencyPositivePattern];if(b===-1)b=a.CurrencyDecimalDigits;e=i(Math.abs(this),b,a.CurrencyGroupSizes,a.CurrencyGroupSeparator,a.CurrencyDecimalSeparator);break;case "n":case "N":if(this<0)c=p[a.NumberNegativePattern];else c="n";if(b===-1)b=a.NumberDecimalDigits;e=i(Math.abs(this),b,a.NumberGroupSizes,a.NumberGroupSeparator,a.NumberDecimalSeparator);break;case "p":case "P":if(this<0)c=n[a.PercentNegativePattern];else c=o[a.PercentPositivePattern];if(b===-1)b=a.PercentDecimalDigits;e=i(Math.abs(this)*100,b,a.PercentGroupSizes,a.PercentGroupSeparator,a.PercentDecimalSeparator);break;default:throw Error.format(Sys.Res.formatBadFormatSpecifier)}var k=/n|\$|-|%/g,f="";for(;true;){var q=k.lastIndex,h=k.exec(c);f+=c.slice(q,h?h.index:c.length);if(!h)break;switch(h[0]){case "n":f+=e;break;case "$":f+=a.CurrencySymbol;break;case "-":f+=a.NegativeSign;break;case "%":f+=a.PercentSymbol}}return f};RegExp.__typeName="RegExp";RegExp.__class=true;Array.__typeName="Array";Array.__class=true;Array.add=Array.enqueue=function(a,b){a[a.length]=b};Array.addRange=function(a,b){a.push.apply(a,b)};Array.clear=function(a){a.length=0};Array.clone=function(a){if(a.length===1)return [a[0]];else return Array.apply(null,a)};Array.contains=function(a,b){return Array.indexOf(a,b)>=0};Array.dequeue=function(a){return a.shift()};Array.forEach=function(b,e,d){for(var a=0,f=b.length;a<f;a++){var c=b[a];if(typeof c!=="undefined")e.call(d,c,a,b)}};Array.indexOf=function(d,e,a){if(typeof e==="undefined")return -1;var c=d.length;if(c!==0){a=a-0;if(isNaN(a))a=0;else{if(isFinite(a))a=a-a%1;if(a<0)a=Math.max(0,c+a)}for(var b=a;b<c;b++)if(typeof d[b]!=="undefined"&&d[b]===e)return b}return -1};Array.insert=function(a,b,c){a.splice(b,0,c)};Array.parse=function(value){if(!value)return [];return eval(value)};Array.remove=function(b,c){var a=Array.indexOf(b,c);if(a>=0)b.splice(a,1);return a>=0};Array.removeAt=function(a,b){a.splice(b,1)};if(!window)this.window=this;window.Type=Function;Type.prototype.callBaseMethod=function(a,d,b){var c=this.getBaseMethod(a,d);if(!b)return c.apply(a);else return c.apply(a,b)};Type.prototype.getBaseMethod=function(d,c){var b=this.getBaseType();if(b){var a=b.prototype[c];return a instanceof Function?a:null}return null};Type.prototype.getBaseType=function(){return typeof this.__baseType==="undefined"?null:this.__baseType};Type.prototype.getInterfaces=function(){var a=[],b=this;while(b){var c=b.__interfaces;if(c)for(var d=0,f=c.length;d<f;d++){var e=c[d];if(!Array.contains(a,e))a[a.length]=e}b=b.__baseType}return a};Type.prototype.getName=function(){return typeof this.__typeName==="undefined"?"":this.__typeName};Type.prototype.implementsInterface=function(d){this.resolveInheritance();var c=d.getName(),a=this.__interfaceCache;if(a){var e=a[c];if(typeof e!=="undefined")return e}else a=this.__interfaceCache={};var b=this;while(b){var f=b.__interfaces;if(f)if(Array.indexOf(f,d)!==-1)return a[c]=true;b=b.__baseType}return a[c]=false};Type.prototype.inheritsFrom=function(b){this.resolveInheritance();var a=this.__baseType;while(a){if(a===b)return true;a=a.__baseType}return false};Type.prototype.initializeBase=function(a,b){this.resolveInheritance();if(this.__baseType)if(!b)this.__baseType.apply(a);else this.__baseType.apply(a,b);return a};Type.prototype.isImplementedBy=function(a){if(typeof a==="undefined"||a===null)return false;var b=Object.getType(a);return !!(b.implementsInterface&&b.implementsInterface(this))};Type.prototype.isInstanceOfType=function(b){if(typeof b==="undefined"||b===null)return false;if(b instanceof this)return true;var a=Object.getType(b);return !!(a===this)||a.inheritsFrom&&a.inheritsFrom(this)||a.implementsInterface&&a.implementsInterface(this)};Type.prototype.registerClass=function(c,b,d){this.prototype.constructor=this;this.__typeName=c;this.__class=true;if(b){this.__baseType=b;this.__basePrototypePending=true}Sys.__upperCaseTypes[c.toUpperCase()]=this;if(d){this.__interfaces=[];for(var a=2,f=arguments.length;a<f;a++){var e=arguments[a];this.__interfaces.push(e)}}return this};Type.prototype.registerInterface=function(a){Sys.__upperCaseTypes[a.toUpperCase()]=this;this.prototype.constructor=this;this.__typeName=a;this.__interface=true;return this};Type.prototype.resolveInheritance=function(){if(this.__basePrototypePending){var b=this.__baseType;b.resolveInheritance();for(var a in b.prototype){var c=b.prototype[a];if(!this.prototype[a])this.prototype[a]=c}delete this.__basePrototypePending}};Type.getRootNamespaces=function(){return Array.clone(Sys.__rootNamespaces)};Type.isClass=function(a){if(typeof a==="undefined"||a===null)return false;return !!a.__class};Type.isInterface=function(a){if(typeof a==="undefined"||a===null)return false;return !!a.__interface};Type.isNamespace=function(a){if(typeof a==="undefined"||a===null)return false;return !!a.__namespace};Type.parse=function(typeName,ns){var fn;if(ns){fn=Sys.__upperCaseTypes[ns.getName().toUpperCase()+"."+typeName.toUpperCase()];return fn||null}if(!typeName)return null;if(!Type.__htClasses)Type.__htClasses={};fn=Type.__htClasses[typeName];if(!fn){fn=eval(typeName);Type.__htClasses[typeName]=fn}return fn};Type.registerNamespace=function(f){var d=window,c=f.split(".");for(var b=0;b<c.length;b++){var e=c[b],a=d[e];if(!a){a=d[e]={__namespace:true,__typeName:c.slice(0,b+1).join(".")};if(b===0)Sys.__rootNamespaces[Sys.__rootNamespaces.length]=a;a.getName=function(){return this.__typeName}}d=a}};window.Sys={__namespace:true,__typeName:"Sys",getName:function(){return "Sys"},__upperCaseTypes:{}};Sys.__rootNamespaces=[Sys];Sys.IDisposable=function(){};Sys.IDisposable.prototype={};Sys.IDisposable.registerInterface("Sys.IDisposable");Sys.StringBuilder=function(a){this._parts=typeof a!=="undefined"&&a!==null&&a!==""?[a.toString()]:[];this._value={};this._len=0};Sys.StringBuilder.prototype={append:function(a){this._parts[this._parts.length]=a},appendLine:function(a){this._parts[this._parts.length]=typeof a==="undefined"||a===null||a===""?"\r\n":a+"\r\n"},clear:function(){this._parts=[];this._value={};this._len=0},isEmpty:function(){if(this._parts.length===0)return true;return this.toString()===""},toString:function(a){a=a||"";var b=this._parts;if(this._len!==b.length){this._value={};this._len=b.length}var d=this._value;if(typeof d[a]==="undefined"){if(a!=="")for(var c=0;c<b.length;)if(typeof b[c]==="undefined"||b[c]===""||b[c]===null)b.splice(c,1);else c++;d[a]=this._parts.join(a)}return d[a]}};Sys.StringBuilder.registerClass("Sys.StringBuilder");if(!window.XMLHttpRequest)window.XMLHttpRequest=function(){var b=["Msxml2.XMLHTTP.3.0","Msxml2.XMLHTTP"];for(var a=0,c=b.length;a<c;a++)try{return new ActiveXObject(b[a])}catch(d){}return null};Sys.Browser={};Sys.Browser.InternetExplorer={};Sys.Browser.Firefox={};Sys.Browser.Safari={};Sys.Browser.Opera={};Sys.Browser.agent=null;Sys.Browser.hasDebuggerStatement=false;Sys.Browser.name=navigator.appName;Sys.Browser.version=parseFloat(navigator.appVersion);Sys.Browser.documentMode=0;if(navigator.userAgent.indexOf(" MSIE ")>-1){Sys.Browser.agent=Sys.Browser.InternetExplorer;Sys.Browser.version=parseFloat(navigator.userAgent.match(/MSIE (\d+\.\d+)/)[1]);if(Sys.Browser.version>=8)if(document.documentMode>=7)Sys.Browser.documentMode=document.documentMode;Sys.Browser.hasDebuggerStatement=true}else if(navigator.userAgent.indexOf(" Firefox/")>-1){Sys.Browser.agent=Sys.Browser.Firefox;Sys.Browser.version=parseFloat(navigator.userAgent.match(/Firefox\/(\d+\.\d+)/)[1]);Sys.Browser.name="Firefox";Sys.Browser.hasDebuggerStatement=true}else if(navigator.userAgent.indexOf(" AppleWebKit/")>-1){Sys.Browser.agent=Sys.Browser.Safari;Sys.Browser.version=parseFloat(navigator.userAgent.match(/AppleWebKit\/(\d+(\.\d+)?)/)[1]);Sys.Browser.name="Safari"}else if(navigator.userAgent.indexOf("Opera/")>-1)Sys.Browser.agent=Sys.Browser.Opera;Type.registerNamespace("Sys.UI");Sys._Debug=function(){};Sys._Debug.prototype={_appendConsole:function(a){if(typeof Debug!=="undefined"&&Debug.writeln)Debug.writeln(a);if(window.console&&window.console.log)window.console.log(a);if(window.opera)window.opera.postError(a);if(window.debugService)window.debugService.trace(a)},_appendTrace:function(b){var a=document.getElementById("TraceConsole");if(a&&a.tagName.toUpperCase()==="TEXTAREA")a.value+=b+"\n"},assert:function(c,a,b){if(!c){a=b&&this.assert.caller?String.format(Sys.Res.assertFailedCaller,a,this.assert.caller):String.format(Sys.Res.assertFailed,a);if(confirm(String.format(Sys.Res.breakIntoDebugger,a)))this.fail(a)}},clearTrace:function(){var a=document.getElementById("TraceConsole");if(a&&a.tagName.toUpperCase()==="TEXTAREA")a.value=""},fail:function(message){this._appendConsole(message);if(Sys.Browser.hasDebuggerStatement)eval("debugger")},trace:function(a){this._appendConsole(a);this._appendTrace(a)},traceDump:function(a,b){var c=this._traceDump(a,b,true)},_traceDump:function(a,c,f,b,d){c=c?c:"traceDump";b=b?b:"";if(a===null){this.trace(b+c+": null");return}switch(typeof a){case "undefined":this.trace(b+c+": Undefined");break;case "number":case "string":case "boolean":this.trace(b+c+": "+a);break;default:if(Date.isInstanceOfType(a)||RegExp.isInstanceOfType(a)){this.trace(b+c+": "+a.toString());break}if(!d)d=[];else if(Array.contains(d,a)){this.trace(b+c+": ...");return}Array.add(d,a);if(a==window||a===document||window.HTMLElement&&a instanceof HTMLElement||typeof a.nodeName==="string"){var k=a.tagName?a.tagName:"DomElement";if(a.id)k+=" - "+a.id;this.trace(b+c+" {"+k+"}")}else{var i=Object.getTypeName(a);this.trace(b+c+(typeof i==="string"?" {"+i+"}":""));if(b===""||f){b+="    ";var e,j,l,g,h;if(Array.isInstanceOfType(a)){j=a.length;for(e=0;e<j;e++)this._traceDump(a[e],"["+e+"]",f,b,d)}else for(g in a){h=a[g];if(!Function.isInstanceOfType(h))this._traceDump(h,g,f,b,d)}}}Array.remove(d,a)}}};Sys._Debug.registerClass("Sys._Debug");Sys.Debug=new Sys._Debug;Sys.Debug.isDebug=false;function Sys$Enum$parse(c,e){var a,b,i;if(e){a=this.__lowerCaseValues;if(!a){this.__lowerCaseValues=a={};var g=this.prototype;for(var f in g)a[f.toLowerCase()]=g[f]}}else a=this.prototype;if(!this.__flags){i=e?c.toLowerCase():c;b=a[i.trim()];if(typeof b!=="number")throw Error.argument("value",String.format(Sys.Res.enumInvalidValue,c,this.__typeName));return b}else{var h=(e?c.toLowerCase():c).split(","),j=0;for(var d=h.length-1;d>=0;d--){var k=h[d].trim();b=a[k];if(typeof b!=="number")throw Error.argument("value",String.format(Sys.Res.enumInvalidValue,c.split(",")[d].trim(),this.__typeName));j|=b}return j}}function Sys$Enum$toString(c){if(typeof c==="undefined"||c===null)return this.__string;var d=this.prototype,a;if(!this.__flags||c===0){for(a in d)if(d[a]===c)return a}else{var b=this.__sortedValues;if(!b){b=[];for(a in d)b[b.length]={key:a,value:d[a]};b.sort(function(a,b){return a.value-b.value});this.__sortedValues=b}var e=[],g=c;for(a=b.length-1;a>=0;a--){var h=b[a],f=h.value;if(f===0)continue;if((f&c)===f){e[e.length]=h.key;g-=f;if(g===0)break}}if(e.length&&g===0)return e.reverse().join(", ")}return ""}Type.prototype.registerEnum=function(b,c){Sys.__upperCaseTypes[b.toUpperCase()]=this;for(var a in this.prototype)this[a]=this.prototype[a];this.__typeName=b;this.parse=Sys$Enum$parse;this.__string=this.toString();this.toString=Sys$Enum$toString;this.__flags=c;this.__enum=true};Type.isEnum=function(a){if(typeof a==="undefined"||a===null)return false;return !!a.__enum};Type.isFlags=function(a){if(typeof a==="undefined"||a===null)return false;return !!a.__flags};Sys.EventHandlerList=function(){this._list={}};Sys.EventHandlerList.prototype={addHandler:function(b,a){Array.add(this._getEvent(b,true),a)},removeHandler:function(c,b){var a=this._getEvent(c);if(!a)return;Array.remove(a,b)},getHandler:function(b){var a=this._getEvent(b);if(!a||a.length===0)return null;a=Array.clone(a);return function(c,d){for(var b=0,e=a.length;b<e;b++)a[b](c,d)}},_getEvent:function(a,b){if(!this._list[a]){if(!b)return null;this._list[a]=[]}return this._list[a]}};Sys.EventHandlerList.registerClass("Sys.EventHandlerList");Sys.EventArgs=function(){};Sys.EventArgs.registerClass("Sys.EventArgs");Sys.EventArgs.Empty=new Sys.EventArgs;Sys.CancelEventArgs=function(){Sys.CancelEventArgs.initializeBase(this);this._cancel=false};Sys.CancelEventArgs.prototype={get_cancel:function(){return this._cancel},set_cancel:function(a){this._cancel=a}};Sys.CancelEventArgs.registerClass("Sys.CancelEventArgs",Sys.EventArgs);Sys.INotifyPropertyChange=function(){};Sys.INotifyPropertyChange.prototype={};Sys.INotifyPropertyChange.registerInterface("Sys.INotifyPropertyChange");Sys.PropertyChangedEventArgs=function(a){Sys.PropertyChangedEventArgs.initializeBase(this);this._propertyName=a};Sys.PropertyChangedEventArgs.prototype={get_propertyName:function(){return this._propertyName}};Sys.PropertyChangedEventArgs.registerClass("Sys.PropertyChangedEventArgs",Sys.EventArgs);Sys.INotifyDisposing=function(){};Sys.INotifyDisposing.prototype={};Sys.INotifyDisposing.registerInterface("Sys.INotifyDisposing");Sys.Component=function(){if(Sys.Application)Sys.Application.registerDisposableObject(this)};Sys.Component.prototype={_id:null,_initialized:false,_updating:false,get_events:function(){if(!this._events)this._events=new Sys.EventHandlerList;return this._events},get_id:function(){return this._id},set_id:function(a){this._id=a},get_isInitialized:function(){return this._initialized},get_isUpdating:function(){return this._updating},add_disposing:function(a){this.get_events().addHandler("disposing",a)},remove_disposing:function(a){this.get_events().removeHandler("disposing",a)},add_propertyChanged:function(a){this.get_events().addHandler("propertyChanged",a)},remove_propertyChanged:function(a){this.get_events().removeHandler("propertyChanged",a)},beginUpdate:function(){this._updating=true},dispose:function(){if(this._events){var a=this._events.getHandler("disposing");if(a)a(this,Sys.EventArgs.Empty)}delete this._events;Sys.Application.unregisterDisposableObject(this);Sys.Application.removeComponent(this)},endUpdate:function(){this._updating=false;if(!this._initialized)this.initialize();this.updated()},initialize:function(){this._initialized=true},raisePropertyChanged:function(b){if(!this._events)return;var a=this._events.getHandler("propertyChanged");if(a)a(this,new Sys.PropertyChangedEventArgs(b))},updated:function(){}};Sys.Component.registerClass("Sys.Component",null,Sys.IDisposable,Sys.INotifyPropertyChange,Sys.INotifyDisposing);function Sys$Component$_setProperties(a,i){var d,j=Object.getType(a),e=j===Object||j===Sys.UI.DomElement,h=Sys.Component.isInstanceOfType(a)&&!a.get_isUpdating();if(h)a.beginUpdate();for(var c in i){var b=i[c],f=e?null:a["get_"+c];if(e||typeof f!=="function"){var k=a[c];if(!b||typeof b!=="object"||e&&!k)a[c]=b;else Sys$Component$_setProperties(k,b)}else{var l=a["set_"+c];if(typeof l==="function")l.apply(a,[b]);else if(b instanceof Array){d=f.apply(a);for(var g=0,m=d.length,n=b.length;g<n;g++,m++)d[m]=b[g]}else if(typeof b==="object"&&Object.getType(b)===Object){d=f.apply(a);Sys$Component$_setProperties(d,b)}}}if(h)a.endUpdate()}function Sys$Component$_setReferences(c,b){for(var a in b){var e=c["set_"+a],d=$find(b[a]);e.apply(c,[d])}}var $create=Sys.Component.create=function(h,f,d,c,g){var a=g?new h(g):new h,b=Sys.Application,i=b.get_isCreatingComponents();a.beginUpdate();if(f)Sys$Component$_setProperties(a,f);if(d)for(var e in d)a["add_"+e](d[e]);if(a.get_id())b.addComponent(a);if(i){b._createdComponents[b._createdComponents.length]=a;if(c)b._addComponentToSecondPass(a,c);else a.endUpdate()}else{if(c)Sys$Component$_setReferences(a,c);a.endUpdate()}return a};Sys.UI.MouseButton=function(){throw Error.notImplemented()};Sys.UI.MouseButton.prototype={leftButton:0,middleButton:1,rightButton:2};Sys.UI.MouseButton.registerEnum("Sys.UI.MouseButton");Sys.UI.Key=function(){throw Error.notImplemented()};Sys.UI.Key.prototype={backspace:8,tab:9,enter:13,esc:27,space:32,pageUp:33,pageDown:34,end:35,home:36,left:37,up:38,right:39,down:40,del:127};Sys.UI.Key.registerEnum("Sys.UI.Key");Sys.UI.Point=function(a,b){this.x=Math.round(a);this.y=Math.round(b)};Sys.UI.Point.registerClass("Sys.UI.Point");Sys.UI.Bounds=function(c,d,b,a){this.x=c;this.y=d;this.height=a;this.width=b};Sys.UI.Bounds.registerClass("Sys.UI.Bounds");Sys.UI.DomEvent=function(e){var a=e,b=this.type=a.type.toLowerCase();this.rawEvent=a;this.altKey=a.altKey;if(typeof a.button!=="undefined")this.button=typeof a.which!=="undefined"?a.button:a.button===4?Sys.UI.MouseButton.middleButton:a.button===2?Sys.UI.MouseButton.rightButton:Sys.UI.MouseButton.leftButton;if(b==="keypress")this.charCode=a.charCode||a.keyCode;else if(a.keyCode&&a.keyCode===46)this.keyCode=127;else this.keyCode=a.keyCode;this.clientX=a.clientX;this.clientY=a.clientY;this.ctrlKey=a.ctrlKey;this.target=a.target?a.target:a.srcElement;if(!b.startsWith("key"))if(typeof a.offsetX!=="undefined"&&typeof a.offsetY!=="undefined"){this.offsetX=a.offsetX;this.offsetY=a.offsetY}else if(this.target&&this.target.nodeType!==3&&typeof a.clientX==="number"){var c=Sys.UI.DomElement.getLocation(this.target),d=Sys.UI.DomElement._getWindow(this.target);this.offsetX=(d.pageXOffset||0)+a.clientX-c.x;this.offsetY=(d.pageYOffset||0)+a.clientY-c.y}this.screenX=a.screenX;this.screenY=a.screenY;this.shiftKey=a.shiftKey};Sys.UI.DomEvent.prototype={preventDefault:function(){if(this.rawEvent.preventDefault)this.rawEvent.preventDefault();else if(window.event)this.rawEvent.returnValue=false},stopPropagation:function(){if(this.rawEvent.stopPropagation)this.rawEvent.stopPropagation();else if(window.event)this.rawEvent.cancelBubble=true}};Sys.UI.DomEvent.registerClass("Sys.UI.DomEvent");var $addHandler=Sys.UI.DomEvent.addHandler=function(a,d,e){if(!a._events)a._events={};var c=a._events[d];if(!c)a._events[d]=c=[];var b;if(a.addEventListener){b=function(b){return e.call(a,new Sys.UI.DomEvent(b))};a.addEventListener(d,b,false)}else if(a.attachEvent){b=function(){var b={};try{b=Sys.UI.DomElement._getWindow(a).event}catch(c){}return e.call(a,new Sys.UI.DomEvent(b))};a.attachEvent("on"+d,b)}c[c.length]={handler:e,browserHandler:b}},$addHandlers=Sys.UI.DomEvent.addHandlers=function(e,d,c){for(var b in d){var a=d[b];if(c)a=Function.createDelegate(c,a);$addHandler(e,b,a)}},$clearHandlers=Sys.UI.DomEvent.clearHandlers=function(a){if(a._events){var e=a._events;for(var b in e){var d=e[b];for(var c=d.length-1;c>=0;c--)$removeHandler(a,b,d[c].handler)}a._events=null}},$removeHandler=Sys.UI.DomEvent.removeHandler=function(a,e,f){var d=null,c=a._events[e];for(var b=0,g=c.length;b<g;b++)if(c[b].handler===f){d=c[b].browserHandler;break}if(a.removeEventListener)a.removeEventListener(e,d,false);else if(a.detachEvent)a.detachEvent("on"+e,d);c.splice(b,1)};Sys.UI.DomElement=function(){};Sys.UI.DomElement.registerClass("Sys.UI.DomElement");Sys.UI.DomElement.addCssClass=function(a,b){if(!Sys.UI.DomElement.containsCssClass(a,b))if(a.className==="")a.className=b;else a.className+=" "+b};Sys.UI.DomElement.containsCssClass=function(b,a){return Array.contains(b.className.split(" "),a)};Sys.UI.DomElement.getBounds=function(a){var b=Sys.UI.DomElement.getLocation(a);return new Sys.UI.Bounds(b.x,b.y,a.offsetWidth||0,a.offsetHeight||0)};var $get=Sys.UI.DomElement.getElementById=function(f,e){if(!e)return document.getElementById(f);if(e.getElementById)return e.getElementById(f);var c=[],d=e.childNodes;for(var b=0;b<d.length;b++){var a=d[b];if(a.nodeType==1)c[c.length]=a}while(c.length){a=c.shift();if(a.id==f)return a;d=a.childNodes;for(b=0;b<d.length;b++){a=d[b];if(a.nodeType==1)c[c.length]=a}}return null};switch(Sys.Browser.agent){case Sys.Browser.InternetExplorer:Sys.UI.DomElement.getLocation=function(a){if(a.self||a.nodeType===9)return new Sys.UI.Point(0,0);var b=a.getBoundingClientRect();if(!b)return new Sys.UI.Point(0,0);var d=a.ownerDocument.documentElement,e=b.left-2+d.scrollLeft,f=b.top-2+d.scrollTop;try{var c=a.ownerDocument.parentWindow.frameElement||null;if(c){var g=c.frameBorder==="0"||c.frameBorder==="no"?2:0;e+=g;f+=g}}catch(h){}return new Sys.UI.Point(e,f)};break;case Sys.Browser.Safari:Sys.UI.DomElement.getLocation=function(c){if(c.window&&c.window===c||c.nodeType===9)return new Sys.UI.Point(0,0);var f=0,g=0,j=null,e=null,b;for(var a=c;a;j=a,(e=b,a=a.offsetParent)){b=Sys.UI.DomElement._getCurrentStyle(a);var d=a.tagName?a.tagName.toUpperCase():null;if((a.offsetLeft||a.offsetTop)&&(d!=="BODY"||(!e||e.position!=="absolute"))){f+=a.offsetLeft;g+=a.offsetTop}}b=Sys.UI.DomElement._getCurrentStyle(c);var h=b?b.position:null;if(!h||h!=="absolute")for(var a=c.parentNode;a;a=a.parentNode){d=a.tagName?a.tagName.toUpperCase():null;if(d!=="BODY"&&d!=="HTML"&&(a.scrollLeft||a.scrollTop)){f-=a.scrollLeft||0;g-=a.scrollTop||0}b=Sys.UI.DomElement._getCurrentStyle(a);var i=b?b.position:null;if(i&&i==="absolute")break}return new Sys.UI.Point(f,g)};break;case Sys.Browser.Opera:Sys.UI.DomElement.getLocation=function(b){if(b.window&&b.window===b||b.nodeType===9)return new Sys.UI.Point(0,0);var d=0,e=0,i=null;for(var a=b;a;i=a,a=a.offsetParent){var f=a.tagName;d+=a.offsetLeft||0;e+=a.offsetTop||0}var g=b.style.position,c=g&&g!=="static";for(var a=b.parentNode;a;a=a.parentNode){f=a.tagName?a.tagName.toUpperCase():null;if(f!=="BODY"&&f!=="HTML"&&(a.scrollLeft||a.scrollTop)&&(c&&(a.style.overflow==="scroll"||a.style.overflow==="auto"))){d-=a.scrollLeft||0;e-=a.scrollTop||0}var h=a&&a.style?a.style.position:null;c=c||h&&h!=="static"}return new Sys.UI.Point(d,e)};break;default:Sys.UI.DomElement.getLocation=function(d){if(d.window&&d.window===d||d.nodeType===9)return new Sys.UI.Point(0,0);var e=0,f=0,i=null,g=null,b=null;for(var a=d;a;i=a,(g=b,a=a.offsetParent)){var c=a.tagName?a.tagName.toUpperCase():null;b=Sys.UI.DomElement._getCurrentStyle(a);if((a.offsetLeft||a.offsetTop)&&!(c==="BODY"&&(!g||g.position!=="absolute"))){e+=a.offsetLeft;f+=a.offsetTop}if(i!==null&&b){if(c!=="TABLE"&&c!=="TD"&&c!=="HTML"){e+=parseInt(b.borderLeftWidth)||0;f+=parseInt(b.borderTopWidth)||0}if(c==="TABLE"&&(b.position==="relative"||b.position==="absolute")){e+=parseInt(b.marginLeft)||0;f+=parseInt(b.marginTop)||0}}}b=Sys.UI.DomElement._getCurrentStyle(d);var h=b?b.position:null;if(!h||h!=="absolute")for(var a=d.parentNode;a;a=a.parentNode){c=a.tagName?a.tagName.toUpperCase():null;if(c!=="BODY"&&c!=="HTML"&&(a.scrollLeft||a.scrollTop)){e-=a.scrollLeft||0;f-=a.scrollTop||0;b=Sys.UI.DomElement._getCurrentStyle(a);if(b){e+=parseInt(b.borderLeftWidth)||0;f+=parseInt(b.borderTopWidth)||0}}}return new Sys.UI.Point(e,f)}}Sys.UI.DomElement.removeCssClass=function(d,c){var a=" "+d.className+" ",b=a.indexOf(" "+c+" ");if(b>=0)d.className=(a.substr(0,b)+" "+a.substring(b+c.length+1,a.length)).trim()};Sys.UI.DomElement.setLocation=function(b,c,d){var a=b.style;a.position="absolute";a.left=c+"px";a.top=d+"px"};Sys.UI.DomElement.toggleCssClass=function(b,a){if(Sys.UI.DomElement.containsCssClass(b,a))Sys.UI.DomElement.removeCssClass(b,a);else Sys.UI.DomElement.addCssClass(b,a)};Sys.UI.DomElement.getVisibilityMode=function(a){return a._visibilityMode===Sys.UI.VisibilityMode.hide?Sys.UI.VisibilityMode.hide:Sys.UI.VisibilityMode.collapse};Sys.UI.DomElement.setVisibilityMode=function(a,b){Sys.UI.DomElement._ensureOldDisplayMode(a);if(a._visibilityMode!==b){a._visibilityMode=b;if(Sys.UI.DomElement.getVisible(a)===false)if(a._visibilityMode===Sys.UI.VisibilityMode.hide)a.style.display=a._oldDisplayMode;else a.style.display="none";a._visibilityMode=b}};Sys.UI.DomElement.getVisible=function(b){var a=b.currentStyle||Sys.UI.DomElement._getCurrentStyle(b);if(!a)return true;return a.visibility!=="hidden"&&a.display!=="none"};Sys.UI.DomElement.setVisible=function(a,b){if(b!==Sys.UI.DomElement.getVisible(a)){Sys.UI.DomElement._ensureOldDisplayMode(a);a.style.visibility=b?"visible":"hidden";if(b||a._visibilityMode===Sys.UI.VisibilityMode.hide)a.style.display=a._oldDisplayMode;else a.style.display="none"}};Sys.UI.DomElement._ensureOldDisplayMode=function(a){if(!a._oldDisplayMode){var b=a.currentStyle||Sys.UI.DomElement._getCurrentStyle(a);a._oldDisplayMode=b?b.display:null;if(!a._oldDisplayMode||a._oldDisplayMode==="none")switch(a.tagName.toUpperCase()){case "DIV":case "P":case "ADDRESS":case "BLOCKQUOTE":case "BODY":case "COL":case "COLGROUP":case "DD":case "DL":case "DT":case "FIELDSET":case "FORM":case "H1":case "H2":case "H3":case "H4":case "H5":case "H6":case "HR":case "IFRAME":case "LEGEND":case "OL":case "PRE":case "TABLE":case "TD":case "TH":case "TR":case "UL":a._oldDisplayMode="block";break;case "LI":a._oldDisplayMode="list-item";break;default:a._oldDisplayMode="inline"}}};Sys.UI.DomElement._getWindow=function(a){var b=a.ownerDocument||a.document||a;return b.defaultView||b.parentWindow};Sys.UI.DomElement._getCurrentStyle=function(a){if(a.nodeType===3)return null;var c=Sys.UI.DomElement._getWindow(a);if(a.documentElement)a=a.documentElement;var b=c&&a!==c&&c.getComputedStyle?c.getComputedStyle(a,null):a.currentStyle||a.style;if(!b&&Sys.Browser.agent===Sys.Browser.Safari&&a.style){var g=a.style.display,f=a.style.position;a.style.position="absolute";a.style.display="block";var e=c.getComputedStyle(a,null);a.style.display=g;a.style.position=f;b={};for(var d in e)b[d]=e[d];b.display="none"}return b};Sys.IContainer=function(){};Sys.IContainer.prototype={};Sys.IContainer.registerInterface("Sys.IContainer");Sys._ScriptLoader=function(){this._scriptsToLoad=null;this._sessions=[];this._scriptLoadedDelegate=Function.createDelegate(this,this._scriptLoadedHandler)};Sys._ScriptLoader.prototype={dispose:function(){this._stopSession();this._loading=false;if(this._events)delete this._events;this._sessions=null;this._currentSession=null;this._scriptLoadedDelegate=null},loadScripts:function(d,b,c,a){var e={allScriptsLoadedCallback:b,scriptLoadFailedCallback:c,scriptLoadTimeoutCallback:a,scriptsToLoad:this._scriptsToLoad,scriptTimeout:d};this._scriptsToLoad=null;this._sessions[this._sessions.length]=e;if(!this._loading)this._nextSession()},notifyScriptLoaded:function(){if(!this._loading)return;this._currentTask._notified++;if(Sys.Browser.agent===Sys.Browser.Safari)if(this._currentTask._notified===1)window.setTimeout(Function.createDelegate(this,function(){this._scriptLoadedHandler(this._currentTask.get_scriptElement(),true)}),0)},queueCustomScriptTag:function(a){if(!this._scriptsToLoad)this._scriptsToLoad=[];Array.add(this._scriptsToLoad,a)},queueScriptBlock:function(a){if(!this._scriptsToLoad)this._scriptsToLoad=[];Array.add(this._scriptsToLoad,{text:a})},queueScriptReference:function(a){if(!this._scriptsToLoad)this._scriptsToLoad=[];Array.add(this._scriptsToLoad,{src:a})},_createScriptElement:function(c){var a=document.createElement("script");a.type="text/javascript";for(var b in c)a[b]=c[b];return a},_loadScriptsInternal:function(){var b=this._currentSession;if(b.scriptsToLoad&&b.scriptsToLoad.length>0){var c=Array.dequeue(b.scriptsToLoad),a=this._createScriptElement(c);if(a.text&&Sys.Browser.agent===Sys.Browser.Safari){a.innerHTML=a.text;delete a.text}if(typeof c.src==="string"){this._currentTask=new Sys._ScriptLoaderTask(a,this._scriptLoadedDelegate);this._currentTask.execute()}else{document.getElementsByTagName("head")[0].appendChild(a);Sys._ScriptLoader._clearScript(a);this._loadScriptsInternal()}}else{this._stopSession();var d=b.allScriptsLoadedCallback;if(d)d(this);this._nextSession()}},_nextSession:function(){if(this._sessions.length===0){this._loading=false;this._currentSession=null;return}this._loading=true;var a=Array.dequeue(this._sessions);this._currentSession=a;if(a.scriptTimeout>0)this._timeoutCookie=window.setTimeout(Function.createDelegate(this,this._scriptLoadTimeoutHandler),a.scriptTimeout*1000);this._loadScriptsInternal()},_raiseError:function(a){var c=this._currentSession.scriptLoadFailedCallback,b=this._currentTask.get_scriptElement();this._stopSession();if(c){c(this,b,a);this._nextSession()}else{this._loading=false;throw Sys._ScriptLoader._errorScriptLoadFailed(b.src,a)}},_scriptLoadedHandler:function(a,b){if(b&&this._currentTask._notified)if(this._currentTask._notified>1)this._raiseError(true);else{Array.add(Sys._ScriptLoader._getLoadedScripts(),a.src);this._currentTask.dispose();this._currentTask=null;this._loadScriptsInternal()}else this._raiseError(false)},_scriptLoadTimeoutHandler:function(){var a=this._currentSession.scriptLoadTimeoutCallback;this._stopSession();if(a)a(this);this._nextSession()},_stopSession:function(){if(this._timeoutCookie){window.clearTimeout(this._timeoutCookie);this._timeoutCookie=null}if(this._currentTask){this._currentTask.dispose();this._currentTask=null}}};Sys._ScriptLoader.registerClass("Sys._ScriptLoader",null,Sys.IDisposable);Sys._ScriptLoader.getInstance=function(){var a=Sys._ScriptLoader._activeInstance;if(!a)a=Sys._ScriptLoader._activeInstance=new Sys._ScriptLoader;return a};Sys._ScriptLoader.isScriptLoaded=function(b){var a=document.createElement("script");a.src=b;return Array.contains(Sys._ScriptLoader._getLoadedScripts(),a.src)};Sys._ScriptLoader.readLoadedScripts=function(){if(!Sys._ScriptLoader._referencedScripts){var b=Sys._ScriptLoader._referencedScripts=[],c=document.getElementsByTagName("script");for(i=c.length-1;i>=0;i--){var d=c[i],a=d.src;if(a.length)if(!Array.contains(b,a))Array.add(b,a)}}};Sys._ScriptLoader._clearScript=function(a){if(!Sys.Debug.isDebug)a.parentNode.removeChild(a)};Sys._ScriptLoader._errorScriptLoadFailed=function(b,d){var a;if(d)a=Sys.Res.scriptLoadMultipleCallbacks;else a=Sys.Res.scriptLoadFailed;var e="Sys.ScriptLoadFailedException: "+String.format(a,b),c=Error.create(e,{name:"Sys.ScriptLoadFailedException","scriptUrl":b});c.popStackFrame();return c};Sys._ScriptLoader._getLoadedScripts=function(){if(!Sys._ScriptLoader._referencedScripts){Sys._ScriptLoader._referencedScripts=[];Sys._ScriptLoader.readLoadedScripts()}return Sys._ScriptLoader._referencedScripts};Sys._ScriptLoaderTask=function(b,a){this._scriptElement=b;this._completedCallback=a;this._notified=0};Sys._ScriptLoaderTask.prototype={get_scriptElement:function(){return this._scriptElement},dispose:function(){if(this._disposed)return;this._disposed=true;this._removeScriptElementHandlers();Sys._ScriptLoader._clearScript(this._scriptElement);this._scriptElement=null},execute:function(){this._addScriptElementHandlers();document.getElementsByTagName("head")[0].appendChild(this._scriptElement)},_addScriptElementHandlers:function(){this._scriptLoadDelegate=Function.createDelegate(this,this._scriptLoadHandler);if(Sys.Browser.agent!==Sys.Browser.InternetExplorer){this._scriptElement.readyState="loaded";$addHandler(this._scriptElement,"load",this._scriptLoadDelegate)}else $addHandler(this._scriptElement,"readystatechange",this._scriptLoadDelegate);if(this._scriptElement.addEventListener){this._scriptErrorDelegate=Function.createDelegate(this,this._scriptErrorHandler);this._scriptElement.addEventListener("error",this._scriptErrorDelegate,false)}},_removeScriptElementHandlers:function(){if(this._scriptLoadDelegate){var a=this.get_scriptElement();if(Sys.Browser.agent!==Sys.Browser.InternetExplorer)$removeHandler(a,"load",this._scriptLoadDelegate);else $removeHandler(a,"readystatechange",this._scriptLoadDelegate);if(this._scriptErrorDelegate){this._scriptElement.removeEventListener("error",this._scriptErrorDelegate,false);this._scriptErrorDelegate=null}this._scriptLoadDelegate=null}},_scriptErrorHandler:function(){if(this._disposed)return;this._completedCallback(this.get_scriptElement(),false)},_scriptLoadHandler:function(){if(this._disposed)return;var a=this.get_scriptElement();if(a.readyState!=="loaded"&&a.readyState!=="complete")return;var b=this;window.setTimeout(function(){b._completedCallback(a,true)},0)}};Sys._ScriptLoaderTask.registerClass("Sys._ScriptLoaderTask",null,Sys.IDisposable);Sys.ApplicationLoadEventArgs=function(b,a){Sys.ApplicationLoadEventArgs.initializeBase(this);this._components=b;this._isPartialLoad=a};Sys.ApplicationLoadEventArgs.prototype={get_components:function(){return this._components},get_isPartialLoad:function(){return this._isPartialLoad}};Sys.ApplicationLoadEventArgs.registerClass("Sys.ApplicationLoadEventArgs",Sys.EventArgs);Sys.HistoryEventArgs=function(a){Sys.HistoryEventArgs.initializeBase(this);this._state=a};Sys.HistoryEventArgs.prototype={get_state:function(){return this._state}};Sys.HistoryEventArgs.registerClass("Sys.HistoryEventArgs",Sys.EventArgs);Sys._Application=function(){Sys._Application.initializeBase(this);this._disposableObjects=[];this._components={};this._createdComponents=[];this._secondPassComponents=[];this._appLoadHandler=null;this._beginRequestHandler=null;this._clientId=null;this._currentEntry="";this._endRequestHandler=null;this._history=null;this._enableHistory=false;this._historyFrame=null;this._historyInitialized=false;this._historyInitialLength=0;this._historyLength=0;this._historyPointIsNew=false;this._ignoreTimer=false;this._initialState=null;this._state={};this._timerCookie=0;this._timerHandler=null;this._uniqueId=null;this._unloadHandlerDelegate=Function.createDelegate(this,this._unloadHandler);this._loadHandlerDelegate=Function.createDelegate(this,this._loadHandler);Sys.UI.DomEvent.addHandler(window,"unload",this._unloadHandlerDelegate);Sys.UI.DomEvent.addHandler(window,"load",this._loadHandlerDelegate)};Sys._Application.prototype={_creatingComponents:false,_disposing:false,get_isCreatingComponents:function(){return this._creatingComponents},get_stateString:function(){var a=window.location.hash;if(this._isSafari2()){var b=this._getHistory();if(b)a=b[window.history.length-this._historyInitialLength]}if(a.length>0&&a.charAt(0)==="#")a=a.substring(1);if(Sys.Browser.agent===Sys.Browser.Firefox)a=this._serializeState(this._deserializeState(a,true));return a},get_enableHistory:function(){return this._enableHistory},set_enableHistory:function(a){this._enableHistory=a},add_init:function(a){if(this._initialized)a(this,Sys.EventArgs.Empty);else this.get_events().addHandler("init",a)},remove_init:function(a){this.get_events().removeHandler("init",a)},add_load:function(a){this.get_events().addHandler("load",a)},remove_load:function(a){this.get_events().removeHandler("load",a)},add_navigate:function(a){this.get_events().addHandler("navigate",a)},remove_navigate:function(a){this.get_events().removeHandler("navigate",a)},add_unload:function(a){this.get_events().addHandler("unload",a)},remove_unload:function(a){this.get_events().removeHandler("unload",a)},addComponent:function(a){this._components[a.get_id()]=a},addHistoryPoint:function(c,f){this._ensureHistory();var b=this._state;for(var a in c){var d=c[a];if(d===null){if(typeof b[a]!=="undefined")delete b[a]}else b[a]=d}var e=this._serializeState(b);this._historyPointIsNew=true;this._setState(e,f);this._raiseNavigate()},beginCreateComponents:function(){this._creatingComponents=true},dispose:function(){if(!this._disposing){this._disposing=true;if(this._timerCookie){window.clearTimeout(this._timerCookie);delete this._timerCookie}if(this._endRequestHandler){Sys.WebForms.PageRequestManager.getInstance().remove_endRequest(this._endRequestHandler);delete this._endRequestHandler}if(this._beginRequestHandler){Sys.WebForms.PageRequestManager.getInstance().remove_beginRequest(this._beginRequestHandler);delete this._beginRequestHandler}if(window.pageUnload)window.pageUnload(this,Sys.EventArgs.Empty);var c=this.get_events().getHandler("unload");if(c)c(this,Sys.EventArgs.Empty);var b=Array.clone(this._disposableObjects);for(var a=0,e=b.length;a<e;a++)b[a].dispose();Array.clear(this._disposableObjects);Sys.UI.DomEvent.removeHandler(window,"unload",this._unloadHandlerDelegate);if(this._loadHandlerDelegate){Sys.UI.DomEvent.removeHandler(window,"load",this._loadHandlerDelegate);this._loadHandlerDelegate=null}var d=Sys._ScriptLoader.getInstance();if(d)d.dispose();Sys._Application.callBaseMethod(this,"dispose")}},endCreateComponents:function(){var b=this._secondPassComponents;for(var a=0,d=b.length;a<d;a++){var c=b[a].component;Sys$Component$_setReferences(c,b[a].references);c.endUpdate()}this._secondPassComponents=[];this._creatingComponents=false},findComponent:function(b,a){return a?Sys.IContainer.isInstanceOfType(a)?a.findComponent(b):a[b]||null:Sys.Application._components[b]||null},getComponents:function(){var a=[],b=this._components;for(var c in b)a[a.length]=b[c];return a},initialize:function(){if(!this._initialized&&!this._initializing){this._initializing=true;var a,g,d=this;function b(){if(!d._initialized)d._doInitialize()}var c=function(){Sys.UI.DomEvent.removeHandler(window,"load",c);b()};Sys.UI.DomEvent.addHandler(window,"load",c);if(document.addEventListener)try{document.addEventListener("DOMContentLoaded",a=function(){document.removeEventListener("DOMContentLoaded",a,false);b()},false)}catch(h){}else if(document.attachEvent)if(window==window.top&&document.documentElement.doScroll){var f,e=document.createElement("div");a=function(){try{e.doScroll("left")}catch(c){f=window.setTimeout(a,0);return}e=null;b()};a()}else document.attachEvent("onreadystatechange",a=function(){if(document.readyState==="complete"){document.detachEvent("onreadystatechange",a);b()}})}},notifyScriptLoaded:function(){var a=Sys._ScriptLoader.getInstance();if(a)a.notifyScriptLoaded()},registerDisposableObject:function(a){if(!this._disposing)this._disposableObjects[this._disposableObjects.length]=a},raiseLoad:function(){var b=this.get_events().getHandler("load"),a=new Sys.ApplicationLoadEventArgs(Array.clone(this._createdComponents),!this._initializing);if(b)b(this,a);if(window.pageLoad)window.pageLoad(this,a);this._createdComponents=[]},removeComponent:function(b){var a=b.get_id();if(a)delete this._components[a]},setServerId:function(a,b){this._clientId=a;this._uniqueId=b},setServerState:function(a){this._ensureHistory();this._state.__s=a;this._updateHiddenField(a)},unregisterDisposableObject:function(a){if(!this._disposing)Array.remove(this._disposableObjects,a)},_addComponentToSecondPass:function(b,a){this._secondPassComponents[this._secondPassComponents.length]={component:b,references:a}},_deserializeState:function(a,i){var e={};a=a||"";var b=a.indexOf("&&");if(b!==-1&&b+2<a.length){e.__s=a.substr(b+2);a=a.substr(0,b)}var g=a.split("&");for(var f=0,k=g.length;f<k;f++){var d=g[f],c=d.indexOf("=");if(c!==-1&&c+1<d.length){var j=d.substr(0,c),h=d.substr(c+1);e[j]=i?h:decodeURIComponent(h)}}return e},_doInitialize:function(){Sys._Application.callBaseMethod(this,"initialize");var b=this.get_events().getHandler("init");if(b){this.beginCreateComponents();b(this,Sys.EventArgs.Empty);this.endCreateComponents()}if(Sys.WebForms){this._beginRequestHandler=Function.createDelegate(this,this._onPageRequestManagerBeginRequest);Sys.WebForms.PageRequestManager.getInstance().add_beginRequest(this._beginRequestHandler);this._endRequestHandler=Function.createDelegate(this,this._onPageRequestManagerEndRequest);Sys.WebForms.PageRequestManager.getInstance().add_endRequest(this._endRequestHandler)}var a=this.get_stateString();if(a!==this._currentEntry)this._navigate(a);this.raiseLoad();this._initializing=false},_enableHistoryInScriptManager:function(){this._enableHistory=true},_ensureHistory:function(){if(!this._historyInitialized&&this._enableHistory){if(Sys.Browser.agent===Sys.Browser.InternetExplorer&&Sys.Browser.documentMode<8){this._historyFrame=document.getElementById("__historyFrame");this._ignoreIFrame=true}if(this._isSafari2()){var a=document.getElementById("__history");this._setHistory([window.location.hash]);this._historyInitialLength=window.history.length}this._timerHandler=Function.createDelegate(this,this._onIdle);this._timerCookie=window.setTimeout(this._timerHandler,100);try{this._initialState=this._deserializeState(this.get_stateString())}catch(b){}this._historyInitialized=true}},_getHistory:function(){var a=document.getElementById("__history");if(!a)return "";var b=a.value;return b?Sys.Serialization.JavaScriptSerializer.deserialize(b,true):""},_isSafari2:function(){return Sys.Browser.agent===Sys.Browser.Safari&&Sys.Browser.version<=419.3},_loadHandler:function(){if(this._loadHandlerDelegate){Sys.UI.DomEvent.removeHandler(window,"load",this._loadHandlerDelegate);this._loadHandlerDelegate=null}this.initialize()},_navigate:function(c){this._ensureHistory();var b=this._deserializeState(c);if(this._uniqueId){var d=this._state.__s||"",a=b.__s||"";if(a!==d){this._updateHiddenField(a);__doPostBack(this._uniqueId,a);this._state=b;return}}this._setState(c);this._state=b;this._raiseNavigate()},_onIdle:function(){delete this._timerCookie;var a=this.get_stateString();if(a!==this._currentEntry){if(!this._ignoreTimer){this._historyPointIsNew=false;this._navigate(a);this._historyLength=window.history.length}}else this._ignoreTimer=false;this._timerCookie=window.setTimeout(this._timerHandler,100)},_onIFrameLoad:function(a){this._ensureHistory();if(!this._ignoreIFrame){this._historyPointIsNew=false;this._navigate(a)}this._ignoreIFrame=false},_onPageRequestManagerBeginRequest:function(){this._ignoreTimer=true},_onPageRequestManagerEndRequest:function(e,d){var b=d.get_dataItems()[this._clientId],a=document.getElementById("__EVENTTARGET");if(a&&a.value===this._uniqueId)a.value="";if(typeof b!=="undefined"){this.setServerState(b);this._historyPointIsNew=true}else this._ignoreTimer=false;var c=this._serializeState(this._state);if(c!==this._currentEntry){this._ignoreTimer=true;this._setState(c);this._raiseNavigate()}},_raiseNavigate:function(){var c=this.get_events().getHandler("navigate"),b={};for(var a in this._state)if(a!=="__s")b[a]=this._state[a];var d=new Sys.HistoryEventArgs(b);if(c)c(this,d)},_serializeState:function(d){var b=[];for(var a in d){var e=d[a];if(a==="__s")var c=e;else b[b.length]=a+"="+encodeURIComponent(e)}return b.join("&")+(c?"&&"+c:"")},_setHistory:function(b){var a=document.getElementById("__history");if(a)a.value=Sys.Serialization.JavaScriptSerializer.serialize(b)},_setState:function(a,c){a=a||"";if(a!==this._currentEntry){if(window.theForm){var e=window.theForm.action,f=e.indexOf("#");window.theForm.action=(f!==-1?e.substring(0,f):e)+"#"+a}if(this._historyFrame&&this._historyPointIsNew){this._ignoreIFrame=true;this._historyPointIsNew=false;var d=this._historyFrame.contentWindow.document;d.open("javascript:'<html></html>'");d.write("<html><head><title>"+(c||document.title)+"</title><scri"+'pt type="text/javascript">parent.Sys.Application._onIFrameLoad(\''+a+"');</scri"+"pt></head><body></body></html>");d.close()}this._ignoreTimer=false;var h=this.get_stateString();this._currentEntry=a;if(a!==h){if(this._isSafari2()){var g=this._getHistory();g[window.history.length-this._historyInitialLength+1]=a;this._setHistory(g);this._historyLength=window.history.length+1;var b=document.createElement("form");b.method="get";b.action="#"+a;document.appendChild(b);b.submit();document.removeChild(b)}else window.location.hash=a;if(typeof c!=="undefined"&&c!==null)document.title=c}}},_unloadHandler:function(){this.dispose()},_updateHiddenField:function(b){if(this._clientId){var a=document.getElementById(this._clientId);if(a)a.value=b}}};Sys._Application.registerClass("Sys._Application",Sys.Component,Sys.IContainer);Sys.Application=new Sys._Application;var $find=Sys.Application.findComponent;Type.registerNamespace("Sys.Net");Sys.Net.WebRequestExecutor=function(){this._webRequest=null;this._resultObject=null};Sys.Net.WebRequestExecutor.prototype={get_webRequest:function(){return this._webRequest},_set_webRequest:function(a){this._webRequest=a},get_started:function(){throw Error.notImplemented()},get_responseAvailable:function(){throw Error.notImplemented()},get_timedOut:function(){throw Error.notImplemented()},get_aborted:function(){throw Error.notImplemented()},get_responseData:function(){throw Error.notImplemented()},get_statusCode:function(){throw Error.notImplemented()},get_statusText:function(){throw Error.notImplemented()},get_xml:function(){throw Error.notImplemented()},get_object:function(){if(!this._resultObject)this._resultObject=Sys.Serialization.JavaScriptSerializer.deserialize(this.get_responseData());return this._resultObject},executeRequest:function(){throw Error.notImplemented()},abort:function(){throw Error.notImplemented()},getResponseHeader:function(){throw Error.notImplemented()},getAllResponseHeaders:function(){throw Error.notImplemented()}};Sys.Net.WebRequestExecutor.registerClass("Sys.Net.WebRequestExecutor");Sys.Net.XMLDOM=function(d){if(!window.DOMParser){var c=["Msxml2.DOMDocument.3.0","Msxml2.DOMDocument"];for(var b=0,f=c.length;b<f;b++)try{var a=new ActiveXObject(c[b]);a.async=false;a.loadXML(d);a.setProperty("SelectionLanguage","XPath");return a}catch(g){}}else try{var e=new window.DOMParser;return e.parseFromString(d,"text/xml")}catch(g){}return null};Sys.Net.XMLHttpExecutor=function(){Sys.Net.XMLHttpExecutor.initializeBase(this);var a=this;this._xmlHttpRequest=null;this._webRequest=null;this._responseAvailable=false;this._timedOut=false;this._timer=null;this._aborted=false;this._started=false;this._onReadyStateChange=function(){if(a._xmlHttpRequest.readyState===4){try{if(typeof a._xmlHttpRequest.status==="undefined")return}catch(b){return}a._clearTimer();a._responseAvailable=true;try{a._webRequest.completed(Sys.EventArgs.Empty)}finally{if(a._xmlHttpRequest!=null){a._xmlHttpRequest.onreadystatechange=Function.emptyMethod;a._xmlHttpRequest=null}}}};this._clearTimer=function(){if(a._timer!=null){window.clearTimeout(a._timer);a._timer=null}};this._onTimeout=function(){if(!a._responseAvailable){a._clearTimer();a._timedOut=true;a._xmlHttpRequest.onreadystatechange=Function.emptyMethod;a._xmlHttpRequest.abort();a._webRequest.completed(Sys.EventArgs.Empty);a._xmlHttpRequest=null}}};Sys.Net.XMLHttpExecutor.prototype={get_timedOut:function(){return this._timedOut},get_started:function(){return this._started},get_responseAvailable:function(){return this._responseAvailable},get_aborted:function(){return this._aborted},executeRequest:function(){this._webRequest=this.get_webRequest();var c=this._webRequest.get_body(),a=this._webRequest.get_headers();this._xmlHttpRequest=new XMLHttpRequest;this._xmlHttpRequest.onreadystatechange=this._onReadyStateChange;var e=this._webRequest.get_httpVerb();this._xmlHttpRequest.open(e,this._webRequest.getResolvedUrl(),true);if(a)for(var b in a){var f=a[b];if(typeof f!=="function")this._xmlHttpRequest.setRequestHeader(b,f)}if(e.toLowerCase()==="post"){if(a===null||!a["Content-Type"])this._xmlHttpRequest.setRequestHeader("Content-Type","application/x-www-form-urlencoded; charset=utf-8");if(!c)c=""}var d=this._webRequest.get_timeout();if(d>0)this._timer=window.setTimeout(Function.createDelegate(this,this._onTimeout),d);this._xmlHttpRequest.send(c);this._started=true},getResponseHeader:function(b){var a;try{a=this._xmlHttpRequest.getResponseHeader(b)}catch(c){}if(!a)a="";return a},getAllResponseHeaders:function(){return this._xmlHttpRequest.getAllResponseHeaders()},get_responseData:function(){return this._xmlHttpRequest.responseText},get_statusCode:function(){var a=0;try{a=this._xmlHttpRequest.status}catch(b){}return a},get_statusText:function(){return this._xmlHttpRequest.statusText},get_xml:function(){var a=this._xmlHttpRequest.responseXML;if(!a||!a.documentElement){a=Sys.Net.XMLDOM(this._xmlHttpRequest.responseText);if(!a||!a.documentElement)return null}else if(navigator.userAgent.indexOf("MSIE")!==-1&&typeof a.setProperty!="undefined")a.setProperty("SelectionLanguage","XPath");if(a.documentElement.namespaceURI==="http://www.mozilla.org/newlayout/xml/parsererror.xml"&&a.documentElement.tagName==="parsererror")return null;if(a.documentElement.firstChild&&a.documentElement.firstChild.tagName==="parsererror")return null;return a},abort:function(){if(this._aborted||this._responseAvailable||this._timedOut)return;this._aborted=true;this._clearTimer();if(this._xmlHttpRequest&&!this._responseAvailable){this._xmlHttpRequest.onreadystatechange=Function.emptyMethod;this._xmlHttpRequest.abort();this._xmlHttpRequest=null;this._webRequest.completed(Sys.EventArgs.Empty)}}};Sys.Net.XMLHttpExecutor.registerClass("Sys.Net.XMLHttpExecutor",Sys.Net.WebRequestExecutor);Sys.Net._WebRequestManager=function(){this._defaultTimeout=0;this._defaultExecutorType="Sys.Net.XMLHttpExecutor"};Sys.Net._WebRequestManager.prototype={add_invokingRequest:function(a){this._get_eventHandlerList().addHandler("invokingRequest",a)},remove_invokingRequest:function(a){this._get_eventHandlerList().removeHandler("invokingRequest",a)},add_completedRequest:function(a){this._get_eventHandlerList().addHandler("completedRequest",a)},remove_completedRequest:function(a){this._get_eventHandlerList().removeHandler("completedRequest",a)},_get_eventHandlerList:function(){if(!this._events)this._events=new Sys.EventHandlerList;return this._events},get_defaultTimeout:function(){return this._defaultTimeout},set_defaultTimeout:function(a){this._defaultTimeout=a},get_defaultExecutorType:function(){return this._defaultExecutorType},set_defaultExecutorType:function(a){this._defaultExecutorType=a},executeRequest:function(webRequest){var executor=webRequest.get_executor();if(!executor){var failed=false;try{var executorType=eval(this._defaultExecutorType);executor=new executorType}catch(a){failed=true}webRequest.set_executor(executor)}if(executor.get_aborted())return;var evArgs=new Sys.Net.NetworkRequestEventArgs(webRequest),handler=this._get_eventHandlerList().getHandler("invokingRequest");if(handler)handler(this,evArgs);if(!evArgs.get_cancel())executor.executeRequest()}};Sys.Net._WebRequestManager.registerClass("Sys.Net._WebRequestManager");Sys.Net.WebRequestManager=new Sys.Net._WebRequestManager;Sys.Net.NetworkRequestEventArgs=function(a){Sys.Net.NetworkRequestEventArgs.initializeBase(this);this._webRequest=a};Sys.Net.NetworkRequestEventArgs.prototype={get_webRequest:function(){return this._webRequest}};Sys.Net.NetworkRequestEventArgs.registerClass("Sys.Net.NetworkRequestEventArgs",Sys.CancelEventArgs);Sys.Net.WebRequest=function(){this._url="";this._headers={};this._body=null;this._userContext=null;this._httpVerb=null;this._executor=null;this._invokeCalled=false;this._timeout=0};Sys.Net.WebRequest.prototype={add_completed:function(a){this._get_eventHandlerList().addHandler("completed",a)},remove_completed:function(a){this._get_eventHandlerList().removeHandler("completed",a)},completed:function(b){var a=Sys.Net.WebRequestManager._get_eventHandlerList().getHandler("completedRequest");if(a)a(this._executor,b);a=this._get_eventHandlerList().getHandler("completed");if(a)a(this._executor,b)},_get_eventHandlerList:function(){if(!this._events)this._events=new Sys.EventHandlerList;return this._events},get_url:function(){return this._url},set_url:function(a){this._url=a},get_headers:function(){return this._headers},get_httpVerb:function(){if(this._httpVerb===null){if(this._body===null)return "GET";return "POST"}return this._httpVerb},set_httpVerb:function(a){this._httpVerb=a},get_body:function(){return this._body},set_body:function(a){this._body=a},get_userContext:function(){return this._userContext},set_userContext:function(a){this._userContext=a},get_executor:function(){return this._executor},set_executor:function(a){this._executor=a;this._executor._set_webRequest(this)},get_timeout:function(){if(this._timeout===0)return Sys.Net.WebRequestManager.get_defaultTimeout();return this._timeout},set_timeout:function(a){this._timeout=a},getResolvedUrl:function(){return Sys.Net.WebRequest._resolveUrl(this._url)},invoke:function(){Sys.Net.WebRequestManager.executeRequest(this);this._invokeCalled=true}};Sys.Net.WebRequest._resolveUrl=function(b,a){if(b&&b.indexOf("://")!==-1)return b;if(!a||a.length===0){var d=document.getElementsByTagName("base")[0];if(d&&d.href&&d.href.length>0)a=d.href;else a=document.URL}var c=a.indexOf("?");if(c!==-1)a=a.substr(0,c);c=a.indexOf("#");if(c!==-1)a=a.substr(0,c);a=a.substr(0,a.lastIndexOf("/")+1);if(!b||b.length===0)return a;if(b.charAt(0)==="/"){var e=a.indexOf("://"),g=a.indexOf("/",e+3);return a.substr(0,g)+b}else{var f=a.lastIndexOf("/");return a.substr(0,f+1)+b}};Sys.Net.WebRequest._createQueryString=function(d,b){if(!b)b=encodeURIComponent;var a=new Sys.StringBuilder,f=0;for(var c in d){var e=d[c];if(typeof e==="function")continue;var g=Sys.Serialization.JavaScriptSerializer.serialize(e);if(f!==0)a.append("&");a.append(c);a.append("=");a.append(b(g));f++}return a.toString()};Sys.Net.WebRequest._createUrl=function(a,b){if(!b)return a;var d=Sys.Net.WebRequest._createQueryString(b);if(d.length>0){var c="?";if(a&&a.indexOf("?")!==-1)c="&";return a+c+d}else return a};Sys.Net.WebRequest.registerClass("Sys.Net.WebRequest");Sys.Net.WebServiceProxy=function(){};Sys.Net.WebServiceProxy.prototype={get_timeout:function(){return this._timeout},set_timeout:function(a){if(a<0)throw Error.argumentOutOfRange("value",a,Sys.Res.invalidTimeout);this._timeout=a},get_defaultUserContext:function(){return this._userContext},set_defaultUserContext:function(a){this._userContext=a},get_defaultSucceededCallback:function(){return this._succeeded},set_defaultSucceededCallback:function(a){this._succeeded=a},get_defaultFailedCallback:function(){return this._failed},set_defaultFailedCallback:function(a){this._failed=a},get_path:function(){return this._path},set_path:function(a){this._path=a},_invoke:function(d,e,g,f,c,b,a){if(c===null||typeof c==="undefined")c=this.get_defaultSucceededCallback();if(b===null||typeof b==="undefined")b=this.get_defaultFailedCallback();if(a===null||typeof a==="undefined")a=this.get_defaultUserContext();return Sys.Net.WebServiceProxy.invoke(d,e,g,f,c,b,a,this.get_timeout())}};Sys.Net.WebServiceProxy.registerClass("Sys.Net.WebServiceProxy");Sys.Net.WebServiceProxy.invoke=function(k,a,j,d,i,c,f,h){var b=new Sys.Net.WebRequest;b.get_headers()["Content-Type"]="application/json; charset=utf-8";if(!d)d={};var g=d;if(!j||!g)g={};b.set_url(Sys.Net.WebRequest._createUrl(k+"/"+encodeURIComponent(a),g));var e=null;if(!j){e=Sys.Serialization.JavaScriptSerializer.serialize(d);if(e==="{}")e=""}b.set_body(e);b.add_completed(l);if(h&&h>0)b.set_timeout(h);b.invoke();function l(d){if(d.get_responseAvailable()){var g=d.get_statusCode(),b=null;try{var e=d.getResponseHeader("Content-Type");if(e.startsWith("application/json"))b=d.get_object();else if(e.startsWith("text/xml"))b=d.get_xml();else b=d.get_responseData()}catch(m){}var k=d.getResponseHeader("jsonerror"),h=k==="true";if(h){if(b)b=new Sys.Net.WebServiceError(false,b.Message,b.StackTrace,b.ExceptionType)}else if(e.startsWith("application/json"))b=b.d;if(g<200||g>=300||h){if(c){if(!b||!h)b=new Sys.Net.WebServiceError(false,String.format(Sys.Res.webServiceFailedNoMsg,a),"","");b._statusCode=g;c(b,f,a)}}else if(i)i(b,f,a)}else{var j;if(d.get_timedOut())j=String.format(Sys.Res.webServiceTimedOut,a);else j=String.format(Sys.Res.webServiceFailedNoMsg,a);if(c)c(new Sys.Net.WebServiceError(d.get_timedOut(),j,"",""),f,a)}}return b};Sys.Net.WebServiceProxy._generateTypedConstructor=function(a){return function(b){if(b)for(var c in b)this[c]=b[c];this.__type=a}};Sys.Net.WebServiceError=function(c,d,b,a){this._timedOut=c;this._message=d;this._stackTrace=b;this._exceptionType=a;this._statusCode=-1};Sys.Net.WebServiceError.prototype={get_timedOut:function(){return this._timedOut},get_statusCode:function(){return this._statusCode},get_message:function(){return this._message},get_stackTrace:function(){return this._stackTrace},get_exceptionType:function(){return this._exceptionType}};Sys.Net.WebServiceError.registerClass("Sys.Net.WebServiceError");Type.registerNamespace("Sys.Services");Sys.Services._ProfileService=function(){Sys.Services._ProfileService.initializeBase(this);this.properties={}};Sys.Services._ProfileService.DefaultWebServicePath="";Sys.Services._ProfileService.prototype={_defaultLoadCompletedCallback:null,_defaultSaveCompletedCallback:null,_path:"",_timeout:0,get_defaultLoadCompletedCallback:function(){return this._defaultLoadCompletedCallback},set_defaultLoadCompletedCallback:function(a){this._defaultLoadCompletedCallback=a},get_defaultSaveCompletedCallback:function(){return this._defaultSaveCompletedCallback},set_defaultSaveCompletedCallback:function(a){this._defaultSaveCompletedCallback=a},get_path:function(){return this._path||""},load:function(c,d,e,f){var b,a;if(!c){a="GetAllPropertiesForCurrentUser";b={authenticatedUserOnly:false}}else{a="GetPropertiesForCurrentUser";b={properties:this._clonePropertyNames(c),authenticatedUserOnly:false}}this._invoke(this._get_path(),a,false,b,Function.createDelegate(this,this._onLoadComplete),Function.createDelegate(this,this._onLoadFailed),[d,e,f])},save:function(d,b,c,e){var a=this._flattenProperties(d,this.properties);this._invoke(this._get_path(),"SetPropertiesForCurrentUser",false,{values:a.value,authenticatedUserOnly:false},Function.createDelegate(this,this._onSaveComplete),Function.createDelegate(this,this._onSaveFailed),[b,c,e,a.count])},_clonePropertyNames:function(e){var c=[],d={};for(var b=0;b<e.length;b++){var a=e[b];if(!d[a]){Array.add(c,a);d[a]=true}}return c},_flattenProperties:function(a,i,j){var b={},e,d,g=0;if(a&&a.length===0)return {value:b,count:0};for(var c in i){e=i[c];d=j?j+"."+c:c;if(Sys.Services.ProfileGroup.isInstanceOfType(e)){var k=this._flattenProperties(a,e,d),h=k.value;g+=k.count;for(var f in h){var l=h[f];b[f]=l}}else if(!a||Array.indexOf(a,d)!==-1){b[d]=e;g++}}return {value:b,count:g}},_get_path:function(){var a=this.get_path();if(!a.length)a=Sys.Services._ProfileService.DefaultWebServicePath;if(!a||!a.length)throw Error.invalidOperation(Sys.Res.servicePathNotSet);return a},_onLoadComplete:function(a,e,g){if(typeof a!=="object")throw Error.invalidOperation(String.format(Sys.Res.webServiceInvalidReturnType,g,"Object"));var c=this._unflattenProperties(a);for(var b in c)this.properties[b]=c[b];var d=e[0]||this.get_defaultLoadCompletedCallback()||this.get_defaultSucceededCallback();if(d){var f=e[2]||this.get_defaultUserContext();d(a.length,f,"Sys.Services.ProfileService.load")}},_onLoadFailed:function(d,b){var a=b[1]||this.get_defaultFailedCallback();if(a){var c=b[2]||this.get_defaultUserContext();a(d,c,"Sys.Services.ProfileService.load")}},_onSaveComplete:function(a,b,f){var c=b[3];if(a!==null)if(a instanceof Array)c-=a.length;else if(typeof a==="number")c=a;else throw Error.invalidOperation(String.format(Sys.Res.webServiceInvalidReturnType,f,"Array"));var d=b[0]||this.get_defaultSaveCompletedCallback()||this.get_defaultSucceededCallback();if(d){var e=b[2]||this.get_defaultUserContext();d(c,e,"Sys.Services.ProfileService.save")}},_onSaveFailed:function(d,b){var a=b[1]||this.get_defaultFailedCallback();if(a){var c=b[2]||this.get_defaultUserContext();a(d,c,"Sys.Services.ProfileService.save")}},_unflattenProperties:function(e){var c={},d,f,h=0;for(var a in e){h++;f=e[a];d=a.indexOf(".");if(d!==-1){var g=a.substr(0,d);a=a.substr(d+1);var b=c[g];if(!b||!Sys.Services.ProfileGroup.isInstanceOfType(b)){b=new Sys.Services.ProfileGroup;c[g]=b}b[a]=f}else c[a]=f}e.length=h;return c}};Sys.Services._ProfileService.registerClass("Sys.Services._ProfileService",Sys.Net.WebServiceProxy);Sys.Services.ProfileService=new Sys.Services._ProfileService;Sys.Services.ProfileGroup=function(a){if(a)for(var b in a)this[b]=a[b]};Sys.Services.ProfileGroup.registerClass("Sys.Services.ProfileGroup");Sys.Services._AuthenticationService=function(){Sys.Services._AuthenticationService.initializeBase(this)};Sys.Services._AuthenticationService.DefaultWebServicePath="";Sys.Services._AuthenticationService.prototype={_defaultLoginCompletedCallback:null,_defaultLogoutCompletedCallback:null,_path:"",_timeout:0,_authenticated:false,get_defaultLoginCompletedCallback:function(){return this._defaultLoginCompletedCallback},set_defaultLoginCompletedCallback:function(a){this._defaultLoginCompletedCallback=a},get_defaultLogoutCompletedCallback:function(){return this._defaultLogoutCompletedCallback},set_defaultLogoutCompletedCallback:function(a){this._defaultLogoutCompletedCallback=a},get_isLoggedIn:function(){return this._authenticated},get_path:function(){return this._path||""},login:function(c,b,a,h,f,d,e,g){this._invoke(this._get_path(),"Login",false,{userName:c,password:b,createPersistentCookie:a},Function.createDelegate(this,this._onLoginComplete),Function.createDelegate(this,this._onLoginFailed),[c,b,a,h,f,d,e,g])},logout:function(c,a,b,d){this._invoke(this._get_path(),"Logout",false,{},Function.createDelegate(this,this._onLogoutComplete),Function.createDelegate(this,this._onLogoutFailed),[c,a,b,d])},_get_path:function(){var a=this.get_path();if(!a.length)a=Sys.Services._AuthenticationService.DefaultWebServicePath;if(!a||!a.length)throw Error.invalidOperation(Sys.Res.servicePathNotSet);return a},_onLoginComplete:function(e,c,f){if(typeof e!=="boolean")throw Error.invalidOperation(String.format(Sys.Res.webServiceInvalidReturnType,f,"Boolean"));var b=c[4],d=c[7]||this.get_defaultUserContext(),a=c[5]||this.get_defaultLoginCompletedCallback()||this.get_defaultSucceededCallback();if(e){this._authenticated=true;if(a)a(true,d,"Sys.Services.AuthenticationService.login");if(typeof b!=="undefined"&&b!==null)window.location.href=b}else if(a)a(false,d,"Sys.Services.AuthenticationService.login")},_onLoginFailed:function(d,b){var a=b[6]||this.get_defaultFailedCallback();if(a){var c=b[7]||this.get_defaultUserContext();a(d,c,"Sys.Services.AuthenticationService.login")}},_onLogoutComplete:function(f,a,e){if(f!==null)throw Error.invalidOperation(String.format(Sys.Res.webServiceInvalidReturnType,e,"null"));var b=a[0],d=a[3]||this.get_defaultUserContext(),c=a[1]||this.get_defaultLogoutCompletedCallback()||this.get_defaultSucceededCallback();this._authenticated=false;if(c)c(null,d,"Sys.Services.AuthenticationService.logout");if(!b)window.location.reload();else window.location.href=b},_onLogoutFailed:function(c,b){var a=b[2]||this.get_defaultFailedCallback();if(a)a(c,b[3],"Sys.Services.AuthenticationService.logout")},_setAuthenticated:function(a){this._authenticated=a}};Sys.Services._AuthenticationService.registerClass("Sys.Services._AuthenticationService",Sys.Net.WebServiceProxy);Sys.Services.AuthenticationService=new Sys.Services._AuthenticationService;Sys.Services._RoleService=function(){Sys.Services._RoleService.initializeBase(this);this._roles=[]};Sys.Services._RoleService.DefaultWebServicePath="";Sys.Services._RoleService.prototype={_defaultLoadCompletedCallback:null,_rolesIndex:null,_timeout:0,_path:"",get_defaultLoadCompletedCallback:function(){return this._defaultLoadCompletedCallback},set_defaultLoadCompletedCallback:function(a){this._defaultLoadCompletedCallback=a},get_path:function(){return this._path||""},get_roles:function(){return Array.clone(this._roles)},isUserInRole:function(a){var b=this._get_rolesIndex()[a.trim().toLowerCase()];return !!b},load:function(a,b,c){Sys.Net.WebServiceProxy.invoke(this._get_path(),"GetRolesForCurrentUser",false,{},Function.createDelegate(this,this._onLoadComplete),Function.createDelegate(this,this._onLoadFailed),[a,b,c],this.get_timeout())},_get_path:function(){var a=this.get_path();if(!a||!a.length)a=Sys.Services._RoleService.DefaultWebServicePath;if(!a||!a.length)throw Error.invalidOperation(Sys.Res.servicePathNotSet);return a},_get_rolesIndex:function(){if(!this._rolesIndex){var b={};for(var a=0;a<this._roles.length;a++)b[this._roles[a].toLowerCase()]=true;this._rolesIndex=b}return this._rolesIndex},_onLoadComplete:function(a,c,f){if(a&&!(a instanceof Array))throw Error.invalidOperation(String.format(Sys.Res.webServiceInvalidReturnType,f,"Array"));this._roles=a;this._rolesIndex=null;var b=c[0]||this.get_defaultLoadCompletedCallback()||this.get_defaultSucceededCallback();if(b){var e=c[2]||this.get_defaultUserContext(),d=Array.clone(a);b(d,e,"Sys.Services.RoleService.load")}},_onLoadFailed:function(d,b){var a=b[1]||this.get_defaultFailedCallback();if(a){var c=b[2]||this.get_defaultUserContext();a(d,c,"Sys.Services.RoleService.load")}}};Sys.Services._RoleService.registerClass("Sys.Services._RoleService",Sys.Net.WebServiceProxy);Sys.Services.RoleService=new Sys.Services._RoleService;Type.registerNamespace("Sys.Serialization");Sys.Serialization.JavaScriptSerializer=function(){};Sys.Serialization.JavaScriptSerializer.registerClass("Sys.Serialization.JavaScriptSerializer");Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs=[];Sys.Serialization.JavaScriptSerializer._charsToEscape=[];Sys.Serialization.JavaScriptSerializer._dateRegEx=new RegExp('(^|[^\\\\])\\"\\\\/Date\\((-?[0-9]+)(?:[a-zA-Z]|(?:\\+|-)[0-9]{4})?\\)\\\\/\\"',"g");Sys.Serialization.JavaScriptSerializer._escapeChars={};Sys.Serialization.JavaScriptSerializer._escapeRegEx=new RegExp('["\\\\\\x00-\\x1F]',"i");Sys.Serialization.JavaScriptSerializer._escapeRegExGlobal=new RegExp('["\\\\\\x00-\\x1F]',"g");Sys.Serialization.JavaScriptSerializer._jsonRegEx=new RegExp("[^,:{}\\[\\]0-9.\\-+Eaeflnr-u \\n\\r\\t]","g");Sys.Serialization.JavaScriptSerializer._jsonStringRegEx=new RegExp('"(\\\\.|[^"\\\\])*"',"g");Sys.Serialization.JavaScriptSerializer._serverTypeFieldName="__type";Sys.Serialization.JavaScriptSerializer._init=function(){var c=["\\u0000","\\u0001","\\u0002","\\u0003","\\u0004","\\u0005","\\u0006","\\u0007","\\b","\\t","\\n","\\u000b","\\f","\\r","\\u000e","\\u000f","\\u0010","\\u0011","\\u0012","\\u0013","\\u0014","\\u0015","\\u0016","\\u0017","\\u0018","\\u0019","\\u001a","\\u001b","\\u001c","\\u001d","\\u001e","\\u001f"];Sys.Serialization.JavaScriptSerializer._charsToEscape[0]="\\";Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs["\\"]=new RegExp("\\\\","g");Sys.Serialization.JavaScriptSerializer._escapeChars["\\"]="\\\\";Sys.Serialization.JavaScriptSerializer._charsToEscape[1]='"';Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs['"']=new RegExp('"',"g");Sys.Serialization.JavaScriptSerializer._escapeChars['"']='\\"';for(var a=0;a<32;a++){var b=String.fromCharCode(a);Sys.Serialization.JavaScriptSerializer._charsToEscape[a+2]=b;Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs[b]=new RegExp(b,"g");Sys.Serialization.JavaScriptSerializer._escapeChars[b]=c[a]}};Sys.Serialization.JavaScriptSerializer._serializeBooleanWithBuilder=function(b,a){a.append(b.toString())};Sys.Serialization.JavaScriptSerializer._serializeNumberWithBuilder=function(a,b){if(isFinite(a))b.append(String(a));else throw Error.invalidOperation(Sys.Res.cannotSerializeNonFiniteNumbers)};Sys.Serialization.JavaScriptSerializer._serializeStringWithBuilder=function(a,c){c.append('"');if(Sys.Serialization.JavaScriptSerializer._escapeRegEx.test(a)){if(Sys.Serialization.JavaScriptSerializer._charsToEscape.length===0)Sys.Serialization.JavaScriptSerializer._init();if(a.length<128)a=a.replace(Sys.Serialization.JavaScriptSerializer._escapeRegExGlobal,function(a){return Sys.Serialization.JavaScriptSerializer._escapeChars[a]});else for(var d=0;d<34;d++){var b=Sys.Serialization.JavaScriptSerializer._charsToEscape[d];if(a.indexOf(b)!==-1)if(Sys.Browser.agent===Sys.Browser.Opera||Sys.Browser.agent===Sys.Browser.FireFox)a=a.split(b).join(Sys.Serialization.JavaScriptSerializer._escapeChars[b]);else a=a.replace(Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs[b],Sys.Serialization.JavaScriptSerializer._escapeChars[b])}}c.append(a);c.append('"')};Sys.Serialization.JavaScriptSerializer._serializeWithBuilder=function(b,a,i,g){var c;switch(typeof b){case "object":if(b)if(Number.isInstanceOfType(b))Sys.Serialization.JavaScriptSerializer._serializeNumberWithBuilder(b,a);else if(Boolean.isInstanceOfType(b))Sys.Serialization.JavaScriptSerializer._serializeBooleanWithBuilder(b,a);else if(String.isInstanceOfType(b))Sys.Serialization.JavaScriptSerializer._serializeStringWithBuilder(b,a);else if(Array.isInstanceOfType(b)){a.append("[");for(c=0;c<b.length;++c){if(c>0)a.append(",");Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(b[c],a,false,g)}a.append("]")}else{if(Date.isInstanceOfType(b)){a.append('"\\/Date(');a.append(b.getTime());a.append(')\\/"');break}var d=[],f=0;for(var e in b){if(e.startsWith("$"))continue;if(e===Sys.Serialization.JavaScriptSerializer._serverTypeFieldName&&f!==0){d[f++]=d[0];d[0]=e}else d[f++]=e}if(i)d.sort();a.append("{");var j=false;for(c=0;c<f;c++){var h=b[d[c]];if(typeof h!=="undefined"&&typeof h!=="function"){if(j)a.append(",");else j=true;Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(d[c],a,i,g);a.append(":");Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(h,a,i,g)}}a.append("}")}else a.append("null");break;case "number":Sys.Serialization.JavaScriptSerializer._serializeNumberWithBuilder(b,a);break;case "string":Sys.Serialization.JavaScriptSerializer._serializeStringWithBuilder(b,a);break;case "boolean":Sys.Serialization.JavaScriptSerializer._serializeBooleanWithBuilder(b,a);break;default:a.append("null")}};Sys.Serialization.JavaScriptSerializer.serialize=function(b){var a=new Sys.StringBuilder;Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(b,a,false);return a.toString()};Sys.Serialization.JavaScriptSerializer.deserialize=function(data,secure){if(data.length===0)throw Error.argument("data",Sys.Res.cannotDeserializeEmptyString);try{var exp=data.replace(Sys.Serialization.JavaScriptSerializer._dateRegEx,"$1new Date($2)");if(secure&&Sys.Serialization.JavaScriptSerializer._jsonRegEx.test(exp.replace(Sys.Serialization.JavaScriptSerializer._jsonStringRegEx,"")))throw null;return eval("("+exp+")")}catch(a){throw Error.argument("data",Sys.Res.cannotDeserializeInvalidJson)}};Sys.CultureInfo=function(c,b,a){this.name=c;this.numberFormat=b;this.dateTimeFormat=a};Sys.CultureInfo.prototype={_getDateTimeFormats:function(){if(!this._dateTimeFormats){var a=this.dateTimeFormat;this._dateTimeFormats=[a.MonthDayPattern,a.YearMonthPattern,a.ShortDatePattern,a.ShortTimePattern,a.LongDatePattern,a.LongTimePattern,a.FullDateTimePattern,a.RFC1123Pattern,a.SortableDateTimePattern,a.UniversalSortableDateTimePattern]}return this._dateTimeFormats},_getMonthIndex:function(a){if(!this._upperMonths)this._upperMonths=this._toUpperArray(this.dateTimeFormat.MonthNames);return Array.indexOf(this._upperMonths,this._toUpper(a))},_getAbbrMonthIndex:function(a){if(!this._upperAbbrMonths)this._upperAbbrMonths=this._toUpperArray(this.dateTimeFormat.AbbreviatedMonthNames);return Array.indexOf(this._upperAbbrMonths,this._toUpper(a))},_getDayIndex:function(a){if(!this._upperDays)this._upperDays=this._toUpperArray(this.dateTimeFormat.DayNames);return Array.indexOf(this._upperDays,this._toUpper(a))},_getAbbrDayIndex:function(a){if(!this._upperAbbrDays)this._upperAbbrDays=this._toUpperArray(this.dateTimeFormat.AbbreviatedDayNames);return Array.indexOf(this._upperAbbrDays,this._toUpper(a))},_toUpperArray:function(c){var b=[];for(var a=0,d=c.length;a<d;a++)b[a]=this._toUpper(c[a]);return b},_toUpper:function(a){return a.split("\u00a0").join(" ").toUpperCase()}};Sys.CultureInfo._parse=function(b){var a=Sys.Serialization.JavaScriptSerializer.deserialize(b);return new Sys.CultureInfo(a.name,a.numberFormat,a.dateTimeFormat)};Sys.CultureInfo.registerClass("Sys.CultureInfo");Sys.CultureInfo.InvariantCulture=Sys.CultureInfo._parse('{"name":"","numberFormat":{"CurrencyDecimalDigits":2,"CurrencyDecimalSeparator":".","IsReadOnly":true,"CurrencyGroupSizes":[3],"NumberGroupSizes":[3],"PercentGroupSizes":[3],"CurrencyGroupSeparator":",","CurrencySymbol":"\u00a4","NaNSymbol":"NaN","CurrencyNegativePattern":0,"NumberNegativePattern":1,"PercentPositivePattern":0,"PercentNegativePattern":0,"NegativeInfinitySymbol":"-Infinity","NegativeSign":"-","NumberDecimalDigits":2,"NumberDecimalSeparator":".","NumberGroupSeparator":",","CurrencyPositivePattern":0,"PositiveInfinitySymbol":"Infinity","PositiveSign":"+","PercentDecimalDigits":2,"PercentDecimalSeparator":".","PercentGroupSeparator":",","PercentSymbol":"%","PerMilleSymbol":"\u2030","NativeDigits":["0","1","2","3","4","5","6","7","8","9"],"DigitSubstitution":1},"dateTimeFormat":{"AMDesignator":"AM","Calendar":{"MinSupportedDateTime":"@-62135568000000@","MaxSupportedDateTime":"@253402300799999@","AlgorithmType":1,"CalendarType":1,"Eras":[1],"TwoDigitYearMax":2029,"IsReadOnly":true},"DateSeparator":"/","FirstDayOfWeek":0,"CalendarWeekRule":0,"FullDateTimePattern":"dddd, dd MMMM yyyy HH:mm:ss","LongDatePattern":"dddd, dd MMMM yyyy","LongTimePattern":"HH:mm:ss","MonthDayPattern":"MMMM dd","PMDesignator":"PM","RFC1123Pattern":"ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'","ShortDatePattern":"MM/dd/yyyy","ShortTimePattern":"HH:mm","SortableDateTimePattern":"yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss","TimeSeparator":":","UniversalSortableDateTimePattern":"yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'","YearMonthPattern":"yyyy MMMM","AbbreviatedDayNames":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"ShortestDayNames":["Su","Mo","Tu","We","Th","Fr","Sa"],"DayNames":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"AbbreviatedMonthNames":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],"MonthNames":["January","February","March","April","May","June","July","August","September","October","November","December",""],"IsReadOnly":true,"NativeCalendarName":"Gregorian Calendar","AbbreviatedMonthGenitiveNames":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],"MonthGenitiveNames":["January","February","March","April","May","June","July","August","September","October","November","December",""]}}');if(typeof __cultureInfo==="undefined")var __cultureInfo='{"name":"en-US","numberFormat":{"CurrencyDecimalDigits":2,"CurrencyDecimalSeparator":".","IsReadOnly":false,"CurrencyGroupSizes":[3],"NumberGroupSizes":[3],"PercentGroupSizes":[3],"CurrencyGroupSeparator":",","CurrencySymbol":"$","NaNSymbol":"NaN","CurrencyNegativePattern":0,"NumberNegativePattern":1,"PercentPositivePattern":0,"PercentNegativePattern":0,"NegativeInfinitySymbol":"-Infinity","NegativeSign":"-","NumberDecimalDigits":2,"NumberDecimalSeparator":".","NumberGroupSeparator":",","CurrencyPositivePattern":0,"PositiveInfinitySymbol":"Infinity","PositiveSign":"+","PercentDecimalDigits":2,"PercentDecimalSeparator":".","PercentGroupSeparator":",","PercentSymbol":"%","PerMilleSymbol":"\u2030","NativeDigits":["0","1","2","3","4","5","6","7","8","9"],"DigitSubstitution":1},"dateTimeFormat":{"AMDesignator":"AM","Calendar":{"MinSupportedDateTime":"@-62135568000000@","MaxSupportedDateTime":"@253402300799999@","AlgorithmType":1,"CalendarType":1,"Eras":[1],"TwoDigitYearMax":2029,"IsReadOnly":false},"DateSeparator":"/","FirstDayOfWeek":0,"CalendarWeekRule":0,"FullDateTimePattern":"dddd, MMMM dd, yyyy h:mm:ss tt","LongDatePattern":"dddd, MMMM dd, yyyy","LongTimePattern":"h:mm:ss tt","MonthDayPattern":"MMMM dd","PMDesignator":"PM","RFC1123Pattern":"ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'","ShortDatePattern":"M/d/yyyy","ShortTimePattern":"h:mm tt","SortableDateTimePattern":"yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss","TimeSeparator":":","UniversalSortableDateTimePattern":"yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'","YearMonthPattern":"MMMM, yyyy","AbbreviatedDayNames":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"ShortestDayNames":["Su","Mo","Tu","We","Th","Fr","Sa"],"DayNames":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"AbbreviatedMonthNames":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],"MonthNames":["January","February","March","April","May","June","July","August","September","October","November","December",""],"IsReadOnly":false,"NativeCalendarName":"Gregorian Calendar","AbbreviatedMonthGenitiveNames":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],"MonthGenitiveNames":["January","February","March","April","May","June","July","August","September","October","November","December",""]}}';Sys.CultureInfo.CurrentCulture=Sys.CultureInfo._parse(__cultureInfo);delete __cultureInfo;Sys.UI.Behavior=function(b){Sys.UI.Behavior.initializeBase(this);this._element=b;var a=b._behaviors;if(!a)b._behaviors=[this];else a[a.length]=this};Sys.UI.Behavior.prototype={_name:null,get_element:function(){return this._element},get_id:function(){var a=Sys.UI.Behavior.callBaseMethod(this,"get_id");if(a)return a;if(!this._element||!this._element.id)return "";return this._element.id+"$"+this.get_name()},get_name:function(){if(this._name)return this._name;var a=Object.getTypeName(this),b=a.lastIndexOf(".");if(b!=-1)a=a.substr(b+1);if(!this.get_isInitialized())this._name=a;return a},set_name:function(a){this._name=a},initialize:function(){Sys.UI.Behavior.callBaseMethod(this,"initialize");var a=this.get_name();if(a)this._element[a]=this},dispose:function(){Sys.UI.Behavior.callBaseMethod(this,"dispose");if(this._element){var a=this.get_name();if(a)this._element[a]=null;Array.remove(this._element._behaviors,this);delete this._element}}};Sys.UI.Behavior.registerClass("Sys.UI.Behavior",Sys.Component);Sys.UI.Behavior.getBehaviorByName=function(b,c){var a=b[c];return a&&Sys.UI.Behavior.isInstanceOfType(a)?a:null};Sys.UI.Behavior.getBehaviors=function(a){if(!a._behaviors)return [];return Array.clone(a._behaviors)};Sys.UI.Behavior.getBehaviorsByType=function(d,e){var a=d._behaviors,c=[];if(a)for(var b=0,f=a.length;b<f;b++)if(e.isInstanceOfType(a[b]))c[c.length]=a[b];return c};Sys.UI.VisibilityMode=function(){throw Error.notImplemented()};Sys.UI.VisibilityMode.prototype={hide:0,collapse:1};Sys.UI.VisibilityMode.registerEnum("Sys.UI.VisibilityMode");Sys.UI.Control=function(a){Sys.UI.Control.initializeBase(this);this._element=a;a.control=this};Sys.UI.Control.prototype={_parent:null,_visibilityMode:Sys.UI.VisibilityMode.hide,get_element:function(){return this._element},get_id:function(){if(!this._element)return "";return this._element.id},set_id:function(){throw Error.invalidOperation(Sys.Res.cantSetId)},get_parent:function(){if(this._parent)return this._parent;if(!this._element)return null;var a=this._element.parentNode;while(a){if(a.control)return a.control;a=a.parentNode}return null},set_parent:function(a){this._parent=a},get_visibilityMode:function(){return Sys.UI.DomElement.getVisibilityMode(this._element)},set_visibilityMode:function(a){Sys.UI.DomElement.setVisibilityMode(this._element,a)},get_visible:function(){return Sys.UI.DomElement.getVisible(this._element)},set_visible:function(a){Sys.UI.DomElement.setVisible(this._element,a)},addCssClass:function(a){Sys.UI.DomElement.addCssClass(this._element,a)},dispose:function(){Sys.UI.Control.callBaseMethod(this,"dispose");if(this._element){this._element.control=undefined;delete this._element}if(this._parent)delete this._parent},onBubbleEvent:function(){return false},raiseBubbleEvent:function(b,c){var a=this.get_parent();while(a){if(a.onBubbleEvent(b,c))return;a=a.get_parent()}},removeCssClass:function(a){Sys.UI.DomElement.removeCssClass(this._element,a)},toggleCssClass:function(a){Sys.UI.DomElement.toggleCssClass(this._element,a)}};Sys.UI.Control.registerClass("Sys.UI.Control",Sys.Component);
//----------------------------------------------------------
// Copyright (C) Microsoft Corporation. All rights reserved.
//----------------------------------------------------------
// MicrosoftAjaxTimer.js
Sys.UI._Timer=function(a){Sys.UI._Timer.initializeBase(this,[a]);this._interval=60000;this._enabled=true;this._postbackPending=false;this._raiseTickDelegate=null;this._endRequestHandlerDelegate=null;this._timer=null;this._pageRequestManager=null;this._uniqueID=null};Sys.UI._Timer.prototype={get_enabled:function(){return this._enabled},set_enabled:function(a){this._enabled=a},get_interval:function(){return this._interval},set_interval:function(a){this._interval=a},get_uniqueID:function(){return this._uniqueID},set_uniqueID:function(a){this._uniqueID=a},dispose:function(){this._stopTimer();if(this._pageRequestManager!==null)this._pageRequestManager.remove_endRequest(this._endRequestHandlerDelegate);Sys.UI._Timer.callBaseMethod(this,"dispose")},_doPostback:function(){__doPostBack(this.get_uniqueID(),"")},_handleEndRequest:function(c,b){var a=b.get_dataItems()[this.get_id()];if(a)this._update(a[0],a[1]);if(this._postbackPending===true&&this._pageRequestManager!==null&&this._pageRequestManager.get_isInAsyncPostBack()===false){this._postbackPending=false;this._doPostback()}},initialize:function(){Sys.UI._Timer.callBaseMethod(this,"initialize");this._raiseTickDelegate=Function.createDelegate(this,this._raiseTick);this._endRequestHandlerDelegate=Function.createDelegate(this,this._handleEndRequest);if(Sys.WebForms&&Sys.WebForms.PageRequestManager)this._pageRequestManager=Sys.WebForms.PageRequestManager.getInstance();if(this._pageRequestManager!==null)this._pageRequestManager.add_endRequest(this._endRequestHandlerDelegate);if(this.get_enabled())this._startTimer()},_raiseTick:function(){this._startTimer();if(this._pageRequestManager===null||!this._pageRequestManager.get_isInAsyncPostBack()){this._doPostback();this._postbackPending=false}else this._postbackPending=true},_startTimer:function(){this._timer=window.setTimeout(Function.createDelegate(this,this._raiseTick),this.get_interval())},_stopTimer:function(){if(this._timer!==null){window.clearTimeout(this._timer);this._timer=null}},_update:function(c,b){var a=!this.get_enabled(),d=this.get_interval()!==b;if(!a&&(!c||d)){this._stopTimer();a=true}this.set_enabled(c);this.set_interval(b);if(this.get_enabled()&&a)this._startTimer()}};Sys.UI._Timer.registerClass("Sys.UI._Timer",Sys.UI.Control);
//----------------------------------------------------------
// Copyright (C) Microsoft Corporation. All rights reserved.
//----------------------------------------------------------
// MicrosoftAjaxWebForms.js
Type.registerNamespace("Sys.WebForms");Sys.WebForms.BeginRequestEventArgs=function(b,a){Sys.WebForms.BeginRequestEventArgs.initializeBase(this);this._request=b;this._postBackElement=a};Sys.WebForms.BeginRequestEventArgs.prototype={get_postBackElement:function(){return this._postBackElement},get_request:function(){return this._request}};Sys.WebForms.BeginRequestEventArgs.registerClass("Sys.WebForms.BeginRequestEventArgs",Sys.EventArgs);Sys.WebForms.EndRequestEventArgs=function(c,a,b){Sys.WebForms.EndRequestEventArgs.initializeBase(this);this._errorHandled=false;this._error=c;this._dataItems=a||{};this._response=b};Sys.WebForms.EndRequestEventArgs.prototype={get_dataItems:function(){return this._dataItems},get_error:function(){return this._error},get_errorHandled:function(){return this._errorHandled},set_errorHandled:function(a){this._errorHandled=a},get_response:function(){return this._response}};Sys.WebForms.EndRequestEventArgs.registerClass("Sys.WebForms.EndRequestEventArgs",Sys.EventArgs);Sys.WebForms.InitializeRequestEventArgs=function(b,a){Sys.WebForms.InitializeRequestEventArgs.initializeBase(this);this._request=b;this._postBackElement=a};Sys.WebForms.InitializeRequestEventArgs.prototype={get_postBackElement:function(){return this._postBackElement},get_request:function(){return this._request}};Sys.WebForms.InitializeRequestEventArgs.registerClass("Sys.WebForms.InitializeRequestEventArgs",Sys.CancelEventArgs);Sys.WebForms.PageLoadedEventArgs=function(b,a,c){Sys.WebForms.PageLoadedEventArgs.initializeBase(this);this._panelsUpdated=b;this._panelsCreated=a;this._dataItems=c||{}};Sys.WebForms.PageLoadedEventArgs.prototype={get_dataItems:function(){return this._dataItems},get_panelsCreated:function(){return this._panelsCreated},get_panelsUpdated:function(){return this._panelsUpdated}};Sys.WebForms.PageLoadedEventArgs.registerClass("Sys.WebForms.PageLoadedEventArgs",Sys.EventArgs);Sys.WebForms.PageLoadingEventArgs=function(b,a,c){Sys.WebForms.PageLoadingEventArgs.initializeBase(this);this._panelsUpdating=b;this._panelsDeleting=a;this._dataItems=c||{}};Sys.WebForms.PageLoadingEventArgs.prototype={get_dataItems:function(){return this._dataItems},get_panelsDeleting:function(){return this._panelsDeleting},get_panelsUpdating:function(){return this._panelsUpdating}};Sys.WebForms.PageLoadingEventArgs.registerClass("Sys.WebForms.PageLoadingEventArgs",Sys.EventArgs);Sys.WebForms.PageRequestManager=function(){this._form=null;this._activeDefaultButton=null;this._activeDefaultButtonClicked=false;this._updatePanelIDs=null;this._updatePanelClientIDs=null;this._updatePanelHasChildrenAsTriggers=null;this._asyncPostBackControlIDs=null;this._asyncPostBackControlClientIDs=null;this._postBackControlIDs=null;this._postBackControlClientIDs=null;this._scriptManagerID=null;this._pageLoadedHandler=null;this._additionalInput=null;this._onsubmit=null;this._onSubmitStatements=[];this._originalDoPostBack=null;this._originalDoPostBackWithOptions=null;this._originalFireDefaultButton=null;this._originalDoCallback=null;this._isCrossPost=false;this._postBackSettings=null;this._request=null;this._onFormSubmitHandler=null;this._onFormElementClickHandler=null;this._onWindowUnloadHandler=null;this._asyncPostBackTimeout=null;this._controlIDToFocus=null;this._scrollPosition=null;this._processingRequest=false;this._scriptDisposes={};this._transientFields=["__VIEWSTATEENCRYPTED","__VIEWSTATEFIELDCOUNT"]};Sys.WebForms.PageRequestManager.prototype={_get_eventHandlerList:function(){if(!this._events)this._events=new Sys.EventHandlerList;return this._events},get_isInAsyncPostBack:function(){return this._request!==null},add_beginRequest:function(a){this._get_eventHandlerList().addHandler("beginRequest",a)},remove_beginRequest:function(a){this._get_eventHandlerList().removeHandler("beginRequest",a)},add_endRequest:function(a){this._get_eventHandlerList().addHandler("endRequest",a)},remove_endRequest:function(a){this._get_eventHandlerList().removeHandler("endRequest",a)},add_initializeRequest:function(a){this._get_eventHandlerList().addHandler("initializeRequest",a)},remove_initializeRequest:function(a){this._get_eventHandlerList().removeHandler("initializeRequest",a)},add_pageLoaded:function(a){this._get_eventHandlerList().addHandler("pageLoaded",a)},remove_pageLoaded:function(a){this._get_eventHandlerList().removeHandler("pageLoaded",a)},add_pageLoading:function(a){this._get_eventHandlerList().addHandler("pageLoading",a)},remove_pageLoading:function(a){this._get_eventHandlerList().removeHandler("pageLoading",a)},abortPostBack:function(){if(!this._processingRequest&&this._request){this._request.get_executor().abort();this._request=null}},_cancelPendingCallbacks:function(){for(var a=0,e=window.__pendingCallbacks.length;a<e;a++){var c=window.__pendingCallbacks[a];if(c){if(!c.async)window.__synchronousCallBackIndex=-1;window.__pendingCallbacks[a]=null;var d="__CALLBACKFRAME"+a,b=document.getElementById(d);if(b)b.parentNode.removeChild(b)}}},_commitControls:function(a,b){if(a){this._updatePanelIDs=a.updatePanelIDs;this._updatePanelClientIDs=a.updatePanelClientIDs;this._updatePanelHasChildrenAsTriggers=a.updatePanelHasChildrenAsTriggers;this._asyncPostBackControlIDs=a.asyncPostBackControlIDs;this._asyncPostBackControlClientIDs=a.asyncPostBackControlClientIDs;this._postBackControlIDs=a.postBackControlIDs;this._postBackControlClientIDs=a.postBackControlClientIDs}if(typeof b!=="undefined"&&b!==null)this._asyncPostBackTimeout=b*1000},_createHiddenField:function(c,d){var b,a=document.getElementById(c);if(a)if(!a._isContained)a.parentNode.removeChild(a);else b=a.parentNode;if(!b){b=document.createElement("span");b.style.cssText="display:none !important";this._form.appendChild(b)}b.innerHTML="<input type='hidden' />";a=b.childNodes[0];a._isContained=true;a.id=a.name=c;a.value=d},_createPageRequestManagerTimeoutError:function(){var b="Sys.WebForms.PageRequestManagerTimeoutException: "+Sys.WebForms.Res.PRM_TimeoutError,a=Error.create(b,{name:"Sys.WebForms.PageRequestManagerTimeoutException"});a.popStackFrame();return a},_createPageRequestManagerServerError:function(a,d){var c="Sys.WebForms.PageRequestManagerServerErrorException: "+(d||String.format(Sys.WebForms.Res.PRM_ServerError,a)),b=Error.create(c,{name:"Sys.WebForms.PageRequestManagerServerErrorException",httpStatusCode:a});b.popStackFrame();return b},_createPageRequestManagerParserError:function(b){var c="Sys.WebForms.PageRequestManagerParserErrorException: "+String.format(Sys.WebForms.Res.PRM_ParserError,b),a=Error.create(c,{name:"Sys.WebForms.PageRequestManagerParserErrorException"});a.popStackFrame();return a},_createPostBackSettings:function(c,b,a){return {async:c,panelID:b,sourceElement:a}},_convertToClientIDs:function(a,d,c){if(a)for(var b=0,e=a.length;b<e;b++){Array.add(d,a[b]);Array.add(c,this._uniqueIDToClientID(a[b]))}},_destroyTree:function(f){if(f.nodeType===1){var d=f.childNodes;for(var b=d.length-1;b>=0;b--){var a=d[b];if(a.nodeType===1){if(a.dispose&&typeof a.dispose==="function")a.dispose();else if(a.control&&typeof a.control.dispose==="function")a.control.dispose();var e=Sys.UI.Behavior.getBehaviors(a);for(var c=e.length-1;c>=0;c--)e[c].dispose();this._destroyTree(a)}}}},dispose:function(){if(this._form){Sys.UI.DomEvent.removeHandler(this._form,"submit",this._onFormSubmitHandler);Sys.UI.DomEvent.removeHandler(this._form,"click",this._onFormElementClickHandler);Sys.UI.DomEvent.removeHandler(window,"unload",this._onWindowUnloadHandler);Sys.UI.DomEvent.removeHandler(window,"load",this._pageLoadedHandler)}if(this._originalDoPostBack){window.__doPostBack=this._originalDoPostBack;this._originalDoPostBack=null}if(this._originalDoPostBackWithOptions){window.WebForm_DoPostBackWithOptions=this._originalDoPostBackWithOptions;this._originalDoPostBackWithOptions=null}if(this._originalFireDefaultButton){window.WebForm_FireDefaultButton=this._originalFireDefaultButton;this._originalFireDefaultButton=null}if(this._originalDoCallback){window.WebForm_DoCallback=this._originalDoCallback;this._originalDoCallback=null}this._form=null;this._updatePanelIDs=null;this._updatePanelClientIDs=null;this._asyncPostBackControlIDs=null;this._asyncPostBackControlClientIDs=null;this._postBackControlIDs=null;this._postBackControlClientIDs=null;this._asyncPostBackTimeout=null;this._scrollPosition=null},_doCallback:function(d,b,c,f,a,e){if(!this.get_isInAsyncPostBack())this._originalDoCallback(d,b,c,f,a,e)},_doPostBack:function(a,e){this._additionalInput=null;var b=this._form;if(a===null||typeof a==="undefined"||this._isCrossPost){this._postBackSettings=this._createPostBackSettings(false,null,null);this._isCrossPost=false}else{var f=this._uniqueIDToClientID(a),d=document.getElementById(f);if(!d)if(Array.contains(this._asyncPostBackControlIDs,a))this._postBackSettings=this._createPostBackSettings(true,this._scriptManagerID+"|"+a,null);else if(Array.contains(this._postBackControlIDs,a))this._postBackSettings=this._createPostBackSettings(false,null,null);else{var c=this._findNearestElement(a);if(c)this._postBackSettings=this._getPostBackSettings(c,a);else this._postBackSettings=this._createPostBackSettings(false,null,null)}else this._postBackSettings=this._getPostBackSettings(d,a)}if(!this._postBackSettings.async){b.onsubmit=this._onsubmit;this._originalDoPostBack(a,e);b.onsubmit=null;return}b.__EVENTTARGET.value=a;b.__EVENTARGUMENT.value=e;this._onFormSubmit()},_doPostBackWithOptions:function(a){this._isCrossPost=a&&a.actionUrl;this._originalDoPostBackWithOptions(a)},_elementContains:function(b,a){while(a){if(a===b)return true;a=a.parentNode}return false},_endPostBack:function(a,d,f){if(this._request===d.get_webRequest()){this._processingRequest=false;this._additionalInput=null;this._request=null}var e=this._get_eventHandlerList().getHandler("endRequest"),b=false;if(e){var c=new Sys.WebForms.EndRequestEventArgs(a,f?f.dataItems:{},d);e(this,c);b=c.get_errorHandled()}if(a&&!b)throw a},_findNearestElement:function(a){while(a.length>0){var d=this._uniqueIDToClientID(a),c=document.getElementById(d);if(c)return c;var b=a.lastIndexOf("$");if(b===-1)return null;a=a.substring(0,b)}return null},_findText:function(b,a){var c=Math.max(0,a-20),d=Math.min(b.length,a+20);return b.substring(c,d)},_fireDefaultButton:function(a,d){if(a.keyCode===13){var c=a.srcElement||a.target;if(!c||c.tagName.toLowerCase()!=="textarea"){var b=document.getElementById(d);if(b&&typeof b.click!=="undefined"){this._activeDefaultButton=b;this._activeDefaultButtonClicked=false;try{b.click()}finally{this._activeDefaultButton=null}a.cancelBubble=true;if(typeof a.stopPropagation==="function")a.stopPropagation();return false}}}return true},_getPageLoadedEventArgs:function(j,e){var i=[],h=[],d=e?e.updatePanelData:null,c,g,b;if(!d){c=this._updatePanelIDs;g=null;b=null}else{c=d.updatePanelIDs;g=d.childUpdatePanelIDs;b=d.panelsToRefreshIDs}var a,f;if(b)for(a=0,f=b.length;a<f;a++)Array.add(i,document.getElementById(this._uniqueIDToClientID(b[a])));for(a=0,f=c.length;a<f;a++)if(j||Array.indexOf(g,c[a])!==-1)Array.add(h,document.getElementById(this._uniqueIDToClientID(c[a])));return new Sys.WebForms.PageLoadedEventArgs(i,h,e?e.dataItems:{})},_getPageLoadingEventArgs:function(h){var g=[],f=[],c=h.updatePanelData,b=c.oldUpdatePanelIDs,j=c.updatePanelIDs,i=c.childUpdatePanelIDs,e=c.panelsToRefreshIDs,a,d;for(a=0,d=e.length;a<d;a++)Array.add(g,document.getElementById(this._uniqueIDToClientID(e[a])));for(a=0,d=b.length;a<d;a++)if(Array.indexOf(e,b[a])===-1&&(Array.indexOf(j,b[a])===-1||Array.indexOf(i,b[a])>-1))Array.add(f,document.getElementById(this._uniqueIDToClientID(b[a])));return new Sys.WebForms.PageLoadingEventArgs(g,f,h.dataItems)},_getPostBackSettings:function(a,c){var d=a,b=null;while(a){if(a.id){if(!b&&Array.contains(this._asyncPostBackControlClientIDs,a.id))b=this._createPostBackSettings(true,this._scriptManagerID+"|"+c,d);else if(!b&&Array.contains(this._postBackControlClientIDs,a.id))return this._createPostBackSettings(false,null,null);else{var e=Array.indexOf(this._updatePanelClientIDs,a.id);if(e!==-1)if(this._updatePanelHasChildrenAsTriggers[e])return this._createPostBackSettings(true,this._updatePanelIDs[e]+"|"+c,d);else return this._createPostBackSettings(true,this._scriptManagerID+"|"+c,d)}if(!b&&this._matchesParentIDInList(a.id,this._asyncPostBackControlClientIDs))b=this._createPostBackSettings(true,this._scriptManagerID+"|"+c,d);else if(!b&&this._matchesParentIDInList(a.id,this._postBackControlClientIDs))return this._createPostBackSettings(false,null,null)}a=a.parentNode}if(!b)return this._createPostBackSettings(false,null,null);else return b},_getScrollPosition:function(){var a=document.documentElement;if(a&&(this._validPosition(a.scrollLeft)||this._validPosition(a.scrollTop)))return {x:a.scrollLeft,y:a.scrollTop};else{a=document.body;if(a&&(this._validPosition(a.scrollLeft)||this._validPosition(a.scrollTop)))return {x:a.scrollLeft,y:a.scrollTop};else if(this._validPosition(window.pageXOffset)||this._validPosition(window.pageYOffset))return {x:window.pageXOffset,y:window.pageYOffset};else return {x:0,y:0}}},_initializeInternal:function(a,b){if(this._prmInitialized)throw Error.invalidOperation(Sys.WebForms.Res.PRM_CannotRegisterTwice);this._prmInitialized=true;this._scriptManagerID=a;this._form=b;this._onsubmit=this._form.onsubmit;this._form.onsubmit=null;this._onFormSubmitHandler=Function.createDelegate(this,this._onFormSubmit);this._onFormElementClickHandler=Function.createDelegate(this,this._onFormElementClick);this._onWindowUnloadHandler=Function.createDelegate(this,this._onWindowUnload);Sys.UI.DomEvent.addHandler(this._form,"submit",this._onFormSubmitHandler);Sys.UI.DomEvent.addHandler(this._form,"click",this._onFormElementClickHandler);Sys.UI.DomEvent.addHandler(window,"unload",this._onWindowUnloadHandler);this._originalDoPostBack=window.__doPostBack;if(this._originalDoPostBack)window.__doPostBack=Function.createDelegate(this,this._doPostBack);this._originalDoPostBackWithOptions=window.WebForm_DoPostBackWithOptions;if(this._originalDoPostBackWithOptions)window.WebForm_DoPostBackWithOptions=Function.createDelegate(this,this._doPostBackWithOptions);this._originalFireDefaultButton=window.WebForm_FireDefaultButton;if(this._originalFireDefaultButton)window.WebForm_FireDefaultButton=Function.createDelegate(this,this._fireDefaultButton);this._originalDoCallback=window.WebForm_DoCallback;if(this._originalDoCallback)window.WebForm_DoCallback=Function.createDelegate(this,this._doCallback);this._pageLoadedHandler=Function.createDelegate(this,this._pageLoadedInitialLoad);Sys.UI.DomEvent.addHandler(window,"load",this._pageLoadedHandler)},_matchesParentIDInList:function(c,b){for(var a=0,d=b.length;a<d;a++)if(c.startsWith(b[a]+"_"))return true;return false},_onFormElementActive:function(a,d,e){if(a.disabled)return;this._postBackSettings=this._getPostBackSettings(a,a.name);if(a.name){var b=a.tagName.toUpperCase();if(b==="INPUT"){var c=a.type;if(c==="submit")this._additionalInput=encodeURIComponent(a.name)+"="+encodeURIComponent(a.value);else if(c==="image")this._additionalInput=encodeURIComponent(a.name)+".x="+d+"&"+encodeURIComponent(a.name)+".y="+e}else if(b==="BUTTON"&&a.name.length!==0&&a.type==="submit")this._additionalInput=encodeURIComponent(a.name)+"="+encodeURIComponent(a.value)}},_onFormElementClick:function(a){this._activeDefaultButtonClicked=a.target===this._activeDefaultButton;this._onFormElementActive(a.target,a.offsetX,a.offsetY)},_onFormSubmit:function(h){var g=true,t=this._isCrossPost;this._isCrossPost=false;var e,s;if(this._onsubmit)g=this._onsubmit();if(g)for(e=0,s=this._onSubmitStatements.length;e<s;e++)if(!this._onSubmitStatements[e]()){g=false;break}if(!g){if(h)h.preventDefault();return}var n=this._form;if(t)return;if(this._activeDefaultButton&&!this._activeDefaultButtonClicked)this._onFormElementActive(this._activeDefaultButton,0,0);if(!this._postBackSettings.async)return;var a=new Sys.StringBuilder;a.append(encodeURIComponent(this._scriptManagerID)+"="+encodeURIComponent(this._postBackSettings.panelID)+"&");var v=n.elements.length;for(e=0;e<v;e++){var d=n.elements[e],f=d.name;if(typeof f==="undefined"||f===null||f.length===0||f===this._scriptManagerID)continue;var m=d.tagName.toUpperCase();if(m==="INPUT"){var k=d.type;if(k==="text"||k==="password"||k==="hidden"||(k==="checkbox"||k==="radio")&&d.checked){a.append(encodeURIComponent(f));a.append("=");a.append(encodeURIComponent(d.value));a.append("&")}}else if(m==="SELECT"){var u=d.options.length;for(var o=0;o<u;o++){var q=d.options[o];if(q.selected){a.append(encodeURIComponent(f));a.append("=");a.append(encodeURIComponent(q.value));a.append("&")}}}else if(m==="TEXTAREA"){a.append(encodeURIComponent(f));a.append("=");a.append(encodeURIComponent(d.value));a.append("&")}}a.append("__ASYNCPOST=true&");if(this._additionalInput){a.append(this._additionalInput);this._additionalInput=null}var c=new Sys.Net.WebRequest,b=n.action;if(Sys.Browser.agent===Sys.Browser.InternetExplorer){var p=b.indexOf("#");if(p!==-1)b=b.substr(0,p);var l=b.indexOf("?");if(l!==-1){var r=b.substr(0,l);if(r.indexOf("%")===-1)b=encodeURI(r)+b.substr(l)}else if(b.indexOf("%")===-1)b=encodeURI(b)}c.set_url(b);c.get_headers()["X-MicrosoftAjax"]="Delta=true";c.get_headers()["Cache-Control"]="no-cache";c.set_timeout(this._asyncPostBackTimeout);c.add_completed(Function.createDelegate(this,this._onFormSubmitCompleted));c.set_body(a.toString());var i,j=this._get_eventHandlerList().getHandler("initializeRequest");if(j){i=new Sys.WebForms.InitializeRequestEventArgs(c,this._postBackSettings.sourceElement);j(this,i);g=!i.get_cancel()}if(!g){if(h)h.preventDefault();return}this._scrollPosition=this._getScrollPosition();this.abortPostBack();j=this._get_eventHandlerList().getHandler("beginRequest");if(j){i=new Sys.WebForms.BeginRequestEventArgs(c,this._postBackSettings.sourceElement);j(this,i)}if(this._originalDoCallback)this._cancelPendingCallbacks();this._request=c;this._processingRequest=false;c.invoke();if(h)h.preventDefault()},_onFormSubmitCompleted:function(c){this._processingRequest=true;if(c.get_timedOut()){this._endPostBack(this._createPageRequestManagerTimeoutError(),c,null);return}if(c.get_aborted()){this._endPostBack(null,c,null);return}if(!this._request||c.get_webRequest()!==this._request)return;if(c.get_statusCode()!==200){this._endPostBack(this._createPageRequestManagerServerError(c.get_statusCode()),c,null);return}var a=this._parseDelta(c);if(!a)return;var b,e;if(a.asyncPostBackControlIDsNode&&a.postBackControlIDsNode&&a.updatePanelIDsNode&&a.panelsToRefreshNode&&a.childUpdatePanelIDsNode){var p=this._updatePanelIDs,h=a.childUpdatePanelIDsNode.content,n=h.length?h.split(","):[],l=this._splitNodeIntoArray(a.asyncPostBackControlIDsNode),m=this._splitNodeIntoArray(a.postBackControlIDsNode),o=this._splitNodeIntoArray(a.updatePanelIDsNode),g=this._splitNodeIntoArray(a.panelsToRefreshNode);for(b=0,e=g.length;b<e;b++){var i=this._uniqueIDToClientID(g[b]);if(!document.getElementById(i)){this._endPostBack(Error.invalidOperation(String.format(Sys.WebForms.Res.PRM_MissingPanel,i)),c,a);return}}var f=this._processUpdatePanelArrays(o,l,m);f.oldUpdatePanelIDs=p;f.childUpdatePanelIDs=n;f.panelsToRefreshIDs=g;a.updatePanelData=f}a.dataItems={};var d;for(b=0,e=a.dataItemNodes.length;b<e;b++){d=a.dataItemNodes[b];a.dataItems[d.id]=d.content}for(b=0,e=a.dataItemJsonNodes.length;b<e;b++){d=a.dataItemJsonNodes[b];a.dataItems[d.id]=Sys.Serialization.JavaScriptSerializer.deserialize(d.content)}var k=this._get_eventHandlerList().getHandler("pageLoading");if(k)k(this,this._getPageLoadingEventArgs(a));Sys._ScriptLoader.readLoadedScripts();Sys.Application.beginCreateComponents();var j=Sys._ScriptLoader.getInstance();this._queueScripts(j,a.scriptBlockNodes,true,false);this._processingRequest=true;j.loadScripts(0,Function.createDelegate(this,Function.createCallback(this._scriptIncludesLoadComplete,a)),Function.createDelegate(this,Function.createCallback(this._scriptIncludesLoadFailed,a)),null)},_onWindowUnload:function(){this.dispose()},_pageLoaded:function(a,c){var b=this._get_eventHandlerList().getHandler("pageLoaded");if(b)b(this,this._getPageLoadedEventArgs(a,c));if(!a)Sys.Application.raiseLoad()},_pageLoadedInitialLoad:function(){this._pageLoaded(true,null)},_parseDelta:function(g){var c=g.get_responseData(),d,h,D,E,C,b=0,e=null,i=[];while(b<c.length){d=c.indexOf("|",b);if(d===-1){e=this._findText(c,b);break}h=parseInt(c.substring(b,d),10);if(h%1!==0){e=this._findText(c,b);break}b=d+1;d=c.indexOf("|",b);if(d===-1){e=this._findText(c,b);break}D=c.substring(b,d);b=d+1;d=c.indexOf("|",b);if(d===-1){e=this._findText(c,b);break}E=c.substring(b,d);b=d+1;if(b+h>=c.length){e=this._findText(c,c.length);break}C=c.substr(b,h);b+=h;if(c.charAt(b)!=="|"){e=this._findText(c,b);break}b++;Array.add(i,{type:D,id:E,content:C})}if(e){this._endPostBack(this._createPageRequestManagerParserError(String.format(Sys.WebForms.Res.PRM_ParserErrorDetails,e)),g,null);return null}var w=[],u=[],o=[],v=[],r=[],B=[],z=[],y=[],t=[],q=[],k,n,s,l,m,p,x;for(var j=0,F=i.length;j<F;j++){var a=i[j];switch(a.type){case "updatePanel":Array.add(w,a);break;case "hiddenField":Array.add(u,a);break;case "arrayDeclaration":Array.add(o,a);break;case "scriptBlock":Array.add(v,a);break;case "scriptStartupBlock":Array.add(r,a);break;case "expando":Array.add(B,a);break;case "onSubmit":Array.add(z,a);break;case "asyncPostBackControlIDs":k=a;break;case "postBackControlIDs":n=a;break;case "updatePanelIDs":s=a;break;case "asyncPostBackTimeout":l=a;break;case "childUpdatePanelIDs":m=a;break;case "panelsToRefreshIDs":p=a;break;case "formAction":x=a;break;case "dataItem":Array.add(y,a);break;case "dataItemJson":Array.add(t,a);break;case "scriptDispose":Array.add(q,a);break;case "pageRedirect":if(Sys.Browser.agent===Sys.Browser.InternetExplorer){var f=document.createElement("a");f.style.display="none";f.attachEvent("onclick",A);f.href=a.content;this._form.parentNode.insertBefore(f,this._form);f.click();f.detachEvent("onclick",A);this._form.parentNode.removeChild(f);function A(a){a.cancelBubble=true}}else window.location.href=a.content;return;case "error":this._endPostBack(this._createPageRequestManagerServerError(Number.parseInvariant(a.id),a.content),g,null);return null;case "pageTitle":document.title=a.content;break;case "focus":this._controlIDToFocus=a.content;break;default:this._endPostBack(this._createPageRequestManagerParserError(String.format(Sys.WebForms.Res.PRM_UnknownToken,a.type)),g,null);return null}}return {executor:g,updatePanelNodes:w,hiddenFieldNodes:u,arrayDeclarationNodes:o,scriptBlockNodes:v,scriptStartupNodes:r,expandoNodes:B,onSubmitNodes:z,dataItemNodes:y,dataItemJsonNodes:t,scriptDisposeNodes:q,asyncPostBackControlIDsNode:k,postBackControlIDsNode:n,updatePanelIDsNode:s,asyncPostBackTimeoutNode:l,childUpdatePanelIDsNode:m,panelsToRefreshNode:p,formActionNode:x}},_processUpdatePanelArrays:function(e,l,n){var d,c,b;if(e){var f=e.length;d=new Array(f);c=new Array(f);b=new Array(f);for(var a=0;a<f;a++){var k=e[a].substr(1),m=e[a].charAt(0)==="t";b[a]=m;d[a]=k;c[a]=this._uniqueIDToClientID(k)}}else{d=[];c=[];b=[]}var i=[],g=[];this._convertToClientIDs(l,i,g);var j=[],h=[];this._convertToClientIDs(n,j,h);return {updatePanelIDs:d,updatePanelClientIDs:c,updatePanelHasChildrenAsTriggers:b,asyncPostBackControlIDs:i,asyncPostBackControlClientIDs:g,postBackControlIDs:j,postBackControlClientIDs:h}},_queueScripts:function(scriptLoader,scriptBlockNodes,queueIncludes,queueBlocks){for(var i=0,l=scriptBlockNodes.length;i<l;i++){var scriptBlockType=scriptBlockNodes[i].id;switch(scriptBlockType){case "ScriptContentNoTags":if(!queueBlocks)continue;scriptLoader.queueScriptBlock(scriptBlockNodes[i].content);break;case "ScriptContentWithTags":var scriptTagAttributes;eval("scriptTagAttributes = "+scriptBlockNodes[i].content);if(scriptTagAttributes.src){if(!queueIncludes||Sys._ScriptLoader.isScriptLoaded(scriptTagAttributes.src))continue}else if(!queueBlocks)continue;scriptLoader.queueCustomScriptTag(scriptTagAttributes);break;case "ScriptPath":if(!queueIncludes||Sys._ScriptLoader.isScriptLoaded(scriptBlockNodes[i].content))continue;scriptLoader.queueScriptReference(scriptBlockNodes[i].content)}}},_registerDisposeScript:function(a,b){if(!this._scriptDisposes[a])this._scriptDisposes[a]=[b];else Array.add(this._scriptDisposes[a],b)},_scriptIncludesLoadComplete:function(e,b){if(b.executor.get_webRequest()!==this._request)return;this._commitControls(b.updatePanelData,b.asyncPostBackTimeoutNode?b.asyncPostBackTimeoutNode.content:null);if(b.formActionNode)this._form.action=b.formActionNode.content;var a,d,c;for(a=0,d=b.updatePanelNodes.length;a<d;a++){c=b.updatePanelNodes[a];var j=document.getElementById(c.id);if(!j){this._endPostBack(Error.invalidOperation(String.format(Sys.WebForms.Res.PRM_MissingPanel,c.id)),b.executor,b);return}this._updatePanel(j,c.content)}for(a=0,d=b.scriptDisposeNodes.length;a<d;a++){c=b.scriptDisposeNodes[a];this._registerDisposeScript(c.id,c.content)}for(a=0,d=this._transientFields.length;a<d;a++){var g=document.getElementById(this._transientFields[a]);if(g){var k=g._isContained?g.parentNode:g;k.parentNode.removeChild(k)}}for(a=0,d=b.hiddenFieldNodes.length;a<d;a++){c=b.hiddenFieldNodes[a];this._createHiddenField(c.id,c.content)}if(b.scriptsFailed)throw Sys._ScriptLoader._errorScriptLoadFailed(b.scriptsFailed.src,b.scriptsFailed.multipleCallbacks);this._queueScripts(e,b.scriptBlockNodes,false,true);var i="";for(a=0,d=b.arrayDeclarationNodes.length;a<d;a++){c=b.arrayDeclarationNodes[a];i+="Sys.WebForms.PageRequestManager._addArrayElement('"+c.id+"', "+c.content+");\r\n"}var h="";for(a=0,d=b.expandoNodes.length;a<d;a++){c=b.expandoNodes[a];h+=c.id+" = "+c.content+"\r\n"}if(i.length)e.queueScriptBlock(i);if(h.length)e.queueScriptBlock(h);this._queueScripts(e,b.scriptStartupNodes,true,true);var f="";for(a=0,d=b.onSubmitNodes.length;a<d;a++){if(a===0)f="Array.add(Sys.WebForms.PageRequestManager.getInstance()._onSubmitStatements, function() {\r\n";f+=b.onSubmitNodes[a].content+"\r\n"}if(f.length){f+="\r\nreturn true;\r\n});\r\n";e.queueScriptBlock(f)}e.loadScripts(0,Function.createDelegate(this,Function.createCallback(this._scriptsLoadComplete,b)),null,null)},_scriptIncludesLoadFailed:function(d,c,b,a){a.scriptsFailed={src:c.src,multipleCallbacks:b};this._scriptIncludesLoadComplete(d,a)},_scriptsLoadComplete:function(f,c){var e=c.executor;if(window.__theFormPostData)window.__theFormPostData="";if(window.__theFormPostCollection)window.__theFormPostCollection=[];if(window.WebForm_InitCallback)window.WebForm_InitCallback();if(this._scrollPosition){if(window.scrollTo)window.scrollTo(this._scrollPosition.x,this._scrollPosition.y);this._scrollPosition=null}Sys.Application.endCreateComponents();this._pageLoaded(false,c);this._endPostBack(null,e,c);if(this._controlIDToFocus){var a,d;if(Sys.Browser.agent===Sys.Browser.InternetExplorer){var b=$get(this._controlIDToFocus);a=b;if(b&&!WebForm_CanFocus(b))a=WebForm_FindFirstFocusableChild(b);if(a&&typeof a.contentEditable!=="undefined"){d=a.contentEditable;a.contentEditable=false}else a=null}WebForm_AutoFocus(this._controlIDToFocus);if(a)a.contentEditable=d;this._controlIDToFocus=null}},_splitNodeIntoArray:function(b){var a=b.content,c=a.length?a.split(","):[];return c},_uniqueIDToClientID:function(a){return a.replace(/\$/g,"_")},_updateControls:function(d,a,c,b){this._commitControls(this._processUpdatePanelArrays(d,a,c),b)},_updatePanel:function(updatePanelElement,rendering){for(var updatePanelID in this._scriptDisposes)if(this._elementContains(updatePanelElement,document.getElementById(updatePanelID))){var disposeScripts=this._scriptDisposes[updatePanelID];for(var i=0,l=disposeScripts.length;i<l;i++)eval(disposeScripts[i]);delete this._scriptDisposes[updatePanelID]}this._destroyTree(updatePanelElement);updatePanelElement.innerHTML=rendering},_validPosition:function(a){return typeof a!=="undefined"&&a!==null&&a!==0}};Sys.WebForms.PageRequestManager.getInstance=function(){var a=Sys.WebForms.PageRequestManager._instance;if(!a)a=Sys.WebForms.PageRequestManager._instance=new Sys.WebForms.PageRequestManager;return a};Sys.WebForms.PageRequestManager._addArrayElement=function(a){if(!window[a])window[a]=[];for(var b=1,c=arguments.length;b<c;b++)Array.add(window[a],arguments[b])};Sys.WebForms.PageRequestManager._initialize=function(a,b){Sys.WebForms.PageRequestManager.getInstance()._initializeInternal(a,b)};Sys.WebForms.PageRequestManager.registerClass("Sys.WebForms.PageRequestManager");Sys.UI._UpdateProgress=function(a){Sys.UI._UpdateProgress.initializeBase(this,[a]);this._displayAfter=500;this._dynamicLayout=true;this._associatedUpdatePanelId=null;this._beginRequestHandlerDelegate=null;this._startDelegate=null;this._endRequestHandlerDelegate=null;this._pageRequestManager=null;this._timerCookie=null};Sys.UI._UpdateProgress.prototype={get_displayAfter:function(){return this._displayAfter},set_displayAfter:function(a){this._displayAfter=a},get_dynamicLayout:function(){return this._dynamicLayout},set_dynamicLayout:function(a){this._dynamicLayout=a},get_associatedUpdatePanelId:function(){return this._associatedUpdatePanelId},set_associatedUpdatePanelId:function(a){this._associatedUpdatePanelId=a},_clearTimeout:function(){if(this._timerCookie){window.clearTimeout(this._timerCookie);this._timerCookie=null}},_handleBeginRequest:function(d,c){var a=c.get_postBackElement(),b=!this._associatedUpdatePanelId;while(!b&&a){if(a.id&&this._associatedUpdatePanelId===a.id)b=true;a=a.parentNode}if(b)this._timerCookie=window.setTimeout(this._startDelegate,this._displayAfter)},_startRequest:function(){if(this._pageRequestManager.get_isInAsyncPostBack())if(this._dynamicLayout)this.get_element().style.display="block";else this.get_element().style.visibility="visible";this._timerCookie=null},_handleEndRequest:function(){if(this._dynamicLayout)this.get_element().style.display="none";else this.get_element().style.visibility="hidden";this._clearTimeout()},dispose:function(){if(this._beginRequestHandlerDelegate!==null){this._pageRequestManager.remove_beginRequest(this._beginRequestHandlerDelegate);this._pageRequestManager.remove_endRequest(this._endRequestHandlerDelegate);this._beginRequestHandlerDelegate=null;this._endRequestHandlerDelegate=null}this._clearTimeout();Sys.UI._UpdateProgress.callBaseMethod(this,"dispose")},initialize:function(){Sys.UI._UpdateProgress.callBaseMethod(this,"initialize");this._beginRequestHandlerDelegate=Function.createDelegate(this,this._handleBeginRequest);this._endRequestHandlerDelegate=Function.createDelegate(this,this._handleEndRequest);this._startDelegate=Function.createDelegate(this,this._startRequest);if(Sys.WebForms&&Sys.WebForms.PageRequestManager)this._pageRequestManager=Sys.WebForms.PageRequestManager.getInstance();if(this._pageRequestManager!==null){this._pageRequestManager.add_beginRequest(this._beginRequestHandlerDelegate);this._pageRequestManager.add_endRequest(this._endRequestHandlerDelegate)}}};Sys.UI._UpdateProgress.registerClass("Sys.UI._UpdateProgress",Sys.UI.Control);~
hfe\[Z
!))$F@????N
6(?9:n
d".BLJ=<
_'C-SRJ
W<r;<#
o<K:K+)
^4rS//@LPO>>
qQOC>.
wwwwu
MYkXk#
-I^W8OooN
1I^\=%&$
2I^^K39!
@I^^F?>'
@G^^F?>(
CLaca]E)
RbmmmmdD
S64.07
6<<<<<<<<3
@wnglwrggh
=nD-BwwppsSUZYTP9cJFJc^JJ[R0P0Q
<iA).lj^Ng^^i7
7_NGGc_N^_OO_7
DpA$-xpffnfgs@
@xrpwxzzzzzzz=
%@@@=D@@@@@@=%
<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="ServiceMapSchema" targetNamespace="urn:schemas-microsoft-com:xml-wcfservicemap" elementFormDefault="qualified" xmlns="urn:schemas-microsoft-com:xml-wcfservicemap" xmlns:mstns="urn:schemas-microsoft-com:xml-wcfservicemap" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:annotation>
    <xs:documentation xml:lang="en">
        The schema of Service Reference Map files
        Copyright (c) Microsoft Corp. All rights reserved.
    </xs:documentation>
  </xs:annotation>
  <xs:element name="ReferenceGroup">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="ClientOptions" maxOccurs="1" minOccurs="0" type="ClientOptions" />
        <xs:element name="MetadataSources" maxOccurs="1" minOccurs="0">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="MetadataSource" maxOccurs="unbounded" minOccurs="0" type="MetadataSource">
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Metadata" maxOccurs="1" minOccurs="1">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="MetadataFile" minOccurs="0" maxOccurs="unbounded" type="MetadataFile" />
            </xs:sequence>
          </xs:complexType>
          <xs:key name="MetadataFileNameKey">
            <xs:selector xpath=".//mstns:MetadataFile" />
            <xs:field xpath="@FileName" />
          </xs:key>
          <xs:key name="MetadataIDKey">
            <xs:selector xpath=".//mstns:MetadataFile" />
            <xs:field xpath="@ID" />
          </xs:key>
        </xs:element>
        <xs:element name="Extensions" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="ExtensionFile" minOccurs="0" maxOccurs="unbounded" type="ExtensionFile" />
            </xs:sequence>
          </xs:complexType>
          <xs:key name="ReferenceGroupExtensionNameKey">
            <xs:selector xpath=".//mstns:ExtensionFile" />
            <xs:field xpath="@Name" />
          </xs:key>
        </xs:element>
      </xs:sequence>
      <xs:attribute name="ID" type="guid" use="required" />
    </xs:complexType>
    <xs:key name="ReferenceGroupSourceIdKey">
      <xs:selector xpath=".//mstns:MetadataSource" />
      <xs:field xpath="@SourceId" />
    </xs:key>
    <xs:keyref name="MetadataFileSourceIdRef" refer="ReferenceGroupSourceIdKey">
      <xs:selector xpath=".//mstns:MetadataFile" />
      <xs:field xpath="@SourceId" />
    </xs:keyref>
  </xs:element>
  <xs:simpleType name="MetadataType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Wsdl" />
      <xs:enumeration value="Schema" />
      <xs:enumeration value="Disco" />
      <xs:enumeration value="Xml" />
      <xs:enumeration value="Policy" />
      <xs:enumeration value="Unknown" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ProtocolType">
    <xs:restriction base="nonEmptyString">
        <!--
      <xs:enumeration value="http" />
      <xs:enumeration value="mex" />
      <xs:enumeration value="file" />
         -->
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ProxySerializerType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Auto" />
      <xs:enumeration value="DataContractSerializer" />
      <xs:enumeration value="XmlSerializer" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CollectionCategory">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Unknown" />
      <xs:enumeration value="List" />
      <xs:enumeration value="Dictionary" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="guid">
    <xs:restriction base="xs:string">
      <xs:pattern value="[\da-fA-F]{8}-[\da-fA-F]{4}-[\da-fA-F]{4}-[\da-fA-F]{4}-[\da-fA-F]{12}" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="TypeName">
    <xs:restriction base="nonEmptyString">
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="AssemblyName">
    <xs:restriction base="nonEmptyString">
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="FileName">
    <xs:restriction base="nonEmptyString">
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="nonEmptyString">
    <xs:restriction base="xs:string">
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="MetadataSource">
    <xs:sequence />
    <xs:attribute name="SourceId" type="xs:positiveInteger" use="required" />
    <xs:attribute name="Address" type="nonEmptyString" use="required" />
    <xs:attribute name="Protocol" type="ProtocolType" use="required" />
  </xs:complexType>
  <xs:complexType name="MetadataFile">
    <xs:sequence>
    </xs:sequence>
    <xs:attribute name="MetadataType" type="MetadataType" use="required" />
    <xs:attribute name="FileName" type="FileName" use="required" />
    <xs:attribute name="TargetNamespace" type="xs:anyURI" />
    <xs:attribute name="SourceUrl" type="xs:string" />
    <xs:attribute name="ID" type="guid" use="required" />
    <xs:attribute name="SourceId" use="optional" type="xs:positiveInteger">
    </xs:attribute>
    <xs:attribute name="Ignore" type="xs:boolean" default="false" use="optional" />
    <xs:attribute name="IsMergeResult" type="xs:boolean" use="optional" default="false" />
  </xs:complexType>
  <xs:complexType name="ExtensionFile">
    <xs:sequence />
    <xs:attribute name="Name" type="nonEmptyString" use="required" />
    <xs:attribute name="FileName" type="FileName" use="required" />
  </xs:complexType>
  <xs:complexType name="ReferencedDataContractType">
    <xs:sequence />
    <xs:attribute name="TypeName" type="TypeName" use="required" />
  </xs:complexType>
  <xs:complexType name="ServiceContractMapping">
    <xs:sequence />
    <xs:attribute name="TargetNamespace" type="xs:anyURI" use="required" />
    <xs:attribute name="Name" type="nonEmptyString" use="required" />
    <xs:attribute name="TypeName" type="TypeName" use="required" />
  </xs:complexType>
  <xs:complexType name="NamespaceMapping">
    <xs:sequence />
    <xs:attribute name="TargetNamespace" type="xs:anyURI" use="required" />
    <xs:attribute name="ClrNamespace" type="xs:string" use="required" />
  </xs:complexType>
  <xs:complexType name="ReferencedAssembly">
    <xs:sequence />
    <xs:attribute name="AssemblyName" type="AssemblyName" use="required" />
  </xs:complexType>
  <xs:complexType name="ExcludedType">
    <xs:sequence />
    <xs:attribute name="TypeName" type="TypeName" use="required" />
  </xs:complexType>
  <xs:complexType name="CollectionMapping">
    <xs:sequence>
    </xs:sequence>
    <xs:attribute name="TypeName" type="TypeName" use="required" />
    <xs:attribute name="Category" type="CollectionCategory" />
  </xs:complexType>
  <xs:complexType name="ClientOptions">
    <xs:all>
      <xs:element name="NamespaceMappings" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="NamespaceMapping" maxOccurs="unbounded" minOccurs="0" type="NamespaceMapping">
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ServiceContractMappings" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="ServiceContractMapping" maxOccurs="unbounded" minOccurs="0" type="ServiceContractMapping" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ReferencedDataContractTypes" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="ReferencedDataContractType" minOccurs="0" maxOccurs="unbounded" type="ReferencedDataContractType" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ReferencedAssemblies" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="ReferencedAssembly" maxOccurs="unbounded" minOccurs="0" type="ReferencedAssembly">
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ExcludedTypes" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="ExcludedType" minOccurs="0" maxOccurs="unbounded" type="ExcludedType">
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="CollectionMappings" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="CollectionMapping" maxOccurs="unbounded" minOccurs="0" type="CollectionMapping">
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GenerateInternalTypes" type="xs:boolean" minOccurs="0" />
      <xs:element name="GenerateAsynchronousMethods" type="xs:boolean" minOccurs="0" />
      <xs:element name="GenerateSerializableTypes" type="xs:boolean" minOccurs="0" />
      <xs:element name="GenerateMessageContracts" type="xs:boolean" minOccurs="0" />
      <xs:element name="ImportXmlTypes" type="xs:boolean" minOccurs="0" />
      <xs:element name="EnableDataBinding" type="xs:boolean" minOccurs="0" />
      <xs:element name="Serializer" type="ProxySerializerType" minOccurs="0" />
      <xs:element name="UseSerializerForFaults" type="xs:boolean" minOccurs="0" />
      <xs:element name="Wrapped" type="xs:boolean" minOccurs="0" />
      <xs:element name="ReferenceAllAssemblies" type="xs:boolean" minOccurs="0" />
          <!--
      <xs:element name="DisableGeneratingConfiguration" type="xs:boolean" minOccurs="0" />
      <xs:element name="DisableGeneratingContract" type="xs:boolean" minOccurs="0" />
      <xs:element name="DefaultContractNamespace" type="xs:string" minOccurs="0" />
           -->
    </xs:all>
  </xs:complexType>
</xs:schema>
<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="DataServiceMapSchema" targetNamespace="urn:schemas-microsoft-com:xml-dataservicemap" elementFormDefault="qualified" xmlns="urn:schemas-microsoft-com:xml-dataservicemap" xmlns:mstns="urn:schemas-microsoft-com:xml-dataservicemap" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:annotation>
    <xs:documentation xml:lang="en">
        The schema of Data Service Reference Map files
        Copyright (c) Microsoft Corp. All rights reserved.
    </xs:documentation>
  </xs:annotation>
  <xs:element name="ReferenceGroup">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="MetadataSources" maxOccurs="1" minOccurs="0">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="MetadataSource" maxOccurs="unbounded" minOccurs="0" type="MetadataSource">
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Metadata" maxOccurs="1" minOccurs="1">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="MetadataFile" minOccurs="0" maxOccurs="unbounded" type="MetadataFile" />
            </xs:sequence>
          </xs:complexType>
          <xs:key name="MetadataFileNameKey">
            <xs:selector xpath=".//mstns:MetadataFile" />
            <xs:field xpath="@FileName" />
          </xs:key>
          <xs:key name="MetadataIDKey">
            <xs:selector xpath=".//mstns:MetadataFile" />
            <xs:field xpath="@ID" />
          </xs:key>
        </xs:element>
        <xs:element name="Extensions" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="ExtensionFile" minOccurs="0" maxOccurs="unbounded" type="ExtensionFile" />
            </xs:sequence>
          </xs:complexType>
          <xs:key name="ReferenceGroupExtensionNameKey">
            <xs:selector xpath=".//mstns:ExtensionFile" />
            <xs:field xpath="@Name" />
          </xs:key>
        </xs:element>
      </xs:sequence>
      <xs:attribute name="ID" type="guid" use="required" />
    </xs:complexType>
    <xs:key name="ReferenceGroupSourceIdKey">
      <xs:selector xpath=".//mstns:MetadataSource" />
      <xs:field xpath="@SourceId" />
    </xs:key>
    <xs:keyref name="MetadataFileSourceIdRef" refer="ReferenceGroupSourceIdKey">
      <xs:selector xpath=".//mstns:MetadataFile" />
      <xs:field xpath="@SourceId" />
    </xs:keyref>
  </xs:element>
  <xs:simpleType name="MetadataType">
    <xs:restriction base="nonEmptyString">
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ProtocolType">
    <xs:restriction base="nonEmptyString">
        <!--
      <xs:enumeration value="http" />
      <xs:enumeration value="mex" />
      <xs:enumeration value="file" />
         -->
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="guid">
    <xs:restriction base="xs:string">
      <xs:pattern value="[\da-fA-F]{8}-[\da-fA-F]{4}-[\da-fA-F]{4}-[\da-fA-F]{4}-[\da-fA-F]{12}" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="FileName">
    <xs:restriction base="nonEmptyString">
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="nonEmptyString">
    <xs:restriction base="xs:string">
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="MetadataSource">
    <xs:sequence />
    <xs:attribute name="SourceId" type="xs:positiveInteger" use="required" />
    <xs:attribute name="Address" type="nonEmptyString" use="required" />
    <xs:attribute name="Protocol" type="ProtocolType" use="required" />
  </xs:complexType>
  <xs:complexType name="MetadataFile">
    <xs:sequence>
    </xs:sequence>
    <xs:attribute name="MetadataType" type="MetadataType" use="required" />
    <xs:attribute name="FileName" type="FileName" use="required" />
    <xs:attribute name="TargetNamespace" type="xs:anyURI" />
    <xs:attribute name="SourceUrl" type="xs:string" />
    <xs:attribute name="ID" type="guid" use="required" />
    <xs:attribute name="SourceId" use="optional" type="xs:positiveInteger">
    </xs:attribute>
    <xs:attribute name="Ignore" type="xs:boolean" default="false" use="optional" />
    <xs:attribute name="IsMergeResult" type="xs:boolean" use="optional" default="false" />
  </xs:complexType>
  <xs:complexType name="ExtensionFile">
    <xs:sequence />
    <xs:attribute name="Name" type="nonEmptyString" use="required" />
    <xs:attribute name="FileName" type="FileName" use="required" />
  </xs:complexType>
</xs:schema>
v2.0.50727
#Strings
#GUID
#Blob
1"="A"E$M'U'A-
OqPMR
S}WAXAY
ZFVxi
h_gegmg
l/lyl
m m1mLmTm`mkm
n6nQnmn
o/oDo_odo
q;qEqIq\qjq|q
r'rIrOrZr
s)sFsbsxs
t't?tEtStYttt
t>vLvVvpv
y<yfy
zEzxz
|)|A|T|c|l|r|~|
|4}d}
}'~4~?~R~^~n~t~
d e!f"g#u$z%
$-6?HRapy
`.i.r.{.
l(l]lql
yTy]y
y3z<zlz
102030405060708090:0;0<0QPbacadaeawv{z
<Module>
System.Web.Extensions.dll
HttpResponseInternalBase
System.Web
HttpResponseInternalWrapper
ApplicationServiceHelper
System.Web.ApplicationServices
ApplicationServicesHostFactory
AuthenticatingEventArgs
AuthenticationService
CreatingCookieEventArgs
KnownTypesProvider
ProfilePropertyMetadata
ProfileService
RoleService
SelectingProviderEventArgs
ValidatingPropertiesEventArgs
ClientFormsIdentity
System.Web.ClientServices
ClientRolePrincipal
ConnectivityStatus
ClientData
System.Web.ClientServices.Providers
ClientDateStoreOrderEnum
ClientDataManager
ClientFormsAuthenticationCredentials
ClientFormsAuthenticationMembershipProvider
ClientRoleProvider
ClientSettingsProvider
ClientWindowsAuthenticationMembershipProvider
IClientFormsAuthenticationCredentialsProvider
ProxyHelper
UnsafeNativeMethods
SettingsSavedEventArgs
SqlHelper
UserValidatedEventArgs
System.Web.Profile
WebServiceErrorEvent
System.Web.Management
DataPager
System.Web.UI.WebControls
DataPagerCommandEventArgs
DataPagerField
DataPagerFieldCollection
DataPagerFieldCommandEventArgs
DataPagerFieldItem
DynamicQueryable
System.Web.Query.Dynamic
DynamicClass
DynamicProperty
DynamicExpression
DynamicOrdering
Signature
ClassFactory
ParseException
ExpressionParser
Token
TokenId
ILogicalSignatures
IArithmeticSignatures
IRelationalSignatures
IEqualitySignatures
IAddSignatures
ISubtractSignatures
INegationSignatures
INotSignatures
IEnumerableSignatures
MethodData
IDynamicQueryable
DynamicQueryableWrapper
ILinqToSql
InsertItemPosition
IPageableItemContainer
IDynamicDataSource
System.Web.DynamicData
LinqDataSource
LinqDataSourceContextData
LinqDataSourceContextEventArgs
LinqDataSourceDeleteEventArgs
LinqDataSourceDisposeEventArgs
LinqDataSourceEditData
LinqDataSourceHelper
LinqDataSourceInsertEventArgs
LinqDataSourceSelectEventArgs
LinqDataSourceStatusEventArgs
LinqDataSourceUpdateEventArgs
IDynamicValidatorException
LinqDataSourceValidationException
LinqDataSourceView
LinqDataSourceAutoGeneratedWhere
LinqToSqlWrapper
ListView
ListViewCancelEventArgs
ListViewCancelMode
ListViewCommandEventArgs
ListViewContainer
ListViewItem
ListViewDataItem
ListViewDeletedEventArgs
ListViewDeleteEventArgs
ListViewEditEventArgs
ListViewInsertedEventArgs
ListViewInsertEventArgs
ListViewItemEventArgs
ListViewItemType
ListViewPagedDataSource
EnumeratorOnIEnumerator
EnumeratorOnICollection
EnumeratorOnIList
EnumeratorOnArray
ListViewSelectEventArgs
ListViewSortEventArgs
ListViewTableCell
ListViewTableRow
ListViewUpdatedEventArgs
ListViewUpdateEventArgs
NextPreviousPagerField
NumericPagerField
PageEventArgs
PagePropertiesChangingEventArgs
TemplatePagerField
DynamicDataSourceOperation
DynamicValidatorEventArgs
Converter
System.Web.Configuration
ConvertersCollection
ScriptingAuthenticationServiceSection
ScriptingJsonSerializationSection
ApplicationSettings
ScriptingProfileServiceSection
ScriptingRoleServiceSection
ScriptingScriptResourceHandlerSection
ScriptingSectionGroup
ScriptingWebServicesSectionGroup
SystemWebExtensionsSectionGroup
ClientCultureInfo
System.Web.Globalization
IScriptResourceHandler
System.Web.Handlers
ScriptModule
ScriptResourceHandler
VirtualFileReader
RuntimeScriptResourceHandler
JavaScriptTypeResolver
System.Web.Script.Serialization
DictionaryTypeResolver
JavaScriptConverter
JavaScriptObjectDeserializer
JavaScriptSerializer
ReferenceComparer
SerializationFormat
JavaScriptString
ObjectConverter
ScriptIgnoreAttribute
SimpleTypeResolver
ClientProxyGenerator
System.Web.Script.Services
GenerateScriptTypeAttribute
PageClientProxyGenerator
ProxyGenerator
ResponseFormat
RestClientProxyHandler
RestHandler
WebServiceError
RestHandlerWithSession
RestHandlerFactory
ScriptHandlerFactory
HandlerWrapper
HandlerWrapperWithSession
AsyncHandlerWrapper
AsyncHandlerWrapperWithSession
ScriptMethodAttribute
ScriptServiceAttribute
ServicesUtilities
WCFServiceClientProxyGenerator
WebServiceClientProxyGenerator
WebServiceData
WebServiceTypeData
WebServiceEnumData
WebServiceMethodData
WebServiceParameterData
System.Web.Security
ICompilationSection
System.Web.UI
AppLevelCompilationSectionCache
ApplicationServiceManager
AssemblyCache
AsyncPostBackErrorEventArgs
UpdatePanelTrigger
pdatePanelControlTrigger
AsyncPostBackTrigger
AuthenticationServiceManager
IClientScriptManager
ClientScriptManagerWrapper
IClientUrlResolver
ClientUrlResolverWrapper
ScriptReferenceBase
CompositeScriptReference
CompositeScriptReferenceEventArgs
ControlUtil
ICustomErrorsSection
CustomErrorsSectionWrapper
IDeploymentSection
DeploymentSectionCache
EmbeddedResourceFinder
EmptyStringExpandableObjectConverter
IExtenderControl
ExtenderControl
HistoryEventArgs
IHtmlForm
HtmlFormWrapper
IControl
IPage
IScriptControl
IScriptManagerInternal
PageRequestManager
ParserStringWriter
ParserState
ParserHtmlTextWriter
ScriptDataItem
ScriptDataItemCollection
PageWrapper
PostBackTrigger
ProfileServiceManager
RegisteredArrayDeclaration
RegisteredDisposeScript
RegisteredExpandoAttribute
RegisteredHiddenField
RegisteredScript
RegisteredScriptType
ResourceCategoryAttribute
ResourceDefaultValueAttribute
ResourceDescriptionAttribute
ResourceDisplayNameAttribute
RoleServiceManager
ScriptDescriptor
ScriptComponentDescriptor
Expression
ExpressionType
ComponentReference
ElementReference
ObjectReference
ScriptExpression
ScriptBehaviorDescriptor
ScriptControl
ScriptControlDescriptor
ScriptControlManager
ScriptManager
StatePersister
ScriptManagerProxy
ScriptMode
ScriptReference
ScriptReferenceCollection
ScriptReferenceEventArgs
ScriptRegistrationManager
ScriptResourceAttribute
ScriptResourceInfo
ServiceReference
ServiceReferenceCollection
TargetControlTypeAttribute
TargetControlTypeCache
Timer
UpdatePanel
SingleChildControlCollection
UpdatePanelRenderMode
UpdatePanelTriggerCollection
UpdatePanelUpdateMode
UpdateProgress
WebResourceUtil
AppSettings
System.Web.Extensions.Util
AssemblyUtil
System.Web.Util
HeaderUtility
HexParser
OrderedDictionary`2
Pair`2
Tuple
AtlasWeb
System.Web.Resources
IWcfReferenceReceiveContextInformation
System.Web.Compilation
WCFBuildProvider
IContractGeneratorReferenceTypeLoader
System.Web.Compilation.WCFModel
TypeResolver
ImportExtensionServiceProvider
AbstractSvcMapFileLoader
AsmxEndpointPickerExtension
ClientOptions
ProxySerializerType
ContractMapping
ExternalFile
ExtensionFile
GeneratedContractType
MetadataFile
MetadataType
MetadataContent
MetadataSource
NamespaceMapping
ProxyGenerationError
GeneratorState
ReferencedAssembly
ReferencedCollectionType
CollectionCategory
ReferencedType
SchemaMerger
SchemaTopLevelItemType
AttributeComparer
SvcMapFile
SvcMapFileLoader
AbstractDataSvcMapFileLoader
DataSvcMapFile
DataSvcMapFileLoader
VSWCFServiceContractGenerator
WsdlInspector
OperationComparer
OperationFaultComparer
MessagePartComparer
MatchCollectionItemDelegate`1
XmlStrings
DISCO
Elements
XmlSchema
DataSet
Attributes
MetadataExchange
WsdlContractInheritance
WSAddressing
WSPolicy
DataServices
XmlSerializationWriterSvcMapFile
System.Web.Compilation.XmlSerializer
XmlSerializationReaderSvcMapFile
XmlSerializer1
SvcMapFileSerializer
XmlSerializerContract
XmlSerializationWriterDataSvcMapFile
System.Web.Compilation.XmlSerializerDataSvc
XmlSerializationReaderDataSvcMapFile
DataSvcMapFileSerializer
WCFModelStrings
FX20Assembly
FX35Assembly
FXAssembly
ThisAssembly
AssemblyRef
System.Web.Abstractions
HttpResponseBase
mscorlib
System
Object
System.ServiceModel
System.ServiceModel.Activation
ServiceHostFactory
EventArgs
System.Security.Principal
IIdentity
IDisposable
IPrincipal
MembershipProvider
RoleProvider
System.Configuration
SettingsProvider
IApplicationSettingsProvider
WebRequestErrorEvent
Control
IAttributeAccessor
INamingContainer
ICompositeControlDesignerAccessor
CommandEventArgs
IStateManager
StateManagedCollection
INonBindingContainer
IEquatable`1
Exception
ValueType
IDataSource
DataSourceControl
System.ComponentModel
CancelEventArgs
System.Runtime.Serialization
ISerializable
DataSourceView
DataBoundControl
IPersistedSelector
IDataItemContainer
System.Collections
ICollection
IEnumerable
ITypedList
IEnumerator
System.Web.UI.HtmlControls
HtmlTableCell
HtmlTableRow
ConfigurationElement
ConfigurationElementCollection
ConfigurationSection
ConfigurationSectionGroup
IHttpModule
IHttpHandler
MulticastDelegate
IEqualityComparer
Attribute
System.Web.SessionState
IRequiresSessionState
IHttpHandlerFactory
IHttpAsyncHandler
ExpandableObjectConverter
System.IO
StringWriter
HtmlTextWriter
System.Collections.Generic
List`1
CategoryAttribute
DefaultValueAttribute
DescriptionAttribute
DisplayNameAttribute
WebControl
IPostBackDataHandler
IPostBackEventHandler
IScriptManager
PageStatePersister
System.Collections.ObjectModel
Collection`1
IUpdatePanel
ControlCollection
TValue
IDictionary`2
ICollection`1
KeyValuePair`2
IEnumerable`1
TFirst
TSecond
BuildProvider
IServiceProvider
System.ServiceModel.Description
IWsdlImportExtension
IComparer`1
System.Xml
XmlAttribute
System.Web.Services
System.Web.Services.Description
Operation
OperationFault
MessagePart
System.Xml.Serialization
XmlSerializationWriter
XmlSerializationReader
XmlSerializer
XmlSerializerImplementation
TextWriter
SwitchWriter
.ctor
HttpResponse
_httpResponse
HttpCachePolicyBase
get_Cache
get_ContentType
set_ContentType
Stream
get_Filter
set_Filter
get_Output
Clear
Write
get_Buffer
set_Buffer
get_BufferOutput
set_BufferOutput
get_CacheControl
set_CacheControl
get_Charset
set_Charset
System.Text
Encoding
get_ContentEncoding
set_ContentEncoding
HttpCookieCollection
get_Cookies
get_Expires
set_Expires
DateTime
get_ExpiresAbsolute
set_ExpiresAbsolute
System.Collections.Specialized
NameValueCollection
get_Headers
get_HeaderEncoding
set_HeaderEncoding
get_IsClientConnected
get_IsRequestBeingRedirected
get_RedirectLocation
set_RedirectLocation
get_Status
set_Status
get_StatusCode
set_StatusCode
get_StatusDescription
set_StatusDescription
get_SubStatusCode
set_SubStatusCode
get_SuppressContent
set_SuppressContent
get_TrySkipIisCustomErrors
set_TrySkipIisCustomErrors
AddCacheItemDependency
ArrayList
AddCacheItemDependencies
System.Web.Caching
CacheDependency
AddCacheDependency
AddFileDependency
AddFileDependencies
HttpCookie
AppendCookie
AppendHeader
AppendToLog
ApplyAppPathModifier
BinaryWrite
ClearContent
ClearHeaders
DisableKernelCache
Flush
Redirect
SetCookie
TransmitFile
WriteFile
HttpResponseSubstitutionCallback
WriteSubstitution
Cache
ContentType
Filter
Output
Buffer
BufferOutput
CacheControl
Charset
ContentEncoding
Cookies
Expires
ExpiresAbsolute
Headers
HeaderEncoding
IsClientConnected
IsRequestBeingRedirected
RedirectLocation
Status
StatusCode
StatusDescription
SubStatusCode
SuppressContent
TrySkipIisCustomErrors
Dictionary`2
_profileAllowedGet
_profileAllowedSet
Nullable`1
_profileServiceEnabled
_roleServiceEnabled
_authServiceEnabled
_authRequiresSSL
get_ProfileAllowedGet
get_ProfileAllowedSet
get_AuthenticationServiceEnabled
get_ProfileServiceEnabled
get_RoleServiceEnabled
HttpContext
EnsureAuthenticated
EnsureAuthenticationConfigLoaded
EnsureAuthenticationServiceEnabled
EnsureProfileConfigLoaded
EnsureProfileServiceEnabled
EnsureRoleServiceEnabled
GetCurrentUser
GetProfilePropertiesMetadata
GetUserName
ParseProfilePropertyList
ProfileAllowedGet
ProfileAllowedSet
AuthenticationServiceEnabled
ProfileServiceEnabled
RoleServiceEnabled
ServiceHost
CreateServiceHost
_authenticated
get_Authenticated
set_Authenticated
_authenticationIsComplete
get_AuthenticationIsComplete
set_AuthenticationIsComplete
_userName
get_UserName
_password
get_Password
_customCredential
get_CustomCredential
Authenticated
AuthenticationIsComplete
UserName
Password
CustomCredential
_authenticatingEventHandlerLock
EventHandler`1
_authenticating
add_Authenticating
remove_Authenticating
_creatingCookieEventHandlerLock
_creatingCookie
add_CreatingCookie
remove_CreatingCookie
OnAuthenticating
OnCreatingCookie
ValidateUser
Login
IsLoggedIn
Logout
LoginInternal
MembershipValidate
LogException
Authenticating
CreatingCookie
_isPersistent
get_IsPersistent
_cookieIsSet
set_CookieIsSet
get_CookieIsSet
IsPersistent
CookieIsSet
System.Reflection
ICustomAttributeProvider
GetKnownTypes
_propertyName
get_PropertyName
set_PropertyName
_typeName
get_TypeName
set_TypeName
_allowAnonymousAccess
get_AllowAnonymousAccess
set_AllowAnonymousAccess
_isReadOnly
get_IsReadOnly
set_IsReadOnly
_serializeAs
get_SerializeAs
set_SerializeAs
_defaultValue
get_DefaultValue
set_DefaultValue
PropertyName
TypeName
AllowAnonymousAccess
IsReadOnly
SerializeAs
DefaultValue
_validatingPropertiesEventHandlerLock
_validatingProperties
add_ValidatingProperties
remove_ValidatingProperties
OnValidatingProperties
GetPropertiesForCurrentUser
GetAllPropertiesForCurrentUser
SetPropertiesForCurrentUser
GetPropertiesMetadata
SettingsPropertyValue
ProfileBase
GetPropertyValue
GetProfileForCurrentUser
ValidatingProperties
_selectingProviderEventHandlerLock
_selectingProvider
add_SelectingProvider
remove_SelectingProvider
EnsureProviderEnabled
GetRoleProvider
GetRolesForCurrentUser
IsCurrentUserInRole
OnSelectingProvider
SelectingProvider
_user
get_User
_providerName
get_ProviderName
set_ProviderName
ProviderName
_properties
get_Properties
_failedProperties
get_FailedProperties
Properties
FailedProperties
get_Name
get_IsAuthenticated
get_AuthenticationType
System.Net
CookieContainer
get_AuthenticationCookies
get_Provider
RevalidateUser
Dispose
_Name
_IsAuthenticated
_AuthenticationType
_AuthenticationCookies
System.Security
SecureString
_Password
_Provider
_Disposed
GetSecureStringFromString
GetStringFromSecureString
IsAuthenticated
AuthenticationType
AuthenticationCookies
Provider
get_Identity
_Identity
IsInRole
Identity
get_IsOffline
set_IsOffline
_IsOffline
_IsOfflineFetched
FetchIsOffline
StoreIsOffline
IsOffline
_NumStoredValues
_IsolatedDir
_StoredValueNames
_StoredValues
XmlReader
ReadStringArray
XmlWriter
WriteStringArray
get_LastLoggedInUserName
set_LastLoggedInUserName
get_LastLoggedInDateUtc
set_LastLoggedInDateUtc
get_PasswordHash
set_PasswordHash
get_PasswordSalt
set_PasswordSalt
get_Roles
set_Roles
get_RolesCachedDateUtc
set_RolesCachedDateUtc
get_SettingsNames
set_SettingsNames
get_SettingsStoredAs
set_SettingsStoredAs
get_SettingsValues
set_SettingsValues
get_SettingsNeedReset
set_SettingsNeedReset
get_SettingsCacheIsMoreFresh
set_SettingsCacheIsMoreFresh
get_CookieNames
set_CookieNames
get_CookieValues
set_CookieValues
FileName
UsingIsolatedStorage
LastLoggedInUserName
LastLoggedInDateUtc
PasswordHash
PasswordSalt
Roles
RolesCachedDateUtc
SettingsNames
SettingsStoredAs
SettingsValues
SettingsNeedReset
SettingsCacheIsMoreFresh
CookieNames
CookieValues
value__
_applicationClientData
_userClientData
_curUserName
GetAppClientData
GetUserClientData
GetCookie
StoreCookie
DeleteAllCookies
set_UserName
set_Password
get_RememberMe
set_RememberMe
_UserName
_RememberMe
RememberMe
_GetCredentialsTypeName
_ConnectionString
_ConnectionStringProvider
_ServiceUri
_GetCredentialsType
_SavePasswordHash
_UsingFileSystemStore
_UsingIsolatedStore
_UsingWFCService
ValidateUserByCallingLogin
Initialize
ValidateUserCore
GetServiceUri
get_ServiceUri
set_ServiceUri
UserValidated
add_UserValidated
remove_UserValidated
GetLastUserNameFromOffileStore
StoreLastUserNameInOffileStore
GetCredsFromUI
StoreHashedPasswordInDB
EncodePassword
ValidateByCallingIsLoggedIn
ValidateUserWithOfflineStore
get_EnablePasswordRetrieval
get_EnablePasswordReset
get_RequiresQuestionAndAnswer
get_ApplicationName
set_ApplicationName
get_MaxInvalidPasswordAttempts
get_PasswordAttemptWindow
get_RequiresUniqueEmail
MembershipPasswordFormat
get_PasswordFormat
get_MinRequiredPasswordLength
get_MinRequiredNonAlphanumericCharacters
get_PasswordStrengthRegularExpression
MembershipUser
MembershipCreateStatus
CreateUser
ChangePasswordQuestionAndAnswer
GetPassword
ChangePassword
ResetPassword
UpdateUser
UnlockUser
GetUser
GetUserNameByEmail
DeleteUser
MembershipUserCollection
GetAllUsers
GetNumberOfUsersOnline
FindUsersByName
FindUsersByEmail
ServiceUri
EnablePasswordRetrieval
EnablePasswordReset
RequiresQuestionAndAnswer
ApplicationName
MaxInvalidPasswordAttempts
PasswordAttemptWindow
RequiresUniqueEmail
PasswordFormat
MinRequiredPasswordLength
MinRequiredNonAlphanumericCharacters
PasswordStrengthRegularExpression
_Roles
_CurrentUser
_CacheTimeout
_CacheExpiryDate
_HonorCookieExpiry
IsUserInRole
GetRolesForUser
ResetCache
GetRolesForUserCore
RemoveRolesFromDB
StoreRolesForCurrentUser
GetRolesFromDBForUser
CreateRole
DeleteRole
RoleExists
AddUsersToRoles
RemoveUsersFromRoles
GetUsersInRole
GetAllRoles
FindUsersInRole
_NeedToDoReset
_firstTime
SettingsPropertyValueCollection
_PropertyValues
SettingsPropertyCollection
_Properties
Hashtable
_KnownTypesHashtable
_KnownTypesArray
_lock
ApplicationSettingsBase
_SettingsBaseClass
GetPropertyMetadata
AddToColl
SettingsContext
GetPropertyValues
GetPropertyValuesCore
SetPropertyValues
SetPropertyValuesCore
Reset
Upgrade
SettingsProperty
GetPreviousVersion
SettingsSaved
add_SettingsSaved
remove_SettingsSaved
InitKnownTypes
StoreKnownTypes
GetPropertyValuesFromWeb
GetPropertyValuesFromWebCore
SetPropertyValuesWeb
SetPropertyValuesWebCore
GetPropertyValuesFromSQL
AddProperty
SetPropertyValuesSQL
GetNeedToReset
SetNeedToReset
GetIsCacheMoreFresh
SetIsCacheMoreFresh
GetTagValue
SetTagValue
RegisterForValidateUserEvent
OnUserValidated
SetRemainingValuesToDefault
GetConnectionString
GetCredentials
CreateWebRequestAndGetResponse
HttpWebResponse
GetCookiesFromResponse
GetSerializedParameters
GetResponseString
ConstructCookieContainer
DoAnyCookiesExist
GetCookiesFromIECache
GetCookieFromDB
ChangeCookieAndStoreInDB
InternetSetCookieW
StringBuilder
InternetGetCookieW
ReadOnlyCollection`1
_failedSettingsList
get_FailedSettingsList
FailedSettingsList
_SQL_CE_Tag
_SQL_FILES_Tag
_SQL_CE_CONN_STRING
_Isolated_Storage_Tag
GetDefaultConnectionString
IsSpecialConnectionString
System.Data
System.Data.Common
DbConnection
GetConnection
DbCommand
AddParameter
StoreCookieInDB
_SqlCeConnectionType
_SqlCeParamType
GetSqlCeConnection
CreateDBIfRequired
GetSqlCeType
CreateNewSqlCeConnection
AddSqlCeParameter
GetFullDBFileName
GetPartialDBFileName
_javaScriptSerializer
get_JavaScriptSerializer
GetProfile
SetProfile
_webServiceErrorEventCode
get_WebServiceErrorEventCode
WebServiceErrorEventCode
_page
_fields
_pageableItemContainer
_startRowIndex
_maximumRows
_totalRowCount
_setPageProperties
_initialized
AttributeCollection
_attributes
_creatingPagerFields
_queryStringHandled
_queryStringNavigateUrl
get_Attributes
get_Controls
get_Fields
get_MaximumRows
get_PagedControlID
set_PagedControlID
get_IPage
get_PageSize
set_PageSize
get_QueryStringField
set_QueryStringField
get_QueryStringHandled
set_QueryStringHandled
get_QueryStringValue
get_StartRowIndex
HtmlTextWriterTag
get_TagKey
get_TotalRowCount
AddAttributesToRender
ConnectToEvents
CreatePagerFields
DataBind
FindPageableItemContainer
GetQueryStringNavigateUrl
LoadControlState
get_HasAttributes
LoadViewState
OnBubbleEvent
OnFieldsChanged
OnInit
OnLoad
OnTotalRowCountAvailable
RecreateChildControls
Render
RenderBeginTag
RenderContents
SaveControlState
SaveViewState
SetPageProperties
TrackViewState
System.Web.UI.WebControls.ICompositeControlDesignerAccessor.RecreateChildControls
System.Web.UI.IAttributeAccessor.GetAttribute
GetAttribute
System.Web.UI.IAttributeAccessor.SetAttribute
SetAttribute
Controls
Fields
MaximumRows
PagedControlID
PageSize
QueryStringField
QueryStringHandled
QueryStringValue
StartRowIndex
TagKey
TotalRowCount
HasAttributes
_pagerField
_newMaximumRows
_newStartRowIndex
_item
get_Item
get_NewMaximumRows
set_NewMaximumRows
get_NewStartRowIndex
set_NewStartRowIndex
get_PagerField
NewMaximumRows
NewStartRowIndex
PagerField
StateBag
_stateBag
_trackViewState
_dataPager
EventHandler
FieldChanged
add_FieldChanged
remove_FieldChanged
get_ViewState
get_IsTrackingViewState
get_DataPager
get_Visible
set_Visible
CloneField
CopyProperties
CreateDataPagers
CreateField
HandleEvent
OnFieldChanged
SetDirty
SetDataPager
System.Web.UI.IStateManager.get_IsTrackingViewState
System.Web.UI.IStateManager.LoadViewState
System.Web.UI.IStateManager.TrackViewState
System.Web.UI.IStateManager.SaveViewState
ViewState
IsTrackingViewState
Visible
System.Web.UI.IStateManager.IsTrackingViewState
knownTypes
FieldsChanged
add_FieldsChanged
remove_FieldsChanged
CloneFields
Contains
CopyTo
CreateKnownType
IndexOf
Insert
OnClearComplete
OnInsertComplete
OnRemoveComplete
OnValidate
RemoveAt
Remove
SetDirtyObject
_commandSource
get_CommandSource
CommandSource
_field
_pager
get_Pager
Pager
System.Core
System.Linq
IQueryable`1
Where
IQueryable
Select
OrderBy
GroupBy
Count
ToString
get_Type
funcTypes
System.Linq.Expressions
Parse
LambdaExpression
ParseLambda
ParameterExpression
Expression`1
Func`2
CreateClass
Lambda
GetFuncType
Selector
Ascending
properties
hashCode
GetHashCode
Equals
Instance
.cctor
System.Reflection.Emit
ModuleBuilder
module
classes
classCount
System.Threading
ReaderWriterLock
rwLock
GetDynamicClass
CreateDynamicClass
FieldInfo
TypeBuilder
GenerateProperties
GenerateEquals
GenerateGetHashCode
position
get_Position
Position
predefinedTypes
trueLiteral
falseLiteral
nullLiteral
keywordIt
keywordIif
keywordNew
keywords
symbols
externals
literals
textPos
textLen
token
ProcessParameters
ProcessValues
AddSymbol
ParseOrdering
ParseExpression
ParseLogicalOr
ParseLogicalAnd
ParseComparison
ParseAdditive
ParseMultiplicative
ParseUnary
ParsePrimary
ParsePrimaryStart
ParseStringLiteral
ParseIntegerLiteral
ParseRealLiteral
CreateLiteral
ParseParenExpression
ParseIdentifier
ParseIt
ParseIif
GenerateConditional
ParseNew
ParseLambdaInvocation
ParseTypeAccess
GenerateConversion
ParseMemberAccess
FindGenericType
ParseAggregate
ParseArgumentList
ParseArguments
ParseElementAccess
IsPredefinedType
IsNullableType
GetNonNullableType
GetTypeName
IsNumericType
IsSignedIntegralType
IsUnsignedIntegralType
GetNumericTypeKind
IsEnumType
CheckAndPromoteOperand
CheckAndPromoteOperands
IncompatibleOperandsError
MemberInfo
FindPropertyOrField
MethodBase
FindMethod
FindIndexer
SelfAndBaseTypes
SelfAndBaseClasses
AddInterface
FindBestMethod
IsApplicable
PromoteExpression
ParseNumber
ParseEnum
IsCompatibleWith
IsBetterThan
CompareConversions
GenerateEqual
GenerateNotEqual
GenerateGreaterThan
GenerateGreaterThanEqual
GenerateLessThan
GenerateLessThanEqual
GenerateAdd
GenerateSubtract
GenerateStringConcat
MethodInfo
GetStaticMethod
GenerateStaticMethodCall
SetTextPos
NextChar
NextToken
IsIdentifierStart
IsIdentifierPart
TokenIdentifierIs
GetIdentifier
ValidateDigit
ValidateToken
ParseError
CreateKeywords
Unknown
Identifier
StringLiteral
IntegerLiteral
RealLiteral
Exclamation
Percent
Amphersand
OpenParen
CloseParen
Asterisk
Comma
Minus
Slash
Colon
LessThan
Equal
GreaterThan
Question
OpenBracket
CloseBracket
ExclamationEqual
DoubleAmphersand
LessThanEqual
LessGreater
DoubleEqual
GreaterThanEqual
DoubleBar
Decimal
DateTimeOffset
TimeSpan
Average
ParameterInfo
Parameters
System.Data.Linq
ITable
Attach
GetOriginalEntityState
DataContext
RefreshMode
Refresh
SubmitChanges
FirstItem
LastItem
add_TotalRowCountAvailable
remove_TotalRowCountAvailable
TotalRowCountAvailable
get_AutoGenerateWhereClause
set_AutoGenerateWhereClause
get_ContextType
set_ContextType
get_EnableDelete
set_EnableDelete
get_EnableInsert
set_EnableInsert
get_EnableUpdate
set_EnableUpdate
get_EntitySetName
set_EntitySetName
get_Where
set_Where
ParameterCollection
get_WhereParameters
add_Exception
remove_Exception
AutoGenerateWhereClause
ContextType
EnableDelete
EnableInsert
EnableUpdate
EntitySetName
WhereParameters
DefaultViewName
_view
_viewNames
get_AutoGenerateOrderByClause
set_AutoGenerateOrderByClause
get_AutoPage
set_AutoPage
get_AutoSort
set_AutoSort
get_ContextTypeName
set_ContextTypeName
get_DeleteParameters
get_EnableObjectTracking
set_EnableObjectTracking
get_GroupBy
set_GroupBy
get_GroupByParameters
get_InsertParameters
get_OrderBy
set_OrderBy
get_OrderByParameters
get_OrderGroupsBy
set_OrderGroupsBy
get_OrderGroupsByParameters
get_Select
set_Select
get_SelectParameters
get_StoreOriginalValuesInViewState
set_StoreOriginalValuesInViewState
get_TableName
set_TableName
get_UpdateParameters
get_View
set_View
add_ContextCreated
remove_ContextCreated
add_ContextCreating
remove_ContextCreating
add_ContextDisposing
remove_ContextDisposing
add_Deleted
remove_Deleted
add_Deleting
remove_Deleting
add_Inserted
remove_Inserted
add_Inserting
remove_Inserting
add_Selected
remove_Selected
add_Selecting
remove_Selecting
add_Updated
remove_Updated
add_Updating
remove_Updating
CreateView
IDictionary
Delete
GetView
GetViewNames
LoadCompleteEventHandler
OnUnload
Update
System.Web.DynamicData.IDynamicDataSource.get_ContextType
System.Web.DynamicData.IDynamicDataSource.set_ContextType
System.Web.DynamicData.IDynamicDataSource.get_EntitySetName
System.Web.DynamicData.IDynamicDataSource.set_EntitySetName
System.Web.DynamicData.IDynamicDataSource.add_Exception
System.Web.DynamicData.IDynamicDataSource.remove_Exception
AutoGenerateOrderByClause
AutoPage
AutoSort
ContextTypeName
DeleteParameters
EnableObjectTracking
GroupByParameters
InsertParameters
OrderByParameters
OrderGroupsBy
OrderGroupsByParameters
SelectParameters
StoreOriginalValuesInViewState
TableName
UpdateParameters
ContextCreated
ContextCreating
ContextDisposing
Deleted
Deleting
Inserted
Inserting
Selected
Selecting
Updated
Updating
System.Web.DynamicData.IDynamicDataSource.ContextType
System.Web.DynamicData.IDynamicDataSource.EntitySetName
System.Web.DynamicData.IDynamicDataSource.Exception
_context
_isNewContext
_table
get_Context
set_Context
get_IsNewContext
set_IsNewContext
get_Table
set_Table
Context
IsNewContext
Table
_objectInstance
DataSourceOperation
_operation
get_ObjectInstance
set_ObjectInstance
get_Operation
ObjectInstance
_exception
_exceptionHandled
_originalObject
get_Exception
get_ExceptionHandled
set_ExceptionHandled
get_OriginalObject
ExceptionHandled
OriginalObject
_newDataObject
_originalDataObject
get_NewDataObject
set_NewDataObject
get_OriginalDataObject
set_OriginalDataObject
NewDataObject
OriginalDataObject
EnumerableContentEquals
FindGenericEnumerableType
_newObject
get_NewObject
NewObject
DataSourceSelectArguments
_arguments
_groupByParameters
IOrderedDictionary
_orderByParameters
_orderGroupsByParameters
_result
_selectParameters
_whereParameters
get_Arguments
get_Result
set_Result
Arguments
Result
get_InnerExceptions
InnerExceptions
_innerExceptions
SerializationInfo
StreamingContext
GetObjectData
_identifierPattern
System.Text.RegularExpressions
Regex
_identifierRegex
_autoGenerateOrderByRegex
EventContextCreated
EventContextCreating
EventContextDisposing
EventDeleted
EventDeleting
EventException
EventInserted
EventInserting
EventSelected
EventSelecting
EventUpdated
EventUpdating
_owner
_tracking
_autoGenerateOrderByClause
_autoGenerateWhereClause
_autoPage
_autoSort
_contextTypeName
_contextType
_selectContexts
_deleteParameters
_dynamicQueryable
_enableDelete
_enableInsert
_enableObjectTracking
_enableUpdate
_groupBy
_insertParameters
_linqToSql
_orderBy
_orderGroupsBy
_originalValues
_reuseSelectContext
_selectNew
_selectNewParameters
_storeOriginalValuesInViewState
_tableName
_updateParameters
_where
get_CanDelete
get_CanInsert
get_CanPage
get_CanRetrieveTotalRowCount
get_CanSort
get_CanUpdate
get_SelectNew
set_SelectNew
get_SelectNewParameters
AsQueryable
BuildDataObject
BuildDeleteDataObject
BuildInsertDataObject
BuildObjectValue
BuildUpdateDataObjects
ConvertType
CreateContext
CreateContextAndTable
CreateContextAndTableForEdit
CreateContextAndTableForSelect
CreateObjectInstance
DeleteDataObject
EscapeParameterKeys
ExecuteDelete
ExecuteInsert
ExecuteSelect
ExecuteSelectAutoSortAndPage
ExecuteSelectExpressions
ExecuteSelectQuery
ExecuteUpdate
GenerateOrderByClause
GenerateWhereClauseAndEscapeParameterKeys
GetDataObjectType
GetOrderedParameterValues
GetOriginalValues
GetParameterValues
GetTableMemberInfo
System.Data.Linq.Mapping
MetaDataMember
GetTableMetaDataMembers
InsertDataObject
MemberIsStatic
MergeDictionaries
OnContextCreated
OnContextCreating
OnContextDisposing
OnDeleted
OnDeleting
OnException
OnInserted
OnInserting
OnSelected
OnSelecting
OnUpdated
OnUpdating
OriginalValueMatches
ReleaseContext
ReleaseSelectContexts
ResetDataObject
SaveParametersViewState
SelectParametersChangedEventHandler
SetDataObjectProperties
IList
StoreOriginalValues
ToList
TrackParametersViewState
UpdateDataObject
ValidateContextType
ValidateDeleteSupported
ValidateEditSupported
ValidateInsertSupported
ValidateOrderByParameter
ValidateParameterName
ValidateTableType
ValidateUpdateSupported
CanDelete
CanInsert
CanPage
CanRetrieveTotalRowCount
CanSort
CanUpdate
SelectNew
SelectNewParameters
<Where>k__BackingField
ItemCountViewStateKey
_automaticIDPrefix
ITemplate
_itemTemplate
_editItemTemplate
_insertItemTemplate
_layoutTemplate
_selectedItemTemplate
_groupTemplate
_itemSeparatorTemplate
_groupSeparatorTemplate
_emptyItemTemplate
_emptyDataTemplate
_alternatingItemTemplate
EventTotalRowCountAvailable
EventPagePropertiesChanged
EventPagePropertiesChanging
EventItemCanceling
EventItemCommand
EventItemCreated
EventItemDataBound
EventItemDeleted
EventItemDeleting
EventItemEditing
EventItemInserted
EventItemInserting
EventItemUpdated
EventItemUpdating
EventLayoutCreated
EventSelectedIndexChanging
EventSelectedIndexChanged
EventSorted
EventSorting
_editIndex
_selectedIndex
_groupItemCount
_modelValidationGroup
_sortExpression
SortDirection
_sortDirection
IList`1
_itemList
_insertItem
_dataKeyNames
DataKeyArray
_dataKeyArray
_dataKeysArrayList
OrderedDictionary
_boundFieldValues
DataKey
_persistedDataKey
_deletedItemIndex
_deleteKeys
_deleteValues
_insertValues
_updateKeys
_updateOldValues
_updateNewValues
_autoIDIndex
_instantiatedEmptyDataTemplate
_noGroupsOriginalIndexOfItemPlaceholderInContainer
_noGroupsItemCreatedCount
_noGroupsItemPlaceholderContainer
_groupsOriginalIndexOfGroupPlaceholderInContainer
_groupsItemCreatedCount
_groupsGroupPlaceholderContainer
get_AccessKey
set_AccessKey
get_AlternatingItemTemplate
set_AlternatingItemTemplate
System.Drawing
Color
get_BackColor
set_BackColor
get_BorderColor
set_BorderColor
get_BorderWidth
set_BorderWidth
BorderStyle
get_BorderStyle
set_BorderStyle
get_BoundFieldValues
get_ConvertEmptyStringToNull
set_ConvertEmptyStringToNull
get_CssClass
set_CssClass
get_DataKeysArrayList
get_DataKeys
get_DataKeyNames
set_DataKeyNames
get_DataKeyNamesInternal
get_EditIndex
set_EditIndex
get_EditItem
get_EditItemTemplate
set_EditItemTemplate
get_EmptyDataTemplate
set_EmptyDataTemplate
get_EmptyItemTemplate
set_EmptyItemTemplate
get_EnableModelValidation
set_EnableModelValidation
FontInfo
get_Font
get_ForeColor
set_ForeColor
get_GroupPlaceholderID
set_GroupPlaceholderID
get_GroupItemCount
set_GroupItemCount
get_GroupSeparatorTemplate
set_GroupSeparatorTemplate
get_GroupTemplate
set_GroupTemplate
get_Height
set_Height
get_InsertItem
get_InsertItemPosition
set_InsertItemPosition
get_InsertItemTemplate
set_InsertItemTemplate
get_ItemPlaceholderID
set_ItemPlaceholderID
get_Items
get_ItemSeparatorTemplate
set_ItemSeparatorTemplate
get_ItemTemplate
set_ItemTemplate
get_LayoutTemplate
set_LayoutTemplate
get_SelectedDataKey
get_SelectedIndex
set_SelectedIndex
get_SelectedItemTemplate
set_SelectedItemTemplate
get_SelectedValue
get_SortDirection
get_SortDirectionInternal
set_SortDirectionInternal
get_SortExpression
get_SortExpressionInternal
set_SortExpressionInternal
get_TabIndex
set_TabIndex
get_ToolTip
set_ToolTip
get_SelectedPersistedDataKey
set_SelectedPersistedDataKey
get_Width
set_Width
add_ItemDeleted
remove_ItemDeleted
add_ItemInserted
remove_ItemInserted
add_ItemUpdated
remove_ItemUpdated
add_ItemCanceling
remove_ItemCanceling
add_ItemCommand
remove_ItemCommand
add_ItemCreated
remove_ItemCreated
add_ItemDataBound
remove_ItemDataBound
add_ItemDeleting
remove_ItemDeleting
add_ItemEditing
remove_ItemEditing
add_ItemInserting
remove_ItemInserting
add_ItemUpdating
remove_ItemUpdating
add_LayoutCreated
remove_LayoutCreated
add_PagePropertiesChanged
remove_PagePropertiesChanged
add_PagePropertiesChanging
remove_PagePropertiesChanging
add_SelectedIndexChanged
remove_SelectedIndexChanged
add_SelectedIndexChanging
remove_SelectedIndexChanging
add_Sorted
remove_Sorted
add_Sorting
remove_Sorting
AddControlToContainer
AutoIDControl
ClearDataKeys
CreateChildControls
Style
CreateControlStyle
CreateDataSourceSelectArguments
CreateEmptyDataItem
CreateEmptyItem
CreateInsertItem
CreateItem
CreateDataItem
CreateItemsWithoutGroups
CreateItemsInGroups
CreateLayoutTemplate
CreatePagedDataSource
CreateServerPagedDataSource
DeleteItem
EnsureLayoutTemplate
ExtractItemValues
FindPlaceholder
FindDataPager
GetItemIndex
GetPreparedContainerInfo
HandleCancel
HandleDelete
HandleDeleteCallback
HandleEdit
HandleInsert
HandleInsertCallback
HandleSelect
HandleSort
HandleUpdate
HandleUpdateCallback
InsertNewItem
InstantiateEmptyDataTemplate
InstantiateEmptyItemTemplate
InstantiateGroupTemplate
InstantiateGroupSeparatorTemplate
InstantiateInsertItemTemplate
InstantiateItemSeparatorTemplate
InstantiateItemTemplate
LoadDataKeysState
OnItemCanceling
OnItemCommand
OnItemCreated
OnItemDataBound
OnItemDeleted
OnItemDeleting
OnItemEditing
OnItemInserted
OnItemInserting
OnItemUpdated
OnItemUpdating
OnLayoutCreated
OnPagePropertiesChanged
OnPagePropertiesChanging
OnSelectedIndexChanged
OnSelectedIndexChanging
OnSorted
OnSorting
PageIsValidAfterModelException
PerformDataBinding
PerformSelect
RemoveItems
SaveDataKeysState
SelectCallback
SetRequiresDataBindingIfInitialized
UpdateItem
System.Web.UI.WebControls.IPageableItemContainer.get_StartRowIndex
System.Web.UI.WebControls.IPageableItemContainer.get_MaximumRows
System.Web.UI.WebControls.IPageableItemContainer.SetPageProperties
System.Web.UI.WebControls.IPageableItemContainer.add_TotalRowCountAvailable
System.Web.UI.WebControls.IPageableItemContainer.remove_TotalRowCountAvailable
System.Web.UI.WebControls.IPersistedSelector.get_DataKey
get_DataKey
System.Web.UI.WebControls.IPersistedSelector.set_DataKey
set_DataKey
AccessKey
AlternatingItemTemplate
BackColor
BorderColor
BorderWidth
BoundFieldValues
ConvertEmptyStringToNull
CssClass
DataKeysArrayList
DataKeys
DataKeyNames
DataKeyNamesInternal
EditIndex
EditItem
EditItemTemplate
EmptyDataTemplate
EmptyItemTemplate
EnableModelValidation
ForeColor
GroupPlaceholderID
GroupItemCount
GroupSeparatorTemplate
GroupTemplate
Height
InsertItem
InsertItemTemplate
ItemPlaceholderID
Items
ItemSeparatorTemplate
ItemTemplate
LayoutTemplate
SelectedDataKey
SelectedIndex
SelectedItemTemplate
SelectedValue
SortDirectionInternal
SortExpression
SortExpressionInternal
TabIndex
ToolTip
SelectedPersistedDataKey
Width
ItemDeleted
ItemInserted
ItemUpdated
ItemCanceling
ItemCommand
ItemCreated
ItemDataBound
ItemDeleting
ItemEditing
ItemInserting
ItemUpdating
LayoutCreated
PagePropertiesChanged
PagePropertiesChanging
SelectedIndexChanged
SelectedIndexChanging
Sorted
Sorting
System.Web.UI.WebControls.IPageableItemContainer.StartRowIndex
System.Web.UI.WebControls.IPageableItemContainer.MaximumRows
System.Web.UI.WebControls.IPageableItemContainer.TotalRowCountAvailable
System.Web.UI.WebControls.IPersistedSelector.DataKey
_itemIndex
_cancelMode
get_ItemIndex
get_CancelMode
ItemIndex
CancelMode
CancelingEdit
CancelingInsert
_itemType
get_ItemType
ItemType
_dataItemIndex
_displayIndex
_dataItem
get_DataItem
set_DataItem
get_DataItemIndex
get_DisplayIndex
DataItem
DataItemIndex
DisplayIndex
_affectedRows
_keys
_values
get_AffectedRows
get_Keys
get_Values
SetKeys
SetValues
AffectedRows
Values
_newEditIndex
get_NewEditIndex
NewEditIndex
_keepInInsertMode
get_KeepInInsertMode
set_KeepInInsertMode
KeepInInsertMode
EmptyItem
_dataSource
_allowServerPaging
get_AllowServerPaging
set_AllowServerPaging
get_Count
get_DataSource
set_DataSource
get_DataSourceCount
get_IsLastPage
get_IsServerPagingEnabled
get_IsSynchronized
set_MaximumRows
set_StartRowIndex
get_SyncRoot
set_TotalRowCount
Array
GetEnumerator
PropertyDescriptorCollection
PropertyDescriptor
GetItemProperties
GetListName
AllowServerPaging
DataSource
DataSourceCount
IsLastPage
IsServerPagingEnabled
IsSynchronized
SyncRoot
realEnum
index
indexBounds
get_Current
MoveNext
Current
collection
collectionEnum
startRowIndex
array
_newSelectedIndex
get_NewSelectedIndex
set_NewSelectedIndex
NewSelectedIndex
set_SortDirection
set_SortExpression
CreateControlCollection
_oldValues
_keepInEditMode
get_KeepInEditMode
set_KeepInEditMode
get_NewValues
get_OldValues
SetNewValues
SetOldValues
KeepInEditMode
NewValues
OldValues
get_ButtonCssClass
set_ButtonCssClass
ButtonType
get_ButtonType
set_ButtonType
get_EnableNextPage
get_EnablePreviousPage
get_FirstPageImageUrl
set_FirstPageImageUrl
get_FirstPageText
set_FirstPageText
get_LastPageImageUrl
set_LastPageImageUrl
get_LastPageText
set_LastPageText
get_NextPageImageUrl
set_NextPageImageUrl
get_NextPageText
set_NextPageText
get_PreviousPageImageUrl
set_PreviousPageImageUrl
get_PreviousPageText
set_PreviousPageText
get_RenderNonBreakingSpacesBetweenControls
set_RenderNonBreakingSpacesBetweenControls
get_RenderDisabledButtonsAsLabels
set_RenderDisabledButtonsAsLabels
get_ShowFirstPageButton
set_ShowFirstPageButton
get_ShowLastPageButton
set_ShowLastPageButton
get_ShowNextPageButton
set_ShowNextPageButton
get_ShowPreviousPageButton
set_ShowPreviousPageButton
AddNonBreakingSpace
CreateControl
HyperLink
CreateLink
CreateDataPagersForCommand
CreateDataPagersForQueryString
ButtonCssClass
EnableNextPage
EnablePreviousPage
FirstPageImageUrl
FirstPageText
LastPageImageUrl
LastPageText
NextPageImageUrl
NextPageText
PreviousPageImageUrl
PreviousPageText
RenderNonBreakingSpacesBetweenControls
RenderDisabledButtonsAsLabels
ShowFirstPageButton
ShowLastPageButton
ShowNextPageButton
ShowPreviousPageButton
get_ButtonCount
set_ButtonCount
get_CurrentPageLabelCssClass
set_CurrentPageLabelCssClass
get_NextPreviousButtonCssClass
set_NextPreviousButtonCssClass
get_NumericButtonCssClass
set_NumericButtonCssClass
CreateNumericButton
CreateNumericLink
CreateNextPrevButton
CreateNextPrevLink
ButtonCount
CurrentPageLabelCssClass
NextPreviousButtonCssClass
NumericButtonCssClass
_pagerTemplate
EventPagerCommand
EventHandlerList
_events
get_Events
get_PagerTemplate
set_PagerTemplate
add_PagerCommand
remove_PagerCommand
OnPagerCommand
Events
PagerTemplate
PagerCommand
ContextCreate
TypeConverter
_whiteSpaceTrimStringConverter
ConfigurationValidatorBase
_nonEmptyStringValidator
ConfigurationProperty
_propType
_propName
ConfigurationPropertyCollection
BuildProperties
set_Type
set_Name
set_Item
CreateNewElement
GetElementKey
CreateConverters
_propEnabled
_propRequireSSL
GetConfigurationSection
get_Enabled
set_Enabled
get_RequireSSL
set_RequireSSL
Enabled
RequireSSL
_propConverters
_propRecursionLimitLimit
_propMaxJsonLength
get_Converters
get_RecursionLimit
set_RecursionLimit
get_MaxJsonLength
set_MaxJsonLength
Converters
RecursionLimit
MaxJsonLength
_recusionLimit
_maxJsonLimit
_converters
get_MaxJsonLimit
MaxJsonLimit
_propEnableForReading
_propEnableForWriting
get_ReadAccessProperties
set_ReadAccessProperties
get_WriteAccessProperties
set_WriteAccessProperties
ReadAccessProperties
WriteAccessProperties
_propEnableCaching
_propEnableCompression
get_EnableCaching
set_EnableCaching
get_EnableCompression
set_EnableCompression
EnableCaching
EnableCompression
System.Runtime.CompilerServices
IsVolatile
s_sectionLoaded
s_enableCaching
s_enableCompression
EnsureSectionLoaded
get_WebServices
get_ScriptResourceHandler
WebServices
get_JsonSerialization
get_ProfileService
get_AuthenticationService
get_RoleService
JsonSerialization
get_Scripting
Scripting
cultureScriptBlockCache
System.Globalization
CultureInfo
NumberFormatInfo
numberFormat
DateTimeFormatInfo
dateTimeFormat
GetClientCultureScriptBlock
Assembly
GetScriptResourceUrl
GetEmptyPageUrl
_authenticationServiceType
ShouldSkipAuthorization
AuthenticateRequestHandler
EndRequestHandler
HttpApplication
OnPostAcquireRequestState
PreSendRequestHeadersHandler
System.Web.IHttpModule.Dispose
System.Web.IHttpModule.Init
_scriptResourceUrl
_assemblyInfoCache
_cultureCache
_getMethodLock
_scriptResourceHandler
_scriptResourceAbsolutePath
_bypassVirtualPathResolution
_maximumResourceUrlLength
get_ScriptResourceAbsolutePath
Create404
DecryptParameter
DetermineNearestAvailableCulture
EnsureScriptResourceRequest
GetAssembly
AssemblyName
GetAssemblyInfo
GetAssemblyInfoInternal
GetAssemblyNeutralCulture
GetScriptResourceHandler
GetWebResourceUrl
get_IsReusable
IsCompressionEnabled
IsScriptResourceRequest
OutputEmptyPage
PrepareResponseCache
PrepareResponseNoCache
ProcessRequest
ProcessRequestInternal
SetScriptResourceHandler
Throw404
System.Web.IHttpHandler.ProcessRequest
System.Web.IHttpHandler.get_IsReusable
ScriptResourceAbsolutePath
IsReusable
System.Web.IHttpHandler.IsReusable
Invoke
IAsyncResult
AsyncCallback
BeginInvoke
EndInvoke
_urlCache
_absoluteScriptResourceUrl
System.Web.Handlers.IScriptResourceHandler.GetScriptResourceUrl
GetScriptResourceUrlImpl
EnsureAbsoluteScriptResourceUrl
System.Web.Handlers.IScriptResourceHandler.GetEmptyPageUrl
ThrowUnknownResource
ResolveType
ResolveTypeId
get_SupportedTypes
Deserialize
Serialize
SupportedTypes
DateTimePrefix
DateTimePrefixLength
_serializer
_depthLimit
BasicDeserialize
DeserializeInternal
DeserializeList
DeserializeDictionary
ThrowIfMaxJsonDeserializerMembersExceeded
DeserializeMemberName
DeserializePrimitiveObject
DeserializePrimitiveToken
DeserializeString
AppendCharToBuilder
CheckQuoteChar
DeserializeStringIntoDateTime
IsNextElementArray
IsNextElementDateTime
IsNextElementObject
IsNextElementString
ServerTypeFieldName
DefaultRecursionLimit
DefaultMaxJsonLength
SerializeInternal
_typeResolver
_recursionLimit
_maxJsonLength
get_TypeResolver
RegisterConverters
GetConverter
ConverterExistsForType
DeserializeObject
ConvertToType
SerializeBoolean
SerializeUri
SerializeGuid
DatetimeMinTimeTicks
SerializeDateTime
SerializeCustomObject
SerializeDictionary
SerializeDictionaryKeyValue
SerializeEnumerable
SerializeString
SerializeValue
SerializeValueInternal
System.Collections.IEqualityComparer.Equals
System.Collections.IEqualityComparer.GetHashCode
JavaScript
_index
GetNextNonEmptyChar
MovePrev
AppendCharAsUnicode
QuoteString
GetDebugString
CharRequiresJavaScriptEncoding
s_emptyTypeArray
_listGenericType
_enumerableGenericType
_dictionaryGenericType
_idictionaryGenericType
AddItemToList
AssignToPropertyOrField
ConvertDictionaryToObject
ConvertObjectToType
ConvertObjectToTypeMain
ConvertObjectToTypeInternal
ConvertListToObject
IsArrayListCompatible
IsClientInstantiatableType
IsGenericDictionary
IsNonNullableValueType
TryConvertObjectToType
DebugXmlComments
_registeredNamespaces
_builder
_debugMode
_docCommentCache
GetClientProxyScript
GenerateRegisterClass
GenerateConstructor
GeneratePrototype
GenerateTypeDeclaration
GenerateFields
GenerateMethods
GenerateStaticMethods
GetProxyPath
GenerateStaticInstance
BuildArgsDictionary
GenerateWebMethodProxy
GenerateClientTypeProxies
GenerateEnumTypeProxies
GetClientTypeNamespace
AppendClientTypeDeclaration
GetProxyTypeName
EnsureNamespace
_type
_typeId
get_ScriptTypeId
set_ScriptTypeId
ScriptTypeId
_path
IsPageType
IsWCFServiceType
IsWebServiceType
_webServiceMethodData
CreateHandler
InitializeCachePolicy
GetRawParamsFromGetRequest
GetRawParamsFromPostRequest
GetRawParams
InvokeMethod
ExecuteWebServiceCall
WriteExceptionJsonString
Message
StackTrace
ExceptionType
ClientProxyRequestPathInfo
ClientDebugProxyRequestPathInfo
GetHandler
ReleaseHandler
IsRestRequest
HttpRequest
IsRestMethodCall
IsClientProxyDebugRequest
IsClientProxyRequest
_restHandlerFactory
_webServiceHandlerFactory
_originalHandler
_originalFactory
BeginProcessRequest
EndProcessRequest
_responseFormat
_useHttpGet
_xmlSerializeString
get_ResponseFormat
set_ResponseFormat
get_UseHttpGet
set_UseHttpGet
get_XmlSerializeString
set_XmlSerializeString
UseHttpGet
XmlSerializeString
GetClientTypeName
GetClientTypeFromServerType
UnwrapNullableType
XmlSerializeObjectToString
MaxIdentifierLength
DataContractXsdBaseNamespace
AddToNamespace
IsValid
IsValidStart
GetInlineClientProxyScript
GetAssemblyModifiedTime
_profileServiceFileName
_authenticationServiceFileName
_roleServiceFileName
_typeData
_pageMethods
_methods
_typeResolverSpecials
_clientTypesDictionary
_clientTypeNameDictionary
_enumTypesDictionary
_processedTypes
_clientTypesProcessed
get_Serializer
GetApplicationService
GetWebServiceData
GetCacheKey
ContractDescription
ReplaceMessageWithObject
AddMethod
EnsureMethods
get_TypeData
get_MethodDatas
GetMethodData
EnsureClientTypesProcessed
ProcessClientTypes
ProcessIncludeAttributes
ProcessClientType
ProcessKnownTypes
ProcessTypeData
get_ClientTypes
get_ClientTypeDictionary
set_ClientTypeDictionary
get_ClientTypeNameDictionary
get_EnumTypes
get_EnumTypeDictionary
set_EnumTypeDictionary
GetTypeStringRepresentation
Serializer
TypeData
MethodDatas
ClientTypes
ClientTypeDictionary
ClientTypeNameDictionary
EnumTypes
EnumTypeDictionary
SerializationNamespace
StringLocalName
SchemaNamespace
ActualTypeLocalName
ActualTypeNameAttribute
ActualTypeNamespaceAttribute
EnumerationValueLocalName
OccursUnbounded
_actualType
_stringRepresentation
_typeNamespace
XmlQualifiedName
_nameToType
actualTypeAnnotationName
get_ActualTypeAnnotationName
enumerationValueAnnotationName
get_EnumerationValueAnnotationName
get_StringRepresentation
get_TypeNamespace
System.Xml.Schema
XmlSchemaComplexType
CheckIfCollection
XmlSchemaSequence
CheckIfCollectionSequence
XmlSchemaSimpleType
XmlSchemaSimpleTypeRestriction
CheckIfEnum
CheckIfEnumRestriction
XmlElement
GetInnerText
GetWebServiceTypeData
XmlSchemaAnnotation
ImportActualType
ImportAnnotation
ImportEnum
ActualTypeAnnotationName
EnumerationValueAnnotationName
StringRepresentation
TypeNamespace
isULong
names
values
get_IsULong
get_Names
InitWebServiceEnumData
IsULong
Names
_methodInfo
WebMethodAttribute
_webMethodAttribute
_scriptMethodAttribute
_methodName
_parameterData
get_Owner
EnsureParameters
get_MethodName
get_MethodInfo
get_ParameterDataDictionary
get_ParameterDatas
get_CacheDuration
get_RequiresSession
get_IsStatic
get_ReturnType
get_UseXmlResponse
get_UseGet
CallMethodFromRawParams
CallMethod
StrongTypeParameters
Owner
MethodName
ParameterDataDictionary
ParameterDatas
CacheDuration
RequiresSession
IsStatic
ReturnType
UseXmlResponse
UseGet
_param
_paramName
_paramType
get_Index
get_ParameterInfo
get_ParameterName
get_ParameterType
Index
ParameterName
ParameterType
get_Debug
Debug
_instance
_debug
get_Instance
GetDebugFromConfig
StringBuilderCapacity
MergeServiceUrls
SystemWebExtensions
_assemblyCache
HasTriggered
SetOwner
_controlID
get_ControlID
set_ControlID
FindTargetControl
ControlID
_scriptManager
_associatedControl
_eventHandler
_eventHandled
_eventName
get_EventHandler
get_EventName
set_EventName
get_ScriptManager
OnEvent
EventName
ConfigureAuthenticationService
GenerateInitializationScript
get_Path
set_Path
PostBackOptions
GetPostBackEventReference
RegisterClientScriptBlock
RegisterClientScriptInclude
RegisterStartupScript
ClientScriptManager
_clientScriptManager
System.Web.UI.IClientScriptManager.GetPostBackEventReference
System.Web.UI.IClientScriptManager.GetWebResourceUrl
System.Web.UI.IClientScriptManager.RegisterClientScriptBlock
System.Web.UI.IClientScriptManager.RegisterClientScriptInclude
System.Web.UI.IClientScriptManager.RegisterStartupScript
get_AppRelativeTemplateSourceDirectory
ResolveClientUrl
AppRelativeTemplateSourceDirectory
_control
System.Web.UI.IClientUrlResolver.get_AppRelativeTemplateSourceDirectory
System.Web.UI.IClientUrlResolver.ResolveClientUrl
System.Web.UI.IClientUrlResolver.AppRelativeTemplateSourceDirectory
_alwaysLoadBeforeUI
_clientUrlResolver
_containingControl
_isStaticReference
_notifyScriptLoaded
_resourceUICultures
_scriptMode
get_AlwaysLoadBeforeUI
set_AlwaysLoadBeforeUI
get_ClientUrlResolver
set_ClientUrlResolver
get_ContainingControl
set_ContainingControl
get_IsStaticReference
set_IsStaticReference
get_NotifyScriptLoaded
set_NotifyScriptLoaded
get_ResourceUICultures
set_ResourceUICultures
get_ScriptMode
set_ScriptMode
IsFromSystemWebExtensions
GetDebugPath
GetUrl
ReplaceExtension
AlwaysLoadBeforeUI
ClientUrlResolver
ContainingControl
IsStaticReference
NotifyScriptLoaded
ResourceUICultures
_scripts
get_Scripts
Scripts
_compositeScript
get_CompositeScript
CompositeScript
IsBuiltInHiddenField
get_DefaultRedirect
CustomErrorCollection
get_Errors
DefaultRedirect
Errors
CustomErrorsSection
_customErrorsSection
System.Web.UI.ICustomErrorsSection.get_DefaultRedirect
System.Web.UI.ICustomErrorsSection.get_Errors
System.Web.UI.ICustomErrorsSection.DefaultRedirect
System.Web.UI.ICustomErrorsSection.Errors
get_Retail
Retail
_retail
GetRetailFromConfig
ITypeDescriptorContext
ConvertTo
GetScriptDescriptors
GetScriptReferences
_targetControlID
get_TargetControlID
set_TargetControlID
FindUpdatePanel
OnPreRender
RegisterWithScriptManager
System.Web.UI.IExtenderControl.GetScriptDescriptors
System.Web.UI.IExtenderControl.GetScriptReferences
TargetControlID
_state
get_State
State
get_ClientID
get_Method
RenderControl
RenderMethod
SetRenderMethodDelegate
ClientID
Method
HtmlForm
_form
System.Web.UI.IHtmlForm.get_ClientID
System.Web.UI.IHtmlForm.get_Method
System.Web.UI.IHtmlForm.RenderControl
System.Web.UI.IHtmlForm.SetRenderMethodDelegate
System.Web.UI.IHtmlForm.ClientID
System.Web.UI.IHtmlForm.Method
HttpContextBase
get_DesignMode
DesignMode
get_AppRelativeVirtualPath
get_ClientScript
get_EnableEventValidation
get_Form
HtmlHead
get_Header
get_IsPostBack
get_IsValid
HttpRequestBase
get_Request
get_Response
HttpServerUtilityBase
get_Server
get_Title
add_Error
remove_Error
add_InitComplete
remove_InitComplete
add_LoadComplete
remove_LoadComplete
add_PreRender
remove_PreRender
add_PreRenderComplete
remove_PreRenderComplete
RegisterRequiresViewStateEncryption
SetFocus
Validate
VerifyRenderingInServerForm
AppRelativeVirtualPath
ClientScript
EnableEventValidation
Header
IsPostBack
Request
Response
Server
Title
Error
InitComplete
LoadComplete
PreRender
PreRenderComplete
get_AsyncPostBackSourceElementID
get_SupportsPartialRendering
get_IsInAsyncPostBack
RegisterAsyncPostBackControl
RegisterExtenderControl
TExtenderControl
RegisterPostBackControl
RegisterProxy
RegisterScriptControl
TScriptControl
RegisterScriptDescriptors
RegisterUpdatePanel
UnregisterUpdatePanel
AsyncPostBackSourceElementID
SupportsPartialRendering
IsInAsyncPostBack
PageRedirectToken
HiddenFieldToken
AsyncPostBackControlIDsToken
PostBackControlIDsToken
UpdatePanelIDsToken
AsyncPostBackTimeoutToken
ChildUpdatePanelIDsToken
UpdatePanelsToRefreshToken
FormActionToken
DataItemToken
DataItemJsonToken
ArrayDeclarationToken
ExpandoToken
OnSubmitToken
ScriptBlockToken
ScriptStartupBlockToken
ScriptDisposeToken
ErrorToken
AsyncPostBackErrorKey
AsyncPostBackErrorMessageKey
AsyncPostBackErrorHttpCodeKey
PageTitleToken
FocusToken
AsyncPostFormField
LengthEncodeDelimiter
Version
MinimumW3CDomVersion
MinimumEcmaScriptVersion
_allUpdatePanels
_updatePanelsToRefresh
_childUpdatePanelsToRefresh
_asyncPostBackControls
_postBackControls
_scriptDataItems
_updatePanelRequiresUpdate
_updatePanelWriter
_panelsInitialized
_asyncPostBackSourceElementID
FocusMinimumEcmaVersion
FocusMinimumJScriptVersion
_focusedControlID
_focusedControl
_requireFocusScript
get_ClientSupportsFocus
get_EnableLegacyRendering
CustomErrorsSectionHasRedirect
EncodeString
GetAllUpdatePanelIDs
GetAsyncPostBackControlIDs
GetChildUpdatePanelIDs
GetControlIDsFromList
GetControlRegistrationException
GetHttpCodeForException
GetPostBackControlIDs
GetRefreshingUpdatePanelIDs
GetUpdatePanelIDsFromList
IsAsyncPostBackRequest
LoadPostData
OnPageError
ProcessFocus
ProcessScriptRegistration
ProcessUpdatePanels
RegisterDataItem
RegisterFocusScript
RenderFormCallback
RenderPageCallback
RenderDataItems
RenderPageRequestManagerScript
RenderUpdatePanelIDsFromList
SetFocusInternal
ClientSupportsFocus
EnableLegacyRendering
_parseWrites
_pendingWrites
_parserState
_secondTry
_proposedHiddenFieldName
_matchingHiddenFieldName
_proposedHiddenFieldValue
_hiddenFields
get_HiddenFields
get_ParseWrites
set_ParseWrites
FlushPendingWrites
ParseString
WriteLine
HiddenFields
ParseWrites
Ready
ReadHiddenFieldNameValue
ReadHiddenFieldIdAttribute
ReadHiddenFieldIdValue
ReadHiddenFieldValueAttribute
ReadHiddenFieldValueValue
_writingForm
_formAction
get_FormAction
WriteBeginTag
WriteAttribute
FormAction
_isJsonSerialized
get_Control
get_IsJsonSerialized
IsJsonSerialized
ContainsControl
System.Web.UI.IPage.get_AppRelativeVirtualPath
System.Web.UI.IPage.get_ClientScript
System.Web.UI.IPage.get_EnableEventValidation
System.Web.UI.IPage.get_Form
System.Web.UI.IPage.get_Header
System.Web.UI.IPage.get_IsPostBack
System.Web.UI.IPage.get_IsValid
System.Web.UI.IPage.get_Items
System.Web.UI.IPage.get_Request
System.Web.UI.IPage.get_Response
System.Web.UI.IPage.get_Server
System.Web.UI.IPage.get_Title
System.Web.UI.IPage.add_Error
System.Web.UI.IPage.remove_Error
System.Web.UI.IPage.add_InitComplete
System.Web.UI.IPage.remove_InitComplete
System.Web.UI.IPage.add_LoadComplete
System.Web.UI.IPage.remove_LoadComplete
System.Web.UI.IPage.RegisterRequiresViewStateEncryption
System.Web.UI.IPage.SetFocus
System.Web.UI.IPage.add_PreRender
System.Web.UI.IPage.remove_PreRender
System.Web.UI.IPage.add_PreRenderComplete
System.Web.UI.IPage.remove_PreRenderComplete
System.Web.UI.IPage.SetRenderMethodDelegate
System.Web.UI.IPage.Validate
System.Web.UI.IPage.VerifyRenderingInServerForm
System.Web.UI.IPage.AppRelativeVirtualPath
System.Web.UI.IPage.ClientScript
System.Web.UI.IPage.EnableEventValidation
System.Web.UI.IPage.Form
System.Web.UI.IPage.Header
System.Web.UI.IPage.IsPostBack
System.Web.UI.IPage.IsValid
System.Web.UI.IPage.Items
System.Web.UI.IPage.Request
System.Web.UI.IPage.Response
System.Web.UI.IPage.Server
System.Web.UI.IPage.Title
System.Web.UI.IPage.Error
System.Web.UI.IPage.InitComplete
System.Web.UI.IPage.LoadComplete
System.Web.UI.IPage.PreRender
System.Web.UI.IPage.PreRenderComplete
_loadProperties
ConfigureProfileService
MergeProperties
SortedList`2
GetSettingsProperty
RenderProfileProperties
get_HasLoadProperties
get_LoadProperties
set_LoadProperties
HasLoadProperties
LoadProperties
_name
_value
get_Value
Value
_parentUpdatePanel
_script
get_Script
get_ParentUpdatePanel
Script
ParentUpdatePanel
_controlId
_encode
get_ControlId
get_Encode
ControlId
Encode
_initialValue
get_InitialValue
InitialValue
_scriptType
_addScriptTags
get_AddScriptTags
get_Key
get_ScriptType
get_Url
AddScriptTags
ScriptType
ClientScriptInclude
ClientScriptBlock
ClientStartupScript
OnSubmitStatement
get_TypeId
GetLocalizedString
TypeId
_resourceLoaded
_descriptionResourceName
get_Description
Description
_displayNameResourceName
get_DisplayName
DisplayName
_loadRoles
ConfigureRoleService
get_LoadRoles
set_LoadRoles
LoadRoles
GetScript
RegisterDisposeForDescriptor
_elementIDInternal
_registerDispose
get_ElementIDInternal
get_ID
set_ID
get_RegisterDispose
set_RegisterDispose
AddComponentProperty
AddElementProperty
AddEvent
AddScriptProperty
AppendEventsScript
AppendPropertiesScript
AppendReferencesScript
ElementIDInternal
RegisterDispose
AppendValue
_componentID
_elementID
get_ElementID
ElementID
System.Web.UI.IScriptControl.GetScriptDescriptors
System.Web.UI.IScriptControl.GetScriptReferences
_extenderControls
_pagePreRenderRaised
_scriptControls
_scriptReferencesRegistered
get_ExtenderControls
get_ScriptControls
AddScriptReferences
AddScriptReferencesForScriptControls
AddScriptReferenceForScriptControl
AddScriptReferencesForExtenderControls
AddScriptReferenceForExtenderControl
InControlTree
OnPagePreRender
RegisterScriptsForScriptDescriptors
VerifyTargetControlType
ExtenderControls
ScriptControls
AsyncPostBackTimeoutDefault
_appLevelCompilationSection
_deploymentSection
_scriptPath
_services
_proxies
_enablePartialRendering
_supportsPartialRendering
_supportsPartialRenderingSetByUser
_enableScriptGlobalization
_enableScriptLocalization
_enablePageMethods
_loadScriptsBeforeUI
_initCompleted
_isInAsyncPostBack
_asyncPostBackTimeout
_allowCustomErrorsRedirect
_asyncPostBackErrorMessage
_zipSet
_uniqueScriptCounter
AsyncPostBackErrorEvent
ResolveCompositeScriptReferenceEvent
ResolveScriptReferenceEvent
_scriptRegistration
_pageRequestManager
_scriptControlManager
_profileServiceManager
_authenticationServiceManager
_roleServiceManager
_enableSecureHistoryState
_enableHistory
_isNavigating
_clientNavigateHandler
_initialState
NavigateEvent
_newPointCreated
get_AllowCustomErrorsRedirect
set_AllowCustomErrorsRedirect
get_AppLevelCompilationSection
get_AsyncPostBackErrorMessage
set_AsyncPostBackErrorMessage
get_AsyncPostBackTimeout
set_AsyncPostBackTimeout
get_ClientNavigateHandler
set_ClientNavigateHandler
get_CustomErrorsSection
get_DeploymentSection
get_DeploymentSectionRetail
get_EmptyPageUrl
set_EmptyPageUrl
get_EnableHistory
set_EnableHistory
get_EnablePageMethods
set_EnablePageMethods
get_EnablePartialRendering
set_EnablePartialRendering
get_EnableScriptGlobalization
set_EnableScriptGlobalization
get_EnableScriptLocalization
set_EnableScriptLocalization
get_EnableSecureHistoryState
set_EnableSecureHistoryState
get_HasAuthenticationServiceManager
get_HasProfileServiceManager
get_HasRoleServiceManager
get_IsDebuggingEnabled
get_IsNavigating
get_LoadScriptsBeforeUI
set_LoadScriptsBeforeUI
get_PageRequestManager
get_Proxies
get_ScriptControlManager
get_ScriptRegistration
get_ScriptPath
set_ScriptPath
get_Services
set_SupportsPartialRendering
get_Zip
add_AsyncPostBackError
remove_AsyncPostBackError
add_Navigate
remove_Navigate
add_ResolveCompositeScriptReference
remove_ResolveCompositeScriptReference
add_ResolveScriptReference
remove_ResolveScriptReference
AddHistoryPoint
AddFrameworkLoadedCheck
AddFrameworkScript
AddFrameworkScripts
AddScriptCollections
ConfigureApplicationServices
CreateUniqueScriptKey
GetCurrent
GetCustomErrorsSectionWithAssert
GetRegisteredArrayDeclarations
GetRegisteredClientScriptBlocks
GetRegisteredDisposeScripts
GetRegisteredExpandoAttributes
GetRegisteredHiddenFields
GetRegisteredOnSubmitStatements
GetRegisteredStartupScripts
GetStateString
LoadHistoryState
OnAsyncPostBackError
RaiseNavigate
OnPagePreRenderComplete
OnPageInitComplete
OnResolveCompositeScriptReference
OnResolveScriptReference
PrepareNewHistoryPoint
RaisePostBackEvent
RaisePostDataChangedEvent
RegisterArrayDeclaration
RegisterClientScriptBlockInternal
RegisterClientScriptIncludeInternal
RegisterClientScriptResource
RegisterExpandoAttribute
RegisterGlobalizationScriptBlock
RegisterHiddenField
RegisterOnSubmitStatement
RegisterScripts
RegisterUniqueScripts
RegisterServices
RemoveDuplicates
RegisterStartupScriptInternal
SetPageTitle
SetStateValue
System.Web.UI.IControl.get_Context
System.Web.UI.IControl.get_DesignMode
System.Web.UI.IScriptManagerInternal.RegisterProxy
System.Web.UI.IScriptManagerInternal.RegisterUpdatePanel
System.Web.UI.IScriptManagerInternal.UnregisterUpdatePanel
System.Web.UI.IPostBackDataHandler.LoadPostData
System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent
System.Web.UI.IPostBackEventHandler.RaisePostBackEvent
System.Web.UI.IScriptManager.RegisterArrayDeclaration
System.Web.UI.IScriptManager.RegisterClientScriptBlock
System.Web.UI.IScriptManager.RegisterClientScriptInclude
System.Web.UI.IScriptManager.RegisterClientScriptResource
System.Web.UI.IScriptManager.RegisterDispose
System.Web.UI.IScriptManager.RegisterExpandoAttribute
System.Web.UI.IScriptManager.RegisterHiddenField
System.Web.UI.IScriptManager.RegisterOnSubmitStatement
System.Web.UI.IScriptManager.RegisterPostBackControl
System.Web.UI.IScriptManager.RegisterStartupScript
System.Web.UI.IScriptManager.SetFocusInternal
AllowCustomErrorsRedirect
AppLevelCompilationSection
AsyncPostBackErrorMessage
AsyncPostBackTimeout
ClientNavigateHandler
DeploymentSection
DeploymentSectionRetail
EmptyPageUrl
EnableHistory
EnablePageMethods
EnablePartialRendering
EnableScriptGlobalization
EnableScriptLocalization
EnableSecureHistoryState
HasAuthenticationServiceManager
HasProfileServiceManager
HasRoleServiceManager
IsDebuggingEnabled
IsNavigating
LoadScriptsBeforeUI
Proxies
ScriptRegistration
ScriptPath
Services
AsyncPostBackError
Navigate
ResolveCompositeScriptReference
ResolveScriptReference
System.Web.UI.IControl.Context
System.Web.UI.IControl.DesignMode
_navigateEvent
get_NavigateEvent
CollectScripts
Inherit
Release
_scriptPathCache
_assembly
_ignoreScriptPath
get_Assembly
set_Assembly
get_EffectiveScriptMode
get_IgnoreScriptPath
set_IgnoreScriptPath
DetermineCulture
GetDebugName
GetPath
GetPathWithoutName
GetPathWithName
GetResourceName
GetScriptPath
GetScriptPathCached
GetUrlFromName
GetUrlFromPath
ShouldUseDebugScript
EffectiveScriptMode
IgnoreScriptPath
ScriptTagRegex
_scriptDisposes
_scriptArrays
_clientScriptBlocks
_startupScriptBlocks
_expandos
_submitStatements
get_ScriptArrays
get_ScriptBlocks
get_ScriptDisposes
get_ScriptExpandos
get_ScriptHiddenFields
get_ScriptStartupBlocks
get_ScriptSubmitStatements
CheckScriptTagTweenSpace
IsControlRegistrationActive
RenderActiveArrayDeclarations
RenderActiveExpandos
RenderActiveHiddenFields
RenderActiveScriptBlocks
RenderActiveScriptDisposes
RenderActiveScripts
RenderActiveSubmitStatements
WriteScriptWithTags
ScriptArrays
ScriptBlocks
ScriptDisposes
ScriptExpandos
ScriptHiddenFields
ScriptStartupBlocks
ScriptSubmitStatements
_scriptName
_scriptResourceName
_webResourceRegEx
get_ScriptName
get_ScriptResourceName
CopyScriptToStringBuilderWithSubstitution
System.Resources
ResourceManager
GetResourceManager
GetScriptFromWebResourceInternal
RegisterNamespace
WriteNotificationToStringBuilder
ResourceSet
WriteResource
WriteResourceToStringBuilder
WriteResources
WriteScript
ScriptName
ScriptResourceName
_contentType
_performSubstitution
_isDebug
_scriptCache
_duplicateScriptAttributesChecked
Empty
get_IsDebug
set_IsDebug
get_PerformSubstitution
set_PerformSubstitution
set_ScriptName
GetInstance
IsDebug
PerformSubstitution
_inlineScript
get_InlineScript
set_InlineScript
GetInlineScript
GetServicePath
Register
RenderClientScriptBlock
InlineScript
_targetControlType
get_TargetControlType
TargetControlType
_targetControlTypeCache
GetTargetControlTypes
GetTargetControlTypesInternal
TickEventKey
_stateDirty
get_Interval
set_Interval
add_Tick
remove_Tick
GetJsonState
OnTick
Interval
UpdatePanelToken
_childrenAsTriggers
_contentTemplate
_contentTemplateContainer
_asyncPostBackMode
_asyncPostBackModeInitialized
_updateMode
_rendered
_explicitUpdate
_renderMode
_triggers
_panelRegistered
get_ChildrenAsTriggers
set_ChildrenAsTriggers
get_ContentTemplate
set_ContentTemplate
get_ContentTemplateContainer
get_IsInPartialRendering
get_RequiresUpdate
get_RenderMode
set_RenderMode
get_Triggers
get_UpdateMode
set_UpdateMode
get_ChildControls
AddContentTemplateContainer
CreateContents
CreateContentTemplateContainer
RegisterPanel
RenderChildren
SetAsyncPostBackMode
ChildrenAsTriggers
ContentTemplate
ContentTemplateContainer
IsInPartialRendering
RequiresUpdate
RenderMode
Triggers
UpdateMode
ChildControls
_allowClear
AddSingleChild
AddAt
ClearInternal
Block
Inline
ClearItems
RemoveItem
SetItem
Always
Conditional
_progressTemplate
_progressTemplateContainer
_displayAfter
_dynamicLayout
_associatedUpdatePanelID
get_AssociatedUpdatePanelID
set_AssociatedUpdatePanelID
get_DisplayAfter
set_DisplayAfter
get_ProgressTemplate
set_ProgressTemplate
get_DynamicLayout
set_DynamicLayout
AssociatedUpdatePanelID
DisplayAfter
ProgressTemplate
DynamicLayout
_assemblyContainsWebResourceCache
AssemblyContainsWebResource
SystemWebExtensionsContainsWebResource
VerifyAssemblyContainsReleaseWebResource
VerifyAssemblyContainsDebugWebResource
DefaultMaxJsonDeserializerMembers
_settingsInitialized
_appSettingsLock
EnsureSettingsLoaded
_updatePanelMaxScriptLength
get_UpdatePanelMaxScriptLength
_scriptResourceAllowNonJsFiles
get_ScriptResourceAllowNonJsFiles
_maxJsonDeserializerMembers
get_MaxJsonDeserializerMembers
UpdatePanelMaxScriptLength
ScriptResourceAllowNonJsFiles
MaxJsonDeserializerMembers
_emptyFileVersion
GetAssemblyFileVersion
IsEncodingInAcceptList
_dictionary
ContainsKey
ContainsValue
IEnumerator`1
RemoveFromLists
TryGetValue
System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly
System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
System.Collections.IEnumerable.GetEnumerator
System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
_first
_second
get_First
get_Second
First
Second
_items
resourceMan
resourceCulture
get_ResourceManager
get_Culture
set_Culture
get_ApplicationServiceManager_Path
get_AppService_Disabled
get_AppService_MultiplePaths
get_AppService_RequiredSSL
get_AppService_UnknownProfileProperty
get_ArgumentMustBeCurrentUser
get_ArgumentMustBeNull
get_AsyncPostBackTrigger_CannotFindEvent
get_AsyncPostBackTrigger_EventName
get_AsyncPostBackTrigger_InvalidEvent
get_AttributeNotRecognized
get_Category_Sorting
get_ClientService_BadJsonResponse
get_Common_ArgumentInvalidType
get_Common_GreaterThanOrEqualToZero
get_Common_GreaterThanOrEqualToZeroAndLessThanOrEqualToOne
get_Common_NullOrEmpty
get_Common_PageCannotBeNull
get_Common_ScriptManagerRequired
get_CompositeScriptReference_Scripts
get_ConvertersCollection_NotJavaScriptConverter
get_ConvertersCollection_UnknownType
get_DataBoundControlHelper_NoNamingContainer
get_DataPager_ControlIsntPageable
get_DataPager_Fields
get_DataPager_NoNamingContainer
get_DataPager_NoPageableItemContainer
get_DataPager_PageableItemContainerNotFound
get_DataPager_PagedControlID
get_DataPager_PagePropertiesCannotBeSet
get_DataPager_PageSize
get_DataPager_QueryStringField
get_DataPagerField_Visible
get_DynamicControlBase_ConvertEmptyStringToNull
get_DynamicControlBase_DataField
get_DynamicControlBase_DataFormatString
get_DynamicControlBase_HtmlEncode
get_DynamicControlBase_NullDisplayText
get_DynamicControlBase_UIHint
get_DynamicControlBase_ValidationGroup
get_DynamicFilterRepeater_DynamicFilterContainerId
get_DynamicNavigatorDataSource_NoAccessibleTablesFound
get_DynamicNavigatorDataSource_NoModelsRegistered
get_DynamicNavigatorDataSource_NoTablesInModels
get_ExpressionParser_AmbiguousConstructorInvocation
get_ExpressionParser_AmbiguousIndexerInvocation
get_ExpressionParser_AmbiguousMethodInvocation
get_ExpressionParser_ArgsIncompatibleWithLambda
get_ExpressionParser_BothTypesConvertToOther
get_ExpressionParser_CannotConvertValue
get_ExpressionParser_CannotIndexMultipleDimensionalArray
get_ExpressionParser_CloseBracketOrCommaExpected
get_ExpressionParser_CloseParenOrCommaExpected
get_ExpressionParser_CloseParenOrOperatorExpected
get_ExpressionParser_ColonExpected
get_ExpressionParser_DigitExpected
get_ExpressionParser_DotOrOpenParenExpected
get_ExpressionParser_DuplicateIdentifier
get_ExpressionParser_ExpressionExpected
get_ExpressionParser_ExpressionTypeMismatch
get_ExpressionParser_FirstExprMustBeBool
get_ExpressionParser_IdentifierExpected
get_ExpressionParser_IifRequiresThreeArgs
get_ExpressionParser_IncompatibleOperand
get_ExpressionParser_IncompatibleOperands
get_ExpressionParser_InvalidCharacter
get_ExpressionParser_InvalidCharacterLiteral
get_ExpressionParser_InvalidIndex
get_ExpressionParser_InvalidIntegerLiteral
get_ExpressionParser_InvalidRealLiteral
get_ExpressionParser_MethodIsVoid
get_ExpressionParser_MethodsAreInaccessible
get_ExpressionParser_MissingAsClause
get_ExpressionParser_NeitherTypeConvertsToOther
get_ExpressionParser_NoApplicableAggregate
get_ExpressionParser_NoApplicableIndexer
get_ExpressionParser_NoApplicableMethod
get_ExpressionParser_NoItInScope
get_ExpressionParser_NoMatchingConstructor
get_ExpressionParser_OpenBracketExpected
get_ExpressionParser_OpenParenExpected
get_ExpressionParser_SyntaxError
get_ExpressionParser_TokenExpected
get_ExpressionParser_TypeHasNoNullableForm
get_ExpressionParser_UnknownIdentifier
get_ExpressionParser_UnknownPropertyOrField
get_ExpressionParser_UnterminatedStringLiteral
get_ExtenderControl_TargetControlDifferentUpdatePanel
get_ExtenderControl_TargetControlID
get_ExtenderControl_TargetControlIDEmpty
get_ExtenderControl_TargetControlIDInvalid
get_FilterRepeater_TableName
get_JSON_ArrayTypeNotSupported
get_JSON_BadEscape
get_JSON_CannotConvertObjectToType
get_JSON_CannotCreateListType
get_JSON_CircularReference
get_JSON_DepthLimitExceeded
get_JSON_DeserializerTypeMismatch
get_JSON_DictionaryTypeNotSupported
get_JSON_ExpectedOpenBrace
get_JSON_IllegalPrimitive
get_JSON_InvalidArrayEnd
get_JSON_InvalidArrayExpectComma
get_JSON_InvalidArrayExtraComma
get_JSON_InvalidArrayStart
get_JSON_InvalidEnumType
get_JSON_InvalidMaxJsonLength
get_JSON_InvalidMemberName
get_JSON_InvalidObject
get_JSON_InvalidRecursionLimit
get_JSON_MaxJsonLengthExceeded
get_JSON_NoConstructor
get_JSON_StringNotQuoted
get_JSON_UnterminatedString
get_JSON_ValueTypeCannotBeNull
get_LinqDataSource_AutoGenerateOrderByClause
get_LinqDataSource_AutoGenerateWhereClause
get_LinqDataSource_AutoPage
get_LinqDataSource_AutoSort
get_LinqDataSource_ContextCreated
get_LinqDataSource_ContextCreating
get_LinqDataSource_ContextDisposing
get_LinqDataSource_ContextTypeName
get_LinqDataSource_Deleted
get_LinqDataSource_DeleteParameters
get_LinqDataSource_Deleting
get_LinqDataSource_Description
get_LinqDataSource_DisplayName
get_LinqDataSource_EnableDelete
get_LinqDataSource_EnableInsert
get_LinqDataSource_EnableObjectTracking
get_LinqDataSource_EnableUpdate
get_LinqDataSource_GroupBy
get_LinqDataSource_GroupByParameters
get_LinqDataSource_Inserted
get_LinqDataSource_Inserting
get_LinqDataSource_InsertParameters
get_LinqDataSource_InvalidViewName
get_LinqDataSource_OrderBy
get_LinqDataSource_OrderByParameters
get_LinqDataSource_OrderGroupsBy
get_LinqDataSource_OrderGroupsByParameters
get_LinqDataSource_Select
get_LinqDataSource_Selected
get_LinqDataSource_Selecting
get_LinqDataSource_SelectParameters
get_LinqDataSource_StoreOriginalValuesInViewState
get_LinqDataSource_TableName
get_LinqDataSource_Updated
get_LinqDataSource_UpdateParameters
get_LinqDataSource_Updating
get_LinqDataSource_Where
get_LinqDataSource_WhereParameters
get_LinqDataSourceValidationException_ValidationFailed
get_LinqDataSourceView_CannotConvertType
get_LinqDataSourceView_ContextTypeNameChanged
get_LinqDataSourceView_ContextTypeNameNotFound
get_LinqDataSourceView_ContextTypeNameNotSpecified
get_LinqDataSourceView_DeleteNotSupported
get_LinqDataSourceView_EnableObjectTrackingChanged
get_LinqDataSourceView_GroupByNotSupportedOnEdit
get_LinqDataSourceView_InsertNotSupported
get_LinqDataSourceView_InsertRequiresValues
get_LinqDataSourceView_InvalidContextType
get_LinqDataSourceView_InvalidOrderByFieldName
get_LinqDataSourceView_InvalidParameterName
get_LinqDataSourceView_InvalidTablePropertyType
get_LinqDataSourceView_OrderByAlreadySpecified
get_LinqDataSourceView_OrderGroupsByRequiresGroupBy
get_LinqDataSourceView_OriginalValuesNotFound
get_LinqDataSourceView_PagingNotHandled
get_LinqDataSourceView_ParametersMustBeNamed
get_LinqDataSourceView_SelectNewNotSupportedOnEdit
get_LinqDataSourceView_TableCannotBeStatic
get_LinqDataSourceView_TableNameChanged
get_LinqDataSourceView_TableNameNotFound
get_LinqDataSourceView_TableNameNotSpecified
get_LinqDataSourceView_UpdateNotSupported
get_LinqDataSourceView_ValidationFailed
get_LinqDataSourceView_WhereAlreadySpecified
get_ListView_AlternatingItemTemplate
get_ListView_ContainerNameMustNotBeEmpty
get_ListView_ConvertEmptyStringToNull
get_ListView_DataKeyNames
get_ListView_DataKeyNamesMustBeSpecified
get_ListView_DataKeys
get_ListView_DataSourceDoesntSupportPaging
get_ListView_DataSourceMustBeCollectionWhenNotDataBinding
get_ListView_EditIndex
get_ListView_EditItem
get_ListView_EditItemTemplate
get_ListView_EmptyDataTemplate
get_ListView_EmptyItemTemplate
get_ListView_EnableDataBoundControlManager
get_ListView_EnableModelValidation
get_ListView_GroupContainerID
get_ListView_GroupItemCount
get_ListView_GroupItemCountNoGroupTemplate
get_ListView_GroupSeparatorTemplate
get_ListView_GroupTemplate
get_ListView_InsertItem
get_ListView_InsertItemPosition
get_ListView_InsertItemTemplate
get_ListView_InsertTemplateRequired
get_ListView_InvalidCancel
get_ListView_InvalidDelete
get_ListView_InvalidEdit
get_ListView_InvalidInsert
get_ListView_InvalidSelect
get_ListView_InvalidUpdate
get_ListView_ItemPlaceholderID
get_ListView_Items
get_ListView_ItemSeparatorTemplate
get_ListView_ItemsNotDataItems
get_ListView_ItemTemplate
get_ListView_ItemTemplateRequired
get_ListView_LayoutTemplate
get_ListView_Missing_VirtualItemCount
get_ListView_NeedICollectionOrTotalRowCount
get_ListView_NoGroupPlaceholder
get_ListView_NoInsertItem
get_ListView_NoItemPlaceholder
get_ListView_NullView
get_ListView_OnItemCanceling
get_ListView_OnItemCommand
get_ListView_OnItemCreated
get_ListView_OnItemDataBound
get_ListView_OnItemDeleted
get_ListView_OnItemDeleting
get_ListView_OnItemEditing
get_ListView_OnItemInserted
get_ListView_OnItemInserting
get_ListView_OnItemUpdated
get_ListView_OnItemUpdating
get_ListView_OnLayoutCreated
get_ListView_OnPagePropertiesChanged
get_ListView_OnPagePropertiesChanging
get_ListView_OnSelectedIndexChanged
get_ListView_OnSelectedIndexChanging
get_ListView_OnSorted
get_ListView_OnSorting
get_ListView_SelectedIndex
get_ListView_SelectedItemTemplate
get_ListView_SortDirection
get_ListView_SortExpression
get_ListView_StyleNotSupported
get_ListView_StylePropertiesNotSupported
get_ListView_UnhandledEvent
get_ListViewPagedDataSource_CannotGetCount
get_ListViewPagedDataSource_EnumeratorMoveNextNotCalled
get_NextPreviousPagerField_ButtonCssClass
get_NextPreviousPagerField_ButtonType
get_NextPreviousPagerField_FirstPageImageUrl
get_NextPreviousPagerField_FirstPageText
get_NextPreviousPagerField_LastPageImageUrl
get_NextPreviousPagerField_LastPageText
get_NextPreviousPagerField_NextPageImageUrl
get_NextPreviousPagerField_NextPageText
get_NextPreviousPagerField_PreviousPageImageUrl
get_NextPreviousPagerField_PreviousPageText
get_NextPreviousPagerField_RenderDisabledButtonsAsLabels
get_NextPreviousPagerField_RenderNonBreakingSpacesBetweenControls
get_NextPreviousPagerField_ShowFirstPageButton
get_NextPreviousPagerField_ShowLastPageButton
get_NextPreviousPagerField_ShowNextPageButton
get_NextPreviousPagerField_ShowPreviousPageButton
get_NextPrevPagerField_DefaultFirstPageText
get_NextPrevPagerField_DefaultLastPageText
get_NextPrevPagerField_DefaultNextPageText
get_NextPrevPagerField_DefaultPreviousPageText
get_NumericPagerField_ButtonCount
get_NumericPagerField_ButtonType
get_NumericPagerField_CurrentPageLabelCssClass
get_NumericPagerField_DefaultNextPageText
get_NumericPagerField_DefaultPreviousPageText
get_NumericPagerField_NextPageImageUrl
get_NumericPagerField_NextPageText
get_NumericPagerField_NextPreviousButtonCssClass
get_NumericPagerField_NumericButtonCssClass
get_NumericPagerField_PreviousPageImageUrl
get_NumericPagerField_PreviousPageText
get_NumericPagerField_RenderNonBreakingSpacesBetweenControls
get_PageRequestManager_RegisterDataItemInNonAsyncRequest
get_PageRequestManager_RegisterDataItemTwice
get_PagerFieldCollection_InvalidType
get_PagerFieldCollection_InvalidTypeIndex
get_ParseException_ParseExceptionFormat
get_ProfileServiceManager_LoadProperitesWithNonDefaultPath
get_ProfileServiceManager_LoadProperties
get_ProxyGenerator_UnsupportedType
get_ProxyHelper_BadStatusCode
get_RoleService_RoleProviderNotFound
get_RoleService_RolesFeatureNotEnabled
get_RoleServiceManager_LoadRoles
get_RoleServiceManager_LoadRolesWithNonDefaultPath
get_ScriptControlDescriptor_IDNotSettable
get_ScriptControlManager_ExtenderControlNotRegistered
get_ScriptControlManager_NoTargetControlTypes
get_ScriptControlManager_RegisterExtenderControlTooEarly
get_ScriptControlManager_RegisterExtenderControlTooLate
get_ScriptControlManager_RegisterScriptControlTooEarly
get_ScriptControlManager_RegisterScriptControlTooLate
get_ScriptControlManager_ScriptControlNotRegistered
get_ScriptControlManager_TargetControlTypeInvalid
get_ScriptManager_AllowCustomErrorsRedirect
get_ScriptManager_AsyncPostBackError
get_ScriptManager_AsyncPostBackErrorMessage
get_ScriptManager_AsyncPostBackNotInPartialRenderingMode
get_ScriptManager_AsyncPostBackTimeout
get_ScriptManager_AuthenticationService
get_ScriptManager_CannotAddHistoryPointOutsideOfAsyncPostBack
get_ScriptManager_CannotAddHistoryPointWithHistoryDisabled
get_ScriptManager_CannotChangeEnableHistory
get_ScriptManager_CannotChangeEnablePartialRendering
get_ScriptManager_CannotChangeEnableScriptGlobalization
get_ScriptManager_CannotChangeSupportsPartialRendering
get_ScriptManager_CannotRegisterBothPostBacks
get_ScriptManager_CannotRegisterScriptInMultipleCompositeReferences
get_ScriptManager_CannotSetSupportsPartialRenderingWhenDisabled
get_ScriptManager_ClientNavigateHandler
get_ScriptManager_CompositeScript
get_ScriptManager_EmptyPageUrl
get_ScriptManager_EnableHistory
get_ScriptManager_EnablePageMethods
get_ScriptManager_EnablePartialRendering
get_ScriptManager_EnableScriptGlobalization
get_ScriptManager_EnableScriptLocalization
get_ScriptManager_EnableSecureHistoryState
get_ScriptManager_FrameworkFailedToLoad
get_ScriptManager_InvalidControlRegistration
get_ScriptManager_LoadScriptsBeforeUI
get_ScriptManager_Navigate
get_ScriptManager_OnlyOneScriptManager
get_ScriptManager_PageUntitled
get_ScriptManager_ProfileService
get_ScriptManager_ResolveCompositeScriptReference
get_ScriptManager_ResolveScriptReference
get_ScriptManager_RoleService
get_ScriptManager_ScriptMode
get_ScriptManager_ScriptPath
get_ScriptManager_Scripts
get_ScriptManager_Services
get_ScriptManager_UpdatePanelNotRegistered
get_ScriptReference_Assembly
get_ScriptReference_AssemblyRequiresName
get_ScriptReference_IgnoreScriptPath
get_ScriptReference_InvalidReleaseScriptName
get_ScriptReference_InvalidReleaseScriptPath
get_ScriptReference_Name
get_ScriptReference_NameAndPathCannotBeEmpty
get_ScriptReference_NotifyScriptLoaded
get_ScriptReference_Path
get_ScriptReference_ResourceUICultures
get_ScriptReference_ScriptMode
get_ScriptRegistrationManager_ControlNotOnPage
get_ScriptRegistrationManager_InvalidChars
get_ScriptRegistrationManager_NoCloseTag
get_ScriptRegistrationManager_NoTags
get_ScriptResourceHandler_AssemblyNotFileBased
get_ScriptResourceHandler_DuplicateScriptResources
get_ScriptResourceHandler_InvalidRequest
get_ScriptResourceHandler_ResourceUrlLongerThan1024Characters
get_ScriptResourceHandler_TypeNameMismatch
get_ScriptResourceHandler_UnknownResource
get_ServiceReference_InlineScript
get_ServiceReference_Path
get_ServiceReference_PathCannotBeEmpty
get_ServiceUriNotFound
get_SqlHelper_SqlEverywhereNotInstalled
get_TemplatePagerField_OnPagerCommand
get_TemplatePagerField_PagerTemplate
get_TemplatePagerField_UnhandledEvent
get_Timer_IntervalMustBeGreaterThanZero
get_Timer_TimerEnable
get_Timer_TimerInterval
get_Timer_TimerTick
get_UnhandledExceptionEventLogMessage
get_UpdatePanel_CannotModifyControlCollection
get_UpdatePanel_CannotSetContentTemplate
get_UpdatePanel_ChildrenAsTriggers
get_UpdatePanel_ChildrenTriggersAndUpdateAlways
get_UpdatePanel_RenderMode
get_UpdatePanel_SetPartialRenderingModeCalledOnce
get_UpdatePanel_Triggers
get_UpdatePanel_UpdateConditional
get_UpdatePanel_UpdateMode
get_UpdatePanel_UpdateTooLate
get_UpdatePanelControlTrigger_ControlID
get_UpdatePanelControlTrigger_ControlNotFound
get_UpdatePanelControlTrigger_NoControlID
get_UpdateProgress_AssociatedUpdatePanelID
get_UpdateProgress_DisplayAfter
get_UpdateProgress_DisplayAfterInvalid
get_UpdateProgress_DynamicLayout
get_UpdateProgress_NoUpdatePanel
get_UpdateProgress_ProgressTemplate
get_UpdateProgress_TemplateRequired
get_UserIsNotAuthenticated
get_WebResourceUtil_AssemblyDoesNotContainDebugWebResource
get_WebResourceUtil_AssemblyDoesNotContainEmbeddedResource
get_WebResourceUtil_AssemblyDoesNotContainReleaseWebResource
get_WebService_Error
get_WebService_InvalidGenerateScriptType
get_WebService_InvalidInlineVirtualPath
get_WebService_InvalidVerbRequest
get_WebService_InvalidWebServiceCall
get_WebService_InvalidXmlReturnType
get_WebService_MissingArg
get_WebService_NoScriptServiceAttribute
get_WebService_NoWebServiceData
get_WebService_NoWebServiceDataInlineScript
get_WebService_RedirectError
get_WebService_UnknownWebMethod
Culture
ApplicationServiceManager_Path
AppService_Disabled
AppService_MultiplePaths
AppService_RequiredSSL
AppService_UnknownProfileProperty
ArgumentMustBeCurrentUser
ArgumentMustBeNull
AsyncPostBackTrigger_CannotFindEvent
AsyncPostBackTrigger_EventName
AsyncPostBackTrigger_InvalidEvent
AttributeNotRecognized
Category_Sorting
ClientService_BadJsonResponse
Common_ArgumentInvalidType
Common_GreaterThanOrEqualToZero
Common_GreaterThanOrEqualToZeroAndLessThanOrEqualToOne
Common_NullOrEmpty
Common_PageCannotBeNull
Common_ScriptManagerRequired
CompositeScriptReference_Scripts
ConvertersCollection_NotJavaScriptConverter
ConvertersCollection_UnknownType
DataBoundControlHelper_NoNamingContainer
DataPager_ControlIsntPageable
DataPager_Fields
DataPager_NoNamingContainer
DataPager_NoPageableItemContainer
DataPager_PageableItemContainerNotFound
DataPager_PagedControlID
DataPager_PagePropertiesCannotBeSet
DataPager_PageSize
DataPager_QueryStringField
DataPagerField_Visible
DynamicControlBase_ConvertEmptyStringToNull
DynamicControlBase_DataField
DynamicControlBase_DataFormatString
DynamicControlBase_HtmlEncode
DynamicControlBase_NullDisplayText
DynamicControlBase_UIHint
DynamicControlBase_ValidationGroup
DynamicFilterRepeater_DynamicFilterContainerId
DynamicNavigatorDataSource_NoAccessibleTablesFound
DynamicNavigatorDataSource_NoModelsRegistered
DynamicNavigatorDataSource_NoTablesInModels
ExpressionParser_AmbiguousConstructorInvocation
ExpressionParser_AmbiguousIndexerInvocation
ExpressionParser_AmbiguousMethodInvocation
ExpressionParser_ArgsIncompatibleWithLambda
ExpressionParser_BothTypesConvertToOther
ExpressionParser_CannotConvertValue
ExpressionParser_CannotIndexMultipleDimensionalArray
ExpressionParser_CloseBracketOrCommaExpected
ExpressionParser_CloseParenOrCommaExpected
ExpressionParser_CloseParenOrOperatorExpected
ExpressionParser_ColonExpected
ExpressionParser_DigitExpected
ExpressionParser_DotOrOpenParenExpected
ExpressionParser_DuplicateIdentifier
ExpressionParser_ExpressionExpected
ExpressionParser_ExpressionTypeMismatch
ExpressionParser_FirstExprMustBeBool
ExpressionParser_IdentifierExpected
ExpressionParser_IifRequiresThreeArgs
ExpressionParser_IncompatibleOperand
ExpressionParser_IncompatibleOperands
ExpressionParser_InvalidCharacter
ExpressionParser_InvalidCharacterLiteral
ExpressionParser_InvalidIndex
ExpressionParser_InvalidIntegerLiteral
ExpressionParser_InvalidRealLiteral
ExpressionParser_MethodIsVoid
ExpressionParser_MethodsAreInaccessible
ExpressionParser_MissingAsClause
ExpressionParser_NeitherTypeConvertsToOther
ExpressionParser_NoApplicableAggregate
ExpressionParser_NoApplicableIndexer
ExpressionParser_NoApplicableMethod
ExpressionParser_NoItInScope
ExpressionParser_NoMatchingConstructor
ExpressionParser_OpenBracketExpected
ExpressionParser_OpenParenExpected
ExpressionParser_SyntaxError
ExpressionParser_TokenExpected
ExpressionParser_TypeHasNoNullableForm
ExpressionParser_UnknownIdentifier
ExpressionParser_UnknownPropertyOrField
ExpressionParser_UnterminatedStringLiteral
ExtenderControl_TargetControlDifferentUpdatePanel
ExtenderControl_TargetControlID
ExtenderControl_TargetControlIDEmpty
ExtenderControl_TargetControlIDInvalid
FilterRepeater_TableName
JSON_ArrayTypeNotSupported
JSON_BadEscape
JSON_CannotConvertObjectToType
JSON_CannotCreateListType
JSON_CircularReference
JSON_DepthLimitExceeded
JSON_DeserializerTypeMismatch
JSON_DictionaryTypeNotSupported
JSON_ExpectedOpenBrace
JSON_IllegalPrimitive
JSON_InvalidArrayEnd
JSON_InvalidArrayExpectComma
JSON_InvalidArrayExtraComma
JSON_InvalidArrayStart
JSON_InvalidEnumType
JSON_InvalidMaxJsonLength
JSON_InvalidMemberName
JSON_InvalidObject
JSON_InvalidRecursionLimit
JSON_MaxJsonLengthExceeded
JSON_NoConstructor
JSON_StringNotQuoted
JSON_UnterminatedString
JSON_ValueTypeCannotBeNull
LinqDataSource_AutoGenerateOrderByClause
LinqDataSource_AutoGenerateWhereClause
LinqDataSource_AutoPage
LinqDataSource_AutoSort
LinqDataSource_ContextCreated
LinqDataSource_ContextCreating
LinqDataSource_ContextDisposing
LinqDataSource_ContextTypeName
LinqDataSource_Deleted
LinqDataSource_DeleteParameters
LinqDataSource_Deleting
LinqDataSource_Description
LinqDataSource_DisplayName
LinqDataSource_EnableDelete
LinqDataSource_EnableInsert
LinqDataSource_EnableObjectTracking
LinqDataSource_EnableUpdate
LinqDataSource_GroupBy
LinqDataSource_GroupByParameters
LinqDataSource_Inserted
LinqDataSource_Inserting
LinqDataSource_InsertParameters
LinqDataSource_InvalidViewName
LinqDataSource_OrderBy
LinqDataSource_OrderByParameters
LinqDataSource_OrderGroupsBy
LinqDataSource_OrderGroupsByParameters
LinqDataSource_Select
LinqDataSource_Selected
LinqDataSource_Selecting
LinqDataSource_SelectParameters
LinqDataSource_StoreOriginalValuesInViewState
LinqDataSource_TableName
LinqDataSource_Updated
LinqDataSource_UpdateParameters
LinqDataSource_Updating
LinqDataSource_Where
LinqDataSource_WhereParameters
LinqDataSourceValidationException_ValidationFailed
LinqDataSourceView_CannotConvertType
LinqDataSourceView_ContextTypeNameChanged
LinqDataSourceView_ContextTypeNameNotFound
LinqDataSourceView_ContextTypeNameNotSpecified
LinqDataSourceView_DeleteNotSupported
LinqDataSourceView_EnableObjectTrackingChanged
LinqDataSourceView_GroupByNotSupportedOnEdit
LinqDataSourceView_InsertNotSupported
LinqDataSourceView_InsertRequiresValues
LinqDataSourceView_InvalidContextType
LinqDataSourceView_InvalidOrderByFieldName
LinqDataSourceView_InvalidParameterName
LinqDataSourceView_InvalidTablePropertyType
LinqDataSourceView_OrderByAlreadySpecified
LinqDataSourceView_OrderGroupsByRequiresGroupBy
LinqDataSourceView_OriginalValuesNotFound
LinqDataSourceView_PagingNotHandled
LinqDataSourceView_ParametersMustBeNamed
LinqDataSourceView_SelectNewNotSupportedOnEdit
LinqDataSourceView_TableCannotBeStatic
LinqDataSourceView_TableNameChanged
LinqDataSourceView_TableNameNotFound
LinqDataSourceView_TableNameNotSpecified
LinqDataSourceView_UpdateNotSupported
LinqDataSourceView_ValidationFailed
LinqDataSourceView_WhereAlreadySpecified
ListView_AlternatingItemTemplate
ListView_ContainerNameMustNotBeEmpty
ListView_ConvertEmptyStringToNull
ListView_DataKeyNames
ListView_DataKeyNamesMustBeSpecified
ListView_DataKeys
ListView_DataSourceDoesntSupportPaging
ListView_DataSourceMustBeCollectionWhenNotDataBinding
ListView_EditIndex
ListView_EditItem
ListView_EditItemTemplate
ListView_EmptyDataTemplate
ListView_EmptyItemTemplate
ListView_EnableDataBoundControlManager
ListView_EnableModelValidation
ListView_GroupContainerID
ListView_GroupItemCount
ListView_GroupItemCountNoGroupTemplate
ListView_GroupSeparatorTemplate
ListView_GroupTemplate
ListView_InsertItem
ListView_InsertItemPosition
ListView_InsertItemTemplate
ListView_InsertTemplateRequired
ListView_InvalidCancel
ListView_InvalidDelete
ListView_InvalidEdit
ListView_InvalidInsert
ListView_InvalidSelect
ListView_InvalidUpdate
ListView_ItemPlaceholderID
ListView_Items
ListView_ItemSeparatorTemplate
ListView_ItemsNotDataItems
ListView_ItemTemplate
ListView_ItemTemplateRequired
ListView_LayoutTemplate
ListView_Missing_VirtualItemCount
ListView_NeedICollectionOrTotalRowCount
ListView_NoGroupPlaceholder
ListView_NoInsertItem
ListView_NoItemPlaceholder
ListView_NullView
ListView_OnItemCanceling
ListView_OnItemCommand
ListView_OnItemCreated
ListView_OnItemDataBound
ListView_OnItemDeleted
ListView_OnItemDeleting
ListView_OnItemEditing
ListView_OnItemInserted
ListView_OnItemInserting
ListView_OnItemUpdated
ListView_OnItemUpdating
ListView_OnLayoutCreated
ListView_OnPagePropertiesChanged
ListView_OnPagePropertiesChanging
ListView_OnSelectedIndexChanged
ListView_OnSelectedIndexChanging
ListView_OnSorted
ListView_OnSorting
ListView_SelectedIndex
ListView_SelectedItemTemplate
ListView_SortDirection
ListView_SortExpression
ListView_StyleNotSupported
ListView_StylePropertiesNotSupported
ListView_UnhandledEvent
ListViewPagedDataSource_CannotGetCount
ListViewPagedDataSource_EnumeratorMoveNextNotCalled
NextPreviousPagerField_ButtonCssClass
NextPreviousPagerField_ButtonType
NextPreviousPagerField_FirstPageImageUrl
NextPreviousPagerField_FirstPageText
NextPreviousPagerField_LastPageImageUrl
NextPreviousPagerField_LastPageText
NextPreviousPagerField_NextPageImageUrl
NextPreviousPagerField_NextPageText
NextPreviousPagerField_PreviousPageImageUrl
NextPreviousPagerField_PreviousPageText
NextPreviousPagerField_RenderDisabledButtonsAsLabels
NextPreviousPagerField_RenderNonBreakingSpacesBetweenControls
NextPreviousPagerField_ShowFirstPageButton
NextPreviousPagerField_ShowLastPageButton
NextPreviousPagerField_ShowNextPageButton
NextPreviousPagerField_ShowPreviousPageButton
NextPrevPagerField_DefaultFirstPageText
NextPrevPagerField_DefaultLastPageText
NextPrevPagerField_DefaultNextPageText
NextPrevPagerField_DefaultPreviousPageText
NumericPagerField_ButtonCount
NumericPagerField_ButtonType
NumericPagerField_CurrentPageLabelCssClass
NumericPagerField_DefaultNextPageText
NumericPagerField_DefaultPreviousPageText
NumericPagerField_NextPageImageUrl
NumericPagerField_NextPageText
NumericPagerField_NextPreviousButtonCssClass
NumericPagerField_NumericButtonCssClass
NumericPagerField_PreviousPageImageUrl
NumericPagerField_PreviousPageText
NumericPagerField_RenderNonBreakingSpacesBetweenControls
PageRequestManager_RegisterDataItemInNonAsyncRequest
PageRequestManager_RegisterDataItemTwice
PagerFieldCollection_InvalidType
PagerFieldCollection_InvalidTypeIndex
ParseException_ParseExceptionFormat
ProfileServiceManager_LoadProperitesWithNonDefaultPath
ProfileServiceManager_LoadProperties
ProxyGenerator_UnsupportedType
ProxyHelper_BadStatusCode
RoleService_RoleProviderNotFound
RoleService_RolesFeatureNotEnabled
RoleServiceManager_LoadRoles
RoleServiceManager_LoadRolesWithNonDefaultPath
ScriptControlDescriptor_IDNotSettable
ScriptControlManager_ExtenderControlNotRegistered
ScriptControlManager_NoTargetControlTypes
ScriptControlManager_RegisterExtenderControlTooEarly
ScriptControlManager_RegisterExtenderControlTooLate
ScriptControlManager_RegisterScriptControlTooEarly
ScriptControlManager_RegisterScriptControlTooLate
ScriptControlManager_ScriptControlNotRegistered
ScriptControlManager_TargetControlTypeInvalid
ScriptManager_AllowCustomErrorsRedirect
ScriptManager_AsyncPostBackError
ScriptManager_AsyncPostBackErrorMessage
ScriptManager_AsyncPostBackNotInPartialRenderingMode
ScriptManager_AsyncPostBackTimeout
ScriptManager_AuthenticationService
ScriptManager_CannotAddHistoryPointOutsideOfAsyncPostBack
ScriptManager_CannotAddHistoryPointWithHistoryDisabled
ScriptManager_CannotChangeEnableHistory
ScriptManager_CannotChangeEnablePartialRendering
ScriptManager_CannotChangeEnableScriptGlobalization
ScriptManager_CannotChangeSupportsPartialRendering
ScriptManager_CannotRegisterBothPostBacks
ScriptManager_CannotRegisterScriptInMultipleCompositeReferences
ScriptManager_CannotSetSupportsPartialRenderingWhenDisabled
ScriptManager_ClientNavigateHandler
ScriptManager_CompositeScript
ScriptManager_EmptyPageUrl
ScriptManager_EnableHistory
ScriptManager_EnablePageMethods
ScriptManager_EnablePartialRendering
ScriptManager_EnableScriptGlobalization
ScriptManager_EnableScriptLocalization
ScriptManager_EnableSecureHistoryState
ScriptManager_FrameworkFailedToLoad
ScriptManager_InvalidControlRegistration
ScriptManager_LoadScriptsBeforeUI
ScriptManager_Navigate
ScriptManager_OnlyOneScriptManager
ScriptManager_PageUntitled
ScriptManager_ProfileService
ScriptManager_ResolveCompositeScriptReference
ScriptManager_ResolveScriptReference
ScriptManager_RoleService
ScriptManager_ScriptMode
ScriptManager_ScriptPath
ScriptManager_Scripts
ScriptManager_Services
ScriptManager_UpdatePanelNotRegistered
ScriptReference_Assembly
ScriptReference_AssemblyRequiresName
ScriptReference_IgnoreScriptPath
ScriptReference_InvalidReleaseScriptName
ScriptReference_InvalidReleaseScriptPath
ScriptReference_Name
ScriptReference_NameAndPathCannotBeEmpty
ScriptReference_NotifyScriptLoaded
ScriptReference_Path
ScriptReference_ResourceUICultures
ScriptReference_ScriptMode
ScriptRegistrationManager_ControlNotOnPage
ScriptRegistrationManager_InvalidChars
ScriptRegistrationManager_NoCloseTag
ScriptRegistrationManager_NoTags
ScriptResourceHandler_AssemblyNotFileBased
ScriptResourceHandler_DuplicateScriptResources
ScriptResourceHandler_InvalidRequest
ScriptResourceHandler_ResourceUrlLongerThan1024Characters
ScriptResourceHandler_TypeNameMismatch
ScriptResourceHandler_UnknownResource
ServiceReference_InlineScript
ServiceReference_Path
ServiceReference_PathCannotBeEmpty
ServiceUriNotFound
SqlHelper_SqlEverywhereNotInstalled
TemplatePagerField_OnPagerCommand
TemplatePagerField_PagerTemplate
TemplatePagerField_UnhandledEvent
Timer_IntervalMustBeGreaterThanZero
Timer_TimerEnable
Timer_TimerInterval
Timer_TimerTick
UnhandledExceptionEventLogMessage
UpdatePanel_CannotModifyControlCollection
UpdatePanel_CannotSetContentTemplate
UpdatePanel_ChildrenAsTriggers
UpdatePanel_ChildrenTriggersAndUpdateAlways
UpdatePanel_RenderMode
UpdatePanel_SetPartialRenderingModeCalledOnce
UpdatePanel_Triggers
UpdatePanel_UpdateConditional
UpdatePanel_UpdateMode
UpdatePanel_UpdateTooLate
UpdatePanelControlTrigger_ControlID
UpdatePanelControlTrigger_ControlNotFound
UpdatePanelControlTrigger_NoControlID
UpdateProgress_AssociatedUpdatePanelID
UpdateProgress_DisplayAfter
UpdateProgress_DisplayAfterInvalid
UpdateProgress_DynamicLayout
UpdateProgress_NoUpdatePanel
UpdateProgress_ProgressTemplate
UpdateProgress_TemplateRequired
UserIsNotAuthenticated
WebResourceUtil_AssemblyDoesNotContainDebugWebResource
WebResourceUtil_AssemblyDoesNotContainEmbeddedResource
WebResourceUtil_AssemblyDoesNotContainReleaseWebResource
WebService_Error
WebService_InvalidGenerateScriptType
WebService_InvalidInlineVirtualPath
WebService_InvalidVerbRequest
WebService_InvalidWebServiceCall
WebService_InvalidXmlReturnType
WebService_MissingArg
WebService_NoScriptServiceAttribute
WebService_NoWebServiceData
WebService_NoWebServiceDataInlineScript
WebService_RedirectError
WebService_UnknownWebMethod
ReceiveImportContextInformation
WebRefDirectoryName
SvcMapExtension
DataSvcMapExtension
TOOL_CONFIG_ITEM_NAME
FRAMEWORK_VERSION_35
AssemblyBuilder
GenerateCode
GenerateCodeFromDataServiceMapFile
System.CodeDom
CodeCompileUnit
GenerateCodeFromServiceMapFile
HandleProxyGenerationErrors
CollectErrorMessages
ConvertToBuildProviderErrorMessage
VerifyGeneratedCodeAndHandleErrors
IsAnyTypeGenerated
System.Web.Hosting
VirtualDirectory
GetVirtualDirectory
GetGeneratedNamespace
CalculateGeneratedNamespace
GetAppDomainAppVirtualPath
GetWebRefDirectoryVirtualPath
MakeValidTypeNameFromString
Configuration
GetToolConfig
LoadType
LoadAssembly
LoadAllAssemblies
_referencedAssemblies
get_ReferencedAssemblies
System.Web.Compilation.WCFModel.IContractGeneratorReferenceTypeLoader.LoadType
System.Web.Compilation.WCFModel.IContractGeneratorReferenceTypeLoader.LoadAssembly
System.Web.Compilation.WCFModel.IContractGeneratorReferenceTypeLoader.LoadAllAssemblies
ReferencedAssemblies
GetService
serializer
XmlSchemaSet
m_ServiceMapSchemaSet
LoadMapFile
LoadMetadataFile
LoadExtensionFile
TextReader
GetMapFileReader
ReadExtensionFile
ReadMetadataFile
ValidateSvcMapFile
get_ServiceMapSchemaSet
ServiceMapSchemaSet
WsdlImporter
WsdlContractConversionContext
System.ServiceModel.Description.IWsdlImportExtension.ImportContract
ImportContract
WsdlEndpointConversionContext
System.ServiceModel.Description.IWsdlImportExtension.ImportEndpoint
ImportEndpoint
ServiceDescriptionCollection
System.ServiceModel.Description.IWsdlImportExtension.BeforeImport
BeforeImport
IsSoapAsmxPort
IsAsmxUri
m_GenerateAsynchronousMethods
m_EnableDataBinding
m_ExcludedTypeList
m_ImportXmlTypes
m_GenerateInternalTypes
m_GenerateMessageContracts
m_NamespaceMappingList
m_CollectionMappingList
m_GenerateSerializableTypes
m_Serializer
m_ReferenceAllAssemblies
m_ReferencedAssemblyList
m_ReferencedDataContractTypeList
m_ServiceContractMappingList
m_UseSerializerForFaults
m_UseSerializerForFaultsSpecified
m_Wrapped
m_WrappedSpecified
get_GenerateAsynchronousMethods
set_GenerateAsynchronousMethods
get_EnableDataBinding
set_EnableDataBinding
get_ExcludedTypeList
get_ImportXmlTypes
set_ImportXmlTypes
get_GenerateInternalTypes
set_GenerateInternalTypes
get_GenerateMessageContracts
set_GenerateMessageContracts
get_NamespaceMappingList
get_CollectionMappingList
get_GenerateSerializableTypes
set_GenerateSerializableTypes
set_Serializer
get_UseSerializerForFaults
set_UseSerializerForFaults
get_UseSerializerForFaultsSpecified
get_Wrapped
set_Wrapped
get_WrappedSpecified
get_ReferenceAllAssemblies
set_ReferenceAllAssemblies
get_ReferencedAssemblyList
get_ReferencedDataContractTypeList
get_ServiceContractMappingList
GenerateAsynchronousMethods
EnableDataBinding
ExcludedTypeList
ImportXmlTypes
GenerateInternalTypes
GenerateMessageContracts
NamespaceMappingList
CollectionMappingList
GenerateSerializableTypes
UseSerializerForFaults
UseSerializerForFaultsSpecified
Wrapped
WrappedSpecified
ReferenceAllAssemblies
ReferencedAssemblyList
ReferencedDataContractTypeList
ServiceContractMappingList
DataContractSerializer
m_Name
m_TargetNamespace
m_TypeName
get_TargetNamespace
set_TargetNamespace
TargetNamespace
m_FileName
m_IsExistingFile
m_ErrorInLoading
get_ErrorInLoading
set_ErrorInLoading
get_FileName
set_FileName
get_IsExistingFile
set_IsExistingFile
IsLocalFileName
ErrorInLoading
IsExistingFile
m_ContentBuffer
get_ContentBuffer
set_ContentBuffer
get_IsBufferValid
CleanUpContent
ContentBuffer
IsBufferValid
m_ContractType
m_ConfigurationName
get_ContractType
set_ContractType
get_ConfigurationName
set_ConfigurationName
ContractType
ConfigurationName
DEFAULT_FILE_NAME
m_MetadataType
m_SourceUrl
m_SourceId
m_Ignore
m_IsMergeResult
SOURCE_ID_NOT_SPECIFIED
m_CachedMetadata
m_BinaryContent
get_BinaryContent
get_CachedMetadata
get_Content
get_FileType
set_FileType
get_Ignore
set_Ignore
get_IgnoreSpecified
set_IgnoreSpecified
get_IsMergeResult
set_IsMergeResult
get_IsMergeResultSpecified
set_IsMergeResultSpecified
System.Web.Services.Discovery
DiscoveryDocument
get_MetadataDiscoveryDocument
get_MetadataFormatError
ServiceDescription
get_MetadataServiceDescription
get_MetadataXmlSchema
XmlDocument
get_MetadataXmlDocument
get_SourceId
set_SourceId
get_SourceIdSpecified
set_SourceIdSpecified
get_SourceUrl
set_SourceUrl
DetermineFileType
GetDefaultExtension
GetDefaultFileName
LoadContent
LoadContentFromTextReader
LoadMetadataContent
XmlTextReader
MetadataSection
CreateMetadataSection
GetMetadataSourceUrl
BinaryContent
CachedMetadata
Content
FileType
Ignore
IgnoreSpecified
IsMergeResult
IsMergeResultSpecified
MetadataDiscoveryDocument
MetadataFormatError
MetadataServiceDescription
MetadataXmlSchema
MetadataXmlDocument
SourceId
SourceIdSpecified
SourceUrl
Disco
Schema
Policy
m_MetadataDiscoveryDocument
m_MetadataServiceDescription
m_MetadataXmlSchema
m_MetadataXmlDocument
m_MetadataFormatError
m_Address
m_Protocol
get_Address
set_Address
get_Protocol
set_Protocol
Address
Protocol
m_ClrNamespace
get_ClrNamespace
set_ClrNamespace
ClrNamespace
m_IsWarning
m_Message
m_MetadataFile
m_LineNumber
m_LinePosition
m_ErrorGeneratorState
MetadataConversionError
XmlException
XmlSchemaException
get_ErrorGeneratorState
get_IsWarning
get_LineNumber
get_LinePosition
get_Message
get_MetadataFile
ErrorGeneratorState
IsWarning
LineNumber
LinePosition
LoadMetadata
MergeMetadata
m_AssemblyName
get_AssemblyName
set_AssemblyName
m_Category
get_Category
set_Category
Category
Dictionary
xmlSerializationAttributes
schemaTopLevelItemTypes
ignorablePropertyTypes
emptyXmlAttributeCollection
emptyCollection
MergeSchemas
XmlSchemaObject
FindDuplicatedItems
AreSchemaObjectsEquivalent
PropertyInfo
CompareSchemaPropertyValues
CompareSchemaValues
CompareSchemaCollections
CompareXmlAttributes
CompareXmlAttributeCollections
GetSortedAttributeArray
CompareXmlElements
XmlText
CompareXmlTexts
CombinePath
GetSchemaItemName
GetSchemaPropertyNameInXml
CombineTwoNames
GetSchemaPropertyNameInXmlHelper
IsPersistedProperty
ShouldIgnoreSchemaProperty
Compare
NamespaceUri
m_MetadataSourceList
m_MetadataList
m_ExtensionFileList
m_ClientOptions
loadErrors
get_ClientOptions
set_ClientOptions
get_Extensions
get_MetadataList
get_MetadataSourceList
get_LoadErrors
SetLoadErrors
Extensions
MetadataList
MetadataSourceList
LoadErrors
mapFilePath
GetMetadataFileFullPath
VB_LANGUAGE_NAME
System.ServiceModel.Channels
Binding
bindingCollection
contractCollection
ServiceEndpoint
serviceEndpointList
System.ServiceModel.Configuration
ChannelEndpointElement
serviceEndpointToChannelEndpointElementMap
proxyGeneratedContractTypes
targetCompileUnit
targetConfiguration
proxyGenerationErrors
importErrors
CodeAttributeDeclaration
outAttribute
unsupportedTypesInFramework30
get_BindingCollection
get_ProxyGeneratedContractTypes
get_ProxyGenerationErrors
get_ImportErrors
get_ContractCollection
get_EndpointCollection
get_EndpointMap
get_TargetConfiguration
get_TargetCompileUnit
get_OutAttribute
System.CodeDom.Compiler
CodeDomProvider
GenerateCodeAndConfiguration
ServiceContractGenerator
CreateContractGenerator
GenerateProxy
XmlSerializerImportOptions
CreateXmlSerializerImportOptions
XsdDataContractImporter
CreateDataContractImporter
LoadSharedDataContractTypes
GetUnsupportedTypes
PatchConfigurationName
ReplaceNamespace
MakePeriodTerminatedNamespacePrefix
IsTypeShareable
LoadReferenedAssemblies
LoadSharedCollectionTypes
CreateWsdlImporter
IPolicyImportExtension
ProvideImportExtensionsWithContextInformation
RemoveExtension
CreateDictionaryOfCopiedExtensionFiles
CollectMetadataDocuments
ConvertMetadataErrorToProxyGenerationError
RemoveDuplicatedSchemaItems
CheckDuplicatedWsdlItems
ImportWCFModel
PatchConfigurationNameInServiceContractAttribute
PatchOutParametersInVB
CodeTypeDeclaration
PatchTypeDeclaration
CodeAttributeDeclarationCollection
IsDefinedInCodeAttributeCollection
IsVBCodeDomProvider
ContainsHttpBindings
BindingCollection
ProxyGeneratedContractTypes
ProxyGenerationErrors
ImportErrors
ContractCollection
EndpointCollection
EndpointMap
TargetConfiguration
TargetCompileUnit
OutAttribute
PortType
portTypes
messages
CheckServiceDescriptions
MatchPortTypes
MatchOperations
OperationMessage
MatchOperationMessages
MatchMessages
MatchMessageParts
MatchXmlQualifiedNames
ReportUniqueOperation
ReportOperationDefinedDifferently
ReportUniqueMessagePart
ReportMessageDefinedDifferently
MatchCollections
Prefix
IsDataSet
Metadata
EndpointReference
NamespaceUri15
PolicyURIs
PolicyReference
ExactlyOne
Write16_ReferenceGroup
Write15_SvcMapFile
Write11_ExtensionFile
Write13_MetadataFile
Write12_MetadataType
Write14_MetadataSource
Write9_ClientOptions
Write8_ContractMapping
Write2_ReferencedType
Write7_ReferencedAssembly
Write6_ProxySerializerType
Write5_ReferencedCollectionType
Write4_CollectionCategory
Write3_NamespaceMapping
InitCallbacks
Read16_ReferenceGroup
Read15_SvcMapFile
Read11_ExtensionFile
Read13_MetadataFile
Read12_MetadataType
Read14_MetadataSource
Read9_ClientOptions
Read8_ContractMapping
Read2_ReferencedType
Read7_ReferencedAssembly
Read6_ProxySerializerType
Read5_ReferencedCollectionType
Read4_CollectionCategory
Read3_NamespaceMapping
id4_ID
id11_Extensions
id31_CollectionMappings
id5_Item
id39_ReferencedAssembly
id50_Category
id42_ServiceContractMappings
id16_Ignore
id48_AssemblyName
id10_MetadataFile
id2_Item
id44_ContractMapping
id38_ReferencedAssemblies
id33_GenerateSerializableTypes
id25_ExcludedType
id27_GenerateInternalTypes
id45_TargetNamespace
id46_TypeName
id19_SourceUrl
id51_ClrNamespace
id43_ServiceContractMapping
id40_ReferencedDataContractTypes
id21_Protocol
id14_Name
id3_SvcMapFile
id41_ReferencedDataContractType
id18_SourceId
id1_ReferenceGroup
id36_Wrapped
id28_GenerateMessageContracts
id13_FileName
id6_ClientOptions
id47_ReferencedType
id30_NamespaceMapping
id32_CollectionMapping
id23_EnableDataBinding
id7_MetadataSources
id9_Metadata
id15_MetadataType
id8_MetadataSource
id49_ReferencedCollectionType
id12_ExtensionFile
id17_IsMergeResult
id26_ImportXmlTypes
id24_ExcludedTypes
id29_NamespaceMappings
id34_Serializer
id22_GenerateAsynchronousMethods
id20_Address
id37_ReferenceAllAssemblies
id35_UseSerializerForFaults
InitIDs
CreateReader
CreateWriter
CanDeserialize
get_Reader
get_Writer
readMethods
get_ReadMethods
writeMethods
get_WriteMethods
typedSerializers
get_TypedSerializers
CanSerialize
GetSerializer
Reader
Writer
ReadMethods
WriteMethods
TypedSerializers
Write8_ReferenceGroup
Write7_DataSvcMapFile
Write3_ExtensionFile
Write5_MetadataFile
Write4_MetadataType
Write6_MetadataSource
Read8_ReferenceGroup
Read7_DataSvcMapFile
Read3_ExtensionFile
Read5_MetadataFile
Read4_MetadataType
Read6_MetadataSource
id3_DataSvcMapFile
id9_MetadataFile
id10_Extensions
id11_ExtensionFile
id8_Metadata
id6_MetadataSources
id17_SourceId
id7_MetadataSource
id13_Name
id14_MetadataType
id19_Address
id18_SourceUrl
id16_IsMergeResult
id15_Ignore
id20_Protocol
id12_FileName
get_ReferenceGroup_AppendLinePosition
get_ReferenceGroup_DataContractExcludedAndIncluded
get_ReferenceGroup_DuplicatedSchemaItems
get_ReferenceGroup_DuplicatedSchemaItemsIgnored
get_ReferenceGroup_EmptyAddress
get_ReferenceGroup_EmptyProtocol
get_ReferenceGroup_FailedToGenerateCode
get_ReferenceGroup_FailedToLoadAssembly
get_ReferenceGroup_FieldDefinedDifferentlyInDuplicatedMessage
get_ReferenceGroup_FieldDefinedInOneOfDuplicatedMessage
get_ReferenceGroup_InvalidFileName
get_ReferenceGroup_InvalidSourceId
get_ReferenceGroup_OperationDefinedDifferently
get_ReferenceGroup_OperationDefinedInOneOfDuplicatedServiceContract
get_ReferenceGroup_ServiceContractMappingMissMatch
get_ReferenceGroup_SharedTypeMustBePublic
get_ReferenceGroup_TwoExternalFilesWithSameName
ReferenceGroup_AppendLinePosition
ReferenceGroup_DataContractExcludedAndIncluded
ReferenceGroup_DuplicatedSchemaItems
ReferenceGroup_DuplicatedSchemaItemsIgnored
ReferenceGroup_EmptyAddress
ReferenceGroup_EmptyProtocol
ReferenceGroup_FailedToGenerateCode
ReferenceGroup_FailedToLoadAssembly
ReferenceGroup_FieldDefinedDifferentlyInDuplicatedMessage
ReferenceGroup_FieldDefinedInOneOfDuplicatedMessage
ReferenceGroup_InvalidFileName
ReferenceGroup_InvalidSourceId
ReferenceGroup_OperationDefinedDifferently
ReferenceGroup_OperationDefinedInOneOfDuplicatedServiceContract
ReferenceGroup_ServiceContractMappingMissMatch
ReferenceGroup_SharedTypeMustBePublic
ReferenceGroup_TwoExternalFilesWithSameName
DefaultAlias
Copyright
InformationalVersion
DailyBuildNumber
EcmaPublicKey
EcmaPublicKeyToken
EcmaPublicKeyFull
Mscorlib
SystemData
SystemDataOracleClient
SystemRuntimeRemoting
SystemWindowsForms
SystemXml
MicrosoftPublicKey
MicrosoftPublicKeyToken
MicrosoftPublicKeyFull
SharedLibPublicKey
SharedLibPublicKeyToken
SharedLibPublicKeyFull
SystemComponentModelDataAnnotations
SystemConfiguration
SystemConfigurationInstall
SystemDeployment
SystemDesign
SystemDirectoryServices
SystemDrawingDesign
SystemDrawing
SystemEnterpriseServices
SystemManagement
SystemMessaging
SystemRuntimeSerializationFormattersSoap
SystemSecurity
SystemServiceProcess
SystemWeb
SystemWebAbstractions
SystemWebDynamicData
SystemWebDynamicDataDesign
SystemWebEntityDesign
SystemWebExtensionsDesign
SystemWebMobile
SystemWebRegularExpressions
SystemWebRouting
SystemWebServices
MicrosoftVisualStudio
MicrosoftVisualStudioWindowsForms
VJSharpCodeProvider
ASPBrowserCapsPublicKey
ASPBrowserCapsFactory
MicrosoftVSDesigner
MicrosoftVisualStudioWeb
MicrosoftWebDesign
MicrosoftVSDesignerMobile
MicrosoftJScript
writer
httpResponse
value
cacheKey
cacheKeys
dependencies
ParamArrayAttribute
filename
filenames
cookie
param
virtualPath
buffer
endResponse
offset
length
count
readIntoMemory
fileHandle
callback
context
enforceSSL
dictionary
serviceType
baseAddresses
username
password
customCredential
isPersistent
setCookie
knownTypeAttributeTarget
authenticatedUserOnly
providerName
provider
authenticationType
isAuthenticated
authenticationCookies
disposing
securePass
identity
reader
arrToWrite
useIsolatedStorage
useIsolatedStore
cookieName
cookieValue
rememberMe
serviceUri
useWFCService
cookies
connectionString
connectionStringProvider
config
rememberMeInt
promptCount
tryToUseLastLoggedInUser
email
passwordQuestion
passwordAnswer
isApproved
providerUserKey
status
System.Runtime.InteropServices
newPasswordQuestion
newPasswordAnswer
answer
oldPassword
newPassword
userIsOnline
deleteAllRelatedData
pageIndex
pageSize
totalRecords
usernameToMatch
emailToMatch
roleName
throwOnPopulatedRole
usernames
roleNames
retColl
propertyCollection
propertyValueCollection
raiseEvent
property
bubbleExceptionFromSvc
cacheIsMoreFresh
storedAs
propVal
updateSaveTime
tagName
tagValue
serverUri
paramNames
paramValues
returnType
response
cookieHeaders
cookieHeader
dwSize
failedSettingsList
sqlProvider
paramName
paramValue
typeName
openConn
extension
message
eventSource
exception
container
pageNumber
savedState
source
sender
maximumRows
databind
pagerField
totalRowCount
originalArgs
newField
fieldIndex
dataPager
state
field
pager
commandSource
predicate
selector
ordering
keySelector
elementSelector
resultType
expression
itType
parameters
typeArgs
other
fields
expr1
expr2
errorPos
lambda
instance
generic
elementType
methodName
signatures
opName
right
memberName
staticAccess
method
types
methods
exact
target
errorMessage
format
table
dataContext
entity
dynamicQueryable
linqToSql
oldValues
viewName
operation
originalObject
enumerableA
enumerableB
newObject
arguments
whereParameters
orderByParameters
groupByParameters
orderGroupsByParameters
selectParameters
result
innerException
innerExceptions
owner
dataObjectType
inputParameters
destinationType
contextType
oldDataObject
whereValues
orderByOrderedValues
groupByValues
orderGroupsByValues
selectNewValues
selectEventArgs
selectResult
storeOriginalValues
tableType
parameterValues
newDataObject
member
referenceValues
destination
reference
destinationCopy
originalValue
dataObject
query
selecting
control
addLocation
dataSource
dataBinding
itemType
dataItemIndex
displayIndex
insertPosition
keyArray
itemIndex
itemValues
includePrimaryKey
containerID
commandArgument
outerContainer
isItem
placeholderIndex
affectedRows
causesValidation
validationGroup
sortExpression
sortDirection
cancelMode
newEditIndex
listAccessors
newSelectedIndex
newValues
commandName
buttonText
imageUrl
enabled
converter
element
cultureInfo
assembly
resourceName
culture
notifyScriptLoaded
assemblyResourceLists
title
eventArgs
queryString
scriptResourceName
assemblyName
fileReader
scriptResourceHandler
object
encoding
input
depthLimit
depth
resolver
converters
serializationFormat
output
datetime
objectsInUse
enumerable
builder
addQuotes
oldList
newList
throwOnError
propertyValue
convertedObject
convertedList
webServiceData
genClass
methodData
argsDict
docComments
enumTypes
ensureNS
debug
rawParams
statusCode
stack
requestType
pathTranslated
handler
request
pathInfo
originalHandler
originalFactory
extraData
fragment
contractType
debugMode
appRelativePath
failIfNoData
pageMethods
inlineScript
contract
typeData
attributes
force
isWCF
ensure
localName
rootSequence
simpleType
simpleTypeRestriction
restriction
xmlElement
annotation
defaultTypeName
annotationQualifiedName
typeNamespace
typeQualifiedName
methodInfo
webMethodAttribute
scriptMethodAttribute
parameterData
useHttpGet
paramType
userName
createPersistentCookie
serviceUrl
existingUrl
urlBase
searchNamingContainers
scriptManager
proxies
options
script
addScriptTags
clientScriptManager
relativeUrl
releasePath
pathOrName
compositeScript
controlID
hiddenFieldName
customErrorsSection
targetControl
renderMethod
clientID
extenderControl
proxy
scriptControl
updatePanel
httpCode
content
includeQuotes
includeChildrenAsTriggersPrefix
postDataKey
postCollection
dataItem
isJsonSerialized
containerControl
pageControl
fEncode
loadedProperties
existingProperties
newProperties
profile
fullPropertyName
topLevelSettings
profileGroups
ensureExists
arrayName
arrayValue
disposeScript
parentUpdatePanel
controlId
encode
hiddenFieldInitialValue
scriptType
category
descriptionResourceName
displayNameResourceName
loadRoles
elementID
componentID
scriptReferences
scriptDescriptors
appLevelCompilationSection
deploymentSection
frameworkScript
scripts
scriptIndex
serverState
eventArgument
attributeName
attributeValue
uniqueScripts
hiddenFieldValue
serialized
clientUrlResolver
containingControl
releaseName
isDebuggingEnabled
scriptPath
scriptManagerControl
entry
start
updatingUpdatePanels
child
pageAlwaysActive
updatePanels
scriptRegistrations
activeRegistration
scriptName
rawResourceName
contentType
isDebug
resourceManager
neutralSet
first
resourceInfo
releaseResourceInfo
releaseResourceManager
releaseNeutralSet
encodeSpaces
targetControlType
extenderControlType
asyncPostBackMode
releaseResourceName
debugResourceName
acceptEncodingHeader
expectedEncoding
tokenBytes
capacity
arrayIndex
second
items
serviceReferenceExtensionFileContents
serviceProvider
assemblyBuilder
errors
collectedMessages
generationError
referenceDisplayName
mapFile
generatedCode
generatorErrors
compileUnit
webReferencesRootVirtualPath
loadedAssemblies
loadingErrors
fileName
metadataFile
extensionFile
svcMapFile
importer
wsdlDocuments
xmlSchemas
policy
addressType
location
targetNamespace
portName
configurationName
byteContent
contentReader
fileType
xmlReader
discoveryDocument
serviceDescription
schema
document
metadataFormatError
protocol
address
sourceId
generatorState
errorException
isWarning
schemaList
duplicatedSchemas
itemTypeName
knownItemTable
duplicatedItems
originalItem
differentLocation
propertyInfo
newValue
originalCollection
newCollection
differentItem1
differentItem2
attribute1
attribute2
attributeCollection1
attributeCollection2
differentAttribute1
differentAttribute2
attributeCollection
element1
element2
text1
text2
path1
path2
value1
value2
name1
name2
propertyAttributes
toolConfiguration
codeDomProvider
proxyNamespace
configurationNamespace
serviceProviderForImportExtensions
typeLoader
targetFrameworkVersion
typedDataSetSchemaImporterExtension
proxyOptions
wsdlImporter
contractGenerator
configNamespace
generatedContracts
endpoints
originalNamespace
replacementNamespace
wsdlImportExtensions
policyImportExtensions
extensionType
metadataList
metadataItem
metadataCollection
generationErrors
proxyCodeUnit
codeCompileUnit
codeClass
metadata
wsdlFile
wsdlFiles
partX
partY
portType1
portType2
message1
message2
compareItems
isNullable
needType
checkType
objectToSerialize
ComVisibleAttribute
CLSCompliantAttribute
AllowPartiallyTrustedCallersAttribute
AssemblyTitleAttribute
AssemblyDescriptionAttribute
AssemblyDefaultAliasAttribute
AssemblyCompanyAttribute
AssemblyProductAttribute
AssemblyCopyrightAttribute
AssemblyVersionAttribute
AssemblyFileVersionAttribute
AssemblyInformationalVersionAttribute
SatelliteContractVersionAttribute
NeutralResourcesLanguageAttribute
AssemblyDelaySignAttribute
AssemblyKeyFileAttribute
DependencyAttribute
LoadHint
System.Security.Permissions
SecurityPermissionAttribute
SecurityAction
InternalsVisibleToAttribute
WebResourceAttribute
TagPrefixAttribute
System.Diagnostics
DebuggableAttribute
DebuggingModes
CompilationRelaxationsAttribute
RuntimeCompatibilityAttribute
ExtensionAttribute
System.Web.Extensions
NotImplementedException
HttpCachePolicy
HttpCachePolicyWrapper
get_HasValue
HttpException
get_CurrentCulture
String
IFormatProvider
Format
InvalidOperationException
get_IsSecureConnection
StringComparer
get_OrdinalIgnoreCase
IEqualityComparer`1
Thread
get_CurrentPrincipal
Convert
ToBase64String
get_PropertyType
get_AssemblyQualifiedName
SettingsAttributeDictionary
Boolean
SettingsSerializeAs
get_Length
AspNetHostingPermissionAttribute
RuntimeTypeHandle
GetTypeFromHandle
AspNetCompatibilityRequirementsAttribute
ServiceContractAttribute
ServiceBehaviorAttribute
Monitor
Enter
Delegate
Combine
OperationContractAttribute
FormsAuthentication
SignOut
ArgumentNullException
Membership
SetAuthCookie
WebBaseEvent
Raise
DataContractAttribute
DataMemberAttribute
ServiceKnownTypeAttribute
get_PropertyValue
set_IsDirty
Enumerator
get_IsAnonymous
SettingsBase
System.Configuration.Provider
ProviderException
SettingsPropertyNotFoundException
SettingsPropertyWrongTypeException
get_PropertyValues
IsNullOrEmpty
get_AnonymousID
Create
ProviderBase
RoleProviderCollection
get_Providers
GetType
get_FullName
ObjectDisposedException
SuppressFinalize
ToCharArray
AppendChar
MakeReadOnly
IntPtr
Marshal
SecureStringToBSTR
PtrToStringBSTR
op_Inequality
FreeBSTR
System.Windows.Forms
Application
get_UserAppDataPath
Exists
FileStream
get_UtcNow
AddYears
ReadStartElement
ReadContentAsString
get_InvariantCulture
Int64
NumberStyles
FromFileTimeUtc
ReadEndElement
StringCollection
IsStartElement
WriteValue
WriteStartElement
WriteEndElement
System.IO.IsolatedStorage
IsolatedStorageFile
GetUserStoreForAssembly
GetDirectoryNames
CreateDirectory
IsolatedStorageFileStream
FileMode
ToFileTimeUtc
Concat
FileAccess
StringComparison
StartsWith
NewGuid
EndsWith
set_CurrentPrincipal
ConfigurationManager
ConnectionStringSettingsCollection
get_ConnectionStrings
ConnectionStringSettings
get_ConnectionString
NameObjectCollectionBase
KeysCollection
ArgumentException
WindowsIdentity
WindowsPrincipal
op_Equality
DbTransaction
BeginTransaction
CreateCommand
set_Transaction
set_CommandText
ExecuteScalar
Rollback
Commit
ExecuteNonQuery
get_Now
Activator
CreateInstance
System.Security.Cryptography
RNGCryptoServiceProvider
RandomNumberGenerator
GetBytes
get_Unicode
HashAlgorithm
ComputeHash
FromBase64String
NotSupportedException
Int32
op_LessThan
AddMinutes
DbDataReader
ExecuteReader
GetString
PermissionSetAttribute
get_AppSettings
BindingFlags
Binder
InvokeMember
get_Property
IsAssignableFrom
set_PropertyValue
set_Deserialized
WebException
get_IsDirty
IsDBNull
set_SerializedValue
get_SerializedValue
MembershipProviderCollection
ProviderCollection
EventInfo
GetEvent
GetAddMethod
GetParameters
CreateDelegate
Reload
WebRequest
HttpWebRequest
set_UseDefaultCredentials
set_AllowAutoRedirect
set_Method
set_CookieContainer
set_ContentLength
GetRequestStream
WebResponse
GetResponse
TryParse
HttpStatusCode
CookieCollection
Cookie
WebHeaderCollection
GetKey
Append
get_UTF8
GetResponseStream
StreamReader
get_CanSeek
Substring
get_Host
Split
StringSplitOptions
get_Chars
DllImportAttribute
wininet.dll
System.Data.SqlClient
SqlConnection
TypeLoadException
DbParameterCollection
get_Parameters
SqlParameter
get_Database
Component
Replace
DbParameter
IsLetterOrDigit
get_FilePath
get_Profile
ParseChildrenAttribute
PersistChildrenAttribute
ThemeableAttribute
SupportsEventValidationAttribute
DesignerAttribute
ToolboxBitmapAttribute
ToolboxItemFilterAttribute
ToolboxItemFilterType
EnsureChildControls
get_Page
ArgumentOutOfRangeException
get_QueryString
HtmlTextWriterAttribute
AddAttribute
OnDataBinding
DataBindChildren
DataBoundControlHelper
FindControl
get_NamingContainer
get_AllKeys
HttpUtility
UrlEncode
RegisterRequiresControlState
set_ChildControlsCreated
RenderEndTag
BrowsableAttribute
DesignerSerializationVisibilityAttribute
DesignerSerializationVisibility
EditorAttribute
MergablePropertyAttribute
PersistenceModeAttribute
PersistenceMode
IDReferencePropertyAttribute
WebCategoryAttribute
DefaultMemberAttribute
RaiseBubbleEvent
get_ElementType
IQueryProvider
Queryable
get_Expression
UnaryExpression
Quote
MethodCallExpression
CreateQuery
get_Body
Parameter
ConstantExpression
Constant
Execute
GetProperties
GetValue
MakeGenericType
Func`1
Func`3
Func`4
Func`5
Enumerable
ToArray
AppDomain
get_CurrentDomain
AssemblyBuilderAccess
DefineDynamicAssembly
DefineDynamicModule
AcquireReaderLock
ReleaseReaderLock
LockCookie
UpgradeToWriterLock
TypeAttributes
DefineType
CreateType
DowngradeFromWriterLock
FieldBuilder
FieldAttributes
DefineField
PropertyBuilder
PropertyAttributes
DefineProperty
EmptyTypes
MethodBuilder
MethodAttributes
DefineMethod
ILGenerator
GetILGenerator
OpCodes
OpCode
Ldarg_0
Ldfld
Ldarg_1
Stfld
SetGetMethod
SetSetMethod
LocalBuilder
DeclareLocal
Label
DefineLabel
Isinst
Stloc
Ldloc
Brtrue_S
Ldc_I4_0
MarkLabel
get_FieldType
EqualityComparer`1
GetMethod
EmitCall
Callvirt
Ldc_I4_1
BinaryExpression
OrElse
AndAlso
get_IsValueType
Multiply
Divide
Modulo
Negate
UInt64
UInt32
Single
Double
ConditionalExpression
Condition
MemberExpression
get_Member
MemberBinding
GetProperty
MemberAssignment
NewExpression
MemberInitExpression
MemberInit
InvocationExpression
ConstructorInfo
GetConstructors
ConvertChecked
get_IsInterface
GetGenericArguments
get_DeclaringType
Field
Property
get_IsGenericType
GetGenericTypeDefinition
GetInterfaces
get_BaseType
get_IsArray
GetArrayRank
ArrayIndex
get_IsEnum
TypeCode
GetTypeCode
MemberFilter
FilterNameIgnoreCase
MemberTypes
FindMembers
<FindIndexer>b__1
CS$<>9__CachedAnonymousMethodDelegate3
CompilerGeneratedAttribute
<FindIndexer>b__2
CS$<>9__CachedAnonymousMethodDelegate4
GetGetMethod
GetDefaultMembers
OfType
<SelfAndBaseClasses>d__5
System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator
<>2__current
System.Collections.Generic.IEnumerator<System.Type>.get_Current
System.Collections.IEnumerator.Reset
System.IDisposable.Dispose
<>1__state
<>l__initialThreadId
System.Collections.IEnumerator.get_Current
<>3__type
System.Collections.Generic.IEnumerator<System.Type>.Current
System.Collections.IEnumerator.Current
DebuggerHiddenAttribute
get_CurrentThread
get_ManagedThreadId
<>c__DisplayClassf
<>c__DisplayClass11
applicable
<>4__this
<FindBestMethod>b__a
<FindBestMethod>b__b
CS$<>8__locals10
<FindBestMethod>b__c
<FindBestMethod>b__9
CS$<>9__CachedAnonymousMethodDelegated
get_IsOut
SByte
Int16
UInt16
NotEqual
GreaterThanOrEqual
LessThanOrEqual
Subtract
IsWhiteSpace
IsDigit
UnicodeCategory
GetUnicodeCategory
StructLayoutAttribute
LayoutKind
DefaultEventAttribute
DefaultPropertyAttribute
UpdateValues
SerializableAttribute
AddValue
OnDataSourceViewChanged
BuildManager
add_ParametersChanged
AddHandler
RemoveHandler
TypeDescriptor
IDictionaryEnumerator
DictionaryEntry
SetValue
MemberDescriptor
ValueCollection
GetValues
IsInstanceOfType
get_IsByRef
GetElementType
ConvertFromString
FormatException
set_ObjectTrackingEnabled
HttpRuntime
FastCreatePublicInstance
get_Cancel
get_RetrieveTotalRowCount
MetaModel
get_Mapping
MetaTable
GetTable
MetaType
get_RowType
get_DataMembers
get_IsSerializable
get_IsPrimaryKey
get_IsVersion
UpdateCheck
get_UpdateCheck
MetaAccessor
get_MemberAccessor
GetBoxedValue
MakeGenericMethod
IsMatch
Table`1
RegexOptions
InsertOnSubmit
DeleteOnSubmit
ControlValuePropertyAttribute
Clone
CompareStringArrays
HtmlTable
BaseDataBoundControl
get_RequiresDataBinding
EnsureDataBound
ClearChildViewState
GetData
get_SelectArguments
DataSourceViewSelectCallback
set_Capacity
set_RetrieveTotalRowCount
DataBinder
InstantiateIn
ExtractValuesFromBindableControls
IBindableTemplate
ExtractValues
ToInt32
get_Parent
get_IsBoundUsingDataSourceID
set_RequiresDataBinding
DataSourceViewOperationCallback
get_CommandName
get_CommandArgument
get_IsViewStateEnabled
OrderedDictionaryStateHelper
IButtonControl
get_CausesValidation
get_ValidationGroup
get_DataSourceID
get_Initialized
EditorBrowsableAttribute
EditorBrowsableState
TemplateContainerAttribute
BindingDirection
CssClassPropertyAttribute
TypeConverterAttribute
ToolboxItemAttribute
LiteralControl
set_Text
LinkButton
Button
ImageButton
Image
set_ImageUrl
HtmlDecode
set_AlternateText
set_CausesValidation
set_CommandName
set_CommandArgument
set_NavigateUrl
UrlPropertyAttribute
LocalizableAttribute
WhiteSpaceTrimStringConverter
StringValidator
ConfigurationPropertyOptions
ConfigurationPropertyAttribute
StringValidatorAttribute
ConfigurationCollectionAttribute
BaseGet
BaseRemoveAt
BaseAdd
BaseRemove
BaseClear
WebConfigurationManager
GetWebApplicationSection
IntegerValidator
GetSection
StringArrayConverter
ConfigurationSectionGroupCollection
get_SectionGroups
ConfigurationSectionCollection
get_Sections
get_NumberFormat
get_DateTimeFormat
Synchronized
GetCultureInfo
get_SkipAuthorization
set_SkipAuthorization
ClearError
HttpCacheability
SetCacheability
add_PreSendRequestHeaders
add_PostAcquireRequestState
add_AuthenticateRequest
add_EndRequest
get_Handler
get_PathInfo
CompleteRequest
HttpRequestWrapper
AddHeader
VirtualPathUtility
ToAbsolute
DecryptString
CryptographicException
GetResourceSet
set_Version
set_CultureInfo
SetPublicKeyToken
FileNotFoundException
FileLoadException
BadImageFormatException
Module
get_ManifestModule
get_ModuleVersionId
ToByteArray
GetCustomAttributes
get_CultureName
SecurityCriticalAttribute
SecurityTreatAsSafeAttribute
ReflectionPermissionAttribute
AssemblyResourceLoader
GetWebResourceUrlInternal
HttpBrowserCapabilities
get_Browser
HttpCapabilitiesBase
IsBrowser
get_MajorVersion
HtmlEncode
HttpCacheVaryByParams
get_VaryByParams
SetOmitVaryStar
FromDays
op_Addition
SetExpires
SetValidUntilExpires
SetLastModified
SetNoServerCaching
<ProcessRequest>b__0
CS$<>9__CachedAnonymousMethodDelegate1
HostingEnvironment
VirtualPathProvider
get_VirtualPathProvider
FileExists
VirtualFile
GetFile
VirtualFileBase
get_CurrentEncoding
ReadToEnd
MemoryStream
System.IO.Compression
GZipStream
CompressionMode
StreamWriter
get_OutputStream
MissingManifestResourceException
HashCodeCombiner
AddObject
get_GlobalAssemblyCache
get_Version
get_CultureInfo
GetPublicKeyToken
GetManifestResourceStream
GetFileHash
EncryptString
get_CombinedHashString
GetValueOrDefault
LastIndexOf
Match
GroupCollection
get_Groups
Group
Capture
DateTimeKind
UriComponents
UriFormat
GetComponents
ToUniversalTime
get_Ticks
GetFields
IsDefined
DBNull
get_IsPrimitive
IConvertible
GetUnderlyingType
RuntimeHelpers
AppendFormat
GetSetMethod
GetField
ParameterModifier
GetConstructor
MissingMethodException
CanConvertFrom
ConvertFrom
ConvertToInvariantString
ConvertFromInvariantString
get_IsAbstract
AttributeUsageAttribute
AttributeTargets
UrlPathEncode
AddSeconds
SetSlidingExpiration
set_IgnoreParams
SetMaxAge
get_InputStream
get_HttpMethod
NamedPermissionSet
get_NamedPermissionSet
PermissionSet
PermitOnly
HttpWorkerRequest
GetStatusDescription
UTF8Encoding
TargetInvocationException
get_InnerException
get_IsCustomErrorEnabled
get_StackTrace
System.Web.Services.Protocols
WebServiceHandlerFactory
get_IsGenericTypeDefinition
XmlTextWriter
set_Position
GetContract
UriKind
TryCreate
get_IsAbsoluteUri
get_OriginalString
get_AbsoluteUri
get_PathAndQuery
GetName
get_CodeBase
get_LocalPath
GetLastWriteTime
get_Year
get_Month
get_Day
get_Hour
get_Minute
op_GreaterThanOrEqual
GetFileName
GetCompiledType
CreateInstanceFromVirtualPath
BuildDependencySet
GetCachedBuildDependencySet
get_VirtualPaths
GetCacheDependency
get_AppRelativeCurrentExecutionFilePath
SecurityException
XmlConvert
DecodeName
get_Namespace
OperationDescriptionCollection
get_Operations
OperationDescription
KeyedByTypeCollection`1
IOperationBehavior
get_Behaviors
System.ServiceModel.Web
WebGetAttribute
MessageDescriptionCollection
get_Messages
MessageDescription
MessageBodyDescription
MessagePartDescriptionCollection
get_Parts
MessagePartDescription
get_ReturnValue
get_KnownTypes
GetMethods
GetNames
XmlSchemaContentModel
get_ContentModel
XmlSchemaParticle
get_Particle
XmlSchemaGroupBase
XmlSchemaObjectCollection
CollectionBase
XmlSchemaElement
get_MaxOccursString
get_MaxOccurs
op_GreaterThan
XmlSchemaSimpleTypeContent
XmlSchemaSimpleTypeList
get_Facets
XmlSchemaObjectEnumerator
XmlSchemaFacet
XmlSchemaEnumerationFacet
get_BaseTypeName
XmlNode
get_FirstChild
XmlNodeType
get_NodeType
get_NextSibling
get_InnerText
XsdDataContractExporter
Export
get_Schemas
Schemas
XmlSchemaType
get_QualifiedName
XmlSchemaAnnotated
get_Annotation
GetSchemaTypeName
get_IsEmpty
XmlAttributeCollection
XmlNamedNodeMap
GetNamedItem
XmlSchemaAppInfo
get_Markup
get_LocalName
get_NamespaceURI
get_InvariantInfo
ToUInt64
ToInt64
get_MessageName
get_EnableSession
ConfigurationPermissionAttribute
CompilationSection
get_EventHandlerType
AddEventHandler
get_UniqueID
ResolveUrl
NotifyParentPropertyAttribute
get_CurrentUICulture
UrlPath
IsRelativeUrl
IsAppRelativePath
NonVisualControlAttribute
HttpBrowserCapabilitiesBase
get_EcmaScriptVersion
get_JScriptVersion
CustomError
GetHttpCode
UnauthorizedAccessException
PathTooLongException
get_W3CDomVersion
get_SupportsCallback
GetLastError
get_InnerWriter
get_NewLine
TemplateControl
HttpServerUtility
HttpServerUtilityWrapper
set_DescriptionValue
set_DisplayNameValue
get_Ordinal
AppendLine
ParseQueryString
HtmlAttributeEncode
HybridDictionary
set_Title
HtmlTextWriterStyle
AddStyleAttribute
get_UserAgent
HttpContextWrapper
IStateFormatter
get_StateFormatter
ListDictionary
IComparer
ScriptKey
CaptureCollection
get_Captures
get_Success
MatchCollection
Matches
set_CurrentUICulture
GetObject
get_WebResource
<GetScriptDescriptors>d__0
System.Collections.Generic.IEnumerable<System.Web.UI.ScriptDescriptor>.GetEnumerator
System.Collections.Generic.IEnumerator<System.Web.UI.ScriptDescriptor>.get_Current
<s>5__1
System.Collections.Generic.IEnumerator<System.Web.UI.ScriptDescriptor>.Current
<GetScriptReferences>d__4
System.Collections.Generic.IEnumerable<System.Web.UI.ScriptReference>.GetEnumerator
System.Collections.Generic.IEnumerator<System.Web.UI.ScriptReference>.get_Current
System.Collections.Generic.IEnumerator<System.Web.UI.ScriptReference>.Current
TemplateInstanceAttribute
TemplateInstance
<GetScriptReferences>d__0
<GetScriptDescriptors>d__3
<desc>5__4
<updatePanelClientID>5__5
AsReadOnly
<GetEnumerator>d__0
System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Current
<i>5__1
<key>5__2
<>7__wrap3
<>m__Finally4
System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Current
CombineHashCodes
get_CombinedHash32
GeneratedCodeAttribute
DebuggerNonUserCodeAttribute
ReferenceEquals
get_VirtualPath
get_Files
GetExtension
MapPath
AddCodeCompileUnit
System.Data.Services.Client
DataServiceContext
AddAssemblyReference
System.Data.Services.Design
EntityClassGenerator
LanguageOption
CreateCodeFile
StringReader
System.Data.Entity
System.Data.Metadata.Edm
EdmSchemaError
CreateProvider
System.Design
System.Data.Design
TypedDataSetSchemaImporterExtensionFx35
Environment
CodeNamespaceCollection
get_Namespaces
CodeNamespace
CodeTypeDeclarationCollection
get_Types
GetDirectory
AppendTrailingSlash
RemoveTrailingSlash
get_AppDomainAppVirtualPath
WebConfigurationFileMap
GetDirectoryName
VirtualDirectoryMapping
get_ApplicationPhysicalPath
VirtualDirectoryMappingCollection
get_VirtualDirectories
get_SiteName
OpenMappedWebConfiguration
GetReferencedAssemblies
ReferenceMatchesDefinition
<>c__DisplayClass1
<>c__DisplayClass3
CS$<>8__locals2
ValidationEventArgs
<LoadMapFile>b__0
XmlSeverityType
get_Severity
XmlReaderSettings
set_Schemas
ValidationType
set_ValidationType
XmlSchemaValidationFlags
set_ValidationFlags
ValidationEventHandler
add_ValidationEventHandler
remove_ValidationEventHandler
ServiceCollection
Service
PortCollection
get_Ports
SoapAddressBinding
Soap12AddressBinding
get_Binding
get_Bindings
NamedItem
DocumentableItem
ServiceDescriptionFormatExtensionCollection
get_Location
get_Segments
XmlElementAttribute
XmlArrayAttribute
XmlArrayItemAttribute
XmlIgnoreAttribute
XmlEnumAttribute
XmlAttributeAttribute
GetInvalidFileNameChars
IndexOfAny
DirectorySeparatorChar
AltDirectorySeparatorChar
VolumeSeparatorChar
LastIndexOfAny
set_RetrievalUrl
set_SourceUri
CreateFromServiceDescription
CreateFromSchema
get_DocumentElement
CreateFromPolicy
get_SourceUri
XmlNodeList
get_ChildNodes
get_AttributeName
get_ElementName
XmlAnyAttributeAttribute
XmlAnyElementAttribute
XmlTextAttribute
IsSubclassOf
XmlSchemaAttribute
XmlSchemaGroup
XmlSchemaAttributeGroup
XmlRootAttribute
AddRange
OpenText
ReadAllBytes
get_NamespaceMappings
ServiceContractGenerationOptions
get_Options
set_Options
MetadataImporter
get_KnownContracts
get_ReferencedTypes
CodeTypeReference
GenerateServiceContractType
get_Configuration
GenerateServiceEndpoint
GenerateBinding
WebReferenceOptions
CodeGenerationOptions
set_CodeGenerationOptions
get_CodeGenerationOptions
get_SchemaImporterExtensions
DataSetSchemaImporterExtension
set_WebReferenceOptions
set_CodeProvider
ImportOptions
set_GenerateInternal
set_GenerateSerializable
set_ImportXmlType
get_ReferencedCollectionTypes
GetTypes
KeyCollection
get_Contract
set_Contract
get_IsPublic
get_IsNestedPublic
ServiceModelSectionGroup
GetSectionGroup
ClientSection
get_Client
MetadataElement
get_Metadata
LoadWsdlImportExtensions
LoadPolicyImportExtensions
XmlSerializerMessageContractImporter
DataContractSerializerMessageContractImporter
MetadataSet
FaultImportOptions
set_UseMessageFormat
WrappedOptions
set_WrappedFlag
get_Dialect
get_XmlSchemaDialect
get_ServiceDescriptionDialect
Types
XmlSchemas
get_RetrievalUrl
get_WsdlDocuments
ServiceEndpointCollection
ImportAllEndpoints
ImportAllBindings
ImportAllContracts
CodeTypeMember
get_CustomAttributes
get_AttributeType
CodeAttributeArgumentCollection
CodeAttributeArgument
CodeExpression
CodePrimitiveExpression
set_Value
CodeTypeMemberCollection
get_Members
CodeMemberMethod
CodeParameterDeclarationExpressionCollection
CodeParameterDeclarationExpression
FieldDirection
get_Direction
get_FileExtension
GetLanguageFromExtension
ConfigurationException
HttpBinding
PortTypeCollection
get_PortTypes
MessageCollection
<MatchPortTypes>b__0
operationX
operationY
OperationCollection
<MatchOperations>b__3
faultX
faultY
OperationMessageCollection
OperationInput
get_Input
OperationOutput
OperationFaultCollection
get_Faults
<>c__DisplayClass5
<MatchMessages>b__4
MessagePartCollection
get_Element
get_ServiceDescription
get_PortType
WriteStartDocument
WriteNullTagLiteral
TopLevelElement
CreateUnknownTypeException
XmlSerializerNamespaces
WriteXsiType
CreateInvalidEnumValueException
WriteElementStringRaw
WriteElementString
MoveToContent
CreateUnknownNodeException
UnknownNode
GetXsiType
ReadNull
IsXmlnsAttribute
MoveToNextAttribute
MoveToElement
get_IsEmptyElement
t_ReaderCount
CheckReaderCount
ToBoolean
<PrivateImplementationDetails>{C7E4AEB3-FDD3-4389-85B1-40AC31AACA2C}
$$method0x6000db5-1
CreateUnknownConstantException
ReadElementString
XmlNameTable
get_NameTable
$$method0x6000ddd-1
System.Web.Resources.AtlasWeb.resources
System.Web.Resources.ScriptLibrary.WebForms.Res.debug.resources
System.Web.Resources.ScriptLibrary.Res.debug.resources
System.Web.Resources.ScriptLibrary.Res.resources
System.Web.Resources.ScriptLibrary.WebForms.Res.resources
System.Web.Resources.WCFModelStrings.resources
System.Web.Resources.Timer.bmp
System.Web.Resources.ScriptManager.bmp
System.Web.Resources.ScriptManagerProxy.bmp
System.Web.Resources.UpdatePanel.bmp
System.Web.Resources.UpdateProgress.bmp
MicrosoftAjax.debug.js
MicrosoftAjaxTimer.debug.js
MicrosoftAjaxWebForms.debug.js
MicrosoftAjax.js
MicrosoftAjaxTimer.js
MicrosoftAjaxWebForms.js
System.Web.UI.WebControls.DataPager.ico
System.Web.UI.WebControls.LinqDataSource.ico
System.Web.UI.WebControls.ListView.ico
System.Web.Compilation.WCFModel.Schema.ServiceMapSchema.xsd
System.Web.Compilation.WCFModel.Schema.DataServiceMapSchema.xsd
AuthenticationService
ProfileService
RoleService
AllowAnonymous
username
password
properties
values
AppIsOffline
ClientData
System.Web.Extensions.ClientServices.ClientData
System.Web.Extensions.ClientServices.ClientData\
.clientdata
LastLoggedInUserName
LastLoggedInDateUtc
PasswordHash
PasswordSalt
Roles
RolesCachedDateUtc
SettingsNames
SettingsStoredAs
SettingsValues
SettingsNeedReset
SettingsCacheIsMoreFresh
CookieNames
CookieValues
ClientForms
/Login
userName
createPersistentCookie
config
credentialsProvider
connectionStringName
serviceUri
savePasswordHashLocally
description
/Logout
SELECT PropertyValue FROM ApplicationProperties WHERE PropertyName = N'LastLoggedInUserName'
DELETE FROM ApplicationProperties WHERE PropertyName = N'LastLoggedInUserName'
INSERT INTO ApplicationProperties(PropertyName, PropertyValue) VALUES (N'LastLoggedInUserName', @UserName)
@UserName
INSERT INTO ApplicationProperties(PropertyName, PropertyValue) VALUES (N'LastLoggedInDate', @Date)
@Date
DELETE FROM UserProperties WHERE PropertyName = @PasswordHashName
@PasswordHashName
PasswordHash_
DELETE FROM UserProperties WHERE PropertyName = @PasswordSaltName
@PasswordSaltName
PasswordSalt_
INSERT INTO UserProperties(PropertyName, PropertyValue) VALUES (@PasswordHashName, @PasswordHashValue)
@PasswordHashValue
INSERT INTO UserProperties(PropertyName, PropertyValue) VALUES (@PasswordSaltName, @PasswordSaltValue)
@PasswordSaltValue
/IsLoggedIn
SELECT PropertyValue FROM UserProperties WHERE PropertyName = @PasswordHashName
SELECT PropertyValue FROM UserProperties WHERE PropertyName = @PasswordSaltName
cacheTimeout
honorCookieExpiry
/GetRolesForCurrentUser
DELETE FROM Roles WHERE UserName = @UserName
DELETE FROM UserProperties WHERE PropertyName = @RolesCachedDate
@RolesCachedDate
RolesCachedDate_
INSERT INTO Roles(UserName, RoleName) VALUES(@UserName, @RoleName)
@RoleName
INSERT INTO UserProperties (PropertyName, PropertyValue) VALUES(@RolesCachedDate, @Date)
SELECT PropertyValue FROM UserProperties WHERE PropertyName = @RolesCachedDate
SELECT RoleName FROM Roles WHERE UserName = @UserName ORDER BY RoleName
/GetPropertiesMetadata
ClientSettingsProvider.ServiceUri
ClientSettingsProvider.ConnectionStringName
ClientSettingsProvider.HonorCookieExpiry
SettingsClassType
Default
authenticatedUserOnly
/GetPropertiesForCurrentUser
/SetPropertiesForCurrentUser
SELECT PropertyName, PropertyStoredAs, PropertyValue FROM Settings
DELETE FROM Settings WHERE PropertyName = @PropName
@PropName
INSERT INTO Settings (PropertyName, PropertyStoredAs, PropertyValue) VALUES (@PropName, 'N', '')
INSERT INTO Settings (PropertyName, PropertyStoredAs, PropertyValue) VALUES (@PropName, 'S', @PropVal)
@PropVal
INSERT INTO Settings (PropertyName, PropertyStoredAs, PropertyValue) VALUES (@PropName, 'B', @PropVal)
NeeedToDoReset
IsCacheMoreFresh
SELECT PropertyValue FROM Settings WHERE PropertyName = @PropName AND PropertyStoredAs='I'
DELETE FROM Settings WHERE PropertyName = @PropName AND PropertyStoredAs='I'
INSERT INTO Settings (PropertyName, PropertyStoredAs, PropertyValue) VALUES  (@PropName, 'I', @PropValue)
@PropValue
UserValidated
OnUserValidated
application/json; charset=utf-8
aspnet:UseLegacyClientServicesJsonHandling
Set-Cookie
paramValues
HttpOnly
|FILES|
|SQL/CE|
.SqlServerCe
|Isolated_Storage|
SELECT PropertyValue FROM UserProperties WHERE PropertyName = @PropName
CookieName_
DELETE FROM UserProperties WHERE PropertyName LIKE N'CookieName_%' AND PropertyValue LIKE @PropValue
INSERT INTO UserProperties (PropertyName, PropertyValue) VALUES (@PropName, @PropValue)
DELETE FROM UserProperties WHERE PropertyName LIKE N'CookieName_%'
_DB.spf
SqlCeEngine
CreateDatabase
CREATE TABLE ApplicationProperties (PropertyName nvarchar(256), PropertyValue nvarchar(256))
CREATE TABLE UserProperties (PropertyName nvarchar(256), PropertyValue nvarchar(256))
CREATE TABLE Roles (UserName nvarchar(256), RoleName nvarchar(256))
CREATE TABLE Settings (PropertyName nvarchar(256), PropertyStoredAs nvarchar(1), PropertyValue nvarchar(2048))
System.Data.SqlServerCe.
, System.Data.SqlServerCe
, System.Data.SqlServerCe, Version=3.5.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91
, System.Data.SqlServerCe, Version=3.0.3600.0, Culture=neutral, PublicKeyToken=3be235df1c8d2ad3
SqlCeConnection
SqlCeParameter
Application
User_
PagedControlID
value
QueryStringField
container
Visible
source
predicate
Where
selector
Select
ordering
OrderBy
OrderByDescending
ThenBy
ThenByDescending
keySelector
elementSelector
GroupBy
Count
DynamicClasses
Module
DynamicClass
Equals
get_Default
GetHashCode
expression
ascending
descending
Invoke
Compare
Concat
false
DefaultView
viewName
InnerExceptions
Nullable<{0}>
arguments
 AND 
ToList
^\s*[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nl}_][\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nl}\p{Nd}\p{Pc}\p{Mn}\p{Mc}\p{Cf}_]*
(\s+(asc|ascending|desc|descending))?\s*$
ConvertEmptyStringToNull
EnableModelValidation
GroupPlaceholderID
groupPlaceholder
InsertItemPosition
ItemPlaceholderID
itemPlaceholder
_!ItemCount
 DESC
itemValues
Cancel
Update
Delete
Insert
ItemCanceling
ItemDeleting
ItemEditing
ItemInserting
ItemUpdating
SelectedIndexChanging
Sorting
maximumRows
startRowIndex
ButtonCssClass
ButtonType
FirstPageImageUrl
FirstPageText
LastPageImageUrl
LastPageText
NextPageImageUrl
NextPageText
PreviousPageImageUrl
PreviousPageText
RenderNonBreakingSpacesBetweenControls
RenderDisabledButtonsAsLabels
ShowFirstPageButton
ShowLastPageButton
ShowNextPageButton
ShowPreviousPageButton
&nbsp;
First
ButtonCount
CurrentPageLabelCssClass
NextPreviousButtonCssClass
NumericButtonCssClass
PagerCommand
system.web.extensions/scripting/webServices/authenticationService
enabled
requireSSL
converters
recursionLimit
maxJsonLength
system.web.extensions/scripting/webServices/jsonSerialization
system.web.extensions/scripting/webServices/profileService
readAccessProperties
writeAccessProperties
system.web.extensions/scripting/webServices/roleService
enableCaching
enableCompression
system.web.extensions/scripting/scriptResourceHandler
webServices
scriptResourceHandler
jsonSerialization
profileService
authenticationService
roleService
scripting
var __cultureInfo = '
System.Web.UI.PageRequestManager:AsyncPostBackError
text/plain
System.Web.UI.PageRequestManager:AsyncPostBackErrorMessage
System.Web.UI.PageRequestManager:AsyncPostBackErrorHttpCode
error
X-Content-Type-Options
nosniff
dataItem
<script type="text/javascript">window.location="about:blank"</script>
pageRedirect
~/ScriptResource.axd
.debug.js
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript">parent.Sys.Application._onIFrameLoad();</script><title>
</title></head><body></body></html>
text/javascript
Content-encoding
~/ScriptResource.axd?d=
__type
^"\\/Date\((?<ticks>-?[0-9]+)(?:[a-zA-Z]|(?:\+|-)[0-9]{4})?\)\\/"
ticks
"\/Date(
input
new Date(
{0:x4}
.registerClass('
',Sys.Net.WebServiceProxy);
function() {
.initializeBase(this);
_get_path:function() {
 var p = this.get_path();
 if (p) return p;
 else return 
._staticInstance.get_path();},
this._timeout = 0;
this._userContext = null;
this._succeeded = null;
this._failed = null;
= function(
onSuccess,onFailed,userContext
._staticInstance.
._staticInstance = new 
.set_path = function(value) {
._staticInstance.set_path(value); }
.get_path = function() { 
/// <value type="String" mayBeNull="true">The service url.</value>
return 
._staticInstance.get_path();}
.set_timeout = function(value) {
._staticInstance.set_timeout(value); }
.get_timeout = function() { 
/// <value type="Number">The service timeout.</value>
return 
._staticInstance.get_timeout(); }
.set_defaultUserContext = function(value) { 
._staticInstance.set_defaultUserContext(value); }
.get_defaultUserContext = function() { 
/// <value mayBeNull="true">The service default user context.</value>
return 
._staticInstance.get_defaultUserContext(); }
.set_defaultSucceededCallback = function(value) { 
._staticInstance.set_defaultSucceededCallback(value); }
.get_defaultSucceededCallback = function() { 
/// <value type="Function" mayBeNull="true">The service default succeeded callback.</value>
return 
._staticInstance.get_defaultSucceededCallback(); }
.set_defaultFailedCallback = function(value) { 
._staticInstance.set_defaultFailedCallback(value); }
.get_defaultFailedCallback = function() { 
/// <value type="Function" mayBeNull="true">The service default failed callback.</value>
return 
._staticInstance.get_defaultFailedCallback(); }
.set_path = function(value) { 
.get_path = function() { return 
._staticInstance.get_path(); }
.set_timeout = function(value) { 
.get_timeout = function() { return 
.set_defaultUserContext = function(value) { 
.get_defaultUserContext = function() { return 
.set_defaultSucceededCallback = function(value) { 
.get_defaultSucceededCallback = function() { return 
.set_defaultFailedCallback = function(value) { 
.get_defaultFailedCallback = function() { return 
.set_path("
/// <param name="
 type="
</param>
succeededCallback, failedCallback, userContext
function(
return this._invoke(this._get_path(), 
,succeededCallback,failedCallback,userContext); }
var gtc = Sys.Net.WebServiceProxy._generateTypedConstructor;
if (typeof(
) === 'undefined') {
gtc("
 = function() { throw Error.invalidOperation(); }
.prototype = {
.registerEnum('
, true);
.prototype
Type.registerNamespace('
/// <param name="succeededCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="failedCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="userContext" optional="true" mayBeNull="true"></param>
PageMethods.prototype = 
var PageMethods = 
PageMethods
context
application/x-javascript
text/xml
{"d":
application/json
jsonerror
application/json;
/jsdebug
handler
String
Boolean
Number
Object
Array
http://schemas.datacontract.org/2004/07/
If-Modified-Since
Profile_JSON_AppService.axd
Authentication_JSON_AppService.axd
Role_JSON_AppService.axd
System.Web.Script.Services.WebServiceData:
_AppService.axd
methodName
unsignedByte
short
unsignedShort
unsignedInt
unsignedLong
{0}:{1}
ActualType
http://schemas.microsoft.com/2003/10/Serialization/
EnumerationValue
http://www.w3.org/2001/XMLSchema
unbounded
string
Namespace
system.web/compilation
exception
OnEvent
AsyncPostBack
AsyncPostBack: 
~/Authentication_JSON_AppService.axd
Sys.Services._AuthenticationService.DefaultWebServicePath = '
Sys.Services.AuthenticationService.set_path('
Sys.Services.AuthenticationService._setAuthenticated(true);
debug.js
compositeScript
__VIEWSTATE
__EVENTVALIDATION
__LASTFOCUS
__SCROLLPOSITIONX
__SCROLLPOSITIONY
__EVENTTARGET
__EVENTARGUMENT
__PREVIOUSPAGE
system.web/deployment
control
X-MicrosoftAjax
Delta=true
__ASYNCPOST
Focus.js
scriptBlock
ScriptPath
focus
hiddenField
asyncPostBackControlIDs
postBackControlIDs
updatePanelIDs
childUpdatePanelIDs
panelsToRefreshIDs
asyncPostBackTimeout
formAction
pageTitle
dataItemJson
<script type="text/javascript">
//<![CDATA[
Sys.WebForms.PageRequestManager._initialize('
', document.getElementById('
Sys.WebForms.PageRequestManager.getInstance()._updateControls([
//]]>
</script>
updatePanel
<input type="hidden" name="
" id="
" value="
action
PostBack
PostBack: 
~/Profile_JSON_AppService.axd
Sys.Services._ProfileService.DefaultWebServicePath = '
Sys.Services.ProfileService.set_path('
Sys.Services.ProfileService.properties = Sys.Serialization.JavaScriptSerializer.deserialize('
Sys.Services.ProfileService.properties.
 = new Sys.Services.ProfileGroup(Sys.Serialization.JavaScriptSerializer.deserialize('
Category_
~/Role_JSON_AppService.axd
Sys.Services._RoleService.DefaultWebServicePath = '
Sys.Services.RoleService.set_path('
Sys.Services.RoleService._roles = Sys.Serialization.JavaScriptSerializer.deserialize('
elementID
componentID
script
$create(
$get("
$find('
').dispose();
extenderControl
targetControl
scriptControl
Sys.Application.add_init(function() {
EmptyPageUrl
Accept-encoding
FrameworkLoadedCheck
if (typeof(Sys) === 'undefined') throw new Error('
MicrosoftAjax.js
MicrosoftAjaxWebForms.js
AppServicesConfig
UniqueScript_
system.web/customErrors
Sys.Application.setServerId(
  Sys.Application.setServerState('
Sys.Application._enableHistoryInScriptManager();
  Sys.Application.add_navigate(
HistoryStartup
CultureInfo
<script src="
" type="text/javascript"></script>
AppInitialize
Sys.Application.initialize();
hidden
?title=
&title=
__historyFrame
AppleMAC-Safari
 AppleWebKit/
__history
disposeScript
Sys.WebForms.PageRequestManager.getInstance()._registerDisposeScript(
arrayDeclaration
document.getElementById('
expando
ScriptContentNoTags
scriptDispose
scriptStartupBlock
onSubmit
empty
</script>
attrname
attrval
ScriptContentWithTags
<script(\s+(?<attrname>\w[-\w:]*)(\s*=\s*"(?<attrval>[^"]*)"|\s*=\s*'(?<attrval>[^']*)'))*\s*(?<empty>/)?>
scriptName
scriptResourceName
typeName
resourceName
resourceType
ScriptResource
.resources
if(typeof(Sys)!=='undefined')Sys.Application.notifyScriptLoaded();
// Name:        
// Assembly:    
// Version:     
// FileVersion: 
<%\s*=\s*(?<resourceType>WebResource|ScriptResource)\("(?<resourceName>[^"]*)"\)\s*%>
targetControlType
Enabled
Interval
Sys.UI._Timer
interval
uniqueID
MicrosoftAjaxTimer.js
owner
block
Sys.UI._UpdateProgress
associatedUpdatePanelId
dynamicLayout
displayAfter
MicrosoftAjax.debug.js
MicrosoftAjaxWebForms.debug.js
MicrosoftAjaxDataService.debug.js
MicrosoftAjaxTimer.debug.js
MicrosoftAjaxDataService.js
aspnet:UpdatePanelMaxScriptLength
aspnet:ScriptResourceAllowNonJsFiles
aspnet:MaxJsonDeserializerMembers
0.0.0.0
System.Web.Resources.AtlasWeb
ApplicationServiceManager_Path
AppService_Disabled
AppService_MultiplePaths
AppService_RequiredSSL
AppService_UnknownProfileProperty
ArgumentMustBeCurrentUser
ArgumentMustBeNull
AsyncPostBackTrigger_CannotFindEvent
AsyncPostBackTrigger_EventName
AsyncPostBackTrigger_InvalidEvent
AttributeNotRecognized
Category_Sorting
ClientService_BadJsonResponse
Common_ArgumentInvalidType
Common_GreaterThanOrEqualToZero
Common_GreaterThanOrEqualToZeroAndLessThanOrEqualToOne
Common_NullOrEmpty
Common_PageCannotBeNull
Common_ScriptManagerRequired
CompositeScriptReference_Scripts
ConvertersCollection_NotJavaScriptConverter
ConvertersCollection_UnknownType
DataBoundControlHelper_NoNamingContainer
DataPager_ControlIsntPageable
DataPager_Fields
DataPager_NoNamingContainer
DataPager_NoPageableItemContainer
DataPager_PageableItemContainerNotFound
DataPager_PagedControlID
DataPager_PagePropertiesCannotBeSet
DataPager_PageSize
DataPager_QueryStringField
DataPagerField_Visible
DynamicControlBase_ConvertEmptyStringToNull
DynamicControlBase_DataField
DynamicControlBase_DataFormatString
DynamicControlBase_HtmlEncode
DynamicControlBase_NullDisplayText
DynamicControlBase_UIHint
DynamicControlBase_ValidationGroup
DynamicFilterRepeater_DynamicFilterContainerId
DynamicNavigatorDataSource_NoAccessibleTablesFound
DynamicNavigatorDataSource_NoModelsRegistered
DynamicNavigatorDataSource_NoTablesInModels
ExpressionParser_AmbiguousConstructorInvocation
ExpressionParser_AmbiguousIndexerInvocation
ExpressionParser_AmbiguousMethodInvocation
ExpressionParser_ArgsIncompatibleWithLambda
ExpressionParser_BothTypesConvertToOther
ExpressionParser_CannotConvertValue
ExpressionParser_CannotIndexMultipleDimensionalArray
ExpressionParser_CloseBracketOrCommaExpected
ExpressionParser_CloseParenOrCommaExpected
ExpressionParser_CloseParenOrOperatorExpected
ExpressionParser_ColonExpected
ExpressionParser_DigitExpected
ExpressionParser_DotOrOpenParenExpected
ExpressionParser_DuplicateIdentifier
ExpressionParser_ExpressionExpected
ExpressionParser_ExpressionTypeMismatch
ExpressionParser_FirstExprMustBeBool
ExpressionParser_IdentifierExpected
ExpressionParser_IifRequiresThreeArgs
ExpressionParser_IncompatibleOperand
ExpressionParser_IncompatibleOperands
ExpressionParser_InvalidCharacter
ExpressionParser_InvalidCharacterLiteral
ExpressionParser_InvalidIndex
ExpressionParser_InvalidIntegerLiteral
ExpressionParser_InvalidRealLiteral
ExpressionParser_MethodIsVoid
ExpressionParser_MethodsAreInaccessible
ExpressionParser_MissingAsClause
ExpressionParser_NeitherTypeConvertsToOther
ExpressionParser_NoApplicableAggregate
ExpressionParser_NoApplicableIndexer
ExpressionParser_NoApplicableMethod
ExpressionParser_NoItInScope
ExpressionParser_NoMatchingConstructor
ExpressionParser_OpenBracketExpected
ExpressionParser_OpenParenExpected
ExpressionParser_SyntaxError
ExpressionParser_TokenExpected
ExpressionParser_TypeHasNoNullableForm
ExpressionParser_UnknownIdentifier
ExpressionParser_UnknownPropertyOrField
ExpressionParser_UnterminatedStringLiteral
ExtenderControl_TargetControlDifferentUpdatePanel
ExtenderControl_TargetControlID
ExtenderControl_TargetControlIDEmpty
ExtenderControl_TargetControlIDInvalid
FilterRepeater_TableName
JSON_ArrayTypeNotSupported
JSON_BadEscape
JSON_CannotConvertObjectToType
JSON_CannotCreateListType
JSON_CircularReference
JSON_DepthLimitExceeded
JSON_DeserializerTypeMismatch
JSON_DictionaryTypeNotSupported
JSON_ExpectedOpenBrace
JSON_IllegalPrimitive
JSON_InvalidArrayEnd
JSON_InvalidArrayExpectComma
JSON_InvalidArrayExtraComma
JSON_InvalidArrayStart
JSON_InvalidEnumType
JSON_InvalidMaxJsonLength
JSON_InvalidMemberName
JSON_InvalidObject
JSON_InvalidRecursionLimit
JSON_MaxJsonLengthExceeded
JSON_NoConstructor
JSON_StringNotQuoted
JSON_UnterminatedString
JSON_ValueTypeCannotBeNull
LinqDataSource_AutoGenerateOrderByClause
LinqDataSource_AutoGenerateWhereClause
LinqDataSource_AutoPage
LinqDataSource_AutoSort
LinqDataSource_ContextCreated
LinqDataSource_ContextCreating
LinqDataSource_ContextDisposing
LinqDataSource_ContextTypeName
LinqDataSource_Deleted
LinqDataSource_DeleteParameters
LinqDataSource_Deleting
LinqDataSource_Description
LinqDataSource_DisplayName
LinqDataSource_EnableDelete
LinqDataSource_EnableInsert
LinqDataSource_EnableObjectTracking
LinqDataSource_EnableUpdate
LinqDataSource_GroupBy
LinqDataSource_GroupByParameters
LinqDataSource_Inserted
LinqDataSource_Inserting
LinqDataSource_InsertParameters
LinqDataSource_InvalidViewName
LinqDataSource_OrderBy
LinqDataSource_OrderByParameters
LinqDataSource_OrderGroupsBy
LinqDataSource_OrderGroupsByParameters
LinqDataSource_Select
LinqDataSource_Selected
LinqDataSource_Selecting
LinqDataSource_SelectParameters
LinqDataSource_StoreOriginalValuesInViewState
LinqDataSource_TableName
LinqDataSource_Updated
LinqDataSource_UpdateParameters
LinqDataSource_Updating
LinqDataSource_Where
LinqDataSource_WhereParameters
LinqDataSourceValidationException_ValidationFailed
LinqDataSourceView_CannotConvertType
LinqDataSourceView_ContextTypeNameChanged
LinqDataSourceView_ContextTypeNameNotFound
LinqDataSourceView_ContextTypeNameNotSpecified
LinqDataSourceView_DeleteNotSupported
LinqDataSourceView_EnableObjectTrackingChanged
LinqDataSourceView_GroupByNotSupportedOnEdit
LinqDataSourceView_InsertNotSupported
LinqDataSourceView_InsertRequiresValues
LinqDataSourceView_InvalidContextType
LinqDataSourceView_InvalidOrderByFieldName
LinqDataSourceView_InvalidParameterName
LinqDataSourceView_InvalidTablePropertyType
LinqDataSourceView_OrderByAlreadySpecified
LinqDataSourceView_OrderGroupsByRequiresGroupBy
LinqDataSourceView_OriginalValuesNotFound
LinqDataSourceView_PagingNotHandled
LinqDataSourceView_ParametersMustBeNamed
LinqDataSourceView_SelectNewNotSupportedOnEdit
LinqDataSourceView_TableCannotBeStatic
LinqDataSourceView_TableNameChanged
LinqDataSourceView_TableNameNotFound
LinqDataSourceView_TableNameNotSpecified
LinqDataSourceView_UpdateNotSupported
LinqDataSourceView_ValidationFailed
LinqDataSourceView_WhereAlreadySpecified
ListView_AlternatingItemTemplate
ListView_ContainerNameMustNotBeEmpty
ListView_ConvertEmptyStringToNull
ListView_DataKeyNames
ListView_DataKeyNamesMustBeSpecified
ListView_DataKeys
ListView_DataSourceDoesntSupportPaging
ListView_DataSourceMustBeCollectionWhenNotDataBinding
ListView_EditIndex
ListView_EditItem
ListView_EditItemTemplate
ListView_EmptyDataTemplate
ListView_EmptyItemTemplate
ListView_EnableDataBoundControlManager
ListView_EnableModelValidation
ListView_GroupContainerID
ListView_GroupItemCount
ListView_GroupItemCountNoGroupTemplate
ListView_GroupSeparatorTemplate
ListView_GroupTemplate
ListView_InsertItem
ListView_InsertItemPosition
ListView_InsertItemTemplate
ListView_InsertTemplateRequired
ListView_InvalidCancel
ListView_InvalidDelete
ListView_InvalidEdit
ListView_InvalidInsert
ListView_InvalidSelect
ListView_InvalidUpdate
ListView_ItemPlaceholderID
ListView_Items
ListView_ItemSeparatorTemplate
ListView_ItemsNotDataItems
ListView_ItemTemplate
ListView_ItemTemplateRequired
ListView_LayoutTemplate
ListView_Missing_VirtualItemCount
ListView_NeedICollectionOrTotalRowCount
ListView_NoGroupPlaceholder
ListView_NoInsertItem
ListView_NoItemPlaceholder
ListView_NullView
ListView_OnItemCanceling
ListView_OnItemCommand
ListView_OnItemCreated
ListView_OnItemDataBound
ListView_OnItemDeleted
ListView_OnItemDeleting
ListView_OnItemEditing
ListView_OnItemInserted
ListView_OnItemInserting
ListView_OnItemUpdated
ListView_OnItemUpdating
ListView_OnLayoutCreated
ListView_OnPagePropertiesChanged
ListView_OnPagePropertiesChanging
ListView_OnSelectedIndexChanged
ListView_OnSelectedIndexChanging
ListView_OnSorted
ListView_OnSorting
ListView_SelectedIndex
ListView_SelectedItemTemplate
ListView_SortDirection
ListView_SortExpression
ListView_StyleNotSupported
ListView_StylePropertiesNotSupported
ListView_UnhandledEvent
ListViewPagedDataSource_CannotGetCount
ListViewPagedDataSource_EnumeratorMoveNextNotCalled
NextPreviousPagerField_ButtonCssClass
NextPreviousPagerField_ButtonType
NextPreviousPagerField_FirstPageImageUrl
NextPreviousPagerField_FirstPageText
NextPreviousPagerField_LastPageImageUrl
NextPreviousPagerField_LastPageText
NextPreviousPagerField_NextPageImageUrl
NextPreviousPagerField_NextPageText
NextPreviousPagerField_PreviousPageImageUrl
NextPreviousPagerField_PreviousPageText
NextPreviousPagerField_RenderDisabledButtonsAsLabels
NextPreviousPagerField_RenderNonBreakingSpacesBetweenControls
NextPreviousPagerField_ShowFirstPageButton
NextPreviousPagerField_ShowLastPageButton
NextPreviousPagerField_ShowNextPageButton
NextPreviousPagerField_ShowPreviousPageButton
NextPrevPagerField_DefaultFirstPageText
NextPrevPagerField_DefaultLastPageText
NextPrevPagerField_DefaultNextPageText
NextPrevPagerField_DefaultPreviousPageText
NumericPagerField_ButtonCount
NumericPagerField_ButtonType
NumericPagerField_CurrentPageLabelCssClass
NumericPagerField_DefaultNextPageText
NumericPagerField_DefaultPreviousPageText
NumericPagerField_NextPageImageUrl
NumericPagerField_NextPageText
NumericPagerField_NextPreviousButtonCssClass
NumericPagerField_NumericButtonCssClass
NumericPagerField_PreviousPageImageUrl
NumericPagerField_PreviousPageText
NumericPagerField_RenderNonBreakingSpacesBetweenControls
PageRequestManager_RegisterDataItemInNonAsyncRequest
PageRequestManager_RegisterDataItemTwice
PagerFieldCollection_InvalidType
PagerFieldCollection_InvalidTypeIndex
ParseException_ParseExceptionFormat
ProfileServiceManager_LoadProperitesWithNonDefaultPath
ProfileServiceManager_LoadProperties
ProxyGenerator_UnsupportedType
ProxyHelper_BadStatusCode
RoleService_RoleProviderNotFound
RoleService_RolesFeatureNotEnabled
RoleServiceManager_LoadRoles
RoleServiceManager_LoadRolesWithNonDefaultPath
ScriptControlDescriptor_IDNotSettable
ScriptControlManager_ExtenderControlNotRegistered
ScriptControlManager_NoTargetControlTypes
ScriptControlManager_RegisterExtenderControlTooEarly
ScriptControlManager_RegisterExtenderControlTooLate
ScriptControlManager_RegisterScriptControlTooEarly
ScriptControlManager_RegisterScriptControlTooLate
ScriptControlManager_ScriptControlNotRegistered
ScriptControlManager_TargetControlTypeInvalid
ScriptManager_AllowCustomErrorsRedirect
ScriptManager_AsyncPostBackError
ScriptManager_AsyncPostBackErrorMessage
ScriptManager_AsyncPostBackNotInPartialRenderingMode
ScriptManager_AsyncPostBackTimeout
ScriptManager_AuthenticationService
ScriptManager_CannotAddHistoryPointOutsideOfAsyncPostBack
ScriptManager_CannotAddHistoryPointWithHistoryDisabled
ScriptManager_CannotChangeEnableHistory
ScriptManager_CannotChangeEnablePartialRendering
ScriptManager_CannotChangeEnableScriptGlobalization
ScriptManager_CannotChangeSupportsPartialRendering
ScriptManager_CannotRegisterBothPostBacks
ScriptManager_CannotRegisterScriptInMultipleCompositeReferences
ScriptManager_CannotSetSupportsPartialRenderingWhenDisabled
ScriptManager_ClientNavigateHandler
ScriptManager_CompositeScript
ScriptManager_EmptyPageUrl
ScriptManager_EnableHistory
ScriptManager_EnablePageMethods
ScriptManager_EnablePartialRendering
ScriptManager_EnableScriptGlobalization
ScriptManager_EnableScriptLocalization
ScriptManager_EnableSecureHistoryState
ScriptManager_FrameworkFailedToLoad
ScriptManager_InvalidControlRegistration
ScriptManager_LoadScriptsBeforeUI
ScriptManager_Navigate
ScriptManager_OnlyOneScriptManager
ScriptManager_PageUntitled
ScriptManager_ProfileService
ScriptManager_ResolveCompositeScriptReference
ScriptManager_ResolveScriptReference
ScriptManager_RoleService
ScriptManager_ScriptMode
ScriptManager_ScriptPath
ScriptManager_Scripts
ScriptManager_Services
ScriptManager_UpdatePanelNotRegistered
ScriptReference_Assembly
ScriptReference_AssemblyRequiresName
ScriptReference_IgnoreScriptPath
ScriptReference_InvalidReleaseScriptName
ScriptReference_InvalidReleaseScriptPath
ScriptReference_Name
ScriptReference_NameAndPathCannotBeEmpty
ScriptReference_NotifyScriptLoaded
ScriptReference_Path
ScriptReference_ResourceUICultures
ScriptReference_ScriptMode
ScriptRegistrationManager_ControlNotOnPage
ScriptRegistrationManager_InvalidChars
ScriptRegistrationManager_NoCloseTag
ScriptRegistrationManager_NoTags
ScriptResourceHandler_AssemblyNotFileBased
ScriptResourceHandler_DuplicateScriptResources
ScriptResourceHandler_InvalidRequest
ScriptResourceHandler_ResourceUrlLongerThan1024Characters
ScriptResourceHandler_TypeNameMismatch
ScriptResourceHandler_UnknownResource
ServiceReference_InlineScript
ServiceReference_Path
ServiceReference_PathCannotBeEmpty
ServiceUriNotFound
SqlHelper_SqlEverywhereNotInstalled
TemplatePagerField_OnPagerCommand
TemplatePagerField_PagerTemplate
TemplatePagerField_UnhandledEvent
Timer_IntervalMustBeGreaterThanZero
Timer_TimerEnable
Timer_TimerInterval
Timer_TimerTick
UnhandledExceptionEventLogMessage
UpdatePanel_CannotModifyControlCollection
UpdatePanel_CannotSetContentTemplate
UpdatePanel_ChildrenAsTriggers
UpdatePanel_ChildrenTriggersAndUpdateAlways
UpdatePanel_RenderMode
UpdatePanel_SetPartialRenderingModeCalledOnce
UpdatePanel_Triggers
UpdatePanel_UpdateConditional
UpdatePanel_UpdateMode
UpdatePanel_UpdateTooLate
UpdatePanelControlTrigger_ControlID
UpdatePanelControlTrigger_ControlNotFound
UpdatePanelControlTrigger_NoControlID
UpdateProgress_AssociatedUpdatePanelID
UpdateProgress_DisplayAfter
UpdateProgress_DisplayAfterInvalid
UpdateProgress_DynamicLayout
UpdateProgress_NoUpdatePanel
UpdateProgress_ProgressTemplate
UpdateProgress_TemplateRequired
UserIsNotAuthenticated
WebResourceUtil_AssemblyDoesNotContainDebugWebResource
WebResourceUtil_AssemblyDoesNotContainEmbeddedResource
WebResourceUtil_AssemblyDoesNotContainReleaseWebResource
WebService_Error
WebService_InvalidGenerateScriptType
WebService_InvalidInlineVirtualPath
WebService_InvalidVerbRequest
WebService_InvalidWebServiceCall
WebService_InvalidXmlReturnType
WebService_MissingArg
WebService_NoScriptServiceAttribute
WebService_NoWebServiceData
WebService_NoWebServiceDataInlineScript
WebService_RedirectError
WebService_UnknownWebMethod
.svcmap
.datasvcmap
{0}: {1}
'{0}': {1}
'{0}' ({1}): {2}
'{0}' ({1},{2}): {3}
App_WebReferences\
Reference.config
fileName
urn:schemas-microsoft-com:xml-wcfservicemap
Schema.ServiceMapSchema.xsd
wsdlDocuments
.asmx
content
byteContent
definitions
http://schemas.xmlsoap.org/wsdl/
schema
Policy
http://schemas.xmlsoap.org/ws/2004/09/policy
http://www.w3.org/ns/ws-policy
discovery
http://schemas.xmlsoap.org/disco/
http://schemas.microsoft.com/ado/2007/06/edmx
disco
service
contentReader
protocol
address
assemblyName
schemaList
importErrors
{0}[@name='{1}']
Constraints
element
attribute
group
attributeGroup
Schema.DataServiceMapSchema.xsd
targetCompileUnit
bindingCollection
contractCollection
serviceEndpointList
serviceEndpointToChannelEndpointElementMap
proxyGeneratedContractTypes
proxyGenerationErrors
svcMapFile
codeDomProvider
typedDataSetSchemaImporterExtension
typeLoader
ConfigurationName
ReferenceGroup
SvcMapFile
ClientOptions
MetadataSources
MetadataSource
Metadata
MetadataFile
Extensions
ExtensionFile
FileName
MetadataType
Ignore
IsMergeResult
SourceId
SourceUrl
Unknown
Disco
Schema
System.Web.Compilation.WCFModel.MetadataFile.MetadataType
Address
Protocol
GenerateAsynchronousMethods
EnableDataBinding
ExcludedTypes
ExcludedType
ImportXmlTypes
GenerateInternalTypes
GenerateMessageContracts
NamespaceMappings
NamespaceMapping
CollectionMappings
CollectionMapping
GenerateSerializableTypes
Serializer
UseSerializerForFaults
Wrapped
ReferenceAllAssemblies
ReferencedAssemblies
ReferencedAssembly
ReferencedDataContractTypes
ReferencedDataContractType
ServiceContractMappings
ServiceContractMapping
ContractMapping
TargetNamespace
TypeName
ReferencedType
AssemblyName
DataContractSerializer
XmlSerializer
System.Web.Compilation.WCFModel.ClientOptions.ProxySerializerType
ReferencedCollectionType
Category
Dictionary
System.Web.Compilation.WCFModel.ReferencedCollectionType.CollectionCategory
ClrNamespace
urn:schemas-microsoft-com:xml-wcfservicemap:ReferenceGroup
urn:schemas-microsoft-com:xml-wcfservicemap:MetadataSource
urn:schemas-microsoft-com:xml-wcfservicemap:MetadataFile
urn:schemas-microsoft-com:xml-wcfservicemap:ExtensionFile
:FileName, :Name
:FileName, :MetadataType, :ID, :Ignore, :IsMergeResult, :SourceId, :SourceUrl
:Address, :Protocol, :SourceId
urn:schemas-microsoft-com:xml-wcfservicemap:ExcludedType
urn:schemas-microsoft-com:xml-wcfservicemap:NamespaceMapping
urn:schemas-microsoft-com:xml-wcfservicemap:CollectionMapping
urn:schemas-microsoft-com:xml-wcfservicemap:ReferencedAssembly
urn:schemas-microsoft-com:xml-wcfservicemap:ReferencedDataContractType
urn:schemas-microsoft-com:xml-wcfservicemap:ServiceContractMapping
urn:schemas-microsoft-com:xml-wcfservicemap:GenerateAsynchronousMethods, urn:schemas-microsoft-com:xml-wcfservicemap:EnableDataBinding, urn:schemas-microsoft-com:xml-wcfservicemap:ExcludedTypes, urn:schemas-microsoft-com:xml-wcfservicemap:ImportXmlTypes, urn:schemas-microsoft-com:xml-wcfservicemap:GenerateInternalTypes, urn:schemas-microsoft-com:xml-wcfservicemap:GenerateMessageContracts, urn:schemas-microsoft-com:xml-wcfservicemap:NamespaceMappings, urn:schemas-microsoft-com:xml-wcfservicemap:CollectionMappings, urn:schemas-microsoft-com:xml-wcfservicemap:GenerateSerializableTypes, urn:schemas-microsoft-com:xml-wcfservicemap:Serializer, urn:schemas-microsoft-com:xml-wcfservicemap:UseSerializerForFaults, urn:schemas-microsoft-com:xml-wcfservicemap:Wrapped, urn:schemas-microsoft-com:xml-wcfservicemap:ReferenceAllAssemblies, urn:schemas-microsoft-com:xml-wcfservicemap:ReferencedAssemblies, urn:schemas-microsoft-com:xml-wcfservicemap:ReferencedDataContractTypes, urn:schemas-microsoft-com:xml-wcfservicemap:ServiceContractMappings
:Name, :TargetNamespace, :TypeName
:TypeName
:AssemblyName
:TypeName, :Category
:TargetNamespace, :ClrNamespace
System.Web.Compilation.WCFModel.SvcMapFile:urn:schemas-microsoft-com:xml-wcfservicemap:ReferenceGroup:True:
Read16_ReferenceGroup
Write16_ReferenceGroup
urn:schemas-microsoft-com:xml-dataservicemap
DataSvcMapFile
urn:schemas-microsoft-com:xml-dataservicemap:ReferenceGroup
urn:schemas-microsoft-com:xml-dataservicemap:MetadataSource
urn:schemas-microsoft-com:xml-dataservicemap:MetadataFile
urn:schemas-microsoft-com:xml-dataservicemap:ExtensionFile
System.Web.Compilation.WCFModel.DataSvcMapFile:urn:schemas-microsoft-com:xml-dataservicemap:ReferenceGroup:True:
Read8_ReferenceGroup
Write8_ReferenceGroup
System.Web.Resources.WCFModelStrings
ReferenceGroup_AppendLinePosition
ReferenceGroup_DataContractExcludedAndIncluded
ReferenceGroup_DuplicatedSchemaItems
ReferenceGroup_DuplicatedSchemaItemsIgnored
ReferenceGroup_EmptyAddress
ReferenceGroup_EmptyProtocol
ReferenceGroup_FailedToGenerateCode
ReferenceGroup_FailedToLoadAssembly
ReferenceGroup_FieldDefinedDifferentlyInDuplicatedMessage
ReferenceGroup_FieldDefinedInOneOfDuplicatedMessage
ReferenceGroup_InvalidFileName
ReferenceGroup_InvalidSourceId
ReferenceGroup_OperationDefinedDifferently
ReferenceGroup_OperationDefinedInOneOfDuplicatedServiceContract
ReferenceGroup_ServiceContractMappingMissMatch
ReferenceGroup_SharedTypeMustBePublic
ReferenceGroup_TwoExternalFilesWithSameName
System.Web.Extensions.ClientServices.ClientData
|SQL/CE|
|FILES|
Data Source = |SQL/CE|
|Isolated_Storage|
DefaultView
_!ItemCount
~/ScriptResource.axd
"\/Date(
__type
/jsdebug
http://schemas.datacontract.org/2004/07/
Profile_JSON_AppService.axd
Authentication_JSON_AppService.axd
Role_JSON_AppService.axd
http://schemas.microsoft.com/2003/10/Serialization/
string
http://www.w3.org/2001/XMLSchema
ActualType
Namespace
EnumerationValue
unbounded
pageRedirect
hiddenField
asyncPostBackControlIDs
postBackControlIDs
updatePanelIDs
asyncPostBackTimeout
childUpdatePanelIDs
panelsToRefreshIDs
formAction
dataItem
dataItemJson
arrayDeclaration
expando
onSubmit
scriptBlock
scriptStartupBlock
scriptDispose
error
System.Web.UI.PageRequestManager:AsyncPostBackError
System.Web.UI.PageRequestManager:AsyncPostBackErrorMessage
System.Web.UI.PageRequestManager:AsyncPostBackErrorHttpCode
pageTitle
focus
__ASYNCPOST
updatePanel
0.0.0.0
App_WebReferences
.svcmap
.datasvcmap
Reference.config
service
urn:schemas-microsoft-com:xml-wcfservicemap
urn:schemas-microsoft-com:xml-dataservicemap
disco
http://schemas.xmlsoap.org/disco/
discovery
http://schemas.xmlsoap.org/wsdl/
definitions
schema
urn:schemas-microsoft-com:xml-msdata
IsDataSet
WS-MetadataExchange
http://schemas.xmlsoap.org/ws/2004/09/mex
Metadata
wsdl-ex
http://schemas.microsoft.com/ws/2005/01/WSDL/Extensions/ContractInheritance
http://www.w3.org/XML/1998/namespace
http://schemas.xmlsoap.org/ws/2004/08/addressing
EndpointReference
http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd
http://schemas.xmlsoap.org/ws/2004/09/policy
http://www.w3.org/ns/ws-policy
PolicyURIs
PolicyReference
ExactlyOne
Policy
http://schemas.microsoft.com/ado/2007/06/edmx
2.0.0.0
3.5.0.0
System.Web.Extensions.dll
 Microsoft Corporation.  All rights reserved.
3.5.30729.9151
b77a5c561934e089
00000000000000000400000000000000
mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
System.Data.OracleClient, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
System.Runtime.Remoting, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
b03f5f7f11d50a3a
002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293
31bf3856ad364e35
0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9
System.ComponentModel.DataAnnotations, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
System.Configuration.Install, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
System.Deployment, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
System.Drawing.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
System.EnterpriseServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
System.Management, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
System.Runtime.Serialization.Formatters.Soap, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
System.Web.Abstractions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
System.Web.DynamicData, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
System.Web.DynamicData.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
System.Web.Entity.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
System.Web.Mobile, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
System.Web.RegularExpressions, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
System.Web.Routing, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
System.Web.Services, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
Microsoft.VisualStudio, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
Microsoft.VisualStudio.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
VJSharpCodeProvider, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
b7bd7678b977bd8f
ASP.BrowserCapsFactory, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f
Microsoft.VSDesigner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
Microsoft.VisualStudio.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
Microsoft.Web.Design.Client, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
vSystem.Web.AspNetHostingPermissionAttribute, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
TUrSystem.Web.AspNetHostingPermissionLevel, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
Level
System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode, System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
RequirementsMode
Namespace'http://asp.net/ApplicationServices/v200
Namespace'http://asp.net/ApplicationServices/v200TU
System.ServiceModel.InstanceContextMode, System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
InstanceContextMode
TU{System.ServiceModel.ConcurrencyMode, System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
ConcurrencyMode
GetKnownTypes1System.Web.ApplicationServices.KnownTypesProvider
System.Security.Permissions.PermissionSetAttribute, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
FullTrust
System.Web.UI.Design.WebControls.DataPagerDesigner, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
#System.Web.UI.WebControls.DataPager
DataPager.ico
XSystem.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
System.Web.UI.Design.WebControls.DataPagerFieldTypeEditor, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35uSystem.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
Default
DataPager_Fields
0System.Web.UI.WebControls.IPageableItemContainer
Paging
DataPager_PagedControlID
DataPager_PageSize
DataPager_QueryStringField
Behavior
DataPagerField_Visible
Selecting
ContextTypeName
System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
LinqDataSource_Description
LinqDataSource_DisplayName
(System.Web.UI.WebControls.LinqDataSource
LinqDataSource.ico
(LinqDataSource_AutoGenerateOrderByClause
&LinqDataSource_AutoGenerateWhereClause
LinqDataSource_AutoPage
LinqDataSource_AutoSort
LinqDataSource_ContextTypeName
LinqDataSource_DeleteParameters
LinqDataSource_EnableDelete
LinqDataSource_EnableInsert
#LinqDataSource_EnableObjectTracking
LinqDataSource_EnableUpdate
LinqDataSource_GroupBy
 LinqDataSource_GroupByParameters
LinqDataSource_InsertParameters
LinqDataSource_OrderBy
 LinqDataSource_OrderByParameters
LinqDataSource_OrderGroupsBy
&LinqDataSource_OrderGroupsByParameters
LinqDataSource_Select
LinqDataSource_SelectParameters
-LinqDataSource_StoreOriginalValuesInViewState
LinqDataSource_TableName
LinqDataSource_UpdateParameters
LinqDataSource_Where
LinqDataSource_WhereParameters
LinqDataSource_ContextCreated
LinqDataSource_ContextCreating
LinqDataSource_ContextDisposing
LinqDataSource_Deleted
LinqDataSource_Deleting
LinqDataSource_Inserted
LinqDataSource_Inserting
LinqDataSource_Selected
LinqDataSource_Selecting
LinqDataSource_Updated
LinqDataSource_Updating
System.Security.Permissions.SecurityPermissionAttribute, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
System.Security.Permissions.SecurityPermissionFlag, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
Flags
SelectedValue
System.Web.UI.Design.WebControls.ListViewDesigner, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
SelectedIndexChanged
"System.Web.UI.WebControls.ListView
ListView.ico
*System.Web.UI.WebControls.ListViewDataItem
 ListView_AlternatingItemTemplate
!ListView_ConvertEmptyStringToNull
ListView_DataKeys
System.Web.UI.Design.WebControls.DataFieldEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3auSystem.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
ListView_DataKeyNames
}System.Web.UI.WebControls.StringArrayConverter, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
ListView_EditIndex
ListView_EditItem
ListView_EditItemTemplate
"System.Web.UI.WebControls.ListView
ListView_EmptyDataTemplate
&System.Web.UI.WebControls.ListViewItem
ListView_EmptyItemTemplate
ListView_EnableModelValidation
groupPlaceholder
ListView_GroupPlaceholderID
ListView_GroupItemCount
ListView_GroupSeparatorTemplate
ListView_GroupTemplate
ListView_InsertItem
U,System.Web.UI.WebControls.InsertItemPosition
ListView_InsertItemPosition
&System.Web.UI.WebControls.ListViewItem
ListView_InsertItemTemplate
itemPlaceholder
ListView_ItemPlaceholderID
ListView_Items
ListView_ItemSeparatorTemplate
ListView_ItemTemplate
ListView_LayoutTemplate
ListView_SelectedIndex
ListView_SelectedItemTemplate
UvSystem.Web.UI.WebControls.SortDirection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
ListView_SortDirection
Sorting
ListView_SortExpression
Action
ListView_OnItemDeleted
ListView_OnItemInserted
ListView_OnItemUpdated
ListView_OnItemCanceling
ListView_OnItemCommand
ListView_OnItemCreated
ListView_OnItemDataBound
ListView_OnItemDeleting
ListView_OnItemEditing
ListView_OnItemInserting
ListView_OnItemUpdating
ListView_OnLayoutCreated
 ListView_OnPagePropertiesChanged
!ListView_OnPagePropertiesChanging
ListView_OnSelectedIndexChanged
 ListView_OnSelectedIndexChanging
ListView_OnSorted
ListView_OnSorting
Appearance
%NextPreviousPagerField_ButtonCssClass
UsSystem.Web.UI.WebControls.ButtonType, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
!NextPreviousPagerField_ButtonType
uSystem.Web.UI.Design.ImageUrlEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3auSystem.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
(NextPreviousPagerField_FirstPageImageUrl
'NextPrevPagerField_DefaultFirstPageText
$NextPreviousPagerField_FirstPageText
'NextPreviousPagerField_LastPageImageUrl
&NextPrevPagerField_DefaultLastPageText
#NextPreviousPagerField_LastPageText
'NextPreviousPagerField_NextPageImageUrl
&NextPrevPagerField_DefaultNextPageText
#NextPreviousPagerField_NextPageText
+NextPreviousPagerField_PreviousPageImageUrl
*NextPrevPagerField_DefaultPreviousPageText
'NextPreviousPagerField_PreviousPageText
=NextPreviousPagerField_RenderNonBreakingSpacesBetweenControls
4NextPreviousPagerField_RenderDisabledButtonsAsLabels
*NextPreviousPagerField_ShowFirstPageButton
)NextPreviousPagerField_ShowLastPageButton
)NextPreviousPagerField_ShowNextPageButton
-NextPreviousPagerField_ShowPreviousPageButton
NumericPagerField_ButtonCount
NumericPagerField_ButtonType
*NumericPagerField_CurrentPageLabelCssClass
"NumericPagerField_NextPageImageUrl
%NumericPagerField_DefaultNextPageText
NumericPagerField_NextPageText
,NumericPagerField_NextPreviousButtonCssClass
'NumericPagerField_NumericButtonCssClass
&NumericPagerField_PreviousPageImageUrl
)NumericPagerField_DefaultPreviousPageText
"NumericPagerField_PreviousPageText
8NumericPagerField_RenderNonBreakingSpacesBetweenControls
 TemplatePagerField_PagerTemplate
,System.Web.UI.WebControls.DataPagerFieldItem
!TemplatePagerField_OnPagerCommand
IsRequired
DefaultValue
MinLength
IsRequired
IsKey
DefaultValue
"System.Web.Configuration.Converter
enabled
DefaultValue
requireSSL
DefaultValue
converters
IsKey
DefaultValue
recursionLimit
DefaultValue
maxJsonLength
DefaultValue
readAccessProperties
DefaultValue
writeAccessProperties
DefaultValue
enableCaching
DefaultValue
enableCompression
DefaultValue
webServices
scriptResourceHandler
jsonSerialization
profileService
authenticationService
roleService
scripting
System.Security.Permissions.ReflectionPermissionAttribute, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
Unrestricted
AllowMultiple
System.Configuration.ConfigurationPermissionAttribute, System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
Unrestricted
#UpdatePanelControlTrigger_ControlID
System.Web.UI.Design.AsyncPostBackTriggerControlIDConverter, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
AsyncPostBackTrigger_EventName
System.Web.UI.Design.AsyncPostBackTriggerEventNameConverter, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
2System.Web.UI.EmptyStringExpandableObjectConverter
ApplicationServiceManager_Path
"ScriptReference_NotifyScriptLoaded
ScriptReference_Path
"ScriptReference_ResourceUICultures
System.Web.UI.ScriptMode
ScriptReference_ScriptMode
 CompositeScriptReference_Scripts
System.Web.UI.Design.CollectionEditorBase, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35uSystem.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
TargetControlID
System.Web.UI.Design.ExtenderControlDesigner, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
System.Web.UI.Design.ExtenderControlToolboxItem, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
ExtenderControl_TargetControlID
System.Web.UI.Design.PostBackTriggerControlIDConverter, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
$ProfileServiceManager_LoadProperties
Inherited
AllowMultiple
Inherited
AllowMultiple
RoleServiceManager_LoadRoles
Scripts
System.Web.UI.Design.ScriptManagerDesigner, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
EmbeddedResourceFinder&System.Web.Resources.ScriptManager.bmp
'ScriptManager_AllowCustomErrorsRedirect
'ScriptManager_AsyncPostBackErrorMessage
"ScriptManager_AsyncPostBackTimeout
#ScriptManager_AuthenticationService
#ScriptManager_ClientNavigateHandler
ScriptManager_CompositeScript
ScriptManager_EmptyPageUrl
pSystem.Web.UI.Design.UrlEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3auSystem.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
ScriptManager_EnableHistory
ScriptManager_EnablePageMethods
$ScriptManager_EnablePartialRendering
'ScriptManager_EnableScriptGlobalization
&ScriptManager_EnableScriptLocalization
&ScriptManager_EnableSecureHistoryState
!ScriptManager_LoadScriptsBeforeUI
ScriptManager_ProfileService
ScriptManager_RoleService
ScriptManager_ScriptMode
ScriptManager_Scripts
ScriptManager_ScriptPath
ScriptManager_Services
 ScriptManager_AsyncPostBackError
ScriptManager_Navigate
-ScriptManager_ResolveCompositeScriptReference
$ScriptManager_ResolveScriptReference
System.Web.UI.Design.ScriptManagerProxyDesigner, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
EmbeddedResourceFinder+System.Web.Resources.ScriptManagerProxy.bmp
ScriptReference_Assembly
 ScriptReference_IgnoreScriptPath
ScriptReference_Name
AllowMultiple
ServiceReference_InlineScript
ServiceReference_Path
AllowMultiple
Interval
System.Web.UI.Design.TimerDesigner, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
EmbeddedResourceFinder
System.Web.Resources.Timer.bmp
Timer_TimerEnable
Timer_TimerInterval
Timer_TimerTick
Triggers
System.Web.UI.Design.UpdatePanelDesigner, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
EmbeddedResourceFinder$System.Web.Resources.UpdatePanel.bmp
UpdatePanel_ChildrenAsTriggers
UpdatePanel_RenderMode
Layout
U#System.Web.UI.UpdatePanelRenderMode
System.Web.UI.Design.UpdatePanelTriggerCollectionEditor, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35uSystem.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
UpdatePanel_Triggers
UpdatePanel_UpdateMode
U#System.Web.UI.UpdatePanelUpdateMode
AssociatedUpdatePanelID
System.Web.UI.Design.UpdateProgressDesigner, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
EmbeddedResourceFinder'System.Web.Resources.UpdateProgress.bmp
System.Web.UI.UpdatePanel
&UpdateProgress_AssociatedUpdatePanelID
CSystem.Web.UI.Design.UpdateProgressAssociatedUpdatePanelIDConverter
UpdateProgress_DisplayAfter
UpdateProgress_ProgressTemplate
UpdateProgress_DynamicLayout
3System.Resources.Tools.StronglyTypedResourceBuilder
2.0.0.0
System.Security.Permissions.PermissionSetAttribute, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
FullTrustvSystem.Web.AspNetHostingPermissionAttribute, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
TUrSystem.Web.AspNetHostingPermissionLevel, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
Level
ElementName
ExcludedTypes@
ExcludedType.System.Web.Compilation.WCFModel.ReferencedType
ElementName
NamespaceMappingsF
NamespaceMapping0System.Web.Compilation.WCFModel.NamespaceMapping
ElementName
CollectionMappingsO
CollectionMapping8System.Web.Compilation.WCFModel.ReferencedCollectionType
ElementName
ReferencedAssembliesJ
ReferencedAssembly2System.Web.Compilation.WCFModel.ReferencedAssembly
ElementName
ReferencedDataContractTypesN
ReferencedDataContractType.System.Web.Compilation.WCFModel.ReferencedType
ElementName
ServiceContractMappingsK
ServiceContractMapping/System.Web.Compilation.WCFModel.ContractMapping
Auto"
DataContractSerializer
XmlSerializer
MetadataType
Unknown
Disco
Schema
Policy
Dictionary
Namespace+urn:schemas-microsoft-com:xml-wcfservicemapT
ElementName
ReferenceGroup
Order
ElementName
ExtensionsT
Order
ExtensionFile-System.Web.Compilation.WCFModel.ExtensionFile
ElementName
MetadataT
Order
MetadataFile,System.Web.Compilation.WCFModel.MetadataFile
ElementName
MetadataSourcesT
Order
MetadataSource.System.Web.Compilation.WCFModel.MetadataSource
Namespace,urn:schemas-microsoft-com:xml-dataservicemapT
ElementName
ReferenceGroup)
ElementName
ExtensionsT
Order
ElementName
MetadataT
Order
ElementName
MetadataSourcesT
Order
System.Web.Extensions.dll
Microsoft Corporation
Microsoft
 .NET Framework
 Microsoft Corporation.  All rights reserved.
3.5.30729.9151
3.5.0.0
en-US
(f:\dd\tools\devdiv\35MSSharedLib1024.snk
System.Web,
System.Web.Abstractions,
fSystem.Web.Extensions.Test, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293
hSystem.Web.Extensions.Design, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9
MicrosoftAjax.js
application/x-javascript
MicrosoftAjaxTimer.js
application/x-javascript
MicrosoftAjaxWebForms.js
application/x-javascript
MicrosoftAjax.debug.js
application/x-javascript
MicrosoftAjaxTimer.debug.js
application/x-javascript
MicrosoftAjaxWebForms.debug.js
application/x-javascript
MicrosoftAjax.js&System.Web.Resources.ScriptLibrary.Res
Sys.Res
MicrosoftAjax.debug.js,System.Web.Resources.ScriptLibrary.Res.debug
Sys.Res
MicrosoftAjaxWebForms.js/System.Web.Resources.ScriptLibrary.WebForms.Res
Sys.WebForms.Res
MicrosoftAjaxWebForms.debug.js5System.Web.Resources.ScriptLibrary.WebForms.Res.debug
Sys.WebForms.Res
System.Web.UI
System.Web.UI.WebControls
WrapNonExceptionThrows
System.Security.Permissions.SecurityPermissionAttribute, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
Execution
System.Web.Extensions.pdb
_CorDllMain
mscoree.dll
VS_VERSION_INFO
VarFileInfo
Translation
StringFileInfo
000004b0
Comments
System.Web.Extensions.dll
CompanyName
Microsoft Corporation
FileDescription
System.Web.Extensions.dll
FileVersion
3.5.30729.9151
InternalName
System.Web.Extensions.dll
LegalCopyright
 Microsoft Corporation.  All rights reserved.
OriginalFilename
System.Web.Extensions.dll
ProductName
Microsoft
 .NET Framework
ProductVersion
3.5.30729.9151
Assembly Version
3.5.0.0
