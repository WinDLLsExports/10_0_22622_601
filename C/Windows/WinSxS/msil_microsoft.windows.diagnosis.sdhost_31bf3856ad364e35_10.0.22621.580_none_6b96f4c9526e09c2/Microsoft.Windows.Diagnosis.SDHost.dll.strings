!This program cannot be run in DOS mode.
.text
`.rsrc
@.reloc
v4.0.30319
#Strings
#GUID
#Blob
Nullable`1
PSDataCollection`1
InitialSessionStateEntryCollection`1
Microsoft.Win32
Int32
<Module>
s_SDIAG_E_CANCELLED
s_E_FAIL
s_SDIAG_E_POWERSHELL
System.IO
ThrowExceptionForHR
s_SDIAG_E_SCRIPT
s_SDIAG_E_MANAGEDHOST
s_Data
mscorlib
get_FullyQualifiedErrorId
get_CurrentThread
s_RegistryPathProtectionDisabled
s_RegistryKeyProtectionDisabled
AppendChild
PSCommand
AddCommand
ExecuteCommand
s_LoadPowershellCmdletProxiesCommand
m_SetScriptCommand
m_ResetScriptCommand
Append
ErrorRecord
m_Runspace
set_Runspace
CreateRunspace
InitializeRunspace
XmlNode
CreateTextNode
System.Management.Automation.Language
Invoke
SetVariable
RuntimeTypeHandle
GetTypeFromHandle
s_Name
GetFileName
tagName
s_ScriptName
get_ScriptName
get_OffsetInLine
s_ScriptLine
m_Engine
engine
ClassInterfaceType
set_CurrentUICulture
set_CurrentCulture
culture
UpdateDiagRootCause
s_UpdateRootcause
Microsoft.Windows.Diagnosis.Commands.UpdateDiagRootcause
Create
get_State
InitialSessionState
PSInvocationState
GuidAttribute
ClassInterfaceAttribute
NeutralResourcesLanguageAttribute
DebuggableAttribute
ComVisibleAttribute
AssemblyKeyFileAttribute
CreateAttribute
TargetFrameworkAttribute
XmlAttribute
AssemblyDelaySignAttribute
AssemblyFileVersionAttribute
CompilationRelaxationsAttribute
AssemblyProductAttribute
AssemblyCopyrightAttribute
CLSCompliantAttribute
AssemblyCompanyAttribute
RuntimeCompatibilityAttribute
get_HasValue
GetValue
Initialize
System.Threading
System.Runtime.Versioning
ToString
errorString
GetString
s_Path
m_ResultPath
resultPath
scriptPath
AsyncCallback
m_Lock
Marshal
Cancel
System.Collections.ObjectModel
Microsoft.Windows.Diagnosis.SDHost.dll
Microsoft.PowerShell
m_PowerShell
System.Xml
ConvertStringToXml
ConvertScriptErrorToXml
get_OuterXml
errorXml
get_Item
System
Boolean
s_ScriptColumn
powerShellVersion
s_SetLocation
s_DefaultLocation
System.Management.Automation
CreateXmlDeclaration
CodeGeneration
System.Globalization
IScriptedDiagnosticInteraction
System.Reflection
XmlAttributeCollection
MatchCollection
s_ScriptException
Microsoft.Windows.Diagnosis.SDCommon
get_Reason
CultureInfo
PSInvocationStateInfo
get_InvocationStateInfo
get_InvocationInfo
BeginStop
ActiveModeVar
EngineVar
Clear
get_ScriptLineNumber
m_ResourceManager
PSAuthorizationManager
set_AuthorizationManager
AddParameter
Enter
get_Error
s_PowerShellError
s_ScriptError
scriptError
.ctor
Monitor
System.Diagnostics
Microsoft.Windows.Diagnosis.Commands
get_Commands
set_Commands
System.Management.Automation.Runspaces
System.Runtime.InteropServices
System.Runtime.CompilerServices
System.Resources
ManagedHostResources.resources
DebuggingModes
Matches
s_PowershellCmdletProxies
parameterNames
get_Attributes
parameterValues
Microsoft.Windows.Diagnosis
get_Streams
PSDataStreams
System.Text.RegularExpressions
RegexOptions
Microsoft.Windows.Diagnosis.Commands.WriteDiagProgress
s_SetProgress
Concat
PSObject
CreateDefault
GetValueOrDefault
IAsyncResult
CreateElement
XmlElement
XmlDocument
EscapeSingleQuotedStringContent
get_Count
AddScript
RunScript
s_UpdateReport
Microsoft.Windows.Diagnosis.Commands.UpdateDiagReport
AddXmlToReport
SendErrorToReport
Microsoft.Windows.Diagnosis.SDHost
IScriptedDiagnosticHost
ManagedHost
Microsoft.Windows.Diagnosis.Commands.GetDiagInput
s_GetInput
XmlText
set_InnerText
s_ScriptErrorText
s_ParameterValueRegex
GetExecutingAssembly
RunspaceFactory
GetCurrentDirectory
Microsoft.Windows.Diagnosis.Commands.WriteDiagTelemetry
s_WriteTelmetry
SessionStateCommandEntry
SessionStateCmdletEntry
Registry
IsNullOrEmpty
get_SessionStateProxy
ManagedHostResources
update-diagrootcause
get-diaginput
update-diagreport
write-diagprogress
write-diagtelemetry
ScriptedDiagnostics
InteractivityAgent
RealMode
ScriptException
ScriptError
HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\ScriptedDiagnostics
TurnOffCheck
set-location
# Caller validation to ensure we are calling from and actual script, and not from a malicious command line
function Test-Caller {
    param(
        [Parameter(Mandatory=$true)]
        [System.Management.Automation.CallStackFrame[]]
        $CallStack
    )
    $caller = $CallStack[1]
    $location = $caller.Location
    Write-Verbose -Message $('caller: ' + $location) -Verbose
    if ($location -eq '<No file>') {
        throw 'Invoke-Expression cannot be used in a script'
    }
# Generated with
# $var = New-Object System.Management.Automation.CommandMetadata (Get-Command Invoke-Expression)
# [System.Management.Automation.ProxyCommand]::Create($var) | Out-File .\Invoke-Expression.ps1
function Invoke-Expression {
    [CmdletBinding(HelpUri='https://go.microsoft.com/fwlink/?LinkID=2097030')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [string]
    ${Command})
begin
    try {
        Test-Caller -CallStack (Get-PSCallStack)
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer))
        {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('Microsoft.PowerShell.Utility\Invoke-Expression', [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters }
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
process
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
.ForwardHelpTargetName Microsoft.PowerShell.Utility\Invoke-Expression
.ForwardHelpCategory Cmdlet
# Generated with
# $var = New-Object System.Management.Automation.CommandMetadata (Get-Command Invoke-Command)
# [System.Management.Automation.ProxyCommand]::Create($var) | Out-File .\Invoke-Command.ps1
function Invoke-Command {
    [CmdletBinding(DefaultParameterSetName='InProcess', HelpUri='https://go.microsoft.com/fwlink/?LinkID=2096789', RemotingCapability='OwnedByCommand')]
    param(
        [Parameter(ParameterSetName='Session', Position=0)]
        [Parameter(ParameterSetName='FilePathRunspace', Position=0)]
        [ValidateNotNullOrEmpty()]
        [System.Management.Automation.Runspaces.PSSession[]]
        ${Session},
        [Parameter(ParameterSetName='ComputerName', Position=0)]
        [Parameter(ParameterSetName='FilePathComputerName', Position=0)]
        [Alias('Cn')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${ComputerName},
        [Parameter(ParameterSetName='ComputerName', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='Uri', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathComputerName', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathUri', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='VMId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='VMName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathVMId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathVMName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [pscredential]
        [System.Management.Automation.CredentialAttribute()]
        ${Credential},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [Parameter(ParameterSetName='SSHHost')]
        [ValidateRange(1, 65535)]
        [int]
        ${Port},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [switch]
        ${UseSSL},
        [Parameter(ParameterSetName='ComputerName', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='Uri', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathComputerName', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathUri', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ContainerId', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='VMId', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='VMName', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathContainerId', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathVMId', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathVMName', ValueFromPipelineByPropertyName=$true)]
        [string]
        ${ConfigurationName},
        [Parameter(ParameterSetName='ComputerName', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathComputerName', ValueFromPipelineByPropertyName=$true)]
        [string]
        ${ApplicationName},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='Session')]
        [Parameter(ParameterSetName='Uri')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [Parameter(ParameterSetName='FilePathRunspace')]
        [Parameter(ParameterSetName='FilePathUri')]
        [Parameter(ParameterSetName='VMId')]
        [Parameter(ParameterSetName='VMName')]
        [Parameter(ParameterSetName='ContainerId')]
        [Parameter(ParameterSetName='FilePathVMId')]
        [Parameter(ParameterSetName='FilePathVMName')]
        [Parameter(ParameterSetName='FilePathContainerId')]
        [int]
        ${ThrottleLimit},
        [Parameter(ParameterSetName='Uri', Position=0)]
        [Parameter(ParameterSetName='FilePathUri', Position=0)]
        [Alias('URI','CU')]
        [ValidateNotNullOrEmpty()]
        [uri[]]
        ${ConnectionUri},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='Session')]
        [Parameter(ParameterSetName='Uri')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [Parameter(ParameterSetName='FilePathRunspace')]
        [Parameter(ParameterSetName='FilePathUri')]
        [Parameter(ParameterSetName='VMId')]
        [Parameter(ParameterSetName='VMName')]
        [Parameter(ParameterSetName='ContainerId')]
        [Parameter(ParameterSetName='FilePathVMId')]
        [Parameter(ParameterSetName='FilePathVMName')]
        [Parameter(ParameterSetName='FilePathContainerId')]
        [Parameter(ParameterSetName='SSHHost')]
        [Parameter(ParameterSetName='SSHHostHashParam')]
        [Parameter(ParameterSetName='FilePathSSHHost')]
        [Parameter(ParameterSetName='FilePathSSHHostHash')]
        [switch]
        ${AsJob},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [Parameter(ParameterSetName='Uri')]
        [Parameter(ParameterSetName='FilePathUri')]
        [Alias('Disconnected')]
        [switch]
        ${InDisconnectedSession},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${SessionName},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='Session')]
        [Parameter(ParameterSetName='Uri')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [Parameter(ParameterSetName='FilePathRunspace')]
        [Parameter(ParameterSetName='FilePathUri')]
        [Parameter(ParameterSetName='VMId')]
        [Parameter(ParameterSetName='VMName')]
        [Parameter(ParameterSetName='ContainerId')]
        [Parameter(ParameterSetName='FilePathVMId')]
        [Parameter(ParameterSetName='FilePathVMName')]
        [Parameter(ParameterSetName='FilePathContainerId')]
        [Parameter(ParameterSetName='SSHHost')]
        [Parameter(ParameterSetName='SSHHostHashParam')]
        [Parameter(ParameterSetName='FilePathSSHHost')]
        [Parameter(ParameterSetName='FilePathSSHHostHash')]
        [Alias('HCN')]
        [switch]
        ${HideComputerName},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='Session')]
        [Parameter(ParameterSetName='Uri')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [Parameter(ParameterSetName='FilePathRunspace')]
        [Parameter(ParameterSetName='FilePathUri')]
        [Parameter(ParameterSetName='ContainerId')]
        [Parameter(ParameterSetName='FilePathContainerId')]
        [Parameter(ParameterSetName='SSHHostHashParam')]
        [Parameter(ParameterSetName='SSHHost')]
        [string]
        ${JobName},
        [Parameter(ParameterSetName='ComputerName', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='Session', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='Uri', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='InProcess', Mandatory=$true, Position=0)]
        [Parameter(ParameterSetName='VMId', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='VMName', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='ContainerId', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='SSHHost', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='SSHHostHashParam', Mandatory=$true, Position=1)]
        [Alias('Command')]
        [ValidateNotNull()]
        [scriptblock]
        ${ScriptBlock},
        [Parameter(ParameterSetName='InProcess')]
        [switch]
        ${NoNewScope},
        [Parameter(ParameterSetName='FilePathComputerName', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='FilePathRunspace', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='FilePathUri', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='FilePathVMId', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='FilePathVMName', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='FilePathContainerId', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='FilePathSSHHost', Mandatory=$true)]
        [Parameter(ParameterSetName='FilePathSSHHostHash', Mandatory=$true)]
        [Alias('PSPath')]
        [ValidateNotNull()]
        [string]
        ${FilePath},
        [Parameter(ParameterSetName='Uri')]
        [Parameter(ParameterSetName='FilePathUri')]
        [switch]
        ${AllowRedirection},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='Uri')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [Parameter(ParameterSetName='FilePathUri')]
        [System.Management.Automation.Remoting.PSSessionOption]
        ${SessionOption},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [Parameter(ParameterSetName='Uri')]
        [Parameter(ParameterSetName='FilePathUri')]
        [System.Management.Automation.Runspaces.AuthenticationMechanism]
        ${Authentication},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [Parameter(ParameterSetName='Uri')]
        [Parameter(ParameterSetName='FilePathUri')]
        [switch]
        ${EnableNetworkAccess},
        [Parameter(ParameterSetName='ContainerId')]
        [Parameter(ParameterSetName='FilePathContainerId')]
        [switch]
        ${RunAsAdministrator},
        [Parameter(ParameterSetName='SSHHost', Mandatory=$true)]
        [Parameter(ParameterSetName='FilePathSSHHost', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${HostName},
        [Parameter(ParameterSetName='SSHHost')]
        [Parameter(ParameterSetName='FilePathSSHHost')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},
        [Parameter(ParameterSetName='SSHHost')]
        [Parameter(ParameterSetName='FilePathSSHHost')]
        [Alias('IdentityFilePath')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${KeyFilePath},
        [Parameter(ParameterSetName='SSHHost')]
        [Parameter(ParameterSetName='FilePathSSHHost')]
        [string]
        ${Subsystem},
        [Parameter(ParameterSetName='SSHHost')]
        [Parameter(ParameterSetName='FilePathSSHHost')]
        [int]
        ${ConnectingTimeout},
        [Parameter(ParameterSetName='SSHHost')]
        [Parameter(ParameterSetName='FilePathSSHHost')]
        [ValidateSet('true')]
        [switch]
        ${SSHTransport},
        [Parameter(ParameterSetName='SSHHostHashParam', Mandatory=$true)]
        [Parameter(ParameterSetName='FilePathSSHHostHash', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [hashtable[]]
        ${SSHConnection},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='Session')]
        [Parameter(ParameterSetName='Uri')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [Parameter(ParameterSetName='FilePathRunspace')]
        [Parameter(ParameterSetName='FilePathUri')]
        [Parameter(ParameterSetName='VMId')]
        [Parameter(ParameterSetName='VMName')]
        [Parameter(ParameterSetName='ContainerId')]
        [Parameter(ParameterSetName='FilePathVMId')]
        [Parameter(ParameterSetName='FilePathVMName')]
        [Parameter(ParameterSetName='FilePathContainerId')]
        [Parameter(ParameterSetName='SSHHost')]
        [Parameter(ParameterSetName='SSHHostHashParam')]
        [Parameter(ParameterSetName='FilePathSSHHost')]
        [Parameter(ParameterSetName='FilePathSSHHostHash')]
        [switch]
        ${RemoteDebug},
        [Parameter(ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},
        [Alias('Args')]
        [System.Object[]]
        ${ArgumentList},
        [Parameter(ParameterSetName='VMId', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathVMId', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
        [Alias('VMGuid')]
        [ValidateNotNullOrEmpty()]
        [guid[]]
        ${VMId},
        [Parameter(ParameterSetName='VMName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathVMName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${VMName},
        [Parameter(ParameterSetName='ContainerId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathContainerId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${ContainerId},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='Uri')]
        [string]
        ${CertificateThumbprint})
    begin
    {
        try {
            Test-Caller -CallStack (Get-PSCallStack)
            $outBuffer = $null
            if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer))
            {
                $PSBoundParameters['OutBuffer'] = 1
            }
            $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('Microsoft.PowerShell.Core\Invoke-Command', [System.Management.Automation.CommandTypes]::Cmdlet)
            $scriptCmd = {& $wrappedCmd @PSBoundParameters }
            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($PSCmdlet)
        } catch {
            throw
        }
    }
    process
    {
        try {
            $steppablePipeline.Process($_)
        } catch {
            throw
        }
    }
    end
    {
        try {
            $steppablePipeline.End()
        } catch {
            throw
        }
    }
    <#
    .ForwardHelpTargetName Microsoft.PowerShell.Core\Invoke-Command
    .ForwardHelpCategory Cmdlet
    #>
# Exporting function overrides
Export-ModuleMember -Function @(
    'Invoke-Expression'
    'Invoke-Command'
(?i)(.*(invoke-expression|invoke-command|\$\([\b\s]*iex|\$\([\b\s]*icm|\[char\]).*)|(^[\b\s]*&.*)|(.*;[\b\s]*&.*)|(\[system\.)|("|')
UTF-8
ScriptName
ScriptLine
ScriptColumn
ScriptErrorText
Debug
ErrorRecordName
ErrorRecordDescription
IpxlM
InteractivityAgent
RealMode
update-diagrootcause
get-diaginput
update-diagreport
write-diagprogress
write-diagtelemetry
ScriptError
ScriptException
PowerShellException
ScriptName
ScriptLine
ScriptColumn
ScriptErrorText
set-location
(?i)(.*(invoke-expression|invoke-command|\$\([\b\s]*iex|\$\([\b\s]*icm|\[char\]).*)|(^[\b\s]*&.*)|(.*;[\b\s]*&.*)|(\[system\.)|("|')
HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\ScriptedDiagnostics
TurnOffCheck
# Caller validation to ensure we are calling from and actual script, and not from a malicious command line
function Test-Caller {
    param(
        [Parameter(Mandatory=$true)]
        [System.Management.Automation.CallStackFrame[]]
        $CallStack
    )
    $caller = $CallStack[1]
    $location = $caller.Location
    Write-Verbose -Message $('caller: ' + $location) -Verbose
    if ($location -eq '<No file>') {
        throw 'Invoke-Expression cannot be used in a script'
    }
# Generated with
# $var = New-Object System.Management.Automation.CommandMetadata (Get-Command Invoke-Expression)
# [System.Management.Automation.ProxyCommand]::Create($var) | Out-File .\Invoke-Expression.ps1
function Invoke-Expression {
    [CmdletBinding(HelpUri='https://go.microsoft.com/fwlink/?LinkID=2097030')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [string]
    ${Command})
begin
    try {
        Test-Caller -CallStack (Get-PSCallStack)
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer))
        {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('Microsoft.PowerShell.Utility\Invoke-Expression', [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters }
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
process
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
.ForwardHelpTargetName Microsoft.PowerShell.Utility\Invoke-Expression
.ForwardHelpCategory Cmdlet
# Generated with
# $var = New-Object System.Management.Automation.CommandMetadata (Get-Command Invoke-Command)
# [System.Management.Automation.ProxyCommand]::Create($var) | Out-File .\Invoke-Command.ps1
function Invoke-Command {
    [CmdletBinding(DefaultParameterSetName='InProcess', HelpUri='https://go.microsoft.com/fwlink/?LinkID=2096789', RemotingCapability='OwnedByCommand')]
    param(
        [Parameter(ParameterSetName='Session', Position=0)]
        [Parameter(ParameterSetName='FilePathRunspace', Position=0)]
        [ValidateNotNullOrEmpty()]
        [System.Management.Automation.Runspaces.PSSession[]]
        ${Session},
        [Parameter(ParameterSetName='ComputerName', Position=0)]
        [Parameter(ParameterSetName='FilePathComputerName', Position=0)]
        [Alias('Cn')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${ComputerName},
        [Parameter(ParameterSetName='ComputerName', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='Uri', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathComputerName', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathUri', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='VMId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='VMName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathVMId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathVMName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [pscredential]
        [System.Management.Automation.CredentialAttribute()]
        ${Credential},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [Parameter(ParameterSetName='SSHHost')]
        [ValidateRange(1, 65535)]
        [int]
        ${Port},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [switch]
        ${UseSSL},
        [Parameter(ParameterSetName='ComputerName', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='Uri', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathComputerName', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathUri', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ContainerId', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='VMId', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='VMName', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathContainerId', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathVMId', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathVMName', ValueFromPipelineByPropertyName=$true)]
        [string]
        ${ConfigurationName},
        [Parameter(ParameterSetName='ComputerName', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathComputerName', ValueFromPipelineByPropertyName=$true)]
        [string]
        ${ApplicationName},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='Session')]
        [Parameter(ParameterSetName='Uri')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [Parameter(ParameterSetName='FilePathRunspace')]
        [Parameter(ParameterSetName='FilePathUri')]
        [Parameter(ParameterSetName='VMId')]
        [Parameter(ParameterSetName='VMName')]
        [Parameter(ParameterSetName='ContainerId')]
        [Parameter(ParameterSetName='FilePathVMId')]
        [Parameter(ParameterSetName='FilePathVMName')]
        [Parameter(ParameterSetName='FilePathContainerId')]
        [int]
        ${ThrottleLimit},
        [Parameter(ParameterSetName='Uri', Position=0)]
        [Parameter(ParameterSetName='FilePathUri', Position=0)]
        [Alias('URI','CU')]
        [ValidateNotNullOrEmpty()]
        [uri[]]
        ${ConnectionUri},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='Session')]
        [Parameter(ParameterSetName='Uri')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [Parameter(ParameterSetName='FilePathRunspace')]
        [Parameter(ParameterSetName='FilePathUri')]
        [Parameter(ParameterSetName='VMId')]
        [Parameter(ParameterSetName='VMName')]
        [Parameter(ParameterSetName='ContainerId')]
        [Parameter(ParameterSetName='FilePathVMId')]
        [Parameter(ParameterSetName='FilePathVMName')]
        [Parameter(ParameterSetName='FilePathContainerId')]
        [Parameter(ParameterSetName='SSHHost')]
        [Parameter(ParameterSetName='SSHHostHashParam')]
        [Parameter(ParameterSetName='FilePathSSHHost')]
        [Parameter(ParameterSetName='FilePathSSHHostHash')]
        [switch]
        ${AsJob},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [Parameter(ParameterSetName='Uri')]
        [Parameter(ParameterSetName='FilePathUri')]
        [Alias('Disconnected')]
        [switch]
        ${InDisconnectedSession},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${SessionName},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='Session')]
        [Parameter(ParameterSetName='Uri')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [Parameter(ParameterSetName='FilePathRunspace')]
        [Parameter(ParameterSetName='FilePathUri')]
        [Parameter(ParameterSetName='VMId')]
        [Parameter(ParameterSetName='VMName')]
        [Parameter(ParameterSetName='ContainerId')]
        [Parameter(ParameterSetName='FilePathVMId')]
        [Parameter(ParameterSetName='FilePathVMName')]
        [Parameter(ParameterSetName='FilePathContainerId')]
        [Parameter(ParameterSetName='SSHHost')]
        [Parameter(ParameterSetName='SSHHostHashParam')]
        [Parameter(ParameterSetName='FilePathSSHHost')]
        [Parameter(ParameterSetName='FilePathSSHHostHash')]
        [Alias('HCN')]
        [switch]
        ${HideComputerName},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='Session')]
        [Parameter(ParameterSetName='Uri')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [Parameter(ParameterSetName='FilePathRunspace')]
        [Parameter(ParameterSetName='FilePathUri')]
        [Parameter(ParameterSetName='ContainerId')]
        [Parameter(ParameterSetName='FilePathContainerId')]
        [Parameter(ParameterSetName='SSHHostHashParam')]
        [Parameter(ParameterSetName='SSHHost')]
        [string]
        ${JobName},
        [Parameter(ParameterSetName='ComputerName', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='Session', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='Uri', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='InProcess', Mandatory=$true, Position=0)]
        [Parameter(ParameterSetName='VMId', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='VMName', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='ContainerId', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='SSHHost', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='SSHHostHashParam', Mandatory=$true, Position=1)]
        [Alias('Command')]
        [ValidateNotNull()]
        [scriptblock]
        ${ScriptBlock},
        [Parameter(ParameterSetName='InProcess')]
        [switch]
        ${NoNewScope},
        [Parameter(ParameterSetName='FilePathComputerName', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='FilePathRunspace', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='FilePathUri', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='FilePathVMId', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='FilePathVMName', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='FilePathContainerId', Mandatory=$true, Position=1)]
        [Parameter(ParameterSetName='FilePathSSHHost', Mandatory=$true)]
        [Parameter(ParameterSetName='FilePathSSHHostHash', Mandatory=$true)]
        [Alias('PSPath')]
        [ValidateNotNull()]
        [string]
        ${FilePath},
        [Parameter(ParameterSetName='Uri')]
        [Parameter(ParameterSetName='FilePathUri')]
        [switch]
        ${AllowRedirection},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='Uri')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [Parameter(ParameterSetName='FilePathUri')]
        [System.Management.Automation.Remoting.PSSessionOption]
        ${SessionOption},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [Parameter(ParameterSetName='Uri')]
        [Parameter(ParameterSetName='FilePathUri')]
        [System.Management.Automation.Runspaces.AuthenticationMechanism]
        ${Authentication},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [Parameter(ParameterSetName='Uri')]
        [Parameter(ParameterSetName='FilePathUri')]
        [switch]
        ${EnableNetworkAccess},
        [Parameter(ParameterSetName='ContainerId')]
        [Parameter(ParameterSetName='FilePathContainerId')]
        [switch]
        ${RunAsAdministrator},
        [Parameter(ParameterSetName='SSHHost', Mandatory=$true)]
        [Parameter(ParameterSetName='FilePathSSHHost', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${HostName},
        [Parameter(ParameterSetName='SSHHost')]
        [Parameter(ParameterSetName='FilePathSSHHost')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},
        [Parameter(ParameterSetName='SSHHost')]
        [Parameter(ParameterSetName='FilePathSSHHost')]
        [Alias('IdentityFilePath')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${KeyFilePath},
        [Parameter(ParameterSetName='SSHHost')]
        [Parameter(ParameterSetName='FilePathSSHHost')]
        [string]
        ${Subsystem},
        [Parameter(ParameterSetName='SSHHost')]
        [Parameter(ParameterSetName='FilePathSSHHost')]
        [int]
        ${ConnectingTimeout},
        [Parameter(ParameterSetName='SSHHost')]
        [Parameter(ParameterSetName='FilePathSSHHost')]
        [ValidateSet('true')]
        [switch]
        ${SSHTransport},
        [Parameter(ParameterSetName='SSHHostHashParam', Mandatory=$true)]
        [Parameter(ParameterSetName='FilePathSSHHostHash', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [hashtable[]]
        ${SSHConnection},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='Session')]
        [Parameter(ParameterSetName='Uri')]
        [Parameter(ParameterSetName='FilePathComputerName')]
        [Parameter(ParameterSetName='FilePathRunspace')]
        [Parameter(ParameterSetName='FilePathUri')]
        [Parameter(ParameterSetName='VMId')]
        [Parameter(ParameterSetName='VMName')]
        [Parameter(ParameterSetName='ContainerId')]
        [Parameter(ParameterSetName='FilePathVMId')]
        [Parameter(ParameterSetName='FilePathVMName')]
        [Parameter(ParameterSetName='FilePathContainerId')]
        [Parameter(ParameterSetName='SSHHost')]
        [Parameter(ParameterSetName='SSHHostHashParam')]
        [Parameter(ParameterSetName='FilePathSSHHost')]
        [Parameter(ParameterSetName='FilePathSSHHostHash')]
        [switch]
        ${RemoteDebug},
        [Parameter(ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},
        [Alias('Args')]
        [System.Object[]]
        ${ArgumentList},
        [Parameter(ParameterSetName='VMId', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathVMId', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
        [Alias('VMGuid')]
        [ValidateNotNullOrEmpty()]
        [guid[]]
        ${VMId},
        [Parameter(ParameterSetName='VMName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathVMName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${VMName},
        [Parameter(ParameterSetName='ContainerId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='FilePathContainerId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${ContainerId},
        [Parameter(ParameterSetName='ComputerName')]
        [Parameter(ParameterSetName='Uri')]
        [string]
        ${CertificateThumbprint})
    begin
    {
        try {
            Test-Caller -CallStack (Get-PSCallStack)
            $outBuffer = $null
            if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer))
            {
                $PSBoundParameters['OutBuffer'] = 1
            }
            $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('Microsoft.PowerShell.Core\Invoke-Command', [System.Management.Automation.CommandTypes]::Cmdlet)
            $scriptCmd = {& $wrappedCmd @PSBoundParameters }
            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($PSCmdlet)
        } catch {
            throw
        }
    }
    process
    {
        try {
            $steppablePipeline.Process($_)
        } catch {
            throw
        }
    }
    end
    {
        try {
            $steppablePipeline.End()
        } catch {
            throw
        }
    }
    <#
    .ForwardHelpTargetName Microsoft.PowerShell.Core\Invoke-Command
    .ForwardHelpCategory Cmdlet
    #>
# Exporting function overrides
Export-ModuleMember -Function @(
    'Invoke-Expression'
    'Invoke-Command'
WrapNonExceptionThrows
.NETFramework,Version=v4.5
*Microsoft (R) Windows (R) Operating System
9Copyright (c) Microsoft Corporation. All rights reserved.
Microsoft Corporation
10.0.10011.16384
Gd:\os\public\x86fre\onecoreuap\internal\strongnamekeys\fake\windows.snk
$276fbfc1-d71f-4619-a7c1-0181077ee283
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADP
ErrorRecordDescription
ErrorRecordName?
ScriptColumnM
ScriptErrorText\
ScriptLineh
ScriptNameu
=An error written by a cmdlet into the PowerShell error stream
Script Error
Column Number
Error Text
Line Number
Script
&Lg/k
Microsoft.Windows.Diagnosis.SDHost.pdb
_CorDllMain
mscoree.dll
VS_VERSION_INFO
VarFileInfo
Translation
StringFileInfo
000004b0
CompanyName
Microsoft Corporation
FileDescription
FileVersion
10.0.22621.580
InternalName
Microsoft.Windows.Diagnosis.SDHost.dll
LegalCopyright
Copyright (c) Microsoft Corporation. All rights reserved.
OriginalFilename
Microsoft.Windows.Diagnosis.SDHost.dll
ProductName
Microsoft (R) Windows (R) Operating System
ProductVersion
10.0.22621.580
Assembly Version
10.0.0.0
