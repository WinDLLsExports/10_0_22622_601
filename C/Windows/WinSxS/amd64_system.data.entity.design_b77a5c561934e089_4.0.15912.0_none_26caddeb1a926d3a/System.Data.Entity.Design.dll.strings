!This program cannot be run in DOS mode.
.text
`.rsrc
@.reloc
&*.r{
*frQ 
*fr;!
*fr3"
*fry"
*vrI#
*fr+$
*.rQ%
*.rc&
*Vr3'
*.ro'
*.rW(
*.rE)
*.rG*
*.ry*
*.r5+
*.ry+
*fr3,
*Vri,
p*r 5
p*r^4
p*2~5
p*rc=
$.6+A
v4.0.30319
#Strings
#GUID
#Blob
+v9`}
j[9`}
N}9`}
lp/V!
RcBVV
/!BVV
Q!BVV
sBBVV
6cBVV
|IGVQ
=/3U6
dF*V6
1)(Z7
 &w!<
EgYZA
^gbZB
-Q1^8
-#b[Y
L6%_u
L6,_v
L63_w
L6:_x
L6A_y
L6I_{
L6P_|
Vsj`Q
Vsw`T
 R(at
P$#e 
j$#e!
"/=fS
|bui&
oaui&
@aui&
ncui&
'v@h^
}]h%)
+ 3 e 
 e!|!
!."U"j"
#I$e$k$
%K%Z%a%o%
&H&s&
&*':'V'r'
(+(=(Q(
);)A)R)f)s)
)&*@*P*f*l*
c!e"g$m&r's)w,|0}1~2
E=Ohpw~
###H#^#
$7$@$O$
&a&j&
)0*F*\*r*|*
*K+w+
X%Y'Z'['\,],^,_,`,a.b1c1d1e1f1g1h1i3j3k3l6m6n9o:p;q;r;s;t;uBvBwDxDyEzK{c|c}x
<>9__31_10
<InternalSingularize>b__31_10
<InternalPluralize>b__29_10
<get_Errors>d__20
<>c__DisplayClass20_0
<>9__0_0
<.ctor>b__0_0
<>c__DisplayClass0_0
<>9__11_0
<GenerateCode>b__11_0
<>c__DisplayClass11_0
<>9__31_0
<InternalSingularize>b__31_0
<>c__DisplayClass31_0
<>9__41_0
<CreateCodeGeneratorType>b__41_0
<WriteExtendedPropertyAttributes>b__41_0
<>c__DisplayClass51_0
<>9__1_0
<CreateEdmItemCollection>b__1_0
<>9__12_0
<.cctor>b__12_0
<LoadViewDetails>b__12_0
<>9__22_0
<GenerateCodeFor1_1Schema>b__22_0
<>9__13_0
<CreateFunctionImportStructuralTypeReaderMethod>b__13_0
<GenerateCode>b__13_0
<LoadTableDetails>b__13_0
<>9__53_0
<CreateEdmProperties>b__53_0
<>9__14_0
<LoadFunctionReturnTableDetails>b__14_0
<>9__4_0
<CreateStoreSchemaConnection>b__4_0
<>9__15_0
<GenerateCode>b__15_0
<LoadRelationships>b__15_0
<>c__DisplayClass15_0
<>9__55_0
<CreateEndMultiplicityOverride>b__55_0
<>9__5_0
<.ctor>b__5_0
<>9__16_0
<HandleValidationErrors>b__16_0
<>c__DisplayClass16_0
<>9__6_0
<CreateStorageMappingItemCollection>b__6_0
<>9__37_0
<WriteEntityContainerElement>b__37_0
<>9__7_0
<EmitFactoryMethod>b__7_0
<>9__18_0
<.ctor>b__18_0
<>9__38_0
<MapFunctions>b__38_0
<>c__DisplayClass38_0
<>9__29_0
<InternalPluralize>b__29_0
<>9__39_0
<CreateAssociationType>b__39_0
<>9__9_0
<GenerateCode>b__9_0
<>c__DisplayClass9_0
<>9__0
<InternalGenerateCode>b__0
<CreateEntityType>b__0
<GetDirectSubTypes>b__0
<IsAtLeastOneColumnFKInBothAssociations>b__0
<GenerateViews>b__0
<GetSchemaElement>b__0
<DoesWordContainSuffix>b__0
constraint0
<>9__31_11
<InternalSingularize>b__31_11
<>9__29_11
<InternalPluralize>b__29_11
45D66F92565A91D9E0928BC723EF74E2EBBD2182FDA2C2438989B899EE6F0951
EdmxNamespaceUriV1
MementoV1
FunctionDetailsReaderV1
get_UnableToGenerateForeignKeyPropertiesForV1
<>9__31_1
<InternalSingularize>b__31_1
<>c__DisplayClass51_1
get_EdmVersion1_1
<>9__12_1
<.cctor>b__12_1
<LoadViewDetails>b__12_1
<>9__13_1
<LoadTableDetails>b__13_1
<>9__53_1
<CreateEdmProperties>b__53_1
<>9__14_1
<LoadFunctionReturnTableDetails>b__14_1
<>9__4_1
<CreateStoreSchemaConnection>b__4_1
<>9__15_1
<LoadRelationships>b__15_1
<>9__55_1
<CreateEndMultiplicityOverride>b__55_1
<>9__38_1
<MapFunctions>b__38_1
<>9__29_1
<InternalPluralize>b__29_1
<>9__39_1
<CreateAssociationType>b__39_1
<CreateEntityType>b__1
Func`1
ISchemaElementLookUpTable`1
Nullable`1
IEnumerable`1
IOrderedEnumerable`1
Stack`1
ICollection`1
ReadOnlyMetadataCollection`1
EnumerableRowCollection`1
ReadOnlyCollection`1
IComparer`1
IEqualityComparer`1
IEnumerator`1
HashSet`1
IList`1
get_Template_GeneratedCodeCommentLine1
get_Item1
Version1
<>7__wrap1
constraint1
<>m__Finally1
<>9__29_12
<InternalPluralize>b__29_12
<InternalSingularize>b__12
Int32
VBTemplateCodeGenResourceV2
CSharpTemplateCodeGenResourceV2
_vbCodeGeneratorTypeV2
_csharpCodeGeneratorTypeV2
EdmxNamespaceUriV2
CreateVBCodeGeneratorV2
CreateCSharpCodeGeneratorV2
<>9__31_2
<InternalSingularize>b__31_2
<>9__12_2
<.cctor>b__12_2
<LoadViewDetails>b__12_2
<>9__13_2
<LoadTableDetails>b__13_2
<>9__14_2
<LoadFunctionReturnTableDetails>b__14_2
<>9__15_2
<LoadRelationships>b__15_2
<>9__29_2
<InternalPluralize>b__29_2
<>9__39_2
<CreateAssociationType>b__39_2
<i>5__2
<MapFunctions>b__2
Func`2
Tuple`2
Memoizer`2
KeyValuePair`2
BidirectionalDictionary`2
get_Template_GeneratedCodeCommentLine2
get_Item2
Version2
<>7__wrap2
<>m__Finally2
<>9__31_13
<InternalSingularize>b__31_13
<>9__29_13
<InternalPluralize>b__29_13
<GetSourceTypes>d__33
VBTemplateCodeGenResourceV3
CSharpTemplateCodeGenResourceV3
_vbCodeGeneratorTypeV3
_csharpCodeGeneratorTypeV3
EdmxNamespaceUriV3
MementoV3
FunctionDetailsReaderV3
CreateVBCodeGeneratorV3
CreateCSharpCodeGeneratorV3
<>9__31_3
<InternalSingularize>b__31_3
<>9__12_3
<.cctor>b__12_3
<LoadViewDetails>b__12_3
<>9__13_3
<LoadTableDetails>b__13_3
<>9__14_3
<LoadFunctionReturnTableDetails>b__14_3
<>9__15_3
<LoadRelationships>b__15_3
<>9__38_3
<MapFunctions>b__38_3
<>9__29_3
<InternalPluralize>b__29_3
<>9__39_3
<CreateAssociationType>b__39_3
Func`3
get_Template_GeneratedCodeCommentLine3
StoreSchemaMappingVersion3
StoreSchemaDefinitionVersion3
ConceptualSchemaDefinitionVersion3
<>9__31_14
<InternalSingularize>b__31_14
Int64
<>9__31_4
<InternalSingularize>b__31_4
<>9__38_4
<MapFunctions>b__38_4
<>9__29_4
<InternalPluralize>b__29_4
<>9__39_4
<CreateAssociationType>b__39_4
<>9__31_5
<InternalSingularize>b__31_5
<>9__29_5
<InternalPluralize>b__29_5
Action`5
__StaticArrayInitTypeSize=6
<>9__31_6
<InternalSingularize>b__31_6
<>9__29_6
<InternalPluralize>b__29_6
<>9__31_7
<InternalSingularize>b__31_7
<>9__29_7
<InternalPluralize>b__29_7
<SplitViewStrings>d__28
get_UTF8
<>9__31_8
<InternalSingularize>b__31_8
<>9__29_8
<InternalPluralize>b__29_8
<GetViewStringsAppendToStringBuilder>d__29
<>9__31_9
<InternalSingularize>b__31_9
<>9__29_9
<InternalPluralize>b__29_9
<Module>
<PrivateImplementationDetails>
FK_SCHEMA
PK_SCHEMA
NormalizeForVB
DoFixUpsForVB
IS_SERVERGENERATED
RELATIONSHIP_ID
SCALE
IS_NULLABLE
FK_TABLE
PK_TABLE
DEFAULT_NAMESPACE_NAME
RELATIONSHIP_NAME
ERRORCODE_MAPPINGALLQUERYVIEWATCOMPILETIME
DATA_TYPE
get_EOF
FK_CATALOG
PK_CATALOG
MAXONELINELENGTH
MAX_LENGTH
get_NamespaceURI
IsFkPartiallyContainedInPK
ORDINAL
FK_COLUMN
PK_COLUMN
DATETIMEPRECISION
System.IO
DoFixUpsForCS
PROC_SCHEMA_INDEX
PROC_ISNILADIC_INDEX
PROC_ISCOMPOSABLE_INDEX
PROC_NAME_INDEX
PARAM_NAME_INDEX
PARAM_TYPE_INDEX
PROC_RET_TYPE_INDEX
PROC_ISAGGREGATE_INDEX
PROC_ISTVF_INDEX
PROC_CATALOG_INDEX
PROC_ISBUILTIN_INDEX
PARAM_DIRECTION_INDEX
NAMESPACE_NAME_SUFFIX
ENTITY_CONTAINER_NAME_SUFFIX
CONTAINER_SUFFIX
IS_PRIMARYKEY
IS_IDENTITY
value__
GenerateCodeFor1_1Schema
get_FKSchema
set_FKSchema
_columnFKSchema
get_PKSchema
set_PKSchema
_columnPKSchema
get_Schema
set_Schema
get_Template_UnsupportedSchema
CheckValidSchema
IsValidSchema
_sourceSchema
WriteStoreSchema
NullAdditionalSchema
InternalWriteModelSchema
sourceEdmSchema
_columnSchema
_schema
System.Data
DoGenerateStoreMetadata
InternalGenerateMetadata
Template_GenCommentAddToMethodVb
System.Web
mscorlib
TemplateCodeGenerators.VBCodeGenTemplateV5.0.vb
TemplateCodeGenerators.VBCodeGenTemplate.vb
get_IsNiladic
VBMarkPropertyGetAsPublic
CSMarkPropertyGetAsPublic
VBMarkPropertySetAsPublic
CSMarkPropertySetAsPublic
CodeGenerationValueAccessibilityPublic
System.Collections.Generic
ComputeFromStringGeneric
generic
Microsoft.VisualBasic
CSMarkClassAsStatic
orderByFunc
get_CurrentManagedThreadId
<>l__initialThreadId
get_RelationshipId
set_RelationshipId
_columnRelationshipId
PrivateMemberPrefixId
EdmFunctionPayload
replaced
get_EntityStoreGeneratorSchemaNotLoaded
get_EntityModelGeneratorSchemaNotLoaded
Interlocked
VBMarkOverrideMethodAsSealed
CSMarkOverrideMethodAsSealed
LazyLoadingEnabled
CannotCreateEntityWithNoPrimaryKeyDefined
CodeGenNamespaceCannotBeDetermined
InvalidSchemaEncountered
get_IsRequired
accumulated
add_OnTypeGenerated
remove_OnTypeGenerated
get_IsServerGenerated
set_IsServerGenerated
_columnIsServerGenerated
add_OnPropertyGenerated
remove_OnPropertyGenerated
get_SingleStoreEntityContainerExpected
VBMarkPropertyGetAsProtected
CSMarkPropertyGetAsProtected
VBMarkPropertySetAsProtected
CSMarkPropertySetAsProtected
CodeGenerationValueAccessibilityProtected
IsClassWanted
NotImplemented
IsLanguageSupported
TargetVersionNotSupported
ClientAutoGenNotAllowed
System.Collections.Specialized
IsCapitalized
get_EdmSchemaNotValid
ParameterDirectionNotValid
SourceSchemaIsInvalid
CodeGenAdditionalEdmSchemaIsInvalid
CodeGenSourceFilePathIsInvalid
appendToFrontIfFirstCharIsInvalid
ExcludedColumnWasAKeyColumnEntityIsInvalid
get_Guid
GetCodeExpressionFromGuid
NewGuid
_guid
<Service>k__BackingField
<Culture>k__BackingField
<GenerateForeignKeyProperties>k__BackingField
<FirstToSecondDictionary>k__BackingField
<SecondToFirstDictionary>k__BackingField
PropertyInfoField
CodeMemberField
CreateEntitySetField
EmitField
AppendChild
storeEnd
fkEnd
pkEnd
TrimEnd
fromEnd
CreateAssociationEnd
ReadToEnd
toEnd
targetRelationshipEnd
AddAssociationSetEnd
GetStoreAssociationSetEnd
storeAssociationSetEnd
CreateModelAssociationSetEnd
StoreAssociationSetEndToModelAssociationSetEnd
GetFromAssociationSetEnd
GetAssociationSetEnd
associationSetEnd
DbCommand
CreateFilteredCommand
CreateCommand
EntityCommand
_command
stringToAppend
DateTimeKind
get_PrimitiveTypeKind
TryGetPrimitiveTypeKind
get_BuiltInTypeKind
GetCollectionKind
collectionKind
SpecifyKind
get_PropertyKind
TSecond
ExistsInSecond
second
InvalidKeyTypeFound
OneToOneAssociationFound
EdmSchemaFileNotFound
TableReferencedByTvfWasNotFound
TableReferencedByAssociationWasNotFound
DirectoryNotFound
get_Method
set_Method
GetAddMethod
EndMethod
referenceMethod
GetRemoveMethod
IntializeMethod
BeginMethod
CreateViewReturnMethod
CodeMemberMethod
CreateFunctionImportStructuralTypeReaderMethod
EntityClient_ReturnedNullOnProviderMethod
CreateAndAddGetViewAtMethod
GetGetMethod
EmitGetMethod
GetSetMethod
FixMethod
IncludeFieldInFactoryMethod
get_Template_RegionFactoryMethod
EmitFactoryMethod
_method
AddWord
TryInflectOnSuffixInWord
operationOnWord
IsNoOpWord
newWord
prefixWord
GetSuffixWord
suffixWord
_CSClassKeyWord
IndexOfKeyword
keyword
GetSchemaXsd
Replace
get_DataSpace
dataSpace
IsNullOrEmptyOrWhiteSpace
IsWhiteSpace
get_Namespace
GetStoreSchemaNamespace
GetMappingSchemaNamespace
GetEdmSchemaNamespace
GetSchemaNamespace
schemaNamespace
AddNamespace
EdmReservedNamespace
CodeNamespace
_codeNamespace
get_StoreNamespace
_storeNamespace
ValidateNamespace
AdoFrameworkNamespace
_xmlNamespace
AdoFrameworkMetadataEdmNamespace
edmNamespace
IsSystemNamespace
EdmAnnotationNamespace
_hasAnnotationNamespace
EntityStoreSchemaGeneratorNamespace
hasNamespace
AdoAttributeDataClassesNamespace
AdoFrameworkDataClassesNamespace
TryGetObjectNamespace
objectNamespace
AdoEntityClientNamespace
GetProviderSchemaMetadataWorkspace
CreateMetadataWorkspace
metadataWorkspace
workspace
get_Service
set_Service
CreateService
get_PluralizationService
set_PluralizationService
_irregularVerbPluralizationService
_wordsEndingWithSePluralizationService
EnglishPluralizationService
_assimilatedClassicalInflectionPluralizationService
_classicalInflectionPluralizationService
_wordsEndingWithSisPluralizationService
_irregularPluralsPluralizationService
_wordsEndingWithSusPluralizationService
_oSuffixPluralizationService
_wordsEndingWithInxAnxYnxPluralizationService
UniqueIdentifierService
uniqueIdentifierService
GetService
service
get_Instance
CreateInstance
_instance
get_TypeReference
GetLeastPossibleQualifiedTypeReference
GetFullyQualifiedTypeReference
CodeTypeReference
GetCollectionTypeReference
_typeReference
AddArtifactReference
get_TypeSource
_typeSource
CompileAssemblyFromSource
get_PropertySource
_propertySource
XmlSchemaResource
CreateEmbeddedResource
SetupEmbeddedResource
deleteBehaviorOverride
CreateEndMultiplicityOverride
endMultiplicityOverride
multiplicityOverride
GenerateVBCode
InternalGenerateCode
GetHashCode
GenerateCSharpCode
get_ErrorCode
ModelBuilderErrorCode
defaultErrorCode
errorCode
get_Mode
FileMode
get_ProcParameterMode
TryGetParameterMode
storageSchemaNode
conceptualSchemaNode
SelectSingleNode
WriteNode
mappingNode
XmlNode
ImportNode
Exclude
DbCommandTree
DbQueryCommandTree
get_TypeUsage
storeTypeUsage
CreateStringTypeUsage
GetModelTypeUsage
GetScalarFunctionTypeUsage
typeUsage
get_Message
CombineErrorMessage
errorMessage
message
usage
get_Language
set_Language
_language
AddRange
ColumnFacetValueOutOfRange
ArgumentOutOfRange
DisallowReturnTypeChange
CompareExchange
TryAddNameToCache
AddElementNameToCache
cache
EndInvoke
BeginInvoke
get_Scale
set_Scale
_columnScale
get_FKTable
set_FKTable
_columnFKTable
get_PKTable
set_PKTable
_columnPKTable
get_Table
LoadDataTable
get_NameTable
XmlNameTable
_columnTable
MissingTvfReturnTable
GetAssociationSetEndForForeignKeyTable
get_Variable
GetViewStringBuilderVariable
get_Nullable
get_NonNullable
IsAtLeastOneColumnOfBothDependentRelationshipColumnSetsNonNullable
_nonNullable
get_IsNullable
set_IsNullable
_columnIsNullable
AreAllFkKeyColumnsNullable
AreAnyFkKeyColumnsNullable
_nullable
IEnumerable
AsEnumerable
FunctionImportMappingComposable
get_IsComposable
IDisposable
set_GenerateExecutable
AreTypeAndSetAccessCompatible
ProviderIncompatible
Double
RuntimeFieldHandle
RuntimeTypeHandle
GetTypeFromHandle
Single
get_CodeGenSourceFilePathIsNotAFile
AddFile
OpenFile
SaveXmlReaderToFile
CopyFile
get_FromRole
get_ToRole
Tuple
set_BracingStyle
get_PropertyFQName
get_Name
set_Name
CreateValidEcmaName
unqualifiedName
TryGetAdjustedName
TryGetReservedName
get_FieldName
get_ComplexPropertyInitializedFieldName
get_BackingFieldName
_backingFieldName
set_MethodName
ReportPropertyChangedMethodName
GetValidValueMethodName
SetValidValueMethodName
ReportPropertyChangingMethodName
OnChangedPartialMethodName
OnChangingPartialMethodName
GetViewAtMethodName
DetachFromParentMethodName
methodName
get_NamespaceName
CreateValidNamespaceName
storeNamespaceName
csdlNamespaceName
CreateValildModelNamespaceName
xmlNamespaceName
get_SourceEdmNamespaceName
get_SourceObjectNamespaceName
_namespaceName
GetStoreSchemaXsdResourceName
GetMappingSchemaXsdResourceName
GetEdmSchemaXsdResourceName
resourceName
nodeName
get_TwoLetterISOLanguageName
get_TableName
set_TableName
GetMostQualifiedTableName
storeTableName
tableName
get_FileName
set_FileName
GetTempFileName
GetFileName
outputFileName
VBTemplateCodeGenV3TypeName
CSharpTemplateCodeGenV3TypeName
FQMetaDataWorkspaceTypeName
viewStorageTypeName
BaseTypeName
VBTemplateCodeGenTypeName
CSharpTemplateCodeGenTypeName
GetTypeName
GetEntityTypeName
typeName
storeName
get_ProcedureName
EntityStoreSchemaGeneratorSchemaAttributeName
EntityStoreSchemaGeneratorNameAttributeName
EntityStoreSchemaGeneratorTypeAttributeName
ViewGenerationCustomAttributeName
GetFullyQualifiedCodeGenerationAttributeName
TranslateFacetNameToAttributeName
attributeName
ShouldReserveName
FQAdoFrameworkName
get_LocalName
get_IsSpecialName
CreateModelName
get_FullName
CreateFullName
GetFullName
GetExtentFullName
extentFullName
VerifyComplexObjectIsNotNullName
paramName
FQAdoFrameworkMetadataEdmName
itemName
get_ColumnName
set_ColumnName
getColumnName
columnName
StoreFunctionName
get_MissingDocumentationNoName
get_RelationshipName
set_RelationshipName
_columnRelationshipName
ComplexPropertyInitializedNameFromPropName
FieldNameFromPropName
Template_ConflictingGeneratedNavPropName
propName
propertyFqName
fqName
IsNameAlreadyAMemberName
DoesTypeReserveMemberName
StoreEntityContainerName
DuplicateEntityContainerName
newModelEntityContainerName
_modelEntityContainerName
EdmEntityContainerName
entityContainerName
get_ParameterName
set_ParameterName
UnableToGenerateFunctionImportParameterName
FixParameterName
parameterName
AncestorClassDefinesName
FQAdoFrameworkDataClassesName
IEntityWithRelationshipsTypeBaseClassName
DuplicateClassName
EntitySetClassName
ObjectResultClassName
NewContextClassName
get_PropertyClassName
className
GetName
GetEntitySetName
get_FacetName
facetName
SplitName
get_ProviderInvariantName
_providerInvariantName
FQAdoEntityClientName
EdmxRootElementName
elementName
functionImportName
get_DisplayName
AssemblyName
get_PropertyName
TrySplitExtendedMetadataPropertyName
GetFullyQualifiedPropertyName
generatedPropertyName
ValuePropertyName
GetNavigationPropertyName
ViewCountPropertyName
SearcherGetContextPropertyName
EntityGetContextPropertyName
get_EntityPropertyName
propertyName
_name
get_DateTime
_dateTime
get_Line
ReadLine
AppendLine
WriteLine
get_NewLine
Combine
Clone
scope
get_Type
set_Type
SchemaType
get_DataType
set_DataType
UnsupportedDataType
_columnDataType
UnsupportedFunctionReturnDataType
UnsupportedFunctionParameterDataType
dataType
DbType
applyToSpecificType
MakeGenericType
StructuredType
UnsupportedType
fieldType
set_CommandType
NullReferenceType
GetReferenceType
get_NodeType
XmlNodeType
ModelGeneration_UnGeneratableType
NonSerializableType
IsStoreType
get_BaseType
set_BaseType
eventReturnedBaseType
_declaringTypeUsesStandardBaseType
AssignBaseType
GetBaseType
_baseType
createType
attributeType
get_IsValueType
TryGetStorePrimitiveType
GetEdmPrimitiveType
IsPrimitiveType
primitiveType
OfType
RefType
MappingType
get_DeclaringType
CreateConstructorForViewStoringType
AdoFrameworkType
IsNominalType
StructuralType
structuralType
GetCSDeclType
GetModelType
modelType
Template_DuplicateTopLevelType
get_EdmType
AdoFrameworkMetadataEdmType
GetEdmType
edmType
GetBuiltInType
storeAssociationType
CreateAssociationType
CreateModelAssociationType
StoreAssociationTypeToModelAssociationType
associationType
AccessViolationType
IsEnumerationType
IsCollectionType
GetCollectionType
IsCatchableExceptionType
get_ReturnType
set_ReturnType
AddTvfReturnType
TryGetTvfReturnType
tvfReturnType
GetReturnType
CannotChangePropertyReturnType
propertyReturnType
_returnType
UnsupportedDataTypeUnknownType
toType
FixUpType
get_RelationshipType
set_RelationshipType
innerType
get_ParameterType
DetermineParameterType
get_ClrType
InvalidInterfaceSuppliedForType
InvalidAttributeSuppliedForType
InvalidMemberSuppliedForType
ComputeNullableForType
ComputeForType
MissingGenerationPatternForType
AddErrorsForType
VerifyLanguageCaseSensitiveCompatibilityForType
CreateCodeGeneratorType
CodeBinaryOperatorType
AdoFrameworkDataClassesType
ComplexTypeBaseClassType
EntityTypeBaseClassType
get_ObjectType
DbObjectType
dbObjectType
GetSourceNameFromObjectType
_objectType
GetType
AdoEntityClientType
get_ClrEquivalentType
get_ElementType
getElementType
elementType
GetVBStatementType
ThreadAbortType
newType
CreateTvfReturnRowType
GetRowType
StackOverflowType
rowType
IsComplexType
complexType
IsValidKeyType
OutOfMemoryType
SecurityType
storeEntityType
CreateEntityType
fkEntityType
pkEntityType
CreateModelEntityType
StoreEntityTypeToModelEntityType
GetEntityType
entityType
get_PropertyType
propertyType
m_type
FileShare
Where
System.Core
InsertBefore
store
HashOverMappingClosure
get_Culture
set_Culture
get_InvariantCulture
get_CurrentCulture
culture
Capture
MethodBase
EntityTypeBase
InternalDataCollectionBase
PropertyEmitterBase
AddEntitySetBase
entitySetBase
get_OrdinalIgnoreCase
CamelCase
ItemExistsWithDifferentCase
EntitySetExistsWithDifferentCase
PropertyExistsWithDifferentCase
Close
System.IDisposable.Dispose
TryParse
FunctionOrderByClause
orderByClause
SaveAssociationForCollapsedAssociationCandidate
ParseAndValidate
Create
MulticastDelegate
get_IsIsAggregate
get_Template_CurrentlyRunningTemplate
LoadMethodSessionState
<>1__state
Evaluate
ToSeparatedStringPrivate
VBMarkPropertyGetAsPrivate
CSMarkPropertyGetAsPrivate
VBMarkPropertySetAsPrivate
CSMarkPropertySetAsPrivate
get_IsPrivate
CodeGenerationValueAccessibilityPrivate
RELATIONSHIP_IsCascadeDelete
get_RelationshipIsCascadeDelete
set_RelationshipIsCascadeDelete
_columnRelationshipIsCascadeDelete
namespaceToWrite
MetadataArtifactLoaderComposite
get_IsComposite
CompilerGeneratedAttribute
_GeneratedCodeAttribute
EmitGeneratedCodeAttribute
DebuggerNonUserCodeAttribute
AttributeUsageAttribute
NeutralResourcesLanguageAttribute
DebuggableAttribute
get_IsComposableAttribute
AddBrowsableAttribute
ComVisibleAttribute
AssemblyKeyFileAttribute
EmitSimpleAttribute
AssemblyTitleAttribute
get_StoreFunctionNameAttribute
IteratorStateMachineAttribute
EmitSchemaTypeAttribute
GetCodeAccessibilityTypeAttribute
XmlIgnoreAttribute
SoapIgnoreAttribute
get_AggregateAttribute
DebuggerStepThroughAttribute
XmlAttribute
get_BuiltInAttribute
DebuggerHiddenAttribute
AssemblyDelaySignAttribute
ExtensionAttribute
AssemblyFileVersionAttribute
AssemblyInformationalVersionAttribute
SatelliteContractVersionAttribute
get_NiladicFunctionAttribute
EDesignResDescriptionAttribute
AssemblyDescriptionAttribute
BuildProviderAppliesToAttribute
AddDataMemberAttribute
GetAccessibilityCsdlStringFromMemberAttribute
DefaultMemberAttribute
GetCodeAccessibilityMemberAttribute
AssemblyDefaultAliasAttribute
get_ParameterTypeSemanticsAttribute
SecurityRulesAttribute
FlagsAttribute
DefaultDllImportSearchPathsAttribute
CompilationRelaxationsAttribute
AllowPartiallyTrustedCallersAttribute
AssemblyProductAttribute
AssemblyCopyrightAttribute
CLSCompliantAttribute
SecurityTransparentAttribute
get_CommandTextAttribute
DebuggerDisplayAttribute
ParamArrayAttribute
AssemblySignatureKeyAttribute
AssemblyCompanyAttribute
EDesignResCategoryAttribute
RuntimeCompatibilityAttribute
attribute
ReadByte
WriteByte
get_Value
set_Value
AddValue
GetSecondValue
secondValue
BaseValue
metadataArtifactProcessingValue
StonglyTypedAccessToNullValue
nullValue
GetEnumValue
get_MinValue
set_DescriptionValue
get_HasValue
TryGetValue
SetValue
IsUnboundedFacetValue
get_DefaultValue
GetCodeExpressionFromDateTimeDefaultValue
GetCodeExpressionFromTimeSpanDefaultValue
GetDefaultValue
GetCodeExpressionFromDateTimeOffsetDefaultValue
GetFirstValue
firstValue
get_MaxValue
GetTypeAccessibilityValue
GetAccessibilityValue
value
ToAppRelative
IsUninflective
get_IsLanguageCaseSensitive
_isLanguageCaseSensitive
caseSensitive
Remove
Initialize
SuppressFinalize
InternalPluralize
Capitalize
InternalSingularize
Entityize
LastIndexOf
get_FieldRef
get_ComplexPropertyInitializedFieldRef
_complexPropertyInitializedFieldRef
_fieldRef
get_ThisRef
_thisRef
CreateEdmStructuralObjectRef
get_IsTvf
System.Threading
OrderByDescending
DbExpressionBinding
set_Encoding
System.Runtime.Versioning
get_IsWarning
set_IsWarning
System.Data.Mapping
StoreSchemaMapping
InternalWriteStorageMapping
ICustomPluralizationMapping
StorageEntityContainerMapping
storageEntityContainerMapping
UnsupportedQueryViewInEntityContainerMapping
TryGetFunctionImportMapping
StrongTyping
get_String
_onContextCreatedString
MembersToCommaSeparatedString
GetLocalizedString
WriteString
WriteAttributeString
GetAttributeValueString
ComputeFromString
set_ConnectionString
connectionString
ToString
GetString
<>3__largeViewString
viewString
_string
Substring
System.Web.Hosting
get_FKCatalog
set_FKCatalog
_columnFKCatalog
get_PKCatalog
set_PKCatalog
_columnPKCatalog
get_Catalog
set_Catalog
_columnCatalog
_catalog
Attach
IsMatch
TargetVersionSchemaVersionMismatch
GetMappingClosureHash
ComputeHash
Flush
tempSchemaPath
sourceEdmSchemaFilePath
get_TargetFilePath
_targetFilePath
DllImportSearchPath
get_VirtualPath
GetResourceNameForVirtualPath
virtualPath
get_SourceCsdlPath
set_SourceCsdlPath
_sourceCsdlPath
DbProviderServicesInformationLocationPath
GetTempPath
targetPath
outputPath
get_Length
get_MaximumLength
set_MaximumLength
_columnMaximumLength
length
EndsWith
StartsWith
xmlNamespaceUri
AsyncCallback
usedFallback
callback
ExtensionCheck
GetAccessibilityRank
get_TargetFramework
checkForSpecial
VBMarkMethodAsPartial
CSMarkMethodAsPartial
MarkAbstractMethodAsPartial
set_IsPartial
Normal
get_Ordinal
set_Ordinal
_columnFieldOrdinal
_columnOrdinal
NoSpecificTypeSentinal
AddInternal
VBMarkPropertyGetAsInternal
CSMarkPropertyGetAsInternal
VBMarkPropertySetAsInternal
CSMarkPropertySetAsInternal
CodeGenerationValueAccessibilityInternal
FactoryParamCommentGeneral
IsPlural
plural
op_GreaterThanOrEqual
op_LessThanOrEqual
isVirtual
FixUpMethodDecl
typeDecl
FixUpClassDecl
propertyDecl
_isModel
System.Collections.ObjectModel
System.Data.EntityModel.SchemaObjectModel
System.ComponentModel
System.Data.EntityModel
model
set_ConformanceLevel
MetadataUtil
PluralizationServiceUtil
StringUtil
EDesignUtil
EntityFrameworkVersionsUtil
EntityUtil
System.Data.Entity.Design.dll
IsDBNull
ConvertDBNull
IsFKSchemaNull
IsPKSchemaNull
IsSchemaNull
IsIsServerGeneratedNull
get_IsParameterModeNull
IsScaleNull
IsFKTableNull
IsPKTableNull
IsRelationshipNameNull
get_IsParameterNameNull
IsDataTypeNull
get_IsParameterTypeNull
IsFKCatalogNull
IsPKCatalogNull
IsCatalogNull
IsMaximumLengthNull
IsOrdinalNull
EmitExpressionDoesNotEqualNull
IsFKColumnNull
IsPKColumnNull
IsDateTimePrecisionNull
IsPrecisionNull
CannotChangePropertyReturnTypeToNull
IsNull
EmitExpressionEqualsNull
CheckArgumentNull
IsIsIdentityNull
System.Xml
WriteXml
escapeForXml
FunctionReturnTableDetailSql
get_FunctionDetailSql
RelationshipDetailSql
ViewDetailSql
GetManifestResourceStream
FileStream
OutputXmlElementToStream
edmxInputStream
MemoryStream
stream
Template_CommentFactoryMethodParam
System.Data.Metadata.Edm
get_Item
set_Item
MetadataItem
Serialization_UnknownGlobalItem
TryGetItem
_item
TypeSystem
CreateMetadataHashAlgorithm
System.CodeDom
IsAssignableFrom
_transform
get_IsBuiltIn
Boolean
op_GreaterThan
op_LessThan
get_TimeSpan
_timeSpan
get_Template_ReplaceVsItemTemplateToken
GetProviderManifestToken
_providerManifestToken
System.Data.Entity.Design
GetMessagesFromEntireExceptionChain
SeekOrigin
get_FKColumn
set_FKColumn
_columnFKColumn
get_PKColumn
set_PKColumn
_columnPKColumn
get_Column
get_FKSchemaColumn
get_PKSchemaColumn
get_SchemaColumn
DataColumn
get_RelationshipIdColumn
get_IsServerGeneratedColumn
_columnFieldColumn
get_ScaleColumn
get_FKTableColumn
get_PKTableColumn
ToPropertyHasNonNullableColumn
get_IsNullableColumn
get_TableNameColumn
get_ColumnNameColumn
get_RelationshipNameColumn
get_DataTypeColumn
get_RelationshipIsCascadeDeleteColumn
get_FKCatalogColumn
get_PKCatalogColumn
get_CatalogColumn
get_MaximumLengthColumn
GetAssociatedFkColumn
fkColumn
pkColumn
get_OrdinalColumn
get_FKColumnColumn
get_PKColumnColumn
get_PrecisionColumn
get_DateTimePrecisionColumn
ExcludedColumnWasAKeyColumn
AssociationMissingKeyColumn
get_IsPrimaryKeyColumn
get_IsIdentityColumn
get_Precision
set_Precision
get_DateTimePrecision
set_DateTimePrecision
_columnDateTimePrecision
_columnPrecision
AddExtension
get_FileExtension
_edmxFileExtension
get_Version
TryGetSchemaVersion
_schemaVersion
maxExpectedVersion
IsValidVersion
runtimeVersion
get_MappingVersion
GetMinimumTargetFrameworkVersion
targetFrameworkVersion
GetEntityFrameworkVersion
_targetEntityFrameworkVersion
entityFrameworkVersion
actualVersion
get_StoreSchemaModelVersion
_storeSchemaModelVersion
get_EdmVersion
GetEdmVersion
edmVersion
ConvertToVersion
SchemaVersionHigherThanTargetVersion
TryGetEdmxVersion
DbExpression
DbNewInstanceExpression
CodeFieldReferenceExpression
CodeMethodReferenceExpression
DbVariableReferenceExpression
CodeVariableReferenceExpression
CodeTypeReferenceExpression
CodeBaseReferenceExpression
CodePropertySetValueReferenceExpression
CodeThisReferenceExpression
CodeArgumentReferenceExpression
CodePropertyReferenceExpression
GetEndTypeCodeExpression
GetMultiplicityCodeExpression
OnContextCreatedCodeMethodInvokeExpression
CodeObjectCreateExpression
CodeArrayCreateExpression
GetDefaultValueExpression
CodePrimitiveExpression
CodeTypeOfExpression
get_NullExpression
_nullExpression
DbScanExpression
CodeParameterDeclarationExpression
CodeDirectionExpression
EmitEnumMemberExpression
CodeBinaryOperatorExpression
DbProjectExpression
set_InitExpression
CodeCastExpression
DbPropertyExpression
expression
session
get_Location
sourceLocation
targetLocation
IsAssociationPartOfCandidateCollapsedAssociation
get_MeetsRequirementsForCollapsableAssociation
storeAssociation
modelAssociation
association
System.Web.Compilation
GetInformation
AddStoreGeneratedPatternAnnoation
CodeTypeDeclaration
typeDeclaration
CodeAttributeDeclaration
set_OmitXmlDeclaration
EmitPropertyDeclaration
get_MetadataItemErrorsFoundDuringGeneration
ForceViewGeneration
InvalidOperation
get_Documentation
MissingComplexTypeDocumentation
MissingDocumentation
get_Template_CommentNoDocumentation
GetDocumentation
MissingPropertyDocumentation
documentation
System.Globalization
System.Runtime.Serialization
System.Xml.Serialization
UpdateMemberFieldsAfterDeserialization
deleteAction
OperationAction
operationAction
action
System.Reflection
CodeNamespaceCollection
CodeTypeReferenceCollection
TempFileCollection
storeCollection
XmlAttributeCollection
ValueCollection
mappingCollection
StringCollection
edmCollection
CheckValidItemCollection
get_StoreItemCollection
CreateStoreItemCollection
_storeItemCollection
CreateStorageMappingItemCollection
get_EdmItemCollection
CreateEdmItemCollection
_edmItemCollection
RegisterItemCollection
itemCollection
DataColumnCollection
CodeExpressionCollection
CodeParameterDeclarationExpressionCollection
CodeTypeDeclarationCollection
CodeAttributeDeclarationCollection
FixUpCollection
GroupCollection
CodeTypeMemberCollection
DbParameterCollection
EntityParameterCollection
CompilerErrorCollection
TableDetailsCollection
RelationshipDetailsCollection
NestedStoreObjectCollection
CodeStatementCollection
CodeCommentStatementCollection
commentCollection
CodeAttributeArgumentCollection
DataRowCollection
KeyCollection
collection
CreateStoreSchemaConnection
DbConnection
get_StoreConnection
CreateConnection
providerConnection
get_InnerConnection
get_EntityConnection
_connection
FieldDirection
storeFunction
ModelFunction
CreateEdmFunction
function
StoreSchemaDefinition
GetConceptualSchemaDefinition
DbCommandDefinition
CreateCommandDefinition
IsCSClassDefinition
get_LinePosition
linePosition
get_LanguageOption
set_LanguageOption
m_languageOption
IncompatibleSettingForCaseSensitiveOption
SchemaDataModelOption
IOException
MetadataException
NotImplementedException
NotSupportedException
FileNotFoundException
DirectoryNotFoundException
NullReferenceException
ArgumentOutOfRangeException
IndexOutOfRangeException
ProviderIncompatibleException
StrongTypingException
ArgumentNullException
XmlException
TargetInvocationException
AccessViolationException
InvalidOperationException
get_InnerException
innerException
CreateErrorForException
TerminalErrorException
UnauthorizedAccessException
ArgumentException
ThreadAbortException
InvalidCastException
StackOverflowException
OutOfMemoryException
SecurityException
exception
get_Description
get_LongDescription
providerFacetDescription
description
System.Data.Common
System.Data.Entity.Design.Common
GenerateCodeCommon
AddComparison
StringComparison
comparison
StoreGeneratedPattern
UnsupportedForeignKeyPattern
UnsupportedForeinKeyPattern
Unknown
CompareTo
WriteTo
BuildProviderAppliesTo
FieldInfo
MethodInfo
CultureInfo
GetElementLocationInfo
SerializationInfo
serializationInfo
MemberInfo
EventInfo
PropertyInfo
CreateMemento
memento
AddGetterSetterFixUp
get_EdmToObjectNamespaceMap
set_EdmToObjectNamespaceMap
_edmToObjectNamespaceMap
XmlNamedNodeMap
ItemToErrorsMap
HasQueryViewForSetMap
UnsupportedDbRelationship
Microsoft.CSharp
RelationshipEndTypeLookup
_tvfReturnTypeLookup
EntityContainerLookup
ErrorsLookup
_errorsLookup
_reverseEntityLookup
_entityLookup
Group
System.Xml.Linq
System.Linq
System.Data.Objects.ELinq
Clear
IsSingular
singular
AddMember
storeEndMember
get_FromEndMember
set_FromEndMember
CreateAssociationEndMember
get_CorrespondingAssociationEndMember
StoreAssociationEndMemberToModelAssociationEndMember
get_ToEndMember
set_ToEndMember
RelationshipEndMember
endMember
CodeTypeMember
EdmMember
member
get_LineNumber
lineNumber
get_ErrorNumber
DbDataReader
EntityDataReader
CreateReader
ExecuteReader
InitializeReader
sourceEdmSchemaXmlReader
StreamReader
FunctionDetailsReader
TextReader
_reader
EntityStoreSchemaGeneratorDatabaseSchemaLoader
sourceLoader
MetadataArtifactLoader
GetLoader
_loader
StorageModelBuildProvider
MappingModelBuildProvider
EntityModelBuildProvider
EntityDesignerBuildProvider
EntityClient_DoesNotImplementIServiceProvider
VBCodeProvider
CSharpCodeProvider
EntityClient_InvalidStoreProvider
VirtualPathProvider
get_CodeDomProvider
GetViewsAndCodeDomProvider
compilerProvider
IFormatProvider
_provider
CreateSizedStringBuilder
GetViewStringsAppendToStringBuilder
AppendStringToStringBuilder
GetStringBuilder
stringBuilder
StringHashBuilder
NewRowFromBuilder
System.Data.Common.CommandTrees.ExpressionBuilder
DbExpressionBuilder
DataRowBuilder
AssemblyBuilder
assemblyBuilder
builder
sender
Binder
set_VerbatimOrder
SchemaManager
BuildManager
XmlNamespaceManager
ResourceManager
Other
ParameterModifier
addGlobalQualifier
RegisterUsedIdentifier
_identifierToAdjustedIdentifier
adjustedIdentifier
AdjustIdentifier
identifier
_pluralizationServiceHandler
EntityDesignPluralizationHandler
TypeGeneratedEventHandler
PropertyGeneratedEventHandler
System.CodeDom.Compiler
_storeContainer
_modelContainer
get_EntityContainer
get_StorageEntityContainer
InvalidStoreEntityContainer
InvalidNonStoreEntityContainer
_storeEntityContainer
_modelEntityContainer
get_EdmEntityContainer
_entityContainer
container
inner
MetadataHelper
IsUpper
MetadataArtifactLoaderXmlReaderWrapper
get_LanguageAppropriateStringComparer
QualificationCharacter
DbParameter
typeParameter
storeParameter
CreateFunctionParameter
get_ReturnParameter
ObjectParameter
CreateFunctionImportParameter
EntityParameter
parameter
s_defaultDelimiter
sourceWriter
StringWriter
stringWriter
XmlWriter
StreamWriter
GetWriter
outputWriter
get_IsUserSuppliedTextWriter
IndentedTextWriter
GetOrCreateTextWriter
_ownTextWriter
textWriter
_writer
ReflectionAdapter
Converter
FixUpGetter
LineIsVBBeginSetterGetter
isGetter
EndPropertyGetter
BeginPropertyGetter
EmitPropertyGetter
IsLetter
FixUpSetter
EndPropertySetter
BeginPropertySetter
EmitPropertySetter
NamespaceEmitter
SchemaTypeEmitter
StructuredTypeEmitter
AssociationTypeEmitter
ComplexTypeEmitter
EntityTypeEmitter
CreateEmitter
get_AttributeEmitter
_attributeEmitter
MetadataItemEmitter
EntityContainerEmitter
CreateElementEmitter
CommentEmitter
NavigationPropertyEmitter
emitter
ToLower
OneToOneMappingSerializer
MetadataItemSerializer
_fromStringGenericMemoizer
_nullableForTypeMemoizer
_forTypeMemoizer
_fromStringMemoizer
get_TempDir
CommandBehavior
get_DeleteBehavior
set_DeleteBehavior
deleteBehavior
get_Major
get_Minor
ConvertToEdmSchemaError
AddError
CreateSourceEdmSchemaNotValidError
EdmError
ThrowOnError
PreprocessTemplateCompilationError
PreprocessTemplateTransformationError
UnknownError
CompilerError
SecurityError
error
LazyTextWriterCreator
separator
IEnumerator
System.Collections.Generic.IEnumerable<System.String>.GetEnumerator
System.Collections.Generic.IEnumerable<System.Data.Metadata.Edm.GlobalItem>.GetEnumerator
System.Collections.Generic.IEnumerable<System.CodeDom.CodeMethodInvokeExpression>.GetEnumerator
System.Collections.Generic.IEnumerable<System.Data.Metadata.Edm.EdmSchemaError>.GetEnumerator
System.Collections.IEnumerable.GetEnumerator
get_Generator
set_Generator
EntityStoreSchemaGenerator
EntityModelSchemaGenerator
EntityCodeGenerator
ClientApiGenerator
System.Data.Entity.Design.SsdlGenerator
get_TargetEntityFrameworkVersionToNewForEntityClassGenerator
EntityViewGenerator
_generator
Activator
.ctor
.cctor
CodeConstructor
MetadataMappingHasherVisitor
BindAs
Template_GenCommentAddToMethodCs
RelationshipDetailFromTableAlias
RelationshipDetailToTableAlias
FunctionReturnTableDetailAlias
FunctionDetailAlias
ViewDetailAlias
alias
additionalEdmSchemas
RelationshipSpansSchemas
TemplateCodeGenerators.CSharpCodeGenTemplateV5.0.cs
TemplateCodeGenerators.CSharpCodeGenTemplate.cs
ParameterTypeSemantics
GetCollectionTypeReferenceForBagSemantics
GetCollectionTypeReferenceForListSemantics
System.Diagnostics
SetupFields
get_AssociationSetEnds
EmitPropertyOnChangePartialMethods
get_Template_RegionPartialMethods
CreateContextPartialMethods
MetadataExtensionMethods
get_Template_RegionAddToMethods
_VBFixMethods
_CSFixMethods
_knownPluralWords
_knownSingluarWords
EDesignRes
AddInterfaces
get_AdditionalInterfaces
_additionalInterfaces
v1Namespaces
v2Namespaces
v3Namespaces
get_Namespaces
get_EdmNamespaces
xmlPrefixToNamespaces
System.Data.Entity.Design.PluralizationServices
UnsupportedLocaleForPluralizationServices
System.Runtime.InteropServices
DbProviderServices
SqlProviderServices
GetProviderServices
providerServices
System.Runtime.CompilerServices
PropertyTypeReferences
System.Resources
get_Resources
System.Data.Entity.Design.resources
DebuggingModes
ExtractConceptualMappingAndStorageNodes
SelectNodes
System.Data.Common.CommandTrees
get_ReferencedAssemblies
DbProviderFactories
AddStoreSchemaResourceMapEntries
AddMappingSchemaResourceMapEntries
AddEdmSchemaResourceMapEntries
TryGetEndEntities
_missingEntities
GetAllEntities
get_Template_RegionEntities
ReadOnlyEntities
get_Properties
get_MetadataProperties
AddMetadataProperties
get_Template_RegionSimpleProperties
get_Template_RegionPrimitiveProperties
CollectAllFkProperties
CreateEdmProperties
get_FromProperties
get_NavigationProperties
CreateModelNavigationProperties
get_Template_RegionNavigationProperties
get_ToProperties
GetProperties
get_Template_RegionObjectSetProperties
EmitProperties
get_Template_RegionComplexProperties
get_GenerateForeignKeyProperties
set_GenerateForeignKeyProperties
properties
TypeValueTables
usedNames
InitializeTypeReservedNames
_typeReservedNames
usedEndNames
UsedTypeNames
UsedGlobalModelTypeNames
UsedEntityContainerItemNames
LoadNameLookupWithUsedMemberNames
usedMemberNames
usedEndMemberNames
usedParameterNames
usedPropertyNames
AddToPropertyNames
names
GetFormattedLines
SplitIntoLines
commentLines
get_Types
get_SchemaTypes
GetDirectSubTypes
InvalidTypes
_invalidTypes
GetSourceTypes
CreateTableTypes
get_BaseTypes
GetPrimitiveTypes
get_Template_RegionEnumTypes
CreateAssociationTypes
EntityStoreSchemaFilterObjectTypes
CreateTvfReturnRowTypes
get_Template_RegionComplexTypes
queryTypes
CreateTableEntityTypes
CreateViewEntityTypes
_types
filterAliases
System.Data.Objects.DataClasses
FindAllInvalidCollapsedAssociationCandidates
get_Attributes
set_Attributes
get_TypeAttributes
set_TypeAttributes
EmitKnownTypeAttributes
EmitTypeAttributes
AddIgnoreAttributes
get_AdditionalAttributes
_additionalAttributes
get_CustomAttributes
EmitCustomAttributes
get_AssemblyCustomAttributes
MemberAttributes
WriteExtendedPropertyAttributes
EmitNavigationPropertyAttributes
EmitPropertyAttributes
get_Values
GetValues
get_NullFacetValues
_values
_privateMemberPrefixes
suffixes
BindingFlags
BuildProviderResultFlags
GetResultFlags
CheckIfAllErrorsAreWarnings
SplitViewStrings
<>3__viewStrings
XmlWriterSettings
get_BaseConstructorArgs
TypeGeneratedEventArgs
PropertyGeneratedEventArgs
eventArgs
additionalEdmSchemaFilePaths
set_ReferenceCsdlPaths
_referenceCsdlPaths
GetPaths
<>4__this
get_Ticks
LeadingBlanks
Equals
LoadTableDetails
_tableTableDetails
LoadFunctionReturnTableDetails
LoadFunctionDetails
_tableRelationshipDetails
LoadViewDetails
System.Data.Common.Utils
BuildProviderUtils
EntityDesignerUtils
GetItems
commentedOutItems
Contains
get_Columns
excludedColumns
AreAllEntityColumnsMappedAsToColumns
InferKeyColumns
columns
DataTableExtensions
System.Data.DataSetExtensions
DataRowExtensions
ValidVersions
EntityFrameworkVersions
System.Text.RegularExpressions
GetAppendViewStringsExpressions
CandidateCollapsedAssociations
IsEntityDependentSideOfBothAssociations
IsAtLeastOneColumnFKInBothAssociations
System.Collections
_storeFunctions
CreateEdmFunctions
MapFunctions
CodeTypeReferenceOptions
get_LanguageOptions
set_CompilerOptions
CodeGeneratorOptions
RegexOptions
GetAssociatedFacetDescriptions
get_FixUps
get_ClassFixUps
_classFixUps
_fixUps
LoadRelationships
get_Template_RegionRelationships
MappingLookups
_mappingLookups
_lookups
get_Groups
fixups
get_Chars
get_Members
AddMembers
get_AssociationEndMembers
get_RelationshipEndMembers
get_AdditionalMembers
_additionalMembers
set_BlankLinesBetweenMembers
GetMembers
get_KeyMembers
GetDeclaredOnlyMembers
members
closeReaders
DisposeXmlReaders
xmlReaders
GetReaders
readers
loaders
_knownIdentifiers
_CSFieldMarkers
_VBNonDeclMarkers
RuntimeHelpers
TypeHelpers
RemoveXmlCommentCharacters
get_Parameters
ReturnParameters
CompilerParameters
parameters
_VBEndOfClassDelimiters
_CSEndOfClassDelimiters
Filters
filters
AccessibilityFromGettersAndSetters
System.Data.EntityModel.Emitters
get_Errors
get_ProviderSchemaErrors
schemaErrors
ThrowOnAnyNonWarningErrors
GetViewsWithErrors
HandleValidationErrors
get_HasErrors
HasErrorSeverityErrors
_errors
EmitterCreators
CreateConstructors
get_Template_RegionConstructors
get_Class
set_Class
AdoFrameworkGenericDataClass
AdoFrameworkGenericClass
EndClass
get_UsingStandardBaseClass
_usingStandardBaseClass
get_IEntityWithRelationshipsTypeBaseClass
get_ComplexTypeBaseClass
get_EntityTypeBaseClass
EmitApiClass
BeginClass
get_IsClass
InitClass
_class
FileAccess
typeAccess
setAccess
get_Success
System.Data.Objects
get_AssociationSets
_storeAssociationSets
CollapsedEntityAssociationSets
get_BaseEntitySets
FixupKeylessEntitySets
IsAlphabets
get_Facets
WritePropertyTypeFacets
AttributeTargets
CompilerResults
results
DesignXmlConstants
EntityViewGenerationConstants
get_Statements
get_TrueStatements
get_GetStatements
get_AdditionalGetStatements
_additionalGetStatements
get_SetStatements
get_AdditionalSetStatements
_additionalSetStatements
EmitScalarTypePropertySetStatements
EmitComplexTypePropertySetStatements
statements
get_Comments
get_GetViewAtMethodComments
NamespaceComments
get_TypeComments
EmitXmlComments
EmitParamComments
EmitOtherDocumentationComments
get_ConstructorComments
EmitComments
IndividualViewComments
EmitSummaryComments
summaryComments
get_Arguments
get_TypeArguments
AddAttributeArguments
AddNamedAttributeArguments
arguments
get_ReferentialConstraints
GetConstraints
get_FunctionImports
get_Template_RegionFunctionImports
Exists
get_Template_RegionContexts
EntityCreationStatus
generatedViews
GenerateAndStoreViews
InternalGenerateViews
TypeValueViews
CreateTypeForStoringViews
GenerateEntitySetViews
GetEntitySetViews
HashOverAllExtentViews
get_Rows
tableDetailsRows
get_Keys
pKeys
_tablesWithoutKeys
primaryKeys
Concat
Format
format
CreateMetadataPropertyFromOtherNamespaceXmlArtifact
get_Abstract
get_Effect
EntityStoreSchemaFilterEffect
_effect
StructuralObject
GetObject
set_TargetObject
ComplexObject
EntityObject
object
Project
Select
Intersect
Template_FactoryMethodNameConflict
GeneratedFactoryMethodNameConflict
GeneratedNavigationPropertyNameConflict
Template_CaseInsensitiveTypeConflict
Template_CaseInsensitiveMemberConflict
Template_CaseInsensitiveEntitySetConflict
EntityTypeAndSetAccessibilityConflict
GeneratedPropertyAccessibilityConflict
set_HasGet
System.Data.Entity.Design.AspNet
EFNamespaceSet
SecurityRuleSet
definingSet
collapsedAssociationSet
storeAssociationSet
CreateAssociationSet
get_ModelAssociationSet
set_ModelAssociationSet
CreateModelAssociationSet
StoreAssociationSetToModelAssociationSet
parentModelAssociationSet
_modelAssociationSet
get_ParentAssociationSet
CollapsedEntityAssociationSet
associationSet
EntityTypeToSet
set_HasSet
multiplicitySet
get_EntitySet
_storeEntitySet
CreateEntitySet
CreateModelEntitySet
StoreEntitySetToModelEntitySet
VerifyLanguageCaseSensitiveCompatibilityForEntitySet
IsEntitySet
GetEntitySet
entitySet
get_DefaultValueFacet
IsSpecialFacet
StoreGeneratedPatternFacet
SkipFacet
facet
CheckForCompatibleSchemaAndTarget
excludedForTarget
UnsupportedDataTypeForTarget
UnsupportedFunctionReturnDataTypeForTarget
UnsupportedFunctionParameterDataTypeForTarget
ValidateActualVersionAgainstTarget
target
System.Collections.IEnumerator.Reset
get_Offset
get_DateTimeOffset
_dateTimeOffset
offset
PadLeft
IsLeftMoreAccessableThanRight
right
IsLetterOrDigit
Split
get_CompileUnit
AddCodeCompileUnit
GenerateCodeFromCompileUnit
CodeSnippetCompileUnit
_compileUnit
GetValueOrDefault
FirstOrDefault
HasDefault
IAsyncResult
CreateModelComplexTypeForTvfResult
ObjectResult
result
ToUpperInvariant
ToLowerInvariant
FormatInvariant
get_IsConstant
set_Indent
System.Data.SqlClient
System.Data.EntityClient
XElement
WriteSchemaElement
GetSchemaElement
WriteEndElement
WriteRelationshipEndElement
WriteAssociationSetEndElement
SummaryEndElement
WriteReferentialConstraintRoleElement
WriteTypeElement
WriteAssociationTypeElement
WriteRowTypeElement
WriteComplexTypeElement
WriteEntityTypeElement
WriteEntityTypeMappingElement
WriteEntityContainerMappingElement
WriteAssociationSetMappingElement
WriteEntitySetMappingElement
WriteFunctionImportMappingElement
XmlElement
xmlElement
WriteOperationActionElement
WriteFunctionElement
WriteConditionElement
WriteEntityContainerElement
WriteFunctionParameterElement
WriteAssociationSetElement
WriteEntitySetElement
WriteMappingFragmentElement
get_DocumentElement
WriteReferentialConstraintElement
WriteStartElement
WriteMappingStartElement
SummaryStartElement
WriteEndPropertyElement
WritePropertyElement
WriteNavigationPropertyElement
WriteScalarPropertyElement
element
CodeStatement
CodeAssignStatement
CodeExpressionStatement
CodeVariableDeclarationStatement
CodeConditionStatement
CodeThrowExceptionStatement
CodeMethodReturnStatement
CodeCommentStatement
segment
docComment
Template_FactoryMethodComment
WriteComment
Template_ContextCommonCtorComment
Template_ContextDefaultCtorComment
WriteErrorsComment
FactoryMethodSummaryComment
EmptyCtorSummaryComment
comment
Environment
XmlDocument
InvalidNamespaceNameArgument
InvalidEntityContainerNameArgument
CodeAttributeArgument
InvalidStringArgument
CheckStringArgument
CheckTargetEntityFrameworkVersionArgument
CreateFunctionArgument
CheckLanguageOptionArgument
argument
Component
System.Collections.Generic.IEnumerator<System.String>.Current
System.Collections.Generic.IEnumerator<System.Data.Metadata.Edm.GlobalItem>.Current
System.Collections.Generic.IEnumerator<System.CodeDom.CodeMethodInvokeExpression>.Current
System.Collections.Generic.IEnumerator<System.Data.Metadata.Edm.EdmSchemaError>.Current
System.Collections.IEnumerator.Current
System.Collections.Generic.IEnumerator<System.String>.get_Current
System.Collections.Generic.IEnumerator<System.Data.Metadata.Edm.GlobalItem>.get_Current
System.Collections.Generic.IEnumerator<System.CodeDom.CodeMethodInvokeExpression>.get_Current
System.Collections.Generic.IEnumerator<System.Data.Metadata.Edm.EdmSchemaError>.get_Current
System.Collections.IEnumerator.get_Current
<>2__current
GenerateHashForAllExtentViewsContent
RaiseTypeGeneratedEvent
RaisePropertyGeneratedEvent
storeConstraint
AddReferentialConstraint
CreateReferentialConstraint
RequiresModelReferentialConstraint
GetReferentialConstraint
constraint
get_Count
get_ColumnCount
UnsupportedModelGenerationConcept
Except
Insert
Convert
toSort
AddFunctionImport
UnmappedFunctionImport
GetReturnTypeFromFunctionImport
StoreFunctionToFunctionImport
get_IsFunctionImport
ShouldEmitFunctionImport
functionImport
DbProviderManifest
get_EdmProviderManifest
get_IsFromProviderManifest
GetProviderManifest
Latest
_irregularVerbList
_uninflectiveWordList
XmlNodeList
_knownConflictingPluralList
_pronounList
ToList
_uninflectiveSuffixList
get_RealErrorsExist
refconst
TFirst
ReplaceFirst
ExistsInFirst
first
set_CommandTimeout
input
MoveNext
System.Text
get_CommandText
set_CommandText
searchText
ReadAllText
TransformText
_transformText
get_ErrorText
set_ErrorText
insertText
viewText
StreamingContext
streamingContext
get_ObjectContext
_objectContext
context
GenerateDictionaryForEntitySetNameAndView
ValidateFunctionView
GetCqtView
HasQueryView
DefaultTargetVersionTooLow
get_EntityCodeGenTargetTooLow
get_Now
DataRow
TableDetailsRow
RelationshipDetailsRow
_currentRow
NewRow
Allow
index
Regex
ViewGenerationTypeNamePrefix
AnnotationPrefix
PrivateMemberPrefix
_complexPropertyInitializedSuffix
DoesWordContainSuffix
ThenBy
OrderBy
get_ByteArray
_byteArray
InitializeArray
ToArray
ToCharArray
EmitPropertyGetterBody
EmitPropertySetterBody
get_Key
tableKey
AreRelationshipColumnsTheTypesEntireKey
SharedForeignKey
PrimaryKeyCannotBeForeignKey
get_IsForeignKey
functionKey
ContainsKey
CreateDbObjectKey
GetKey
AddTableWithoutKey
ContainsTableWithoutKey
InvalidTypeForPrimaryKey
get_IsPrimaryKey
set_IsPrimaryKey
_columnIsPrimaryKey
CannotCreateEntityWithoutPrimaryKey
System.Security.Cryptography
get_Assembly
get_CompiledAssembly
GetExecutingAssembly
get_IsAssembly
AsReadOnly
ExcludedColumnWasAKeyColumnEntityIsReadOnly
SetReadOnly
IndexOfAny
SelectMany
get_Summary
GetCodeExpressionFromBinary
get_FirstToSecondDictionary
set_FirstToSecondDictionary
firstToSecondDictionary
_wordsEndingWithSeDictionary
StringBidirectionalDictionary
_assimilatedClassicalInflectionDictionary
_classicalInflectionDictionary
ToDictionary
DuplicateEntryInUserDictionary
_userDictionary
AsDictionary
_wordsEndingWithSisDictionary
_irregularPluralsDictionary
_wordsEndingWithSusDictionary
get_SecondToFirstDictionary
set_SecondToFirstDictionary
_oSuffixDictionary
_wordsEndingWithInxAnxYnxDictionary
dictionary
get_DefiningQuery
set_DefiningQuery
FixupViewEntitySetDefiningQuery
category
set_GenerateInMemory
ProviderFactoryReturnedNullFactory
MetadataItemCollectionFactory
DbProviderFactory
get_StoreProviderFactory
GetProviderFactory
GetFactory
SqlClientFactory
factory
EntityStoreSchemaFilterEntry
AddFilterEntry
entry
capacity
GetXmlMultiplicity
get_RelationshipMultiplicity
relationshipMultiplicity
multiplicity
op_Equality
op_Inequality
VerifyGetterAndSetterAccessibilityCompatability
VerifyEntityTypeAndSetAccessibilityCompatability
SetTypeVisibility
DesignerSerializationVisibility
GetEntityTypeAccessibility
GetGetterAccessibility
GetSetterAccessibility
GetFunctionImportAccessibility
GetEntitySetPropertyAccessibility
propertyAccessibility
accessibility
VirtualPathUtility
get_Severity
EdmSchemaErrorSeverity
severity
System.Security
System.Data.Entity
AddEntity
MissingEntity
TryGetEntity
get_Identity
itemIdentity
get_IsIdentity
set_IsIdentity
_columnIsIdentity
parentIdentity
IsNullOrEmpty
get_IsEmpty
get_Property
set_Property
MetadataProperty
StructuredProperty
EndProperty
LineIsVBBeginClassMethodProperty
cSpaceProperty
referenceProperty
storeProperty
hidesBaseProperty
get_IsVirtualProperty
CreateModelProperty
StoreEdmPropertyToModelEdmProperty
BeginProperty
CreateModelNavigationProperty
EmitNavigationProperty
navigationProperty
PropertyInfoProperty
CodeMemberProperty
memberProperty
InvalidAttributeSuppliedForProperty
InvalidGetStatementSuppliedForProperty
InvalidSetStatementSuppliedForProperty
VerifyLanguageCaseSensitiveCompatibilityForProperty
get_HidesBaseClassProperty
CreateEntitySetAddObjectProperty
GetProperty
CreateEntitySetProperty
EmitProperty
storeKeyProperty
get_IsKeyProperty
_property
System.Data.Entity.Design
EdmCodeGenFixup-
EdmRelationshipAttribute
RelationshipMultiplicity
EdmEntityTypeAttribute
System.Runtime.Serialization.DataContractAttribute
IsReference
System.Serializable
System.Runtime.Serialization.KnownTypeAttribute
NamespaceName
EdmRelationshipNavigationPropertyAttribute
System.CodeDom.Compiler.GeneratedCode
System.Data.Entity.Design.EntityClassGenerator
EdmScalarPropertyAttribute
EntityKeyProperty
IsNullable
EdmComplexPropertyAttribute
System.ComponentModel.DesignerSerializationVisibility
Content
System.Xml.Serialization.XmlElement
System.Xml.Serialization.SoapElement
EdmComplexTypeAttribute
System.Runtime.Serialization.DataMemberAttribute
System.Data.Objects.DataClasses
FullName
<param name="{0}">{1}</param>
LeadingBlanks
LongDescription
summary
<{0}>
</{0}>
^(?<LeadingBlanks>\s{1,})\S
OnContextCreated
name=
connectionString
EntityConnection
connection
ObjectQuery
CreateQuery
AddTo
AddObject
ExecuteFunction
Parameter
HasValue
<KeyProperties>
</KeyProperties>
public abstract
partial
Public MustOverride
Partial Private
        End Sub
override
sealed
Overrides
NotOverridable
internal
Friend
private
Private
protected
Protected
public
Public
static
class
static 
 class 
Class
End Class
MustOverride Sub
Function
Property
End Property
End Sub
End Function
End Get
End Set
GetterAccess
SetterAccess
MethodAccess
TypeAccess
Internal
System.Data.Objects.DataClasses.EdmSchemaAttribute
Reference
InitializeRelatedReference
RelationshipManager
Value
InitializeRelatedCollection
EntityReference
EntityCollection
GetRelatedReference
GetRelatedCollection
value
GetValidValue
ReportPropertyChanging
ReportPropertyChanged
SetValidValue
CollectionKind
Changing
Changed
Create
VerifyComplexObjectIsNotNull
System.Data.Objects
ObjectResult
ObjectContext
IEntityWithRelationships
System.Data.Objects.
System.Data.Objects.DataClasses.
System.Data.Metadata.Edm.
System.Data.EntityClient.
http://schemas.microsoft.com/ado/2006/04/codegeneration:
_Initialize_
PropertyInfo
Initialized
EntityStoreGeneratorSchemaNotLoaded
EntityModelGeneratorSchemaNotLoaded
StonglyTypedAccessToNullValue
NoPrimaryKeyDefined
InvalidTypeForPrimaryKey
CannotCreateEntityWithNoPrimaryKeyDefined
TableReferencedByAssociationWasNotFound
TableReferencedByTvfWasNotFound
UnsupportedDataType
UnsupportedDataTypeUnknownType
UnsupportedFunctionReturnDataType
UnsupportedFunctionParameterDataType
UnsupportedDataTypeForTarget
UnsupportedFunctionReturnDataTypeForTarget
UnsupportedFunctionParameterDataTypeForTarget
UnsupportedDbRelationship
ParameterDirectionNotValid
InvalidStringArgument
Serialization_UnknownGlobalItem
ReservedNamespace
ColumnFacetValueOutOfRange
AssociationMissingKeyColumn
SingleStoreEntityContainerExpected
InvalidNonStoreEntityContainer
ExcludedColumnWasAKeyColumnEntityIsInvalid
ExcludedColumnWasAKeyColumnEntityIsReadOnly
ModelGeneration_UnGeneratableType
DuplicateEntityContainerName
ProviderFactoryReturnedNullFactory
ProviderSchemaErrors
InvalidNamespaceNameArgument
InvalidEntityContainerNameArgument
EntityClient_InvalidStoreProvider
DbProviderServicesInformationLocationPath
UnsupportedForeignKeyPattern
UnsupportedQueryViewInEntityContainerMapping
SharedForeignKey
UnmappedFunctionImport
CannotChangePropertyReturnType
CannotChangePropertyReturnTypeToNull
CodeGenSourceFilePathIsNotAFile
InvalidAttributeSuppliedForType
InvalidMemberSuppliedForType
InvalidInterfaceSuppliedForType
InvalidAttributeSuppliedForProperty
InvalidGetStatementSuppliedForProperty
InvalidSetStatementSuppliedForProperty
PropertyExistsWithDifferentCase
EntitySetExistsWithDifferentCase
ItemExistsWithDifferentCase
NullAdditionalSchema
DuplicateClassName
TargetEntityFrameworkVersionToNewForEntityClassGenerator
MissingPropertyDocumentation
MissingComplexTypeDocumentation
MissingDocumentation
MissingDocumentationNoName
NamespaceComments
FactoryMethodSummaryComment
FactoryParamCommentGeneral
CtorSummaryComment
EmptyCtorSummaryComment
GeneratedNavigationPropertyNameConflict
GeneratedPropertyAccessibilityConflict
EntityTypeAndSetAccessibilityConflict
GeneratedFactoryMethodNameConflict
MetadataItemErrorsFoundDuringGeneration
UnableToGenerateForeignKeyPropertiesForV1
UnableToGenerateFunctionImportParameterName
TypeComments
GetViewAtMethodComments
ConstructorComments
IndividualViewComments
TargetVersionSchemaVersionMismatch
DuplicateEntryInUserDictionary
UnsupportedLocaleForPluralizationServices
Template_DuplicateTopLevelType
Template_ConflictingGeneratedNavPropName
Template_FactoryMethodNameConflict
Template_CaseInsensitiveTypeConflict
Template_CaseInsensitiveEntitySetConflict
Template_CaseInsensitiveMemberConflict
Template_GenCommentAddToMethodCs
Template_GenCommentAddToMethodVb
Template_CommentNoDocumentation
Template_CommentFactoryMethodParam
Template_GeneratedCodeCommentLine1
Template_GeneratedCodeCommentLine2
Template_GeneratedCodeCommentLine3
Template_ContextDefaultCtorComment
Template_ContextCommonCtorComment
Template_FactoryMethodComment
Template_RegionRelationships
Template_RegionContexts
Template_RegionObjectSetProperties
Template_RegionAddToMethods
Template_RegionFunctionImports
Template_RegionEntities
Template_RegionNavigationProperties
Template_RegionComplexTypes
Template_RegionFactoryMethod
Template_RegionPrimitiveProperties
Template_RegionSimpleProperties
Template_RegionComplexProperties
Template_RegionEnumTypes
Template_RegionConstructors
Template_RegionPartialMethods
Template_ReplaceVsItemTemplateToken
Template_CurrentlyRunningTemplate
Template_UnsupportedSchema
EdmSchemaNotValid
EdmSchemaFileNotFound
EntityCodeGenTargetTooLow
DefaultTargetVersionTooLow
EntityClient_DoesNotImplementIServiceProvider
EntityClient_ReturnedNullOnProviderMethod
edmNamespace
objectNamespace
languageOption
sourceEdmSchema
target
additionalEdmSchemas
additionalEdmSchema
sourceEdmSchemaFilePath
additionalEdmSchemaFilePaths
targetPath
.csdl
sourceEdmSchemaPath
/edmx:Edmx/edmx:Runtime/edmx:ConceptualModels/edm:Schema
/edmx:Edmx/edmx:Runtime/edmx:StorageModels/ssdl:Schema
/edmx:Edmx/edmx:Runtime/edmx:Mappings/map:Mapping
/edmx:Edmx/edmx:Designer/edmx:Connection/edmx:DesignerInfoPropertySet/edmx:DesignerProperty
MetadataArtifactProcessing
http://schemas.microsoft.com/ado/2007/06/edmx
http://schemas.microsoft.com/ado/2006/04/edm
urn:schemas-microsoft-com:windows:storage:mapping:CS
http://schemas.microsoft.com/ado/2006/04/edm/ssdl
http://schemas.microsoft.com/ado/2008/10/edmx
http://schemas.microsoft.com/ado/2008/09/edm
http://schemas.microsoft.com/ado/2008/09/mapping/cs
http://schemas.microsoft.com/ado/2009/02/edm/ssdl
http://schemas.microsoft.com/ado/2009/11/edmx
http://schemas.microsoft.com/ado/2009/11/edm
http://schemas.microsoft.com/ado/2009/11/mapping/cs
http://schemas.microsoft.com/ado/2009/11/edm/ssdl
.edmx
namespaceName
modelEntityContainerName
storeItemCollection
storeEntityContainer
targetEntityFrameworkVersion
outputFileName
writer
http://schemas.microsoft.com/ado/2009/02/edm/annotation:LazyLoadingEnabled
annotation
http://schemas.microsoft.com/ado/2009/02/edm/annotation
ReturnType
_Result
Application
Target
Model
Context
StoreGeneratedPattern
http://schemas.microsoft.com/ado/2009/02/edm/annotation:StoreGeneratedPattern
types
Edm_EntityMappingGeneratedViews
System.Data.Mapping.EntityViewGenerationAttribute
ViewsForBaseEntitySets
System.Data.Mapping.EntityViewContainer
EdmEntityContainerName
StoreEntityContainerName
HashOverMappingClosure
HashOverAllExtentViews
ViewCount
GetViewAt
<Summary>
</Summary>
mappingCollection
outputPath
outputWriter
index
GetView
ToString
viewString
Append
edmCollection
storeCollection
readers
entityFrameworkVersion
dataSpace
providerInvariantName
filters
Container
store
http://schemas.microsoft.com/ado/2007/12/edm/EntityStoreSchemaGenerator
Tables
Views
Nullable
Precision
Scale
MaxLength
Schema
{0}({1})
TemplateCodeGenerators.CSharpCodeGenTemplate.cs
TemplateCodeGenerators.CSharpCodeGenTemplate
TemplateCodeGenerators.CSharpCodeGenTemplateV5.0.cs
TemplateCodeGenerators.CSharpCodeGenTemplateV50
TemplateCodeGenerators.VBCodeGenTemplate.vb
TemplateCodeGenerators.VBCodeGenTemplate
TemplateCodeGenerators.VBCodeGenTemplateV5.0.vb
TemplateCodeGenerators.VBCodeGenTemplateV50
/d:PREPROCESSED_TEMPLATE
sheep
bison
flounder
pliers
bream
gallows
proceedings
breeches
graffiti
rabies
britches
headquarters
salmon
herpes
scissors
chassis
high-jinks
sea-bass
clippers
homework
series
innings
shears
contretemps
jackanapes
species
corps
mackerel
swine
debris
measles
trout
diabetes
djinn
mumps
whiting
eland
wildebeest
pincers
police
chaos
cotton
pneumonoultramicroscopicsilicovolcanoconiosis
information
aircraft
scabies
traffic
millet
tobacco
cabbage
broccoli
asparagus
lettuce
venison
mutton
cattle
offspring
molasses
shambles
shingles
myself
ourselves
yourself
himself
herself
itself
oneself
oneselves
their
yours
theirs
these
those
another
anybody
anyone
anything
other
either
everyone
everybody
everything
nothing
nobody
others
somebody
someone
something
whatever
which
whichever
whoever
whomever
whose
brother
brothers
child
children
ephemeris
ephemerides
genie
genies
money
moneys
mongoose
mongooses
mythos
mythoi
octopus
octopuses
soliloquy
soliloquies
trilby
trilbys
crisis
crises
synopsis
synopses
roses
gases
buses
memos
casino
casinos
silos
stereo
stereos
studio
studios
lenses
alias
aliases
corpus
corpora
viscus
viscera
hippopotamus
hippopotami
trace
traces
person
people
chili
chilies
analysis
analyses
basis
bases
neurosis
neuroses
oasis
oases
synthesis
syntheses
thesis
theses
change
changes
calorie
calories
freebie
freebies
cases
house
houses
valve
valves
cloth
clothes
movie
movies
bonus
bonuses
specimen
specimens
alumna
alumnae
algae
vertebra
vertebrae
codex
codices
murex
murices
silex
silices
aphelion
aphelia
hyperbaton
hyperbata
perihelion
perihelia
asyndeton
asyndeta
noumenon
noumena
phenomenon
phenomena
criterion
criteria
organon
organa
prolegomenon
prolegomena
agendum
agenda
datum
extremum
extrema
bacterium
bacteria
desideratum
desiderata
stratum
strata
candelabrum
candelabra
erratum
errata
forum
addendum
addenda
stadium
stadia
automaton
automata
polyhedron
polyhedra
albino
albinos
generalissimo
generalissimos
manifesto
manifestos
archipelago
archipelagos
ghetto
ghettos
medico
medicos
armadillo
armadillos
guano
guanos
octavo
octavos
commando
commandos
inferno
infernos
photo
photos
ditto
dittos
jumbo
jumbos
dynamo
dynamos
lingo
lingos
quarto
quartos
embryo
embryos
lumbago
lumbagos
rhino
rhinos
fiasco
fiascos
magneto
magnetos
stylo
stylos
stamen
stamina
foramen
foramina
lumen
lumina
anathema
anathemata
enema
enemata
oedema
oedemata
bemata
enigma
enigmata
sarcoma
sarcomata
carcinoma
carcinomata
gumma
gummata
schema
schemata
charisma
charismata
lemma
lemmata
somata
diploma
diplomata
lymphoma
lymphomata
stigma
stigmata
dogma
dogmata
magma
magmata
stoma
stomata
drama
dramata
melisma
melismata
trauma
traumata
edema
edemata
miasma
miasmata
abscissa
abscissae
formula
formulae
medusa
medusae
amoeba
amoebae
hydra
hydrae
nebula
nebulae
antenna
antennae
hyperbola
hyperbolae
novae
aurora
aurorae
lacuna
lacunae
parabola
parabolae
apices
latex
latices
vertex
vertices
cortex
cortices
pontifex
pontifices
vortex
vortices
indices
simplex
simplices
irides
clitoris
clitorides
contralto
contralti
soprano
soprani
basso
bassi
crescendo
crescendi
tempo
tempi
canto
canti
aquarium
aquaria
interregnum
interregna
quantum
quanta
compendium
compendia
lustrum
lustra
rostrum
rostra
consortium
consortia
maximum
maxima
spectrum
spectra
cranium
crania
medium
media
speculum
specula
curriculum
curricula
memorandum
memoranda
dictum
dicta
millenium
millenia
trapezium
trapezia
emporium
emporia
minimum
minima
ultimatum
ultimata
enconium
enconia
momentum
momenta
vacuum
vacua
gymnasium
gymnasia
optimum
optima
velum
honorarium
honoraria
phylum
phyla
focus
nimbus
nimbi
succubus
succubi
fungus
fungi
nucleolus
nucleoli
torus
genius
genii
radius
radii
umbilicus
umbilici
incubus
incubi
stylus
styli
uterus
uteri
stimulus
stimuli
apparatus
impetus
prospectus
cantus
nexus
sinus
coitus
plexus
status
hiatus
afreet
afreeti
afrit
afriti
efreet
efreeti
cherub
cherubim
goyim
seraph
seraphim
alumnus
alumni
enterprise
enterprises
purchase
purchases
surprise
surprises
release
releases
disease
diseases
promise
promises
refuse
refuses
whoses
phase
phases
noise
noises
nurse
nurses
franchise
franchises
supervise
supervises
farmhouse
farmhouses
suitcase
suitcases
recourse
recourses
impulse
impulses
license
licenses
diocese
dioceses
excise
excises
demise
demises
blouse
blouses
bruise
bruises
misuse
misuses
curse
curses
prose
proses
purse
purses
goose
gooses
tease
teases
poise
poises
vases
fuses
muses
slaughterhouse
slaughterhouses
clearinghouse
clearinghouses
endonuclease
endonucleases
steeplechase
steeplechases
metamorphose
metamorphoses
intercourse
intercourses
commonsense
commonsenses
intersperse
intersperses
merchandise
merchandises
phosphatase
phosphatases
summerhouse
summerhouses
watercourse
watercourses
catchphrase
catchphrases
compromise
compromises
greenhouse
greenhouses
lighthouse
lighthouses
paraphrase
paraphrases
mayonnaise
mayonnaises
racecourse
racecourses
apocalypse
apocalypses
courthouse
courthouses
powerhouse
powerhouses
storehouse
storehouses
glasshouse
glasshouses
hypotenuse
hypotenuses
peroxidase
peroxidases
pillowcase
pillowcases
roundhouse
roundhouses
streetwise
streetwises
expertise
expertises
discourse
discourses
warehouse
warehouses
staircase
staircases
workhouse
workhouses
briefcase
briefcases
clubhouse
clubhouses
clockwise
clockwises
concourse
concourses
playhouse
playhouses
turquoise
turquoises
boathouse
boathouses
cellulose
celluloses
epitomise
epitomises
gatehouse
gatehouses
grandiose
grandioses
menopause
menopauses
penthouse
penthouses
racehorse
racehorses
transpose
transposes
almshouse
almshouses
customise
customises
footloose
footlooses
galvanise
galvanises
princesse
princesses
universe
universes
workhorse
workhorses
atherosclerosis
atheroscleroses
electrophoresis
electrophoreses
psychoanalysis
psychoanalyses
photosynthesis
photosyntheses
amniocentesis
amniocenteses
metamorphosis
toxoplasmosis
toxoplasmoses
endometriosis
endometrioses
tuberculosis
tuberculoses
pathogenesis
pathogeneses
osteoporosis
osteoporoses
parenthesis
parentheses
anastomosis
anastomoses
peristalsis
peristalses
hypothesis
hypotheses
antithesis
antitheses
apotheosis
apotheoses
thrombosis
thromboses
diagnosis
diagnoses
paralysis
paralyses
prognosis
prognoses
cirrhosis
cirrhoses
sclerosis
scleroses
psychosis
psychoses
apoptosis
apoptoses
symbiosis
symbioses
consensus
consensuses
census
censuses
sphinx
sphinxes
larynx
larynges
lynxes
pharynx
pharynxes
phalanx
phalanxes
louse
mouse
tooth
teeth
geese
trices
alves
elves
olves
eaves
arves
nives
lives
wives
[^a-zA-Z\s]
singular
plural
culture
NOT (
WHERE
CatalogName
SchemaName
 AND 
 LIKE @
              SELECT 
                  v.CatalogName
              ,   v.SchemaName                           
              ,   v.Name
              ,   v.ColumnName
              ,   v.Ordinal
              ,   v.IsNullable
              ,   v.TypeName
              ,   v.MaxLength
              ,   v.Precision
              ,   v.DateTimePrecision
              ,   v.Scale
              ,   v.IsIdentity
              ,   v.IsStoreGenerated
              ,   CASE WHEN pk.IsPrimaryKey IS NULL THEN false ELSE pk.IsPrimaryKey END as IsPrimaryKey
            FROM (
              SELECT
                  v.CatalogName
              ,   v.SchemaName                           
              ,   v.Name
              ,   c.Id as ColumnId
              ,   c.Name as ColumnName
              ,   c.Ordinal
              ,   c.IsNullable
              ,   c.ColumnType.TypeName as TypeName
              ,   c.ColumnType.MaxLength as MaxLength
              ,   c.ColumnType.Precision as Precision
              ,   c.ColumnType.DateTimePrecision as DateTimePrecision
              ,   c.ColumnType.Scale as Scale
              ,   c.IsIdentity
              ,   c.IsStoreGenerated
              FROM
                  SchemaInformation.Views as v 
                  cross apply 
                  v.Columns as c ) as v 
            LEFT OUTER JOIN (
              SELECT 
                  true as IsPrimaryKey
                , pkc.Id
              FROM
                  OfType(SchemaInformation.ViewConstraints, Store.PrimaryKeyConstraint) as pk
                  CROSS APPLY pk.Columns as pkc) as pk
            ON v.ColumnId = pk.Id                   
             
              SELECT 
                  t.CatalogName
              ,   t.SchemaName                           
              ,   t.Name
              ,   t.ColumnName
              ,   t.Ordinal
              ,   t.IsNullable
              ,   t.TypeName
              ,   t.MaxLength
              ,   t.Precision
              ,   t.DateTimePrecision
              ,   t.Scale
              ,   t.IsIdentity
              ,   t.IsStoreGenerated
              ,   CASE WHEN pk.IsPrimaryKey IS NULL THEN false ELSE pk.IsPrimaryKey END as IsPrimaryKey
            FROM (
              SELECT
                  t.CatalogName
              ,   t.SchemaName                           
              ,   t.Name
              ,   c.Id as ColumnId
              ,   c.Name as ColumnName
              ,   c.Ordinal
              ,   c.IsNullable
              ,   c.ColumnType.TypeName as TypeName
              ,   c.ColumnType.MaxLength as MaxLength
              ,   c.ColumnType.Precision as Precision
              ,   c.ColumnType.DateTimePrecision as DateTimePrecision
              ,   c.ColumnType.Scale as Scale
              ,   c.IsIdentity
              ,   c.IsStoreGenerated
              FROM
                  SchemaInformation.Tables as t 
                  cross apply 
                  t.Columns as c ) as t 
            LEFT OUTER JOIN (
              SELECT 
                  true as IsPrimaryKey
                , pkc.Id
              FROM
                  OfType(SchemaInformation.TableConstraints, Store.PrimaryKeyConstraint) as pk
                  CROSS APPLY pk.Columns as pkc) as pk
            ON t.ColumnId = pk.Id                   
            
              SELECT 
                  tvf.CatalogName
              ,   tvf.SchemaName                           
              ,   tvf.Name
              ,   tvf.ColumnName
              ,   tvf.Ordinal
              ,   tvf.IsNullable
              ,   tvf.TypeName
              ,   tvf.MaxLength
              ,   tvf.Precision
              ,   tvf.DateTimePrecision
              ,   tvf.Scale
              ,   false as IsIdentity
              ,   false as IsStoreGenerated
              ,   false as IsPrimaryKey
            FROM (
              SELECT
                  t.CatalogName
              ,   t.SchemaName                           
              ,   t.Name
              ,   c.Id as ColumnId
              ,   c.Name as ColumnName
              ,   c.Ordinal
              ,   c.IsNullable
              ,   c.ColumnType.TypeName as TypeName
              ,   c.ColumnType.MaxLength as MaxLength
              ,   c.ColumnType.Precision as Precision
              ,   c.ColumnType.DateTimePrecision as DateTimePrecision
              ,   c.ColumnType.Scale as Scale
              FROM
                  OfType(SchemaInformation.Functions, Store.TableValuedFunction) as t 
                  cross apply 
                  t.Columns as c ) as tvf
            
r.FromTable
r.ToTable
              SELECT
                 r.ToTable.CatalogName as ToTableCatalog
               , r.ToTable.SchemaName as ToTableSchema
               , r.ToTable.Name as ToTableName
               , r.ToColumnName
               , r.FromTable.CatalogName as FromTableCatalog
               , r.FromTable.SchemaName as FromTableSchema
               , r.FromTable.Name as FromTableName
               , r.FromColumnName
               , r.Ordinal
               , r.RelationshipName
               , r.RelationshipId
               , r.IsCascadeDelete
              FROM (
               SELECT 
                    fks.ToColumn.Parent as ToTable
               ,    fks.ToColumn.Name as ToColumnName
               ,    c.Parent as FromTable
               ,    fks.FromColumn.Name as FromColumnName
               ,    fks.Ordinal as Ordinal
               ,    c.Name as RelationshipName
               ,    c.Id as RelationshipId
               ,    c.DeleteRule = 'CASCADE' as IsCascadeDelete
            FROM 
                OfType(SchemaInformation.TableConstraints, Store.ForeignKeyConstraint) as c,
                ( SELECT 
                   Ref(fk.Constraint) as cRef
                 ,  fk.ToColumn
                 , fk.FromColumn
                 , fk.Ordinal
                FROM
                   c.ForeignKeys as fk) as fks
                WHERE fks.cRef = Ref(c)) as r
                
INOUT
            ORDER BY
                sp.SchemaName
            ,   sp.Name
            ,   sp.Ordinal
            
RelationshipDetails
PkCatalog
PkSchema
PkTable
PkColumn
FkCatalog
FkSchema
FkTable
FkColumn
Ordinal
RelationshipName
RelationshipId
IsCascadeDelete
TableDetails
TableName
ColumnName
DataType
MaximumLength
DateTimePrecision
IsIdentity
IsServerGenerated
IsPrimaryKey
FunctionImport
Collection(
Aggregate
BuiltIn
NiladicFunction
IsComposable
ParameterTypeSemantics
StoreFunctionName
CommandText
CollectionType
ComplexType
BaseType
Association
RowType
ReferentialConstraint
Principal
Dependent
PropertyRef
Multiplicity
OnDelete
Action
EntityType
Abstract
NavigationProperty
Relationship
FromRole
ToRole
DefaultValue
ClientAutoGenerated
ConcurrencyMode
Collation
GetAssociatedFacetDescriptions
Namespace
Alias
UseStrongSpatialTypes
false
Provider
ProviderManifestToken
xmlns
EntityContainer
LazyLoadingEnabled
AssociationSet
EntitySet
DefiningQuery
Table
Collection({0})
factory
GetService
&amp;
&apos;
&quot;
lookups
storeContainer
modelContainer
EntityContainerMapping
StorageEntityContainer
CdmEntityContainer
FunctionImportMapping
FunctionName
FunctionImportName
ResultMapping
ComplexTypeMapping
TypeName
AssociationSetMapping
StoreEntitySet
Condition
IsNull
EndProperty
EntitySetMapping
EntityTypeMapping
MappingFragment
ScalarProperty
Mapping
Space
No Conceptual Schema node to embed as a resource
No Storage Schema node to embed as a resource
No Mapping node to embed as a resource
.ssdl
TransformText
SourceCsdlPath
ReferenceCsdlPaths
Errors
EdmToObjectNamespaceMap
            SELECT
                  sp.SchemaName
                , sp.Name 
                , sp.ReturnTypeName
                , sp.IsAggregate
                , sp.IsComposable
                , sp.IsBuiltIn
                , sp.IsNiladic
                , sp.ParameterName
                , sp.ParameterType
                , sp.Mode
            FROM (  
            (SELECT
                  r.CatalogName as CatalogName
              ,   r.SchemaName as SchemaName
              ,   r.Name as Name
              ,   r.ReturnType.TypeName as ReturnTypeName
              ,   r.IsAggregate as IsAggregate
              ,   true as IsComposable
              ,   r.IsBuiltIn as IsBuiltIn
              ,   r.IsNiladic as IsNiladic
              ,   p.Name as ParameterName
              ,   p.ParameterType.TypeName as ParameterType
              ,   p.Mode as Mode
              ,   p.Ordinal as Ordinal
            FROM
                OfType(SchemaInformation.Functions, Store.ScalarFunction) as r 
                 OUTER APPLY
                r.Parameters as p)
            UNION ALL
            (SELECT
                  r.CatalogName as CatalogName
              ,   r.SchemaName as SchemaName
              ,   r.Name as Name
              ,   CAST(NULL as string) as ReturnTypeName
              ,   false as IsAggregate
              ,   false as IsComposable
              ,   false as IsBuiltIn
              ,   false as IsNiladic
              ,   p.Name as ParameterName
              ,   p.ParameterType.TypeName as ParameterType
              ,   p.Mode as Mode
              ,   p.Ordinal as Ordinal
            FROM
                SchemaInformation.Procedures as r 
                 OUTER APPLY
                r.Parameters as p)) as sp
            
            Function IsTvf(f Store.Function) as (f is of (Store.TableValuedFunction))
            SELECT
                  sp.CatalogName
                , sp.SchemaName
                , sp.Name 
                , sp.ReturnTypeName
                , sp.IsAggregate
                , sp.IsComposable
                , sp.IsBuiltIn
                , sp.IsNiladic
                , sp.IsTvf
                , sp.ParameterName
                , sp.ParameterType
                , sp.Mode
            FROM (  
            (SELECT
                  r.CatalogName as CatalogName
              ,   r.SchemaName as SchemaName
              ,   r.Name as Name
              ,   TREAT(r as Store.ScalarFunction).ReturnType.TypeName as ReturnTypeName
              ,   TREAT(r as Store.ScalarFunction).IsAggregate as IsAggregate
              ,   true as IsComposable
              ,   r.IsBuiltIn as IsBuiltIn
              ,   r.IsNiladic as IsNiladic
              ,   IsTvf(r) as IsTvf
              ,   p.Name as ParameterName
              ,   p.ParameterType.TypeName as ParameterType
              ,   p.Mode as Mode
              ,   p.Ordinal as Ordinal
            FROM
                SchemaInformation.Functions as r 
                 OUTER APPLY
                r.Parameters as p)
            UNION ALL
            (SELECT
                  r.CatalogName as CatalogName
              ,   r.SchemaName as SchemaName
              ,   r.Name as Name
              ,   CAST(NULL as string) as ReturnTypeName
              ,   false as IsAggregate
              ,   false as IsComposable
              ,   false as IsBuiltIn
              ,   false as IsNiladic
              ,   false as IsTvf
              ,   p.Name as ParameterName
              ,   p.ParameterType.TypeName as ParameterType
              ,   p.Mode as Mode
              ,   p.Ordinal as Ordinal
            FROM
                SchemaInformation.Procedures as r 
                 OUTER APPLY
                r.Parameters as p)) as sp
            
EntityStoreGeneratorSchemaNotLoaded
EntityModelGeneratorSchemaNotLoaded
StonglyTypedAccessToNullValue
NoPrimaryKeyDefined
InvalidTypeForPrimaryKey
CannotCreateEntityWithNoPrimaryKeyDefined
TableReferencedByAssociationWasNotFound
TableReferencedByTvfWasNotFound
UnsupportedDataType
UnsupportedDataTypeUnknownType
UnsupportedFunctionReturnDataType
UnsupportedFunctionParameterDataType
UnsupportedDataTypeForTarget
UnsupportedFunctionReturnDataTypeForTarget
UnsupportedFunctionParameterDataTypeForTarget
UnsupportedDbRelationship
ParameterDirectionNotValid
InvalidStringArgument
Serialization_UnknownGlobalItem
ReservedNamespace
ColumnFacetValueOutOfRange
AssociationMissingKeyColumn
SingleStoreEntityContainerExpected
InvalidNonStoreEntityContainer
ExcludedColumnWasAKeyColumnEntityIsInvalid
ExcludedColumnWasAKeyColumnEntityIsReadOnly
ModelGeneration_UnGeneratableType
DuplicateEntityContainerName
ProviderFactoryReturnedNullFactory
ProviderSchemaErrors
InvalidNamespaceNameArgument
InvalidEntityContainerNameArgument
EntityClient_InvalidStoreProvider
DbProviderServicesInformationLocationPath
UnsupportedForeignKeyPattern
UnsupportedQueryViewInEntityContainerMapping
SharedForeignKey
UnmappedFunctionImport
CannotChangePropertyReturnType
CannotChangePropertyReturnTypeToNull
CodeGenSourceFilePathIsNotAFile
InvalidAttributeSuppliedForType
InvalidMemberSuppliedForType
InvalidInterfaceSuppliedForType
InvalidAttributeSuppliedForProperty
InvalidGetStatementSuppliedForProperty
InvalidSetStatementSuppliedForProperty
PropertyExistsWithDifferentCase
EntitySetExistsWithDifferentCase
ItemExistsWithDifferentCase
NullAdditionalSchema
DuplicateClassName
TargetEntityFrameworkVersionToNewForEntityClassGenerator
MissingPropertyDocumentation
MissingComplexTypeDocumentation
MissingDocumentation
MissingDocumentationNoName
NamespaceComments
FactoryMethodSummaryComment
FactoryParamCommentGeneral
CtorSummaryComment
EmptyCtorSummaryComment
GeneratedNavigationPropertyNameConflict
GeneratedPropertyAccessibilityConflict
EntityTypeAndSetAccessibilityConflict
GeneratedFactoryMethodNameConflict
MetadataItemErrorsFoundDuringGeneration
UnableToGenerateForeignKeyPropertiesForV1
UnableToGenerateFunctionImportParameterName
TypeComments
GetViewAtMethodComments
ConstructorComments
IndividualViewComments
TargetVersionSchemaVersionMismatch
DuplicateEntryInUserDictionary
UnsupportedLocaleForPluralizationServices
Template_DuplicateTopLevelType
Template_ConflictingGeneratedNavPropName
Template_FactoryMethodNameConflict
Template_CaseInsensitiveTypeConflict
Template_CaseInsensitiveEntitySetConflict
Template_CaseInsensitiveMemberConflict
Template_GenCommentAddToMethodCs
Template_GenCommentAddToMethodVb
Template_CommentNoDocumentation
Template_CommentFactoryMethodParam
Template_GeneratedCodeCommentLine1
Template_GeneratedCodeCommentLine2
Template_GeneratedCodeCommentLine3
Template_ContextDefaultCtorComment
Template_ContextCommonCtorComment
Template_FactoryMethodComment
Template_RegionRelationships
Template_RegionContexts
Template_RegionObjectSetProperties
Template_RegionAddToMethods
Template_RegionFunctionImports
Template_RegionEntities
Template_RegionNavigationProperties
Template_RegionComplexTypes
Template_RegionFactoryMethod
Template_RegionPrimitiveProperties
Template_RegionSimpleProperties
Template_RegionComplexProperties
Template_RegionEnumTypes
Template_RegionConstructors
Template_RegionPartialMethods
Template_ReplaceVsItemTemplateToken
Template_CurrentlyRunningTemplate
Template_UnsupportedSchema
EdmSchemaNotValid
EdmSchemaFileNotFound
EntityCodeGenTargetTooLow
DefaultTargetVersionTooLow
EntityClient_DoesNotImplementIServiceProvider
EntityClient_ReturnedNullOnProviderMethod
Context
 class 
Internal
Protected
Public
Private
Value
InlineObjectCollection
DetachFromParent
IEntityWithRelationships
ObjectContext
EntitySet
ObjectResult
System.Data.Metadata.Edm.MetadataWorkspace
System.Data.Objects
System.Data.Objects.DataClasses
System.Data.Metadata.Edm
System.Data.EntityClient
SetValidValue
ReportPropertyChanging
ReportPropertyChanged
GetValidValue
VerifyComplexObjectIsNotNull
http://schemas.microsoft.com/ado/2007/06/edmx
http://schemas.microsoft.com/ado/2008/10/edmx
http://schemas.microsoft.com/ado/2009/11/edmx
Model
Application
http://schemas.microsoft.com/ado/2007/12/edm/EntityStoreSchemaGenerator
http://schemas.microsoft.com/ado/2009/02/edm/annotation
Schema
Tables
Views
StoreGeneratedPattern
LazyLoadingEnabled
annotation
Container
TemplateCodeGenerators.CSharpCodeGenTemplate
TemplateCodeGenerators.VBCodeGenTemplate
TemplateCodeGenerators.CSharpCodeGenTemplateV50
TemplateCodeGenerators.VBCodeGenTemplateV50
TemplateCodeGenerators.CSharpCodeGenTemplate.cs
TemplateCodeGenerators.CSharpCodeGenTemplateV5.0.cs
TemplateCodeGenerators.VBCodeGenTemplate.vb
TemplateCodeGenerators.VBCodeGenTemplateV5.0.vb
PkCatalog
PkSchema
PkTable
PkColumn
FkCatalog
FkSchema
FkTable
FkColumn
Ordinal
RelationshipName
RelationshipId
IsCascadeDelete
CatalogName
SchemaName
TableName
ColumnName
IsNullable
DataType
MaximumLength
Precision
DateTimePrecision
Scale
IsIdentity
IsServerGenerated
IsPrimaryKey
SkipVerificationInFullTrust
System.Data.Entity.Design.dll
Microsoft Corporation
Microsoft
 .NET Framework
 Microsoft Corporation.  All rights reserved.
4.8.9032.0
4.0.0.0
en-US
$f:\dd\tools\devdiv\EcmaPublicKey.snk
@002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3
a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d
WrapNonExceptionThrows
@System.Data.EntityModel.ClientApiGenerator+<GetSourceTypes>d__33
ESystem.Data.Entity.Design.EntityViewGenerator+<SplitViewStrings>d__28
XSystem.Data.Entity.Design.EntityViewGenerator+<GetViewStringsAppendToStringBuilder>d__29
]System.Data.Entity.Design.EntityStoreSchemaGenerator+LoadMethodSessionState+<get_Errors>d__20
4Catalog={Catalog}, Schema={Schema}, Name={TableName}
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADP
,:Sv&<l
[4DT*RE
&QZU1W
h]b*m
AssociationMissingKeyColumn
CannotChangePropertyReturnType
CannotChangePropertyReturnTypeToNull
CannotCreateEntityWithNoPrimaryKeyDefined
CodeGenSourceFilePathIsNotAFile
ColumnFacetValueOutOfRange
ConstructorComments
CtorSummaryComment
DbProviderServicesInformationLocationPath
DefaultTargetVersionTooLow
DuplicateClassName
DuplicateEntityContainerName
DuplicateEntryInUserDictionary
EdmSchemaFileNotFound
EdmSchemaNotValid
EmptyCtorSummaryComment
EntityClient_DoesNotImplementIServiceProvider
EntityClient_InvalidStoreProvider
EntityClient_ReturnedNullOnProviderMethod
EntityCodeGenTargetTooLow
EntityModelGeneratorSchemaNotLoaded
EntitySetExistsWithDifferentCase
EntityStoreGeneratorSchemaNotLoaded
EntityTypeAndSetAccessibilityConflict
ExcludedColumnWasAKeyColumnEntityIsInvalid
ExcludedColumnWasAKeyColumnEntityIsReadOnly
FactoryMethodSummaryComment
FactoryParamCommentGeneral
GeneratedFactoryMethodNameConflict
GeneratedNavigationPropertyNameConflict
GeneratedPropertyAccessibilityConflict
GetViewAtMethodComments
IndividualViewComments
InvalidAttributeSuppliedForProperty
InvalidAttributeSuppliedForType
InvalidEntityContainerNameArgument
InvalidGetStatementSuppliedForProperty
InvalidInterfaceSuppliedForType
InvalidMemberSuppliedForType
InvalidNamespaceNameArgument
InvalidNonStoreEntityContainer
InvalidSetStatementSuppliedForProperty
InvalidStringArgument
InvalidTypeForPrimaryKey
ItemExistsWithDifferentCase
MetadataItemErrorsFoundDuringGeneration
MissingComplexTypeDocumentation
MissingDocumentation
MissingDocumentationNoName
MissingPropertyDocumentation
ModelGeneration_UnGeneratableType
NamespaceComments
NoPrimaryKeyDefined
NullAdditionalSchema
ParameterDirectionNotValid
PropertyExistsWithDifferentCase
ProviderFactoryReturnedNullFactory
ProviderSchemaErrors
ReservedNamespace
Serialization_UnknownGlobalItem
SharedForeignKey
SingleStoreEntityContainerExpected
StonglyTypedAccessToNullValue
TableReferencedByAssociationWasNotFound
TableReferencedByTvfWasNotFound
TargetEntityFrameworkVersionToNewForEntityClassGenerator
TargetVersionSchemaVersionMismatch
Template_CaseInsensitiveEntitySetConflict
Template_CaseInsensitiveMemberConflict
Template_CaseInsensitiveTypeConflict
Template_CommentFactoryMethodParam
Template_CommentNoDocumentation
Template_ConflictingGeneratedNavPropName
Template_ContextCommonCtorComment
Template_ContextDefaultCtorComment
Template_CurrentlyRunningTemplate
Template_DuplicateTopLevelType
Template_FactoryMethodComment
Template_FactoryMethodNameConflict
Template_GenCommentAddToMethodCs
Template_GenCommentAddToMethodVb
Template_GeneratedCodeCommentLine1
Template_GeneratedCodeCommentLine2
Template_GeneratedCodeCommentLine3
Template_RegionAddToMethods
Template_RegionComplexProperties
Template_RegionComplexTypes
Template_RegionConstructors
Template_RegionContexts
Template_RegionEntities
Template_RegionEnumTypes
Template_RegionFactoryMethod
Template_RegionFunctionImports
Template_RegionNavigationProperties
Template_RegionObjectSetProperties
Template_RegionPartialMethods
Template_RegionPrimitiveProperties
Template_RegionRelationships
Template_RegionSimpleProperties
Template_ReplaceVsItemTemplateToken
Template_UnsupportedSchema
TypeComments
UnableToGenerateForeignKeyPropertiesForV1
UnableToGenerateFunctionImportParameterName
UnmappedFunctionImport
UnsupportedDataType
UnsupportedDataTypeForTarget
UnsupportedDataTypeUnknownType
UnsupportedDbRelationship
UnsupportedForeignKeyPattern
UnsupportedFunctionParameterDataType
UnsupportedFunctionParameterDataTypeForTarget
UnsupportedFunctionReturnDataType
UnsupportedFunctionReturnDataTypeForTarget
UnsupportedLocaleForPluralizationServices
UnsupportedQueryViewInEntityContainerMapping
The association between '{0}' and '{1}' will not be created because the key column '{2}' was not found to be part of the table definition (see previous warnings).
KThe return data type of property '{0}' on the type '{1}' cannot be changed.
SThe return data type of property '{0}' on the type '{1}' cannot be changed to null.
The table/view '{0}' does not have a primary key defined and no valid primary key could be inferred. This table/view has been excluded. To use the entity, you will need to review your schema, add the correct keys, and uncomment it.
7The parameter must specify a single file, not multiple.
The facet '{0}' with a value '{1}' is outside the range {2}-{3} specified by the facet description.  The column '{4}' in the table '{5}' was excluded.
The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
Initialize a new {0} object.
DbProviderServices://{0}/{1}
The default target Entity Framework version requires the edmx schema version {0} or lower. The specified schema is version {1}. To avoid this warning specify the target Entity Framework version explicitly. You can do this by using the EdmGen.exe command-line tool with the targetVersion option, or by including the targetEntityFrameworkVersion parameter when calling the GenerateCode method.
The {0} '{1}' has the same name as the {2} '{1}'. Duplicate names are not allowed. You must change the name of either the {0} or the {2}.
An EntityContainer with the name '{0}' already exists in the EdmItemCollection containing the EntityContainer '{1}'. Please choose a different model EntityContainer name.
BThe {0} value '{1}' already exists in the user-defined dictionary.
Could not find file '{0}'.
%The EDM Schema argument is not valid.
zInitializes a new {0} object using the connection string found in the '{1}' section of the application configuration file.
The store provider factory type '{0}' does not implement the IServiceProvider interface. Use a store provider that implements this interface.
_The specified store provider '{0}' cannot be found in the configuration, or '{0}' is not valid.
A null was returned after calling the '{0}' method on a store provider instance of type '{1}'. The store provider might not be functioning correctly.
The EntityCodeGenerator is not for targeting EntityFrameworkVersions.Version1.  Consider using EntityClassGenerator or a template.
PThe model metadata has not been generated yet. Call GenerateModelMetadata first.
~The entity set '{0}' differs only in case from an existing entity set, and is not compatible with the current language option.
PThe store metadata has not been generated yet. Call GenerateStoreMetadata first.
EntityType '{0}' has '{1}' accessibility and EntitySet '{2}' has a get property with '{3}' accessibility. The get property of the EntitySet must not have less restrictive access than the containing EntityType has.
The column '{0}' on the table/view '{1}' was excluded, and is a key column.  The table/view has been excluded.  Please fix the entity in the schema file, and uncomment.
The column '{0}' on the table/view '{1}' was excluded, and is a key column.  The remaining key(s) were used and table/view has been created as read-only.
Create a new {0} object.
Initial value of {0}.
OThe member '{0}' on the type '{1}' conflicts with the generated factory method.
The NavigationProperty '{0}' on the type '{1}' is the source of a generated property '{2}' which conflicts with a member of the same name.
Property '{0}' has '{1}' Get property and '{2}' Set property accessibility specified. {1} and {2} modifiers cannot be combined within a single Property.
0The method returns the view for the index given.
return view for {0}
>The custom attribute supplied for property '{0}' is not valid.
:The custom attribute supplied for type '{0}' is not valid.
TThe modelEntityContainerName parameter '{0}' contains characters that are not valid.
FThe additional get statement supplied for property '{0}' is not valid.
>The additional interface supplied for type '{0}' is not valid.
;The additional member supplied for type '{0}' is not valid.
IThe namespaceName parameter '{0}' contains characters that are not valid.
9The EntityContainer '{0}' is not a store EntityContainer.
FThe additional Set statement supplied for property '{0}' is not valid.
?Parameter '{0}' is not valid. String arguments cannot be empty.
The table/view '{0}' has column '{1}' defined as a primary key, but the column type '{2}' is not a valid type for a key in the EDM. An attempt will be made to define the table/view as a read-only table/view.
pThe {0} '{1}' differs only in case from an existing {0}, and is not compatible with the current language option.
Errors Found During Generation:
8There are no comments for ComplexType {0} in the schema.
,There are no comments for {0} in the schema.
$There are no comments in the schema.
5There are no comments for property {0} in the schema.
FThe GlobalItem of type '{0}' has no model generation patterns defined.
-Original file name: {0}
Generation date: {1}
The table/view '{0}' does not have a primary key defined. The key has been inferred and the definition was created as a read-only table/view.
4The value in the parameter {0} at index {1} is null.
The function '{0}' has a parameter '{1}' that has a parameter direction value '{2}', which is not valid. Please use 'IN', 'OUT', or 'INOUT'.
zThe property '{0}' differs only in case from an existing property, and is not compatible with the current language option.
SThe '{0}' DbProviderFactory returned a null value from the CreateConnection method.
CThe provider returned schema mapping information that is not valid.
>The namespace '{0}' is a system namespace, and cannot be used.
8The GlobalItem of type '{0}' is not a serializable type.
Foreign key constraint '{0}' has been omitted from the storage model. Column '{1}' of table '{2}' is a foreign key participating in multiple relationships. A one-to-one Entity Model will not validate since data inconsistency is possible.
LThe StoreItemCollection collection must contain exactly one EntityContainer.
4The value for column '{0}' in table '{1}' is DBNull.
EThe table '{0}' is referenced by a relationship, but cannot be found.
The return table of the function '{0}' is not defined. Either all columns have been excluded or the table has no columns. The function has been excluded. To use the function, you will need to review your schema, specify the return type of the function, and uncomment it.
The EntityClassGenerator is only for use with EntityFrameworkVersions.Version1 and the schemas provided have newer versions of the Model schema.  Consider using EntityCodeGenerator or a template.
wThe target Entity Framework version requires the edmx schema version {0} or lower. The specified schema is version {1}.
The EntitySet '{0}.{1}' differs only in case from an existing EntitySet, and is not compatible with the current language option.
zThe Member '{0}.{1}' differs only in case from an existing Member, and is not compatible with the current language option.
The Type '{0}' is not unique.  This may be caused by the types only differing in case which is not compatible with the current language option.
"Initial value of the {0} property.
$No Metadata Documentation available.
The NavigationProperty '{0}' on the type '{1}' is the source of a generated property '{2}' which conflicts with a member of the same name.
Initialize a new {0} object.
zInitializes a new {0} object using the connection string found in the '{1}' section of the application configuration file.
Currently Running Template
The type name '{0}' is used for both an EntityContainer and a type.  Duplicates are not allowed, please change one of the names.
Create a new {0} object.
OThe member '{0}' on the type '{1}' conflicts with the generated factory method.
Deprecated Method for adding a new object to the {0} EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
Deprecated Method for adding a new object to the {0} EntitySet. Consider using the .Add method of the associated ObjectSet(Of T) property instead.
+   This code was generated from a template.
Q   Manual changes to this file may cause unexpected behavior in your application.
N   Manual changes to this file will be overwritten if the code is regenerated.
AddTo Methods
Complex Properties
ComplexTypes
Constructors
Contexts
Entities
Enums
Factory Method
Function Imports
Navigation Properties
ObjectSet Properties
Partial Methods
Primitive Properties
EDM Relationship Metadata
Simple Properties
Please overwrite the replacement token '$edmxInputFile$' with the actual name of the .edmx file you would like to generate from.
The input file appears to be using a schema version not supported by this template. This may lead to compile errors. Please use 'Add New Generated Item' to add an updated template.
^The type contains views for EntitySets and AssociationSets that were generated at design time.
^Foreign keys may only be generated when targeting version 4.0 of the .NET Framework or higher.
Unable to generate function import parameter name for the parameter '{0}' of the store function '{1}'. The store function will be ignored and the function import will not be generated.
{The function import '{0}' is not mapped to a store function. A function import needs to be mapped for successful execution.
The data type '{0}' is currently not supported for the target .NET Framework version; the column '{2}' in table '{1}' was excluded.
The data type '{0}' is not supported for the target .NET Framework version. The column '{2}' in the table '{1}' was excluded from the model. To use the data type '{0}', target the .NET Framework 4.5 or higher.
mThe data type of the column '{0}' is currently not supported so the column '{0}' in table '{1}' was excluded.
The relationship '{0}' has columns that are not part of the key of the table on the primary side of the relationship. The relationship was excluded.
The relationship '{0}' uses the set of foreign keys '{1}' that are partially contained in the set of primary keys '{2}' of the table '{3}'.  The set of foreign keys must be fully contained in the set of primary keys, or fully not contained in the set of primary keys to be mapped to a model.
The function '{0}' has a parameter '{1}' at parameter index {2} that has a data type '{3}' which is currently not supported for the target .NET Framework version. The function was excluded.
The function '{0}' has the parameter '{1}' at the parameter index {2} that has the data type '{3}' which is not supported for the target .NET Framework version. The function was excluded from the model. To use the data type '{0}', target the .NET Framework 4.5 or higher.
The function '{0}' has a return data type '{1}' that is currently not supported for the target .NET Framework version. The function was excluded.
The function '{0}' returns the data type '{1}' that is not supported for the target .NET Framework version. The function was excluded from the model. To use the data type '{0}', target the .NET Framework 4.5 or higher.
iThe culture '{0}' is not supported.   Pluralization is currently only supported for the English language.
The EntitySetMapping in EntityContainerMapping for entity container '{0}' contains a query view. Query views are not allowed in compile time view generation, so the view for this EntityContainerMapping will not be generated.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace TemplateCodeGenerators
    using System;
    using System.Linq;
    using System.IO;
    using System.Collections.Generic;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Xml;
    using System.Xml.Linq;
    using System.Globalization;
    using System.Reflection;
    using System.Data.Metadata.Edm;
    using System.Data.Mapping;
    using System.Data.Entity.Design;
    using System.CodeDom;
    using System.CodeDom.Compiler;
    using Microsoft.CSharp;
    using System.Text;
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class CSharpCodeGenTemplate : CSharpCodeGenTemplateBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
DefineMetadata();
UserSettings userSettings =
        new UserSettings
        {
            SourceCsdlPath = @"$edmxInputFile$",
            ReferenceCsdlPaths = new string[] {},
            FullyQualifySystemTypes = true,
            CreateContextAddToMethods = true,
            CamelCaseFields = false,
        };
ApplyUserSettings(userSettings);
if(Errors.HasErrors)
    return String.Empty;
MetadataLoader loader = new MetadataLoader(this);
MetadataTools ef = new MetadataTools(this);
CodeRegion region = new CodeRegion(this);
CodeGenerationTools code = new CodeGenerationTools(this){FullyQualifySystemTypes = userSettings.FullyQualifySystemTypes, CamelCaseFields = userSettings.CamelCaseFields};
ItemCollection = loader.CreateEdmItemCollection(SourceCsdlPath, ReferenceCsdlPaths.ToArray());
ModelNamespace = loader.GetModelNamespace(SourceCsdlPath);
string namespaceName = GetNamespaceName(code);
UpdateObjectNamespaceMap(namespaceName);
            this.Write("//------------------------------------------------------------------------------\r" +
                    "\n// <auto-generated>\r\n// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetResourceString("Template_GeneratedCodeCommentLine1")));
            this.Write("\r\n//\r\n// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetResourceString("Template_GeneratedCodeCommentLine2")));
            this.Write("\r\n// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetResourceString("Template_GeneratedCodeCommentLine3")));
            this.Write(@"
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
[assembly: EdmSchemaAttribute()]
    ////////
    //////// 
    ////////
    region.Begin(GetResourceString("Template_RegionRelationships"));
    bool first = true;
    foreach (AssociationType association in GetSourceSchemaTypes<AssociationType>())
    {
        if (first)
        {
            WriteLine(string.Empty);
            first = false;
        }
            this.Write("[assembly: EdmRelationshipAttribute(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(association.NamespaceName));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(association.Name));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(EndName(association, 0)));
            this.Write("\", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EndMultiplicity(association, 0, code)));
            this.Write(", typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(EscapeEndTypeName(association, 0, code)));
            this.Write("), \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(EndName(association, 1)));
            this.Write("\", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EndMultiplicity(association, 1, code)));
            this.Write(", typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(EscapeEndTypeName(association, 1, code)));
            this.Write(")");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.StringBefore(", ", association.IsForeignKey ? "true" : null)));
            this.Write(")]\r\n");
    }
    region.End();
    if (!String.IsNullOrEmpty(namespaceName))
    {
            this.Write("namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(namespaceName));
            this.Write("\r\n{\r\n");
        PushIndent(CodeRegion.GetIndent(1));
    }
    ////////
    //////// 
    ////////
    region.Begin(GetResourceString("Template_RegionContexts"));
    foreach (EntityContainer container in GetSourceSchemaTypes<EntityContainer>())
    {
            this.Write("\r\n/// <summary>\r\n/// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(container)));
            this.Write("\r\n/// </summary>");
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(container, region.CurrentIndentLevel)));
            this.Write("\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForType(container)));
            this.Write(" partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(container)));
            this.Write(" : ObjectContext\r\n{\r\n    #region ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetResourceString("Template_RegionConstructors")));
            this.Write("\r\n\r\n    /// <summary>\r\n    /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_ContextDefaultCtorComment"), container.Name, container.Name)));
            this.Write("\r\n    /// </summary>\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(container)));
            this.Write("() : base(\"name=");
            this.Write(this.ToStringHelper.ToStringWithCulture(container.Name));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(container.Name));
            this.Write("\")\r\n    {\r\n");
        WriteLazyLoadingEnabled(container);
            this.Write("        OnContextCreated();\r\n    }\r\n\r\n    /// <summary>\r\n    /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_ContextCommonCtorComment"), container.Name)));
            this.Write("\r\n    /// </summary>\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(container)));
            this.Write("(string connectionString) : base(connectionString, \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(container.Name));
            this.Write("\")\r\n    {\r\n");
        WriteLazyLoadingEnabled(container);
            this.Write("        OnContextCreated();\r\n    }\r\n\r\n    /// <summary>\r\n    /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_ContextCommonCtorComment"), container.Name)));
            this.Write("\r\n    /// </summary>\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(container)));
            this.Write("(EntityConnection connection) : base(connection, \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(container.Name));
            this.Write("\")\r\n    {\r\n");
        WriteLazyLoadingEnabled(container);
            this.Write("        OnContextCreated();\r\n    }\r\n\r\n    #endregion\r\n\r\n    #region ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetResourceString("Template_RegionPartialMethods")));
            this.Write("\r\n\r\n    partial void OnContextCreated();\r\n\r\n    #endregion\r\n\r\n");
        ////////
        //////// 
        ////////
        region.Begin(GetResourceString("Template_RegionObjectSetProperties"));
        foreach (EntitySet set in container.BaseEntitySets.OfType<EntitySet>())
        {
            VerifyEntityTypeAndSetAccessibilityCompatability(set);
            this.Write("\r\n    /// <summary>\r\n    /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(set)));
            this.Write("\r\n    /// </summary>");
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(set, region.CurrentIndentLevel)));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(set))));
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForReadOnlyProperty(set)));
            this.Write(" ObjectSet<");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(set.ElementType, code)));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(set)));
            this.Write("\r\n    {\r\n        get\r\n        {\r\n            if ((");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(set)));
            this.Write(" == null))\r\n            {\r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(set)));
            this.Write(" = base.CreateObjectSet<");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(set.ElementType, code)));
            this.Write(">(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(set.Name));
            this.Write("\");\r\n            }\r\n            return ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(set)));
            this.Write(";\r\n        }\r\n    }\r\n    private ObjectSet<");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(set.ElementType, code)));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(set)));
            this.Write(";\r\n");
        }
        region.End();
        ////////
        //////// 
        ////////
        //////// 
        //////// 
        ////////
        //////// 
        //////// 
        //////// 
        ////////
        region.Begin(GetResourceString("Template_RegionAddToMethods"));
        IEnumerable<EntitySet> addToMethods = CreateContextAddToMethods.Value ? container.BaseEntitySets.OfType<EntitySet>() : Enumerable.Empty<EntitySet>();
        foreach (EntitySet set in addToMethods)
        {
            string parameterName = code.Escape(FixParameterName(set.ElementType.Name, code));
            this.Write("\r\n    /// <summary>\r\n    /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_GenCommentAddToMethodCs"), set.Name)));
            this.Write("\r\n    /// </summary>\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForType(set.ElementType)));
            this.Write(" void AddTo");
            this.Write(this.ToStringHelper.ToStringWithCulture(set.Name));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(set.ElementType, code)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameterName));
            this.Write(")\r\n    {\r\n        base.AddObject(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(set.Name));
            this.Write("\", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameterName));
            this.Write(");\r\n    }\r\n");
        }
        region.End();
        ////////
        //////// 
        ////////
        region.Begin(GetResourceString("Template_RegionFunctionImports"));
        foreach (EdmFunction edmFunction in container.FunctionImports)
        {
            IEnumerable<FunctionImportParameter> parameters = FunctionImportParameter.Create(edmFunction.Parameters, code, ef);
            string paramList = string.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray());
            TypeUsage returnType = edmFunction.ReturnParameters.Count == 0 ? null : ef.GetElementType(edmFunction.ReturnParameters[0].TypeUsage);
            this.Write("\r\n    /// <summary>\r\n    /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(edmFunction)));
            this.Write("\r\n    /// </summary>");
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(edmFunction, region.CurrentIndentLevel)));
            this.Write(this.ToStringHelper.ToStringWithCulture(ParameterComments(parameters.Select(p => new Tuple<string, string>(p.RawFunctionParameterName, SummaryComment(p.Source))), region.CurrentIndentLevel)));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(edmFunction))));
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForMethod(edmFunction)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(returnType == null ? "int" : "ObjectResult<" + MultiSchemaEscape(returnType, code) + ">"));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(edmFunction)));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(paramList));
            this.Write(")\r\n    {\r\n");
            foreach (FunctionImportParameter parameter in parameters)
            {
                if (!parameter.NeedsLocalVariable)
                    continue;
            this.Write("        ObjectParameter ");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.LocalVariableName));
            this.Write(";\r\n        if (");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.IsNullableOfT ? parameter.FunctionParameterName + ".HasValue" : parameter.FunctionParameterName + " != null"));
            this.Write(")\r\n        {\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.LocalVariableName));
            this.Write(" = new ObjectParameter(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.EsqlParameterName));
            this.Write("\", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.FunctionParameterName));
            this.Write(");\r\n        }\r\n        else\r\n        {\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.LocalVariableName));
            this.Write(" = new ObjectParameter(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.EsqlParameterName));
            this.Write("\", typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.RawClrTypeName));
            this.Write("));\r\n        }\r\n\r\n");
        }
            this.Write("        return base.ExecuteFunction");
            this.Write(this.ToStringHelper.ToStringWithCulture(returnType == null ? "" : "<" + MultiSchemaEscape(returnType, code) + ">"));
            this.Write("(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(edmFunction.Name));
            this.Write("\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.StringBefore(", ", string.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray()))));
            this.Write(");\r\n    }\r\n");
           if(returnType != null && returnType.EdmType.BuiltInTypeKind == BuiltInTypeKind.EntityType)
           {
            this.Write("    /// <summary>\r\n    /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(edmFunction)));
            this.Write("\r\n    /// </summary>");
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(edmFunction, region.CurrentIndentLevel)));
            this.Write("\r\n    /// <param name=\"mergeOption\"></param>");
            this.Write(this.ToStringHelper.ToStringWithCulture(ParameterComments(parameters.Select(p => new Tuple<string, string>(p.RawFunctionParameterName, SummaryComment(p.Source))), region.CurrentIndentLevel)));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(edmFunction))));
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForMethod(edmFunction)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(returnType == null ? "int" : "ObjectResult<" + MultiSchemaEscape(returnType, code) + ">"));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(edmFunction)));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.StringAfter(paramList, ", ")));
            this.Write("MergeOption mergeOption)\r\n    {\r\n");
            foreach (FunctionImportParameter parameter in parameters)
            {
                if (!parameter.NeedsLocalVariable)
                    continue;
            this.Write("        ObjectParameter ");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.LocalVariableName));
            this.Write(";\r\n        if (");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.IsNullableOfT ? parameter.FunctionParameterName + ".HasValue" : parameter.FunctionParameterName + " != null"));
            this.Write(")\r\n        {\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.LocalVariableName));
            this.Write(" = new ObjectParameter(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.EsqlParameterName));
            this.Write("\", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.FunctionParameterName));
            this.Write(");\r\n        }\r\n        else\r\n        {\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.LocalVariableName));
            this.Write(" = new ObjectParameter(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.EsqlParameterName));
            this.Write("\", typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.RawClrTypeName));
            this.Write("));\r\n        }\r\n\r\n");
            }
            this.Write("        return base.");
            this.Write(this.ToStringHelper.ToStringWithCulture(returnType == null ? "ExecuteFunction" : "ExecuteFunction<" + MultiSchemaEscape(returnType, code) + ">"));
            this.Write("(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(edmFunction.Name));
            this.Write("\", mergeOption");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.StringBefore(", ", string.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray()))));
            this.Write(");\r\n    }\r\n");
        }
        }
        region.End();
            this.Write("}\r\n");
    }
    region.End();
    ////////
    //////// 
    ////////
    region.Begin(GetResourceString("Template_RegionEntities"));
    foreach (EntityType entity in GetSourceSchemaTypes<EntityType>().OrderBy(e => e.Name))
    {
            this.Write("\r\n/// <summary>\r\n/// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(entity)));
            this.Write("\r\n/// </summary>");
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(entity, region.CurrentIndentLevel)));
            this.Write("\r\n[EdmEntityTypeAttribute(NamespaceName=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.NamespaceName));
            this.Write("\", Name=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            this.Write("\")]\r\n[Serializable()]\r\n[DataContractAttribute(IsReference=true)]\r\n");
        foreach (EntityType subType in ItemCollection.GetItems<EntityType>().Where(b => b.BaseType == entity))
        {
            this.Write("[KnownTypeAttribute(typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(subType, code)));
            this.Write("))]\r\n");
        }
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForType(entity)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(code.AbstractOption(entity))));
            this.Write("partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(entity)));
            this.Write(" : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(BaseTypeName(entity, code)));
            this.Write("\r\n{\r\n");
        if (!entity.Abstract)
        {
            WriteFactoryMethod(entity, code);
        }
        region.Begin(GetResourceString("Template_RegionPrimitiveProperties"));
        foreach (EdmProperty property in entity.Properties.Where(p => p.DeclaringType == entity && p.TypeUsage.EdmType is PrimitiveType))
        {
            VerifyGetterAndSetterAccessibilityCompatability(property);
            WritePrimitiveTypeProperty(property, code);
        }
        region.End();
        region.Begin(GetResourceString("Template_RegionComplexProperties"));
        foreach (EdmProperty property in entity.Properties.Where(p => p.DeclaringType == entity && p.TypeUsage.EdmType is ComplexType))
        {
            VerifyGetterAndSetterAccessibilityCompatability(property);
            WriteComplexTypeProperty(property, code);
        }
        region.End();
            this.Write("\r\n");
        ////////
        //////// 
        ////////
        region.Begin(GetResourceString("Template_RegionNavigationProperties"));
        foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(n => n.DeclaringType == entity))
        {
            VerifyGetterAndSetterAccessibilityCompatability(navProperty);
            this.Write("\r\n    /// <summary>\r\n    /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(navProperty)));
            this.Write("\r\n    /// </summary>");
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(navProperty, region.CurrentIndentLevel)));
            this.Write("\r\n    [XmlIgnoreAttribute()]\r\n    [SoapIgnoreAttribute()]\r\n    [DataMemberAttribu" +
                    "te()]\r\n    [EdmRelationshipNavigationPropertyAttribute(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.NamespaceName));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.Name));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name));
            this.Write("\")]\r\n");
            if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
            {
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(navProperty))));
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(navProperty)));
            this.Write(" EntityCollection<");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(navProperty)));
            this.Write("\r\n    {\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(navProperty))));
            this.Write("get\r\n        {\r\n            return ((IEntityWithRelationships)this).RelationshipM" +
                    "anager.GetRelatedCollection<");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)));
            this.Write(">(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name));
            this.Write("\");\r\n        }\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter(navProperty))));
            this.Write("set\r\n        {\r\n            if ((value != null))\r\n            {\r\n                " +
                    "((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection" +
                    "<");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)));
            this.Write(">(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name));
            this.Write("\", value);\r\n            }\r\n        }\r\n    }\r\n");
           }
           else
           {
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(navProperty))));
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(navProperty)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(navProperty)));
            this.Write("\r\n    {\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(navProperty))));
            this.Write("get\r\n        {\r\n            return ((IEntityWithRelationships)this).RelationshipM" +
                    "anager.GetRelatedReference<");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)));
            this.Write(">(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name));
            this.Write("\").Value;\r\n        }\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter(navProperty))));
            this.Write("set\r\n        {\r\n            ((IEntityWithRelationships)this).RelationshipManager." +
                    "GetRelatedReference<");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)));
            this.Write(">(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name));
            this.Write("\").Value = value;\r\n        }\r\n    }\r\n");
        string refPropertyName = navProperty.Name + "Reference";
        if (entity.Members.Any(m => m.Name == refPropertyName))
        {
           // 
            Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6017", String.Format(CultureInfo.CurrentCulture,
                    GetResourceString("Template_ConflictingGeneratedNavPropName"),
                        navProperty.Name, entity.FullName, refPropertyName)));
        }
            this.Write("    /// <summary>\r\n    /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(navProperty)));
            this.Write("\r\n    /// </summary>");
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(navProperty, region.CurrentIndentLevel)));
            this.Write("\r\n    [BrowsableAttribute(false)]\r\n    [DataMemberAttribute()]\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(navProperty)));
            this.Write(" EntityReference<");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(refPropertyName));
            this.Write("\r\n    {\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(navProperty))));
            this.Write("get\r\n        {\r\n            return ((IEntityWithRelationships)this).RelationshipM" +
                    "anager.GetRelatedReference<");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)));
            this.Write(">(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name));
            this.Write("\");\r\n        }\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter(navProperty))));
            this.Write("set\r\n        {\r\n            if ((value != null))\r\n            {\r\n                " +
                    "((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<" +
                    "");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)));
            this.Write(">(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name));
            this.Write("\", value);\r\n            }\r\n        }\r\n    }\r\n");
            }
        }
        region.End();
            this.Write("}\r\n");
    }
    region.End();
    ////////
    //////// 
    ////////
    region.Begin(GetResourceString("Template_RegionComplexTypes"));
    foreach (ComplexType complex in GetSourceSchemaTypes<ComplexType>().OrderBy(c => c.Name))
    {
            this.Write("\r\n/// <summary>\r\n/// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(complex)));
            this.Write("\r\n/// </summary>");
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(complex, region.CurrentIndentLevel)));
            this.Write("\r\n[EdmComplexTypeAttribute(NamespaceName=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(complex.NamespaceName));
            this.Write("\", Name=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(complex.Name));
            this.Write("\")]\r\n[DataContractAttribute(IsReference=true)]\r\n[Serializable()]\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForType(complex)));
            this.Write(" partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(complex)));
            this.Write(" : ComplexObject\r\n{\r\n");
        WriteFactoryMethod(complex, code);
        region.Begin(GetResourceString("Template_RegionPrimitiveProperties"));
        foreach (EdmProperty property in complex.Properties.Where(p => p.DeclaringType == complex && p.TypeUsage.EdmType is PrimitiveType))
        {
            VerifyGetterAndSetterAccessibilityCompatability(property);
            WritePrimitiveTypeProperty(property, code);
        }
        region.End();
        region.Begin(GetResourceString("Template_RegionComplexProperties"));
        foreach (EdmProperty property in complex.Properties.Where(p => p.DeclaringType == complex && p.TypeUsage.EdmType is ComplexType))
        {
            VerifyGetterAndSetterAccessibilityCompatability(property);
            WriteComplexTypeProperty(property, code);
        }
        region.End();
            this.Write("}\r\n");
    }
    region.End();
            this.Write("\r\n");
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
            this.Write("}\r\n");
    }
    VerifyTypeUniqueness();
            return this.GenerationEnvironment.ToString();
        }
    ////////
    //////// 
    ////////
    ////////
    //////// 
    ////////
    private void WriteFactoryMethod(StructuralType structuralType, CodeGenerationTools code)
    {
        CodeRegion region = new CodeRegion(this, 1);
        string methodName = "Create" + structuralType.Name;
        UniqueIdentifierService uniqueIdentifier = new UniqueIdentifierService();
        string instanceName = code.Escape(uniqueIdentifier.AdjustIdentifier((code.CamelCase(structuralType.Name))));
        IEnumerable<FactoryMethodParameter> parameters = FactoryMethodParameter.CreateParameters(structuralType.Members.OfType<EdmProperty>().Where(p => IncludePropertyInFactoryMethod(structuralType, p)), uniqueIdentifier, MultiSchemaEscape, code);
        if (parameters.Count() == 0)
            return;
        if (structuralType.Members.Any(m => m.Name == methodName))
        {
            // 
            Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6029",
                String.Format(CultureInfo.CurrentCulture,
                        GetResourceString("Template_FactoryMethodNameConflict"), methodName, structuralType.FullName)));
        }
        region.Begin(GetResourceString("Template_RegionFactoryMethod"));
this.Write("\r\n    /// <summary>\r\n    /// ");
this.Write(this.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_FactoryMethodComment"), structuralType.Name)));
this.Write("\r\n    /// </summary>");
this.Write(this.ToStringHelper.ToStringWithCulture(ParameterComments(parameters.Select(p => new Tuple<string, string>(p.RawParameterName, p.ParameterComment)), region.CurrentIndentLevel)));
this.Write("\r\n    public static ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(structuralType)));
this.Write(" ");
this.Write(this.ToStringHelper.ToStringWithCulture(methodName));
this.Write("(");
this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", parameters.Select(p => p.ParameterType + " " + p.ParameterName).ToArray())));
this.Write(")\r\n    {\r\n        ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(structuralType)));
this.Write(" ");
this.Write(this.ToStringHelper.ToStringWithCulture(instanceName));
this.Write(" = new ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(structuralType)));
this.Write("();\r\n");
        foreach (FactoryMethodParameter parameter in parameters)
        {
            if (parameter.IsComplexType)
            {
                // 
this.Write("        ");
this.Write(this.ToStringHelper.ToStringWithCulture(instanceName));
this.Write(".");
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(parameter.Source)));
this.Write(" = StructuralObject.VerifyComplexObjectIsNotNull(");
this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ParameterName));
this.Write(", \"");
this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Source.Name));
this.Write("\");\r\n");
            }
            else
            {
                // 
this.Write("        ");
this.Write(this.ToStringHelper.ToStringWithCulture(instanceName));
this.Write(".");
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(parameter.Source)));
this.Write(" = ");
this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ParameterName));
this.Write(";\r\n");
            }
        }
this.Write("        return ");
this.Write(this.ToStringHelper.ToStringWithCulture(instanceName));
this.Write(";\r\n    }\r\n");
        region.End();
    }
    ////////
    //////// 
    ////////
    private void WritePrimitiveTypeProperty(EdmProperty primitiveProperty, CodeGenerationTools code)
    {
        MetadataTools ef = new MetadataTools(this);
this.Write("\r\n    /// <summary>\r\n    /// ");
this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(primitiveProperty)));
this.Write("\r\n    /// </summary>");
this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(primitiveProperty, 1)));
this.Write("\r\n    [EdmScalarPropertyAttribute(EntityKeyProperty=");
this.Write(this.ToStringHelper.ToStringWithCulture(code.CreateLiteral(ef.IsKey(primitiveProperty))));
this.Write(", IsNullable=");
this.Write(this.ToStringHelper.ToStringWithCulture(code.CreateLiteral(ef.IsNullable(primitiveProperty))));
this.Write(")]\r\n    [DataMemberAttribute()]\r\n    ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(primitiveProperty))));
this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(primitiveProperty)));
this.Write(" ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(primitiveProperty.TypeUsage)));
this.Write(" ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(primitiveProperty)));
this.Write("\r\n    {\r\n        ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(primitiveProperty))));
this.Write("get\r\n        {\r\n");
             if (ef.ClrType(primitiveProperty.TypeUsage) == typeof(byte[]))
                {
this.Write("            return StructuralObject.GetValidValue(");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(primitiveProperty)));
this.Write(");\r\n");
                }
                else
                {
this.Write("            return ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(primitiveProperty)));
this.Write(";\r\n");
                }
this.Write("        }\r\n        ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter((primitiveProperty)))));
this.Write("set\r\n        {\r\n");
        if (ef.IsKey(primitiveProperty))
            {
                if (ef.ClrType(primitiveProperty.TypeUsage) == typeof(byte[]))
                {
this.Write("            if (!StructuralObject.BinaryEquals(");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(primitiveProperty)));
this.Write(", value))\r\n");
                }
                else
                {
this.Write("            if (");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(primitiveProperty)));
this.Write(" != value)\r\n");
                }
this.Write("            {\r\n");
        PushIndent(CodeRegion.GetIndent(1));
            }
this.Write("            ");
this.Write(this.ToStringHelper.ToStringWithCulture(ChangingMethodName(primitiveProperty)));
this.Write("(value);\r\n            ReportPropertyChanging(\"");
this.Write(this.ToStringHelper.ToStringWithCulture(primitiveProperty.Name));
this.Write("\");\r\n            ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(primitiveProperty)));
this.Write(" = StructuralObject.SetValidValue(value");
this.Write(this.ToStringHelper.ToStringWithCulture(OptionalNullableParameterForSetValidValue(primitiveProperty, code)));
this.Write(");\r\n            ReportPropertyChanged(\"");
this.Write(this.ToStringHelper.ToStringWithCulture(primitiveProperty.Name));
this.Write("\");\r\n            ");
this.Write(this.ToStringHelper.ToStringWithCulture(ChangedMethodName(primitiveProperty)));
this.Write("();\r\n");
        if (ef.IsKey(primitiveProperty))
            {
        PopIndent();
this.Write("            }\r\n");
            }
this.Write("        }\r\n    }\r\n    private ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(primitiveProperty.TypeUsage)));
this.Write(" ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(primitiveProperty)));
this.Write(this.ToStringHelper.ToStringWithCulture(code.StringBefore(" = ", code.CreateLiteral(primitiveProperty.DefaultValue))));
this.Write(";\r\n    partial void ");
this.Write(this.ToStringHelper.ToStringWithCulture(ChangingMethodName(primitiveProperty)));
this.Write("(");
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(primitiveProperty.TypeUsage)));
this.Write(" value);\r\n    partial void ");
this.Write(this.ToStringHelper.ToStringWithCulture(ChangedMethodName(primitiveProperty)));
this.Write("();\r\n");
    }
    ////////
    //////// 
    ////////
    private void WriteComplexTypeProperty(EdmProperty complexProperty, CodeGenerationTools code)
    {
this.Write("\r\n    /// <summary>\r\n    /// ");
this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(complexProperty)));
this.Write("\r\n    /// </summary>");
this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(complexProperty, 1)));
this.Write("\r\n    [EdmComplexPropertyAttribute()]\r\n    [DesignerSerializationVisibility(Desig" +
        "nerSerializationVisibility.Content)]\r\n    [XmlElement(IsNullable=true)]\r\n    [So" +
        "apElement(IsNullable=true)]\r\n    [DataMemberAttribute()]\r\n    ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(complexProperty))));
this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(complexProperty)));
this.Write(" ");
this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(complexProperty.TypeUsage, code)));
this.Write(" ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(complexProperty)));
this.Write("\r\n    {\r\n        ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(complexProperty))));
this.Write("get\r\n        {\r\n            ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)));
this.Write(" = GetValidValue(");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)));
this.Write(", \"");
this.Write(this.ToStringHelper.ToStringWithCulture(complexProperty.Name));
this.Write("\", false, ");
this.Write(this.ToStringHelper.ToStringWithCulture(InitializedTrackingField(complexProperty, code)));
this.Write(");\r\n            ");
this.Write(this.ToStringHelper.ToStringWithCulture(InitializedTrackingField(complexProperty, code)));
this.Write(" = true;\r\n            return ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)));
this.Write(";\r\n        }\r\n        ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter(complexProperty))));
this.Write("set\r\n        {\r\n            ");
this.Write(this.ToStringHelper.ToStringWithCulture(ChangingMethodName(complexProperty)));
this.Write("(value);\r\n            ReportPropertyChanging(\"");
this.Write(this.ToStringHelper.ToStringWithCulture(complexProperty.Name));
this.Write("\");\r\n            ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)));
this.Write(" = SetValidValue(");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)));
this.Write(", value, \"");
this.Write(this.ToStringHelper.ToStringWithCulture(complexProperty.Name));
this.Write("\");\r\n            ");
this.Write(this.ToStringHelper.ToStringWithCulture(InitializedTrackingField(complexProperty, code)));
this.Write(" = true;\r\n            ReportPropertyChanged(\"");
this.Write(this.ToStringHelper.ToStringWithCulture(complexProperty.Name));
this.Write("\");\r\n            ");
this.Write(this.ToStringHelper.ToStringWithCulture(ChangedMethodName(complexProperty)));
this.Write("();\r\n        }\r\n    }\r\n    private ");
this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(complexProperty.TypeUsage, code)));
this.Write(" ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)));
this.Write(";\r\n    private bool ");
this.Write(this.ToStringHelper.ToStringWithCulture(InitializedTrackingField(complexProperty, code)));
this.Write(";\r\n    partial void ");
this.Write(this.ToStringHelper.ToStringWithCulture(ChangingMethodName(complexProperty)));
this.Write("(");
this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(complexProperty.TypeUsage, code)));
this.Write(" value);\r\n    partial void ");
this.Write(this.ToStringHelper.ToStringWithCulture(ChangedMethodName(complexProperty)));
this.Write("();\r\n");
    }
    private void WriteLazyLoadingEnabled(EntityContainer container)
    {
        string lazyLoadingAttributeValue = null;
        string lazyLoadingAttributeName = MetadataConstants.EDM_ANNOTATION_09_02 + ":LazyLoadingEnabled";
        if(MetadataTools.TryGetStringMetadataPropertySetting(container, lazyLoadingAttributeName, out lazyLoadingAttributeValue))
        {
            bool isLazyLoading = false;
            if(bool.TryParse(lazyLoadingAttributeValue, out isLazyLoading))
            {
this.Write("        this.ContextOptions.LazyLoadingEnabled = ");
this.Write(this.ToStringHelper.ToStringWithCulture(isLazyLoading.ToString().ToLowerInvariant()));
this.Write(";\r\n");
            }
        }
    }
////////
//////// 
////////
public string SourceCsdlPath{ get; set; }
public string ModelNamespace{ get; set; }
public EdmItemCollection ItemCollection{ get; set; }
public IEnumerable<string> ReferenceCsdlPaths{ get; set; }
public Nullable<bool> CreateContextAddToMethods{ get; set; }
public Dictionary<string, string> EdmToObjectNamespaceMap
    get { return _edmToObjectNamespaceMap; }
    set { _edmToObjectNamespaceMap = value; }
public Dictionary<string, string> _edmToObjectNamespaceMap = new Dictionary<string, string>();
public Double SourceEdmVersion
    get
    {
        if (ItemCollection != null)
        {
            return ItemCollection.EdmVersion;
        }
        return 0.0;
    }
////////
//////// 
////////
static System.Resources.ResourceManager ResourceManager
    get
    {
        if (_resourceManager == null)
        {
            System.Resources.ResourceManager resourceManager = new System.Resources.ResourceManager("System.Data.Entity.Design", typeof(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly);
            System.Threading.Interlocked.CompareExchange(ref _resourceManager, resourceManager, null);
        }
        return _resourceManager;
    }
static System.Resources.ResourceManager _resourceManager;
private static string GetResourceString(string resourceName)
    return ResourceManager.GetString(resourceName,
         null); // 
private void VerifyTypeUniqueness()
    HashSet<string> hash = new HashSet<string>();
    IEnumerable<GlobalItem> allTypes = GetSourceSchemaTypes<GlobalItem>().Where(i => i is StructuralType || i is EntityContainer);
    foreach (GlobalItem type in allTypes)
    {
        if (!hash.Add(GetGlobalItemName(type)))
        {
            // 
            Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6034",
             String.Format(CultureInfo.CurrentCulture,
                GetResourceString("Template_DuplicateTopLevelType"),
             GetGlobalItemName(type))));
        }
    }
protected string GetGlobalItemName(GlobalItem item)
    if (item is EdmType)
    {
        // 
        return ((EdmType)item).Name;
    }
    else
    {
        // 
        return ((EntityContainer)item).Name;
    }
void ApplyUserSettings(UserSettings userSettings)
    // 
    if (SourceCsdlPath == null)
    {
#if !PREPROCESSED_TEMPLATE
        if(userSettings.SourceCsdlPath == "$" + "edmxInputFile" + "$")
        {
            Errors.Add(new System.CodeDom.Compiler.CompilerError(Host.TemplateFile, -1, -1, "",
                GetResourceString("Template_ReplaceVsItemTemplateToken")));
            return;
        }
        SourceCsdlPath = Host.ResolvePath(userSettings.SourceCsdlPath);
#else
        SourceCsdlPath = userSettings.SourceCsdlPath;
#endif
    }
    // normalize the path, remove ..\ from it
    SourceCsdlPath = Path.GetFullPath(SourceCsdlPath);
    if (ReferenceCsdlPaths == null)
    {
        ReferenceCsdlPaths = userSettings.ReferenceCsdlPaths;
    }
    if (!CreateContextAddToMethods.HasValue)
    {
        CreateContextAddToMethods = userSettings.CreateContextAddToMethods;
    }
    DefaultSummaryComment = GetResourceString("Template_CommentNoDocumentation");
class UserSettings
    public string SourceCsdlPath{ get; set; }
    public string[] ReferenceCsdlPaths{ get; set; }
    public bool FullyQualifySystemTypes{ get; set; }
    public bool CreateContextAddToMethods{ get; set; }
    public bool CamelCaseFields{ get; set; }
string GetNamespaceName(CodeGenerationTools code)
    string namespaceName = code.VsNamespaceSuggestion();
#if PREPROCESSED_TEMPLATE
    if (String.IsNullOrEmpty(namespaceName))
    {
        namespaceName = GetObjectNamespace(ModelNamespace);
    }
#endif
    return namespaceName;
string MultiSchemaEscape(TypeUsage usage, CodeGenerationTools code)
    StructuralType structural = usage.EdmType as StructuralType;
    if (structural != null)
    {
        return MultiSchemaEscape(structural, code);
    }
    return code.Escape(usage);
string MultiSchemaEscape(StructuralType type, CodeGenerationTools code)
    if (type.NamespaceName != ModelNamespace)
    {
        return code.CreateFullName(code.EscapeNamespace(GetObjectNamespace(type.NamespaceName)), code.Escape(type));
    }
    return code.Escape(type);
string NewModifier(NavigationProperty navigationProperty)
    Type baseType = typeof(EntityObject);
    return NewModifier(baseType, navigationProperty.Name);
string NewModifier(EdmFunction edmFunction)
    Type baseType = typeof(ObjectContext);
    return NewModifier(baseType, edmFunction.Name);
string NewModifier(EntitySet set)
    Type baseType = typeof(ObjectContext);
    return NewModifier(baseType, set.Name);
string NewModifier(EdmProperty property)
    Type baseType;
    if (property.DeclaringType.BuiltInTypeKind == BuiltInTypeKind.EntityType)
    {
        baseType = typeof(EntityObject);
    }
    else
    {
        baseType = typeof(ComplexObject);
    }
    return NewModifier(baseType, property.Name);
string NewModifier(Type type, string memberName)
    if (HasBaseMemberWithMatchingName(type, memberName))
    {
        return "new";
    }
    return string.Empty;
static bool HasBaseMemberWithMatchingName(Type type, string memberName)
    BindingFlags bindingFlags = BindingFlags.FlattenHierarchy | BindingFlags.NonPublic | BindingFlags.Public
                | BindingFlags.Instance | BindingFlags.Static;
    return type.GetMembers(bindingFlags).Where(m => IsVisibleMember(m)).Any(m => m.Name == memberName);
string ChangingMethodName(EdmMember member)
    return string.Format(CultureInfo.InvariantCulture, "On{0}Changing", member.Name);
string ChangedMethodName(EdmMember member)
    return string.Format(CultureInfo.InvariantCulture, "On{0}Changed", member.Name);
string InitializedTrackingField(EdmProperty property, CodeGenerationTools code)
    string namePart = property.Name + "Initialized";
    if (code.CamelCaseFields)
    {
        namePart = code.CamelCase(namePart);
    }
    return "_" + namePart;
string OptionalNullableParameterForSetValidValue(EdmMember member, CodeGenerationTools code)
    MetadataTools ef = new MetadataTools(this);
    string list = string.Empty;
    if (((PrimitiveType)member.TypeUsage.EdmType).ClrEquivalentType.IsClass)
    {
        MetadataProperty storeGeneratedPatternProperty = null;
        bool isNullable = ef.IsNullable(member.TypeUsage) ||
            (member.MetadataProperties.TryGetValue(MetadataConstants.EDM_ANNOTATION_09_02 + ":StoreGeneratedPattern", false, out storeGeneratedPatternProperty) &&
             Object.Equals(storeGeneratedPatternProperty.Value, "Computed"));
        list += ", " + code.CreateLiteral(isNullable);
    }
    return list;
static bool IsVisibleMember(MemberInfo memberInfo)
    if (memberInfo is EventInfo)
    {
        EventInfo ei = (EventInfo)memberInfo;
        MethodInfo add = ei.GetAddMethod();
        MethodInfo remove = ei.GetRemoveMethod();
        return IsVisibleMethod(add) || IsVisibleMethod(remove);
    }
    else if (memberInfo is FieldInfo)
    {
        FieldInfo fi = (FieldInfo)memberInfo;
        return !fi.IsPrivate && !fi.IsAssembly;
    }
    else if (memberInfo is MethodBase)
    {
        MethodBase mb = (MethodBase)memberInfo;
        if (mb.IsSpecialName)
            return false;
        return IsVisibleMethod(mb);
    }
    else if (memberInfo is PropertyInfo)
    {
        PropertyInfo pi = (PropertyInfo)memberInfo;
        MethodInfo get = pi.GetGetMethod();
        MethodInfo set = pi.GetSetMethod();
        return IsVisibleMethod(get) || IsVisibleMethod(set);
    }
    return false;
static bool IsVisibleMethod(MethodBase methodBase)
    if (methodBase == null)
        return false;
    return !methodBase.IsPrivate && !methodBase.IsAssembly;
IEnumerable<T> GetSourceSchemaTypes<T>() where T : GlobalItem
    if (Path.GetExtension(SourceCsdlPath) != ".edmx")
    {
        return ItemCollection.GetItems<T>().Where(e => e.MetadataProperties.Any(mp => mp.Name == "SchemaSource" && (string)mp.Value == SourceCsdlPath));
    }
    else
    {
        return ItemCollection.GetItems<T>();
    }
string EndName(AssociationType association, int index)
    return association.AssociationEndMembers[index].Name;
string EndMultiplicity(AssociationType association, int index, CodeGenerationTools code)
    return code.CreateLiteral(association.AssociationEndMembers[index].RelationshipMultiplicity);
string EscapeEndTypeName(AssociationType association, int index, CodeGenerationTools code)
    EntityType entity = association.AssociationEndMembers[index].GetEntityType();
    return code.CreateFullName(code.EscapeNamespace(GetObjectNamespace(entity.NamespaceName)), code.Escape(entity));
string GetObjectNamespace(string csdlNamespaceName)
    string objectNamespace;
    if (EdmToObjectNamespaceMap.TryGetValue(csdlNamespaceName, out objectNamespace))
    {
        return objectNamespace;
    }
    return csdlNamespaceName;
void UpdateObjectNamespaceMap(string objectNamespace)
    if(objectNamespace != ModelNamespace && !EdmToObjectNamespaceMap.ContainsKey(ModelNamespace))
    {
        EdmToObjectNamespaceMap.Add(ModelNamespace, objectNamespace);
    }
static string FixParameterName(string name, CodeGenerationTools code)
    // 
    // 
    if (StringComparer.OrdinalIgnoreCase.Equals(name, "id"))
    {
        // 
        return "id";
    }
    return code.CamelCase(name);
string BaseTypeName(EntityType entity, CodeGenerationTools code)
    return entity.BaseType == null ? "EntityObject" : MultiSchemaEscape((StructuralType)entity.BaseType, code);
bool IncludePropertyInFactoryMethod(StructuralType factoryType, EdmProperty edmProperty)
    if (edmProperty.Nullable)
    {
        return false;
    }
    if (edmProperty.DefaultValue != null)
    {
        return false;
    }
    if ((Accessibility.ForReadOnlyProperty(edmProperty) != "public" && Accessibility.ForWriteOnlyProperty(edmProperty) != "public") ||
        (factoryType != edmProperty.DeclaringType && Accessibility.ForWriteOnlyProperty(edmProperty) == "private")
       )
    {
        // 
        return false;
    }
    return true;
class FactoryMethodParameter
    public EdmProperty Source;
    public string RawParameterName;
    public string ParameterName;
    public string ParameterType;
    public string ParameterComment;
    public bool IsComplexType;
    public static IEnumerable<FactoryMethodParameter> CreateParameters(IEnumerable<EdmProperty> properties, UniqueIdentifierService unique, Func<TypeUsage, CodeGenerationTools, string> multiSchemaEscape, CodeGenerationTools code)
    {
        List<FactoryMethodParameter> parameters = new List<FactoryMethodParameter>();
        foreach (EdmProperty property in properties)
        {
            FactoryMethodParameter parameter = new FactoryMethodParameter();
            parameter.Source = property;
            parameter.IsComplexType = property.TypeUsage.EdmType is ComplexType;
            parameter.RawParameterName = unique.AdjustIdentifier(FixParameterName(property.Name, code));
            parameter.ParameterName = code.Escape(parameter.RawParameterName);
            parameter.ParameterType = multiSchemaEscape(property.TypeUsage, code);
            parameter.ParameterComment = String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_CommentFactoryMethodParam"), property.Name);
            parameters.Add(parameter);
        }
        return parameters;
    }
string DefaultSummaryComment{ get; set; }
string SummaryComment(MetadataItem item)
    if (item.Documentation != null && item.Documentation.Summary != null)
    {
        return PrefixLinesOfMultilineComment(XMLCOMMENT_START + " ", XmlEntityize(item.Documentation.Summary));
    }
    if (DefaultSummaryComment != null)
    {
        return DefaultSummaryComment;
    }
    return string.Empty;
string LongDescriptionCommentElement(MetadataItem item, int indentLevel)
    if (item.Documentation != null && !String.IsNullOrEmpty(item.Documentation.LongDescription))
    {
        string comment = Environment.NewLine;
        string lineStart = CodeRegion.GetIndent(indentLevel) + XMLCOMMENT_START + " ";
        comment += lineStart + "<LongDescription>" + Environment.NewLine;
        comment += lineStart + PrefixLinesOfMultilineComment(lineStart, XmlEntityize(item.Documentation.LongDescription)) + Environment.NewLine;
        comment += lineStart + "</LongDescription>";
        return comment;
    }
    return string.Empty;
string PrefixLinesOfMultilineComment(string prefix, string comment)
    return comment.Replace(Environment.NewLine, Environment.NewLine + prefix);
string ParameterComments(IEnumerable<Tuple<string, string>> parameters, int indentLevel)
    System.Text.StringBuilder builder = new System.Text.StringBuilder();
    foreach (Tuple<string, string> parameter in parameters)
    {
        builder.AppendLine();
        builder.Append(CodeRegion.GetIndent(indentLevel));
        builder.Append(XMLCOMMENT_START);
        builder.Append(String.Format(CultureInfo.InvariantCulture, " <param name=\"{0}\">{1}</param>", parameter.Item1, parameter.Item2));
    }
    return builder.ToString();
string XmlEntityize(string text)
    if (string.IsNullOrEmpty(text))
    {
        return string.Empty;
    }
    text = text.Replace("&","&amp;");
    text = text.Replace("<","&lt;").Replace(">","&gt;");
    string id = Guid.NewGuid().ToString();
    text = text.Replace(Environment.NewLine, id);
    text = text.Replace("\r", "&#xD;").Replace("\n","&#xA;");
    text = text.Replace(id, Environment.NewLine);
    return text.Replace("\'","&apos;").Replace("\"","&quot;");
const string XMLCOMMENT_START = "///";
IEnumerable<EdmProperty> GetProperties(StructuralType type)
    if (type.BuiltInTypeKind == BuiltInTypeKind.EntityType)
    {
        return ((EntityType)type).Properties;
    }
    else
    {
        return ((ComplexType)type).Properties;
    }
protected void VerifyGetterAndSetterAccessibilityCompatability(EdmMember member)
    string rawGetterAccessibility = Accessibility.ForReadOnlyProperty(member);
    string rawSetterAccessibility = Accessibility.ForWriteOnlyProperty(member);
    if ((rawGetterAccessibility == "internal" && rawSetterAccessibility ==   "protected") ||
        (rawGetterAccessibility == "protected" && rawSetterAccessibility == "internal"))
    {
           Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6033", String.Format(CultureInfo.CurrentCulture,
                   GetResourceString("GeneratedPropertyAccessibilityConflict"),
                       member.Name, rawGetterAccessibility, rawSetterAccessibility)));
    }
private void VerifyEntityTypeAndSetAccessibilityCompatability(EntitySet set)
    string typeAccess = Accessibility.ForType(set.ElementType);
    string setAccess = Accessibility.ForReadOnlyProperty(set);
    if(typeAccess == "internal" && (setAccess == "public" || setAccess == "protected"))
    {
       Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6036", String.Format(CultureInfo.CurrentCulture,
               GetResourceString("EntityTypeAndSetAccessibilityConflict"),
                   set.ElementType.Name, typeAccess, set.Name, setAccess)));
    }
private void DefineMetadata()
    TemplateMetadata[MetadataConstants.TT_TEMPLATE_NAME] = "CSharpCodeGen";
    TemplateMetadata[MetadataConstants.TT_TEMPLATE_VERSION] = "4.0";
    TemplateMetadata[MetadataConstants.TT_MINIMUM_ENTITY_FRAMEWORK_VERSION] = "4.0";
////////
//////// 
////////
sealed class UniqueIdentifierService
    private readonly HashSet<string> _knownIdentifiers;
    public UniqueIdentifierService()
    {
        _knownIdentifiers = new HashSet<string>(StringComparer.Ordinal);
    }
    /// <summary>
    /// 
    /// 
    /// </summary>
    public string AdjustIdentifier(string identifier)
    {
        // 
        var numberOfConflicts = 0;
        var adjustedIdentifier = identifier;
        while (!_knownIdentifiers.Add(adjustedIdentifier))
        {
            ++numberOfConflicts;
            adjustedIdentifier = identifier + numberOfConflicts.ToString(CultureInfo.InvariantCulture);
        }
        return adjustedIdentifier;
    }
// Copyright (c) Microsoft Corporation.  All rights reserved.
public static Dictionary<string, string> TemplateMetadata = new Dictionary<string, string>();
/// <summary>
/// Responsible for helping to create source code that is
/// correctly formated and functional
/// </summary>
public class CodeGenerationTools
    private readonly DynamicTextTransformation _textTransformation;
    private readonly CSharpCodeProvider _code;
    private readonly MetadataTools _ef;
    /// <summary>
    /// Initializes a new CodeGenerationTools object with the TextTransformation (T4 generated class)
    /// that is currently running
    /// </summary>
    public CodeGenerationTools(object textTransformation)
    {
        if (textTransformation == null)
        {
            throw new ArgumentNullException("textTransformation");
        }
        _textTransformation = DynamicTextTransformation.Create(textTransformation);
        _code = new CSharpCodeProvider();
        _ef = new MetadataTools(_textTransformation);
        FullyQualifySystemTypes = false;
        CamelCaseFields = true;
    }
    /// <summary>
    /// When true, all types that are not being generated
    /// are fully qualified to keep them from conflicting with
    /// types that are being generated. Useful when you have
    /// something like a type being generated named System.
    ///
    /// Default is false.
    /// </summary>
    public bool FullyQualifySystemTypes { get; set; }
    /// <summary>
    /// When true, the field names are Camel Cased,
    /// otherwise they will preserve the case they
    /// start with.
    ///
    /// Default is true.
    /// </summary>
    public bool CamelCaseFields { get; set; }
    /// <summary>
    /// Returns the NamespaceName suggested by VS if running inside VS.  Otherwise, returns
    /// null.
    /// </summary>
    public string VsNamespaceSuggestion()
    {
        string suggestion = _textTransformation.Host.ResolveParameterValue("directiveId", "namespaceDirectiveProcessor", "namespaceHint");
        if (String.IsNullOrEmpty(suggestion))
        {
            return null;
        }
        return suggestion;
    }
    /// <summary>
    /// Returns a string that is safe for use as an identifier in C#.
    /// Keywords are escaped.
    /// </summary>
    public string Escape(string name)
    {
        if (name == null)
        {
            return null;
        }
        return _code.CreateEscapedIdentifier(name);
    }
    /// <summary>
    /// Returns the name of the TypeUsage's EdmType that is safe for
    /// use as an identifier.
    /// </summary>
    public string Escape(TypeUsage typeUsage)
    {
        if (typeUsage == null)
        {
            return null;
        }
        if (typeUsage.EdmType is ComplexType ||
            typeUsage.EdmType is EntityType)
        {
            return Escape(typeUsage.EdmType.Name);
        }
        else if (typeUsage.EdmType is SimpleType)
        {
            Type clrType = _ef.UnderlyingClrType(typeUsage.EdmType);
            string typeName = typeUsage.EdmType is EnumType ? Escape(typeUsage.EdmType.Name) : Escape(clrType);
            if (clrType.IsValueType && _ef.IsNullable(typeUsage))
            {
                return String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName);
            }
            return typeName;
        }
        else if (typeUsage.EdmType is CollectionType)
        {
            return String.Format(CultureInfo.InvariantCulture, "ICollection<{0}>", Escape(((CollectionType)typeUsage.EdmType).TypeUsage));
        }
        throw new ArgumentException("typeUsage");
    }
    /// <summary>
    /// Returns the name of the EdmMember that is safe for
    /// use as an identifier.
    /// </summary>
    public string Escape(EdmMember member)
    {
        if (member == null)
        {
            return null;
        }
        return Escape(member.Name);
    }
    /// <summary>
    /// Returns the name of the EdmType that is safe for
    /// use as an identifier.
    /// </summary>
    public string Escape(EdmType type)
    {
        if (type == null)
        {
            return null;
        }
        return Escape(type.Name);
    }
    /// <summary>
    /// Returns the name of the EdmFunction that is safe for
    /// use as an identifier.
    /// </summary>
    public string Escape(EdmFunction function)
    {
        if (function == null)
        {
            return null;
        }
        return Escape(function.Name);
    }
    /// <summary>
    /// Returns the name of the EnumMember that is safe for
    /// use as an identifier.
    /// </summary>
    public string Escape(EnumMember member)
    {
        if (member == null)
        {
            return null;
        }
        return Escape(member.Name);
    }
    /// <summary>
    /// Returns the name of the EntityContainer that is safe for
    /// use as an identifier.
    /// </summary>
    public string Escape(EntityContainer container)
    {
        if (container == null)
        {
            return null;
        }
        return Escape(container.Name);
    }
    /// <summary>
    /// Returns the name of the EntitySet that is safe for
    /// use as an identifier.
    /// </summary>
    public string Escape(EntitySet set)
    {
        if (set == null)
        {
            return null;
        }
        return Escape(set.Name);
    }
    /// <summary>
    /// Returns the name of the StructuralType that is safe for
    /// use as an identifier.
    /// </summary>
    public string Escape(StructuralType type)
    {
        if (type == null)
        {
            return null;
        }
        return Escape(type.Name);
    }
    /// <summary>
    /// Returns the NamespaceName with each segment safe to
    /// use as an identifier.
    /// </summary>
    public string EscapeNamespace(string namespaceName)
    {
        if (String.IsNullOrEmpty(namespaceName))
        {
            return namespaceName;
        }
        string[] parts = namespaceName.Split('.');
        namespaceName = String.Empty;
        foreach (string part in parts)
        {
            if (namespaceName != String.Empty)
            {
                namespaceName += ".";
            }
            namespaceName += Escape(part);
        }
        return namespaceName;
    }
    /// <summary>
    /// Returns the name of the EdmMember formatted for
    /// use as a field identifier.
    ///
    /// This method changes behavior based on the CamelCaseFields
    /// setting.
    /// </summary>
    public string FieldName(EdmMember member)
    {
        if (member == null)
        {
            return null;
        }
        return FieldName(member.Name);
    }
    /// <summary>
    /// Returns the name of the EntitySet formatted for
    /// use as a field identifier.
    ///
    /// This method changes behavior based on the CamelCaseFields
    /// setting.
    /// </summary>
    public string FieldName(EntitySet set)
    {
        if (set == null)
        {
            return null;
        }
        return FieldName(set.Name);
    }
    private string FieldName(string name)
    {
        if (CamelCaseFields)
        {
            return "_" + CamelCase(name);
        }
        else
        {
            return "_" + name;
        }
    }
    /// <summary>
    /// Returns the name of the Type object formatted for
    /// use in source code.
    ///
    /// This method changes behavior based on the FullyQualifySystemTypes
    /// setting.
    /// </summary>
    public string Escape(Type clrType)
    {
        return Escape(clrType, FullyQualifySystemTypes);
    }
    /// <summary>
    /// Returns the name of the Type object formatted for
    /// use in source code.
    /// </summary>
    public string Escape(Type clrType, bool fullyQualifySystemTypes)
    {
        if(clrType == null)
        {
            return null;
        }
        string typeName;
        if (fullyQualifySystemTypes)
        {
            typeName = "global::" + clrType.FullName;
        }
        else
        {
            typeName = _code.GetTypeOutput(new CodeTypeReference(clrType));
        }
        return typeName;
    }
    /// <summary>
    /// Returns the abstract option if the entity is Abstract, otherwise returns String.Empty
    /// </summary>
    public string AbstractOption(EntityType entity)
    {
        if (entity.Abstract)
        {
            return "abstract";
        }
        return String.Empty;
    }
    /// <summary>
    /// Returns the passed in identifier with the first letter changed to lowercase
    /// </summary>
    public string CamelCase(string identifier)
    {
        if (String.IsNullOrEmpty(identifier))
        {
            return identifier;
        }
        if (identifier.Length == 1)
        {
            return identifier[0].ToString(CultureInfo.InvariantCulture).ToLowerInvariant();
        }
        return identifier[0].ToString(CultureInfo.InvariantCulture).ToLowerInvariant() + identifier.Substring(1);
    }
    /// <summary>
    /// If the value parameter is null or empty an empty string is returned,
    /// otherwise it retuns value with a single space concatenated on the end.
    /// </summary>
    public string SpaceAfter(string value)
    {
        return StringAfter(value, " ");
    }
    /// <summary>
    /// If the value parameter is null or empty an empty string is returned,
    /// otherwise it retuns value with a single space concatenated on the end.
    /// </summary>
    public string SpaceBefore(string value)
    {
        return StringBefore(" ", value);
    }
    /// <summary>
    /// If the value parameter is null or empty an empty string is returned,
    /// otherwise it retuns value with append concatenated on the end.
    /// </summary>
    public string StringAfter(string value, string append)
    {
        if (String.IsNullOrEmpty(value))
        {
            return String.Empty;
        }
            return value + append;
    }
    /// <summary>
    /// If the value parameter is null or empty an empty string is returned,
    /// otherwise it retuns value with prepend concatenated on the front.
    /// </summary>
    public string StringBefore(string prepend, string value)
    {
        if (String.IsNullOrEmpty(value))
        {
            return String.Empty;
        }
        return prepend + value;
    }
    /// <summary>
    /// Returns false and shows an error if the supplied type names aren't case-insensitively unique,
    /// otherwise returns true.
    /// </summary>
    public bool VerifyCaseInsensitiveTypeUniqueness(IEnumerable<string> types, string sourceFile)
    {
        return VerifyCaseInsensitiveUniqueness(types, t => string.Format(CultureInfo.CurrentCulture, GetResourceString("Template_CaseInsensitiveTypeConflict"), t), sourceFile);
    }
    /// <summary>
    /// Returns false and shows an error if the supplied strings aren't case-insensitively unique,
    /// otherwise returns true.
    /// </summary>
    private bool VerifyCaseInsensitiveUniqueness(IEnumerable<string> items, Func<string, string> formatMessage, string sourceFile)
    {
        HashSet<string> hash = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);
        foreach (string item in items)
        {
            if (!hash.Add(item))
            {
                _textTransformation.Errors.Add(new System.CodeDom.Compiler.CompilerError(sourceFile, -1, -1, "6023", formatMessage(item)));
                return false;
            }
        }
        return true;
    }
    /// <summary>
    /// Returns the names of the items in the supplied collection that correspond to O-Space types.
    /// </summary>
    public IEnumerable<string> GetAllGlobalItems(EdmItemCollection itemCollection)
    {
        return itemCollection.GetItems<GlobalItem>().Where(i => i is EntityType || i is ComplexType || i is EnumType || i is EntityContainer).Select(g => GetGlobalItemName(g));
    }
    /// <summary>
    /// Returns the name of the supplied GlobalItem.
    /// </summary>
    public string GetGlobalItemName(GlobalItem item)
    {
        if (item is EdmType)
        {
            return ((EdmType)item).Name;
        }
        else
        {
            return ((EntityContainer)item).Name;
        }
    }
    /// <summary>
    /// Retuns as full of a name as possible, if a namespace is provided
    /// the namespace and name are combined with a period, otherwise just
    /// the name is returned.
    /// </summary>
    public string CreateFullName(string namespaceName, string name)
    {
        if (String.IsNullOrEmpty(namespaceName))
        {
            return name;
        }
        return namespaceName + "." + name;
    }
    /// <summary>
    /// Retuns a literal representing the supplied value.
    /// </summary>
    public string CreateLiteral(object value)
    {
        if (value == null)
        {
            return string.Empty;
        }
        Type type = value.GetType();
        if (type.IsEnum)
        {
            return type.FullName + "." + value.ToString();
        }
        if (type == typeof(Guid))
        {
            return string.Format(CultureInfo.InvariantCulture, "new Guid(\"{0}\")",
                                 ((Guid)value).ToString("D", CultureInfo.InvariantCulture));
        }
        else if (type == typeof(DateTime))
        {
            return string.Format(CultureInfo.InvariantCulture, "new DateTime({0}, DateTimeKind.Unspecified)",
                                 ((DateTime)value).Ticks);
        }
        else if (type == typeof(byte[]))
        {
            var arrayInit = string.Join(", ", ((byte[])value).Select(b => b.ToString(CultureInfo.InvariantCulture)).ToArray());
            return string.Format(CultureInfo.InvariantCulture, "new Byte[] {{{0}}}", arrayInit);
        }
        else if (type == typeof(DateTimeOffset))
        {
            var dto = (DateTimeOffset)value;
            return string.Format(CultureInfo.InvariantCulture, "new DateTimeOffset({0}, new TimeSpan({1}))",
                                 dto.Ticks, dto.Offset.Ticks);
        }
        else if (type == typeof(TimeSpan))
        {
            return string.Format(CultureInfo.InvariantCulture, "new TimeSpan({0})",
                                 ((TimeSpan)value).Ticks);
        }
        var expression = new CodePrimitiveExpression(value);
        var writer = new StringWriter();
        CSharpCodeProvider code = new CSharpCodeProvider();
        code.GenerateCodeFromExpression(expression, writer, new CodeGeneratorOptions());
        return writer.ToString();
    }
    /// <summary>
    /// Returns a resource string from the System.Data.Entity.Design assembly.
    /// </summary>
    public static string GetResourceString(string resourceName, CultureInfo culture = null)
    {
        if(_resourceManager == null)
        {
            _resourceManager = new System.Resources.ResourceManager("System.Data.Entity.Design",
                typeof(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly);
        }
        return _resourceManager.GetString(resourceName, culture);
    }
    static System.Resources.ResourceManager _resourceManager;
    private const string ExternalTypeNameAttributeName = @"http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName";
    /// <summary>
    /// Gets the entity, complex, or enum types for which code should be generated from the given item collection.
    /// Any types for which an ExternalTypeName annotation has been applied in the conceptual model
    /// metadata (CSDL) are filtered out of the returned list.
    /// </summary>
    /// <typeparam name="T">The type of item to return.</typeparam>
    /// <param name="itemCollection">The item collection to look in.</param>
    /// <returns>The items to generate.</returns>
    public IEnumerable<T> GetItemsToGenerate<T>(ItemCollection itemCollection) where T: GlobalItem
    {
        return itemCollection.GetItems<T>().Where(i => !i.MetadataProperties.Any(p => p.Name == ExternalTypeNameAttributeName));
    }
    /// <summary>
    /// Returns the escaped type name to use for the given usage of a c-space type in o-space. This might be
    /// an external type name if the ExternalTypeName annotation has been specified in the
    /// conceptual model metadata (CSDL).
    /// </summary>
    /// <param name="typeUsage">The c-space type usage to get a name for.</param>
    /// <returns>The type name to use.</returns>
    public string GetTypeName(TypeUsage typeUsage)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace: null);
    }
    /// <summary>
    /// Returns the escaped type name to use for the given c-space type in o-space. This might be
    /// an external type name if the ExternalTypeName annotation has been specified in the
    /// conceptual model metadata (CSDL).
    /// </summary>
    /// <param name="edmType">The c-space type to get a name for.</param>
    /// <returns>The type name to use.</returns>
    public string GetTypeName(EdmType edmType)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: null);
    }
    /// <summary>
    /// Returns the escaped type name to use for the given usage of an c-space type in o-space. This might be
    /// an external type name if the ExternalTypeName annotation has been specified in the
    /// conceptual model metadata (CSDL).
    /// </summary>
    /// <param name="typeUsage">The c-space type usage to get a name for.</param>
    /// <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
    /// fully qualified name will be returned.</param>
    /// <returns>The type name to use.</returns>
    public string GetTypeName(TypeUsage typeUsage, string modelNamespace)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace);
    }
    /// <summary>
    /// Returns the escaped type name to use for the given c-space type in o-space. This might be
    /// an external type name if the ExternalTypeName annotation has been specified in the
    /// conceptual model metadata (CSDL).
    /// </summary>
    /// <param name="edmType">The c-space type to get a name for.</param>
    /// <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
    /// fully qualified name will be returned.</param>
    /// <returns>The type name to use.</returns>
    public string GetTypeName(EdmType edmType, string modelNamespace)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: modelNamespace);
    }
    /// <summary>
    /// Returns the escaped type name to use for the given c-space type in o-space. This might be
    /// an external type name if the ExternalTypeName annotation has been specified in the
    /// conceptual model metadata (CSDL).
    /// </summary>
    /// <param name="edmType">The c-space type to get a name for.</param>
    /// <param name="isNullable">Set this to true for nullable usage of this type.</param>
    /// <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
    /// fully qualified name will be returned.</param>
    /// <returns>The type name to use.</returns>
    private string GetTypeName(EdmType edmType, bool? isNullable, string modelNamespace)
    {
        if (edmType == null)
        {
            return null;
        }
        var collectionType = edmType as CollectionType;
        if (collectionType != null)
        {
            return String.Format(CultureInfo.InvariantCulture, "ICollection<{0}>", GetTypeName(collectionType.TypeUsage, modelNamespace));
        }
        // Try to get an external type name, and if that is null, then try to get escape the name from metadata,
        // possibly namespace-qualifying it.
        var typeName = Escape(edmType.MetadataProperties
                              .Where(p => p.Name == ExternalTypeNameAttributeName)
                              .Select(p => (string)p.Value)
                              .FirstOrDefault())
            ??
            (modelNamespace != null && edmType.NamespaceName != modelNamespace ?
             CreateFullName(EscapeNamespace(edmType.NamespaceName), Escape(edmType)) :
             Escape(edmType));
        if (edmType is StructuralType)
        {
            return typeName;
        }
        if (edmType is SimpleType)
        {
            var clrType = _ef.UnderlyingClrType(edmType);
            if (!(edmType is EnumType))
            {
                typeName = Escape(clrType);
            }
            return clrType.IsValueType && isNullable == true ?
                String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName) :
                typeName;
        }
        throw new ArgumentException("typeUsage");
    }
/// <summary>
/// Responsible for making the Entity Framework Metadata more
/// accessible for code generation.
/// </summary>
public class MetadataTools
    private readonly DynamicTextTransformation _textTransformation;
    /// <summary>
    /// Initializes an MetadataTools Instance  with the
    /// TextTransformation (T4 generated class) that is currently running
    /// </summary>
    public MetadataTools(object textTransformation)
    {
        if (textTransformation == null)
        {
            throw new ArgumentNullException("textTransformation");
        }
        _textTransformation = DynamicTextTransformation.Create(textTransformation);
    }
    /// <summary>
    /// This method returns the underlying CLR type of the o-space type corresponding to the supplied <paramref name="typeUsage"/>
    /// Note that for an enum type this means that the type backing the enum will be returned, not the enum type itself.
    /// </summary>
    public Type ClrType(TypeUsage typeUsage)
    {
        return UnderlyingClrType(typeUsage.EdmType);
    }
    /// <summary>
    /// This method returns the underlying CLR type given the c-space type.
    /// Note that for an enum type this means that the type backing the enum will be returned, not the enum type itself.
    /// </summary>
    public Type UnderlyingClrType(EdmType edmType)
    {
        var primitiveType = edmType as PrimitiveType;
        if (primitiveType != null)
        {
            return primitiveType.ClrEquivalentType;
        }
        var enumType = edmType as EnumType;
        if (enumType != null)
        {
            return enumType.UnderlyingType.ClrEquivalentType;
        }
        return typeof(object);
    }
    /// <summary>
    /// True if the EdmProperty is a key of its DeclaringType, False otherwise.
    /// </summary>
    public bool IsKey(EdmProperty property)
    {
        if (property != null && property.DeclaringType.BuiltInTypeKind == BuiltInTypeKind.EntityType)
        {
            return ((EntityType)property.DeclaringType).KeyMembers.Contains(property);
        }
        return false;
    }
    /// <summary>
    /// True if the EdmProperty TypeUsage is Nullable, False otherwise.
    /// </summary>
    public bool IsNullable(EdmProperty property)
    {
        return property != null && IsNullable(property.TypeUsage);
    }
    /// <summary>
    /// True if the TypeUsage is Nullable, False otherwise.
    /// </summary>
    public bool IsNullable(TypeUsage typeUsage)
    {
        Facet nullableFacet = null;
        if (typeUsage != null &&
            typeUsage.Facets.TryGetValue("Nullable", true, out nullableFacet))
        {
            return (bool)nullableFacet.Value;
        }
        return false;
    }
    /// <summary>
    /// If the passed in TypeUsage represents a collection this method returns final element
    /// type of the collection, otherwise it returns the value passed in.
    /// </summary>
    public TypeUsage GetElementType(TypeUsage typeUsage)
    {
        if (typeUsage == null)
        {
            return null;
        }
        if (typeUsage.EdmType is CollectionType)
        {
            return GetElementType(((CollectionType)typeUsage.EdmType).TypeUsage);
        }
        else
        {
            return typeUsage;
        }
    }
    /// <summary>
    /// Returns the NavigationProperty that is the other end of the same association set if it is
    /// available, otherwise it returns null.
    /// </summary>
    public NavigationProperty Inverse(NavigationProperty navProperty)
    {
        if(navProperty == null)
        {
            return null;
        }
        EntityType toEntity = navProperty.ToEndMember.GetEntityType();
        return toEntity.NavigationProperties
            .SingleOrDefault(n => Object.ReferenceEquals(n.RelationshipType, navProperty.RelationshipType) && !Object.ReferenceEquals(n, navProperty));
    }
    /// <summary>
    /// Given a property on the dependent end of a referential constraint, returns the corresponding property on the principal end.
    /// Requires: The association has a referential constraint, and the specified dependentProperty is one of the properties on the dependent end.
    /// </summary>
    public EdmProperty GetCorrespondingPrincipalProperty(NavigationProperty navProperty, EdmProperty dependentProperty)
    {
        if (navProperty == null)
        {
            throw new ArgumentNullException("navProperty");
        }
        if (dependentProperty == null)
        {
            throw new ArgumentNullException("dependentProperty");
        }
        ReadOnlyMetadataCollection<EdmProperty> fromProperties = GetPrincipalProperties(navProperty);
        ReadOnlyMetadataCollection<EdmProperty> toProperties = GetDependentProperties(navProperty);
        return fromProperties[toProperties.IndexOf(dependentProperty)];
    }
    /// <summary>
    /// Given a property on the principal end of a referential constraint, returns the corresponding property on the dependent end.
    /// Requires: The association has a referential constraint, and the specified principalProperty is one of the properties on the principal end.
    /// </summary>
    public EdmProperty GetCorrespondingDependentProperty(NavigationProperty navProperty, EdmProperty principalProperty)
    {
        if (navProperty == null)
        {
            throw new ArgumentNullException("navProperty");
        }
        if (principalProperty == null)
        {
            throw new ArgumentNullException("principalProperty");
        }
        ReadOnlyMetadataCollection<EdmProperty> fromProperties = GetPrincipalProperties(navProperty);
        ReadOnlyMetadataCollection<EdmProperty> toProperties = GetDependentProperties(navProperty);
        return toProperties[fromProperties.IndexOf(principalProperty)];
    }
    /// <summary>
    /// Gets the collection of properties that are on the principal end of a referential constraint for the specified navigation property.
    /// Requires: The association has a referential constraint.
    /// </summary>
    public ReadOnlyMetadataCollection<EdmProperty> GetPrincipalProperties(NavigationProperty navProperty)
    {
        if (navProperty == null)
        {
            throw new ArgumentNullException("navProperty");
        }
        return ((AssociationType)navProperty.RelationshipType).ReferentialConstraints[0].FromProperties;
    }
    /// <summary>
    /// Gets the collection of properties that are on the dependent end of a referential constraint for the specified navigation property.
    /// Requires: The association has a referential constraint.
    /// </summary>
    public ReadOnlyMetadataCollection<EdmProperty> GetDependentProperties(NavigationProperty navProperty)
    {
        if (navProperty == null)
        {
            throw new ArgumentNullException("navProperty");
        }
        return ((AssociationType)navProperty.RelationshipType).ReferentialConstraints[0].ToProperties;
    }
    /// <summary>
    /// True if this entity type requires the HandleCascadeDelete method defined and the method has
    /// not been defined on any base type
    /// </summary>
    public bool NeedsHandleCascadeDeleteMethod(ItemCollection itemCollection, EntityType entity)
    {
        bool needsMethod = ContainsCascadeDeleteAssociation(itemCollection, entity);
        // Check to make sure no base types have already declared this method
        EntityType baseType = entity.BaseType as EntityType;
        while(needsMethod && baseType != null)
        {
            needsMethod = !ContainsCascadeDeleteAssociation(itemCollection, baseType);
            baseType = baseType.BaseType as EntityType;
        }
        return needsMethod;
    }
    /// <summary>
    /// True if this entity type participates in any relationships where the other end has an OnDelete
    /// cascade delete defined, or if it is the dependent in any identifying relationships
    /// </summary>
    private bool ContainsCascadeDeleteAssociation(ItemCollection itemCollection, EntityType entity)
    {
        return itemCollection.GetItems<AssociationType>().Where(a =>
                ((RefType)a.AssociationEndMembers[0].TypeUsage.EdmType).ElementType == entity && IsCascadeDeletePrincipal(a.AssociationEndMembers[1]) ||
                ((RefType)a.AssociationEndMembers[1].TypeUsage.EdmType).ElementType == entity && IsCascadeDeletePrincipal(a.AssociationEndMembers[0])).Any();
    }
    /// <summary>
    /// True if the source end of the specified navigation property is the principal in an identifying relationship.
    /// or if the source end has cascade delete defined.
    /// </summary>
    public bool IsCascadeDeletePrincipal(NavigationProperty navProperty)
    {
        if (navProperty == null)
        {
            throw new ArgumentNullException("navProperty");
        }
        return IsCascadeDeletePrincipal((AssociationEndMember)navProperty.FromEndMember);
    }
    /// <summary>
    /// True if the specified association end is the principal in an identifying relationship.
    /// or if the association end has cascade delete defined.
    /// </summary>
    public bool IsCascadeDeletePrincipal(AssociationEndMember associationEnd)
    {
        if (associationEnd == null)
        {
            throw new ArgumentNullException("associationEnd");
        }
        return associationEnd.DeleteBehavior == OperationAction.Cascade || IsPrincipalEndOfIdentifyingRelationship(associationEnd);
    }
    /// <summary>
    /// True if the specified association end is the principal end in an identifying relationship.
    /// In order to be an identifying relationship, the association must have a referential constraint where all of the dependent properties are part of the dependent type's primary key.
    /// </summary>
    public bool IsPrincipalEndOfIdentifyingRelationship(AssociationEndMember associationEnd)
    {
        if (associationEnd == null)
        {
            throw new ArgumentNullException("associationEnd");
        }
        ReferentialConstraint refConstraint = ((AssociationType)associationEnd.DeclaringType).ReferentialConstraints.Where(rc => rc.FromRole == associationEnd).SingleOrDefault();
        if (refConstraint != null)
        {
            EntityType entity = refConstraint.ToRole.GetEntityType();
            return !refConstraint.ToProperties.Where(tp => !entity.KeyMembers.Contains(tp)).Any();
        }
        return false;
    }
    /// <summary>
    /// True if the specified association type is an identifying relationship.
    /// In order to be an identifying relationship, the association must have a referential constraint where all of the dependent properties are part of the dependent type's primary key.
    /// </summary>
    public bool IsIdentifyingRelationship(AssociationType association)
    {
        if (association == null)
        {
            throw new ArgumentNullException("association");
        }
        return IsPrincipalEndOfIdentifyingRelationship(association.AssociationEndMembers[0]) || IsPrincipalEndOfIdentifyingRelationship(association.AssociationEndMembers[1]);
    }
    /// <summary>
    /// requires: firstType is not null
    /// effects: if secondType is among the base types of the firstType, return true,
    /// otherwise returns false.
    /// when firstType is same as the secondType, return false.
    /// </summary>
    public bool IsSubtypeOf(EdmType firstType, EdmType secondType)
    {
        if (secondType == null)
        {
            return false;
        }
        // walk up firstType hierarchy list
        for (EdmType t = firstType.BaseType; t != null; t = t.BaseType)
        {
            if (t == secondType)
                return true;
        }
        return false;
    }
    /// <summary>
    /// Returns the subtype of the EntityType in the current itemCollection
    /// </summary>
    public IEnumerable<EntityType> GetSubtypesOf(EntityType type, ItemCollection itemCollection, bool includeAbstractTypes)
    {
        if (type != null)
        {
            IEnumerable<EntityType> typesInCollection = itemCollection.GetItems<EntityType>();
            foreach (EntityType typeInCollection in typesInCollection)
            {
                if (type.Equals(typeInCollection) == false && this.IsSubtypeOf(typeInCollection, type))
                {
                    if ( includeAbstractTypes || !typeInCollection.Abstract)
                    {
                        yield return typeInCollection;
                    }
               }
            }
        }
    }
    public static bool TryGetStringMetadataPropertySetting(MetadataItem item, string propertyName, out string value)
    {
        value = null;
        MetadataProperty property = item.MetadataProperties.FirstOrDefault(p => p.Name == propertyName);
        if (property != null)
        {
            value = (string)property.Value;
        }
        return value != null;
    }
/// <summary>
/// Responsible for loading an EdmItemCollection from a .edmx file or .csdl files
/// </summary>
public class MetadataLoader
    private readonly DynamicTextTransformation _textTransformation;
    /// <summary>
    /// Initializes an MetadataLoader Instance  with the
    /// TextTransformation (T4 generated class) that is currently running
    /// </summary>
    public MetadataLoader(object textTransformation)
    {
        if (textTransformation == null)
        {
            throw new ArgumentNullException("textTransformation");
        }
        _textTransformation = DynamicTextTransformation.Create(textTransformation);
    }
    /// <summary>
    /// Load the metadata for Edm, Store, and Mapping collections and register them
    /// with a new MetadataWorkspace, returns false if any of the parts can't be
    /// created, some of the ItemCollections may be registered and usable even if false is
    /// returned
    /// </summary>
    public bool TryLoadAllMetadata(string inputFile, out MetadataWorkspace metadataWorkspace)
    {
        metadataWorkspace = new MetadataWorkspace();
        EdmItemCollection edmItemCollection = CreateEdmItemCollection(inputFile);
        metadataWorkspace.RegisterItemCollection(edmItemCollection);
        StoreItemCollection storeItemCollection = null;
        if (TryCreateStoreItemCollection(inputFile, out storeItemCollection))
        {
            StorageMappingItemCollection storageMappingItemCollection = null;
            if (TryCreateStorageMappingItemCollection(inputFile, edmItemCollection, storeItemCollection, out storageMappingItemCollection))
            {
                metadataWorkspace.RegisterItemCollection(storeItemCollection);
                metadataWorkspace.RegisterItemCollection(storageMappingItemCollection);
                return true;
            }
        }
        return false;
    }
    /// <summary>
    /// Create an EdmItemCollection loaded with the metadata provided
    /// </summary>
    public EdmItemCollection CreateEdmItemCollection(string sourcePath, params string[] referenceSchemas)
    {
        EdmItemCollection edmItemCollection;
        if(TryCreateEdmItemCollection(sourcePath, referenceSchemas, out edmItemCollection))
        {
            return edmItemCollection;
        }
        return new EdmItemCollection();
    }
    /// <summary>
    /// Attempts to create a EdmItemCollection from the specified metadata file
    /// </summary>
    public bool TryCreateEdmItemCollection(string sourcePath, out EdmItemCollection edmItemCollection)
    {
        return TryCreateEdmItemCollection(sourcePath, null, out edmItemCollection);
    }
    /// <summary>
    /// Attempts to create a EdmItemCollection from the specified metadata file
    /// </summary>
    public bool TryCreateEdmItemCollection(string sourcePath, string[] referenceSchemas, out EdmItemCollection edmItemCollection)
    {
        edmItemCollection = null;
        if (!ValidateInputPath(sourcePath, _textTransformation))
        {
            return false;
        }
        if (referenceSchemas == null)
        {
            referenceSchemas = new string[0];
        }
        ItemCollection itemCollection = null;
        sourcePath = _textTransformation.Host.ResolvePath(sourcePath);
        EdmItemCollectionBuilder collectionBuilder = new EdmItemCollectionBuilder(_textTransformation, referenceSchemas.Select(s => _textTransformation.Host.ResolvePath(s)).Where(s => s != sourcePath));
        if (collectionBuilder.TryCreateItemCollection(sourcePath, out itemCollection))
        {
            edmItemCollection = (EdmItemCollection)itemCollection;
        }
        return edmItemCollection != null;
    }
    /// <summary>
    /// Attempts to create a StoreItemCollection from the specified metadata file
    /// </summary>
    public bool TryCreateStoreItemCollection(string sourcePath, out StoreItemCollection storeItemCollection)
    {
        storeItemCollection = null;
        if (!ValidateInputPath(sourcePath, _textTransformation))
        {
            return false;
        }
        ItemCollection itemCollection = null;
        StoreItemCollectionBuilder collectionBuilder = new StoreItemCollectionBuilder(_textTransformation);
        if (collectionBuilder.TryCreateItemCollection(_textTransformation.Host.ResolvePath(sourcePath), out itemCollection))
        {
            storeItemCollection = (StoreItemCollection)itemCollection;
        }
        return storeItemCollection != null;
    }
    /// <summary>
    /// Attempts to create a StorageMappingItemCollection from the specified metadata file, EdmItemCollection, and StoreItemCollection
    /// </summary>
    public bool TryCreateStorageMappingItemCollection(string sourcePath, EdmItemCollection edmItemCollection, StoreItemCollection storeItemCollection, out StorageMappingItemCollection storageMappingItemCollection)
    {
        storageMappingItemCollection = null;
        if (!ValidateInputPath(sourcePath, _textTransformation))
        {
            return false;
        }
        if (edmItemCollection == null)
        {
            throw new ArgumentNullException("edmItemCollection");
        }
        if (storeItemCollection == null)
        {
            throw new ArgumentNullException("storeItemCollection");
        }
        ItemCollection itemCollection = null;
        StorageMappingItemCollectionBuilder collectionBuilder = new StorageMappingItemCollectionBuilder(_textTransformation, edmItemCollection, storeItemCollection);
        if (collectionBuilder.TryCreateItemCollection(_textTransformation.Host.ResolvePath(sourcePath), out itemCollection))
        {
            storageMappingItemCollection = (StorageMappingItemCollection)itemCollection;
        }
        return storageMappingItemCollection != null;
    }
    /// <summary>
    /// Gets the Model Namespace from the provided schema file.
    /// </summary>
    public string GetModelNamespace(string sourcePath)
    {
        if (!ValidateInputPath(sourcePath, _textTransformation))
        {
            return String.Empty;
        }
        EdmItemCollectionBuilder builder = new EdmItemCollectionBuilder(_textTransformation);
        XElement model;
        if(builder.TryLoadRootElement(_textTransformation.Host.ResolvePath(sourcePath), out model))
        {
            XAttribute attribute = model.Attribute("Namespace");
            if (attribute != null)
            {
                return attribute.Value;
            }
        }
        return String.Empty;
    }
    /// <summary>
    /// Returns true if the specified file path is valid
    /// </summary>
    private static bool ValidateInputPath(string sourcePath, DynamicTextTransformation textTransformation)
    {
        if (String.IsNullOrEmpty(sourcePath))
        {
            throw new ArgumentException("sourcePath");
        }
        if(sourcePath == "$edmxInputFile$")
        {
            textTransformation.Errors.Add(new CompilerError(textTransformation.Host.TemplateFile ?? CodeGenerationTools.GetResourceString("Template_CurrentlyRunningTemplate"), -1, -1, string.Empty,
                CodeGenerationTools.GetResourceString("Template_ReplaceVsItemTemplateToken")));
            return false;
        }
        return true;
    }
    /// <summary>
    /// Base class for ItemCollectionBuilder classes that
    /// loads the specific types of metadata
    /// </summary>
    private abstract class ItemCollectionBuilder
    {
        private readonly DynamicTextTransformation _textTransformation;
        private readonly string _fileExtension;
        private readonly string _edmxSectionName;
        private readonly string  _rootElementName;
        /// <summary>
        /// FileExtension for individual (non-edmx) metadata file for this
        /// specific ItemCollection type
        /// </summary>
        public string FileExtension
        {
            get { return _fileExtension; }
        }
        /// <summary>
        /// The name of the XmlElement in the .edmx <Runtime> element
        /// to find this ItemCollection's metadata
        /// </summary>
        public string EdmxSectionName
        {
            get { return _edmxSectionName; }
        }
        /// <summary>
        /// The name of the root element of this ItemCollection's metadata
        /// </summary>
        public string RootElementName
        {
            get { return _rootElementName; }
        }
        /// <summary>
        /// Method to build the appropriate ItemCollection
        /// </summary>
        protected abstract ItemCollection CreateItemCollection(IEnumerable<XmlReader> readers, out IList<EdmSchemaError> errors);
        /// <summary>
        /// Ctor to setup the ItemCollectionBuilder members
        /// </summary>
        protected ItemCollectionBuilder(DynamicTextTransformation textTransformation, string fileExtension, string edmxSectionName, string rootElementName)
        {
            _textTransformation = textTransformation;
            _fileExtension = fileExtension;
            _edmxSectionName = edmxSectionName;
            _rootElementName = rootElementName;
        }
        /// <summary>
        /// Selects a namespace from the supplied constants.
        /// </summary>
        protected abstract string GetNamespace(SchemaConstants constants);
        /// <summary>
        /// Try to create an ItemCollection loaded with the metadata provided
        /// </summary>
        public bool TryCreateItemCollection(string sourcePath, out ItemCollection itemCollection)
        {
            itemCollection = null;
            if (!ValidateInputPath(sourcePath, _textTransformation))
            {
                return false;
            }
            XElement schemaElement = null;
            if (TryLoadRootElement(sourcePath, out schemaElement))
            {
                List<XmlReader> readers = new List<XmlReader>();
                try
                {
                    readers.Add(schemaElement.CreateReader());
                    IList<EdmSchemaError> errors = null;
                    ItemCollection tempItemCollection = CreateItemCollection(readers, out errors);
                    if (ProcessErrors(errors, sourcePath))
                    {
                        return false;
                    }
                    itemCollection = tempItemCollection;
                    return true;
                }
                finally
                {
                    foreach (XmlReader reader in readers)
                    {
                        ((IDisposable)reader).Dispose();
                    }
                }
            }
            return false;
        }
        /// <summary>
        /// Tries to load the root element from the metadata file provided
        /// </summary>
        public bool TryLoadRootElement(string sourcePath, out XElement schemaElement)
        {
            schemaElement = null;
            string extension = Path.GetExtension(sourcePath);
            if (extension.Equals(".edmx", StringComparison.InvariantCultureIgnoreCase))
            {
                return TryLoadRootElementFromEdmx(sourcePath, out schemaElement);
            }
            else if(extension.Equals(FileExtension, StringComparison.InvariantCultureIgnoreCase))
            {
                // load from single metadata file (.csdl, .ssdl, or .msl)
                schemaElement = XElement.Load(sourcePath, LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);
                return true;
            }
            return false;
        }
        /// <summary>
        /// Tries to load the root element from the provided edmxDocument
        /// </summary>
        private bool TryLoadRootElementFromEdmx(XElement edmxDocument, SchemaConstants schemaConstants, string sectionName, string rootElementName, out XElement rootElement)
        {
            rootElement = null;
            XNamespace edmxNs = schemaConstants.EdmxNamespace;
            XNamespace sectionNs = GetNamespace(schemaConstants);
            XElement runtime = edmxDocument.Element(edmxNs  + "Runtime");
            if (runtime == null)
            {
                return false;
            }
            XElement section = runtime.Element(edmxNs + sectionName);
            if (section == null)
            {
                return false;
            }
            string templateVersion;
            if (!TemplateMetadata.TryGetValue(MetadataConstants.TT_TEMPLATE_VERSION, out templateVersion))
            {
                templateVersion = MetadataConstants.DEFAULT_TEMPLATE_VERSION;
            }
            if (schemaConstants.MinimumTemplateVersion > new Version(templateVersion))
            {
                _textTransformation.Errors.Add(new CompilerError(
                    _textTransformation.Host.TemplateFile ?? CodeGenerationTools.GetResourceString("Template_CurrentlyRunningTemplate"), -1, -1, string.Empty,
                        CodeGenerationTools.GetResourceString("Template_UnsupportedSchema"))
                {IsWarning = true});
            }
            rootElement = section.Element(sectionNs + rootElementName);
            return rootElement != null;
        }
        /// <summary>
        /// Tries to load the root element from the provided .edmx metadata file
        /// </summary>
        private bool TryLoadRootElementFromEdmx(string edmxPath, out XElement rootElement)
        {
            rootElement = null;
            XElement element = XElement.Load(edmxPath, LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);
            return TryLoadRootElementFromEdmx(element, MetadataConstants.V3_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, out rootElement)
                || TryLoadRootElementFromEdmx(element, MetadataConstants.V2_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, out rootElement)
                || TryLoadRootElementFromEdmx(element, MetadataConstants.V1_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, out rootElement);
        }
        /// <summary>
        /// Takes an Enumerable of EdmSchemaErrors, and adds them
        /// to the errors collection of the template class
        /// </summary>
        private bool ProcessErrors(IEnumerable<EdmSchemaError> errors, string sourceFilePath)
        {
            bool foundErrors = false;
            foreach (EdmSchemaError error in errors)
            {
                CompilerError newError = new CompilerError(error.SchemaLocation, error.Line, error.Column,
                                                 error.ErrorCode.ToString(CultureInfo.InvariantCulture),
                                                 error.Message);
                newError.IsWarning = error.Severity == EdmSchemaErrorSeverity.Warning;
                foundErrors |= error.Severity == EdmSchemaErrorSeverity.Error;
                if (error.SchemaLocation == null)
                {
                    newError.FileName = sourceFilePath;
                }
                _textTransformation.Errors.Add(newError);
            }
            return foundErrors;
        }
    }
    /// <summary>
    /// Builder class for creating a StorageMappingItemCollection
    /// </summary>
    private class StorageMappingItemCollectionBuilder : ItemCollectionBuilder
    {
        private readonly EdmItemCollection _edmItemCollection;
        private readonly StoreItemCollection _storeItemCollection;
        public StorageMappingItemCollectionBuilder(DynamicTextTransformation textTransformation, EdmItemCollection edmItemCollection, StoreItemCollection storeItemCollection)
            : base(textTransformation, MetadataConstants.MSL_EXTENSION, MetadataConstants.MSL_EDMX_SECTION_NAME, MetadataConstants.MSL_ROOT_ELEMENT_NAME)
        {
            _edmItemCollection = edmItemCollection;
            _storeItemCollection = storeItemCollection;
        }
        protected override ItemCollection CreateItemCollection(IEnumerable<XmlReader> readers, out IList<EdmSchemaError> errors)
        {
            return MetadataItemCollectionFactory.CreateStorageMappingItemCollection(_edmItemCollection, _storeItemCollection, readers, out errors);
        }
        /// <summary>
        /// Selects a namespace from the supplied constants.
        /// </summary>
        protected override string GetNamespace(SchemaConstants constants)
        {
            return constants.MslNamespace;
        }
    }
    /// <summary>
    /// Builder class for creating a StoreItemCollection
    /// </summary>
    private class StoreItemCollectionBuilder : ItemCollectionBuilder
    {
        public StoreItemCollectionBuilder(DynamicTextTransformation textTransformation)
            : base(textTransformation, MetadataConstants.SSDL_EXTENSION, MetadataConstants.SSDL_EDMX_SECTION_NAME, MetadataConstants.SSDL_ROOT_ELEMENT_NAME)
        {
        }
        protected override ItemCollection CreateItemCollection(IEnumerable<XmlReader> readers, out IList<EdmSchemaError> errors)
        {
            return MetadataItemCollectionFactory.CreateStoreItemCollection(readers, out errors);
        }
        /// <summary>
        /// Selects a namespace from the supplied constants.
        /// </summary>
        protected override string GetNamespace(SchemaConstants constants)
        {
            return constants.SsdlNamespace;
        }
    }
    /// <summary>
    /// Builder class for creating a EdmItemCollection
    /// </summary>
    private class EdmItemCollectionBuilder : ItemCollectionBuilder
    {
        private List<string> _referenceSchemas = new List<string>();
        public EdmItemCollectionBuilder(DynamicTextTransformation textTransformation)
            : base(textTransformation, MetadataConstants.CSDL_EXTENSION, MetadataConstants.CSDL_EDMX_SECTION_NAME, MetadataConstants.CSDL_ROOT_ELEMENT_NAME)
        {
        }
        public EdmItemCollectionBuilder(DynamicTextTransformation textTransformation, IEnumerable<string> referenceSchemas)
            : this(textTransformation)
        {
            _referenceSchemas.AddRange(referenceSchemas);
        }
        protected override ItemCollection CreateItemCollection(IEnumerable<XmlReader> readers, out IList<EdmSchemaError> errors)
        {
            List<XmlReader> ownedReaders = new List<XmlReader>();
            List<XmlReader> allReaders = new List<XmlReader>();
            try
            {
                allReaders.AddRange(readers);
                foreach (string path in _referenceSchemas.Distinct())
                {
                    XElement reference;
                    if(TryLoadRootElement(path, out reference))
                    {
                        XmlReader reader = reference.CreateReader();
                        allReaders.Add(reader);
                        ownedReaders.Add(reader);
                    }
                }
                return MetadataItemCollectionFactory.CreateEdmItemCollection(allReaders, out errors);
            }
            finally
            {
                foreach (XmlReader reader in ownedReaders)
                {
                    ((IDisposable)reader).Dispose();
                }
            }
        }
        /// <summary>
        /// Selects a namespace from the supplied constants.
        /// </summary>
        protected override string GetNamespace(SchemaConstants constants)
        {
            return constants.CsdlNamespace;
        }
    }
/// <summary>
/// Responsible for encapsulating the retrieval and translation of the CodeGeneration
/// annotations in the EntityFramework Metadata to a form that is useful in code generation.
/// </summary>
public static class Accessibility
    private const string GETTER_ACCESS = "http://schemas.microsoft.com/ado/2006/04/codegeneration:GetterAccess";
    private const string SETTER_ACCESS = "http://schemas.microsoft.com/ado/2006/04/codegeneration:SetterAccess";
    private const string TYPE_ACCESS = "http://schemas.microsoft.com/ado/2006/04/codegeneration:TypeAccess";
    private const string METHOD_ACCESS = "http://schemas.microsoft.com/ado/2006/04/codegeneration:MethodAccess";
    private const string ACCESS_PROTECTED = "Protected";
    private const string ACCESS_INTERNAL = "Internal";
    private const string ACCESS_PRIVATE = "Private";
    private static readonly Dictionary<string, int> AccessibilityRankIdLookup = new Dictionary<string, int>
        {
            { "private", 1},
            { "internal", 2},
            { "protected", 3},
            { "public", 4},
        };
    /// <summary>
    /// Gets the accessibility that should be applied to a type being generated from the provided GlobalItem.
    ///
    /// defaults to public if no annotation is found.
    /// </summary>
    public static string ForType(GlobalItem item)
    {
        if (item == null)
        {
            return null;
        }
        return GetAccessibility(item, TYPE_ACCESS);
    }
    /// <summary>
    /// Gets the accessibility that should be applied at the property level for a property being
    /// generated from the provided EdmMember.
    ///
    /// defaults to public if no annotation is found.
    /// </summary>
    public static string ForProperty(EdmMember member)
    {
        if (member == null)
        {
            return null;
        }
        string getterAccess, setterAccess, propertyAccess;
        CalculatePropertyAccessibility(member, out propertyAccess, out getterAccess, out setterAccess);
        return propertyAccess;
    }
    /// <summary>
    /// Gets the accessibility that should be applied at the property level for a Read-Only property being
    /// generated from the provided EdmMember.
    ///
    /// defaults to public if no annotation is found.
    /// </summary>
    public static string ForReadOnlyProperty(EdmMember member)
    {
        if (member == null)
        {
            return null;
        }
        return GetAccessibility(member, GETTER_ACCESS);
    }
    /// <summary>
    /// Gets the accessibility that should be applied at the property level for a property being
    /// generated from the provided EntitySet.
    ///
    /// defaults to public if no annotation is found.
    /// </summary>
    public static string ForReadOnlyProperty(EntitySet set)
    {
        if (set == null)
        {
            return null;
        }
        return GetAccessibility(set, GETTER_ACCESS);
    }
    /// <summary>
    /// Gets the accessibility that should be applied at the property level for a Write-Only property being
    /// generated from the provided EdmMember.
    ///
    /// defaults to public if no annotation is found.
    /// </summary>
    public static string ForWriteOnlyProperty(EdmMember member)
    {
        if (member == null)
        {
            return null;
        }
        return GetAccessibility(member, SETTER_ACCESS);
    }
    /// <summary>
    /// Gets the accessibility that should be applied at the get level for a property being
    /// generated from the provided EdmMember.
    ///
    /// defaults to empty if no annotation is found or the accessibility is the same as the property level.
    /// </summary>
    public static string ForGetter(EdmMember member)
    {
        if (member == null)
        {
            return null;
        }
        string getterAccess, setterAccess, propertyAccess;
        CalculatePropertyAccessibility(member, out propertyAccess, out getterAccess, out setterAccess);
        return getterAccess;
    }
    /// <summary>
    /// Gets the accessibility that should be applied at the set level for a property being
    /// generated from the provided EdmMember.
    ///
    /// defaults to empty if no annotation is found or the accessibility is the same as the property level.
    /// </summary>
    public static string ForSetter(EdmMember member)
    {
        if (member == null)
        {
            return null;
        }
        string getterAccess, setterAccess, propertyAccess;
        CalculatePropertyAccessibility(member, out propertyAccess, out getterAccess, out setterAccess);
        return setterAccess;
    }
    /// <summary>
    /// Gets the accessibility that should be applied to a method being generated from the provided EdmFunction.
    ///
    /// defaults to public if no annotation is found.
    /// </summary>
    public static string ForMethod(EdmFunction function)
    {
        if (function == null)
        {
            return null;
        }
        return GetAccessibility(function, METHOD_ACCESS);
    }
    private static void CalculatePropertyAccessibility(MetadataItem item,
        out string propertyAccessibility,
        out string getterAccessibility,
        out string setterAccessibility)
    {
        getterAccessibility = GetAccessibility(item, GETTER_ACCESS);
        int getterRank = AccessibilityRankIdLookup[getterAccessibility];
        setterAccessibility = GetAccessibility(item, SETTER_ACCESS);
        int setterRank = AccessibilityRankIdLookup[setterAccessibility];
        int propertyRank = Math.Max(getterRank, setterRank);
        if (setterRank == propertyRank)
        {
            setterAccessibility = String.Empty;
        }
        if (getterRank == propertyRank)
        {
            getterAccessibility = String.Empty;
        }
        propertyAccessibility = AccessibilityRankIdLookup.Where(v => v.Value == propertyRank).Select(v => v.Key).Single();
    }
    private static string GetAccessibility(MetadataItem item, string name)
    {
        string accessibility;
        if (MetadataTools.TryGetStringMetadataPropertySetting(item, name, out accessibility))
        {
            return TranslateUserAccessibilityToCSharpAccessibility(accessibility);
        }
        return "public";
    }
    private static string TranslateUserAccessibilityToCSharpAccessibility(string userAccessibility)
    {
        if (userAccessibility == ACCESS_PROTECTED)
        {
            return "protected";
        }
        else if (userAccessibility == ACCESS_INTERNAL)
        {
            return "internal";
        }
        else if (userAccessibility == ACCESS_PRIVATE)
        {
            return "private";
        }
        else
        {
            // default to public
            return "public";
        }
    }
/// <summary>
/// Responsible for creating source code regions in code when the loop inside
/// actually produces something.
/// </summary>
public class CodeRegion
    private const int STANDARD_INDENT_LENGTH = 4;
    private readonly DynamicTextTransformation _textTransformation;
    private int _beforeRegionLength;
    private int _emptyRegionLength;
    private int _regionIndentLevel = -1;
    /// <summary>
    /// Initializes an CodeRegion instance with the
    /// TextTransformation (T4 generated class) that is currently running
    /// </summary>
    public CodeRegion(object textTransformation)
    {
        if (textTransformation == null)
        {
            throw new ArgumentNullException("textTransformation");
        }
        _textTransformation = DynamicTextTransformation.Create(textTransformation);
    }
    /// <summary>
    /// Initializes an CodeRegion instance with the
    /// TextTransformation (T4 generated class) that is currently running,
    /// and the indent level to start the first region at.
    /// </summary>
    public CodeRegion(object textTransformation, int firstIndentLevel)
        : this(textTransformation)
    {
        if (firstIndentLevel < 0)
        {
            throw new ArgumentException("firstIndentLevel");
        }
        _regionIndentLevel = firstIndentLevel - 1;
    }
    /// <summary>
    /// Starts the begining of a region
    /// </summary>
    public void Begin(string regionName)
    {
        if (regionName == null)
        {
            throw new ArgumentNullException("regionName");
        }
        Begin(regionName, 1);
    }
    /// <summary>
    /// Start the begining of a region, indented
    /// the numbers of levels specified
    /// </summary>
    public void Begin(string regionName, int levelsToIncreaseIndent)
    {
        if (regionName == null)
        {
            throw new ArgumentNullException("regionName");
        }
        _beforeRegionLength = _textTransformation.GenerationEnvironment.Length;
        _regionIndentLevel += levelsToIncreaseIndent;
        _textTransformation.Write(GetIndent(_regionIndentLevel));
        _textTransformation.WriteLine("#region " + regionName);
        _emptyRegionLength = _textTransformation.GenerationEnvironment.Length;
    }
    /// <summary>
    /// Ends a region, or totaly removes it if nothing
    /// was generted since the begining of the region.
    /// </summary>
    public void End()
    {
        End(1);
    }
    /// <summary>
    /// Ends a region, or totaly removes it if nothing
    /// was generted since the begining of the region, also outdents
    /// the number of levels specified.
    /// </summary>
    public void End(int levelsToDecrease)
    {
        int indentLevel = _regionIndentLevel;
        _regionIndentLevel -= levelsToDecrease;
        if (_emptyRegionLength == _textTransformation.GenerationEnvironment.Length)
            _textTransformation.GenerationEnvironment.Length = _beforeRegionLength;
        else
        {
            _textTransformation.WriteLine(String.Empty);
            _textTransformation.Write(GetIndent(indentLevel));
            _textTransformation.WriteLine("#endregion");
            _textTransformation.WriteLine(String.Empty);
        }
    }
    /// <summary>
    /// Gets the current indent level that the next end region statement will be written
    /// at
    /// </summary>
    public int CurrentIndentLevel { get { return _regionIndentLevel; } }
    /// <summary>
    /// Get a string of spaces equivelent to the number of indents
    /// desired.
    /// </summary>
    public static string GetIndent(int indentLevel)
    {
        if (indentLevel < 0)
        {
            throw new ArgumentException("indentLevel");
        }
        return String.Empty.PadLeft(indentLevel * STANDARD_INDENT_LENGTH);
    }
/// <summary>
/// Responsible for collecting together the actual method parameters
/// and the parameters that need to be sent to the Execute method.
/// </summary>
public class FunctionImportParameter
    public FunctionParameter Source { get; set; }
    public string RawFunctionParameterName { get; set; }
    public string FunctionParameterName { get; set; }
    public string FunctionParameterType { get; set; }
    public string LocalVariableName { get; set; }
    public string RawClrTypeName { get; set; }
    public string ExecuteParameterName { get; set; }
    public string EsqlParameterName { get; set; }
    public bool NeedsLocalVariable { get; set; }
    public bool IsNullableOfT { get; set; }
    /// <summary>
    /// Creates a set of FunctionImportParameter objects from the parameters passed in.
    /// </summary>
    public static IEnumerable<FunctionImportParameter> Create(IEnumerable<FunctionParameter> parameters, CodeGenerationTools code, MetadataTools ef)
    {
        if (parameters == null)
        {
            throw new ArgumentNullException("parameters");
        }
        if (code == null)
        {
            throw new ArgumentNullException("code");
        }
        if (ef == null)
        {
            throw new ArgumentNullException("ef");
        }
        UniqueIdentifierService unique = new UniqueIdentifierService();
        List<FunctionImportParameter> importParameters = new List<FunctionImportParameter>();
        foreach (FunctionParameter parameter in parameters)
        {
            FunctionImportParameter importParameter = new FunctionImportParameter();
            importParameter.Source = parameter;
            importParameter.RawFunctionParameterName = unique.AdjustIdentifier(code.CamelCase(parameter.Name));
            importParameter.FunctionParameterName = code.Escape(importParameter.RawFunctionParameterName);
            if (parameter.Mode == ParameterMode.In)
            {
                TypeUsage typeUsage = parameter.TypeUsage;
                importParameter.NeedsLocalVariable = true;
                importParameter.FunctionParameterType = code.GetTypeName(typeUsage);
                importParameter.EsqlParameterName = parameter.Name;
                Type clrType = ef.UnderlyingClrType(parameter.TypeUsage.EdmType);
                importParameter.RawClrTypeName = typeUsage.EdmType is EnumType ? code.GetTypeName(typeUsage.EdmType) : code.Escape(clrType);
                importParameter.IsNullableOfT = clrType.IsValueType;
            }
            else
            {
                importParameter.NeedsLocalVariable = false;
                importParameter.FunctionParameterType = "ObjectParameter";
                importParameter.ExecuteParameterName = importParameter.FunctionParameterName;
            }
            importParameters.Add(importParameter);
        }
        // we save the local parameter uniquification for a second pass to make the visible parameters
        // as pretty and sensible as possible
        for (int i = 0; i < importParameters.Count; i++)
        {
            FunctionImportParameter importParameter = importParameters[i];
            if (importParameter.NeedsLocalVariable)
            {
                importParameter.LocalVariableName = unique.AdjustIdentifier(importParameter.RawFunctionParameterName + "Parameter");
                importParameter.ExecuteParameterName = importParameter.LocalVariableName;
            }
        }
        return importParameters;
    }
    //
    // Class to create unique variables within the same scope
    //
    private sealed class UniqueIdentifierService
    {
        private readonly HashSet<string> _knownIdentifiers;
        public UniqueIdentifierService()
        {
            _knownIdentifiers = new HashSet<string>(StringComparer.Ordinal);
        }
        /// <summary>
        /// Given an identifier, makes it unique within the scope by adding
        /// a suffix (1, 2, 3, ...), and returns the adjusted identifier.
        /// </summary>
        public string AdjustIdentifier(string identifier)
        {
            // find a unique name by adding suffix as necessary
            int numberOfConflicts = 0;
            string adjustedIdentifier = identifier;
            while (!_knownIdentifiers.Add(adjustedIdentifier))
            {
                ++numberOfConflicts;
                adjustedIdentifier = identifier + numberOfConflicts.ToString(CultureInfo.InvariantCulture);
            }
            return adjustedIdentifier;
        }
    }
/// <summary>
/// Responsible for marking the various sections of the generation,
/// so they can be split up into separate files
/// </summary>
public class EntityFrameworkTemplateFileManager
    /// <summary>
    /// Creates the VsEntityFrameworkTemplateFileManager if VS is detected, otherwise
    /// creates the file system version.
    /// </summary>
    public static EntityFrameworkTemplateFileManager Create(object textTransformation)
    {
        DynamicTextTransformation transformation = DynamicTextTransformation.Create(textTransformation);
        IDynamicHost host = transformation.Host;
#if !PREPROCESSED_TEMPLATE
        var hostServiceProvider = host.AsIServiceProvider();
        if (hostServiceProvider != null)
        {
            EnvDTE.DTE dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
            if (dte != null)
            {
                return new VsEntityFrameworkTemplateFileManager(transformation);
            }
        }
#endif
        return new EntityFrameworkTemplateFileManager(transformation);
    }
    private sealed class Block
    {
        public String Name;
        public int Start, Length;
    }
    private readonly List<Block> files = new List<Block>();
    private readonly Block footer = new Block();
    private readonly Block header = new Block();
    private readonly DynamicTextTransformation _textTransformation;
    // reference to the GenerationEnvironment StringBuilder on the
    // TextTransformation object
    private readonly StringBuilder _generationEnvironment;
    private Block currentBlock;
    /// <summary>
    /// Initializes an EntityFrameworkTemplateFileManager Instance  with the
    /// TextTransformation (T4 generated class) that is currently running
    /// </summary>
    private EntityFrameworkTemplateFileManager(object textTransformation)
    {
        if (textTransformation == null)
        {
            throw new ArgumentNullException("textTransformation");
        }
        _textTransformation = DynamicTextTransformation.Create(textTransformation);
        _generationEnvironment = _textTransformation.GenerationEnvironment;
    }
    /// <summary>
    /// Marks the end of the last file if there was one, and starts a new
    /// and marks this point in generation as a new file.
    /// </summary>
    public void StartNewFile(string name)
    {
        if (name == null)
        {
            throw new ArgumentNullException("name");
        }
        CurrentBlock = new Block { Name = name };
    }
    public void StartFooter()
    {
        CurrentBlock = footer;
    }
    public void StartHeader()
    {
        CurrentBlock = header;
    }
    public void EndBlock()
    {
        if (CurrentBlock == null)
        {
            return;
        }
        CurrentBlock.Length = _generationEnvironment.Length - CurrentBlock.Start;
        if (CurrentBlock != header && CurrentBlock != footer)
        {
            files.Add(CurrentBlock);
        }
        currentBlock = null;
    }
    /// <summary>
    /// Produce the template output files.
    /// </summary>
    public virtual IEnumerable<string> Process(bool split = true)
    {
        var generatedFileNames = new List<string>();
        if (split)
        {
            EndBlock();
            var headerText = _generationEnvironment.ToString(header.Start, header.Length);
            var footerText = _generationEnvironment.ToString(footer.Start, footer.Length);
            var outputPath = Path.GetDirectoryName(_textTransformation.Host.TemplateFile);
            files.Reverse();
            foreach (var block in files)
            {
                var fileName = Path.Combine(outputPath, block.Name);
                var content = headerText + _generationEnvironment.ToString(block.Start, block.Length) + footerText;
                generatedFileNames.Add(fileName);
                CreateFile(fileName, content);
                _generationEnvironment.Remove(block.Start, block.Length);
            }
        }
        return generatedFileNames;
    }
    protected virtual void CreateFile(string fileName, string content)
    {
        if (IsFileContentDifferent(fileName, content))
        {
            File.WriteAllText(fileName, content);
        }
    }
    protected bool IsFileContentDifferent(String fileName, string newContent)
    {
        return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
    }
    private Block CurrentBlock
    {
        get { return currentBlock; }
        set
        {
            if (CurrentBlock != null)
            {
                EndBlock();
            }
            if (value != null)
            {
                value.Start = _generationEnvironment.Length;
            }
            currentBlock = value;
        }
    }
#if !PREPROCESSED_TEMPLATE
    private sealed class VsEntityFrameworkTemplateFileManager : EntityFrameworkTemplateFileManager
    {
        private EnvDTE.ProjectItem templateProjectItem;
        private EnvDTE.DTE dte;
        private Action<string> checkOutAction;
        private Action<IEnumerable<string>> projectSyncAction;
        /// <summary>
        /// Creates an instance of the VsEntityFrameworkTemplateFileManager class with the IDynamicHost instance
        /// </summary>
        public VsEntityFrameworkTemplateFileManager(object textTemplating)
            : base(textTemplating)
        {
            var hostServiceProvider = _textTransformation.Host.AsIServiceProvider();
            if (hostServiceProvider == null)
            {
                throw new ArgumentNullException("Could not obtain hostServiceProvider");
            }
            dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
            if (dte == null)
            {
                throw new ArgumentNullException("Could not obtain DTE from host");
            }
            templateProjectItem = dte.Solution.FindProjectItem(_textTransformation.Host.TemplateFile);
            checkOutAction = fileName => dte.SourceControl.CheckOutItem(fileName);
            projectSyncAction = keepFileNames => ProjectSync(templateProjectItem, keepFileNames);
        }
        public override IEnumerable<string> Process(bool split)
        {
            if (templateProjectItem.ProjectItems == null)
            {
                return new List<string>();
            }
            var generatedFileNames = base.Process(split);
            projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, null, null));
            return generatedFileNames;
        }
        protected override void CreateFile(string fileName, string content)
        {
            if (IsFileContentDifferent(fileName, content))
            {
                CheckoutFileIfRequired(fileName);
                File.WriteAllText(fileName, content);
            }
        }
        private static void ProjectSync(EnvDTE.ProjectItem templateProjectItem, IEnumerable<string> keepFileNames)
        {
            var keepFileNameSet = new HashSet<string>(keepFileNames);
            var projectFiles = new Dictionary<string, EnvDTE.ProjectItem>();
            var originalOutput = Path.GetFileNameWithoutExtension(templateProjectItem.FileNames[0]);
            foreach (EnvDTE.ProjectItem projectItem in templateProjectItem.ProjectItems)
            {
                projectFiles.Add(projectItem.FileNames[0], projectItem);
            }
            // Remove unused items from the project
            foreach (var pair in projectFiles)
            {
                if (!keepFileNames.Contains(pair.Key)
                    && !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalOutput + "."))
                {
                    pair.Value.Delete();
                }
            }
            // Add missing files to the project
            foreach (string fileName in keepFileNameSet)
            {
                if (!projectFiles.ContainsKey(fileName))
                {
                    templateProjectItem.ProjectItems.AddFromFile(fileName);
                }
            }
        }
        private void CheckoutFileIfRequired(string fileName)
        {
            if (dte.SourceControl == null
                || !dte.SourceControl.IsItemUnderSCC(fileName)
                    || dte.SourceControl.IsItemCheckedOut(fileName))
            {
                return;
            }
            // run on worker thread to prevent T4 calling back into VS
            checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
        }
    }
#endif
/// <summary>
/// Responsible creating an instance that can be passed
/// to helper classes that need to access the TextTransformation
/// members.  It accesses member by name and signature rather than
/// by type.  This is necessary when the
/// template is being used in Preprocessed mode
/// and there is no common known type that can be
/// passed instead
/// </summary>
public class DynamicTextTransformation
    private object _instance;
    IDynamicHost _dynamicHost;
    private readonly MethodInfo _write;
    private readonly MethodInfo _writeLine;
    private readonly PropertyInfo _generationEnvironment;
    private readonly PropertyInfo _errors;
    private readonly PropertyInfo _host;
    /// <summary>
    /// Creates an instance of the DynamicTextTransformation class around the passed in
    /// TextTransformation shapped instance passed in, or if the passed in instance
    /// already is a DynamicTextTransformation, it casts it and sends it back.
    /// </summary>
    public static DynamicTextTransformation Create(object instance)
    {
        if (instance == null)
        {
            throw new ArgumentNullException("instance");
        }
        DynamicTextTransformation textTransformation = instance as DynamicTextTransformation;
        if (textTransformation != null)
        {
            return textTransformation;
        }
        return new DynamicTextTransformation(instance);
    }
    private DynamicTextTransformation(object instance)
    {
        _instance = instance;
        Type type = _instance.GetType();
        _write = type.GetMethod("Write", new Type[] { typeof(string) });
        _writeLine = type.GetMethod("WriteLine", new Type[] { typeof(string) });
        _generationEnvironment = type.GetProperty("GenerationEnvironment", BindingFlags.Instance | BindingFlags.NonPublic);
        _host = type.GetProperty("Host");
        _errors = type.GetProperty("Errors");
    }
    /// <summary>
    /// Gets the value of the wrapped TextTranformation instance's GenerationEnvironment property
    /// </summary>
    public StringBuilder GenerationEnvironment { get { return (StringBuilder)_generationEnvironment.GetValue(_instance, null); } }
    /// <summary>
    /// Gets the value of the wrapped TextTranformation instance's Errors property
    /// </summary>
    public System.CodeDom.Compiler.CompilerErrorCollection Errors { get { return (System.CodeDom.Compiler.CompilerErrorCollection)_errors.GetValue(_instance, null); } }
    /// <summary>
    /// Calls the wrapped TextTranformation instance's Write method.
    /// </summary>
    public void Write(string text)
    {
        _write.Invoke(_instance, new object[] { text });
    }
    /// <summary>
    /// Calls the wrapped TextTranformation instance's WriteLine method.
    /// </summary>
    public void WriteLine(string text)
    {
        _writeLine.Invoke(_instance, new object[] { text });
    }
    /// <summary>
    /// Gets the value of the wrapped TextTranformation instance's Host property
    /// if available (shows up when hostspecific is set to true in the template directive) and returns
    /// the appropriate implementation of IDynamicHost
    /// </summary>
    public IDynamicHost Host
    {
        get
        {
            if (_dynamicHost == null)
            {
                if(_host == null)
                {
                    _dynamicHost = new NullHost();
                }
                else
                {
                    _dynamicHost = new DynamicHost(_host.GetValue(_instance, null));
                }
            }
            return _dynamicHost;
        }
    }
/// <summary>
/// Reponsible for abstracting the use of Host between times
/// when it is available and not
/// </summary>
public interface IDynamicHost
    /// <summary>
    /// An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
    /// </summary>
    string ResolveParameterValue(string id, string name, string otherName);
    /// <summary>
    /// An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
    /// </summary>
    string ResolvePath(string path);
    /// <summary>
    /// An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
    /// </summary>
    string TemplateFile { get; }
    /// <summary>
    /// Returns the Host instance cast as an IServiceProvider
    /// </summary>
    IServiceProvider AsIServiceProvider();
/// <summary>
/// Reponsible for implementing the IDynamicHost as a dynamic
/// shape wrapper over the Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost interface
/// rather than type dependent wrapper.  We don't use the
/// interface type so that the code can be run in preprocessed mode
/// on a .net framework only installed machine.
/// </summary>
public class DynamicHost : IDynamicHost
    private readonly object _instance;
    private readonly MethodInfo _resolveParameterValue;
    private readonly MethodInfo _resolvePath;
    private readonly PropertyInfo _templateFile;
    /// <summary>
    /// Creates an instance of the DynamicHost class around the passed in
    /// Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost shapped instance passed in.
    /// </summary>
    public DynamicHost(object instance)
    {
        _instance = instance;
        Type type = _instance.GetType();
        _resolveParameterValue = type.GetMethod("ResolveParameterValue", new Type[] { typeof(string), typeof(string), typeof(string) });
        _resolvePath = type.GetMethod("ResolvePath", new Type[] { typeof(string) });
        _templateFile = type.GetProperty("TemplateFile");
    }
    /// <summary>
    /// A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
    /// </summary>
    public string ResolveParameterValue(string id, string name, string otherName)
    {
        return (string)_resolveParameterValue.Invoke(_instance, new object[] { id, name, otherName });
    }
    /// <summary>
    /// A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
    /// </summary>
    public string ResolvePath(string path)
    {
        return (string)_resolvePath.Invoke(_instance, new object[] { path });
    }
    /// <summary>
    /// A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
    /// </summary>
    public string TemplateFile
    {
        get
        {
            return (string)_templateFile.GetValue(_instance, null);
        }
    }
    /// <summary>
    /// Returns the Host instance cast as an IServiceProvider
    /// </summary>
    public IServiceProvider AsIServiceProvider()
    {
        return _instance as IServiceProvider;
    }
/// <summary>
/// Reponsible for implementing the IDynamicHost when the
/// Host property is not available on the TextTemplating type. The Host
/// property only exists when the hostspecific attribute of the template
/// directive is set to true.
/// </summary>
public class NullHost : IDynamicHost
    /// <summary>
    /// An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
    /// that simply retuns null.
    /// </summary>
    public string ResolveParameterValue(string id, string name, string otherName)
    {
        return null;
    }
    /// <summary>
    /// An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
    /// that simply retuns the path passed in.
    /// </summary>
    public string ResolvePath(string path)
    {
        return path;
    }
    /// <summary>
    /// An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
    /// that returns null.
    /// </summary>
    public string TemplateFile
    {
        get
        {
            return null;
        }
    }
    /// <summary>
    /// Returns null.
    /// </summary>
    public IServiceProvider AsIServiceProvider()
    {
        return null;
    }
/// <summary>
/// Responsible for encapsulating the constants defined in Metadata
/// </summary>
public static class MetadataConstants
    public const string CSDL_EXTENSION = ".csdl";
    public const string CSDL_EDMX_SECTION_NAME = "ConceptualModels";
    public const string CSDL_ROOT_ELEMENT_NAME = "Schema";
    public const string EDM_ANNOTATION_09_02 = "http://schemas.microsoft.com/ado/2009/02/edm/annotation";
    public const string SSDL_EXTENSION = ".ssdl";
    public const string SSDL_EDMX_SECTION_NAME = "StorageModels";
    public const string SSDL_ROOT_ELEMENT_NAME = "Schema";
    public const string MSL_EXTENSION = ".msl";
    public const string MSL_EDMX_SECTION_NAME = "Mappings";
    public const string MSL_ROOT_ELEMENT_NAME = "Mapping";
    public const string TT_TEMPLATE_NAME = "TemplateName";
    public const string TT_TEMPLATE_VERSION = "TemplateVersion";
    public const string TT_MINIMUM_ENTITY_FRAMEWORK_VERSION = "MinimumEntityFrameworkVersion";
    public const string DEFAULT_TEMPLATE_VERSION = "4.0";
    public static readonly SchemaConstants V1_SCHEMA_CONSTANTS = new SchemaConstants(
        "http://schemas.microsoft.com/ado/2007/06/edmx",
        "http://schemas.microsoft.com/ado/2006/04/edm",
        "http://schemas.microsoft.com/ado/2006/04/edm/ssdl",
        "urn:schemas-microsoft-com:windows:storage:mapping:CS",
        new Version("3.5"));
    public static readonly SchemaConstants V2_SCHEMA_CONSTANTS = new SchemaConstants(
        "http://schemas.microsoft.com/ado/2008/10/edmx",
        "http://schemas.microsoft.com/ado/2008/09/edm",
        "http://schemas.microsoft.com/ado/2009/02/edm/ssdl",
        "http://schemas.microsoft.com/ado/2008/09/mapping/cs",
        new Version("4.0"));
    public static readonly SchemaConstants V3_SCHEMA_CONSTANTS = new SchemaConstants(
        "http://schemas.microsoft.com/ado/2009/11/edmx",
        "http://schemas.microsoft.com/ado/2009/11/edm",
        "http://schemas.microsoft.com/ado/2009/11/edm/ssdl",
        "http://schemas.microsoft.com/ado/2009/11/mapping/cs",
        new Version("5.0"));
public struct SchemaConstants
    public SchemaConstants(string edmxNamespace, string csdlNamespace, string ssdlNamespace, string mslNamespace, Version minimumTemplateVersion) : this()
    {
        EdmxNamespace = edmxNamespace;
        CsdlNamespace = csdlNamespace;
        SsdlNamespace = ssdlNamespace;
        MslNamespace = mslNamespace;
        MinimumTemplateVersion = minimumTemplateVersion;
    }
    public string EdmxNamespace { get; private set; }
    public string CsdlNamespace { get; private set; }
    public string SsdlNamespace { get; private set; }
    public string MslNamespace { get; private set; }
    public Version MinimumTemplateVersion { get; private set; }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class CSharpCodeGenTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace TemplateCodeGenerators
    using System;
    using System.Linq;
    using System.IO;
    using System.Collections.Generic;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Xml;
    using System.Xml.Linq;
    using System.Globalization;
    using System.Reflection;
    using System.Data.Metadata.Edm;
    using System.Data.Mapping;
    using System.Data.Entity.Design;
    using System.CodeDom;
    using System.CodeDom.Compiler;
    using Microsoft.CSharp;
    using System.Text;
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class CSharpCodeGenTemplateV50 : CSharpCodeGenTemplateV50Base
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
DefineMetadata();
UserSettings userSettings =
    new UserSettings
    {
        SourceCsdlPath = @"$edmxInputFile$",
        ReferenceCsdlPaths = new string[] {},
        FullyQualifySystemTypes = true,
        CreateContextAddToMethods = true,
        CamelCaseFields = false,
    };
ApplyUserSettings(userSettings);
if(Errors.HasErrors)
    return String.Empty;
MetadataLoader loader = new MetadataLoader(this);
MetadataTools ef = new MetadataTools(this);
CodeRegion region = new CodeRegion(this);
CodeGenerationTools code = new CodeGenerationTools(this){FullyQualifySystemTypes = userSettings.FullyQualifySystemTypes, CamelCaseFields = userSettings.CamelCaseFields};
ItemCollection = loader.CreateEdmItemCollection(SourceCsdlPath, ReferenceCsdlPaths.ToArray());
ModelNamespace = loader.GetModelNamespace(SourceCsdlPath);
string namespaceName = GetNamespaceName(code);
UpdateObjectNamespaceMap(namespaceName);
            this.Write("//------------------------------------------------------------------------------\r" +
                    "\n// <auto-generated>\r\n// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine1")));
            this.Write("\r\n//\r\n// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine2")));
            this.Write("\r\n// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine3")));
            this.Write(@"
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
[assembly: EdmSchemaAttribute()]
    ////////
    //////// 
    ////////
    region.Begin(CodeGenerationTools.GetResourceString("Template_RegionRelationships"));
    bool first = true;
    foreach (AssociationType association in GetSourceSchemaTypes<AssociationType>())
    {
        if (first)
        {
            WriteLine(string.Empty);
            first = false;
        }
            this.Write("[assembly: EdmRelationshipAttribute(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(association.NamespaceName));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(association.Name));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(EndName(association, 0)));
            this.Write("\", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EndMultiplicity(association, 0, code)));
            this.Write(", typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(EscapeEndTypeName(association, 0, code)));
            this.Write("), \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(EndName(association, 1)));
            this.Write("\", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EndMultiplicity(association, 1, code)));
            this.Write(", typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(EscapeEndTypeName(association, 1, code)));
            this.Write(")");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.StringBefore(", ", association.IsForeignKey ? "true" : null)));
            this.Write(")]\r\n");
    }
    region.End();
    if (!String.IsNullOrEmpty(namespaceName))
    {
            this.Write("namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(namespaceName));
            this.Write("\r\n{\r\n");
        PushIndent(CodeRegion.GetIndent(1));
    }
    ////////
    //////// 
    ////////
    region.Begin(CodeGenerationTools.GetResourceString("Template_RegionContexts"));
    foreach (EntityContainer container in GetSourceSchemaTypes<EntityContainer>())
    {
            this.Write("\r\n/// <summary>\r\n/// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(container)));
            this.Write("\r\n/// </summary>");
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(container, region.CurrentIndentLevel)));
            this.Write("\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForType(container)));
            this.Write(" partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(container)));
            this.Write(" : ObjectContext\r\n{\r\n    #region ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeGenerationTools.GetResourceString("Template_RegionConstructors")));
            this.Write("\r\n\r\n    /// <summary>\r\n    /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_ContextDefaultCtorComment"), container.Name, container.Name)));
            this.Write("\r\n    /// </summary>\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(container)));
            this.Write("() : base(\"name=");
            this.Write(this.ToStringHelper.ToStringWithCulture(container.Name));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(container.Name));
            this.Write("\")\r\n    {\r\n");
        WriteLazyLoadingEnabled(container);
            this.Write("        OnContextCreated();\r\n    }\r\n\r\n    /// <summary>\r\n    /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_ContextCommonCtorComment"), container.Name)));
            this.Write("\r\n    /// </summary>\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(container)));
            this.Write("(string connectionString) : base(connectionString, \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(container.Name));
            this.Write("\")\r\n    {\r\n");
        WriteLazyLoadingEnabled(container);
            this.Write("        OnContextCreated();\r\n    }\r\n\r\n    /// <summary>\r\n    /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_ContextCommonCtorComment"), container.Name)));
            this.Write("\r\n    /// </summary>\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(container)));
            this.Write("(EntityConnection connection) : base(connection, \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(container.Name));
            this.Write("\")\r\n    {\r\n");
        WriteLazyLoadingEnabled(container);
            this.Write("        OnContextCreated();\r\n    }\r\n\r\n    #endregion\r\n\r\n    #region ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeGenerationTools.GetResourceString("Template_RegionPartialMethods")));
            this.Write("\r\n\r\n    partial void OnContextCreated();\r\n\r\n    #endregion\r\n\r\n");
        ////////
        //////// 
        ////////
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionObjectSetProperties"));
        foreach (EntitySet set in container.BaseEntitySets.OfType<EntitySet>())
        {
            VerifyEntityTypeAndSetAccessibilityCompatability(set);
            this.Write("\r\n    /// <summary>\r\n    /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(set)));
            this.Write("\r\n    /// </summary>");
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(set, region.CurrentIndentLevel)));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(set))));
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForReadOnlyProperty(set)));
            this.Write(" ObjectSet<");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(set.ElementType, code)));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(set)));
            this.Write("\r\n    {\r\n        get\r\n        {\r\n            if ((");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(set)));
            this.Write(" == null))\r\n            {\r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(set)));
            this.Write(" = base.CreateObjectSet<");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(set.ElementType, code)));
            this.Write(">(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(set.Name));
            this.Write("\");\r\n            }\r\n            return ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(set)));
            this.Write(";\r\n        }\r\n    }\r\n    private ObjectSet<");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(set.ElementType, code)));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(set)));
            this.Write(";\r\n");
        }
        region.End();
        ////////
        //////// 
        ////////
        //////// 
        //////// 
        ////////
        //////// 
        //////// 
        //////// 
        ////////
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionAddToMethods"));
        IEnumerable<EntitySet> addToMethods = CreateContextAddToMethods.Value ? container.BaseEntitySets.OfType<EntitySet>() : Enumerable.Empty<EntitySet>();
        foreach (EntitySet set in addToMethods)
        {
            string parameterName = code.Escape(FixParameterName(set.ElementType.Name, code));
            this.Write("\r\n    /// <summary>\r\n    /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_GenCommentAddToMethodCs"), set.Name)));
            this.Write("\r\n    /// </summary>\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForType(set.ElementType)));
            this.Write(" void AddTo");
            this.Write(this.ToStringHelper.ToStringWithCulture(set.Name));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(set.ElementType, code)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameterName));
            this.Write(")\r\n    {\r\n        base.AddObject(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(set.Name));
            this.Write("\", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameterName));
            this.Write(");\r\n    }\r\n");
        }
        region.End();
        ////////
        //////// 
        ////////
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionFunctionImports"));
        foreach (EdmFunction edmFunction in container.FunctionImports)
        {
            IEnumerable<FunctionImportParameter> parameters = FunctionImportParameter.Create(edmFunction.Parameters, code, ef);
            string paramList = string.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray());
            TypeUsage returnType = edmFunction.ReturnParameters.Count == 0 ? null : ef.GetElementType(edmFunction.ReturnParameters[0].TypeUsage);
            if (edmFunction.IsComposableAttribute)
            {
            this.Write("\r\n    /// <summary>\r\n    /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(edmFunction)));
            this.Write("\r\n    /// </summary>");
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(edmFunction, region.CurrentIndentLevel)));
            this.Write(this.ToStringHelper.ToStringWithCulture(ParameterComments(parameters.Select(p => new Tuple<string, string>(p.RawFunctionParameterName, SummaryComment(p.Source))), region.CurrentIndentLevel)));
            this.Write("\r\n    [EdmFunction(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(edmFunction.NamespaceName));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(edmFunction.Name));
            this.Write("\")]\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(edmFunction))));
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForMethod(edmFunction)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture("IQueryable<" + MultiSchemaEscape(returnType, code) + ">"));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(edmFunction)));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(paramList));
            this.Write(")\r\n    {\r\n");
                WriteFunctionParameters(parameters);
            this.Write("        return base.CreateQuery<");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(returnType, code)));
            this.Write(">(\"[");
            this.Write(this.ToStringHelper.ToStringWithCulture(edmFunction.NamespaceName));
            this.Write("].[");
            this.Write(this.ToStringHelper.ToStringWithCulture(edmFunction.Name));
            this.Write("](");
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", parameters.Select(p => "@" + p.EsqlParameterName).ToArray())));
            this.Write(")\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.StringBefore(", ", string.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray()))));
            this.Write(");\r\n    }\r\n");
            }
            else
            {
            this.Write("\r\n    /// <summary>\r\n    /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(edmFunction)));
            this.Write("\r\n    /// </summary>");
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(edmFunction, region.CurrentIndentLevel)));
            this.Write(this.ToStringHelper.ToStringWithCulture(ParameterComments(parameters.Select(p => new Tuple<string, string>(p.RawFunctionParameterName, SummaryComment(p.Source))), region.CurrentIndentLevel)));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(edmFunction))));
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForMethod(edmFunction)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(returnType == null ? "int" : "ObjectResult<" + MultiSchemaEscape(returnType, code) + ">"));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(edmFunction)));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(paramList));
            this.Write(")\r\n    {\r\n");
                WriteFunctionParameters(parameters);
            this.Write("        return base.ExecuteFunction");
            this.Write(this.ToStringHelper.ToStringWithCulture(returnType == null ? "" : "<" + MultiSchemaEscape(returnType, code) + ">"));
            this.Write("(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(edmFunction.Name));
            this.Write("\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.StringBefore(", ", string.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray()))));
            this.Write(");\r\n    }\r\n");
                if(returnType != null && returnType.EdmType.BuiltInTypeKind == BuiltInTypeKind.EntityType)
                {
            this.Write("    /// <summary>\r\n    /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(edmFunction)));
            this.Write("\r\n    /// </summary>");
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(edmFunction, region.CurrentIndentLevel)));
            this.Write("\r\n    /// <param name=\"mergeOption\"></param>");
            this.Write(this.ToStringHelper.ToStringWithCulture(ParameterComments(parameters.Select(p => new Tuple<string, string>(p.RawFunctionParameterName, SummaryComment(p.Source))), region.CurrentIndentLevel)));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(edmFunction))));
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForMethod(edmFunction)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(returnType == null ? "int" : "ObjectResult<" + MultiSchemaEscape(returnType, code) + ">"));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(edmFunction)));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.StringAfter(paramList, ", ")));
            this.Write("MergeOption mergeOption)\r\n    {\r\n");
                    WriteFunctionParameters(parameters);
            this.Write("        return base.");
            this.Write(this.ToStringHelper.ToStringWithCulture(returnType == null ? "ExecuteFunction" : "ExecuteFunction<" + MultiSchemaEscape(returnType, code) + ">"));
            this.Write("(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(edmFunction.Name));
            this.Write("\", mergeOption");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.StringBefore(", ", string.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray()))));
            this.Write(");\r\n    }\r\n");
                }
            }
        }
        region.End();
            this.Write("}\r\n");
    }
    region.End();
    ////////
    //////// 
    ////////
    region.Begin(CodeGenerationTools.GetResourceString("Template_RegionEntities"));
    foreach (EntityType entity in GetSourceSchemaTypes<EntityType>().OrderBy(e => e.Name))
    {
            this.Write("\r\n/// <summary>\r\n/// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(entity)));
            this.Write("\r\n/// </summary>");
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(entity, region.CurrentIndentLevel)));
            this.Write("\r\n[EdmEntityTypeAttribute(NamespaceName=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.NamespaceName));
            this.Write("\", Name=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            this.Write("\")]\r\n[Serializable()]\r\n[DataContractAttribute(IsReference=true)]\r\n");
        foreach (EntityType subType in ItemCollection.GetItems<EntityType>().Where(b => b.BaseType == entity))
        {
            this.Write("[KnownTypeAttribute(typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(subType, code)));
            this.Write("))]\r\n");
        }
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForType(entity)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(code.AbstractOption(entity))));
            this.Write("partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(entity)));
            this.Write(" : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(BaseTypeName(entity, code)));
            this.Write("\r\n{\r\n");
        if (!entity.Abstract)
        {
            WriteFactoryMethod(entity, code);
        }
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionSimpleProperties"));
        foreach (EdmProperty property in entity.Properties.Where(p => p.DeclaringType == entity && p.TypeUsage.EdmType is SimpleType))
        {
            VerifyGetterAndSetterAccessibilityCompatability(property);
            WriteSimpleTypeProperty(property, code);
        }
        region.End();
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionComplexProperties"));
        foreach (EdmProperty property in entity.Properties.Where(p => p.DeclaringType == entity && p.TypeUsage.EdmType is ComplexType))
        {
            VerifyGetterAndSetterAccessibilityCompatability(property);
            WriteComplexTypeProperty(property, code);
        }
        region.End();
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionNavigationProperties"));
        foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(n => n.DeclaringType == entity))
        {
            VerifyGetterAndSetterAccessibilityCompatability(navProperty);
            this.Write("\r\n    /// <summary>\r\n    /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(navProperty)));
            this.Write("\r\n    /// </summary>");
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(navProperty, region.CurrentIndentLevel)));
            this.Write("\r\n    [XmlIgnoreAttribute()]\r\n    [SoapIgnoreAttribute()]\r\n    [DataMemberAttribu" +
                    "te()]\r\n    [EdmRelationshipNavigationPropertyAttribute(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.NamespaceName));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.Name));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name));
            this.Write("\")]\r\n");
            if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
            {
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(navProperty))));
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(navProperty)));
            this.Write(" EntityCollection<");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(navProperty)));
            this.Write("\r\n    {\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(navProperty))));
            this.Write("get\r\n        {\r\n            return ((IEntityWithRelationships)this).RelationshipM" +
                    "anager.GetRelatedCollection<");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)));
            this.Write(">(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name));
            this.Write("\");\r\n        }\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter(navProperty))));
            this.Write("set\r\n        {\r\n            if ((value != null))\r\n            {\r\n                " +
                    "((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection" +
                    "<");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)));
            this.Write(">(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name));
            this.Write("\", value);\r\n            }\r\n        }\r\n    }\r\n");
           }
           else
           {
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(navProperty))));
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(navProperty)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(navProperty)));
            this.Write("\r\n    {\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(navProperty))));
            this.Write("get\r\n        {\r\n            return ((IEntityWithRelationships)this).RelationshipM" +
                    "anager.GetRelatedReference<");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)));
            this.Write(">(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name));
            this.Write("\").Value;\r\n        }\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter(navProperty))));
            this.Write("set\r\n        {\r\n            ((IEntityWithRelationships)this).RelationshipManager." +
                    "GetRelatedReference<");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)));
            this.Write(">(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name));
            this.Write("\").Value = value;\r\n        }\r\n    }\r\n");
        string refPropertyName = navProperty.Name + "Reference";
        if (entity.Members.Any(m => m.Name == refPropertyName))
        {
           // 
            Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6017", String.Format(CultureInfo.CurrentCulture,
                    CodeGenerationTools.GetResourceString("Template_ConflictingGeneratedNavPropName"),
                        navProperty.Name, entity.FullName, refPropertyName)));
        }
            this.Write("    /// <summary>\r\n    /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(navProperty)));
            this.Write("\r\n    /// </summary>");
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(navProperty, region.CurrentIndentLevel)));
            this.Write("\r\n    [BrowsableAttribute(false)]\r\n    [DataMemberAttribute()]\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(navProperty)));
            this.Write(" EntityReference<");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(refPropertyName));
            this.Write("\r\n    {\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(navProperty))));
            this.Write("get\r\n        {\r\n            return ((IEntityWithRelationships)this).RelationshipM" +
                    "anager.GetRelatedReference<");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)));
            this.Write(">(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name));
            this.Write("\");\r\n        }\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter(navProperty))));
            this.Write("set\r\n        {\r\n            if ((value != null))\r\n            {\r\n                " +
                    "((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<" +
                    "");
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)));
            this.Write(">(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name));
            this.Write("\", value);\r\n            }\r\n        }\r\n    }\r\n");
            }
        }
        region.End();
            this.Write("}\r\n");
    }
    region.End();
    ////////
    //////// 
    ////////
    region.Begin(CodeGenerationTools.GetResourceString("Template_RegionComplexTypes"));
    foreach (ComplexType complex in GetSourceSchemaTypes<ComplexType>().OrderBy(c => c.Name))
    {
            this.Write("\r\n/// <summary>\r\n/// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(complex)));
            this.Write("\r\n/// </summary>");
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(complex, region.CurrentIndentLevel)));
            this.Write("\r\n[EdmComplexTypeAttribute(NamespaceName=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(complex.NamespaceName));
            this.Write("\", Name=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(complex.Name));
            this.Write("\")]\r\n[DataContractAttribute(IsReference=true)]\r\n[Serializable()]\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForType(complex)));
            this.Write(" partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(complex)));
            this.Write(" : ComplexObject\r\n{\r\n");
        WriteFactoryMethod(complex, code);
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionSimpleProperties"));
        foreach (EdmProperty property in complex.Properties.Where(p => p.DeclaringType == complex && p.TypeUsage.EdmType is SimpleType))
        {
            VerifyGetterAndSetterAccessibilityCompatability(property);
            WriteSimpleTypeProperty(property, code);
        }
        region.End();
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionComplexProperties"));
        foreach (EdmProperty property in complex.Properties.Where(p => p.DeclaringType == complex && p.TypeUsage.EdmType is ComplexType))
        {
            VerifyGetterAndSetterAccessibilityCompatability(property);
            WriteComplexTypeProperty(property, code);
        }
        region.End();
            this.Write("}\r\n");
    }
    region.End();
    ////////
    //////// 
    ////////
    region.Begin(CodeGenerationTools.GetResourceString("Template_RegionEnumTypes"));
    foreach (EnumType enumType in GetSourceSchemaTypes<EnumType>().OrderBy(c => c.Name))
    {
            this.Write("\r\n/// <summary>\r\n/// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(enumType)));
            this.Write("\r\n/// </summary>");
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(enumType, region.CurrentIndentLevel)));
            this.Write("\r\n[EdmEnumTypeAttribute(NamespaceName=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(enumType.NamespaceName));
            this.Write("\", Name=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(enumType.Name));
            this.Write("\")]\r\n[DataContractAttribute()]\r\n");
        if (enumType.IsFlags)
        {
            this.Write("[FlagsAttribute()]\r\n");
        }
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForType(enumType)));
            this.Write(" enum ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(enumType)));
            this.Write(" : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(enumType.UnderlyingType.ClrEquivalentType, fullyQualifySystemTypes: false)));
            this.Write("\r\n{\r\n");
        foreach (EnumMember member in enumType.Members)
        {
            this.Write("    /// <summary>\r\n    /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(member)));
            this.Write("\r\n    /// </summary>");
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(member, region.CurrentIndentLevel + 1)));
            this.Write("\r\n    [EnumMemberAttribute()]\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(member)));
            this.Write(" = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Value));
            this.Write(",\r\n\r\n");
        }
        // 
        if (enumType.Members.Any())
        {
            this.GenerationEnvironment.Remove(
                this.GenerationEnvironment.Length - (CurrentIndent.Length + 5), CurrentIndent.Length + 3);
        }
            this.Write("}\r\n");
    }
    region.End();
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
            this.Write("}\r\n");
    }
    if (!VerifyTypeUniqueness(GetSourceSchemaTypes<GlobalItem>()
                                  .Where(i => i is StructuralType || i is EnumType || i is EntityContainer)
                                  .Select(i => code.GetGlobalItemName(i))))
    {
        return string.Empty;
    }
            return this.GenerationEnvironment.ToString();
        }
    ////////
    //////// 
    ////////
    ////////
    //////// 
    ////////
    private void WriteFactoryMethod(StructuralType structuralType, CodeGenerationTools code)
    {
        CodeRegion region = new CodeRegion(this, 1);
        string methodName = "Create" + structuralType.Name;
        UniqueIdentifierService uniqueIdentifier = new UniqueIdentifierService();
        string instanceName = code.Escape(uniqueIdentifier.AdjustIdentifier((code.CamelCase(structuralType.Name))));
        IEnumerable<FactoryMethodParameter> parameters = FactoryMethodParameter.CreateParameters(structuralType.Members.OfType<EdmProperty>().Where(p => IncludePropertyInFactoryMethod(structuralType, p)), uniqueIdentifier, MultiSchemaEscape, code);
        if (parameters.Count() == 0)
            return;
        if (structuralType.Members.Any(m => m.Name == methodName))
        {
            // 
            Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6029",
                String.Format(CultureInfo.CurrentCulture,
                        CodeGenerationTools.GetResourceString("Template_FactoryMethodNameConflict"), methodName, structuralType.FullName)));
        }
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionFactoryMethod"));
this.Write("\r\n    /// <summary>\r\n    /// ");
this.Write(this.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_FactoryMethodComment"), structuralType.Name)));
this.Write("\r\n    /// </summary>");
this.Write(this.ToStringHelper.ToStringWithCulture(ParameterComments(parameters.Select(p => new Tuple<string, string>(p.RawParameterName, p.ParameterComment)), region.CurrentIndentLevel)));
this.Write("\r\n    public static ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(structuralType)));
this.Write(" ");
this.Write(this.ToStringHelper.ToStringWithCulture(methodName));
this.Write("(");
this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", parameters.Select(p => p.ParameterType + " " + p.ParameterName).ToArray())));
this.Write(")\r\n    {\r\n        ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(structuralType)));
this.Write(" ");
this.Write(this.ToStringHelper.ToStringWithCulture(instanceName));
this.Write(" = new ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(structuralType)));
this.Write("();\r\n");
        foreach (FactoryMethodParameter parameter in parameters)
        {
            if (parameter.IsComplexType)
            {
                // 
this.Write("        ");
this.Write(this.ToStringHelper.ToStringWithCulture(instanceName));
this.Write(".");
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(parameter.Source)));
this.Write(" = StructuralObject.VerifyComplexObjectIsNotNull(");
this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ParameterName));
this.Write(", \"");
this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Source.Name));
this.Write("\");\r\n");
            }
            else
            {
                // 
this.Write("        ");
this.Write(this.ToStringHelper.ToStringWithCulture(instanceName));
this.Write(".");
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(parameter.Source)));
this.Write(" = ");
this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ParameterName));
this.Write(";\r\n");
            }
        }
this.Write("        return ");
this.Write(this.ToStringHelper.ToStringWithCulture(instanceName));
this.Write(";\r\n    }\r\n");
        region.End();
    }
    ////////
    //////// 
    ////////
    private void WriteSimpleTypeProperty(EdmProperty simpleProperty, CodeGenerationTools code)
    {
        MetadataTools ef = new MetadataTools(this);
this.Write("\r\n    /// <summary>\r\n    /// ");
this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(simpleProperty)));
this.Write("\r\n    /// </summary>");
this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(simpleProperty, 1)));
this.Write("\r\n    [EdmScalarPropertyAttribute(EntityKeyProperty=");
this.Write(this.ToStringHelper.ToStringWithCulture(code.CreateLiteral(ef.IsKey(simpleProperty))));
this.Write(", IsNullable=");
this.Write(this.ToStringHelper.ToStringWithCulture(code.CreateLiteral(ef.IsNullable(simpleProperty))));
this.Write(")]\r\n    [DataMemberAttribute()]\r\n    ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(simpleProperty))));
this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(simpleProperty)));
this.Write(" ");
this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(simpleProperty.TypeUsage, code)));
this.Write(" ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(simpleProperty)));
this.Write("\r\n    {\r\n        ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(simpleProperty))));
this.Write("get\r\n        {\r\n");
             if (ef.ClrType(simpleProperty.TypeUsage) == typeof(byte[]))
                {
this.Write("            return StructuralObject.GetValidValue(");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(simpleProperty)));
this.Write(");\r\n");
                }
                else
                {
this.Write("            return ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(simpleProperty)));
this.Write(";\r\n");
                }
this.Write("        }\r\n        ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter((simpleProperty)))));
this.Write("set\r\n        {\r\n");
        if (ef.IsKey(simpleProperty))
            {
                if (ef.ClrType(simpleProperty.TypeUsage) == typeof(byte[]))
                {
this.Write("            if (!StructuralObject.BinaryEquals(");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(simpleProperty)));
this.Write(", value))\r\n");
                }
                else
                {
this.Write("            if (");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(simpleProperty)));
this.Write(" != value)\r\n");
                }
this.Write("            {\r\n");
        PushIndent(CodeRegion.GetIndent(1));
            }
this.Write("            ");
this.Write(this.ToStringHelper.ToStringWithCulture(ChangingMethodName(simpleProperty)));
this.Write("(value);\r\n            ReportPropertyChanging(\"");
this.Write(this.ToStringHelper.ToStringWithCulture(simpleProperty.Name));
this.Write("\");\r\n            ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(simpleProperty)));
this.Write(" = ");
this.Write(this.ToStringHelper.ToStringWithCulture(CastToEnumType(simpleProperty.TypeUsage, code)));
this.Write("StructuralObject.SetValidValue(");
this.Write(this.ToStringHelper.ToStringWithCulture(CastToUnderlyingType(simpleProperty.TypeUsage, code)));
this.Write("value");
this.Write(this.ToStringHelper.ToStringWithCulture(OptionalNullableParameterForSetValidValue(simpleProperty, code)));
this.Write(", \"");
this.Write(this.ToStringHelper.ToStringWithCulture(simpleProperty.Name));
this.Write("\");\r\n            ReportPropertyChanged(\"");
this.Write(this.ToStringHelper.ToStringWithCulture(simpleProperty.Name));
this.Write("\");\r\n            ");
this.Write(this.ToStringHelper.ToStringWithCulture(ChangedMethodName(simpleProperty)));
this.Write("();\r\n");
        if (ef.IsKey(simpleProperty))
            {
        PopIndent();
this.Write("            }\r\n");
            }
this.Write("        }\r\n    }\r\n    private ");
this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(simpleProperty.TypeUsage, code)));
this.Write(" ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(simpleProperty)));
this.Write(this.ToStringHelper.ToStringWithCulture(code.StringBefore(" = ", code.CreateLiteral(simpleProperty.DefaultValue))));
this.Write(";\r\n    partial void ");
this.Write(this.ToStringHelper.ToStringWithCulture(ChangingMethodName(simpleProperty)));
this.Write("(");
this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(simpleProperty.TypeUsage, code)));
this.Write(" value);\r\n    partial void ");
this.Write(this.ToStringHelper.ToStringWithCulture(ChangedMethodName(simpleProperty)));
this.Write("();\r\n");
    }
    ////////
    //////// 
    ////////
    private void WriteComplexTypeProperty(EdmProperty complexProperty, CodeGenerationTools code)
    {
this.Write("\r\n    /// <summary>\r\n    /// ");
this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(complexProperty)));
this.Write("\r\n    /// </summary>");
this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(complexProperty, 1)));
this.Write("\r\n    [EdmComplexPropertyAttribute()]\r\n    [DesignerSerializationVisibility(Desig" +
        "nerSerializationVisibility.Content)]\r\n    [XmlElement(IsNullable=true)]\r\n    [So" +
        "apElement(IsNullable=true)]\r\n    [DataMemberAttribute()]\r\n    ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(complexProperty))));
this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(complexProperty)));
this.Write(" ");
this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(complexProperty.TypeUsage, code)));
this.Write(" ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(complexProperty)));
this.Write("\r\n    {\r\n        ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(complexProperty))));
this.Write("get\r\n        {\r\n            ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)));
this.Write(" = GetValidValue(");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)));
this.Write(", \"");
this.Write(this.ToStringHelper.ToStringWithCulture(complexProperty.Name));
this.Write("\", false, ");
this.Write(this.ToStringHelper.ToStringWithCulture(InitializedTrackingField(complexProperty, code)));
this.Write(");\r\n            ");
this.Write(this.ToStringHelper.ToStringWithCulture(InitializedTrackingField(complexProperty, code)));
this.Write(" = true;\r\n            return ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)));
this.Write(";\r\n        }\r\n        ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter(complexProperty))));
this.Write("set\r\n        {\r\n            ");
this.Write(this.ToStringHelper.ToStringWithCulture(ChangingMethodName(complexProperty)));
this.Write("(value);\r\n            ReportPropertyChanging(\"");
this.Write(this.ToStringHelper.ToStringWithCulture(complexProperty.Name));
this.Write("\");\r\n            ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)));
this.Write(" = SetValidValue(");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)));
this.Write(", value, \"");
this.Write(this.ToStringHelper.ToStringWithCulture(complexProperty.Name));
this.Write("\");\r\n            ");
this.Write(this.ToStringHelper.ToStringWithCulture(InitializedTrackingField(complexProperty, code)));
this.Write(" = true;\r\n            ReportPropertyChanged(\"");
this.Write(this.ToStringHelper.ToStringWithCulture(complexProperty.Name));
this.Write("\");\r\n            ");
this.Write(this.ToStringHelper.ToStringWithCulture(ChangedMethodName(complexProperty)));
this.Write("();\r\n        }\r\n    }\r\n    private ");
this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(complexProperty.TypeUsage, code)));
this.Write(" ");
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)));
this.Write(";\r\n    private bool ");
this.Write(this.ToStringHelper.ToStringWithCulture(InitializedTrackingField(complexProperty, code)));
this.Write(";\r\n    partial void ");
this.Write(this.ToStringHelper.ToStringWithCulture(ChangingMethodName(complexProperty)));
this.Write("(");
this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(complexProperty.TypeUsage, code)));
this.Write(" value);\r\n    partial void ");
this.Write(this.ToStringHelper.ToStringWithCulture(ChangedMethodName(complexProperty)));
this.Write("();\r\n");
    }
    private void WriteFunctionParameters(IEnumerable<FunctionImportParameter> parameters)
    {
        foreach (FunctionImportParameter parameter in parameters)
        {
            if (!parameter.NeedsLocalVariable)
            {
                continue;
            }
this.Write("        ObjectParameter ");
this.Write(this.ToStringHelper.ToStringWithCulture(parameter.LocalVariableName));
this.Write(";\r\n        if (");
this.Write(this.ToStringHelper.ToStringWithCulture(parameter.IsNullableOfT ? parameter.FunctionParameterName + ".HasValue" : parameter.FunctionParameterName + " != null"));
this.Write(")\r\n        {\r\n            ");
this.Write(this.ToStringHelper.ToStringWithCulture(parameter.LocalVariableName));
this.Write(" = new ObjectParameter(\"");
this.Write(this.ToStringHelper.ToStringWithCulture(parameter.EsqlParameterName));
this.Write("\", ");
this.Write(this.ToStringHelper.ToStringWithCulture(parameter.FunctionParameterName));
this.Write(");\r\n        }\r\n        else\r\n        {\r\n            ");
this.Write(this.ToStringHelper.ToStringWithCulture(parameter.LocalVariableName));
this.Write(" = new ObjectParameter(\"");
this.Write(this.ToStringHelper.ToStringWithCulture(parameter.EsqlParameterName));
this.Write("\", typeof(");
this.Write(this.ToStringHelper.ToStringWithCulture(parameter.RawClrTypeName));
this.Write("));\r\n        }\r\n\r\n");
        }
    }
    private void WriteLazyLoadingEnabled(EntityContainer container)
    {
        string lazyLoadingAttributeValue = null;
        string lazyLoadingAttributeName = MetadataConstants.EDM_ANNOTATION_09_02 + ":LazyLoadingEnabled";
        if(MetadataTools.TryGetStringMetadataPropertySetting(container, lazyLoadingAttributeName, out lazyLoadingAttributeValue))
        {
            bool isLazyLoading = false;
            if(bool.TryParse(lazyLoadingAttributeValue, out isLazyLoading))
            {
this.Write("        this.ContextOptions.LazyLoadingEnabled = ");
this.Write(this.ToStringHelper.ToStringWithCulture(isLazyLoading.ToString().ToLowerInvariant()));
this.Write(";\r\n");
            }
        }
    }
////////
//////// 
////////
public string SourceCsdlPath{ get; set; }
public string ModelNamespace{ get; set; }
public EdmItemCollection ItemCollection{ get; set; }
public IEnumerable<string> ReferenceCsdlPaths{ get; set; }
public Nullable<bool> CreateContextAddToMethods{ get; set; }
public Dictionary<string, string> EdmToObjectNamespaceMap
    get { return _edmToObjectNamespaceMap; }
    set { _edmToObjectNamespaceMap = value; }
public Dictionary<string, string> _edmToObjectNamespaceMap = new Dictionary<string, string>();
public Double SourceEdmVersion
    get
    {
        if (ItemCollection != null)
        {
            return ItemCollection.EdmVersion;
        }
        return 0.0;
    }
private bool VerifyTypeUniqueness(IEnumerable<string> types)
    HashSet<string> hash = new HashSet<string>();
    foreach (string type in types)
    {
        if (!hash.Add(type))
        {
            // 
            Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6034",
                String.Format(CultureInfo.CurrentCulture,
                    CodeGenerationTools.GetResourceString("Template_DuplicateTopLevelType"),
                    type)));
            return false;
        }
    }
    return true;
void ApplyUserSettings(UserSettings userSettings)
    // 
    if (SourceCsdlPath == null)
    {
#if !PREPROCESSED_TEMPLATE
        if(userSettings.SourceCsdlPath == "$" + "edmxInputFile" + "$")
        {
            Errors.Add(new System.CodeDom.Compiler.CompilerError(Host.TemplateFile, -1, -1, "",
                CodeGenerationTools.GetResourceString("Template_ReplaceVsItemTemplateToken")));
            return;
        }
        SourceCsdlPath = Host.ResolvePath(userSettings.SourceCsdlPath);
#else
        SourceCsdlPath = userSettings.SourceCsdlPath;
#endif
    }
    // normalize the path, remove ..\ from it
    SourceCsdlPath = Path.GetFullPath(SourceCsdlPath);
    if (ReferenceCsdlPaths == null)
    {
        ReferenceCsdlPaths = userSettings.ReferenceCsdlPaths;
    }
    if (!CreateContextAddToMethods.HasValue)
    {
        CreateContextAddToMethods = userSettings.CreateContextAddToMethods;
    }
    DefaultSummaryComment = CodeGenerationTools.GetResourceString("Template_CommentNoDocumentation");
class UserSettings
    public string SourceCsdlPath{ get; set; }
    public string[] ReferenceCsdlPaths{ get; set; }
    public bool FullyQualifySystemTypes{ get; set; }
    public bool CreateContextAddToMethods{ get; set; }
    public bool CamelCaseFields{ get; set; }
string GetNamespaceName(CodeGenerationTools code)
    string namespaceName = code.VsNamespaceSuggestion();
#if PREPROCESSED_TEMPLATE
    if (String.IsNullOrEmpty(namespaceName))
    {
        namespaceName = GetObjectNamespace(ModelNamespace);
    }
#endif
    return namespaceName;
string MultiSchemaEscape(TypeUsage usage, CodeGenerationTools code)
    MetadataTools ef = new MetadataTools(this);
    if (usage.EdmType != null)
    {
        if (usage.EdmType is StructuralType)
        {
            return MultiSchemaEscape(usage.EdmType, code);
        }
        else if (usage.EdmType is EnumType)
        {
            string typeName = MultiSchemaEscape(usage.EdmType, code);
            if (ef.IsNullable(usage))
            {
                return String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName);
            }
            return typeName;
        }
    }
    return code.Escape(usage);
string MultiSchemaEscape(EdmType type, CodeGenerationTools code)
    if (type.NamespaceName != ModelNamespace)
    {
        return code.CreateFullName(code.EscapeNamespace(GetObjectNamespace(type.NamespaceName)), code.Escape(type));
    }
    return code.Escape(type);
string NewModifier(NavigationProperty navigationProperty)
    Type baseType = typeof(EntityObject);
    return NewModifier(baseType, navigationProperty.Name);
string NewModifier(EdmFunction edmFunction)
    Type baseType = typeof(ObjectContext);
    return NewModifier(baseType, edmFunction.Name);
string NewModifier(EntitySet set)
    Type baseType = typeof(ObjectContext);
    return NewModifier(baseType, set.Name);
string NewModifier(EdmProperty property)
    Type baseType;
    if (property.DeclaringType.BuiltInTypeKind == BuiltInTypeKind.EntityType)
    {
        baseType = typeof(EntityObject);
    }
    else
    {
        baseType = typeof(ComplexObject);
    }
    return NewModifier(baseType, property.Name);
string NewModifier(Type type, string memberName)
    if (HasBaseMemberWithMatchingName(type, memberName))
    {
        return "new";
    }
    return string.Empty;
static bool HasBaseMemberWithMatchingName(Type type, string memberName)
    BindingFlags bindingFlags = BindingFlags.FlattenHierarchy | BindingFlags.NonPublic | BindingFlags.Public
                | BindingFlags.Instance | BindingFlags.Static;
    return type.GetMembers(bindingFlags).Where(m => IsVisibleMember(m)).Any(m => m.Name == memberName);
string CastToEnumType(TypeUsage typeUsage, CodeGenerationTools code)
    EnumType type = typeUsage.EdmType as EnumType;
    if (type == null)
        return string.Empty;
    return "(" + MultiSchemaEscape(typeUsage, code) + ")";
string CastToUnderlyingType(TypeUsage typeUsage, CodeGenerationTools code)
    MetadataTools ef = new MetadataTools(this);
    EnumType type = typeUsage.EdmType as EnumType;
    if (type == null)
    {
        return string.Empty;
    }
    string clrType = code.Escape(type.UnderlyingType.ClrEquivalentType, fullyQualifySystemTypes: false);
    if (ef.IsNullable(typeUsage))
    {
        clrType = String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", clrType);
    }
    return "(" + clrType + ")";
string ChangingMethodName(EdmMember member)
    return string.Format(CultureInfo.InvariantCulture, "On{0}Changing", member.Name);
string ChangedMethodName(EdmMember member)
    return string.Format(CultureInfo.InvariantCulture, "On{0}Changed", member.Name);
string InitializedTrackingField(EdmProperty property, CodeGenerationTools code)
    string namePart = property.Name + "Initialized";
    if (code.CamelCaseFields)
    {
        namePart = code.CamelCase(namePart);
    }
    return "_" + namePart;
string OptionalNullableParameterForSetValidValue(EdmMember member, CodeGenerationTools code)
    MetadataTools ef = new MetadataTools(this);
    string list = string.Empty;
    PrimitiveType type = member.TypeUsage.EdmType as PrimitiveType;
    if (type != null && type.ClrEquivalentType.IsClass)
    {
        MetadataProperty storeGeneratedPatternProperty = null;
        bool isNullable = ef.IsNullable(member.TypeUsage) ||
            (member.MetadataProperties.TryGetValue(MetadataConstants.EDM_ANNOTATION_09_02 + ":StoreGeneratedPattern", false, out storeGeneratedPatternProperty) &&
             Object.Equals(storeGeneratedPatternProperty.Value, "Computed"));
        list += ", " + code.CreateLiteral(isNullable);
    }
    return list;
static bool IsVisibleMember(MemberInfo memberInfo)
    if (memberInfo is EventInfo)
    {
        EventInfo ei = (EventInfo)memberInfo;
        MethodInfo add = ei.GetAddMethod();
        MethodInfo remove = ei.GetRemoveMethod();
        return IsVisibleMethod(add) || IsVisibleMethod(remove);
    }
    else if (memberInfo is FieldInfo)
    {
        FieldInfo fi = (FieldInfo)memberInfo;
        return !fi.IsPrivate && !fi.IsAssembly;
    }
    else if (memberInfo is MethodBase)
    {
        MethodBase mb = (MethodBase)memberInfo;
        if (mb.IsSpecialName)
            return false;
        return IsVisibleMethod(mb);
    }
    else if (memberInfo is PropertyInfo)
    {
        PropertyInfo pi = (PropertyInfo)memberInfo;
        MethodInfo get = pi.GetGetMethod();
        MethodInfo set = pi.GetSetMethod();
        return IsVisibleMethod(get) || IsVisibleMethod(set);
    }
    return false;
static bool IsVisibleMethod(MethodBase methodBase)
    if (methodBase == null)
        return false;
    return !methodBase.IsPrivate && !methodBase.IsAssembly;
IEnumerable<T> GetSourceSchemaTypes<T>() where T : GlobalItem
    if (Path.GetExtension(SourceCsdlPath) != ".edmx")
    {
        return ItemCollection.GetItems<T>().Where(e => e.MetadataProperties.Any(mp => mp.Name == "SchemaSource" && (string)mp.Value == SourceCsdlPath));
    }
    else
    {
        return ItemCollection.GetItems<T>();
    }
string EndName(AssociationType association, int index)
    return association.AssociationEndMembers[index].Name;
string EndMultiplicity(AssociationType association, int index, CodeGenerationTools code)
    return code.CreateLiteral(association.AssociationEndMembers[index].RelationshipMultiplicity);
string EscapeEndTypeName(AssociationType association, int index, CodeGenerationTools code)
    EntityType entity = association.AssociationEndMembers[index].GetEntityType();
    return code.CreateFullName(code.EscapeNamespace(GetObjectNamespace(entity.NamespaceName)), code.Escape(entity));
string GetObjectNamespace(string csdlNamespaceName)
    string objectNamespace;
    if (EdmToObjectNamespaceMap.TryGetValue(csdlNamespaceName, out objectNamespace))
    {
        return objectNamespace;
    }
    return csdlNamespaceName;
void UpdateObjectNamespaceMap(string objectNamespace)
    if(objectNamespace != ModelNamespace && !EdmToObjectNamespaceMap.ContainsKey(ModelNamespace))
    {
        EdmToObjectNamespaceMap.Add(ModelNamespace, objectNamespace);
    }
static string FixParameterName(string name, CodeGenerationTools code)
    // 
    // 
    if (StringComparer.OrdinalIgnoreCase.Equals(name, "id"))
    {
        // 
        return "id";
    }
    return code.CamelCase(name);
string BaseTypeName(EntityType entity, CodeGenerationTools code)
    return entity.BaseType == null ? "EntityObject" : MultiSchemaEscape(entity.BaseType, code);
bool IncludePropertyInFactoryMethod(StructuralType factoryType, EdmProperty edmProperty)
    if (edmProperty.Nullable)
    {
        return false;
    }
    if (edmProperty.DefaultValue != null)
    {
        return false;
    }
    if ((Accessibility.ForReadOnlyProperty(edmProperty) != "public" && Accessibility.ForWriteOnlyProperty(edmProperty) != "public") ||
        (factoryType != edmProperty.DeclaringType && Accessibility.ForWriteOnlyProperty(edmProperty) == "private")
       )
    {
        // 
        return false;
    }
    return true;
class FactoryMethodParameter
    public EdmProperty Source;
    public string RawParameterName;
    public string ParameterName;
    public string ParameterType;
    public string ParameterComment;
    public bool IsComplexType;
    public static IEnumerable<FactoryMethodParameter> CreateParameters(IEnumerable<EdmProperty> properties, UniqueIdentifierService unique, Func<TypeUsage, CodeGenerationTools, string> multiSchemaEscape, CodeGenerationTools code)
    {
        List<FactoryMethodParameter> parameters = new List<FactoryMethodParameter>();
        foreach (EdmProperty property in properties)
        {
            FactoryMethodParameter parameter = new FactoryMethodParameter();
            parameter.Source = property;
            parameter.IsComplexType = property.TypeUsage.EdmType is ComplexType;
            parameter.RawParameterName = unique.AdjustIdentifier(FixParameterName(property.Name, code));
            parameter.ParameterName = code.Escape(parameter.RawParameterName);
            parameter.ParameterType = multiSchemaEscape(property.TypeUsage, code);
            parameter.ParameterComment = String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_CommentFactoryMethodParam"), property.Name);
            parameters.Add(parameter);
        }
        return parameters;
    }
string DefaultSummaryComment{ get; set; }
string SummaryComment(MetadataItem item)
    if (item.Documentation != null && item.Documentation.Summary != null)
    {
        return PrefixLinesOfMultilineComment(XMLCOMMENT_START + " ", XmlEntityize(item.Documentation.Summary));
    }
    if (DefaultSummaryComment != null)
    {
        return DefaultSummaryComment;
    }
    return string.Empty;
string LongDescriptionCommentElement(MetadataItem item, int indentLevel)
    if (item.Documentation != null && !String.IsNullOrEmpty(item.Documentation.LongDescription))
    {
        string comment = Environment.NewLine;
        string lineStart = CodeRegion.GetIndent(indentLevel) + XMLCOMMENT_START + " ";
        comment += lineStart + "<LongDescription>" + Environment.NewLine;
        comment += lineStart + PrefixLinesOfMultilineComment(lineStart, XmlEntityize(item.Documentation.LongDescription)) + Environment.NewLine;
        comment += lineStart + "</LongDescription>";
        return comment;
    }
    return string.Empty;
string PrefixLinesOfMultilineComment(string prefix, string comment)
    return comment.Replace(Environment.NewLine, Environment.NewLine + prefix);
string ParameterComments(IEnumerable<Tuple<string, string>> parameters, int indentLevel)
    System.Text.StringBuilder builder = new System.Text.StringBuilder();
    foreach (Tuple<string, string> parameter in parameters)
    {
        builder.AppendLine();
        builder.Append(CodeRegion.GetIndent(indentLevel));
        builder.Append(XMLCOMMENT_START);
        builder.Append(String.Format(CultureInfo.InvariantCulture, " <param name=\"{0}\">{1}</param>", parameter.Item1, parameter.Item2));
    }
    return builder.ToString();
string XmlEntityize(string text)
    if (string.IsNullOrEmpty(text))
    {
        return string.Empty;
    }
    text = text.Replace("&","&amp;");
    text = text.Replace("<","&lt;").Replace(">","&gt;");
    string id = Guid.NewGuid().ToString();
    text = text.Replace(Environment.NewLine, id);
    text = text.Replace("\r", "&#xD;").Replace("\n","&#xA;");
    text = text.Replace(id, Environment.NewLine);
    return text.Replace("\'","&apos;").Replace("\"","&quot;");
const string XMLCOMMENT_START = "///";
IEnumerable<EdmProperty> GetProperties(StructuralType type)
    if (type.BuiltInTypeKind == BuiltInTypeKind.EntityType)
    {
        return ((EntityType)type).Properties;
    }
    else
    {
        return ((ComplexType)type).Properties;
    }
protected void VerifyGetterAndSetterAccessibilityCompatability(EdmMember member)
    string rawGetterAccessibility = Accessibility.ForReadOnlyProperty(member);
    string rawSetterAccessibility = Accessibility.ForWriteOnlyProperty(member);
    if ((rawGetterAccessibility == "internal" && rawSetterAccessibility ==   "protected") ||
        (rawGetterAccessibility == "protected" && rawSetterAccessibility == "internal"))
    {
           Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6033", String.Format(CultureInfo.CurrentCulture,
                   CodeGenerationTools.GetResourceString("GeneratedPropertyAccessibilityConflict"),
                       member.Name, rawGetterAccessibility, rawSetterAccessibility)));
    }
private void VerifyEntityTypeAndSetAccessibilityCompatability(EntitySet set)
    string typeAccess = Accessibility.ForType(set.ElementType);
    string setAccess = Accessibility.ForReadOnlyProperty(set);
    if(typeAccess == "internal" && (setAccess == "public" || setAccess == "protected"))
    {
       Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6036", String.Format(CultureInfo.CurrentCulture,
               CodeGenerationTools.GetResourceString("EntityTypeAndSetAccessibilityConflict"),
                   set.ElementType.Name, typeAccess, set.Name, setAccess)));
    }
private void DefineMetadata()
    TemplateMetadata[MetadataConstants.TT_TEMPLATE_NAME] = "CSharpCodeGen";
    TemplateMetadata[MetadataConstants.TT_TEMPLATE_VERSION] = "5.0";
    TemplateMetadata[MetadataConstants.TT_MINIMUM_ENTITY_FRAMEWORK_VERSION] = "5.0";
sealed class UniqueIdentifierService
    private readonly HashSet<string> _knownIdentifiers;
    public UniqueIdentifierService()
    {
        _knownIdentifiers = new HashSet<string>(StringComparer.Ordinal);
    }
    /// <summary>
    /// 
    /// 
    /// </summary>
    public string AdjustIdentifier(string identifier)
    {
        // 
        var numberOfConflicts = 0;
        var adjustedIdentifier = identifier;
        while (!_knownIdentifiers.Add(adjustedIdentifier))
        {
            ++numberOfConflicts;
            adjustedIdentifier = identifier + numberOfConflicts.ToString(CultureInfo.InvariantCulture);
        }
        return adjustedIdentifier;
    }
// Copyright (c) Microsoft Corporation.  All rights reserved.
public static Dictionary<string, string> TemplateMetadata = new Dictionary<string, string>();
/// <summary>
/// Responsible for helping to create source code that is
/// correctly formated and functional
/// </summary>
public class CodeGenerationTools
    private readonly DynamicTextTransformation _textTransformation;
    private readonly CSharpCodeProvider _code;
    private readonly MetadataTools _ef;
    /// <summary>
    /// Initializes a new CodeGenerationTools object with the TextTransformation (T4 generated class)
    /// that is currently running
    /// </summary>
    public CodeGenerationTools(object textTransformation)
    {
        if (textTransformation == null)
        {
            throw new ArgumentNullException("textTransformation");
        }
        _textTransformation = DynamicTextTransformation.Create(textTransformation);
        _code = new CSharpCodeProvider();
        _ef = new MetadataTools(_textTransformation);
        FullyQualifySystemTypes = false;
        CamelCaseFields = true;
    }
    /// <summary>
    /// When true, all types that are not being generated
    /// are fully qualified to keep them from conflicting with
    /// types that are being generated. Useful when you have
    /// something like a type being generated named System.
    ///
    /// Default is false.
    /// </summary>
    public bool FullyQualifySystemTypes { get; set; }
    /// <summary>
    /// When true, the field names are Camel Cased,
    /// otherwise they will preserve the case they
    /// start with.
    ///
    /// Default is true.
    /// </summary>
    public bool CamelCaseFields { get; set; }
    /// <summary>
    /// Returns the NamespaceName suggested by VS if running inside VS.  Otherwise, returns
    /// null.
    /// </summary>
    public string VsNamespaceSuggestion()
    {
        string suggestion = _textTransformation.Host.ResolveParameterValue("directiveId", "namespaceDirectiveProcessor", "namespaceHint");
        if (String.IsNullOrEmpty(suggestion))
        {
            return null;
        }
        return suggestion;
    }
    /// <summary>
    /// Returns a string that is safe for use as an identifier in C#.
    /// Keywords are escaped.
    /// </summary>
    public string Escape(string name)
    {
        if (name == null)
        {
            return null;
        }
        return _code.CreateEscapedIdentifier(name);
    }
    /// <summary>
    /// Returns the name of the TypeUsage's EdmType that is safe for
    /// use as an identifier.
    /// </summary>
    public string Escape(TypeUsage typeUsage)
    {
        if (typeUsage == null)
        {
            return null;
        }
        if (typeUsage.EdmType is ComplexType ||
            typeUsage.EdmType is EntityType)
        {
            return Escape(typeUsage.EdmType.Name);
        }
        else if (typeUsage.EdmType is SimpleType)
        {
            Type clrType = _ef.UnderlyingClrType(typeUsage.EdmType);
            string typeName = typeUsage.EdmType is EnumType ? Escape(typeUsage.EdmType.Name) : Escape(clrType);
            if (clrType.IsValueType && _ef.IsNullable(typeUsage))
            {
                return String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName);
            }
            return typeName;
        }
        else if (typeUsage.EdmType is CollectionType)
        {
            return String.Format(CultureInfo.InvariantCulture, "ICollection<{0}>", Escape(((CollectionType)typeUsage.EdmType).TypeUsage));
        }
        throw new ArgumentException("typeUsage");
    }
    /// <summary>
    /// Returns the name of the EdmMember that is safe for
    /// use as an identifier.
    /// </summary>
    public string Escape(EdmMember member)
    {
        if (member == null)
        {
            return null;
        }
        return Escape(member.Name);
    }
    /// <summary>
    /// Returns the name of the EdmType that is safe for
    /// use as an identifier.
    /// </summary>
    public string Escape(EdmType type)
    {
        if (type == null)
        {
            return null;
        }
        return Escape(type.Name);
    }
    /// <summary>
    /// Returns the name of the EdmFunction that is safe for
    /// use as an identifier.
    /// </summary>
    public string Escape(EdmFunction function)
    {
        if (function == null)
        {
            return null;
        }
        return Escape(function.Name);
    }
    /// <summary>
    /// Returns the name of the EnumMember that is safe for
    /// use as an identifier.
    /// </summary>
    public string Escape(EnumMember member)
    {
        if (member == null)
        {
            return null;
        }
        return Escape(member.Name);
    }
    /// <summary>
    /// Returns the name of the EntityContainer that is safe for
    /// use as an identifier.
    /// </summary>
    public string Escape(EntityContainer container)
    {
        if (container == null)
        {
            return null;
        }
        return Escape(container.Name);
    }
    /// <summary>
    /// Returns the name of the EntitySet that is safe for
    /// use as an identifier.
    /// </summary>
    public string Escape(EntitySet set)
    {
        if (set == null)
        {
            return null;
        }
        return Escape(set.Name);
    }
    /// <summary>
    /// Returns the name of the StructuralType that is safe for
    /// use as an identifier.
    /// </summary>
    public string Escape(StructuralType type)
    {
        if (type == null)
        {
            return null;
        }
        return Escape(type.Name);
    }
    /// <summary>
    /// Returns the NamespaceName with each segment safe to
    /// use as an identifier.
    /// </summary>
    public string EscapeNamespace(string namespaceName)
    {
        if (String.IsNullOrEmpty(namespaceName))
        {
            return namespaceName;
        }
        string[] parts = namespaceName.Split('.');
        namespaceName = String.Empty;
        foreach (string part in parts)
        {
            if (namespaceName != String.Empty)
            {
                namespaceName += ".";
            }
            namespaceName += Escape(part);
        }
        return namespaceName;
    }
    /// <summary>
    /// Returns the name of the EdmMember formatted for
    /// use as a field identifier.
    ///
    /// This method changes behavior based on the CamelCaseFields
    /// setting.
    /// </summary>
    public string FieldName(EdmMember member)
    {
        if (member == null)
        {
            return null;
        }
        return FieldName(member.Name);
    }
    /// <summary>
    /// Returns the name of the EntitySet formatted for
    /// use as a field identifier.
    ///
    /// This method changes behavior based on the CamelCaseFields
    /// setting.
    /// </summary>
    public string FieldName(EntitySet set)
    {
        if (set == null)
        {
            return null;
        }
        return FieldName(set.Name);
    }
    private string FieldName(string name)
    {
        if (CamelCaseFields)
        {
            return "_" + CamelCase(name);
        }
        else
        {
            return "_" + name;
        }
    }
    /// <summary>
    /// Returns the name of the Type object formatted for
    /// use in source code.
    ///
    /// This method changes behavior based on the FullyQualifySystemTypes
    /// setting.
    /// </summary>
    public string Escape(Type clrType)
    {
        return Escape(clrType, FullyQualifySystemTypes);
    }
    /// <summary>
    /// Returns the name of the Type object formatted for
    /// use in source code.
    /// </summary>
    public string Escape(Type clrType, bool fullyQualifySystemTypes)
    {
        if(clrType == null)
        {
            return null;
        }
        string typeName;
        if (fullyQualifySystemTypes)
        {
            typeName = "global::" + clrType.FullName;
        }
        else
        {
            typeName = _code.GetTypeOutput(new CodeTypeReference(clrType));
        }
        return typeName;
    }
    /// <summary>
    /// Returns the abstract option if the entity is Abstract, otherwise returns String.Empty
    /// </summary>
    public string AbstractOption(EntityType entity)
    {
        if (entity.Abstract)
        {
            return "abstract";
        }
        return String.Empty;
    }
    /// <summary>
    /// Returns the passed in identifier with the first letter changed to lowercase
    /// </summary>
    public string CamelCase(string identifier)
    {
        if (String.IsNullOrEmpty(identifier))
        {
            return identifier;
        }
        if (identifier.Length == 1)
        {
            return identifier[0].ToString(CultureInfo.InvariantCulture).ToLowerInvariant();
        }
        return identifier[0].ToString(CultureInfo.InvariantCulture).ToLowerInvariant() + identifier.Substring(1);
    }
    /// <summary>
    /// If the value parameter is null or empty an empty string is returned,
    /// otherwise it retuns value with a single space concatenated on the end.
    /// </summary>
    public string SpaceAfter(string value)
    {
        return StringAfter(value, " ");
    }
    /// <summary>
    /// If the value parameter is null or empty an empty string is returned,
    /// otherwise it retuns value with a single space concatenated on the end.
    /// </summary>
    public string SpaceBefore(string value)
    {
        return StringBefore(" ", value);
    }
    /// <summary>
    /// If the value parameter is null or empty an empty string is returned,
    /// otherwise it retuns value with append concatenated on the end.
    /// </summary>
    public string StringAfter(string value, string append)
    {
        if (String.IsNullOrEmpty(value))
        {
            return String.Empty;
        }
            return value + append;
    }
    /// <summary>
    /// If the value parameter is null or empty an empty string is returned,
    /// otherwise it retuns value with prepend concatenated on the front.
    /// </summary>
    public string StringBefore(string prepend, string value)
    {
        if (String.IsNullOrEmpty(value))
        {
            return String.Empty;
        }
        return prepend + value;
    }
    /// <summary>
    /// Returns false and shows an error if the supplied type names aren't case-insensitively unique,
    /// otherwise returns true.
    /// </summary>
    public bool VerifyCaseInsensitiveTypeUniqueness(IEnumerable<string> types, string sourceFile)
    {
        return VerifyCaseInsensitiveUniqueness(types, t => string.Format(CultureInfo.CurrentCulture, GetResourceString("Template_CaseInsensitiveTypeConflict"), t), sourceFile);
    }
    /// <summary>
    /// Returns false and shows an error if the supplied strings aren't case-insensitively unique,
    /// otherwise returns true.
    /// </summary>
    private bool VerifyCaseInsensitiveUniqueness(IEnumerable<string> items, Func<string, string> formatMessage, string sourceFile)
    {
        HashSet<string> hash = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);
        foreach (string item in items)
        {
            if (!hash.Add(item))
            {
                _textTransformation.Errors.Add(new System.CodeDom.Compiler.CompilerError(sourceFile, -1, -1, "6023", formatMessage(item)));
                return false;
            }
        }
        return true;
    }
    /// <summary>
    /// Returns the names of the items in the supplied collection that correspond to O-Space types.
    /// </summary>
    public IEnumerable<string> GetAllGlobalItems(EdmItemCollection itemCollection)
    {
        return itemCollection.GetItems<GlobalItem>().Where(i => i is EntityType || i is ComplexType || i is EnumType || i is EntityContainer).Select(g => GetGlobalItemName(g));
    }
    /// <summary>
    /// Returns the name of the supplied GlobalItem.
    /// </summary>
    public string GetGlobalItemName(GlobalItem item)
    {
        if (item is EdmType)
        {
            return ((EdmType)item).Name;
        }
        else
        {
            return ((EntityContainer)item).Name;
        }
    }
    /// <summary>
    /// Retuns as full of a name as possible, if a namespace is provided
    /// the namespace and name are combined with a period, otherwise just
    /// the name is returned.
    /// </summary>
    public string CreateFullName(string namespaceName, string name)
    {
        if (String.IsNullOrEmpty(namespaceName))
        {
            return name;
        }
        return namespaceName + "." + name;
    }
    /// <summary>
    /// Retuns a literal representing the supplied value.
    /// </summary>
    public string CreateLiteral(object value)
    {
        if (value == null)
        {
            return string.Empty;
        }
        Type type = value.GetType();
        if (type.IsEnum)
        {
            return type.FullName + "." + value.ToString();
        }
        if (type == typeof(Guid))
        {
            return string.Format(CultureInfo.InvariantCulture, "new Guid(\"{0}\")",
                                 ((Guid)value).ToString("D", CultureInfo.InvariantCulture));
        }
        else if (type == typeof(DateTime))
        {
            return string.Format(CultureInfo.InvariantCulture, "new DateTime({0}, DateTimeKind.Unspecified)",
                                 ((DateTime)value).Ticks);
        }
        else if (type == typeof(byte[]))
        {
            var arrayInit = string.Join(", ", ((byte[])value).Select(b => b.ToString(CultureInfo.InvariantCulture)).ToArray());
            return string.Format(CultureInfo.InvariantCulture, "new Byte[] {{{0}}}", arrayInit);
        }
        else if (type == typeof(DateTimeOffset))
        {
            var dto = (DateTimeOffset)value;
            return string.Format(CultureInfo.InvariantCulture, "new DateTimeOffset({0}, new TimeSpan({1}))",
                                 dto.Ticks, dto.Offset.Ticks);
        }
        else if (type == typeof(TimeSpan))
        {
            return string.Format(CultureInfo.InvariantCulture, "new TimeSpan({0})",
                                 ((TimeSpan)value).Ticks);
        }
        var expression = new CodePrimitiveExpression(value);
        var writer = new StringWriter();
        CSharpCodeProvider code = new CSharpCodeProvider();
        code.GenerateCodeFromExpression(expression, writer, new CodeGeneratorOptions());
        return writer.ToString();
    }
    /// <summary>
    /// Returns a resource string from the System.Data.Entity.Design assembly.
    /// </summary>
    public static string GetResourceString(string resourceName, CultureInfo culture = null)
    {
        if(_resourceManager == null)
        {
            _resourceManager = new System.Resources.ResourceManager("System.Data.Entity.Design",
                typeof(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly);
        }
        return _resourceManager.GetString(resourceName, culture);
    }
    static System.Resources.ResourceManager _resourceManager;
    private const string ExternalTypeNameAttributeName = @"http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName";
    /// <summary>
    /// Gets the entity, complex, or enum types for which code should be generated from the given item collection.
    /// Any types for which an ExternalTypeName annotation has been applied in the conceptual model
    /// metadata (CSDL) are filtered out of the returned list.
    /// </summary>
    /// <typeparam name="T">The type of item to return.</typeparam>
    /// <param name="itemCollection">The item collection to look in.</param>
    /// <returns>The items to generate.</returns>
    public IEnumerable<T> GetItemsToGenerate<T>(ItemCollection itemCollection) where T: GlobalItem
    {
        return itemCollection.GetItems<T>().Where(i => !i.MetadataProperties.Any(p => p.Name == ExternalTypeNameAttributeName));
    }
    /// <summary>
    /// Returns the escaped type name to use for the given usage of a c-space type in o-space. This might be
    /// an external type name if the ExternalTypeName annotation has been specified in the
    /// conceptual model metadata (CSDL).
    /// </summary>
    /// <param name="typeUsage">The c-space type usage to get a name for.</param>
    /// <returns>The type name to use.</returns>
    public string GetTypeName(TypeUsage typeUsage)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace: null);
    }
    /// <summary>
    /// Returns the escaped type name to use for the given c-space type in o-space. This might be
    /// an external type name if the ExternalTypeName annotation has been specified in the
    /// conceptual model metadata (CSDL).
    /// </summary>
    /// <param name="edmType">The c-space type to get a name for.</param>
    /// <returns>The type name to use.</returns>
    public string GetTypeName(EdmType edmType)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: null);
    }
    /// <summary>
    /// Returns the escaped type name to use for the given usage of an c-space type in o-space. This might be
    /// an external type name if the ExternalTypeName annotation has been specified in the
    /// conceptual model metadata (CSDL).
    /// </summary>
    /// <param name="typeUsage">The c-space type usage to get a name for.</param>
    /// <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
    /// fully qualified name will be returned.</param>
    /// <returns>The type name to use.</returns>
    public string GetTypeName(TypeUsage typeUsage, string modelNamespace)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace);
    }
    /// <summary>
    /// Returns the escaped type name to use for the given c-space type in o-space. This might be
    /// an external type name if the ExternalTypeName annotation has been specified in the
    /// conceptual model metadata (CSDL).
    /// </summary>
    /// <param name="edmType">The c-space type to get a name for.</param>
    /// <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
    /// fully qualified name will be returned.</param>
    /// <returns>The type name to use.</returns>
    public string GetTypeName(EdmType edmType, string modelNamespace)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: modelNamespace);
    }
    /// <summary>
    /// Returns the escaped type name to use for the given c-space type in o-space. This might be
    /// an external type name if the ExternalTypeName annotation has been specified in the
    /// conceptual model metadata (CSDL).
    /// </summary>
    /// <param name="edmType">The c-space type to get a name for.</param>
    /// <param name="isNullable">Set this to true for nullable usage of this type.</param>
    /// <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
    /// fully qualified name will be returned.</param>
    /// <returns>The type name to use.</returns>
    private string GetTypeName(EdmType edmType, bool? isNullable, string modelNamespace)
    {
        if (edmType == null)
        {
            return null;
        }
        var collectionType = edmType as CollectionType;
        if (collectionType != null)
        {
            return String.Format(CultureInfo.InvariantCulture, "ICollection<{0}>", GetTypeName(collectionType.TypeUsage, modelNamespace));
        }
        // Try to get an external type name, and if that is null, then try to get escape the name from metadata,
        // possibly namespace-qualifying it.
        var typeName = Escape(edmType.MetadataProperties
                              .Where(p => p.Name == ExternalTypeNameAttributeName)
                              .Select(p => (string)p.Value)
                              .FirstOrDefault())
            ??
            (modelNamespace != null && edmType.NamespaceName != modelNamespace ?
             CreateFullName(EscapeNamespace(edmType.NamespaceName), Escape(edmType)) :
             Escape(edmType));
        if (edmType is StructuralType)
        {
            return typeName;
        }
        if (edmType is SimpleType)
        {
            var clrType = _ef.UnderlyingClrType(edmType);
            if (!(edmType is EnumType))
            {
                typeName = Escape(clrType);
            }
            return clrType.IsValueType && isNullable == true ?
                String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName) :
                typeName;
        }
        throw new ArgumentException("typeUsage");
    }
/// <summary>
/// Responsible for making the Entity Framework Metadata more
/// accessible for code generation.
/// </summary>
public class MetadataTools
    private readonly DynamicTextTransformation _textTransformation;
    /// <summary>
    /// Initializes an MetadataTools Instance  with the
    /// TextTransformation (T4 generated class) that is currently running
    /// </summary>
    public MetadataTools(object textTransformation)
    {
        if (textTransformation == null)
        {
            throw new ArgumentNullException("textTransformation");
        }
        _textTransformation = DynamicTextTransformation.Create(textTransformation);
    }
    /// <summary>
    /// This method returns the underlying CLR type of the o-space type corresponding to the supplied <paramref name="typeUsage"/>
    /// Note that for an enum type this means that the type backing the enum will be returned, not the enum type itself.
    /// </summary>
    public Type ClrType(TypeUsage typeUsage)
    {
        return UnderlyingClrType(typeUsage.EdmType);
    }
    /// <summary>
    /// This method returns the underlying CLR type given the c-space type.
    /// Note that for an enum type this means that the type backing the enum will be returned, not the enum type itself.
    /// </summary>
    public Type UnderlyingClrType(EdmType edmType)
    {
        var primitiveType = edmType as PrimitiveType;
        if (primitiveType != null)
        {
            return primitiveType.ClrEquivalentType;
        }
        var enumType = edmType as EnumType;
        if (enumType != null)
        {
            return enumType.UnderlyingType.ClrEquivalentType;
        }
        return typeof(object);
    }
    /// <summary>
    /// True if the EdmProperty is a key of its DeclaringType, False otherwise.
    /// </summary>
    public bool IsKey(EdmProperty property)
    {
        if (property != null && property.DeclaringType.BuiltInTypeKind == BuiltInTypeKind.EntityType)
        {
            return ((EntityType)property.DeclaringType).KeyMembers.Contains(property);
        }
        return false;
    }
    /// <summary>
    /// True if the EdmProperty TypeUsage is Nullable, False otherwise.
    /// </summary>
    public bool IsNullable(EdmProperty property)
    {
        return property != null && IsNullable(property.TypeUsage);
    }
    /// <summary>
    /// True if the TypeUsage is Nullable, False otherwise.
    /// </summary>
    public bool IsNullable(TypeUsage typeUsage)
    {
        Facet nullableFacet = null;
        if (typeUsage != null &&
            typeUsage.Facets.TryGetValue("Nullable", true, out nullableFacet))
        {
            return (bool)nullableFacet.Value;
        }
        return false;
    }
    /// <summary>
    /// If the passed in TypeUsage represents a collection this method returns final element
    /// type of the collection, otherwise it returns the value passed in.
    /// </summary>
    public TypeUsage GetElementType(TypeUsage typeUsage)
    {
        if (typeUsage == null)
        {
            return null;
        }
        if (typeUsage.EdmType is CollectionType)
        {
            return GetElementType(((CollectionType)typeUsage.EdmType).TypeUsage);
        }
        else
        {
            return typeUsage;
        }
    }
    /// <summary>
    /// Returns the NavigationProperty that is the other end of the same association set if it is
    /// available, otherwise it returns null.
    /// </summary>
    public NavigationProperty Inverse(NavigationProperty navProperty)
    {
        if(navProperty == null)
        {
            return null;
        }
        EntityType toEntity = navProperty.ToEndMember.GetEntityType();
        return toEntity.NavigationProperties
            .SingleOrDefault(n => Object.ReferenceEquals(n.RelationshipType, navProperty.RelationshipType) && !Object.ReferenceEquals(n, navProperty));
    }
    /// <summary>
    /// Given a property on the dependent end of a referential constraint, returns the corresponding property on the principal end.
    /// Requires: The association has a referential constraint, and the specified dependentProperty is one of the properties on the dependent end.
    /// </summary>
    public EdmProperty GetCorrespondingPrincipalProperty(NavigationProperty navProperty, EdmProperty dependentProperty)
    {
        if (navProperty == null)
        {
            throw new ArgumentNullException("navProperty");
        }
        if (dependentProperty == null)
        {
            throw new ArgumentNullException("dependentProperty");
        }
        ReadOnlyMetadataCollection<EdmProperty> fromProperties = GetPrincipalProperties(navProperty);
        ReadOnlyMetadataCollection<EdmProperty> toProperties = GetDependentProperties(navProperty);
        return fromProperties[toProperties.IndexOf(dependentProperty)];
    }
    /// <summary>
    /// Given a property on the principal end of a referential constraint, returns the corresponding property on the dependent end.
    /// Requires: The association has a referential constraint, and the specified principalProperty is one of the properties on the principal end.
    /// </summary>
    public EdmProperty GetCorrespondingDependentProperty(NavigationProperty navProperty, EdmProperty principalProperty)
    {
        if (navProperty == null)
        {
            throw new ArgumentNullException("navProperty");
        }
        if (principalProperty == null)
        {
            throw new ArgumentNullException("principalProperty");
        }
        ReadOnlyMetadataCollection<EdmProperty> fromProperties = GetPrincipalProperties(navProperty);
        ReadOnlyMetadataCollection<EdmProperty> toProperties = GetDependentProperties(navProperty);
        return toProperties[fromProperties.IndexOf(principalProperty)];
    }
    /// <summary>
    /// Gets the collection of properties that are on the principal end of a referential constraint for the specified navigation property.
    /// Requires: The association has a referential constraint.
    /// </summary>
    public ReadOnlyMetadataCollection<EdmProperty> GetPrincipalProperties(NavigationProperty navProperty)
    {
        if (navProperty == null)
        {
            throw new ArgumentNullException("navProperty");
        }
        return ((AssociationType)navProperty.RelationshipType).ReferentialConstraints[0].FromProperties;
    }
    /// <summary>
    /// Gets the collection of properties that are on the dependent end of a referential constraint for the specified navigation property.
    /// Requires: The association has a referential constraint.
    /// </summary>
    public ReadOnlyMetadataCollection<EdmProperty> GetDependentProperties(NavigationProperty navProperty)
    {
        if (navProperty == null)
        {
            throw new ArgumentNullException("navProperty");
        }
        return ((AssociationType)navProperty.RelationshipType).ReferentialConstraints[0].ToProperties;
    }
    /// <summary>
    /// True if this entity type requires the HandleCascadeDelete method defined and the method has
    /// not been defined on any base type
    /// </summary>
    public bool NeedsHandleCascadeDeleteMethod(ItemCollection itemCollection, EntityType entity)
    {
        bool needsMethod = ContainsCascadeDeleteAssociation(itemCollection, entity);
        // Check to make sure no base types have already declared this method
        EntityType baseType = entity.BaseType as EntityType;
        while(needsMethod && baseType != null)
        {
            needsMethod = !ContainsCascadeDeleteAssociation(itemCollection, baseType);
            baseType = baseType.BaseType as EntityType;
        }
        return needsMethod;
    }
    /// <summary>
    /// True if this entity type participates in any relationships where the other end has an OnDelete
    /// cascade delete defined, or if it is the dependent in any identifying relationships
    /// </summary>
    private bool ContainsCascadeDeleteAssociation(ItemCollection itemCollection, EntityType entity)
    {
        return itemCollection.GetItems<AssociationType>().Where(a =>
                ((RefType)a.AssociationEndMembers[0].TypeUsage.EdmType).ElementType == entity && IsCascadeDeletePrincipal(a.AssociationEndMembers[1]) ||
                ((RefType)a.AssociationEndMembers[1].TypeUsage.EdmType).ElementType == entity && IsCascadeDeletePrincipal(a.AssociationEndMembers[0])).Any();
    }
    /// <summary>
    /// True if the source end of the specified navigation property is the principal in an identifying relationship.
    /// or if the source end has cascade delete defined.
    /// </summary>
    public bool IsCascadeDeletePrincipal(NavigationProperty navProperty)
    {
        if (navProperty == null)
        {
            throw new ArgumentNullException("navProperty");
        }
        return IsCascadeDeletePrincipal((AssociationEndMember)navProperty.FromEndMember);
    }
    /// <summary>
    /// True if the specified association end is the principal in an identifying relationship.
    /// or if the association end has cascade delete defined.
    /// </summary>
    public bool IsCascadeDeletePrincipal(AssociationEndMember associationEnd)
    {
        if (associationEnd == null)
        {
            throw new ArgumentNullException("associationEnd");
        }
        return associationEnd.DeleteBehavior == OperationAction.Cascade || IsPrincipalEndOfIdentifyingRelationship(associationEnd);
    }
    /// <summary>
    /// True if the specified association end is the principal end in an identifying relationship.
    /// In order to be an identifying relationship, the association must have a referential constraint where all of the dependent properties are part of the dependent type's primary key.
    /// </summary>
    public bool IsPrincipalEndOfIdentifyingRelationship(AssociationEndMember associationEnd)
    {
        if (associationEnd == null)
        {
            throw new ArgumentNullException("associationEnd");
        }
        ReferentialConstraint refConstraint = ((AssociationType)associationEnd.DeclaringType).ReferentialConstraints.Where(rc => rc.FromRole == associationEnd).SingleOrDefault();
        if (refConstraint != null)
        {
            EntityType entity = refConstraint.ToRole.GetEntityType();
            return !refConstraint.ToProperties.Where(tp => !entity.KeyMembers.Contains(tp)).Any();
        }
        return false;
    }
    /// <summary>
    /// True if the specified association type is an identifying relationship.
    /// In order to be an identifying relationship, the association must have a referential constraint where all of the dependent properties are part of the dependent type's primary key.
    /// </summary>
    public bool IsIdentifyingRelationship(AssociationType association)
    {
        if (association == null)
        {
            throw new ArgumentNullException("association");
        }
        return IsPrincipalEndOfIdentifyingRelationship(association.AssociationEndMembers[0]) || IsPrincipalEndOfIdentifyingRelationship(association.AssociationEndMembers[1]);
    }
    /// <summary>
    /// requires: firstType is not null
    /// effects: if secondType is among the base types of the firstType, return true,
    /// otherwise returns false.
    /// when firstType is same as the secondType, return false.
    /// </summary>
    public bool IsSubtypeOf(EdmType firstType, EdmType secondType)
    {
        if (secondType == null)
        {
            return false;
        }
        // walk up firstType hierarchy list
        for (EdmType t = firstType.BaseType; t != null; t = t.BaseType)
        {
            if (t == secondType)
                return true;
        }
        return false;
    }
    /// <summary>
    /// Returns the subtype of the EntityType in the current itemCollection
    /// </summary>
    public IEnumerable<EntityType> GetSubtypesOf(EntityType type, ItemCollection itemCollection, bool includeAbstractTypes)
    {
        if (type != null)
        {
            IEnumerable<EntityType> typesInCollection = itemCollection.GetItems<EntityType>();
            foreach (EntityType typeInCollection in typesInCollection)
            {
                if (type.Equals(typeInCollection) == false && this.IsSubtypeOf(typeInCollection, type))
                {
                    if ( includeAbstractTypes || !typeInCollection.Abstract)
                    {
                        yield return typeInCollection;
                    }
               }
            }
        }
    }
    public static bool TryGetStringMetadataPropertySetting(MetadataItem item, string propertyName, out string value)
    {
        value = null;
        MetadataProperty property = item.MetadataProperties.FirstOrDefault(p => p.Name == propertyName);
        if (property != null)
        {
            value = (string)property.Value;
        }
        return value != null;
    }
/// <summary>
/// Responsible for loading an EdmItemCollection from a .edmx file or .csdl files
/// </summary>
public class MetadataLoader
    private readonly DynamicTextTransformation _textTransformation;
    /// <summary>
    /// Initializes an MetadataLoader Instance  with the
    /// TextTransformation (T4 generated class) that is currently running
    /// </summary>
    public MetadataLoader(object textTransformation)
    {
        if (textTransformation == null)
        {
            throw new ArgumentNullException("textTransformation");
        }
        _textTransformation = DynamicTextTransformation.Create(textTransformation);
    }
    /// <summary>
    /// Load the metadata for Edm, Store, and Mapping collections and register them
    /// with a new MetadataWorkspace, returns false if any of the parts can't be
    /// created, some of the ItemCollections may be registered and usable even if false is
    /// returned
    /// </summary>
    public bool TryLoadAllMetadata(string inputFile, out MetadataWorkspace metadataWorkspace)
    {
        metadataWorkspace = new MetadataWorkspace();
        EdmItemCollection edmItemCollection = CreateEdmItemCollection(inputFile);
        metadataWorkspace.RegisterItemCollection(edmItemCollection);
        StoreItemCollection storeItemCollection = null;
        if (TryCreateStoreItemCollection(inputFile, out storeItemCollection))
        {
            StorageMappingItemCollection storageMappingItemCollection = null;
            if (TryCreateStorageMappingItemCollection(inputFile, edmItemCollection, storeItemCollection, out storageMappingItemCollection))
            {
                metadataWorkspace.RegisterItemCollection(storeItemCollection);
                metadataWorkspace.RegisterItemCollection(storageMappingItemCollection);
                return true;
            }
        }
        return false;
    }
    /// <summary>
    /// Create an EdmItemCollection loaded with the metadata provided
    /// </summary>
    public EdmItemCollection CreateEdmItemCollection(string sourcePath, params string[] referenceSchemas)
    {
        EdmItemCollection edmItemCollection;
        if(TryCreateEdmItemCollection(sourcePath, referenceSchemas, out edmItemCollection))
        {
            return edmItemCollection;
        }
        return new EdmItemCollection();
    }
    /// <summary>
    /// Attempts to create a EdmItemCollection from the specified metadata file
    /// </summary>
    public bool TryCreateEdmItemCollection(string sourcePath, out EdmItemCollection edmItemCollection)
    {
        return TryCreateEdmItemCollection(sourcePath, null, out edmItemCollection);
    }
    /// <summary>
    /// Attempts to create a EdmItemCollection from the specified metadata file
    /// </summary>
    public bool TryCreateEdmItemCollection(string sourcePath, string[] referenceSchemas, out EdmItemCollection edmItemCollection)
    {
        edmItemCollection = null;
        if (!ValidateInputPath(sourcePath, _textTransformation))
        {
            return false;
        }
        if (referenceSchemas == null)
        {
            referenceSchemas = new string[0];
        }
        ItemCollection itemCollection = null;
        sourcePath = _textTransformation.Host.ResolvePath(sourcePath);
        EdmItemCollectionBuilder collectionBuilder = new EdmItemCollectionBuilder(_textTransformation, referenceSchemas.Select(s => _textTransformation.Host.ResolvePath(s)).Where(s => s != sourcePath));
        if (collectionBuilder.TryCreateItemCollection(sourcePath, out itemCollection))
        {
            edmItemCollection = (EdmItemCollection)itemCollection;
        }
        return edmItemCollection != null;
    }
    /// <summary>
    /// Attempts to create a StoreItemCollection from the specified metadata file
    /// </summary>
    public bool TryCreateStoreItemCollection(string sourcePath, out StoreItemCollection storeItemCollection)
    {
        storeItemCollection = null;
        if (!ValidateInputPath(sourcePath, _textTransformation))
        {
            return false;
        }
        ItemCollection itemCollection = null;
        StoreItemCollectionBuilder collectionBuilder = new StoreItemCollectionBuilder(_textTransformation);
        if (collectionBuilder.TryCreateItemCollection(_textTransformation.Host.ResolvePath(sourcePath), out itemCollection))
        {
            storeItemCollection = (StoreItemCollection)itemCollection;
        }
        return storeItemCollection != null;
    }
    /// <summary>
    /// Attempts to create a StorageMappingItemCollection from the specified metadata file, EdmItemCollection, and StoreItemCollection
    /// </summary>
    public bool TryCreateStorageMappingItemCollection(string sourcePath, EdmItemCollection edmItemCollection, StoreItemCollection storeItemCollection, out StorageMappingItemCollection storageMappingItemCollection)
    {
        storageMappingItemCollection = null;
        if (!ValidateInputPath(sourcePath, _textTransformation))
        {
            return false;
        }
        if (edmItemCollection == null)
        {
            throw new ArgumentNullException("edmItemCollection");
        }
        if (storeItemCollection == null)
        {
            throw new ArgumentNullException("storeItemCollection");
        }
        ItemCollection itemCollection = null;
        StorageMappingItemCollectionBuilder collectionBuilder = new StorageMappingItemCollectionBuilder(_textTransformation, edmItemCollection, storeItemCollection);
        if (collectionBuilder.TryCreateItemCollection(_textTransformation.Host.ResolvePath(sourcePath), out itemCollection))
        {
            storageMappingItemCollection = (StorageMappingItemCollection)itemCollection;
        }
        return storageMappingItemCollection != null;
    }
    /// <summary>
    /// Gets the Model Namespace from the provided schema file.
    /// </summary>
    public string GetModelNamespace(string sourcePath)
    {
        if (!ValidateInputPath(sourcePath, _textTransformation))
        {
            return String.Empty;
        }
        EdmItemCollectionBuilder builder = new EdmItemCollectionBuilder(_textTransformation);
        XElement model;
        if(builder.TryLoadRootElement(_textTransformation.Host.ResolvePath(sourcePath), out model))
        {
            XAttribute attribute = model.Attribute("Namespace");
            if (attribute != null)
            {
                return attribute.Value;
            }
        }
        return String.Empty;
    }
    /// <summary>
    /// Returns true if the specified file path is valid
    /// </summary>
    private static bool ValidateInputPath(string sourcePath, DynamicTextTransformation textTransformation)
    {
        if (String.IsNullOrEmpty(sourcePath))
        {
            throw new ArgumentException("sourcePath");
        }
        if(sourcePath == "$edmxInputFile$")
        {
            textTransformation.Errors.Add(new CompilerError(textTransformation.Host.TemplateFile ?? CodeGenerationTools.GetResourceString("Template_CurrentlyRunningTemplate"), -1, -1, string.Empty,
                CodeGenerationTools.GetResourceString("Template_ReplaceVsItemTemplateToken")));
            return false;
        }
        return true;
    }
    /// <summary>
    /// Base class for ItemCollectionBuilder classes that
    /// loads the specific types of metadata
    /// </summary>
    private abstract class ItemCollectionBuilder
    {
        private readonly DynamicTextTransformation _textTransformation;
        private readonly string _fileExtension;
        private readonly string _edmxSectionName;
        private readonly string  _rootElementName;
        /// <summary>
        /// FileExtension for individual (non-edmx) metadata file for this
        /// specific ItemCollection type
        /// </summary>
        public string FileExtension
        {
            get { return _fileExtension; }
        }
        /// <summary>
        /// The name of the XmlElement in the .edmx <Runtime> element
        /// to find this ItemCollection's metadata
        /// </summary>
        public string EdmxSectionName
        {
            get { return _edmxSectionName; }
        }
        /// <summary>
        /// The name of the root element of this ItemCollection's metadata
        /// </summary>
        public string RootElementName
        {
            get { return _rootElementName; }
        }
        /// <summary>
        /// Method to build the appropriate ItemCollection
        /// </summary>
        protected abstract ItemCollection CreateItemCollection(IEnumerable<XmlReader> readers, out IList<EdmSchemaError> errors);
        /// <summary>
        /// Ctor to setup the ItemCollectionBuilder members
        /// </summary>
        protected ItemCollectionBuilder(DynamicTextTransformation textTransformation, string fileExtension, string edmxSectionName, string rootElementName)
        {
            _textTransformation = textTransformation;
            _fileExtension = fileExtension;
            _edmxSectionName = edmxSectionName;
            _rootElementName = rootElementName;
        }
        /// <summary>
        /// Selects a namespace from the supplied constants.
        /// </summary>
        protected abstract string GetNamespace(SchemaConstants constants);
        /// <summary>
        /// Try to create an ItemCollection loaded with the metadata provided
        /// </summary>
        public bool TryCreateItemCollection(string sourcePath, out ItemCollection itemCollection)
        {
            itemCollection = null;
            if (!ValidateInputPath(sourcePath, _textTransformation))
            {
                return false;
            }
            XElement schemaElement = null;
            if (TryLoadRootElement(sourcePath, out schemaElement))
            {
                List<XmlReader> readers = new List<XmlReader>();
                try
                {
                    readers.Add(schemaElement.CreateReader());
                    IList<EdmSchemaError> errors = null;
                    ItemCollection tempItemCollection = CreateItemCollection(readers, out errors);
                    if (ProcessErrors(errors, sourcePath))
                    {
                        return false;
                    }
                    itemCollection = tempItemCollection;
                    return true;
                }
                finally
                {
                    foreach (XmlReader reader in readers)
                    {
                        ((IDisposable)reader).Dispose();
                    }
                }
            }
            return false;
        }
        /// <summary>
        /// Tries to load the root element from the metadata file provided
        /// </summary>
        public bool TryLoadRootElement(string sourcePath, out XElement schemaElement)
        {
            schemaElement = null;
            string extension = Path.GetExtension(sourcePath);
            if (extension.Equals(".edmx", StringComparison.InvariantCultureIgnoreCase))
            {
                return TryLoadRootElementFromEdmx(sourcePath, out schemaElement);
            }
            else if(extension.Equals(FileExtension, StringComparison.InvariantCultureIgnoreCase))
            {
                // load from single metadata file (.csdl, .ssdl, or .msl)
                schemaElement = XElement.Load(sourcePath, LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);
                return true;
            }
            return false;
        }
        /// <summary>
        /// Tries to load the root element from the provided edmxDocument
        /// </summary>
        private bool TryLoadRootElementFromEdmx(XElement edmxDocument, SchemaConstants schemaConstants, string sectionName, string rootElementName, out XElement rootElement)
        {
            rootElement = null;
            XNamespace edmxNs = schemaConstants.EdmxNamespace;
            XNamespace sectionNs = GetNamespace(schemaConstants);
            XElement runtime = edmxDocument.Element(edmxNs  + "Runtime");
            if (runtime == null)
            {
                return false;
            }
            XElement section = runtime.Element(edmxNs + sectionName);
            if (section == null)
            {
                return false;
            }
            string templateVersion;
            if (!TemplateMetadata.TryGetValue(MetadataConstants.TT_TEMPLATE_VERSION, out templateVersion))
            {
                templateVersion = MetadataConstants.DEFAULT_TEMPLATE_VERSION;
            }
            if (schemaConstants.MinimumTemplateVersion > new Version(templateVersion))
            {
                _textTransformation.Errors.Add(new CompilerError(
                    _textTransformation.Host.TemplateFile ?? CodeGenerationTools.GetResourceString("Template_CurrentlyRunningTemplate"), -1, -1, string.Empty,
                        CodeGenerationTools.GetResourceString("Template_UnsupportedSchema"))
                {IsWarning = true});
            }
            rootElement = section.Element(sectionNs + rootElementName);
            return rootElement != null;
        }
        /// <summary>
        /// Tries to load the root element from the provided .edmx metadata file
        /// </summary>
        private bool TryLoadRootElementFromEdmx(string edmxPath, out XElement rootElement)
        {
            rootElement = null;
            XElement element = XElement.Load(edmxPath, LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);
            return TryLoadRootElementFromEdmx(element, MetadataConstants.V3_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, out rootElement)
                || TryLoadRootElementFromEdmx(element, MetadataConstants.V2_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, out rootElement)
                || TryLoadRootElementFromEdmx(element, MetadataConstants.V1_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, out rootElement);
        }
        /// <summary>
        /// Takes an Enumerable of EdmSchemaErrors, and adds them
        /// to the errors collection of the template class
        /// </summary>
        private bool ProcessErrors(IEnumerable<EdmSchemaError> errors, string sourceFilePath)
        {
            bool foundErrors = false;
            foreach (EdmSchemaError error in errors)
            {
                CompilerError newError = new CompilerError(error.SchemaLocation, error.Line, error.Column,
                                                 error.ErrorCode.ToString(CultureInfo.InvariantCulture),
                                                 error.Message);
                newError.IsWarning = error.Severity == EdmSchemaErrorSeverity.Warning;
                foundErrors |= error.Severity == EdmSchemaErrorSeverity.Error;
                if (error.SchemaLocation == null)
                {
                    newError.FileName = sourceFilePath;
                }
                _textTransformation.Errors.Add(newError);
            }
            return foundErrors;
        }
    }
    /// <summary>
    /// Builder class for creating a StorageMappingItemCollection
    /// </summary>
    private class StorageMappingItemCollectionBuilder : ItemCollectionBuilder
    {
        private readonly EdmItemCollection _edmItemCollection;
        private readonly StoreItemCollection _storeItemCollection;
        public StorageMappingItemCollectionBuilder(DynamicTextTransformation textTransformation, EdmItemCollection edmItemCollection, StoreItemCollection storeItemCollection)
            : base(textTransformation, MetadataConstants.MSL_EXTENSION, MetadataConstants.MSL_EDMX_SECTION_NAME, MetadataConstants.MSL_ROOT_ELEMENT_NAME)
        {
            _edmItemCollection = edmItemCollection;
            _storeItemCollection = storeItemCollection;
        }
        protected override ItemCollection CreateItemCollection(IEnumerable<XmlReader> readers, out IList<EdmSchemaError> errors)
        {
            return MetadataItemCollectionFactory.CreateStorageMappingItemCollection(_edmItemCollection, _storeItemCollection, readers, out errors);
        }
        /// <summary>
        /// Selects a namespace from the supplied constants.
        /// </summary>
        protected override string GetNamespace(SchemaConstants constants)
        {
            return constants.MslNamespace;
        }
    }
    /// <summary>
    /// Builder class for creating a StoreItemCollection
    /// </summary>
    private class StoreItemCollectionBuilder : ItemCollectionBuilder
    {
        public StoreItemCollectionBuilder(DynamicTextTransformation textTransformation)
            : base(textTransformation, MetadataConstants.SSDL_EXTENSION, MetadataConstants.SSDL_EDMX_SECTION_NAME, MetadataConstants.SSDL_ROOT_ELEMENT_NAME)
        {
        }
        protected override ItemCollection CreateItemCollection(IEnumerable<XmlReader> readers, out IList<EdmSchemaError> errors)
        {
            return MetadataItemCollectionFactory.CreateStoreItemCollection(readers, out errors);
        }
        /// <summary>
        /// Selects a namespace from the supplied constants.
        /// </summary>
        protected override string GetNamespace(SchemaConstants constants)
        {
            return constants.SsdlNamespace;
        }
    }
    /// <summary>
    /// Builder class for creating a EdmItemCollection
    /// </summary>
    private class EdmItemCollectionBuilder : ItemCollectionBuilder
    {
        private List<string> _referenceSchemas = new List<string>();
        public EdmItemCollectionBuilder(DynamicTextTransformation textTransformation)
            : base(textTransformation, MetadataConstants.CSDL_EXTENSION, MetadataConstants.CSDL_EDMX_SECTION_NAME, MetadataConstants.CSDL_ROOT_ELEMENT_NAME)
        {
        }
        public EdmItemCollectionBuilder(DynamicTextTransformation textTransformation, IEnumerable<string> referenceSchemas)
            : this(textTransformation)
        {
            _referenceSchemas.AddRange(referenceSchemas);
        }
        protected override ItemCollection CreateItemCollection(IEnumerable<XmlReader> readers, out IList<EdmSchemaError> errors)
        {
            List<XmlReader> ownedReaders = new List<XmlReader>();
            List<XmlReader> allReaders = new List<XmlReader>();
            try
            {
                allReaders.AddRange(readers);
                foreach (string path in _referenceSchemas.Distinct())
                {
                    XElement reference;
                    if(TryLoadRootElement(path, out reference))
                    {
                        XmlReader reader = reference.CreateReader();
                        allReaders.Add(reader);
                        ownedReaders.Add(reader);
                    }
                }
                return MetadataItemCollectionFactory.CreateEdmItemCollection(allReaders, out errors);
            }
            finally
            {
                foreach (XmlReader reader in ownedReaders)
                {
                    ((IDisposable)reader).Dispose();
                }
            }
        }
        /// <summary>
        /// Selects a namespace from the supplied constants.
        /// </summary>
        protected override string GetNamespace(SchemaConstants constants)
        {
            return constants.CsdlNamespace;
        }
    }
/// <summary>
/// Responsible for encapsulating the retrieval and translation of the CodeGeneration
/// annotations in the EntityFramework Metadata to a form that is useful in code generation.
/// </summary>
public static class Accessibility
    private const string GETTER_ACCESS = "http://schemas.microsoft.com/ado/2006/04/codegeneration:GetterAccess";
    private const string SETTER_ACCESS = "http://schemas.microsoft.com/ado/2006/04/codegeneration:SetterAccess";
    private const string TYPE_ACCESS = "http://schemas.microsoft.com/ado/2006/04/codegeneration:TypeAccess";
    private const string METHOD_ACCESS = "http://schemas.microsoft.com/ado/2006/04/codegeneration:MethodAccess";
    private const string ACCESS_PROTECTED = "Protected";
    private const string ACCESS_INTERNAL = "Internal";
    private const string ACCESS_PRIVATE = "Private";
    private static readonly Dictionary<string, int> AccessibilityRankIdLookup = new Dictionary<string, int>
        {
            { "private", 1},
            { "internal", 2},
            { "protected", 3},
            { "public", 4},
        };
    /// <summary>
    /// Gets the accessibility that should be applied to a type being generated from the provided GlobalItem.
    ///
    /// defaults to public if no annotation is found.
    /// </summary>
    public static string ForType(GlobalItem item)
    {
        if (item == null)
        {
            return null;
        }
        return GetAccessibility(item, TYPE_ACCESS);
    }
    /// <summary>
    /// Gets the accessibility that should be applied at the property level for a property being
    /// generated from the provided EdmMember.
    ///
    /// defaults to public if no annotation is found.
    /// </summary>
    public static string ForProperty(EdmMember member)
    {
        if (member == null)
        {
            return null;
        }
        string getterAccess, setterAccess, propertyAccess;
        CalculatePropertyAccessibility(member, out propertyAccess, out getterAccess, out setterAccess);
        return propertyAccess;
    }
    /// <summary>
    /// Gets the accessibility that should be applied at the property level for a Read-Only property being
    /// generated from the provided EdmMember.
    ///
    /// defaults to public if no annotation is found.
    /// </summary>
    public static string ForReadOnlyProperty(EdmMember member)
    {
        if (member == null)
        {
            return null;
        }
        return GetAccessibility(member, GETTER_ACCESS);
    }
    /// <summary>
    /// Gets the accessibility that should be applied at the property level for a property being
    /// generated from the provided EntitySet.
    ///
    /// defaults to public if no annotation is found.
    /// </summary>
    public static string ForReadOnlyProperty(EntitySet set)
    {
        if (set == null)
        {
            return null;
        }
        return GetAccessibility(set, GETTER_ACCESS);
    }
    /// <summary>
    /// Gets the accessibility that should be applied at the property level for a Write-Only property being
    /// generated from the provided EdmMember.
    ///
    /// defaults to public if no annotation is found.
    /// </summary>
    public static string ForWriteOnlyProperty(EdmMember member)
    {
        if (member == null)
        {
            return null;
        }
        return GetAccessibility(member, SETTER_ACCESS);
    }
    /// <summary>
    /// Gets the accessibility that should be applied at the get level for a property being
    /// generated from the provided EdmMember.
    ///
    /// defaults to empty if no annotation is found or the accessibility is the same as the property level.
    /// </summary>
    public static string ForGetter(EdmMember member)
    {
        if (member == null)
        {
            return null;
        }
        string getterAccess, setterAccess, propertyAccess;
        CalculatePropertyAccessibility(member, out propertyAccess, out getterAccess, out setterAccess);
        return getterAccess;
    }
    /// <summary>
    /// Gets the accessibility that should be applied at the set level for a property being
    /// generated from the provided EdmMember.
    ///
    /// defaults to empty if no annotation is found or the accessibility is the same as the property level.
    /// </summary>
    public static string ForSetter(EdmMember member)
    {
        if (member == null)
        {
            return null;
        }
        string getterAccess, setterAccess, propertyAccess;
        CalculatePropertyAccessibility(member, out propertyAccess, out getterAccess, out setterAccess);
        return setterAccess;
    }
    /// <summary>
    /// Gets the accessibility that should be applied to a method being generated from the provided EdmFunction.
    ///
    /// defaults to public if no annotation is found.
    /// </summary>
    public static string ForMethod(EdmFunction function)
    {
        if (function == null)
        {
            return null;
        }
        return GetAccessibility(function, METHOD_ACCESS);
    }
    private static void CalculatePropertyAccessibility(MetadataItem item,
        out string propertyAccessibility,
        out string getterAccessibility,
        out string setterAccessibility)
    {
        getterAccessibility = GetAccessibility(item, GETTER_ACCESS);
        int getterRank = AccessibilityRankIdLookup[getterAccessibility];
        setterAccessibility = GetAccessibility(item, SETTER_ACCESS);
        int setterRank = AccessibilityRankIdLookup[setterAccessibility];
        int propertyRank = Math.Max(getterRank, setterRank);
        if (setterRank == propertyRank)
        {
            setterAccessibility = String.Empty;
        }
        if (getterRank == propertyRank)
        {
            getterAccessibility = String.Empty;
        }
        propertyAccessibility = AccessibilityRankIdLookup.Where(v => v.Value == propertyRank).Select(v => v.Key).Single();
    }
    private static string GetAccessibility(MetadataItem item, string name)
    {
        string accessibility;
        if (MetadataTools.TryGetStringMetadataPropertySetting(item, name, out accessibility))
        {
            return TranslateUserAccessibilityToCSharpAccessibility(accessibility);
        }
        return "public";
    }
    private static string TranslateUserAccessibilityToCSharpAccessibility(string userAccessibility)
    {
        if (userAccessibility == ACCESS_PROTECTED)
        {
            return "protected";
        }
        else if (userAccessibility == ACCESS_INTERNAL)
        {
            return "internal";
        }
        else if (userAccessibility == ACCESS_PRIVATE)
        {
            return "private";
        }
        else
        {
            // default to public
            return "public";
        }
    }
/// <summary>
/// Responsible for creating source code regions in code when the loop inside
/// actually produces something.
/// </summary>
public class CodeRegion
    private const int STANDARD_INDENT_LENGTH = 4;
    private readonly DynamicTextTransformation _textTransformation;
    private int _beforeRegionLength;
    private int _emptyRegionLength;
    private int _regionIndentLevel = -1;
    /// <summary>
    /// Initializes an CodeRegion instance with the
    /// TextTransformation (T4 generated class) that is currently running
    /// </summary>
    public CodeRegion(object textTransformation)
    {
        if (textTransformation == null)
        {
            throw new ArgumentNullException("textTransformation");
        }
        _textTransformation = DynamicTextTransformation.Create(textTransformation);
    }
    /// <summary>
    /// Initializes an CodeRegion instance with the
    /// TextTransformation (T4 generated class) that is currently running,
    /// and the indent level to start the first region at.
    /// </summary>
    public CodeRegion(object textTransformation, int firstIndentLevel)
        : this(textTransformation)
    {
        if (firstIndentLevel < 0)
        {
            throw new ArgumentException("firstIndentLevel");
        }
        _regionIndentLevel = firstIndentLevel - 1;
    }
    /// <summary>
    /// Starts the begining of a region
    /// </summary>
    public void Begin(string regionName)
    {
        if (regionName == null)
        {
            throw new ArgumentNullException("regionName");
        }
        Begin(regionName, 1);
    }
    /// <summary>
    /// Start the begining of a region, indented
    /// the numbers of levels specified
    /// </summary>
    public void Begin(string regionName, int levelsToIncreaseIndent)
    {
        if (regionName == null)
        {
            throw new ArgumentNullException("regionName");
        }
        _beforeRegionLength = _textTransformation.GenerationEnvironment.Length;
        _regionIndentLevel += levelsToIncreaseIndent;
        _textTransformation.Write(GetIndent(_regionIndentLevel));
        _textTransformation.WriteLine("#region " + regionName);
        _emptyRegionLength = _textTransformation.GenerationEnvironment.Length;
    }
    /// <summary>
    /// Ends a region, or totaly removes it if nothing
    /// was generted since the begining of the region.
    /// </summary>
    public void End()
    {
        End(1);
    }
    /// <summary>
    /// Ends a region, or totaly removes it if nothing
    /// was generted since the begining of the region, also outdents
    /// the number of levels specified.
    /// </summary>
    public void End(int levelsToDecrease)
    {
        int indentLevel = _regionIndentLevel;
        _regionIndentLevel -= levelsToDecrease;
        if (_emptyRegionLength == _textTransformation.GenerationEnvironment.Length)
            _textTransformation.GenerationEnvironment.Length = _beforeRegionLength;
        else
        {
            _textTransformation.WriteLine(String.Empty);
            _textTransformation.Write(GetIndent(indentLevel));
            _textTransformation.WriteLine("#endregion");
            _textTransformation.WriteLine(String.Empty);
        }
    }
    /// <summary>
    /// Gets the current indent level that the next end region statement will be written
    /// at
    /// </summary>
    public int CurrentIndentLevel { get { return _regionIndentLevel; } }
    /// <summary>
    /// Get a string of spaces equivelent to the number of indents
    /// desired.
    /// </summary>
    public static string GetIndent(int indentLevel)
    {
        if (indentLevel < 0)
        {
            throw new ArgumentException("indentLevel");
        }
        return String.Empty.PadLeft(indentLevel * STANDARD_INDENT_LENGTH);
    }
/// <summary>
/// Responsible for collecting together the actual method parameters
/// and the parameters that need to be sent to the Execute method.
/// </summary>
public class FunctionImportParameter
    public FunctionParameter Source { get; set; }
    public string RawFunctionParameterName { get; set; }
    public string FunctionParameterName { get; set; }
    public string FunctionParameterType { get; set; }
    public string LocalVariableName { get; set; }
    public string RawClrTypeName { get; set; }
    public string ExecuteParameterName { get; set; }
    public string EsqlParameterName { get; set; }
    public bool NeedsLocalVariable { get; set; }
    public bool IsNullableOfT { get; set; }
    /// <summary>
    /// Creates a set of FunctionImportParameter objects from the parameters passed in.
    /// </summary>
    public static IEnumerable<FunctionImportParameter> Create(IEnumerable<FunctionParameter> parameters, CodeGenerationTools code, MetadataTools ef)
    {
        if (parameters == null)
        {
            throw new ArgumentNullException("parameters");
        }
        if (code == null)
        {
            throw new ArgumentNullException("code");
        }
        if (ef == null)
        {
            throw new ArgumentNullException("ef");
        }
        UniqueIdentifierService unique = new UniqueIdentifierService();
        List<FunctionImportParameter> importParameters = new List<FunctionImportParameter>();
        foreach (FunctionParameter parameter in parameters)
        {
            FunctionImportParameter importParameter = new FunctionImportParameter();
            importParameter.Source = parameter;
            importParameter.RawFunctionParameterName = unique.AdjustIdentifier(code.CamelCase(parameter.Name));
            importParameter.FunctionParameterName = code.Escape(importParameter.RawFunctionParameterName);
            if (parameter.Mode == ParameterMode.In)
            {
                TypeUsage typeUsage = parameter.TypeUsage;
                importParameter.NeedsLocalVariable = true;
                importParameter.FunctionParameterType = code.GetTypeName(typeUsage);
                importParameter.EsqlParameterName = parameter.Name;
                Type clrType = ef.UnderlyingClrType(parameter.TypeUsage.EdmType);
                importParameter.RawClrTypeName = typeUsage.EdmType is EnumType ? code.GetTypeName(typeUsage.EdmType) : code.Escape(clrType);
                importParameter.IsNullableOfT = clrType.IsValueType;
            }
            else
            {
                importParameter.NeedsLocalVariable = false;
                importParameter.FunctionParameterType = "ObjectParameter";
                importParameter.ExecuteParameterName = importParameter.FunctionParameterName;
            }
            importParameters.Add(importParameter);
        }
        // we save the local parameter uniquification for a second pass to make the visible parameters
        // as pretty and sensible as possible
        for (int i = 0; i < importParameters.Count; i++)
        {
            FunctionImportParameter importParameter = importParameters[i];
            if (importParameter.NeedsLocalVariable)
            {
                importParameter.LocalVariableName = unique.AdjustIdentifier(importParameter.RawFunctionParameterName + "Parameter");
                importParameter.ExecuteParameterName = importParameter.LocalVariableName;
            }
        }
        return importParameters;
    }
    //
    // Class to create unique variables within the same scope
    //
    private sealed class UniqueIdentifierService
    {
        private readonly HashSet<string> _knownIdentifiers;
        public UniqueIdentifierService()
        {
            _knownIdentifiers = new HashSet<string>(StringComparer.Ordinal);
        }
        /// <summary>
        /// Given an identifier, makes it unique within the scope by adding
        /// a suffix (1, 2, 3, ...), and returns the adjusted identifier.
        /// </summary>
        public string AdjustIdentifier(string identifier)
        {
            // find a unique name by adding suffix as necessary
            int numberOfConflicts = 0;
            string adjustedIdentifier = identifier;
            while (!_knownIdentifiers.Add(adjustedIdentifier))
            {
                ++numberOfConflicts;
                adjustedIdentifier = identifier + numberOfConflicts.ToString(CultureInfo.InvariantCulture);
            }
            return adjustedIdentifier;
        }
    }
/// <summary>
/// Responsible for marking the various sections of the generation,
/// so they can be split up into separate files
/// </summary>
public class EntityFrameworkTemplateFileManager
    /// <summary>
    /// Creates the VsEntityFrameworkTemplateFileManager if VS is detected, otherwise
    /// creates the file system version.
    /// </summary>
    public static EntityFrameworkTemplateFileManager Create(object textTransformation)
    {
        DynamicTextTransformation transformation = DynamicTextTransformation.Create(textTransformation);
        IDynamicHost host = transformation.Host;
#if !PREPROCESSED_TEMPLATE
        var hostServiceProvider = host.AsIServiceProvider();
        if (hostServiceProvider != null)
        {
            EnvDTE.DTE dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
            if (dte != null)
            {
                return new VsEntityFrameworkTemplateFileManager(transformation);
            }
        }
#endif
        return new EntityFrameworkTemplateFileManager(transformation);
    }
    private sealed class Block
    {
        public String Name;
        public int Start, Length;
    }
    private readonly List<Block> files = new List<Block>();
    private readonly Block footer = new Block();
    private readonly Block header = new Block();
    private readonly DynamicTextTransformation _textTransformation;
    // reference to the GenerationEnvironment StringBuilder on the
    // TextTransformation object
    private readonly StringBuilder _generationEnvironment;
    private Block currentBlock;
    /// <summary>
    /// Initializes an EntityFrameworkTemplateFileManager Instance  with the
    /// TextTransformation (T4 generated class) that is currently running
    /// </summary>
    private EntityFrameworkTemplateFileManager(object textTransformation)
    {
        if (textTransformation == null)
        {
            throw new ArgumentNullException("textTransformation");
        }
        _textTransformation = DynamicTextTransformation.Create(textTransformation);
        _generationEnvironment = _textTransformation.GenerationEnvironment;
    }
    /// <summary>
    /// Marks the end of the last file if there was one, and starts a new
    /// and marks this point in generation as a new file.
    /// </summary>
    public void StartNewFile(string name)
    {
        if (name == null)
        {
            throw new ArgumentNullException("name");
        }
        CurrentBlock = new Block { Name = name };
    }
    public void StartFooter()
    {
        CurrentBlock = footer;
    }
    public void StartHeader()
    {
        CurrentBlock = header;
    }
    public void EndBlock()
    {
        if (CurrentBlock == null)
        {
            return;
        }
        CurrentBlock.Length = _generationEnvironment.Length - CurrentBlock.Start;
        if (CurrentBlock != header && CurrentBlock != footer)
        {
            files.Add(CurrentBlock);
        }
        currentBlock = null;
    }
    /// <summary>
    /// Produce the template output files.
    /// </summary>
    public virtual IEnumerable<string> Process(bool split = true)
    {
        var generatedFileNames = new List<string>();
        if (split)
        {
            EndBlock();
            var headerText = _generationEnvironment.ToString(header.Start, header.Length);
            var footerText = _generationEnvironment.ToString(footer.Start, footer.Length);
            var outputPath = Path.GetDirectoryName(_textTransformation.Host.TemplateFile);
            files.Reverse();
            foreach (var block in files)
            {
                var fileName = Path.Combine(outputPath, block.Name);
                var content = headerText + _generationEnvironment.ToString(block.Start, block.Length) + footerText;
                generatedFileNames.Add(fileName);
                CreateFile(fileName, content);
                _generationEnvironment.Remove(block.Start, block.Length);
            }
        }
        return generatedFileNames;
    }
    protected virtual void CreateFile(string fileName, string content)
    {
        if (IsFileContentDifferent(fileName, content))
        {
            File.WriteAllText(fileName, content);
        }
    }
    protected bool IsFileContentDifferent(String fileName, string newContent)
    {
        return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
    }
    private Block CurrentBlock
    {
        get { return currentBlock; }
        set
        {
            if (CurrentBlock != null)
            {
                EndBlock();
            }
            if (value != null)
            {
                value.Start = _generationEnvironment.Length;
            }
            currentBlock = value;
        }
    }
#if !PREPROCESSED_TEMPLATE
    private sealed class VsEntityFrameworkTemplateFileManager : EntityFrameworkTemplateFileManager
    {
        private EnvDTE.ProjectItem templateProjectItem;
        private EnvDTE.DTE dte;
        private Action<string> checkOutAction;
        private Action<IEnumerable<string>> projectSyncAction;
        /// <summary>
        /// Creates an instance of the VsEntityFrameworkTemplateFileManager class with the IDynamicHost instance
        /// </summary>
        public VsEntityFrameworkTemplateFileManager(object textTemplating)
            : base(textTemplating)
        {
            var hostServiceProvider = _textTransformation.Host.AsIServiceProvider();
            if (hostServiceProvider == null)
            {
                throw new ArgumentNullException("Could not obtain hostServiceProvider");
            }
            dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
            if (dte == null)
            {
                throw new ArgumentNullException("Could not obtain DTE from host");
            }
            templateProjectItem = dte.Solution.FindProjectItem(_textTransformation.Host.TemplateFile);
            checkOutAction = fileName => dte.SourceControl.CheckOutItem(fileName);
            projectSyncAction = keepFileNames => ProjectSync(templateProjectItem, keepFileNames);
        }
        public override IEnumerable<string> Process(bool split)
        {
            if (templateProjectItem.ProjectItems == null)
            {
                return new List<string>();
            }
            var generatedFileNames = base.Process(split);
            projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, null, null));
            return generatedFileNames;
        }
        protected override void CreateFile(string fileName, string content)
        {
            if (IsFileContentDifferent(fileName, content))
            {
                CheckoutFileIfRequired(fileName);
                File.WriteAllText(fileName, content);
            }
        }
        private static void ProjectSync(EnvDTE.ProjectItem templateProjectItem, IEnumerable<string> keepFileNames)
        {
            var keepFileNameSet = new HashSet<string>(keepFileNames);
            var projectFiles = new Dictionary<string, EnvDTE.ProjectItem>();
            var originalOutput = Path.GetFileNameWithoutExtension(templateProjectItem.FileNames[0]);
            foreach (EnvDTE.ProjectItem projectItem in templateProjectItem.ProjectItems)
            {
                projectFiles.Add(projectItem.FileNames[0], projectItem);
            }
            // Remove unused items from the project
            foreach (var pair in projectFiles)
            {
                if (!keepFileNames.Contains(pair.Key)
                    && !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalOutput + "."))
                {
                    pair.Value.Delete();
                }
            }
            // Add missing files to the project
            foreach (string fileName in keepFileNameSet)
            {
                if (!projectFiles.ContainsKey(fileName))
                {
                    templateProjectItem.ProjectItems.AddFromFile(fileName);
                }
            }
        }
        private void CheckoutFileIfRequired(string fileName)
        {
            if (dte.SourceControl == null
                || !dte.SourceControl.IsItemUnderSCC(fileName)
                    || dte.SourceControl.IsItemCheckedOut(fileName))
            {
                return;
            }
            // run on worker thread to prevent T4 calling back into VS
            checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
        }
    }
#endif
/// <summary>
/// Responsible creating an instance that can be passed
/// to helper classes that need to access the TextTransformation
/// members.  It accesses member by name and signature rather than
/// by type.  This is necessary when the
/// template is being used in Preprocessed mode
/// and there is no common known type that can be
/// passed instead
/// </summary>
public class DynamicTextTransformation
    private object _instance;
    IDynamicHost _dynamicHost;
    private readonly MethodInfo _write;
    private readonly MethodInfo _writeLine;
    private readonly PropertyInfo _generationEnvironment;
    private readonly PropertyInfo _errors;
    private readonly PropertyInfo _host;
    /// <summary>
    /// Creates an instance of the DynamicTextTransformation class around the passed in
    /// TextTransformation shapped instance passed in, or if the passed in instance
    /// already is a DynamicTextTransformation, it casts it and sends it back.
    /// </summary>
    public static DynamicTextTransformation Create(object instance)
    {
        if (instance == null)
        {
            throw new ArgumentNullException("instance");
        }
        DynamicTextTransformation textTransformation = instance as DynamicTextTransformation;
        if (textTransformation != null)
        {
            return textTransformation;
        }
        return new DynamicTextTransformation(instance);
    }
    private DynamicTextTransformation(object instance)
    {
        _instance = instance;
        Type type = _instance.GetType();
        _write = type.GetMethod("Write", new Type[] { typeof(string) });
        _writeLine = type.GetMethod("WriteLine", new Type[] { typeof(string) });
        _generationEnvironment = type.GetProperty("GenerationEnvironment", BindingFlags.Instance | BindingFlags.NonPublic);
        _host = type.GetProperty("Host");
        _errors = type.GetProperty("Errors");
    }
    /// <summary>
    /// Gets the value of the wrapped TextTranformation instance's GenerationEnvironment property
    /// </summary>
    public StringBuilder GenerationEnvironment { get { return (StringBuilder)_generationEnvironment.GetValue(_instance, null); } }
    /// <summary>
    /// Gets the value of the wrapped TextTranformation instance's Errors property
    /// </summary>
    public System.CodeDom.Compiler.CompilerErrorCollection Errors { get { return (System.CodeDom.Compiler.CompilerErrorCollection)_errors.GetValue(_instance, null); } }
    /// <summary>
    /// Calls the wrapped TextTranformation instance's Write method.
    /// </summary>
    public void Write(string text)
    {
        _write.Invoke(_instance, new object[] { text });
    }
    /// <summary>
    /// Calls the wrapped TextTranformation instance's WriteLine method.
    /// </summary>
    public void WriteLine(string text)
    {
        _writeLine.Invoke(_instance, new object[] { text });
    }
    /// <summary>
    /// Gets the value of the wrapped TextTranformation instance's Host property
    /// if available (shows up when hostspecific is set to true in the template directive) and returns
    /// the appropriate implementation of IDynamicHost
    /// </summary>
    public IDynamicHost Host
    {
        get
        {
            if (_dynamicHost == null)
            {
                if(_host == null)
                {
                    _dynamicHost = new NullHost();
                }
                else
                {
                    _dynamicHost = new DynamicHost(_host.GetValue(_instance, null));
                }
            }
            return _dynamicHost;
        }
    }
/// <summary>
/// Reponsible for abstracting the use of Host between times
/// when it is available and not
/// </summary>
public interface IDynamicHost
    /// <summary>
    /// An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
    /// </summary>
    string ResolveParameterValue(string id, string name, string otherName);
    /// <summary>
    /// An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
    /// </summary>
    string ResolvePath(string path);
    /// <summary>
    /// An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
    /// </summary>
    string TemplateFile { get; }
    /// <summary>
    /// Returns the Host instance cast as an IServiceProvider
    /// </summary>
    IServiceProvider AsIServiceProvider();
/// <summary>
/// Reponsible for implementing the IDynamicHost as a dynamic
/// shape wrapper over the Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost interface
/// rather than type dependent wrapper.  We don't use the
/// interface type so that the code can be run in preprocessed mode
/// on a .net framework only installed machine.
/// </summary>
public class DynamicHost : IDynamicHost
    private readonly object _instance;
    private readonly MethodInfo _resolveParameterValue;
    private readonly MethodInfo _resolvePath;
    private readonly PropertyInfo _templateFile;
    /// <summary>
    /// Creates an instance of the DynamicHost class around the passed in
    /// Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost shapped instance passed in.
    /// </summary>
    public DynamicHost(object instance)
    {
        _instance = instance;
        Type type = _instance.GetType();
        _resolveParameterValue = type.GetMethod("ResolveParameterValue", new Type[] { typeof(string), typeof(string), typeof(string) });
        _resolvePath = type.GetMethod("ResolvePath", new Type[] { typeof(string) });
        _templateFile = type.GetProperty("TemplateFile");
    }
    /// <summary>
    /// A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
    /// </summary>
    public string ResolveParameterValue(string id, string name, string otherName)
    {
        return (string)_resolveParameterValue.Invoke(_instance, new object[] { id, name, otherName });
    }
    /// <summary>
    /// A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
    /// </summary>
    public string ResolvePath(string path)
    {
        return (string)_resolvePath.Invoke(_instance, new object[] { path });
    }
    /// <summary>
    /// A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
    /// </summary>
    public string TemplateFile
    {
        get
        {
            return (string)_templateFile.GetValue(_instance, null);
        }
    }
    /// <summary>
    /// Returns the Host instance cast as an IServiceProvider
    /// </summary>
    public IServiceProvider AsIServiceProvider()
    {
        return _instance as IServiceProvider;
    }
/// <summary>
/// Reponsible for implementing the IDynamicHost when the
/// Host property is not available on the TextTemplating type. The Host
/// property only exists when the hostspecific attribute of the template
/// directive is set to true.
/// </summary>
public class NullHost : IDynamicHost
    /// <summary>
    /// An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
    /// that simply retuns null.
    /// </summary>
    public string ResolveParameterValue(string id, string name, string otherName)
    {
        return null;
    }
    /// <summary>
    /// An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
    /// that simply retuns the path passed in.
    /// </summary>
    public string ResolvePath(string path)
    {
        return path;
    }
    /// <summary>
    /// An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
    /// that returns null.
    /// </summary>
    public string TemplateFile
    {
        get
        {
            return null;
        }
    }
    /// <summary>
    /// Returns null.
    /// </summary>
    public IServiceProvider AsIServiceProvider()
    {
        return null;
    }
/// <summary>
/// Responsible for encapsulating the constants defined in Metadata
/// </summary>
public static class MetadataConstants
    public const string CSDL_EXTENSION = ".csdl";
    public const string CSDL_EDMX_SECTION_NAME = "ConceptualModels";
    public const string CSDL_ROOT_ELEMENT_NAME = "Schema";
    public const string EDM_ANNOTATION_09_02 = "http://schemas.microsoft.com/ado/2009/02/edm/annotation";
    public const string SSDL_EXTENSION = ".ssdl";
    public const string SSDL_EDMX_SECTION_NAME = "StorageModels";
    public const string SSDL_ROOT_ELEMENT_NAME = "Schema";
    public const string MSL_EXTENSION = ".msl";
    public const string MSL_EDMX_SECTION_NAME = "Mappings";
    public const string MSL_ROOT_ELEMENT_NAME = "Mapping";
    public const string TT_TEMPLATE_NAME = "TemplateName";
    public const string TT_TEMPLATE_VERSION = "TemplateVersion";
    public const string TT_MINIMUM_ENTITY_FRAMEWORK_VERSION = "MinimumEntityFrameworkVersion";
    public const string DEFAULT_TEMPLATE_VERSION = "4.0";
    public static readonly SchemaConstants V1_SCHEMA_CONSTANTS = new SchemaConstants(
        "http://schemas.microsoft.com/ado/2007/06/edmx",
        "http://schemas.microsoft.com/ado/2006/04/edm",
        "http://schemas.microsoft.com/ado/2006/04/edm/ssdl",
        "urn:schemas-microsoft-com:windows:storage:mapping:CS",
        new Version("3.5"));
    public static readonly SchemaConstants V2_SCHEMA_CONSTANTS = new SchemaConstants(
        "http://schemas.microsoft.com/ado/2008/10/edmx",
        "http://schemas.microsoft.com/ado/2008/09/edm",
        "http://schemas.microsoft.com/ado/2009/02/edm/ssdl",
        "http://schemas.microsoft.com/ado/2008/09/mapping/cs",
        new Version("4.0"));
    public static readonly SchemaConstants V3_SCHEMA_CONSTANTS = new SchemaConstants(
        "http://schemas.microsoft.com/ado/2009/11/edmx",
        "http://schemas.microsoft.com/ado/2009/11/edm",
        "http://schemas.microsoft.com/ado/2009/11/edm/ssdl",
        "http://schemas.microsoft.com/ado/2009/11/mapping/cs",
        new Version("5.0"));
public struct SchemaConstants
    public SchemaConstants(string edmxNamespace, string csdlNamespace, string ssdlNamespace, string mslNamespace, Version minimumTemplateVersion) : this()
    {
        EdmxNamespace = edmxNamespace;
        CsdlNamespace = csdlNamespace;
        SsdlNamespace = ssdlNamespace;
        MslNamespace = mslNamespace;
        MinimumTemplateVersion = minimumTemplateVersion;
    }
    public string EdmxNamespace { get; private set; }
    public string CsdlNamespace { get; private set; }
    public string SsdlNamespace { get; private set; }
    public string MslNamespace { get; private set; }
    public Version MinimumTemplateVersion { get; private set; }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class CSharpCodeGenTemplateV50Base
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
Imports System
Imports System.Linq
Imports System.IO
Imports System.Collections.Generic
Imports System.Data.Objects
Imports System.Data.Objects.DataClasses
Imports System.Xml
Imports System.Xml.Linq
Imports System.Globalization
Imports System.Reflection
Imports System.Data.Metadata.Edm
Imports System.Data.Mapping
Imports System.Data.Entity.Design
Imports System.CodeDom
Imports System.CodeDom.Compiler
Imports Microsoft.VisualBasic
Imports System.Text
'------------------------------------------------------------------------------
'<auto-generated>
'    This code was generated by a tool.
'    Runtime Version: 11.0.0.0
'    Changes to this file may cause incorrect behavior and will be lost if
'    the code is regenerated.
'</auto-generated>
'------------------------------------------------------------------------------
Namespace TemplateCodeGenerators
    '''<summary>
    '''Class to produce the template output
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")>  _
    Partial Public Class VBCodeGenTemplate
        Inherits VBCodeGenTemplateBase
        '''<summary>
        '''Create the template output
        '''</summary>
        Public Overridable Function TransformText() As String
DefineMetadata()
    Dim userSettings As UserSettings =
        New UserSettings With _
        { _
            .SourceCsdlPath = "$edmxInputFile$", _
            .ReferenceCsdlPaths = New string () {}, _
            .FullyQualifySystemTypes = True, _
            .CreateContextAddToMethods = True, _
            .CamelCaseFields = False _
        }
ApplyUserSettings(userSettings)
If Errors.HasErrors
    Return String.Empty
End If
Dim loader As New MetadataLoader(Me)
Dim ef As New MetadataTools(Me)
Dim region As New CodeRegion(Me)
Dim code As New CodeGenerationTools(Me) With {.FullyQualifySystemTypes = userSettings.FullyQualifySystemTypes, .CamelCaseFields = userSettings.CamelCaseFields}
ItemCollection = loader.CreateEdmItemCollection(SourceCsdlPath, ReferenceCsdlPaths.ToArray())
ModelNamespace = loader.GetModelNamespace(SourceCsdlPath)
Dim namespaceName As String = GetNamespaceName(code)
UpdateObjectNamespaceMap(namespaceName)
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'------------------------------------------------------------------------------"& _ 
                    ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"' <auto-generated>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(GetResourceString("Template_GeneratedCodeCommentLine1")))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(GetResourceString("Template_GeneratedCodeCommentLine2")))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(GetResourceString("Template_GeneratedCodeCommentLine3")))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"' </auto-generated>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'---------------------------------------------------------"& _ 
                    "---------------------"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System.ComponentModel"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports "& _ 
                    "System.Data.EntityClient"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System.Data.Objects"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System.Data.Objec"& _ 
                    "ts.DataClasses"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System.Linq"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System.Runtime.Serialization"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Impor"& _ 
                    "ts System.Xml.Serialization"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<Assembly: EdmSchemaAttribute(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Guid.NewGuid().ToString("D", CultureInfo.InvariantCulture)))
            Me.Write(""")>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
    ''''''''
    '''''''' Write Relationship Attributes.
    ''''''''
    region.Begin(GetResourceString("Template_RegionRelationships"))
    For Each association As AssociationType in GetSourceSchemaTypes(Of AssociationType)()
            Me.Write("<Assembly: EdmRelationshipAttribute(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(association.NamespaceName))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(association.Name))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(EndName(association, 0)))
            Me.Write(""", ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(EndMultiplicity(association, 0, code)))
            Me.Write(", GetType(")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(EscapeEndTypeName(association, 0, code)))
            Me.Write("), """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(EndName(association, 1)))
            Me.Write(""", ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(EndMultiplicity(association, 1, code)))
            Me.Write(", GetType(")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(EscapeEndTypeName(association, 1, code)))
            Me.Write(")")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.StringBefore(", ", If(association.IsForeignKey, "True", Nothing))))
            Me.Write(")>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
    Next
    region.End()
    If(Not String.IsNullOrEmpty(namespaceName)) Then
            Me.Write("Namespace ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(namespaceName))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        PushIndent(CodeRegion.GetIndent(1))
    End If
    ''''''''
    '''''''' 
    ''''''''
    region.Begin(GetResourceString("Template_RegionContexts"))
    For Each container as EntityContainer in GetSourceSchemaTypes(Of EntityContainer)()
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(container)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </summary>")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(container, region.CurrentIndentLevel)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForType(container)))
            Me.Write(" Partial Class ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(container)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Inherits ObjectContext"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    #Region """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(GetResourceString("Template_RegionConstructors")))
            Me.Write(""""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_ContextDefaultCtorComment"), container.Name, container.Name)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Public Sub New()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        MyBase.New(""name=")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(container.Name))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(container.Name))
            Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        WriteLazyLoadingEnabled(container)
            Me.Write("        OnContextCreated()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_ContextCommonCtorComment"), container.Name)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Public Sub New(ByVal connectionString As String)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                    "   MyBase.New(connectionString, """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(container.Name))
            Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        WriteLazyLoadingEnabled(container)
            Me.Write("        OnContextCreated()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_ContextCommonCtorComment"), container.Name)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Public Sub New(ByVal connection As EntityConnection)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                    "       MyBase.New(connection, """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(container.Name))
            Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        WriteLazyLoadingEnabled(container)
            Me.Write("        OnContextCreated()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    #End Region"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    #Region """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(GetResourceString("Template_RegionPartialMethods")))
            Me.Write(""""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Partial Private Sub OnContextCreated()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    #End Region"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                    ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        ''''''''
        '''''''' 
        ''''''''
        region.Begin(GetResourceString("Template_RegionObjectSetProperties"))
        For Each entitySet As EntitySet In container.BaseEntitySets.OfType(Of EntitySet)()
            VerifyEntityTypeAndSetAccessibilityCompatability(entitySet)
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(entitySet)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(entitySet, region.CurrentIndentLevel)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(entitySet))))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForReadOnlyProperty(entitySet)))
            Me.Write(" ReadOnly Property ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(entitySet)))
            Me.Write("() As ObjectSet(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(entitySet.ElementType, code)))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            If (")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(entitySet)))
            Me.Write(" Is Nothing) Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(entitySet)))
            Me.Write(" = MyBase.CreateObjectSet(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(entitySet.ElementType, code)))
            Me.Write(")(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(entitySet.Name))
            Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            Return ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(entitySet)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Property"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(entitySet)))
            Me.Write(" As ObjectSet(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(entitySet.ElementType, code)))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        Next
        region.End()
        ''''''''
        '''''''' 
        ''''''''
        '''''''' 
        '''''''' 
        ''''''''
        '''''''' 
        '''''''' 
        '''''''' 
        ''''''''
        region.Begin(GetResourceString("Template_RegionAddToMethods"))
        Dim addToMethods As IEnumerable(Of EntitySet) = If(CreateContextAddToMethods.Value, container.BaseEntitySets.OfType(Of EntitySet)(), Enumerable.Empty(Of EntitySet)())
        For Each addTo As EntitySet in addToMethods
        Dim parameterName As String = code.Escape(FixParameterName(addTo.ElementType.Name, code))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_GenCommentAddToMethodVb"), addTo.Name)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForType(addTo.ElementType)))
            Me.Write(" Sub AddTo")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(addTo.Name))
            Me.Write("(ByVal ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameterName))
            Me.Write(" As ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(addTo.ElementType, code)))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        MyBase.AddObject(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(addTo.Name))
            Me.Write(""", ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameterName))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        Next
        region.End()
        region.Begin(GetResourceString("Template_RegionFunctionImports"))
        For Each edmFunction As EdmFunction in container.FunctionImports
            Dim parameters As IEnumerable(Of FunctionImportParameter) = FunctionImportParameter.Create(edmFunction.Parameters, code, ef)
            Dim paramList As String = String.Join(", ", parameters.Select(Function(p) p.FunctionParameterName & " As " & p.FunctionParameterType).ToArray())
            Dim returnType As TypeUsage = If(edmFunction.ReturnParameters.Count = 0, Nothing, ef.GetElementType(edmFunction.ReturnParameters(0).TypeUsage))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(edmFunction)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(edmFunction, region.CurrentIndentLevel)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(ParameterComments(parameters.Select(Function(p) New Tuple(Of string, string)(p.RawFunctionParameterName, SummaryComment(p.Source))), region.CurrentIndentLevel)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(edmFunction))))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForMethod(edmFunction)))
            Me.Write(" Function ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(edmFunction)))
            Me.Write("(")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(paramList))
            Me.Write(") As ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(If(returnType IsNot Nothing, "ObjectResult(Of " & MultiSchemaEscape(returnType, code) & ")", "Integer")))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            For Each parameter As FunctionImportParameter In parameters
                If (Not parameter.NeedsLocalVariable) Then
                    Continue For
                End If
            Me.Write("        Dim ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.LocalVariableName))
            Me.Write(" As ObjectParameter"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        If (")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(If(parameter.IsNullableOfT, parameter.FunctionParameterName + ".HasValue", parameter.FunctionParameterName & " IsNot Nothing")))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.LocalVariableName))
            Me.Write(" = New ObjectParameter(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.EsqlParameterName))
            Me.Write(""", ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.FunctionParameterName))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        Else"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.LocalVariableName))
            Me.Write(" = New ObjectParameter(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.EsqlParameterName))
            Me.Write(""", GetType(")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.RawClrTypeName))
            Me.Write("))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Next
            Me.Write("        Return MyBase.ExecuteFunction")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(If(returnType Is Nothing, "", "(Of " & MultiSchemaEscape(returnType, code) & ")")))
            Me.Write("(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(edmFunction.Name))
            Me.Write("""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.StringBefore(", ", String.Join(", ", parameters.Select(Function(p) p.ExecuteParameterName).ToArray()))))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            If (returnType IsNot Nothing AndAlso returnType.EdmType.BuiltInTypeKind = BuiltInTypeKind.EntityType)
            Me.Write("    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(edmFunction)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(edmFunction, region.CurrentIndentLevel)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <param name=""mergeOption""></param>")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(ParameterComments(parameters.Select(Function(p) New Tuple(Of string, string)(p.RawFunctionParameterName, SummaryComment(p.Source))), region.CurrentIndentLevel)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(edmFunction))))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForMethod(edmFunction)))
            Me.Write(" Function ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(edmFunction)))
            Me.Write("(")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.StringAfter(paramList, ", ")))
            Me.Write("mergeOption As MergeOption) As ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(If(returnType IsNot Nothing, "ObjectResult(Of " & MultiSchemaEscape(returnType, code) & ")", "Integer")))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            For Each parameter As FunctionImportParameter In parameters
                If (Not parameter.NeedsLocalVariable) Then
                    Continue For
                End If
            Me.Write("        Dim ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.LocalVariableName))
            Me.Write(" As ObjectParameter"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        If (")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(If(parameter.IsNullableOfT, parameter.FunctionParameterName + ".HasValue", parameter.FunctionParameterName & " IsNot Nothing")))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.LocalVariableName))
            Me.Write(" = New ObjectParameter(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.EsqlParameterName))
            Me.Write(""", ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.FunctionParameterName))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        Else"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.LocalVariableName))
            Me.Write(" = New ObjectParameter(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.EsqlParameterName))
            Me.Write(""", GetType(")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.RawClrTypeName))
            Me.Write("))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
                Next
            Me.Write("        Return MyBase.ExecuteFunction(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(returnType, code)))
            Me.Write(")(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(edmFunction.Name))
            Me.Write(""", mergeOption")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.StringBefore(", ", String.Join(", ", parameters.Select(Function(p) p.ExecuteParameterName).ToArray()))))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            End If
        Next
        region.End()
            Me.Write("End Class"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        VerifyCaseInsensitiveEntitySetUniqueness(container.BaseEntitySets.OfType(Of EntitySet)())
    Next
    region.End()
    ''''''''
    '''''''' 
    ''''''''
    region.Begin(GetResourceString("Template_RegionEntities"))
    For Each loopEntity As EntityType in GetSourceSchemaTypes(Of EntityType)().OrderBy(Function(e) e.Name)
        Dim entity As EntityType = loopEntity
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(entity)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </summary>")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(entity, region.CurrentIndentLevel)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<EdmEntityTypeAttribute(NamespaceName:=""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(entity.NamespaceName))
            Me.Write(""", Name:=""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(entity.Name))
            Me.Write(""")>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<Serializable()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<DataContractAttribute(IsReference:=True)>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        For Each subType As EntityType in ItemCollection.GetItems(Of EntityType)().Where(Function(b) b.BaseType is entity)
            Me.Write("<KnownTypeAttribute(GetType(")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(subType, code)))
            Me.Write("))>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        Next
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForType(entity)))
            Me.Write(" ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(code.MustInheritOption(entity))))
            Me.Write("Partial Class ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(entity)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Inherits ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(BaseTypeName(entity, code)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        If(Not entity.Abstract) Then
            WriteFactoryMethod(entity, code)
        End If
        region.Begin(GetResourceString("Template_RegionPrimitiveProperties"))
        For Each edmProperty As EdmProperty in entity.Properties.Where(Function(p) p.DeclaringType Is entity AndAlso TypeOf p.TypeUsage.EdmType Is PrimitiveType)
            VerifyGetterAndSetterAccessibilityCompatability(edmProperty)
            WritePrimitiveTypeProperty(edmProperty, code)
        Next
        region.End()
        region.Begin(GetResourceString("Template_RegionComplexProperties"))
        For Each edmProperty As EdmProperty in entity.Properties.Where(Function(p) p.DeclaringType Is entity AndAlso TypeOf p.TypeUsage.EdmType Is ComplexType)
            VerifyGetterAndSetterAccessibilityCompatability(edmProperty)
            WriteComplexTypeProperty(edmProperty, code)
        Next
        region.End()
        ''''''''
        '''''''' 
        ''''''''
        region.Begin(GetResourceString("Template_RegionNavigationProperties"))
        For Each navProperty As NavigationProperty in entity.NavigationProperties.Where(Function(n) n.DeclaringType Is entity)
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(navProperty)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(navProperty, region.CurrentIndentLevel)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <XmlIgnoreAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <SoapIgnoreAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <DataMemberAttribu"& _ 
                    "te()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <EdmRelationshipNavigationPropertyAttribute(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.NamespaceName))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.Name))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name))
            Me.Write(""")>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            If(navProperty.ToEndMember.RelationshipMultiplicity = RelationshipMultiplicity.Many) Then
            Me.Write("     ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(navProperty))))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(navProperty)))
            Me.Write(" Property ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(navProperty)))
            Me.Write("() As EntityCollection(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(navProperty))))
            Me.Write("Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            Return CType(Me,IEntityWithRelationships).RelationshipManager.Ge"& _ 
                    "tRelatedCollection(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)))
            Me.Write(")(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name))
            Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter(navProperty))))
            Me.Write("Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            If (Not value Is Nothing)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                CType(Me, IEntityWith"& _ 
                    "Relationships).RelationshipManager.InitializeRelatedCollection(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)))
            Me.Write(")(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name))
            Me.Write(""", value)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Property"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
           Else
            Me.Write("    ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(navProperty))))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(navProperty)))
            Me.Write(" Property ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(navProperty)))
            Me.Write("() As ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(navProperty))))
            Me.Write("Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            Return CType(Me, IEntityWithRelationships).RelationshipManager.G"& _ 
                    "etRelatedReference(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)))
            Me.Write(")(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name))
            Me.Write(""").Value"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter(navProperty))))
            Me.Write("Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            CType(Me, IEntityWithRelationships).RelationshipManager.GetRelat"& _ 
                    "edReference(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)))
            Me.Write(")(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name))
            Me.Write(""").Value = value"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Property"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        Dim refPropertyName As String = navProperty.Name & "Reference"
        If(entity.Members.Any(Function(m) m.Name = refPropertyName)) Then
            '
            Errors.Add(New System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6017",
                String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_ConflictingGeneratedNavPropName"), navProperty.Name, entity.FullName, refPropertyName)))
        End If
            Me.Write("    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(navProperty)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(navProperty, region.CurrentIndentLevel)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <BrowsableAttribute(False)>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <DataMemberAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(navProperty)))
            Me.Write(" Property ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(refPropertyName))
            Me.Write("() As EntityReference(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(navProperty))))
            Me.Write("Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            Return CType(Me, IEntityWithRelationships).RelationshipManager.G"& _ 
                    "etRelatedReference(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)))
            Me.Write(")(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name))
            Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter(navProperty))))
            Me.Write("Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            If (Not value Is Nothing)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                CType(Me, IEntityWith"& _ 
                    "Relationships).RelationshipManager.InitializeRelatedReference(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)))
            Me.Write(")(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name))
            Me.Write(""", value)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Property"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            End If
        Next
        region.End()
            Me.Write("End Class"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        VerifyCaseInsensitiveMemberUniqueness(GetAllDeclaredMembers(entity))
    Next
    region.End()
    ''''''''
    '''''''' 
    ''''''''
    region.Begin(GetResourceString("Template_RegionComplexTypes"))
    For Each  loopComplex As ComplexType in GetSourceSchemaTypes(Of ComplexType)().OrderBy(Function(e) e.Name)
        Dim complex As ComplexType = loopComplex
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(complex)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </summary>")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(complex, region.CurrentIndentLevel)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<EdmComplexTypeAttribute(NamespaceName:=""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(complex.NamespaceName))
            Me.Write(""", Name:=""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(complex.Name))
            Me.Write(""")>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<DataContractAttribute(IsReference:=True)>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<Serializable()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForType(complex)))
            Me.Write(" Partial Class ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(complex)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Inherits ComplexObject"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        WriteFactoryMethod(complex, code)
        region.Begin(GetResourceString("Template_RegionPrimitiveProperties"))
        For Each edmProperty As EdmProperty in complex.Properties.Where(Function(p) p.DeclaringType Is complex AndAlso TypeOf p.TypeUsage.EdmType Is PrimitiveType)
            VerifyGetterAndSetterAccessibilityCompatability(edmProperty)
            WritePrimitiveTypeProperty(edmProperty, code)
        Next
        region.End()
        region.Begin(GetResourceString("Template_RegionComplexProperties"))
        For Each edmProperty As EdmProperty in complex.Properties.Where(Function(p) p.DeclaringType Is complex AndAlso TypeOf p.TypeUsage.EdmType Is ComplexType)
            VerifyGetterAndSetterAccessibilityCompatability(edmProperty)
            WriteComplexTypeProperty(edmProperty, code)
        Next
        region.End()
            Me.Write("End Class"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        VerifyCaseInsensitiveMemberUniqueness(GetAllDeclaredMembers(complex))
    Next
    region.End()
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
    If (Not String.IsNullOrEmpty(namespaceName)) Then
    PopIndent()
            Me.Write("End Namespace"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
    End If
    VerifyCaseInsensitiveTypeUniqueness()
            Return Me.GenerationEnvironment.ToString
        End Function
    ''''''''
    '''''''' 
    ''''''''
    ''''''''
    '''''''' 
    ''''''''
    Private Sub WriteFactoryMethod(structuralType As StructuralType, code As CodeGenerationTools)
        Dim region As CodeRegion = New CodeRegion(Me, 1)
        Dim methodName As String = "Create" + structuralType.Name
        Dim uniqueIdentifier As UniqueIdentifierService = New UniqueIdentifierService()
        Dim instanceName As String = code.Escape(uniqueIdentifier.AdjustIdentifier((code.CamelCase(structuralType.Name))))
        Dim parameters As IEnumerable(Of FactoryMethodParameter) = FactoryMethodParameter.CreateParameters(structuralType.Members.OfType(Of EdmProperty)().Where(Function(p) IncludePropertyInFactoryMethod(structuralType, p)), uniqueIdentifier, Function(t, c) MultiSchemaEscape(t, c), code)
        If (parameters.Count() = 0) Then
            Return
        End If
        If(structuralType.Members.Any(Function(m) m.Name = methodName)) Then
            ' 
            Errors.Add(New System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6029",
                String.Format(CultureInfo.CurrentCulture, _
                   GetResourceString("Template_FactoryMethodNameConflict"), methodName, structuralType.FullName)))
        End If
        region.Begin(GetResourceString("Template_RegionFactoryMethod"))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_FactoryMethodComment"), structuralType.Name)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>")
Me.Write(Me.ToStringHelper.ToStringWithCulture(ParameterComments(parameters.Select(Function(p) New Tuple(Of String, String)(p.RawParameterName, p.ParameterComment)), region.CurrentIndentLevel)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Public Shared Function ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(methodName))
Me.Write("(")
Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Join(", ", parameters.Select(Function(p) p.ParameterName & " As " & p.ParameterType).ToArray())))
Me.Write(") As ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(structuralType)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        Dim ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(instanceName))
Me.Write(" as ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(structuralType)))
Me.Write(" = New ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(structuralType)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        For Each parameter As FactoryMethodParameter in parameters
            If(parameter.IsComplexType) Then
                ' 
Me.Write("        ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(instanceName))
Me.Write(".")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(parameter.Source)))
Me.Write(" = StructuralObject.VerifyComplexObjectIsNotNull(")
Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.ParameterName))
Me.Write(", """)
Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.Source.Name))
Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Else
                ' 
Me.Write("        ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(instanceName))
Me.Write(".")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(parameter.Source)))
Me.Write(" = ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.ParameterName))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            End If
        Next
Me.Write("        Return ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(instanceName))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        region.End()
    End Sub
    ''''''''
    '''''''' 
    ''''''''
    Private Sub WritePrimitiveTypeProperty(primitiveProperty As EdmProperty, code As CodeGenerationTools)
        Dim ef As MetadataTools = New MetadataTools(Me)
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(primitiveProperty)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>")
Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(primitiveProperty, 1)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <EdmScalarPropertyAttribute(EntityKeyProperty:=")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.CreateLiteral(ef.IsKey(primitiveProperty))))
Me.Write(", IsNullable:=")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.CreateLiteral(ef.IsNullable(primitiveProperty))))
Me.Write(")>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <DataMemberAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(primitiveProperty))))
Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(primitiveProperty)))
Me.Write(" Property ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(primitiveProperty)))
Me.Write("() As ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(primitiveProperty.TypeUsage)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(primitiveProperty))))
Me.Write("Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
             If(ef.ClrType(primitiveProperty.TypeUsage) = GetType(byte())) Then
Me.Write("                Return StructuralObject.GetValidValue(")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(primitiveProperty)))
Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
             Else
Me.Write("            Return ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(primitiveProperty)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
                End If
Me.Write("        End Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter((primitiveProperty)))))
Me.Write("Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
         If(ef.IsKey(primitiveProperty)) Then
                If(ef.ClrType(primitiveProperty.TypeUsage) = GetType(byte())) Then
Me.Write("            If (Not StructuralObject.BinaryEquals(")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(primitiveProperty)))
Me.Write(", Value)) Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
                Else
Me.Write("            If (")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(primitiveProperty)))
Me.Write(" <> Value) Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
                End If
                PushIndent(CodeRegion.GetIndent(1))
            End If
Me.Write("            ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(ChangingMethodName(primitiveProperty)))
Me.Write("(value)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ReportPropertyChanging(""")
Me.Write(Me.ToStringHelper.ToStringWithCulture(primitiveProperty.Name))
Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(primitiveProperty)))
Me.Write(" = StructuralObject.SetValidValue(value")
Me.Write(Me.ToStringHelper.ToStringWithCulture(OptionalNullableParameterForSetValidValue(primitiveProperty, code)))
Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ReportPropertyChanged(""")
Me.Write(Me.ToStringHelper.ToStringWithCulture(primitiveProperty.Name))
Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(ChangedMethodName(primitiveProperty)))
Me.Write("()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
         If(ef.IsKey(primitiveProperty)) Then
                PopIndent()
Me.Write("            End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            End If
Me.Write("        End Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Property"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(primitiveProperty)))
Me.Write(" As ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(primitiveProperty.TypeUsage)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.StringBefore(" = ", code.CreateLiteral(primitiveProperty.DefaultValue))))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private Partial Sub ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(ChangingMethodName(primitiveProperty)))
Me.Write("(value As ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(primitiveProperty.TypeUsage)))
Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private Partial Sub ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(ChangedMethodName(primitiveProperty)))
Me.Write("()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
    End Sub
    ''''''''
    '''''''' 
    ''''''''
    Private Sub WriteComplexTypeProperty(complexProperty As EdmProperty, code As CodeGenerationTools)
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(complexProperty)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>")
Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(complexProperty, 1)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <EdmComplexPropertyAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <DesignerSerializationVisibility(Desig"& _ 
        "nerSerializationVisibility.Content)>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <XmlElement(IsNullable:=True)>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <S"& _ 
        "oapElement(IsNullable:=True)>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <DataMemberAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(complexProperty))))
Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(complexProperty)))
Me.Write(" Property ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(complexProperty)))
Me.Write("() As ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(complexProperty.TypeUsage, code)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(complexProperty))))
Me.Write("Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)))
Me.Write(" = GetValidValue(")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)))
Me.Write(", """)
Me.Write(Me.ToStringHelper.ToStringWithCulture(complexProperty.Name))
Me.Write(""", False, ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(InitializedTrackingField(complexProperty, code)))
Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(InitializedTrackingField(complexProperty, code)))
Me.Write(" = True"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            Return ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter(complexProperty))))
Me.Write("Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(ChangingMethodName(complexProperty)))
Me.Write("(value)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ReportPropertyChanging(""")
Me.Write(Me.ToStringHelper.ToStringWithCulture(complexProperty.Name))
Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)))
Me.Write(" = SetValidValue(")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)))
Me.Write(", value, """)
Me.Write(Me.ToStringHelper.ToStringWithCulture(complexProperty.Name))
Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(InitializedTrackingField(complexProperty, code)))
Me.Write(" = True"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ReportPropertyChanged(""")
Me.Write(Me.ToStringHelper.ToStringWithCulture(complexProperty.Name))
Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(ChangedMethodName(complexProperty)))
Me.Write("()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Property"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)))
Me.Write(" As ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(complexProperty.TypeUsage, code)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(InitializedTrackingField(complexProperty, code)))
Me.Write(" As Boolean"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private Partial Sub ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(ChangingMethodName(complexProperty)))
Me.Write("(value As ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(complexProperty.TypeUsage, code)))
Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private Partial Sub ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(ChangedMethodName(complexProperty)))
Me.Write("()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
    End Sub
    Private Sub WriteLazyLoadingEnabled(ByVal container As EntityContainer)
        Dim lazyLoadingAttributeValue As String = Nothing
        Dim lazyLoadingAttributeName As String = MetadataConstants.EDM_ANNOTATION_09_02 & ":LazyLoadingEnabled"
        If MetadataTools.TryGetStringMetadataPropertySetting(container, lazyLoadingAttributeName, lazyLoadingAttributeValue) Then
            Dim isLazyLoading As Boolean = False
            If Boolean.TryParse(lazyLoadingAttributeValue, isLazyLoading) Then
Me.Write("        MyBase.ContextOptions.LazyLoadingEnabled = ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(isLazyLoading.ToString().ToLowerInvariant()))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            End If
        End If
    End Sub
    ''''''''
    '''''''' 
    ''''''''
    Public Property SourceCsdlPath() As String
    Public Property ModelNamespace() As String
    Public Property ItemCollection() As EdmItemCollection
    Public Property ReferenceCsdlPaths() As IEnumerable(Of String)
    Public Property FullyQualifySystemTypes() As Nullable(Of Boolean)
    Public Property CreateContextAddToMethods As Nullable(Of Boolean)
    Public Property EdmToObjectNamespaceMap() As Dictionary(Of string, string)
        Get
            Return _edmToObjectNamespaceMap
        End Get
        Set
            _edmToObjectNamespaceMap = Value
        End Set
    End Property
    Dim _edmToObjectNamespaceMap As Dictionary(Of string, string) = New Dictionary(Of string, string)
    Public ReadOnly Property SourceEdmVersion As Double
        Get
            If (Not ItemCollection Is Nothing) Then
                Return ItemCollection.EdmVersion
            End If
            Return 0.0
        End Get
    End Property
    ''''''''
    '''''''' 
    ''''''''
    Private Shared ReadOnly Property ResourceManager As System.Resources.ResourceManager
        Get
            If(_resourceManager Is Nothing)
                    Dim manager As System.Resources.ResourceManager = New System.Resources.ResourceManager("System.Data.Entity.Design", GetType(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly)
                    System.Threading.Interlocked.CompareExchange(_resourceManager, manager, Nothing)
            End If
            Return _resourceManager
        End Get
    End Property
    Dim Shared _resourceManager As System.Resources.ResourceManager
    Private Shared Function GetResourceString(resourceName As String) As String
        Return ResourceManager.GetString(resourceName, _
             Nothing) ' 
    End Function
    Private Sub ApplyUserSettings(userSettings as UserSettings)
        If(SourceCsdlPath Is Nothing) Then
#If NOT PREPROCESSED_TEMPLATE
            If userSettings.SourceCsdlPath = ("$" & "edmxInputFile" & "$")
                Errors.Add(New System.CodeDom.Compiler.CompilerError(Host.TemplateFile, -1, -1, String.Empty,
                    GetResourceString("Template_ReplaceVsItemTemplateToken")))
                Return
            End If
            SourceCsdlPath = Host.ResolvePath(userSettings.SourceCsdlPath)
#Else
            SourceCsdlPath = userSettings.SourceCsdlPath
#End If
        End If
        ' normalize the path, remove ..\ from it
        SourceCsdlPath = Path.GetFullPath(SourceCsdlPath)
        If(ReferenceCsdlPaths Is Nothing) Then
            ReferenceCsdlPaths = userSettings.ReferenceCsdlPaths
        End If
        If(Not FullyQualifySystemTypes.HasValue) Then
            FullyQualifySystemTypes = userSettings.FullyQualifySystemTypes
        End If
        If(Not CreateContextAddToMethods.HasValue) Then
            CreateContextAddToMethods = userSettings.CreateContextAddToMethods
        End If
        DefaultSummaryComment = GetResourceString("Template_CommentNoDocumentation")
    End Sub
    ''''''''
    '''''''' 
    ''''''''
    Private Class UserSettings
        Public Property SourceCsdlPath() As String
        Public Property ReferenceCsdlPaths() As String ()
        Public Property FullyQualifySystemTypes() As Boolean
        Public Property CreateContextAddToMethods() As Boolean
        Public Property CamelCaseFields() As Boolean
    End Class
    Private Function GetNamespaceName(code As CodeGenerationTools) As String
        Dim namespaceName As String = code.VsNamespaceSuggestion()
#If PREPROCESSED_TEMPLATE Then
        If String.IsNullOrEmpty(namespaceName) Then
            namespaceName = GetObjectNamespace(ModelNamespace)
        End If
#End If
        Return namespaceName
    End Function
Private Function MultiSchemaEscape(ByVal usage As TypeUsage, ByVal code As CodeGenerationTools) As String
    Dim structural As StructuralType = TryCast(usage.EdmType, StructuralType)
    If structural IsNot Nothing Then
        Return MultiSchemaEscape(structural, code)
    End If
    Return code.Escape(usage)
End Function
Private Function MultiSchemaEscape(ByVal type As StructuralType, ByVal code As CodeGenerationTools) As String
    If type.NamespaceName <> ModelNamespace Then
        Return code.CreateFullName(code.EscapeNamespace(GetObjectNamespace(type.NamespaceName)), code.Escape(type))
    End If
    Return code.Escape(type)
End Function
Private Function NewModifier(ByVal navigationProperty As NavigationProperty) As String
    Dim baseType As Type = GetType(EntityObject)
    Return NewModifier(baseType, navigationProperty.Name)
End Function
Private Function NewModifier(ByVal edmFunction As EdmFunction) As String
    Dim baseType As Type = GetType(ObjectContext)
    Return NewModifier(baseType, edmFunction.Name)
End Function
Private Function NewModifier(ByVal entitySet As EntitySet) As String
    Dim baseType As Type = GetType(ObjectContext)
    Return NewModifier(baseType, entitySet.Name)
End Function
Private Function NewModifier(ByVal edmProperty As EdmProperty) As String
    Dim baseType As Type
    If edmProperty.DeclaringType.BuiltInTypeKind = BuiltInTypeKind.EntityType Then
        baseType = GetType(EntityObject)
    Else
        baseType = GetType(ComplexObject)
    End If
    Return NewModifier(baseType, edmProperty.Name)
End Function
Private Function NewModifier(ByVal type As Type, ByVal memberName As String) As String
    If HasBaseMemberWithMatchingName(type, memberName) Then
        Return "Shadows"
    End If
    Return String.Empty
End Function
Private Function ChangingMethodName(ByVal member As EdmMember) As String
    Return String.Format(CultureInfo.InvariantCulture, "On{0}Changing", member.Name)
End Function
Private Function ChangedMethodName(ByVal member As EdmMember) As String
    Return String.Format(CultureInfo.InvariantCulture, "On{0}Changed", member.Name)
End Function
Private Function InitializedTrackingField(ByVal edmProperty As EdmProperty, ByVal code As CodeGenerationTools) As String
    Dim namePart As String = edmProperty.Name & "Initialized"
    If code.CamelCaseFields Then
        namePart = code.CamelCase(namePart)
    End If
    Return "_" & namePart
End Function
Private Function OptionalNullableParameterForSetValidValue(ByVal member As EdmMember, ByVal code As CodeGenerationTools) As String
    Dim ef As New MetadataTools(Me)
    Dim list As String = String.Empty
    If DirectCast(member.TypeUsage.EdmType, PrimitiveType).ClrEquivalentType.IsClass Then
        Dim storeGeneratedPatternProperty As MetadataProperty = Nothing
        Dim isNullable As Boolean = ef.IsNullable(member.TypeUsage) OrElse
            (member.MetadataProperties.TryGetValue(MetadataConstants.EDM_ANNOTATION_09_02 & ":StoreGeneratedPattern", False, storeGeneratedPatternProperty) AndAlso
             Object.Equals(storeGeneratedPatternProperty.Value, "Computed"))
        list += ", " & code.CreateLiteral(isNullable)
    End If
    Return list
End Function
Private Shared Function IsVisibleMember(ByVal memberInfo As MemberInfo) As Boolean
    If TypeOf memberInfo Is EventInfo Then
        Dim ei As EventInfo = DirectCast(memberInfo, EventInfo)
        Dim add As MethodInfo = ei.GetAddMethod()
        Dim remove As MethodInfo = ei.GetRemoveMethod()
        Return IsVisibleMethod(add) OrElse IsVisibleMethod(remove)
    ElseIf TypeOf memberInfo Is FieldInfo Then
        Dim fi As FieldInfo = DirectCast(memberInfo, FieldInfo)
        Return Not fi.IsPrivate AndAlso Not fi.IsAssembly
    ElseIf TypeOf memberInfo Is MethodBase Then
        Dim mb As MethodBase = DirectCast(memberInfo, MethodBase)
        If mb.IsSpecialName Then
            Return False
        End If
        Return IsVisibleMethod(mb)
    ElseIf TypeOf memberInfo Is PropertyInfo Then
        Dim pi As PropertyInfo = DirectCast(memberInfo, PropertyInfo)
        Dim getMethod As MethodInfo = pi.GetGetMethod()
        Dim entitySet As MethodInfo = pi.GetSetMethod()
        Return IsVisibleMethod(getMethod) OrElse IsVisibleMethod(entitySet)
    End If
    Return False
End Function
Private Shared Function IsVisibleMethod(ByVal methodBase As MethodBase) As Boolean
    If methodBase Is Nothing Then
        Return False
    End If
    Return Not methodBase.IsPrivate AndAlso Not methodBase.IsAssembly
End Function
Private Shared Function HasBaseMemberWithMatchingName(ByVal type As Type, ByVal memberName As String) As Boolean
    Dim bindings As BindingFlags = BindingFlags.FlattenHierarchy Or BindingFlags.NonPublic Or BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.Static
    Return type.GetMembers(bindings).Where(Function(m) IsVisibleMember(m)).Any(Function(m) m.Name.Equals(memberName, StringComparison.OrdinalIgnoreCase))
End Function
Private Function GetSourceSchemaTypes(Of T As GlobalItem)() As IEnumerable(Of T)
    If Path.GetExtension(SourceCsdlPath) <> ".edmx" Then
        Return ItemCollection.GetItems(Of T)().Where(Function(e) e.MetadataProperties.Any(Function(mp) mp.Name = "SchemaSource" AndAlso DirectCast(mp.Value, String) = SourceCsdlPath))
    Else
        Return ItemCollection.GetItems(Of T)()
    End If
End Function
Private Function EndName(ByVal association As AssociationType, ByVal index As Integer) As String
    Return association.AssociationEndMembers(index).Name
End Function
Private Function EndMultiplicity(ByVal association As AssociationType, ByVal index As Integer, ByVal code As CodeGenerationTools) As String
    Return code.CreateLiteral(association.AssociationEndMembers(index).RelationshipMultiplicity)
End Function
Private Function EscapeEndTypeName(ByVal association As AssociationType, ByVal index As Integer, ByVal code As CodeGenerationTools) As String
    Dim entity As EntityType = association.AssociationEndMembers(index).GetEntityType()
    Return code.CreateFullName(code.EscapeNamespace(GetObjectNamespace(entity.NamespaceName)), code.Escape(entity))
End Function
Private Function GetObjectNamespace(ByVal csdlNamespaceName As String) As String
    Dim objectNamespace As String = Nothing
    If EdmToObjectNamespaceMap.TryGetValue(csdlNamespaceName, objectNamespace) Then
        Return objectNamespace
    End If
    Return csdlNamespaceName
End Function
Private Sub UpdateObjectNamespaceMap(objectNamespace As String)
    If Not objectNamespace = ModelNamespace AndAlso Not EdmToObjectNamespaceMap.ContainsKey(ModelNamespace)
        EdmToObjectNamespaceMap.Add(ModelNamespace, objectNamespace)
    End If
End Sub
Private Shared Function FixParameterName(ByVal name As String, ByVal code As CodeGenerationTools) As String
    ' 
    ' 
    If StringComparer.OrdinalIgnoreCase.Equals(name, "id") Then
        ' 
        Return "id"
    End If
    Return code.CamelCase(name)
End Function
Private Function BaseTypeName(ByVal entity As EntityType, ByVal code As CodeGenerationTools) As String
    Return If(entity.BaseType Is Nothing, "EntityObject", MultiSchemaEscape(DirectCast(entity.BaseType, StructuralType), code))
End Function
Private Function IncludePropertyInFactoryMethod(ByVal factoryType As StructuralType, ByVal edmProperty As EdmProperty) As Boolean
    If edmProperty.Nullable Then
        Return False
    End If
    If edmProperty.DefaultValue IsNot Nothing Then
        Return False
    End If
    If (Accessibility.ForReadOnlyProperty(edmProperty) <> "Public" AndAlso Accessibility.ForWriteOnlyProperty(edmProperty) <> "Public") OrElse (factoryType IsNot edmProperty.DeclaringType AndAlso Accessibility.ForWriteOnlyProperty(edmProperty) = "Private") Then
        ' 
        Return False
    End If
    Return True
End Function
Private Class FactoryMethodParameter
    Public Source As EdmProperty
    Public RawParameterName As String
    Public ParameterName As String
    Public ParameterType As String
    Public ParameterComment As String
    Public IsComplexType As Boolean
    Public Shared Function CreateParameters(ByVal properties As IEnumerable(Of EdmProperty), ByVal unique As UniqueIdentifierService, ByVal multiSchemaEscape As Func(Of TypeUsage, CodeGenerationTools, String), ByVal code As CodeGenerationTools) As IEnumerable(Of FactoryMethodParameter)
        Dim parameters As New List(Of FactoryMethodParameter)()
        For Each edmProperty As EdmProperty In properties
            Dim parameter As New FactoryMethodParameter()
            parameter.Source = edmProperty
            parameter.IsComplexType = TypeOf edmProperty.TypeUsage.EdmType Is ComplexType
            parameter.RawParameterName = unique.AdjustIdentifier(FixParameterName(edmProperty.Name, code))
            parameter.ParameterName = code.Escape(parameter.RawParameterName)
            parameter.ParameterType = multiSchemaEscape(edmProperty.TypeUsage, code)
            parameter.ParameterComment = String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_CommentFactoryMethodParam"), edmProperty.Name)
            parameters.Add(parameter)
        Next
        Return parameters
    End Function
End Class
Private Property DefaultSummaryComment() As String
Private Function SummaryComment(ByVal item As MetadataItem) As String
    If item.Documentation IsNot Nothing AndAlso item.Documentation.Summary IsNot Nothing Then
        Return PrefixLinesOfMultilineComment(XMLCOMMENT_START & " ", XmlEntityize(item.Documentation.Summary))
    End If
    If DefaultSummaryComment IsNot Nothing Then
        Return DefaultSummaryComment
    End If
    Return String.Empty
End Function
Private Function LongDescriptionCommentElement(ByVal item As MetadataItem, ByVal indentLevel As Integer) As String
    If item.Documentation IsNot Nothing AndAlso Not String.IsNullOrEmpty(item.Documentation.LongDescription) Then
        Dim comment As String = Environment.NewLine
        Dim lineStart As String = CodeRegion.GetIndent(indentLevel) + XMLCOMMENT_START & " "
        comment += (lineStart & "<LongDescription>") + Environment.NewLine
        comment += lineStart + PrefixLinesOfMultilineComment(lineStart, XmlEntityize(item.Documentation.LongDescription)) + Environment.NewLine
        comment += lineStart & "</LongDescription>"
        Return comment
    End If
    Return String.Empty
End Function
Private Function PrefixLinesOfMultilineComment(ByVal prefix As String, ByVal comment As String) As String
    Return comment.Replace(Environment.NewLine, Environment.NewLine + prefix)
End Function
Private Function ParameterComments(ByVal parameters As IEnumerable(Of Tuple(Of String, String)), ByVal indentLevel As Integer) As String
    Dim builder As New System.Text.StringBuilder()
    For Each parameter As Tuple(Of String, String) In parameters
        builder.AppendLine()
        builder.Append(CodeRegion.GetIndent(indentLevel))
        builder.Append(XMLCOMMENT_START)
        builder.Append(String.Format(CultureInfo.InvariantCulture, " <param name=""{0}"">{1}</param>", parameter.Item1, parameter.Item2))
    Next
    Return builder.ToString()
End Function
Private Function XmlEntityize(ByVal text As String) As String
    If String.IsNullOrEmpty(text) Then
        Return String.Empty
    End If
    text = text.Replace("&", "&amp;")
    text = text.Replace("<", "&lt;").Replace(">", "&gt;")
    Dim id As String = Guid.NewGuid().ToString()
    text = text.Replace(Environment.NewLine, id)
    text = text.Replace(vbCr, "&#xD;").Replace(vbLf, "&#xA;")
    text = text.Replace(id, Environment.NewLine)
    Return text.Replace("'", "&apos;").Replace("""", "&quot;")
End Function
Const XMLCOMMENT_START As String = "'''"
Private Function GetProperties(ByVal type As StructuralType) As IEnumerable(Of EdmProperty)
    If type.BuiltInTypeKind = BuiltInTypeKind.EntityType Then
        Return DirectCast(type, EntityType).Properties
    Else
        Return DirectCast(type, ComplexType).Properties
    End If
End Function
    ''''''''
    '''''''' 
    ''''''''
Private Function GetGlobalItemName(item As GlobalItem) As String
    If TypeOf item Is EdmType Then
        ' 
        Return CType(item, EdmType).Name
    Else
        ' 
        Return CType(item, EntityContainer).Name
    End If
End Function
Protected Sub VerifyGetterAndSetterAccessibilityCompatability(ByVal member As EdmMember)
    Dim rawGetterAccessibility As String = Accessibility.ForReadOnlyProperty(member)
    Dim rawSetterAccessibility As String = Accessibility.ForWriteOnlyProperty(member)
    If (rawGetterAccessibility = "Friend" AndAlso rawSetterAccessibility = "Protected") OrElse (rawGetterAccessibility = "Protected" AndAlso rawSetterAccessibility = "Friend") Then
        Errors.Add(New System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6033", String.Format(CultureInfo.CurrentCulture, GetResourceString("GeneratedPropertyAccessibilityConflict"), member.Name, rawGetterAccessibility, rawSetterAccessibility)))
    End If
End Sub
Private Sub VerifyEntityTypeAndSetAccessibilityCompatability(ByVal entitySet As EntitySet)
    Dim typeAccess As String = Accessibility.ForType(entitySet.ElementType)
    Dim setAccess As String = Accessibility.ForReadOnlyProperty(entitySet)
    If typeAccess = "Friend" AndAlso (setAccess = "Public" OrElse setAccess = "Protected") Then
        Errors.Add(New System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6036", String.Format(CultureInfo.CurrentCulture, GetResourceString("EntityTypeAndSetAccessibilityConflict"), entitySet.ElementType.Name, typeAccess, entitySet.Name, setAccess)))
    End If
End Sub
Private Sub VerifyCaseInsensitiveTypeUniqueness()
    VerifyCaseInsensitiveUniqueness(GetSourceSchemaTypes(Of GlobalItem)().Where(Function(i) TypeOf i is StructuralType OrElse TypeOf i is EntityContainer), _
        Function(g) GetGlobalItemName(g), _
        Function(g) String.Format(CultureInfo.CurrentCulture, _
            GetResourceString("Template_CaseInsensitiveTypeConflict"), GetGlobalItemName(g)))
End Sub
Private Sub VerifyCaseInsensitiveEntitySetUniqueness(entitySets As IEnumerable(Of EntitySet))
    VerifyCaseInsensitiveUniqueness(entitySets, Function(e) e.Name, _
        Function(e) String.Format(CultureInfo.CurrentCulture, _
            GetResourceString("Template_CaseInsensitiveEntitySetConflict"), e.EntityContainer.Name, e.Name))
End Sub
Private Sub VerifyCaseInsensitiveMemberUniqueness(members As IEnumerable(Of EdmMember))
    VerifyCaseInsensitiveUniqueness(members, Function(m) m.Name, _
        Function(m) String.Format(CultureInfo.CurrentCulture, _
            GetResourceString("Template_CaseInsensitiveMemberConflict"), m.DeclaringType.FullName, m.Name))
End Sub
Private Sub VerifyCaseInsensitiveUniqueness(Of T As MetadataItem)(items As IEnumerable(Of T), getIdentity As Func(Of T, String), formatMessage As Func(Of T, String) )
    Dim hash As HashSet(Of String) = New HashSet(Of String)(StringComparer.InvariantCultureIgnoreCase)
    For Each item As MetadataItem in items
        If Not hash.Add(getIdentity(item)) Then
            ' 
            Errors.Add(New System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, 6023, formatMessage(item)))
        End If
    Next
End Sub
Public Function GetAllDeclaredMembers(structural As StructuralType) As IEnumerable(Of EdmMember)
    If(TypeOf structural Is EntityType) Then
        Dim entity As EntityType = CType(structural, EntityType)
        Dim declaredMembers As IEnumerable(Of EdmMember) = entity.Members.Where(Function(m) m.DeclaringType Is entity)
        Dim decalredNavigationProperties As IEnumerable(Of NavigationProperty) = entity.NavigationProperties.Where(Function(n) n.DeclaringType Is entity)
        Return declaredMembers.Union(decalredNavigationProperties.Cast(Of EdmMember)())
    End If
    Return structural.Members.Where(Function(m) m.DeclaringType Is structural)
End Function
Private Sub DefineMetadata()
    TemplateMetadata(MetadataConstants.TT_TEMPLATE_NAME) = "VBCodeGen"
    TemplateMetadata(MetadataConstants.TT_TEMPLATE_VERSION) = "4.0"
    TemplateMetadata(MetadataConstants.TT_MINIMUM_ENTITY_FRAMEWORK_VERSION) = "4.0"
End Sub
Private NotInheritable Class UniqueIdentifierService
    Private ReadOnly _knownIdentifiers As HashSet(Of String) = New HashSet(Of string)(StringComparer.OrdinalIgnoreCase)
    ''' <summary>
    ''' 
    ''' 
    ''' </summary>
    Public Function AdjustIdentifier(identifier As String) As String
        ' 
        Dim numberOfConflicts As Int32 = 0
        Dim adjustedIdentifier As String = identifier
        While Not _knownIdentifiers.Add(adjustedIdentifier)
            numberOfConflicts += 1
            adjustedIdentifier = identifier + numberOfConflicts.ToString(CultureInfo.InvariantCulture)
        End While
        Return adjustedIdentifier
    End Function
End Class
' Copyright (c) Microsoft Corporation.  All rights reserved.
Public Shared TemplateMetadata As New Dictionary(Of String, String)()
''' <summary>
''' Responsible for helping to create source code that is
''' correctly formated and functional
''' </summary>
Public Class CodeGenerationTools
    Private ReadOnly _textTransformation As DynamicTextTransformation
    Private ReadOnly _code As VBCodeProvider
    Private ReadOnly _ef As MetadataTools
    ''' <summary>
    ''' Initializes a new CodeGenerationTools object with the TextTransformation (T4 generated class)
    ''' that is currently running.
    ''' </summary>
    Public Sub New(ByVal textTransformation As Object)
        If textTransformation Is Nothing Then
            Throw New ArgumentNullException("textTransformation")
        End If
        _textTransformation = DynamicTextTransformation.Create(textTransformation)
        _code = New VBCodeProvider()
        _ef = New MetadataTools(_textTransformation)
        FullyQualifySystemTypes = False
        CamelCaseFields = True
    End Sub
    ''' <summary>
    ''' When true, all types that are not being generated
    ''' are fully qualified to keep them from conflicting with
    ''' types that are being generated. Useful when you have
    ''' something like a type being generated named System.
    '''
    ''' Default is false.
    ''' </summary>
    Private _FullyQualifySystemTypes As Boolean
    Public Property FullyQualifySystemTypes() As Boolean
        Get
            Return _FullyQualifySystemTypes
        End Get
        Set(ByVal value As Boolean)
            _FullyQualifySystemTypes = value
        End Set
    End Property
    ''' <summary>
    ''' When true, the field names are Camel Cased,
    ''' otherwise they will preserve the case they
    ''' start with.
    '''
    ''' Default is true.
    ''' </summary>
    Private _CamelCaseFields As Boolean
    Public Property CamelCaseFields() As Boolean
        Get
            Return _CamelCaseFields
        End Get
        Set(ByVal value As Boolean)
            _CamelCaseFields = value
        End Set
    End Property
    ''' <summary>
    ''' Returns the NamespaceName suggested by VS if running inside VS. Otherwise, returns
    ''' null.
    ''' </summary>
    Public Function VsNamespaceSuggestion() As String
        Dim suggestion As String = _textTransformation.Host.ResolveParameterValue("directiveId", "namespaceDirectiveProcessor", "namespaceHint")
        If String.IsNullOrEmpty(suggestion) Then
            Return Nothing
        End If
        Return suggestion
    End Function
    ''' <summary>
    ''' Returns a string that is safe for use as an identifier in C#.
    ''' Keywords are escaped.
    ''' </summary>
    Public Function Escape(ByVal name As String) As String
        If name Is Nothing Then
            Return Nothing
        End If
        Return _code.CreateEscapedIdentifier(name)
    End Function
    ''' <summary>
    ''' Returns the name of the TypeUsage's EdmType that is safe for
    ''' use as an identifier.
    ''' </summary>
    Public Function Escape(ByVal typeUsage As TypeUsage) As String
        If typeUsage Is Nothing Then
            Return Nothing
        End If
        If TypeOf typeUsage.EdmType Is ComplexType OrElse TypeOf typeUsage.EdmType Is EntityType Then
            Return Escape(typeUsage.EdmType.Name)
        ElseIf TypeOf typeUsage.EdmType Is SimpleType Then
            Dim clrType As Type = _ef.UnderlyingClrType(typeUsage.EdmType)
            Dim typeName As String = If(TypeOf typeUsage.EdmType Is EnumType, Escape(typeUsage.EdmType.Name), Escape(clrType))
            If clrType.IsValueType AndAlso _ef.IsNullable(typeUsage) Then
                Return String.Format(CultureInfo.InvariantCulture, "Nullable(Of {0})", typeName)
            End If
            Return typeName
        ElseIf TypeOf typeUsage.EdmType Is CollectionType Then
            Return String.Format(CultureInfo.InvariantCulture, "ICollection(Of {0})", Escape(DirectCast(typeUsage.EdmType, CollectionType).TypeUsage))
        End If
        Throw New ArgumentException("typeUsage")
    End Function
    ''' <summary>
    ''' Returns the name of the EdmMember that is safe for
    ''' use as an identifier.
    ''' </summary>
    Public Function Escape(ByVal member As EdmMember) As String
        If member Is Nothing Then
            Return Nothing
        End If
        Return Escape(member.Name)
    End Function
    ''' <summary>
    ''' Returns the name of the EdmType that is safe for
    ''' use as an identifier.
    ''' </summary>
    Public Function Escape(ByVal type As EdmType) As String
        If type Is Nothing Then
            Return Nothing
        End If
        Return Escape(type.Name)
    End Function
    ''' <summary>
    ''' Returns the name of the EdmFunction that is safe for
    ''' use as an identifier.
    ''' </summary>
    Public Function Escape(ByVal edmFunction As EdmFunction) As String
        If edmFunction Is Nothing Then
            Return Nothing
        End If
        Return Escape(edmFunction.Name)
    End Function
    ''' <summary>
    ''' Returns the name of the EnumMember that is safe for
    ''' use as an identifier.
    ''' </summary>
    Public Function Escape(ByVal member As EnumMember) As String
        If member Is Nothing Then
            Return Nothing
        End If
        Return Escape(member.Name)
    End Function
    ''' <summary>
    ''' Returns the name of the EntityContainer that is safe for
    ''' use as an identifier.
    ''' </summary>
    Public Function Escape(ByVal container As EntityContainer) As String
        If container Is Nothing Then
            Return Nothing
        End If
        Return Escape(container.Name)
    End Function
    ''' <summary>
    ''' Returns the name of the EntitySet that is safe for
    ''' use as an identifier.
    ''' </summary>
    Public Function Escape(ByVal edmSet As EntitySet) As String
        If edmSet Is Nothing Then
            Return Nothing
        End If
        Return Escape(edmSet.Name)
    End Function
    ''' <summary>
    ''' Returns the name of the StructuralType that is safe for
    ''' use as an identifier.
    ''' </summary>
    Public Function Escape(ByVal type As StructuralType) As String
        If type Is Nothing Then
            Return Nothing
        End If
        Return Escape(type.Name)
    End Function
    ''' <summary>
    ''' Returns the NamespaceName with each segment safe to
    ''' use as an identifier.
    ''' </summary>
    Public Function EscapeNamespace(ByVal namespaceName As String) As String
        If String.IsNullOrEmpty(namespaceName) Then
            Return namespaceName
        End If
        Dim parts As String() = namespaceName.Split("."c)
        namespaceName = String.Empty
        For Each part As String In parts
            If namespaceName <> String.Empty Then
                namespaceName += "."
            End If
            namespaceName += Escape(part)
        Next
        Return namespaceName
    End Function
    ''' <summary>
    ''' Returns the name of the EdmMember formatted for
    ''' use as a field identifier.
    '''
    ''' This method changes behavior based on the CamelCaseFields
    ''' setting.
    ''' </summary>
    Public Function FieldName(ByVal member As EdmMember) As String
        If member Is Nothing Then
            Return Nothing
        End If
        Return FieldName(member.Name)
    End Function
    ''' <summary>
    ''' Returns the name of the EntitySet formatted for
    ''' use as a field identifier.
    '''
    ''' This method changes behavior based on the CamelCaseFields
    ''' setting.
    ''' </summary>
    Public Function FieldName(ByVal edmSet As EntitySet) As String
        If edmSet Is Nothing Then
            Return Nothing
        End If
        Return FieldName(edmSet.Name)
    End Function
    Private Function FieldName(ByVal name As String) As String
        If CamelCaseFields Then
            Return "_" & CamelCase(name)
        Else
            Return "_" & name
        End If
    End Function
    ''' <summary>
    ''' Returns the name of the Type object formatted for
    ''' use in source code.
    '''
    ''' This method changes behavior based on the FullyQualifySystemTypes
    ''' setting.
    ''' </summary>
    Public Function Escape(ByVal clrType As Type) As String
        Return Escape(clrType, FullyQualifySystemTypes)
    End Function
    ''' <summary>
    ''' Returns the name of the Type object formatted for
    ''' use in source code.
    ''' </summary>
    Public Function Escape(ByVal clrType As Type, ByVal fullyQualifySystemTypes As Boolean) As String
        If clrType Is Nothing Then
            Return Nothing
        End If
        Dim typeName As String
        If fullyQualifySystemTypes Then
            If(Not clrType.IsArray) Then
                typeName = clrType.FullName
            Else
                typeName = clrType.GetElementType().FullName & "()"
            End If
            typeName = "Global." & typeName
        Else
            typeName = _code.GetTypeOutput(New CodeTypeReference(clrType))
        End If
        Return typeName
    End Function
    ''' <summary>
    ''' Returns the abstract option if the entity is Abstract, otherwise returns String.Empty
    ''' </summary>
    Public Function MustInheritOption(entity As EntityType) As String
        If entity.Abstract Then
            Return "MustInherit"
        End If
        Return String.Empty
    End Function
    ''' <summary>
    ''' Returns the passed in identifier with the first letter changed to lowercase
    ''' </summary>
    Public Function CamelCase(ByVal identifier As String) As String
        If String.IsNullOrEmpty(identifier) Then
            Return identifier
        End If
        If identifier.Length = 1 Then
            Return identifier(0).ToString(CultureInfo.InvariantCulture).ToLowerInvariant()
        End If
        Return identifier(0).ToString(CultureInfo.InvariantCulture).ToLowerInvariant() + identifier.Substring(1)
    End Function
    ''' <summary>
    ''' If the value parameter is null or empty an empty string is returned,
    ''' otherwise it retuns value with a single space concatenated on the end.
    ''' </summary>
    Public Function SpaceAfter(ByVal value As String) As String
        Return StringAfter(value, " ")
    End Function
    ''' <summary>
    ''' If the value parameter is null or empty an empty string is returned,
    ''' otherwise it retuns value with a single space concatenated on the end.
    ''' </summary>
    Public Function SpaceBefore(ByVal value As String) As String
        Return StringBefore(" ", value)
    End Function
    ''' <summary>
    ''' If the value parameter is null or empty an empty string is returned,
    ''' otherwise it retuns value with append concatenated on the end.
    ''' </summary>
    Public Function StringAfter(ByVal value As String, ByVal append As String) As String
        If String.IsNullOrEmpty(value) Then
            Return String.Empty
        End If
        Return value + append
    End Function
    ''' <summary>
    ''' If the value parameter is null or empty an empty string is returned,
    ''' otherwise it retuns value with prepend concatenated on the front.
    ''' </summary>
    Public Function StringBefore(ByVal prepend As String, ByVal value As String) As String
        If String.IsNullOrEmpty(value) Then
            Return String.Empty
        End If
        Return prepend + value
    End Function
    ''' <summary>
    ''' Returns false and shows an error if the supplied type names aren't case-insensitively unique,
    ''' otherwise returns true.
    ''' </summary>
    Public Function VerifyCaseInsensitiveTypeUniqueness(types As IEnumerable(Of String), ByVal sourceFile As String) As Boolean
        Return VerifyCaseInsensitiveUniqueness(types, _
            Function(t) String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_CaseInsensitiveTypeConflict"), t), sourceFile)
    End Function
    ''' <summary>
    ''' Returns false and shows an error if the supplied entity set names aren't case-insensitively unique,
    ''' otherwise returns true.
    ''' </summary>
    Public Function VerifyCaseInsensitiveEntitySetUniqueness(entitySets As IEnumerable(Of String), ByVal entityContainerName As String, ByVal sourceFile As String) As Boolean
        Return VerifyCaseInsensitiveUniqueness(entitySets, Function(e) String.Format(CultureInfo.CurrentCulture, _
                GetResourceString("Template_CaseInsensitiveEntitySetConflict"), entityContainerName, e), sourceFile)
    End Function
    ''' <summary>
    ''' Returns false and shows an error if the supplied type members names aren't case-insensitively unique,
    ''' otherwise returns true.
    ''' </summary>
    Public Function VerifyCaseInsensitiveMemberUniqueness(members As IEnumerable(Of String), ByVal declaringType As String, ByVal sourceFile As String) As Boolean
        Return VerifyCaseInsensitiveUniqueness(members, _
            Function(m) String.Format(CultureInfo.CurrentCulture, _
                GetResourceString("Template_CaseInsensitiveMemberConflict"), declaringType, m), sourceFile)
    End Function
    ''' <summary>
    ''' Returns false and shows an error if the supplied strings aren't case-insensitively unique,
    ''' otherwise returns true.
    ''' </summary>
    Private Function VerifyCaseInsensitiveUniqueness(items As IEnumerable(Of String), formatMessage As Func(Of String, String), ByVal sourceFile As String) As Boolean
        Dim hash As HashSet(Of String) = New HashSet(Of String)(StringComparer.InvariantCultureIgnoreCase)
        For Each item As String in items
            If Not hash.Add(item) Then
                _textTransformation.Errors.Add(New System.CodeDom.Compiler.CompilerError(sourceFile, -1, -1, 6023, formatMessage(item)))
                Return False
            End If
        Next
        Return True
    End Function
    ''' <summary>
    ''' Returns the names of the items in the supplied collection that correspond to O-Space types.
    ''' </summary>
    Public Function GetAllGlobalItems(ByVal itemCollection As EdmItemCollection) As IEnumerable(Of String)
        Return itemCollection.GetItems(Of GlobalItem)() _
                .Where(Function(i) TypeOf i Is EntityType OrElse TypeOf i Is ComplexType OrElse TypeOf i Is EnumType OrElse TypeOf i is EntityContainer) _
                .Select(Function(g) GetGlobalItemName(g))
    End Function
    ''' <summary>
    ''' Returns the name of the supplied GlobalItem.
    ''' </summary>
    Private Function GetGlobalItemName(item As GlobalItem) As String
        If TypeOf item Is EdmType Then
            Return CType(item, EdmType).Name
        Else
            Return CType(item, EntityContainer).Name
        End If
    End Function
    ''' <summary>
    ''' Returns the names of the members of the supplied EdmType.
    ''' </summary>
    Public Function GetAllDeclaredMembers(edmType As EdmType) As IEnumerable(Of String)
        Dim entity As EntityType = TryCast(edmType, EntityType)
        If Not entity Is Nothing Then
            Dim declaredMembers As IEnumerable(Of EdmMember) = entity.Members.Where(Function(m) m.DeclaringType Is entity)
            Dim decalredNavigationProperties As IEnumerable(Of NavigationProperty) = entity.NavigationProperties.Where(Function(n) n.DeclaringType Is entity)
            Return declaredMembers.Union(decalredNavigationProperties.Cast(Of EdmMember)()).Select(Function(m) m.Name)
        End If
        Dim structural As StructuralType = TryCast(edmType, StructuralType)
        If Not structural Is Nothing Then
            Return structural.Members.Where(Function(m) m.DeclaringType Is structural).Select(Function(m) m.Name)
        End If
        Dim enumType As EnumType = TryCast(edmType, EnumType)
        If Not enumType Is Nothing Then
            Return enumType.Members.Select(Function(m) m.Name)
        End If
        Return Enumerable.Empty(Of String)()
    End Function
    ''' <summary>
    ''' Retuns as full of a name as possible, if a namespace is provided
    ''' the namespace and name are combined with a period, otherwise just
    ''' the name is returned.
    ''' </summary>
    Public Function CreateFullName(ByVal namespaceName As String, ByVal name As String) As String
        If String.IsNullOrEmpty(namespaceName) Then
            Return name
        End If
        Return (namespaceName & ".") + name
    End Function
    ''' <summary>
    ''' Retuns a literal representing the supplied value.
    ''' </summary>
    Public Function CreateLiteral(ByVal value As Object) As String
        If value Is Nothing Then
            Return String.Empty
        End If
        Dim type As Type = value.GetType()
        If type.IsEnum Then
            Return (type.FullName & ".") + value.ToString()
        End If
        If type Is GetType(Guid) Then
            Return String.Format(CultureInfo.InvariantCulture, "New Guid(""{0}"")", DirectCast(value, Guid).ToString("D", CultureInfo.InvariantCulture))
        ElseIf type Is GetType(DateTime) Then
            Return String.Format(CultureInfo.InvariantCulture, "New DateTime({0}, DateTimeKind.Unspecified)", DirectCast(value, DateTime).Ticks)
        ElseIf type Is GetType(Byte()) Then
            Dim arrayInit As String = String.Join(", ", DirectCast(value, Byte()).Select(Function(b) b.ToString(CultureInfo.InvariantCulture)).ToArray())
            Return String.Format(CultureInfo.InvariantCulture, "New Byte() {{{0}}}", arrayInit)
        ElseIf type Is GetType(DateTimeOffset) Then
            Dim dto As DateTimeOffset = DirectCast(value, DateTimeOffset)
            Return String.Format(CultureInfo.InvariantCulture, "New DateTimeOffset({0}, New TimeSpan({1}))", dto.Ticks, dto.Offset.Ticks)
        ElseIf type Is GetType(Decimal) Then
            Return String.Format(CultureInfo.InvariantCulture, "{0}D", DirectCast(value, Decimal).ToString(CultureInfo.InvariantCulture))
        ElseIf type Is GetType(TimeSpan) Then
            Return String.Format(CultureInfo.InvariantCulture, "New TimeSpan({0})", DirectCast(value, TimeSpan).Ticks)
        End If
        Dim expression As CodePrimitiveExpression = New CodePrimitiveExpression(value)
        Dim writer As StringWriter = New StringWriter()
        Dim code As VBCodeProvider = New VBCodeProvider()
        code.GenerateCodeFromExpression(expression, writer, New CodeGeneratorOptions())
        Return writer.ToString()
    End Function
    ''' <summary>
    ''' Returns a resource string from the System.Data.Entity.Design assembly.
    ''' </summary>
    Public Shared Function GetResourceString(resourceName As String, Optional culture As CultureInfo = Nothing) As String
        If _resourceManager Is Nothing Then
            _resourceManager = New System.Resources.ResourceManager("System.Data.Entity.Design", GetType(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly)
        End If
        Return _resourceManager.GetString(resourceName, culture)
    End Function
    Shared Private _resourceManager As System.Resources.ResourceManager
    Private Const ExternalTypeNameAttributeName As String = "http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName"
    ''' <summary>
    ''' Gets the entity, complex, or enum types for which code should be generated from the given item collection.
    ''' Any types for which an ExternalTypeName annotation has been applied in the conceptual model
    ''' metadata (CSDL) are filtered out of the returned list.
    ''' </summary>
    ''' <typeparam name="T">The type of item to return.</typeparam>
    ''' <param name="itemCollection">The item collection to look in.</param>
    ''' <returns>The items to generate.</returns>
    Public Function GetItemsToGenerate(Of T As GlobalItem)(itemCollection As ItemCollection) As IEnumerable(Of T)
        Return itemCollection.GetItems(Of T)().Where(Function(i) Not i.MetadataProperties.Any(Function(p) p.Name = ExternalTypeNameAttributeName))
    End Function
    ''' <summary>
    ''' Returns the escaped type name to use for the given usage of an o-space type. This might be
    ''' an external type name if the ExternalTypeName annotation has been specified in the
    ''' conceptual model metadata (CSDL).
    ''' </summary>
    ''' <param name="typeUsage">The o-space type usage to get a name for.</param>
    ''' <returns>The type name to use.</returns>
    Public Function GetTypeName(typeUsage As TypeUsage) As String
        Return If(typeUsage Is Nothing, Nothing, GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace := Nothing))
    End Function
    ''' <summary>
    ''' Returns the escaped type name to use for the given o-space type. This might be
    ''' an external type name if the ExternalTypeName annotation has been specified in the
    ''' conceptual model metadata (CSDL).
    ''' </summary>
    ''' <param name="edmType">The o-space type to get a name for.</param>
    ''' <returns>The type name to use.</returns>
    Public Function GetTypeName(edmType As EdmType) As String
        Return GetTypeName(edmType, isNullable := Nothing, modelNamespace := Nothing)
    End Function
    ''' <summary>
    ''' Returns the escaped type name to use for the given usage of an o-space type. This might be
    ''' an external type name if the ExternalTypeName annotation has been specified in the
    ''' conceptual model metadata (CSDL).
    ''' </summary>
    ''' <param name="typeUsage">The o-space type usage to get a name for.</param>
    ''' <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
    ''' fully qualified name will be returned.</param>
    ''' <returns>The type name to use.</returns>
    Public Function GetTypeName(typeUsage As TypeUsage, modelNamespace As String) As String
        Return If(typeUsage Is Nothing, Nothing, GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace))
    End Function
    ''' <summary>
    ''' Returns the escaped type name to use for the given o-space type. This might be
    ''' an external type name if the ExternalTypeName annotation has been specified in the
    ''' conceptual model metadata (CSDL).
    ''' </summary>
    ''' <param name="edmType">The o-space type to get a name for.</param>
    ''' <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
    ''' fully qualified name will be returned.</param>
    ''' <returns>The type name to use.</returns>
    Public Function GetTypeName(edmType As EdmType, modelNamespace As String) As String
        Return GetTypeName(edmType, isNullable := Nothing, modelNamespace := modelNamespace)
    End Function
    ''' <summary>
    ''' Returns the escaped type name to use for the given o-space type. This might be
    ''' an external type name if the ExternalTypeName annotation has been specified in the
    ''' conceptual model metadata (CSDL).
    ''' </summary>
    ''' <param name="edmType">The o-space type to get a name for.</param>
    ''' <param name="isNullable">Set this to true for nullable usage of this type.</param>
    ''' <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
    ''' fully qualified name will be returned.</param>
    ''' <returns>The type name to use.</returns>
    Private Function GetTypeName(edmType As EdmType, isNullable As System.Nullable(Of Boolean), modelNamespace As String) As String
        If edmType Is Nothing Then
            Return Nothing
        End If
        Dim collectionType = TryCast(edmType, CollectionType)
        If collectionType IsNot Nothing Then
            Return String.Format(CultureInfo.InvariantCulture, "ICollection( Of {0})", GetTypeName(collectionType.TypeUsage, modelNamespace))
        End If
        Dim typeName = If(Escape(edmType.MetadataProperties.Where(Function(p) p.Name = ExternalTypeNameAttributeName).[Select](Function(p) DirectCast(p.Value, String)).FirstOrDefault()), (If(modelNamespace IsNot Nothing AndAlso edmType.NamespaceName <> modelNamespace, CreateFullName(EscapeNamespace(edmType.NamespaceName), Escape(edmType)), Escape(edmType))))
        If TypeOf edmType Is StructuralType Then
            Return typeName
        End If
        If TypeOf edmType Is SimpleType Then
            Dim clrType = _ef.UnderlyingClrType(edmType)
            If Not (TypeOf edmType Is EnumType) Then
                typeName = Escape(clrType)
            End If
            Return If(clrType.IsValueType AndAlso isNullable = True, String.Format(CultureInfo.InvariantCulture, "Nullable(Of {0})", typeName), typeName)
        End If
        Throw New ArgumentException("typeUsage")
    End Function
End Class
''' <summary>
''' Responsible for making the Entity Framework Metadata more
''' accessible for code generation.
''' </summary>
Public Class MetadataTools
    Private ReadOnly _textTransformation As DynamicTextTransformation
    ''' <summary>
    ''' Initializes an MetadataTools Instance with the
    ''' TextTransformation (T4 generated class) that is currently running
    ''' </summary>
    Public Sub New(ByVal textTransformation As Object)
        If textTransformation Is Nothing Then
            Throw New ArgumentNullException("textTransformation")
        End If
        _textTransformation = DynamicTextTransformation.Create(textTransformation)
    End Sub
    ''' <summary>
    ''' This method returns the underlying CLR type of the O-space type corresponding to the supplied <paramref name="typeUsage"/>
    ''' Note that for an enum type this means that the type backing the enum will be returned, not the enum type itself.
    ''' </summary>
    Public Function ClrType(typeUsage As TypeUsage) As Type
        Return UnderlyingClrType(typeUsage.EdmType)
    End Function
    ''' <summary>
    ''' This method returns the underlying CLR type of given the O-space type.
    ''' Note that for an enum type this means that the type backing the enum will be returned, not the enum type itself.
    ''' </summary>
    Public Function UnderlyingClrType(edmType As EdmType) As Type
        Dim primitiveType = TryCast(edmType, PrimitiveType)
        If primitiveType IsNot Nothing Then
            Return primitiveType.ClrEquivalentType
        End If
        Dim enumType = TryCast(edmType, EnumType)
        If enumType IsNot Nothing Then
            Return enumType.UnderlyingType.ClrEquivalentType
        End If
        Return GetType(Object)
    End Function
    ''' <summary>
    ''' True if the EdmProperty is a key of its DeclaringType, False otherwise.
    ''' </summary>
    Public Function IsKey(ByVal edmProp As EdmProperty) As Boolean
        If edmProp IsNot Nothing AndAlso edmProp.DeclaringType.BuiltInTypeKind = BuiltInTypeKind.EntityType Then
            Return DirectCast(edmProp.DeclaringType, EntityType).KeyMembers.Contains(edmProp)
        End If
        Return False
    End Function
    ''' <summary>
    ''' True if the EdmProperty TypeUsage is Nullable, False otherwise.
    ''' </summary>
    Public Function IsNullable(ByVal edmProp As EdmProperty) As Boolean
        Return edmProp IsNot Nothing AndAlso IsNullable(edmProp.TypeUsage)
    End Function
    ''' <summary>
    ''' True if the TypeUsage is Nullable, False otherwise.
    ''' </summary>
    Public Function IsNullable(ByVal typeUsage As TypeUsage) As Boolean
        Dim nullableFacet As Facet = Nothing
        If typeUsage IsNot Nothing AndAlso typeUsage.Facets.TryGetValue("Nullable", True, nullableFacet) Then
            Return CBool(nullableFacet.Value)
        End If
        Return False
    End Function
    ''' <summary>
    ''' If the passed in TypeUsage represents a collection this method returns final element
    ''' type of the collection, otherwise it returns the value passed in.
    ''' </summary>
    Public Function GetElementType(ByVal typeUsage As TypeUsage) As TypeUsage
        If typeUsage Is Nothing Then
            Return Nothing
        End If
        If TypeOf typeUsage.EdmType Is CollectionType Then
            Return GetElementType(DirectCast(typeUsage.EdmType, CollectionType).TypeUsage)
        Else
            Return typeUsage
        End If
    End Function
    ''' <summary>
    ''' Returns the NavigationProperty that is the other end of the same association set if it is
    ''' available, otherwise it returns null.
    ''' </summary>
    Public Function Inverse(ByVal navProperty As NavigationProperty) As NavigationProperty
        If navProperty Is Nothing Then
            Return Nothing
        End If
        Dim toEntity As EntityType = navProperty.ToEndMember.GetEntityType()
        Return toEntity.NavigationProperties.SingleOrDefault(Function(n) n.RelationshipType Is navProperty.RelationshipType AndAlso n IsNot navProperty)
    End Function
    ''' <summary>
    ''' Given a property on the dependent end of a referential constraint, returns the corresponding property on the principal end.
    ''' Requires: The association has a referential constraint, and the specified dependentProperty is one of the properties on the dependent end.
    ''' </summary>
    Public Function GetCorrespondingPrincipalProperty(ByVal navProperty As NavigationProperty, ByVal dependentProperty As EdmProperty) As EdmProperty
        If navProperty Is Nothing Then
            Throw New ArgumentNullException("navProperty")
        End If
        If dependentProperty Is Nothing Then
            Throw New ArgumentNullException("dependentProperty")
        End If
        Dim fromProperties As ReadOnlyMetadataCollection(Of EdmProperty) = GetPrincipalProperties(navProperty)
        Dim toProperties As ReadOnlyMetadataCollection(Of EdmProperty) = GetDependentProperties(navProperty)
        Return fromProperties(toProperties.IndexOf(dependentProperty))
    End Function
    ''' <summary>
    ''' Given a property on the principal end of a referential constraint, returns the corresponding property on the dependent end.
    ''' Requires: The association has a referential constraint, and the specified principalProperty is one of the properties on the principal end.
    ''' </summary>
    Public Function GetCorrespondingDependentProperty(ByVal navProperty As NavigationProperty, ByVal principalProperty As EdmProperty) As EdmProperty
        If navProperty Is Nothing Then
            Throw New ArgumentNullException("navProperty")
        End If
        If principalProperty Is Nothing Then
            Throw New ArgumentNullException("principalProperty")
        End If
        Dim fromProperties As ReadOnlyMetadataCollection(Of EdmProperty) = GetPrincipalProperties(navProperty)
        Dim toProperties As ReadOnlyMetadataCollection(Of EdmProperty) = GetDependentProperties(navProperty)
        Return toProperties(fromProperties.IndexOf(principalProperty))
    End Function
    ''' <summary>
    ''' Gets the collection of properties that are on the principal end of a referential constraint for the specified navigation property.
    ''' Requires: The association has a referential constraint.
    ''' </summary>
    Public Function GetPrincipalProperties(ByVal navProperty As NavigationProperty) As ReadOnlyMetadataCollection(Of EdmProperty)
        If navProperty Is Nothing Then
            Throw New ArgumentNullException("navProperty")
        End If
        Return DirectCast(navProperty.RelationshipType, AssociationType).ReferentialConstraints(0).FromProperties
    End Function
    ''' <summary>
    ''' Gets the collection of properties that are on the dependent end of a referential constraint for the specified navigation property.
    ''' Requires: The association has a referential constraint.
    ''' </summary>
    Public Function GetDependentProperties(ByVal navProperty As NavigationProperty) As ReadOnlyMetadataCollection(Of EdmProperty)
        If navProperty Is Nothing Then
            Throw New ArgumentNullException("navProperty")
        End If
        Return DirectCast(navProperty.RelationshipType, AssociationType).ReferentialConstraints(0).ToProperties
    End Function
    ''' <summary>
    ''' True if this entity type requires the HandleCascadeDelete method defined and the method has
    ''' not been defined on any base type
    ''' </summary>
    Public Function NeedsHandleCascadeDeleteMethod(itemCollection As ItemCollection, entity As EntityType) As Boolean
        Dim needsMethod As Boolean = ContainsCascadeDeleteAssociation(itemCollection, entity)
        ' Check to make sure no base types have already declared this method
        Dim baseType As EntityType = TryCast(entity.BaseType, EntityType)
        While needsMethod AndAlso baseType IsNot Nothing
            needsMethod = Not ContainsCascadeDeleteAssociation(itemCollection, baseType)
            baseType = TryCast(baseType.BaseType, EntityType)
        End While
        Return needsMethod
    End Function
    ''' <summary>
    ''' True if this entity type participates in any relationships where the other end has an OnDelete
    ''' cascade delete defined, or if it is the dependent in any identifying relationships
    ''' </summary>
    Private Function ContainsCascadeDeleteAssociation(itemCollection As ItemCollection, entity As EntityType) As Boolean
        Return itemCollection.GetItems(Of AssociationType)().Where(Function(a) DirectCast(a.AssociationEndMembers(0).TypeUsage.EdmType, RefType).ElementType Is entity AndAlso IsCascadeDeletePrincipal(a.AssociationEndMembers(1)) OrElse DirectCast(a.AssociationEndMembers(1).TypeUsage.EdmType, RefType).ElementType Is entity AndAlso IsCascadeDeletePrincipal(a.AssociationEndMembers(0))).Any()
    End Function
    ''' <summary>
    ''' True if the source end of the specified navigation property is the principal in an identifying relationship.
    ''' or if the source end has cascade delete defined.
    ''' </summary>
    Public Function IsCascadeDeletePrincipal(ByVal navProperty As NavigationProperty) As Boolean
        If navProperty Is Nothing Then
            Throw New ArgumentNullException("navProperty")
        End If
        Return IsCascadeDeletePrincipal(DirectCast(navProperty.FromEndMember, AssociationEndMember))
    End Function
    ''' <summary>
    ''' True if the specified association end is the principal in an identifying relationship.
    ''' or if the association end has cascade delete defined.
    ''' </summary>
    Public Function IsCascadeDeletePrincipal(ByVal associationEnd As AssociationEndMember) As Boolean
        If associationEnd Is Nothing Then
            Throw New ArgumentNullException("associationEnd")
        End If
        Return associationEnd.DeleteBehavior = OperationAction.Cascade OrElse IsPrincipalEndOfIdentifyingRelationship(associationEnd)
    End Function
    ''' <summary>
    ''' True if the specified association end is the principal end in an identifying relationship.
    ''' In order to be an identifying relationship, the association must have a referential constraint where all of the dependent properties are part of the dependent type's primary key.
    ''' </summary>
    Public Function IsPrincipalEndOfIdentifyingRelationship(ByVal associationEnd As AssociationEndMember) As Boolean
        If associationEnd Is Nothing Then
            Throw New ArgumentNullException("associationEnd")
        End If
        Dim refConstraint As ReferentialConstraint = DirectCast(associationEnd.DeclaringType, AssociationType).ReferentialConstraints.Where(Function(rc) rc.FromRole Is associationEnd).SingleOrDefault()
        If refConstraint IsNot Nothing Then
            Dim entity As EntityType = refConstraint.ToRole.GetEntityType()
            Return Not refConstraint.ToProperties.Where(Function(tp) Not entity.KeyMembers.Contains(tp)).Any()
        End If
        Return False
    End Function
    ''' <summary>
    ''' True if the specified association type is an identifying relationship.
    ''' In order to be an identifying relationship, the association must have a referential constraint where all of the dependent properties are part of the dependent type's primary key.
    ''' </summary>
    Public Function IsIdentifyingRelationship(ByVal association As AssociationType) As Boolean
        If association Is Nothing Then
            Throw New ArgumentNullException("association")
        End If
        Return IsPrincipalEndOfIdentifyingRelationship(association.AssociationEndMembers(0)) OrElse IsPrincipalEndOfIdentifyingRelationship(association.AssociationEndMembers(1))
    End Function
    ''' <summary>
    ''' requires: firstType is not null
    ''' effects: if secondType is among the base types of the firstType, return true,
    ''' otherwise returns false.
    ''' when firstType is same as the secondType, return false.
    ''' </summary>
    Public Function IsSubtypeOf(ByVal firstType As EdmType, ByVal secondType As EdmType) As Boolean
        If secondType Is Nothing Then
            Return False
        End If
        ' walk up firstType hierarchy list
        Dim t As EdmType = firstType.BaseType
        While t IsNot Nothing
            If t.Equals(secondType) Then
                Return True
            End If
            t = t.BaseType
        End While
        Return False
    End Function
    ''' <summary>
    ''' Returns the subtype of the EntityType in the current itemCollection
    ''' </summary>
    Public Function GetSubtypesOf(ByVal type As EntityType, ByVal itemCollection As ItemCollection, ByVal includeAbstractTypes As Boolean) As IEnumerable(Of EntityType)
        Dim subTypes As List(Of EntityType) = New List(Of EntityType)
        If type IsNot Nothing Then
            Dim typesInCollection As IEnumerable(Of EntityType) = itemCollection.GetItems(Of EntityType)()
            For Each typeInCollection As EntityType In typesInCollection
                If type.Equals(typeInCollection) = False AndAlso Me.IsSubtypeOf(typeInCollection, type) Then
                    If includeAbstractTypes OrElse Not typeInCollection.Abstract Then
                        subTypes.Add(typeInCollection)
                    End If
                End If
            Next
        End If
        Return subTypes
    End Function
    Public Shared Function TryGetStringMetadataPropertySetting(ByVal item As MetadataItem, ByVal propertyName As String, ByRef value As String) As Boolean
        Dim [property] As MetadataProperty = item.MetadataProperties.FirstOrDefault(Function(p) p.Name = propertyName)
        If [property] IsNot Nothing Then
            value = DirectCast([property].Value, String)
        End If
        Return value IsNot Nothing
    End Function
End Class
''' <summary>
''' Responsible for loading an EdmItemCollection from a .edmx file or .csdl files
''' </summary>
Public Class MetadataLoader
    Private ReadOnly _textTransformation As DynamicTextTransformation
    ''' <summary>
    ''' Initializes an MetadataLoader Instance with the
    ''' TextTransformation (T4 generated class) that is currently running
    ''' </summary>
    Public Sub New(ByVal textTransformation As Object)
        If textTransformation Is Nothing Then
            Throw New ArgumentNullException("textTransformation")
        End If
        _textTransformation = DynamicTextTransformation.Create(textTransformation)
    End Sub
    ''' <summary>
    ''' Load the metadata for Edm, Store, and Mapping collections and register them
    ''' with a new MetadataWorkspace, returns false if any of the parts can't be
    ''' created, some of the ItemCollections may be registered and usable even if false is
    ''' returned
    ''' </summary>
    Public Function TryLoadAllMetadata(ByVal inputFile As String, ByRef metadataWorkspace As MetadataWorkspace) As Boolean
        metadataWorkspace = New MetadataWorkspace()
        Dim edmItemCollection As EdmItemCollection = CreateEdmItemCollection(inputFile)
        metadataWorkspace.RegisterItemCollection(edmItemCollection)
        Dim storeItemCollection As StoreItemCollection = Nothing
        If TryCreateStoreItemCollection(inputFile, storeItemCollection) Then
            Dim storageMappingItemCollection As StorageMappingItemCollection = Nothing
            If TryCreateStorageMappingItemCollection(inputFile, edmItemCollection, storeItemCollection, storageMappingItemCollection) Then
                metadataWorkspace.RegisterItemCollection(storeItemCollection)
                metadataWorkspace.RegisterItemCollection(storageMappingItemCollection)
                Return True
            End If
        End If
        Return False
    End Function
    ''' <summary>
    ''' Create an EdmItemCollection loaded with the metadata provided
    ''' </summary>
    Public Function CreateEdmItemCollection(ByVal sourcePath As String, ByVal ParamArray referenceSchemas As String()) As EdmItemCollection
        Dim edmItemCollection As EdmItemCollection = Nothing
        If TryCreateEdmItemCollection(sourcePath, referenceSchemas, edmItemCollection) Then
            Return edmItemCollection
        End If
        Return New EdmItemCollection()
    End Function
    ''' <summary>
    ''' Attempts to create a EdmItemCollection from the specified metadata file
    ''' </summary>
    Public Function TryCreateEdmItemCollection(ByVal sourcePath As String, ByRef edmItemCollection As EdmItemCollection) As Boolean
        Return TryCreateEdmItemCollection(sourcePath, Nothing, edmItemCollection)
    End Function
    ''' <summary>
    ''' Attempts to create a EdmItemCollection from the specified metadata file
    ''' </summary>
    Public Function TryCreateEdmItemCollection(ByVal sourcePath As String, ByVal referenceSchemas As String(), ByRef edmItemCollection As EdmItemCollection) As Boolean
        edmItemCollection = Nothing
        If Not ValidateInputPath(sourcePath, _textTransformation) Then
            Return False
        End If
        If referenceSchemas Is Nothing Then
            referenceSchemas = New String(-1) {}
        End If
        Dim itemCollection As ItemCollection = Nothing
        sourcePath = _textTransformation.Host.ResolvePath(sourcePath)
        Dim collectionBuilder As New EdmItemCollectionBuilder(_textTransformation, referenceSchemas.Select(Function(s) _textTransformation.Host.ResolvePath(s)).Where(Function(s) s <> sourcePath))
        If collectionBuilder.TryCreateItemCollection(sourcePath, itemCollection) Then
            edmItemCollection = DirectCast(itemCollection, EdmItemCollection)
        End If
        Return edmItemCollection IsNot Nothing
    End Function
    ''' <summary>
    ''' Attempts to create a StoreItemCollection from the specified metadata file
    ''' </summary>
    Public Function TryCreateStoreItemCollection(ByVal sourcePath As String, ByRef storeItemCollection As StoreItemCollection) As Boolean
        storeItemCollection = Nothing
        If Not ValidateInputPath(sourcePath, _textTransformation) Then
            Return False
        End If
        Dim itemCollection As ItemCollection = Nothing
        Dim collectionBuilder As New StoreItemCollectionBuilder(_textTransformation)
        If collectionBuilder.TryCreateItemCollection(_textTransformation.Host.ResolvePath(sourcePath), itemCollection) Then
            storeItemCollection = DirectCast(itemCollection, StoreItemCollection)
        End If
        Return storeItemCollection IsNot Nothing
    End Function
    ''' <summary>
    ''' Attempts to create a StorageMappingItemCollection from the specified metadata file, EdmItemCollection, and StoreItemCollection
    ''' </summary>
    Public Function TryCreateStorageMappingItemCollection(ByVal sourcePath As String, ByVal edmItemCollection As EdmItemCollection, ByVal storeItemCollection As StoreItemCollection, ByRef storageMappingItemCollection As StorageMappingItemCollection) As Boolean
        storageMappingItemCollection = Nothing
        If Not ValidateInputPath(sourcePath, _textTransformation) Then
            Return False
        End If
        If edmItemCollection Is Nothing Then
            Throw New ArgumentNullException("edmItemCollection")
        End If
        If storeItemCollection Is Nothing Then
            Throw New ArgumentNullException("storeItemCollection")
        End If
        Dim itemCollection As ItemCollection = Nothing
        Dim collectionBuilder As New StorageMappingItemCollectionBuilder(_textTransformation, edmItemCollection, storeItemCollection)
        If collectionBuilder.TryCreateItemCollection(_textTransformation.Host.ResolvePath(sourcePath), itemCollection) Then
            storageMappingItemCollection = DirectCast(itemCollection, StorageMappingItemCollection)
        End If
        Return storageMappingItemCollection IsNot Nothing
    End Function
    ''' <summary>
    ''' Gets the Model Namespace from the provided schema file.
    ''' </summary>
    Public Function GetModelNamespace(ByVal sourcePath As String) As String
        If Not ValidateInputPath(sourcePath, _textTransformation) Then
            Return String.Empty
        End If
        Dim builder As New EdmItemCollectionBuilder(_textTransformation)
        Dim model As XElement = Nothing
        If builder.TryLoadRootElement(_textTransformation.Host.ResolvePath(sourcePath), model) Then
            Dim attribute As XAttribute = model.Attribute("Namespace")
            If attribute IsNot Nothing Then
                Return attribute.Value
            End If
        End If
        Return String.Empty
    End Function
    ''' <summary>
    ''' Returns true if the specified file path is valid
    ''' </summary>
    Private Shared Function ValidateInputPath(sourcePath As String, textTransformation As DynamicTextTransformation) As Boolean
        If String.IsNullOrEmpty(sourcePath) Then
            Throw New ArgumentException("sourcePath")
        End If
        If sourcePath = "$edmxInputFile$" Then
            textTransformation.Errors.Add(New CompilerError(If(textTransformation.Host.TemplateFile, CodeGenerationTools.GetResourceString("Template_CurrentlyRunningTemplate")), -1, -1, String.Empty, _
                CodeGenerationTools.GetResourceString("Template_ReplaceVsItemTemplateToken")))
            Return False
        End If
        Return True
    End Function
    ''' <summary>
    ''' base class for ItemCollectionBuilder classes that
    ''' load the specific types of metadata
    ''' </summary>
    Private MustInherit Class ItemCollectionBuilder
        Private ReadOnly _textTransformation As DynamicTextTransformation
        Private ReadOnly _fileExtension As String
        Private ReadOnly _edmxSectionName As String
        Private ReadOnly _rootElementName As String
        ''' <summary>
        ''' FileExtension for individual (non-edmx) metadata file for this
        ''' specific ItemCollection type
        ''' </summary>
        Public ReadOnly Property FileExtension() As String
            Get
                Return _fileExtension
            End Get
        End Property
        ''' <summary>
        ''' The name of the XmlElement in the .edmx <Runtime> element
        ''' to find this ItemCollection's metadata
        ''' </summary>
        Public ReadOnly Property EdmxSectionName() As String
            Get
                Return _edmxSectionName
            End Get
        End Property
        ''' <summary>
        ''' The name of the root element of this ItemCollection's metadata
        ''' </summary>
        Public ReadOnly Property RootElementName() As String
            Get
                Return _rootElementName
            End Get
        End Property
        ''' <summary>
        ''' Method to build the appropriate ItemCollection
        ''' </summary>
        Protected MustOverride Function CreateItemCollection(ByVal readers As IEnumerable(Of XmlReader), ByRef errors As IList(Of EdmSchemaError)) As ItemCollection
        ''' <summary>
        ''' Ctor to setup the ItemCollectionBuilder members
        ''' </summary>
        Protected Sub New(ByVal textTransformation As DynamicTextTransformation, ByVal fileExtension As String, ByVal edmxSectionName As String, ByVal rootElementName As String)
            _textTransformation = textTransformation
            _fileExtension = fileExtension
            _edmxSectionName = edmxSectionName
            _rootElementName = rootElementName
        End Sub
        ''' <summary>
        ''' Selects a namespace from the supplied constants.
        ''' </summary>
        Protected MustOverride Function GetNamespace(ByVal constants As SchemaConstants) As String
        ''' <summary>
        ''' Try to create an ItemCollection loaded with the metadata provided
        ''' </summary>
        Public Function TryCreateItemCollection(ByVal sourcePath As String, ByRef itemCollection As ItemCollection) As Boolean
            itemCollection = Nothing
            If Not ValidateInputPath(sourcePath, _textTransformation) Then
                Return False
            End If
            Dim schemaElement As XElement = Nothing
            If TryLoadRootElement(sourcePath, schemaElement) Then
                Dim readers As New List(Of XmlReader)()
                Try
                    readers.Add(schemaElement.CreateReader())
                    Dim errors As IList(Of EdmSchemaError) = Nothing
                    Dim tempItemCollection As ItemCollection = CreateItemCollection(readers, errors)
                    If ProcessErrors(errors, sourcePath) Then
                        Return False
                    End If
                    itemCollection = tempItemCollection
                    Return True
                Finally
                    For Each reader As XmlReader In readers
                        DirectCast(reader, IDisposable).Dispose()
                    Next
                End Try
            End If
            Return False
        End Function
        ''' <summary>
        ''' Tries to load the root element from the metadata file provided
        ''' </summary>
        Public Function TryLoadRootElement(ByVal sourcePath As String, ByRef schemaElement As XElement) As Boolean
            schemaElement = Nothing
            Dim extension As String = Path.GetExtension(sourcePath)
            If extension.Equals(".edmx", StringComparison.InvariantCultureIgnoreCase) Then
                Return TryLoadRootElementFromEdmx(sourcePath, schemaElement)
            ElseIf extension.Equals(FileExtension, StringComparison.InvariantCultureIgnoreCase) Then
                ' load from single metadata file (.csdl, .ssdl, or .msl)
                schemaElement = XElement.Load(sourcePath, LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)
                Return True
            End If
            Return False
        End Function
        ''' <summary>
        ''' Tries to load the root element from the provided edmxDocument
        ''' </summary>
        Private Function TryLoadRootElementFromEdmx(ByVal edmxDocument As XElement, ByVal schemaConstants As SchemaConstants, ByVal sectionName As String, ByVal rootElementName As String, ByRef rootElement As XElement) As Boolean
            rootElement = Nothing
            Dim edmxNs As XNamespace = schemaConstants.EdmxNamespace
            Dim sectionNs As XNamespace = GetNamespace(schemaConstants)
            Dim runtime As XElement = edmxDocument.Element(edmxNs + "Runtime")
            If runtime Is Nothing Then
                Return False
            End If
            Dim section As XElement = runtime.Element(edmxNs + sectionName)
            If section Is Nothing Then
                Return False
            End If
            Dim templateVersion As String = Nothing
            If Not TemplateMetadata.TryGetValue(MetadataConstants.TT_TEMPLATE_VERSION, templateVersion) Then
                templateVersion = MetadataConstants.DEFAULT_TEMPLATE_VERSION
            End If
            If schemaConstants.MinimumTemplateVersion > New Version(templateVersion) Then
                _textTransformation.Errors.Add(New CompilerError(If(_textTransformation.Host.TemplateFile, CodeGenerationTools.GetResourceString("Template_CurrentlyRunningTemplate")), -1, -1, String.Empty, _
                    CodeGenerationTools.GetResourceString("Template_UnsupportedSchema")) With { _
                        .IsWarning = True _
                    })
            End If
            rootElement = section.Element(sectionNs + rootElementName)
            Return rootElement IsNot Nothing
        End Function
        ''' <summary>
        ''' Tries to load the root element from the provided .edmx metadata file
        ''' </summary>
        Private Function TryLoadRootElementFromEdmx(ByVal edmxPath As String, ByRef rootElement As XElement) As Boolean
            rootElement = Nothing
            Dim element As XElement = XElement.Load(edmxPath, LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)
            Return TryLoadRootElementFromEdmx(element, MetadataConstants.V3_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, rootElement) OrElse TryLoadRootElementFromEdmx(element, MetadataConstants.V2_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, rootElement) OrElse TryLoadRootElementFromEdmx(element, MetadataConstants.V1_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, rootElement)
        End Function
        ''' <summary>
        ''' Takes an Enumerable of EdmSchemaErrors, and adds them
        ''' to the errors collection of the template class
        ''' </summary>
        Private Function ProcessErrors(ByVal errors As IEnumerable(Of EdmSchemaError), ByVal sourceFilePath As String) As Boolean
            Dim foundErrors As Boolean = False
            For Each schemaError As EdmSchemaError In errors
                Dim newError As New CompilerError(schemaError.SchemaLocation, schemaError.Line, schemaError.Column, schemaError.ErrorCode.ToString(CultureInfo.InvariantCulture), schemaError.Message)
                newError.IsWarning = schemaError.Severity = EdmSchemaErrorSeverity.Warning
                foundErrors = foundErrors Or schemaError.Severity = EdmSchemaErrorSeverity.Error
                If schemaError.SchemaLocation Is Nothing Then
                    newError.FileName = sourceFilePath
                End If
                _textTransformation.Errors.Add(newError)
            Next
            Return foundErrors
        End Function
    End Class
    ''' <summary>
    ''' Builder class for creating a StorageMappingItemCollection
    ''' </summary>
    Private Class StorageMappingItemCollectionBuilder
        Inherits ItemCollectionBuilder
        Private ReadOnly _edmItemCollection As EdmItemCollection
        Private ReadOnly _storeItemCollection As StoreItemCollection
        Public Sub New(ByVal textTransformation As DynamicTextTransformation, ByVal edmItemCollection As EdmItemCollection, ByVal storeItemCollection As StoreItemCollection)
            MyBase.New(textTransformation, MetadataConstants.MSL_EXTENSION, MetadataConstants.MSL_EDMX_SECTION_NAME, MetadataConstants.MSL_ROOT_ELEMENT_NAME)
            _edmItemCollection = edmItemCollection
            _storeItemCollection = storeItemCollection
        End Sub
        Protected Overloads Overrides Function CreateItemCollection(ByVal readers As IEnumerable(Of XmlReader), ByRef errors As IList(Of EdmSchemaError)) As ItemCollection
            Return MetadataItemCollectionFactory.CreateStorageMappingItemCollection(_edmItemCollection, _storeItemCollection, readers, errors)
        End Function
        ''' <summary>
        ''' Selects a namespace from the supplied constants.
        ''' </summary>
        Protected Overrides Function GetNamespace(ByVal constants As SchemaConstants) As String
            Return constants.MslNamespace
        End Function
    End Class
    ''' <summary>
    ''' Builder class for creating a StoreItemCollection
    ''' </summary>
    Private Class StoreItemCollectionBuilder
        Inherits ItemCollectionBuilder
        Public Sub New(ByVal textTransformation As DynamicTextTransformation)
            MyBase.New(textTransformation, MetadataConstants.SSDL_EXTENSION, MetadataConstants.SSDL_EDMX_SECTION_NAME, MetadataConstants.SSDL_ROOT_ELEMENT_NAME)
        End Sub
        Protected Overloads Overrides Function CreateItemCollection(ByVal readers As IEnumerable(Of XmlReader), ByRef errors As IList(Of EdmSchemaError)) As ItemCollection
            Return MetadataItemCollectionFactory.CreateStoreItemCollection(readers, errors)
        End Function
        ''' <summary>
        ''' Selects a namespace from the supplied constants.
        ''' </summary>
        Protected Overrides Function GetNamespace(ByVal constants As SchemaConstants) As String
            Return constants.SsdlNamespace
        End Function
    End Class
    ''' <summary>
    ''' Builder class for creating a EdmItemCollection
    ''' </summary>
    Private Class EdmItemCollectionBuilder
        Inherits ItemCollectionBuilder
        Private _referenceSchemas As New List(Of String)()
        Public Sub New(ByVal textTransformation As DynamicTextTransformation)
            MyBase.New(textTransformation, MetadataConstants.CSDL_EXTENSION, MetadataConstants.CSDL_EDMX_SECTION_NAME, MetadataConstants.CSDL_ROOT_ELEMENT_NAME)
        End Sub
        Public Sub New(ByVal textTransformation As DynamicTextTransformation, ByVal referenceSchemas As IEnumerable(Of String))
            Me.New(textTransformation)
            _referenceSchemas.AddRange(referenceSchemas)
        End Sub
        Protected Overloads Overrides Function CreateItemCollection(ByVal readers As IEnumerable(Of XmlReader), ByRef errors As IList(Of EdmSchemaError)) As ItemCollection
            Dim ownedReaders As New List(Of XmlReader)()
            Dim allReaders As New List(Of XmlReader)()
            Try
                allReaders.AddRange(readers)
                For Each path As String In _referenceSchemas.Distinct()
                    Dim reference As XElement = Nothing
                    If TryLoadRootElement(path, reference) Then
                        Dim reader As XmlReader = reference.CreateReader()
                        allReaders.Add(reader)
                        ownedReaders.Add(reader)
                    End If
                Next
                Return MetadataItemCollectionFactory.CreateEdmItemCollection(allReaders, errors)
            Finally
                For Each reader As XmlReader In ownedReaders
                    DirectCast(reader, IDisposable).Dispose()
                Next
            End Try
        End Function
        ''' <summary>
        ''' Selects a namespace from the supplied constants.
        ''' </summary>
        Protected Overrides Function GetNamespace(ByVal constants As SchemaConstants) As String
            Return constants.CsdlNamespace
        End Function
    End Class
End Class
''' <summary>
''' Responsible for encapsulating the retrieval and translation of the CodeGeneration
''' annotations in the EntityFramework Metadata to a form that is useful in code generation.
''' </summary>
Public Class Accessibility
    Private Sub New()
    End Sub
    Private Const GETTER_ACCESS As String = "http://schemas.microsoft.com/ado/2006/04/codegeneration:GetterAccess"
    Private Const SETTER_ACCESS As String = "http://schemas.microsoft.com/ado/2006/04/codegeneration:SetterAccess"
    Private Const TYPE_ACCESS As String = "http://schemas.microsoft.com/ado/2006/04/codegeneration:TypeAccess"
    Private Const METHOD_ACCESS As String = "http://schemas.microsoft.com/ado/2006/04/codegeneration:MethodAccess"
    Private Const ACCESS_PROTECTED As String = "Protected"
    Private Const ACCESS_INTERNAL As String = "Internal"
    Private Const ACCESS_PRIVATE As String = "Private"
    Private Shared ReadOnly AccessibilityRankIdLookup As New Dictionary(Of String, Integer)() From _
        { _
            { "Private", 1}, _
            { "Friend", 2}, _
            { "Protected", 3}, _
            { "Public", 4} _
        }
    ''' <summary>
    ''' Gets the accessibility that should be applied to a type being generated from the provided GlobalItem.
    '''
    ''' defaults to public if no annotation is found.
    ''' </summary>
    Public Shared Function ForType(ByVal item As GlobalItem) As String
        If item Is Nothing Then
            Return Nothing
        End If
        Return GetAccessibility(item, TYPE_ACCESS)
    End Function
    ''' <summary>
    ''' Gets the accessibility that should be applied at the property level for a property being
    ''' generated from the provided EdmMember.
    '''
    ''' defaults to public if no annotation is found.
    ''' </summary>
    Public Shared Function ForProperty(ByVal member As EdmMember) As String
        If member Is Nothing Then
            Return Nothing
        End If
        Dim getterAccess As String = Nothing
        Dim setterAccess As String = Nothing
        Dim propertyAccess As String = Nothing
        CalculatePropertyAccessibility(member, propertyAccess, getterAccess, setterAccess)
        Return propertyAccess
    End Function
    ''' <summary>
    ''' Gets the accessibility that should be applied at the property level for a Read-Only property being
    ''' generated from the provided EdmMember.
    '''
    ''' defaults to public if no annotation is found.
    ''' </summary>
    Public Shared Function ForReadOnlyProperty(ByVal member As EdmMember) As String
        If member Is Nothing Then
            Return Nothing
        End If
        Return GetAccessibility(member, GETTER_ACCESS)
    End Function
    ''' <summary>
    ''' Gets the accessibility that should be applied at the property level for a property being
    ''' generated from the provided EntitySet.
    '''
    ''' defaults to public if no annotation is found.
    ''' </summary>
    Public Shared Function ForReadOnlyProperty(ByVal edmSet As EntitySet) As String
        If edmSet Is Nothing Then
            Return Nothing
        End If
        Return GetAccessibility(edmSet, GETTER_ACCESS)
    End Function
    ''' <summary>
    ''' Gets the accessibility that should be applied at the property level for a Write-Only property being
    ''' generated from the provided EdmMember.
    '''
    ''' defaults to public if no annotation is found.
    ''' </summary>
    Public Shared Function ForWriteOnlyProperty(ByVal member As EdmMember) As String
        If member Is Nothing Then
            Return Nothing
        End If
        Return GetAccessibility(member, SETTER_ACCESS)
    End Function
    ''' <summary>
    ''' Gets the accessibility that should be applied at the get level for a property being
    ''' generated from the provided EdmMember.
    '''
    ''' defaults to empty if no annotation is found or the accessibility is the same as the property level.
    ''' </summary>
    Public Shared Function ForGetter(ByVal member As EdmMember) As String
        If member Is Nothing Then
            Return Nothing
        End If
        Dim getterAccess As String = Nothing
        Dim setterAccess As String = Nothing
        Dim propertyAccess As String = Nothing
        CalculatePropertyAccessibility(member, propertyAccess, getterAccess, setterAccess)
        Return getterAccess
    End Function
    ''' <summary>
    ''' Gets the accessibility that should be applied at the set level for a property being
    ''' generated from the provided EdmMember.
    '''
    ''' defaults to empty if no annotation is found or the accessibility is the same as the property level.
    ''' </summary>
    Public Shared Function ForSetter(ByVal member As EdmMember) As String
        If member Is Nothing Then
            Return Nothing
        End If
        Dim getterAccess As String = Nothing
        Dim setterAccess As String = Nothing
        Dim propertyAccess As String = Nothing
        CalculatePropertyAccessibility(member, propertyAccess, getterAccess, setterAccess)
        Return setterAccess
    End Function
    ''' <summary>
    ''' Gets the accessibility that should be applied to a method being generated from the provided EdmFunction.
    '''
    ''' defaults to public if no annotation is found.
    ''' </summary>
    Public Shared Function ForMethod(ByVal edmFunction As EdmFunction) As String
        If edmFunction Is Nothing Then
            Return Nothing
        End If
        Return GetAccessibility(edmFunction, METHOD_ACCESS)
    End Function
    Private Shared Sub CalculatePropertyAccessibility(ByVal item As MetadataItem, ByRef propertyAccessibility As String, ByRef getterAccessibility As String, ByRef setterAccessibility As String)
        getterAccessibility = GetAccessibility(item, GETTER_ACCESS)
        Dim getterRank As Integer = AccessibilityRankIdLookup(getterAccessibility)
        setterAccessibility = GetAccessibility(item, SETTER_ACCESS)
        Dim setterRank As Integer = AccessibilityRankIdLookup(setterAccessibility)
        Dim propertyRank As Integer = Math.Max(getterRank, setterRank)
        If setterRank = propertyRank Then
            setterAccessibility = String.Empty
        End If
        If getterRank = propertyRank Then
            getterAccessibility = String.Empty
        End If
        propertyAccessibility = AccessibilityRankIdLookup.Where(Function(v) v.Value = propertyRank).Select(Function(v) v.Key).Single()
    End Sub
    Private Shared Function GetAccessibility(ByVal item As MetadataItem, ByVal name As String) As String
        Dim accessibility As String = Nothing
        If MetadataTools.TryGetStringMetadataPropertySetting(item, name, accessibility) Then
            Return TranslateUserAccessibilityToCSharpAccessibility(accessibility)
        End If
        Return "Public"
    End Function
    Private Shared Function TranslateUserAccessibilityToCSharpAccessibility(ByVal userAccessibility As String) As String
        If userAccessibility = ACCESS_PROTECTED Then
            Return "Protected"
        ElseIf userAccessibility = ACCESS_INTERNAL Then
            Return "Friend"
        ElseIf userAccessibility = ACCESS_PRIVATE Then
            Return "Private"
        Else
            ' default to public
            Return "Public"
        End If
    End Function
End Class
''' <summary>
''' Responsible for creating source code regions in code when the loop inside
''' actually produces something.
''' </summary>
Public Class CodeRegion
    Private Const STANDARD_INDENT_LENGTH As Integer = 4
    Private ReadOnly _textTransformation As DynamicTextTransformation
    Private _beforeRegionLength As Integer
    Private _emptyRegionLength As Integer
    Private _regionIndentLevel As Integer = -1
    ''' <summary>
    ''' Initializes an CodeRegion instance with the
    ''' TextTransformation (T4 generated class) that is currently running
    ''' </summary>
    Public Sub New(ByVal textTransformation As Object)
        If textTransformation Is Nothing Then
            Throw New ArgumentNullException("textTransformation")
        End If
        _textTransformation = DynamicTextTransformation.Create(textTransformation)
    End Sub
    ''' <summary>
    ''' Initializes an CodeRegion instance with the
    ''' TextTransformation (T4 generated class) that is currently running,
    ''' and the indent level to start the first region at.
    ''' </summary>
    Public Sub New(ByVal textTransformation As Object, ByVal firstIndentLevel As Integer)
        Me.New(textTransformation)
        If firstIndentLevel < 0 Then
            Throw New ArgumentException("firstIndentLevel")
        End If
        _regionIndentLevel = firstIndentLevel - 1
    End Sub
    ''' <summary>
    ''' Starts the begining of a region
    ''' </summary>
    Public Sub Begin(ByVal regionName As String)
        If regionName Is Nothing Then
            Throw New ArgumentNullException("regionName")
        End If
        Begin(regionName, 1)
    End Sub
    ''' <summary>
    ''' Start the begining of a region, indented
    ''' the numbers of levels specified
    ''' </summary>
    Public Sub Begin(ByVal regionName As String, ByVal levelsToIncreaseIndent As Integer)
        If regionName Is Nothing Then
            Throw New ArgumentNullException("regionName")
        End If
        _beforeRegionLength = _textTransformation.GenerationEnvironment.Length
        _regionIndentLevel += levelsToIncreaseIndent
        _textTransformation.Write(GetIndent(_regionIndentLevel))
        _textTransformation.WriteLine("#Region """ + regionName + """")
        _emptyRegionLength = _textTransformation.GenerationEnvironment.Length
    End Sub
    ''' <summary>
    ''' Ends a region, or totaly removes it if nothing
    ''' was generted since the begining of the region.
    ''' </summary>
    Public Sub [End]()
        [End](1)
    End Sub
    ''' <summary>
    ''' Ends a region, or totaly removes it if nothing
    ''' was generted since the begining of the region, also outdents
    ''' the number of levels specified.
    ''' </summary>
    Public Sub [End](ByVal levelsToDecrease As Integer)
        Dim indentLevel As Integer = _regionIndentLevel
        _regionIndentLevel -= levelsToDecrease
        If _emptyRegionLength = _textTransformation.GenerationEnvironment.Length Then
            _textTransformation.GenerationEnvironment.Length = _beforeRegionLength
        Else
            _textTransformation.WriteLine(String.Empty)
            _textTransformation.Write(GetIndent(indentLevel))
            _textTransformation.WriteLine("#End Region")
            _textTransformation.WriteLine(String.Empty)
        End If
    End Sub
    ''' <summary>
    ''' Gets the current indent level that the next end region statement will be written
    ''' at
    ''' </summary>
    Public ReadOnly Property CurrentIndentLevel() As Integer
        Get
            Return _regionIndentLevel
        End Get
    End Property
    ''' <summary>
    ''' Get a string of spaces equivelent to the number of indents
    ''' desired.
    ''' </summary>
    Public Shared Function GetIndent(ByVal indentLevel As Integer) As String
        If indentLevel < 0 Then
            Throw New ArgumentException("indentLevel")
        End If
        Return String.Empty.PadLeft(indentLevel * STANDARD_INDENT_LENGTH)
    End Function
End Class
''' <summary>
''' Responsible for collecting together the actual method parameters
''' and the parameters that need to be sent to the Execute method.
''' </summary>
Public Class FunctionImportParameter
Private _Source As FunctionParameter
    Public Property Source() As FunctionParameter
        Get
            Return _Source
        End Get
        Set(ByVal value As FunctionParameter)
            _Source = value
        End Set
    End Property
Private _RawFunctionParameterName As String
    Public Property RawFunctionParameterName() As String
        Get
            Return _RawFunctionParameterName
        End Get
        Set(ByVal value As String)
            _RawFunctionParameterName = value
        End Set
    End Property
Private _FunctionParameterName As String
    Public Property FunctionParameterName() As String
        Get
            Return _FunctionParameterName
        End Get
        Set(ByVal value As String)
            _FunctionParameterName = value
        End Set
    End Property
Private _FunctionParameterType As String
    Public Property FunctionParameterType() As String
        Get
            Return _FunctionParameterType
        End Get
        Set(ByVal value As String)
            _FunctionParameterType = value
        End Set
    End Property
Private _LocalVariableName As String
    Public Property LocalVariableName() As String
        Get
            Return _LocalVariableName
        End Get
        Set(ByVal value As String)
            _LocalVariableName = value
        End Set
    End Property
Private _RawClrTypeName As String
    Public Property RawClrTypeName() As String
        Get
            Return _RawClrTypeName
        End Get
        Set(ByVal value As String)
            _RawClrTypeName = value
        End Set
    End Property
Private _ExecuteParameterName As String
    Public Property ExecuteParameterName() As String
        Get
            Return _ExecuteParameterName
        End Get
        Set(ByVal value As String)
            _ExecuteParameterName = value
        End Set
    End Property
Private _EsqlParameterName As String
    Public Property EsqlParameterName() As String
        Get
            Return _EsqlParameterName
        End Get
        Set(ByVal value As String)
            _EsqlParameterName = value
        End Set
    End Property
Private _NeedsLocalVariable As Boolean
    Public Property NeedsLocalVariable() As Boolean
        Get
            Return _NeedsLocalVariable
        End Get
        Set(ByVal value As Boolean)
            _NeedsLocalVariable = value
        End Set
    End Property
Private _IsNullableOfT As Boolean
    Public Property IsNullableOfT() As Boolean
        Get
            Return _IsNullableOfT
        End Get
        Set(ByVal value As Boolean)
            _IsNullableOfT = value
        End Set
    End Property
    ''' <summary>
    ''' Creates a set of FunctionImportParameter objects from the parameters passed in.
    ''' </summary>
    Public Shared Function Create(ByVal parameters As IEnumerable(Of FunctionParameter), ByVal code As CodeGenerationTools, ByVal ef As MetadataTools) As IEnumerable(Of FunctionImportParameter)
        If parameters Is Nothing Then
            Throw New ArgumentNullException("parameters")
        End If
        If code Is Nothing Then
            Throw New ArgumentNullException("code")
        End If
        If ef Is Nothing Then
            Throw New ArgumentNullException("ef")
        End If
        Dim unique As New UniqueIdentifierService()
        Dim importParameters As New List(Of FunctionImportParameter)()
        For Each parameter As FunctionParameter In parameters
            Dim importParameter As New FunctionImportParameter()
            importParameter.Source = parameter
            importParameter.RawFunctionParameterName = unique.AdjustIdentifier(code.CamelCase(parameter.Name))
            importParameter.FunctionParameterName = code.Escape(importParameter.RawFunctionParameterName)
            If parameter.Mode = ParameterMode.In Then
                Dim typeUsage As TypeUsage = parameter.TypeUsage
                importParameter.NeedsLocalVariable = True
                importParameter.FunctionParameterType = code.GetTypeName(typeUsage)
                importParameter.EsqlParameterName = parameter.Name
                Dim clrType As Type = ef.UnderlyingClrType(parameter.TypeUsage.EdmType)
                importParameter.RawClrTypeName = If(TypeOf typeUsage.EdmType Is EnumType, code.GetTypeName(typeUsage.EdmType), code.Escape(clrType))
                importParameter.IsNullableOfT = clrType.IsValueType
            Else
                importParameter.NeedsLocalVariable = False
                importParameter.FunctionParameterType = "ObjectParameter"
                importParameter.ExecuteParameterName = importParameter.FunctionParameterName
            End If
            importParameters.Add(importParameter)
        Next
        ' we save the local parameter uniquification for a second pass to make the visible parameters
        ' as pretty and sensible as possible
        For i As Integer = 0 To importParameters.Count - 1
            Dim importParameter As FunctionImportParameter = importParameters(i)
            If importParameter.NeedsLocalVariable Then
                importParameter.LocalVariableName = unique.AdjustIdentifier(importParameter.RawFunctionParameterName & "Parameter")
                importParameter.ExecuteParameterName = importParameter.LocalVariableName
            End If
        Next
        Return importParameters
    End Function
    '
    ' Class to create unique variables within the same scope
    '
    Private NotInheritable Class UniqueIdentifierService
        Private ReadOnly _knownIdentifiers As HashSet(Of String)
        Public Sub New()
            _knownIdentifiers = New HashSet(Of String)(StringComparer.OrdinalIgnoreCase)
        End Sub
        ''' <summary>
        ''' Given an identifier, makes it unique within the scope by adding
        ''' a suffix (1, 2, 3, ...), and returns the adjusted identifier.
        ''' </summary>
        Public Function AdjustIdentifier(ByVal identifier As String) As String
            ' find a unique name by adding suffix as necessary
            Dim numberOfConflicts As Integer = 0
            Dim adjustedIdentifier As String = identifier
            While Not _knownIdentifiers.Add(adjustedIdentifier)
                numberOfConflicts += 1
                adjustedIdentifier = identifier + numberOfConflicts.ToString(CultureInfo.InvariantCulture)
            End While
            Return adjustedIdentifier
        End Function
    End Class
End Class
''' <summary>
''' Responsible for marking the various sections of the generation,
''' so they can be split up into separate files
''' </summary>
Public Class EntityFrameworkTemplateFileManager
    ''' <summary>
    ''' Creates the VsEntityFrameworkTemplateFileManager if VS is detected, otherwise
    ''' creates the file system version.
    ''' </summary>
    Public Shared Function Create(ByVal textTransformation As Object) As EntityFrameworkTemplateFileManager
        Dim transformation As DynamicTextTransformation = DynamicTextTransformation.Create(textTransformation)
        Dim host As IDynamicHost = transformation.Host
        #If Not PREPROCESSED_TEMPLATE Then
        Dim hostServiceProvider = host.AsIServiceProvider()
        If hostServiceProvider IsNot Nothing Then
            Dim dte = DirectCast(hostServiceProvider.GetService(GetType(EnvDTE.DTE)), EnvDTE.DTE)
            If dte IsNot Nothing Then
                Return New VsEntityFrameworkTemplateFileManager(transformation)
            End If
        End If
        #End If
        Return New EntityFrameworkTemplateFileManager(transformation)
    End Function
    Private NotInheritable Class Block
        Public Name As String
        Public Start As Integer, Length As Integer
    End Class
    Private ReadOnly files As New List(Of Block)()
    Private ReadOnly footer As New Block()
    Private ReadOnly header As New Block()
    Private ReadOnly _textTransformation As DynamicTextTransformation
    ' reference to the GenerationEnvironment StringBuilder on the
    ' TextTransformation object
    Private ReadOnly _generationEnvironment As StringBuilder
    Private m_currentBlock As Block
    ''' <summary>
    ''' Initializes an EntityFrameworkTemplateFileManager Instance  with the
    ''' TextTransformation (T4 generated class) that is currently running
    ''' </summary>
    Private Sub New(ByVal textTransformation As Object)
        If textTransformation Is Nothing Then
            Throw New ArgumentNullException("textTransformation")
        End If
        _textTransformation = DynamicTextTransformation.Create(textTransformation)
        _generationEnvironment = _textTransformation.GenerationEnvironment
    End Sub
    ''' <summary>
    ''' Marks the end of the last file if there was one, and starts a new
    ''' and marks this point in generation as a new file.
    ''' </summary>
    Public Sub StartNewFile(ByVal name As String)
        If name Is Nothing Then
            Throw New ArgumentNullException("name")
        End If
        CurrentBlock = New Block() With { .Name = name }
    End Sub
    Public Sub StartFooter()
        CurrentBlock = footer
    End Sub
    Public Sub StartHeader()
        CurrentBlock = header
    End Sub
    Public Sub EndBlock()
        If CurrentBlock Is Nothing Then
            Exit Sub
        End If
        CurrentBlock.Length = _generationEnvironment.Length - CurrentBlock.Start
        If CurrentBlock IsNot header AndAlso CurrentBlock IsNot footer Then
            files.Add(CurrentBlock)
        End If
        m_currentBlock = Nothing
    End Sub
    ''' <summary>
    ''' Produce the template output files.
    ''' </summary>
    Public Overridable Function Process(Optional split As Boolean = True) As IEnumerable(Of String)
        Dim generatedFileNames As List(Of String) = New List(Of String)()
        If split Then
            EndBlock()
            Dim headerText As String = _generationEnvironment.ToString(header.Start, header.Length)
            Dim footerText As String = _generationEnvironment.ToString(footer.Start, footer.Length)
            Dim outputPath As String = Path.GetDirectoryName(_textTransformation.Host.TemplateFile)
            files.Reverse()
            For Each block As Block In files
                Dim fileName As String = Path.Combine(outputPath, block.Name)
                Dim content = headerText + _generationEnvironment.ToString(block.Start, block.Length) + footerText
                generatedFileNames.Add(fileName)
                CreateFile(fileName, content)
                _generationEnvironment.Remove(block.Start, block.Length)
            Next
        End If
        Return generatedFileNames
    End Function
    Protected Overridable Sub CreateFile(ByVal fileName As String, ByVal content As String)
        If IsFileContentDifferent(fileName, content) Then
            File.WriteAllText(fileName, content)
        End If
    End Sub
    Protected Function IsFileContentDifferent(ByVal fileName As String, ByVal newContent As String) As Boolean
        Return Not (File.Exists(fileName) AndAlso File.ReadAllText(fileName) = newContent)
    End Function
    Private Property CurrentBlock() As Block
        Get
            Return m_currentBlock
        End Get
        Set(ByVal value As Block)
            If CurrentBlock IsNot Nothing Then
                EndBlock()
            End If
            If value IsNot Nothing Then
                value.Start = _generationEnvironment.Length
            End If
            m_currentBlock = value
        End Set
    End Property
    #If Not PREPROCESSED_TEMPLATE Then
    Private NotInheritable Class VsEntityFrameworkTemplateFileManager
        Inherits EntityFrameworkTemplateFileManager
        Private templateProjectItem As EnvDTE.ProjectItem
        Private dte As EnvDTE.DTE
        Private checkOutAction As Action(Of String)
        Private projectSyncAction As Action(Of IEnumerable(Of String))
        ''' <summary>
        ''' Creates an instance of the VsEntityFrameworkTemplateFileManager class with the IDynamicHost instance
        ''' </summary>
        Public Sub New(ByVal textTemplating As Object)
            MyBase.New(textTemplating)
            Dim hostServiceProvider = _textTransformation.Host.AsIServiceProvider()
            If hostServiceProvider Is Nothing Then
                Throw New ArgumentNullException("Could not obtain hostServiceProvider")
            End If
            dte = DirectCast(hostServiceProvider.GetService(GetType(EnvDTE.DTE)), EnvDTE.DTE)
            If dte Is Nothing Then
                Throw New ArgumentNullException("Could not obtain DTE from host")
            End If
            templateProjectItem = dte.Solution.FindProjectItem(_textTransformation.Host.TemplateFile)
            checkOutAction = Function(fileName) dte.SourceControl.CheckOutItem(fileName)
            projectSyncAction = Sub(keepFileNames) ProjectSync(templateProjectItem, keepFileNames)
        End Sub
        Public Overloads Overrides Function Process(Optional split As Boolean = True) As IEnumerable(Of String)
            If templateProjectItem.ProjectItems Is Nothing Then
                Return New List(Of String)
            End If
            Dim generatedFileNames As IEnumerable(Of String) = MyBase.Process(split)
            projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, Nothing, Nothing))
            Return generatedFileNames
        End Function
        Protected Overloads Overrides Sub CreateFile(ByVal fileName As String, ByVal content As String)
            If IsFileContentDifferent(fileName, content) Then
                CheckoutFileIfRequired(fileName)
                File.WriteAllText(fileName, content)
            End If
        End Sub
        Private Shared Sub ProjectSync(ByVal templateProjectItem As EnvDTE.ProjectItem, ByVal keepFileNames As IEnumerable(Of String))
            Dim keepFileNameSet = New HashSet(Of String)(keepFileNames)
            Dim projectFiles = New Dictionary(Of String, EnvDTE.ProjectItem)()
            Dim originalOutput = Path.GetFileNameWithoutExtension(templateProjectItem.FileNames(0))
            For Each projectItem As EnvDTE.ProjectItem In templateProjectItem.ProjectItems
                projectFiles.Add(projectItem.FileNames(0), projectItem)
            Next
            ' Remove unused items from the project
            For Each pair As KeyValuePair(Of String, EnvDTE.ProjectItem) In projectFiles
                If Not keepFileNames.Contains(pair.Key) _
                  AndAlso Not (Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalOutput + ".") Then
                    pair.Value.Delete()
                End If
            Next
            ' Add missing files to the project
            For Each fileName As String In keepFileNameSet
                If Not projectFiles.ContainsKey(fileName) Then
                    templateProjectItem.ProjectItems.AddFromFile(fileName)
                End If
            Next
        End Sub
        Private Sub CheckoutFileIfRequired(ByVal fileName As String)
            If dte.SourceControl Is Nothing OrElse Not dte.SourceControl.IsItemUnderSCC(fileName) OrElse dte.SourceControl.IsItemCheckedOut(fileName) Then
                Exit Sub
            End If
            ' run on worker thread to prevent T4 calling back into VS
            checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, Nothing, Nothing))
        End Sub
    End Class
    #End If
End Class
''' <summary>
''' Responsible creating an instance that can be passed
''' to helper classes that need to access the TextTransformation
''' members. It accesses member by name and signature rather than
''' by type. This is necessary when the
''' template is being used in Preprocessed mode
''' and there is no common known type that can be
''' passed instead
''' </summary>
Public Class DynamicTextTransformation
    Private _instance As Object
    Private _dynamicHost As IDynamicHost
    Private ReadOnly _write As MethodInfo
    Private ReadOnly _writeLine As MethodInfo
    Private ReadOnly _generationEnvironment As PropertyInfo
    Private ReadOnly _errors As PropertyInfo
    Private ReadOnly _host As PropertyInfo
    ''' <summary>
    ''' Creates an instance of the DynamicTextTransformation class around the passed in
    ''' TextTransformation shapped instance passed in, or if the passed in instance
    ''' already is a DynamicTextTransformation, it casts it and sends it back.
    ''' </summary>
    Public Shared Function Create(ByVal instance As Object) As DynamicTextTransformation
        If instance Is Nothing Then
            Throw New ArgumentNullException("instance")
        End If
        Dim textTransformation As DynamicTextTransformation = TryCast(instance, DynamicTextTransformation)
        If textTransformation IsNot Nothing Then
            Return textTransformation
        End If
        Return New DynamicTextTransformation(instance)
    End Function
    Private Sub New(ByVal instance As Object)
        _instance = instance
        Dim type As Type = _instance.GetType()
        _write = type.GetMethod("Write", New Type() {GetType(String)})
        _writeLine = type.GetMethod("WriteLine", New Type() {GetType(String)})
        _generationEnvironment = type.GetProperty("GenerationEnvironment", BindingFlags.Instance Or BindingFlags.NonPublic)
        _host = type.GetProperty("Host")
        _errors = type.GetProperty("Errors")
    End Sub
    ''' <summary>
    ''' Gets the value of the wrapped TextTranformation instance's GenerationEnvironment property
    ''' </summary>
    Public ReadOnly Property GenerationEnvironment() As StringBuilder
        Get
            Return DirectCast(_generationEnvironment.GetValue(_instance, Nothing), StringBuilder)
        End Get
    End Property
    ''' <summary>
    ''' Gets the value of the wrapped TextTranformation instance's Errors property
    ''' </summary>
    Public ReadOnly Property Errors() As System.CodeDom.Compiler.CompilerErrorCollection
        Get
            Return DirectCast(_errors.GetValue(_instance, Nothing), System.CodeDom.Compiler.CompilerErrorCollection)
        End Get
    End Property
    ''' <summary>
    ''' Calls the wrapped TextTranformation instance's Write method.
    ''' </summary>
    Public Sub Write(ByVal text As String)
        _write.Invoke(_instance, New Object() {text})
    End Sub
    ''' <summary>
    ''' Calls the wrapped TextTranformation instance's WriteLine method.
    ''' </summary>
    Public Sub WriteLine(ByVal text As String)
        _writeLine.Invoke(_instance, New Object() {text})
    End Sub
    ''' <summary>
    ''' Gets the value of the wrapped TextTranformation instance's Host property
    ''' if available (shows up when hostspecific is set to true in the template directive) and returns
    ''' the appropriate implementation of IDynamicHost
    ''' </summary>
    Public ReadOnly Property Host() As IDynamicHost
        Get
            If _dynamicHost Is Nothing Then
                If _host Is Nothing Then
                    _dynamicHost = New NullHost()
                Else
                    _dynamicHost = New DynamicHost(_host.GetValue(_instance, Nothing))
                End If
            End If
            Return _dynamicHost
        End Get
    End Property
End Class
''' <summary>
''' Reponsible for abstracting the use of Host between times
''' when it is available and not
''' </summary>
Public Interface IDynamicHost
    ''' <summary>
    ''' An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
    ''' </summary>
    Function ResolveParameterValue(ByVal id As String, ByVal name As String, ByVal otherName As String) As String
    ''' <summary>
    ''' An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
    ''' </summary>
    Function ResolvePath(ByVal path As String) As String
    ''' <summary>
    ''' An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
    ''' </summary>
    ReadOnly Property TemplateFile() As String
    ''' <summary>
    ''' Returns the Host instance cast as an IServiceProvider
    ''' </summary>
    Function AsIServiceProvider() As IServiceProvider
End Interface
''' <summary>
''' Reponsible for implementing the IDynamicHost as a dynamic
''' shape wrapper over the Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost interface
''' rather than type dependent wrapper. We don't use the
''' interface type so that the code can be run in preprocessed mode
''' on a .net framework only installed machine.
''' </summary>
Public Class DynamicHost
    Implements IDynamicHost
    Private ReadOnly _instance As Object
    Private ReadOnly _resolveParameterValue As MethodInfo
    Private ReadOnly _resolvePath As MethodInfo
    Private ReadOnly _templateFile As PropertyInfo
    ''' <summary>
    ''' Creates an instance of the DynamicHost class around the passed in
    ''' Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost shapped instance passed in.
    ''' </summary>
    Public Sub New(ByVal instance As Object)
        _instance = instance
        Dim type As Type = _instance.GetType()
        _resolveParameterValue = type.GetMethod("ResolveParameterValue", New Type() {GetType(String), GetType(String), GetType(String)})
        _resolvePath = type.GetMethod("ResolvePath", New Type() {GetType(String)})
        _templateFile = type.GetProperty("TemplateFile")
    End Sub
    ''' <summary>
    ''' A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
    ''' </summary>
    Public Function ResolveParameterValue(ByVal id As String, ByVal name As String, ByVal otherName As String) As String Implements IDynamicHost.ResolveParameterValue
        Return DirectCast(_resolveParameterValue.Invoke(_instance, New Object() {id, name, otherName}), String)
    End Function
    ''' <summary>
    ''' A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
    ''' </summary>
    Public Function ResolvePath(ByVal path As String) As String Implements IDynamicHost.ResolvePath
        Return DirectCast(_resolvePath.Invoke(_instance, New Object() {path}), String)
    End Function
    ''' <summary>
    ''' A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
    ''' </summary>
    Public ReadOnly Property TemplateFile() As String Implements IDynamicHost.TemplateFile
        Get
            Return DirectCast(_templateFile.GetValue(_instance, Nothing), String)
        End Get
    End Property
    ''' <summary>
    ''' Returns the Host instance cast as an IServiceProvider
    ''' </summary>
    Public Function AsIServiceProvider() As IServiceProvider Implements IDynamicHost.AsIServiceProvider
        Return TryCast(_instance, IServiceProvider)
    End Function
End Class
''' <summary>
''' Reponsible for implementing the IDynamicHost when the
''' Host property is not available on the TextTemplating type. The Host
''' property only exists when the hostspecific attribute of the template
''' directive is set to true.
''' </summary>
Public Class NullHost
    Implements IDynamicHost
    ''' <summary>
    ''' An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
    ''' that simply retuns null.
    ''' </summary>
    Public Function ResolveParameterValue(ByVal id As String, ByVal name As String, ByVal otherName As String) As String Implements IDynamicHost.ResolveParameterValue
        Return Nothing
    End Function
    ''' <summary>
    ''' An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
    ''' that simply retuns the path passed in.
    ''' </summary>
    Public Function ResolvePath(ByVal path As String) As String Implements IDynamicHost.ResolvePath
        Return path
    End Function
    ''' <summary>
    ''' An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
    ''' that returns null.
    ''' </summary>
    Public ReadOnly Property TemplateFile() As String Implements IDynamicHost.TemplateFile
        Get
            Return Nothing
        End Get
    End Property
    ''' <summary>
    ''' Returns null.
    ''' </summary>
    Public Function AsIServiceProvider() As IServiceProvider Implements IDynamicHost.AsIServiceProvider
        Return Nothing
    End Function
End Class
''' <summary>
''' Responsible for encapsulating the constants defined in Metadata
''' </summary>
Public NotInheritable Class MetadataConstants
    Private Sub New()
    End Sub
    Public Const CSDL_EXTENSION As String = ".csdl"
    Public Const CSDL_EDMX_SECTION_NAME As String = "ConceptualModels"
    Public Const CSDL_ROOT_ELEMENT_NAME As String = "Schema"
    Public Const EDM_ANNOTATION_09_02 As String = "http://schemas.microsoft.com/ado/2009/02/edm/annotation"
    Public Const SSDL_EXTENSION As String = ".ssdl"
    Public Const SSDL_EDMX_SECTION_NAME As String = "StorageModels"
    Public Const SSDL_ROOT_ELEMENT_NAME As String = "Schema"
    Public Const MSL_EXTENSION As String = ".msl"
    Public Const MSL_EDMX_SECTION_NAME As String = "Mappings"
    Public Const MSL_ROOT_ELEMENT_NAME As String = "Mapping"
    Public Const TT_TEMPLATE_NAME As String = "TemplateName"
    Public Const TT_TEMPLATE_VERSION As String = "TemplateVersion"
    Public Const TT_MINIMUM_ENTITY_FRAMEWORK_VERSION As String = "MinimumEntityFrameworkVersion"
    Public Const DEFAULT_TEMPLATE_VERSION As String = "4.0"
    Public Shared ReadOnly V1_SCHEMA_CONSTANTS As New SchemaConstants(
        "http://schemas.microsoft.com/ado/2007/06/edmx",
        "http://schemas.microsoft.com/ado/2006/04/edm",
        "http://schemas.microsoft.com/ado/2006/04/edm/ssdl",
        "urn:schemas-microsoft-com:windows:storage:mapping:CS",
        New Version("3.5"))
    Public Shared ReadOnly V2_SCHEMA_CONSTANTS As New SchemaConstants(
        "http://schemas.microsoft.com/ado/2008/10/edmx",
        "http://schemas.microsoft.com/ado/2008/09/edm",
        "http://schemas.microsoft.com/ado/2009/02/edm/ssdl",
        "http://schemas.microsoft.com/ado/2008/09/mapping/cs",
        New Version("4.0"))
    Public Shared ReadOnly V3_SCHEMA_CONSTANTS As New SchemaConstants(
        "http://schemas.microsoft.com/ado/2009/11/edmx",
        "http://schemas.microsoft.com/ado/2009/11/edm",
        "http://schemas.microsoft.com/ado/2009/11/edm/ssdl",
        "http://schemas.microsoft.com/ado/2009/11/mapping/cs",
        New Version("5.0"))
End Class
Public Structure SchemaConstants
    Public Sub New(ByVal edmxNamespace As String, ByVal csdlNamespace As String, ByVal ssdlNamespace As String, ByVal mslNamespace As String, ByVal minimumTemplateVersion As Version)
        Me.EdmxNamespace = edmxNamespace
        Me.CsdlNamespace = csdlNamespace
        Me.SsdlNamespace = ssdlNamespace
        Me.MslNamespace = mslNamespace
        Me.MinimumTemplateVersion = minimumTemplateVersion
    End Sub
    Public Property EdmxNamespace() As String
        Get
            Return m_EdmxNamespace
        End Get
        Private Set
            m_EdmxNamespace = Value
        End Set
    End Property
    Private m_EdmxNamespace As String
    Public Property CsdlNamespace() As String
        Get
            Return m_CsdlNamespace
        End Get
        Private Set
            m_CsdlNamespace = Value
        End Set
    End Property
    Private m_CsdlNamespace As String
    Public Property SsdlNamespace() As String
        Get
            Return m_SsdlNamespace
        End Get
        Private Set
            m_SsdlNamespace = Value
        End Set
    End Property
    Private m_SsdlNamespace As String
    Public Property MslNamespace() As String
        Get
            Return m_MslNamespace
        End Get
        Private Set
            m_MslNamespace = Value
        End Set
    End Property
    Private m_MslNamespace As String
    Public Property MinimumTemplateVersion() As Version
        Get
            Return m_MinimumTemplateVersion
        End Get
        Private Set
            m_MinimumTemplateVersion = Value
        End Set
    End Property
    Private m_MinimumTemplateVersion As Version
End Structure
    End Class
    #Region "Base class"
    '''<summary>
    '''Base class for this transformation
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")>  _
    Public Class VBCodeGenTemplateBase
        #Region "Fields"
        Private generationEnvironmentField As Global.System.Text.StringBuilder
        Private errorsField As Global.System.CodeDom.Compiler.CompilerErrorCollection
        Private indentLengthsField As Global.System.Collections.Generic.List(Of Integer)
        Private currentIndentField As String = ""
        Private endsWithNewline As Boolean
        Private sessionField As Global.System.Collections.Generic.IDictionary(Of String, Object)
        #End Region
        #Region "Properties"
        '''<summary>
        '''The string builder that generation-time code is using to assemble generated output
        '''</summary>
        Protected Property GenerationEnvironment() As System.Text.StringBuilder
            Get
                If (Me.generationEnvironmentField Is Nothing) Then
                    Me.generationEnvironmentField = New Global.System.Text.StringBuilder()
                End If
                Return Me.generationEnvironmentField
            End Get
            Set
                Me.generationEnvironmentField = value
            End Set
        End Property
        '''<summary>
        '''The error collection for the generation process
        '''</summary>
        Public ReadOnly Property Errors() As System.CodeDom.Compiler.CompilerErrorCollection
            Get
                If (Me.errorsField Is Nothing) Then
                    Me.errorsField = New Global.System.CodeDom.Compiler.CompilerErrorCollection()
                End If
                Return Me.errorsField
            End Get
        End Property
        '''<summary>
        '''A list of the lengths of each indent that was added with PushIndent
        '''</summary>
        Private ReadOnly Property indentLengths() As System.Collections.Generic.List(Of Integer)
            Get
                If (Me.indentLengthsField Is Nothing) Then
                    Me.indentLengthsField = New Global.System.Collections.Generic.List(Of Integer)()
                End If
                Return Me.indentLengthsField
            End Get
        End Property
        '''<summary>
        '''Gets the current indent we use when adding lines to the output
        '''</summary>
        Public ReadOnly Property CurrentIndent() As String
            Get
                Return Me.currentIndentField
            End Get
        End Property
        '''<summary>
        '''Current transformation session
        '''</summary>
        Public Overridable Property Session() As Global.System.Collections.Generic.IDictionary(Of String, Object)
            Get
                Return Me.sessionField
            End Get
            Set
                Me.sessionField = value
            End Set
        End Property
        #End Region
        #Region "Transform-time helpers"
        '''<summary>
        '''Write text directly into the generated output
        '''</summary>
        Public Overloads Sub Write(ByVal textToAppend As String)
            If String.IsNullOrEmpty(textToAppend) Then
                Return
            End If
            'If we're starting off, or if the previous text ended with a newline,
            'we have to append the current indent first.
            If ((Me.GenerationEnvironment.Length = 0)  _
                        OrElse Me.endsWithNewline) Then
                Me.GenerationEnvironment.Append(Me.currentIndentField)
                Me.endsWithNewline = false
            End If
            'Check if the current text ends with a newline
            If textToAppend.EndsWith(Global.System.Environment.NewLine, Global.System.StringComparison.CurrentCulture) Then
                Me.endsWithNewline = true
            End If
            'This is an optimization. If the current indent is "", then we don't have to do any
            'of the more complex stuff further down.
            If (Me.currentIndentField.Length = 0) Then
                Me.GenerationEnvironment.Append(textToAppend)
                Return
            End If
            'Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(Global.System.Environment.NewLine, (Global.System.Environment.NewLine + Me.currentIndentField))
            'If the text ends with a newline, then we should strip off the indent added at the very end
            'because the appropriate indent will be added when the next time Write() is called
            If Me.endsWithNewline Then
                Me.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - Me.currentIndentField.Length))
            Else
                Me.GenerationEnvironment.Append(textToAppend)
            End If
        End Sub
        '''<summary>
        '''Write text directly into the generated output
        '''</summary>
        Public Overloads Sub WriteLine(ByVal textToAppend As String)
            Me.Write(textToAppend)
            Me.GenerationEnvironment.AppendLine
            Me.endsWithNewline = true
        End Sub
        '''<summary>
        '''Write formatted text directly into the generated output
        '''</summary>
        Public Overloads Sub Write(ByVal format As String, <System.ParamArrayAttribute()> ByVal args() As Object)
            Me.Write(String.Format(Global.System.Globalization.CultureInfo.CurrentCulture, format, args))
        End Sub
        '''<summary>
        '''Write formatted text directly into the generated output
        '''</summary>
        Public Overloads Sub WriteLine(ByVal format As String, <System.ParamArrayAttribute()> ByVal args() As Object)
            Me.WriteLine(String.Format(Global.System.Globalization.CultureInfo.CurrentCulture, format, args))
        End Sub
        '''<summary>
        '''Raise an error
        '''</summary>
        Public Sub [Error](ByVal message As String)
            Dim [error] As System.CodeDom.Compiler.CompilerError = New Global.System.CodeDom.Compiler.CompilerError()
            [error].ErrorText = message
            Me.Errors.Add([error])
        End Sub
        '''<summary>
        '''Raise a warning
        '''</summary>
        Public Sub Warning(ByVal message As String)
            Dim [error] As System.CodeDom.Compiler.CompilerError = New Global.System.CodeDom.Compiler.CompilerError()
            [error].ErrorText = message
            [error].IsWarning = true
            Me.Errors.Add([error])
        End Sub
        '''<summary>
        '''Increase the indent
        '''</summary>
        Public Sub PushIndent(ByVal indent As String)
            If (indent = Nothing) Then
                Throw New Global.System.ArgumentNullException("indent")
            End If
            Me.currentIndentField = (Me.currentIndentField + indent)
            Me.indentLengths.Add(indent.Length)
        End Sub
        '''<summary>
        '''Remove the last indent that was added with PushIndent
        '''</summary>
        Public Function PopIndent() As String
            Dim returnValue As String = ""
            If (Me.indentLengths.Count > 0) Then
                Dim indentLength As Integer = Me.indentLengths((Me.indentLengths.Count - 1))
                Me.indentLengths.RemoveAt((Me.indentLengths.Count - 1))
                If (indentLength > 0) Then
                    returnValue = Me.currentIndentField.Substring((Me.currentIndentField.Length - indentLength))
                    Me.currentIndentField = Me.currentIndentField.Remove((Me.currentIndentField.Length - indentLength))
                End If
            End If
            Return returnValue
        End Function
        '''<summary>
        '''Remove any indentation
        '''</summary>
        Public Sub ClearIndent()
            Me.indentLengths.Clear
            Me.currentIndentField = ""
        End Sub
        #End Region
        #Region "ToString Helpers"
        '''<summary>
        '''Utility class to produce culture-oriented representation of an object as a string.
        '''</summary>
        Public Class ToStringInstanceHelper
            Private formatProviderField  As System.IFormatProvider = Global.System.Globalization.CultureInfo.InvariantCulture
            '''<summary>
            '''Gets or sets format provider to be used by ToStringWithCulture method.
            '''</summary>
            Public Property FormatProvider() As System.IFormatProvider
                Get
                    Return Me.formatProviderField 
                End Get
                Set
                    If (Not (value) Is Nothing) Then
                        Me.formatProviderField  = value
                    End If
                End Set
            End Property
            '''<summary>
            '''This is called from the compile/run appdomain to convert objects within an expression block to a string
            '''</summary>
            Public Function ToStringWithCulture(ByVal objectToConvert As Object) As String
                If (objectToConvert Is Nothing) Then
                    Throw New Global.System.ArgumentNullException("objectToConvert")
                End If
                Dim t As System.Type = objectToConvert.GetType
                Dim method As System.Reflection.MethodInfo = t.GetMethod("ToString", New System.Type() {GetType(System.IFormatProvider)})
                If (method Is Nothing) Then
                    Return objectToConvert.ToString
                Else
                    Return CType(method.Invoke(objectToConvert, New Object() {Me.formatProviderField }),String)
                End If
            End Function
        End Class
        Private toStringHelperField As ToStringInstanceHelper = New ToStringInstanceHelper()
        '''<summary>
        '''Helper to produce culture-oriented representation of an object as a string
        '''</summary>
        Public ReadOnly Property ToStringHelper() As ToStringInstanceHelper
            Get
                Return Me.toStringHelperField
            End Get
        End Property
        #End Region
    End Class
    #End Region
End Namespace
Imports System
Imports System.Linq
Imports System.IO
Imports System.Collections.Generic
Imports System.Data.Objects
Imports System.Data.Objects.DataClasses
Imports System.Xml
Imports System.Xml.Linq
Imports System.Globalization
Imports System.Reflection
Imports System.Data.Metadata.Edm
Imports System.Data.Mapping
Imports System.Data.Entity.Design
Imports System.CodeDom
Imports System.CodeDom.Compiler
Imports Microsoft.VisualBasic
Imports System.Text
'------------------------------------------------------------------------------
'<auto-generated>
'    This code was generated by a tool.
'    Runtime Version: 11.0.0.0
'    Changes to this file may cause incorrect behavior and will be lost if
'    the code is regenerated.
'</auto-generated>
'------------------------------------------------------------------------------
Namespace TemplateCodeGenerators
    '''<summary>
    '''Class to produce the template output
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")>  _
    Partial Public Class VBCodeGenTemplateV50
        Inherits VBCodeGenTemplateV50Base
        '''<summary>
        '''Create the template output
        '''</summary>
        Public Overridable Function TransformText() As String
DefineMetadata()
Dim userSettings As UserSettings =
    New UserSettings With _
    { _
        .SourceCsdlPath = "$edmxInputFile$", _
        .ReferenceCsdlPaths = new string () {}, _
        .FullyQualifySystemTypes = True, _
        .CreateContextAddToMethods = True, _
        .CamelCaseFields = False _
    }
ApplyUserSettings(userSettings)
If Errors.HasErrors
    Return String.Empty
End If
Dim loader As New MetadataLoader(Me)
Dim ef As New MetadataTools(Me)
Dim region As New CodeRegion(Me)
Dim code As New CodeGenerationTools(Me) With {.FullyQualifySystemTypes = userSettings.FullyQualifySystemTypes, .CamelCaseFields = userSettings.CamelCaseFields}
ItemCollection = loader.CreateEdmItemCollection(SourceCsdlPath, ReferenceCsdlPaths.ToArray())
ModelNamespace = loader.GetModelNamespace(SourceCsdlPath)
Dim namespaceName As String = GetNamespaceName(code)
UpdateObjectNamespaceMap(namespaceName)
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'------------------------------------------------------------------------------"& _ 
                    ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"' <auto-generated>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine1")))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine2")))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine3")))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"' </auto-generated>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'---------------------------------------------------------"& _ 
                    "---------------------"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System.ComponentModel"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports "& _ 
                    "System.Data.EntityClient"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System.Data.Objects"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System.Data.Objec"& _ 
                    "ts.DataClasses"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System.Linq"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System.Runtime.Serialization"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Impor"& _ 
                    "ts System.Xml.Serialization"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<Assembly: EdmSchemaAttribute(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Guid.NewGuid().ToString("D", CultureInfo.InvariantCulture)))
            Me.Write(""")>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
    ''''''''
    '''''''' Write Relationship Attributes.
    ''''''''
    region.Begin(CodeGenerationTools.GetResourceString("Template_RegionRelationships"))
    For Each association As AssociationType in GetSourceSchemaTypes(Of AssociationType)()
            Me.Write("<Assembly: EdmRelationshipAttribute(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(association.NamespaceName))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(association.Name))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(EndName(association, 0)))
            Me.Write(""", ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(EndMultiplicity(association, 0, code)))
            Me.Write(", GetType(")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(EscapeEndTypeName(association, 0, code)))
            Me.Write("), """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(EndName(association, 1)))
            Me.Write(""", ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(EndMultiplicity(association, 1, code)))
            Me.Write(", GetType(")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(EscapeEndTypeName(association, 1, code)))
            Me.Write(")")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.StringBefore(", ", If(association.IsForeignKey, "True", Nothing))))
            Me.Write(")>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
    Next
    region.End()
    If(Not String.IsNullOrEmpty(namespaceName)) Then
            Me.Write("Namespace ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(namespaceName))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        PushIndent(CodeRegion.GetIndent(1))
    End If
    ''''''''
    '''''''' 
    ''''''''
    region.Begin(CodeGenerationTools.GetResourceString("Template_RegionContexts"))
    For Each container as EntityContainer in GetSourceSchemaTypes(Of EntityContainer)()
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(container)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </summary>")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(container, region.CurrentIndentLevel)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForType(container)))
            Me.Write(" Partial Class ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(container)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Inherits ObjectContext"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    #Region """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(CodeGenerationTools.GetResourceString("Template_RegionConstructors")))
            Me.Write(""""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_ContextDefaultCtorComment"), container.Name, container.Name)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Public Sub New()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        MyBase.New(""name=")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(container.Name))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(container.Name))
            Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        WriteLazyLoadingEnabled(container)
            Me.Write("        OnContextCreated()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_ContextCommonCtorComment"), container.Name)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Public Sub New(ByVal connectionString As String)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                    "   MyBase.New(connectionString, """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(container.Name))
            Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        WriteLazyLoadingEnabled(container)
            Me.Write("        OnContextCreated()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_ContextCommonCtorComment"), container.Name)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Public Sub New(ByVal connection As EntityConnection)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                    "       MyBase.New(connection, """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(container.Name))
            Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        WriteLazyLoadingEnabled(container)
            Me.Write("        OnContextCreated()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    #End Region"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    #Region """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(CodeGenerationTools.GetResourceString("Template_RegionPartialMethods")))
            Me.Write(""""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Partial Private Sub OnContextCreated()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    #End Region"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                    ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        ''''''''
        '''''''' 
        ''''''''
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionObjectSetProperties"))
        For Each entitySet As EntitySet In container.BaseEntitySets.OfType(Of EntitySet)()
            VerifyEntityTypeAndSetAccessibilityCompatability(entitySet)
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(entitySet)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(entitySet, region.CurrentIndentLevel)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(entitySet))))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForReadOnlyProperty(entitySet)))
            Me.Write(" ReadOnly Property ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(entitySet)))
            Me.Write("() As ObjectSet(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(entitySet.ElementType, code)))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            If (")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(entitySet)))
            Me.Write(" Is Nothing) Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(entitySet)))
            Me.Write(" = MyBase.CreateObjectSet(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(entitySet.ElementType, code)))
            Me.Write(")(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(entitySet.Name))
            Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            Return ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(entitySet)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Property"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(entitySet)))
            Me.Write(" As ObjectSet(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(entitySet.ElementType, code)))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        Next
        region.End()
        ''''''''
        '''''''' 
        ''''''''
        '''''''' 
        '''''''' 
        ''''''''
        '''''''' 
        '''''''' 
        '''''''' 
        ''''''''
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionAddToMethods"))
        Dim addToMethods As IEnumerable(Of EntitySet) = If(CreateContextAddToMethods.Value, container.BaseEntitySets.OfType(Of EntitySet)(), Enumerable.Empty(Of EntitySet)())
        For Each addTo As EntitySet in addToMethods
        Dim parameterName As String = code.Escape(FixParameterName(addTo.ElementType.Name, code))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_GenCommentAddToMethodVb"), addTo.Name)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForType(addTo.ElementType)))
            Me.Write(" Sub AddTo")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(addTo.Name))
            Me.Write("(ByVal ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameterName))
            Me.Write(" As ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(addTo.ElementType, code)))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        MyBase.AddObject(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(addTo.Name))
            Me.Write(""", ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameterName))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        Next
        region.End()
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionFunctionImports"))
        For Each edmFunction As EdmFunction in container.FunctionImports
            Dim parameters As IEnumerable(Of FunctionImportParameter) = FunctionImportParameter.Create(edmFunction.Parameters, code, ef)
            Dim paramList As String = String.Join(", ", parameters.Select(Function(p) p.FunctionParameterName & " As " & p.FunctionParameterType).ToArray())
            Dim returnType As TypeUsage = If(edmFunction.ReturnParameters.Count = 0, Nothing, ef.GetElementType(edmFunction.ReturnParameters(0).TypeUsage))
            If edmFunction.IsComposableAttribute Then
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(edmFunction)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(edmFunction, region.CurrentIndentLevel)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(ParameterComments(parameters.Select(Function(p) New Tuple(Of string, string)(p.RawFunctionParameterName, SummaryComment(p.Source))), region.CurrentIndentLevel)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <EdmFunction(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(edmFunction.NamespaceName))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(edmFunction.Name))
            Me.Write(""")>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(edmFunction))))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForMethod(edmFunction)))
            Me.Write(" Function ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(edmFunction)))
            Me.Write("(")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(paramList))
            Me.Write(") As IQueryable(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(returnType, code)))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
                WriteFunctionParameters(parameters)
            Me.Write("        Return MyBase.CreateQuery(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(returnType, code)))
            Me.Write(")(""[")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(edmFunction.NamespaceName))
            Me.Write("].[")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(edmFunction.Name))
            Me.Write("](")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Join(", ", parameters.Select(Function(p) "@" + p.EsqlParameterName).ToArray())))
            Me.Write(")""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.StringBefore(", ", String.Join(", ", parameters.Select(Function(p) p.ExecuteParameterName).ToArray()))))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Else
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(edmFunction)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(edmFunction, region.CurrentIndentLevel)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(ParameterComments(parameters.Select(Function(p) New Tuple(Of string, string)(p.RawFunctionParameterName, SummaryComment(p.Source))), region.CurrentIndentLevel)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(edmFunction))))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForMethod(edmFunction)))
            Me.Write(" Function ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(edmFunction)))
            Me.Write("(")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(paramList))
            Me.Write(") As ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(If(returnType IsNot Nothing, "ObjectResult(Of " & MultiSchemaEscape(returnType, code) & ")", "Integer")))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
                WriteFunctionParameters(parameters)
            Me.Write("        Return MyBase.ExecuteFunction")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(If(returnType Is Nothing, "", "(Of " & MultiSchemaEscape(returnType, code) & ")")))
            Me.Write("(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(edmFunction.Name))
            Me.Write("""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.StringBefore(", ", String.Join(", ", parameters.Select(Function(p) p.ExecuteParameterName).ToArray()))))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
                If (returnType IsNot Nothing AndAlso returnType.EdmType.BuiltInTypeKind = BuiltInTypeKind.EntityType)
            Me.Write("    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(edmFunction)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(edmFunction, region.CurrentIndentLevel)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <param name=""mergeOption""></param>")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(ParameterComments(parameters.Select(Function(p) New Tuple(Of string, string)(p.RawFunctionParameterName, SummaryComment(p.Source))), region.CurrentIndentLevel)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(edmFunction))))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForMethod(edmFunction)))
            Me.Write(" Function ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(edmFunction)))
            Me.Write("(")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.StringAfter(paramList, ", ")))
            Me.Write("mergeOption As MergeOption) As ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(If(returnType IsNot Nothing, "ObjectResult(Of " & MultiSchemaEscape(returnType, code) & ")", "Integer")))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
                    WriteFunctionParameters(parameters)
            Me.Write("        Return MyBase.ExecuteFunction(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(returnType, code)))
            Me.Write(")(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(edmFunction.Name))
            Me.Write(""", mergeOption")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.StringBefore(", ", String.Join(", ", parameters.Select(Function(p) p.ExecuteParameterName).ToArray()))))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
                End If
            End If
        Next
        region.End()
            Me.Write("End Class"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        If Not code.VerifyCaseInsensitiveEntitySetUniqueness(container.BaseEntitySets.OfType(Of EntitySet)().Select(Function(e) e.Name), _
                container.Name, SourceCsdlPath) Then
            Return String.Empty
        End If
    Next
    region.End()
    ''''''''
    '''''''' 
    ''''''''
    region.Begin(CodeGenerationTools.GetResourceString("Template_RegionEntities"))
    For Each loopEntity As EntityType in GetSourceSchemaTypes(Of EntityType)().OrderBy(Function(e) e.Name)
        Dim entity As EntityType = loopEntity
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(entity)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </summary>")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(entity, region.CurrentIndentLevel)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<EdmEntityTypeAttribute(NamespaceName:=""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(entity.NamespaceName))
            Me.Write(""", Name:=""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(entity.Name))
            Me.Write(""")>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<Serializable()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<DataContractAttribute(IsReference:=True)>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        For Each subType As EntityType in ItemCollection.GetItems(Of EntityType)().Where(Function(b) b.BaseType is entity)
            Me.Write("<KnownTypeAttribute(GetType(")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(subType, code)))
            Me.Write("))>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        Next
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForType(entity)))
            Me.Write(" ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(code.MustInheritOption(entity))))
            Me.Write("Partial Class ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(entity)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Inherits ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(BaseTypeName(entity, code)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        If(Not entity.Abstract) Then
            WriteFactoryMethod(entity, code)
        End If
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionSimpleProperties"))
        For Each edmProperty As EdmProperty in entity.Properties.Where(Function(p) p.DeclaringType Is entity AndAlso TypeOf p.TypeUsage.EdmType Is SimpleType)
            VerifyGetterAndSetterAccessibilityCompatability(edmProperty)
            WriteSimpleTypeProperty(edmProperty, code)
        Next
        region.End()
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionComplexProperties"))
        For Each edmProperty As EdmProperty in entity.Properties.Where(Function(p) p.DeclaringType Is entity AndAlso TypeOf p.TypeUsage.EdmType Is ComplexType)
            VerifyGetterAndSetterAccessibilityCompatability(edmProperty)
            WriteComplexTypeProperty(edmProperty, code)
        Next
        region.End()
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionNavigationProperties"))
        For Each navProperty As NavigationProperty in entity.NavigationProperties.Where(Function(n) n.DeclaringType Is entity)
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(navProperty)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(navProperty, region.CurrentIndentLevel)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <XmlIgnoreAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <SoapIgnoreAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <DataMemberAttribu"& _ 
                    "te()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <EdmRelationshipNavigationPropertyAttribute(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.NamespaceName))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.Name))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name))
            Me.Write(""")>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            If(navProperty.ToEndMember.RelationshipMultiplicity = RelationshipMultiplicity.Many) Then
            Me.Write("     ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(navProperty))))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(navProperty)))
            Me.Write(" Property ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(navProperty)))
            Me.Write("() As EntityCollection(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(navProperty))))
            Me.Write("Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            Return CType(Me,IEntityWithRelationships).RelationshipManager.Ge"& _ 
                    "tRelatedCollection(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)))
            Me.Write(")(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name))
            Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter(navProperty))))
            Me.Write("Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            If (Not value Is Nothing)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                CType(Me, IEntityWith"& _ 
                    "Relationships).RelationshipManager.InitializeRelatedCollection(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)))
            Me.Write(")(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name))
            Me.Write(""", value)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Property"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
           Else
            Me.Write("    ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(navProperty))))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(navProperty)))
            Me.Write(" Property ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(navProperty)))
            Me.Write("() As ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(navProperty))))
            Me.Write("Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            Return CType(Me, IEntityWithRelationships).RelationshipManager.G"& _ 
                    "etRelatedReference(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)))
            Me.Write(")(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name))
            Me.Write(""").Value"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter(navProperty))))
            Me.Write("Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            CType(Me, IEntityWithRelationships).RelationshipManager.GetRelat"& _ 
                    "edReference(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)))
            Me.Write(")(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name))
            Me.Write(""").Value = value"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Property"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        Dim refPropertyName As String = navProperty.Name & "Reference"
        If(entity.Members.Any(Function(m) m.Name = refPropertyName)) Then
            '
            Errors.Add(New System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6017",
                String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_ConflictingGeneratedNavPropName"), navProperty.Name, entity.FullName, refPropertyName)))
        End If
            Me.Write("    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(navProperty)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(navProperty, region.CurrentIndentLevel)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <BrowsableAttribute(False)>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <DataMemberAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(navProperty)))
            Me.Write(" Property ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(refPropertyName))
            Me.Write("() As EntityReference(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(navProperty))))
            Me.Write("Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            Return CType(Me, IEntityWithRelationships).RelationshipManager.G"& _ 
                    "etRelatedReference(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)))
            Me.Write(")(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name))
            Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter(navProperty))))
            Me.Write("Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            If (Not value Is Nothing)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                CType(Me, IEntityWith"& _ 
                    "Relationships).RelationshipManager.InitializeRelatedReference(Of ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)))
            Me.Write(")(""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName))
            Me.Write(""", """)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name))
            Me.Write(""", value)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Property"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            End If
        Next
        region.End()
            Me.Write("End Class"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        If Not code.VerifyCaseInsensitiveMemberUniqueness(code.GetAllDeclaredMembers(entity), entity.FullName, SourceCsdlPath) Then
            Return String.Empty
        End If
    Next
    region.End()
    ''''''''
    '''''''' 
    ''''''''
    region.Begin(CodeGenerationTools.GetResourceString("Template_RegionComplexTypes"))
    For Each  loopComplex As ComplexType in GetSourceSchemaTypes(Of ComplexType)().OrderBy(Function(e) e.Name)
        Dim complex As ComplexType = loopComplex
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(complex)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </summary>")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(complex, region.CurrentIndentLevel)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<EdmComplexTypeAttribute(NamespaceName:=""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(complex.NamespaceName))
            Me.Write(""", Name:=""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(complex.Name))
            Me.Write(""")>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<DataContractAttribute(IsReference:=True)>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<Serializable()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForType(complex)))
            Me.Write(" Partial Class ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(complex)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Inherits ComplexObject"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        WriteFactoryMethod(complex, code)
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionSimpleProperties"))
        For Each edmProperty As EdmProperty in complex.Properties.Where(Function(p) p.DeclaringType Is complex AndAlso TypeOf p.TypeUsage.EdmType Is SimpleType)
            VerifyGetterAndSetterAccessibilityCompatability(edmProperty)
            WriteSimpleTypeProperty(edmProperty, code)
        Next
        region.End()
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionComplexProperties"))
        For Each edmProperty As EdmProperty in complex.Properties.Where(Function(p) p.DeclaringType Is complex AndAlso TypeOf p.TypeUsage.EdmType Is ComplexType)
            VerifyGetterAndSetterAccessibilityCompatability(edmProperty)
            WriteComplexTypeProperty(edmProperty, code)
        Next
        region.End()
            Me.Write("End Class"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        If Not code.VerifyCaseInsensitiveMemberUniqueness(code.GetAllDeclaredMembers(complex), complex.FullName, SourceCsdlPath) Then
            Return String.Empty
        End If
    Next
    region.End()
    ''''''''
    '''''''' 
    ''''''''
    region.Begin(CodeGenerationTools.GetResourceString("Template_RegionEnumTypes"))
    For Each enumType As EnumType in GetSourceSchemaTypes(Of EnumType)().OrderBy(Function(e) e.Name)
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(enumType)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </summary>")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(enumType, region.CurrentIndentLevel)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<EdmEnumTypeAttribute(NamespaceName:=""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(enumType.NamespaceName))
            Me.Write(""", Name:=""")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(enumType.Name))
            Me.Write(""")>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<DataContractAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        If enumType.IsFlags Then
            Me.Write("<FlagsAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        End If
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForType(enumType)))
            Me.Write(" Enum ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(enumType)))
            Me.Write(" As ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(enumType.UnderlyingType.ClrEquivalentType, fullyQualifySystemTypes:= False)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        For Each member As EnumMember In enumType.Members
            Me.Write("    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(member)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(member, region.CurrentIndentLevel + 1)))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <EnumMemberAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(member)))
            Me.Write(" = ")
            Me.Write(Me.ToStringHelper.ToStringWithCulture(member.Value))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        Next
        '' 
        If enumType.Members.Any() Then
            Me.GenerationEnvironment.Remove(
                Me.GenerationEnvironment.Length - (CurrentIndent.Length + 2), (CurrentIndent.Length + 2))
        Else
            Me.Write("    None"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        End If
            Me.Write("End Enum"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        If Not code.VerifyCaseInsensitiveMemberUniqueness(code.GetAllDeclaredMembers(enumType), enumType.FullName, SourceCsdlPath)  Then
            Return String.Empty
        End If
    Next
    region.End()
    If (Not String.IsNullOrEmpty(namespaceName)) Then
    PopIndent()
            Me.Write("End Namespace"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
    End If
    If Not code.VerifyCaseInsensitiveTypeUniqueness(code.GetAllGlobalItems(ItemCollection), SourceCsdlPath) Then
        Return String.Empty
    End If
            Return Me.GenerationEnvironment.ToString
        End Function
    ''''''''
    '''''''' 
    ''''''''
    ''''''''
    '''''''' 
    ''''''''
    Private Sub WriteFactoryMethod(structuralType As StructuralType, code As CodeGenerationTools)
        Dim region As CodeRegion = new CodeRegion(Me, 1)
        Dim methodName As String = "Create" + structuralType.Name
        Dim uniqueIdentifier As UniqueIdentifierService = new UniqueIdentifierService()
        Dim instanceName As String = code.Escape(uniqueIdentifier.AdjustIdentifier((code.CamelCase(structuralType.Name))))
        Dim parameters As IEnumerable(Of FactoryMethodParameter) = FactoryMethodParameter.CreateParameters(structuralType.Members.OfType(Of EdmProperty)().Where(Function(p) IncludePropertyInFactoryMethod(structuralType, p)), uniqueIdentifier, Function(t, c) MultiSchemaEscape(t, c), code)
        If (parameters.Count() = 0) Then
            Return
        End If
        If(structuralType.Members.Any(Function(m) m.Name = methodName)) Then
            ' 
            Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6029",
                String.Format(CultureInfo.CurrentCulture, _
                   CodeGenerationTools.GetResourceString("Template_FactoryMethodNameConflict"), methodName, structuralType.FullName)))
        End If
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionFactoryMethod"))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_FactoryMethodComment"), structuralType.Name)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>")
Me.Write(Me.ToStringHelper.ToStringWithCulture(ParameterComments(parameters.Select(Function(p) New Tuple(Of String, String)(p.RawParameterName, p.ParameterComment)), region.CurrentIndentLevel)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Public Shared Function ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(methodName))
Me.Write("(")
Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Join(", ", parameters.Select(Function(p) p.ParameterName & " As " & p.ParameterType).ToArray())))
Me.Write(") As ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(structuralType)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        Dim ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(instanceName))
Me.Write(" as ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(structuralType)))
Me.Write(" = New ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(structuralType)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        For Each parameter As FactoryMethodParameter in parameters
            If(parameter.IsComplexType) Then
                ' 
Me.Write("        ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(instanceName))
Me.Write(".")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(parameter.Source)))
Me.Write(" = StructuralObject.VerifyComplexObjectIsNotNull(")
Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.ParameterName))
Me.Write(", """)
Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.Source.Name))
Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Else
                ' 
Me.Write("        ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(instanceName))
Me.Write(".")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(parameter.Source)))
Me.Write(" = ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.ParameterName))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            End If
        Next
Me.Write("        Return ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(instanceName))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        region.End()
    End Sub
    ''''''''
    '''''''' 
    ''''''''
    Private Sub WriteSimpleTypeProperty(simpleProperty As EdmProperty, code As CodeGenerationTools)
        Dim ef As MetadataTools = New MetadataTools(Me)
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(simpleProperty)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>")
Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(simpleProperty, 1)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <EdmScalarPropertyAttribute(EntityKeyProperty:=")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.CreateLiteral(ef.IsKey(simpleProperty))))
Me.Write(", IsNullable:=")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.CreateLiteral(ef.IsNullable(simpleProperty))))
Me.Write(")>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <DataMemberAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(simpleProperty))))
Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(simpleProperty)))
Me.Write(" Property ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(simpleProperty)))
Me.Write("() As ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(simpleProperty.TypeUsage, code)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(simpleProperty))))
Me.Write("Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
             If(ef.ClrType(simpleProperty.TypeUsage) = GetType(byte())) Then
Me.Write("                Return StructuralObject.GetValidValue(")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(simpleProperty)))
Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
             Else
Me.Write("            Return ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(simpleProperty)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
                End If
Me.Write("        End Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter((simpleProperty)))))
Me.Write("Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
         If(ef.IsKey(simpleProperty)) Then
                If(ef.ClrType(simpleProperty.TypeUsage) = GetType(byte())) Then
Me.Write("            If (Not StructuralObject.BinaryEquals(")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(simpleProperty)))
Me.Write(", Value)) Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
                Else
Me.Write("            If (")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(simpleProperty)))
Me.Write(" <> Value) Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
                End If
                PushIndent(CodeRegion.GetIndent(1))
            End If
Me.Write("            ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(ChangingMethodName(simpleProperty)))
Me.Write("(value)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ReportPropertyChanging(""")
Me.Write(Me.ToStringHelper.ToStringWithCulture(simpleProperty.Name))
Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(simpleProperty)))
Me.Write(" = ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(BeginCastToEnumType(simpleProperty.TypeUsage, code)))
Me.Write("StructuralObject.SetValidValue(")
Me.Write(Me.ToStringHelper.ToStringWithCulture(BeginCastToUnderlyingType(simpleProperty.TypeUsage, code)))
Me.Write("value")
Me.Write(Me.ToStringHelper.ToStringWithCulture(EndCastToUnderlyingType(simpleProperty.TypeUsage, code)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(OptionalNullableParameterForSetValidValue(simpleProperty, code)))
Me.Write(", """)
Me.Write(Me.ToStringHelper.ToStringWithCulture(simpleProperty.Name))
Me.Write(""")")
Me.Write(Me.ToStringHelper.ToStringWithCulture(EndCastToEnumType(simpleProperty.TypeUsage, code)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ReportPropertyChanged(""")
Me.Write(Me.ToStringHelper.ToStringWithCulture(simpleProperty.Name))
Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(ChangedMethodName(simpleProperty)))
Me.Write("()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
         If(ef.IsKey(simpleProperty)) Then
                PopIndent()
Me.Write("            End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            End If
Me.Write("        End Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Property"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(simpleProperty)))
Me.Write(" As ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(simpleProperty.TypeUsage, code)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.StringBefore(" = ", code.CreateLiteral(simpleProperty.DefaultValue))))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private Partial Sub ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(ChangingMethodName(simpleProperty)))
Me.Write("(value As ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(simpleProperty.TypeUsage, code)))
Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private Partial Sub ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(ChangedMethodName(simpleProperty)))
Me.Write("()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
    End Sub
    ''''''''
    '''''''' 
    ''''''''
    Private Sub WriteComplexTypeProperty(complexProperty As EdmProperty, code As CodeGenerationTools)
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(complexProperty)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>")
Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(complexProperty, 1)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <EdmComplexPropertyAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <DesignerSerializationVisibility(Desig"& _ 
        "nerSerializationVisibility.Content)>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <XmlElement(IsNullable:=True)>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <S"& _ 
        "oapElement(IsNullable:=True)>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <DataMemberAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(complexProperty))))
Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(complexProperty)))
Me.Write(" Property ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(complexProperty)))
Me.Write("() As ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(complexProperty.TypeUsage, code)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(complexProperty))))
Me.Write("Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)))
Me.Write(" = GetValidValue(")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)))
Me.Write(", """)
Me.Write(Me.ToStringHelper.ToStringWithCulture(complexProperty.Name))
Me.Write(""", False, ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(InitializedTrackingField(complexProperty, code)))
Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(InitializedTrackingField(complexProperty, code)))
Me.Write(" = True"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            Return ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter(complexProperty))))
Me.Write("Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(ChangingMethodName(complexProperty)))
Me.Write("(value)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ReportPropertyChanging(""")
Me.Write(Me.ToStringHelper.ToStringWithCulture(complexProperty.Name))
Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)))
Me.Write(" = SetValidValue(")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)))
Me.Write(", value, """)
Me.Write(Me.ToStringHelper.ToStringWithCulture(complexProperty.Name))
Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(InitializedTrackingField(complexProperty, code)))
Me.Write(" = True"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ReportPropertyChanged(""")
Me.Write(Me.ToStringHelper.ToStringWithCulture(complexProperty.Name))
Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(ChangedMethodName(complexProperty)))
Me.Write("()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Property"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)))
Me.Write(" As ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(complexProperty.TypeUsage, code)))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(InitializedTrackingField(complexProperty, code)))
Me.Write(" As Boolean"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private Partial Sub ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(ChangingMethodName(complexProperty)))
Me.Write("(value As ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(complexProperty.TypeUsage, code)))
Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private Partial Sub ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(ChangedMethodName(complexProperty)))
Me.Write("()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
    End Sub
    Private Sub WriteFunctionParameters(ByVal parameters As IEnumerable(Of FunctionImportParameter))
        For Each parameter As FunctionImportParameter In parameters
                If (Not parameter.NeedsLocalVariable) Then
                    Continue For
                End If
Me.Write("        Dim ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.LocalVariableName))
Me.Write(" As ObjectParameter"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        If (")
Me.Write(Me.ToStringHelper.ToStringWithCulture(If(parameter.IsNullableOfT, parameter.FunctionParameterName + ".HasValue", parameter.FunctionParameterName & " IsNot Nothing")))
Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.LocalVariableName))
Me.Write(" = New ObjectParameter(""")
Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.EsqlParameterName))
Me.Write(""", ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.FunctionParameterName))
Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        Else"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.LocalVariableName))
Me.Write(" = New ObjectParameter(""")
Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.EsqlParameterName))
Me.Write(""", GetType(")
Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.RawClrTypeName))
Me.Write("))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Next
    End Sub
    Private Sub WriteLazyLoadingEnabled(ByVal container As EntityContainer)
        Dim lazyLoadingAttributeValue As String = Nothing
        Dim lazyLoadingAttributeName As String = MetadataConstants.EDM_ANNOTATION_09_02 & ":LazyLoadingEnabled"
        If MetadataTools.TryGetStringMetadataPropertySetting(container, lazyLoadingAttributeName, lazyLoadingAttributeValue) Then
            Dim isLazyLoading As Boolean = False
            If Boolean.TryParse(lazyLoadingAttributeValue, isLazyLoading) Then
Me.Write("        MyBase.ContextOptions.LazyLoadingEnabled = ")
Me.Write(Me.ToStringHelper.ToStringWithCulture(isLazyLoading.ToString().ToLowerInvariant()))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            End If
        End If
    End Sub
    ''''''''
    '''''''' 
    ''''''''
    Public Property SourceCsdlPath() As String
    Public Property ModelNamespace() As String
    Public Property ItemCollection() As EdmItemCollection
    Public Property ReferenceCsdlPaths() As IEnumerable(Of String)
    Public Property FullyQualifySystemTypes() As Nullable(Of Boolean)
    Public Property CreateContextAddToMethods As Nullable(Of Boolean)
    Public Property EdmToObjectNamespaceMap() As Dictionary(Of string, string)
        Get
            Return _edmToObjectNamespaceMap
        End Get
        Set
            _edmToObjectNamespaceMap = Value
        End Set
    End Property
    Dim _edmToObjectNamespaceMap As Dictionary(Of string, string) = new Dictionary(Of string, string)
    Public ReadOnly Property SourceEdmVersion As Double
        Get
            If (Not ItemCollection Is Nothing) Then
                Return ItemCollection.EdmVersion
            End If
            Return 0.0
        End Get
    End Property
    Private Sub ApplyUserSettings(userSettings as UserSettings)
        If(SourceCsdlPath Is Nothing) Then
#If NOT PREPROCESSED_TEMPLATE
            If userSettings.SourceCsdlPath = ("$" & "edmxInputFile" & "$")
                Errors.Add(New System.CodeDom.Compiler.CompilerError(Host.TemplateFile, -1, -1, String.Empty,
                    CodeGenerationTools.GetResourceString("Template_ReplaceVsItemTemplateToken")))
                Return
            End If
            SourceCsdlPath = Host.ResolvePath(userSettings.SourceCsdlPath)
#Else
            SourceCsdlPath = userSettings.SourceCsdlPath
#End If
        End If
        ' normalize the path, remove ..\ from it
        SourceCsdlPath = Path.GetFullPath(SourceCsdlPath)
        If(ReferenceCsdlPaths Is Nothing) Then
            ReferenceCsdlPaths = userSettings.ReferenceCsdlPaths
        End If
        If(Not FullyQualifySystemTypes.HasValue) Then
            FullyQualifySystemTypes = userSettings.FullyQualifySystemTypes
        End If
        If(Not CreateContextAddToMethods.HasValue) Then
            CreateContextAddToMethods = userSettings.CreateContextAddToMethods
        End If
        DefaultSummaryComment = CodeGenerationTools.GetResourceString("Template_CommentNoDocumentation")
    End Sub
    ''''''''
    '''''''' 
    ''''''''
    Private Class UserSettings
        Public Property SourceCsdlPath() As String
        Public Property ReferenceCsdlPaths() As String ()
        Public Property FullyQualifySystemTypes() As Boolean
        Public Property CreateContextAddToMethods() As Boolean
        Public Property CamelCaseFields() As Boolean
    End Class
    Private Function GetNamespaceName(code As CodeGenerationTools) As String
        Dim namespaceName As String = code.VsNamespaceSuggestion()
#If PREPROCESSED_TEMPLATE Then
        If String.IsNullOrEmpty(namespaceName) Then
            namespaceName = GetObjectNamespace(ModelNamespace)
        End If
#End If
        Return namespaceName
    End Function
Private Function MultiSchemaEscape(ByVal usage As TypeUsage, ByVal code As CodeGenerationTools) As String
    Dim ef As MetadataTools = New MetadataTools(Me)
    If usage.EdmType IsNot Nothing Then
        If TypeOf usage.EdmType Is StructuralType Then
            Return MultiSchemaEscape(usage.EdmType, code)
        ElseIf TypeOf usage.EdmType Is EnumType Then
            Dim typeName As String = MultiSchemaEscape(usage.EdmType, code)
            If ef.IsNullable(usage) Then
                Return String.Format(CultureInfo.InvariantCulture, "Nullable(Of {0})", typeName)
            End If
            Return typeName
        End If
    End If
    Return code.Escape(usage)
End Function
Private Function MultiSchemaEscape(ByVal type As EdmType, ByVal code As CodeGenerationTools) As String
    If type.NamespaceName <> ModelNamespace Then
        Return code.CreateFullName(code.EscapeNamespace(GetObjectNamespace(type.NamespaceName)), code.Escape(type))
    End If
    Return code.Escape(type)
End Function
Private Function NewModifier(ByVal navigationProperty As NavigationProperty) As String
    Dim baseType As Type = GetType(EntityObject)
    Return NewModifier(baseType, navigationProperty.Name)
End Function
Private Function NewModifier(ByVal edmFunction As EdmFunction) As String
    Dim baseType As Type = GetType(ObjectContext)
    Return NewModifier(baseType, edmFunction.Name)
End Function
Private Function NewModifier(ByVal entitySet As EntitySet) As String
    Dim baseType As Type = GetType(ObjectContext)
    Return NewModifier(baseType, entitySet.Name)
End Function
Private Function NewModifier(ByVal edmProperty As EdmProperty) As String
    Dim baseType As Type
    If edmProperty.DeclaringType.BuiltInTypeKind = BuiltInTypeKind.EntityType Then
        baseType = GetType(EntityObject)
    Else
        baseType = GetType(ComplexObject)
    End If
    Return NewModifier(baseType, edmProperty.Name)
End Function
Private Function NewModifier(ByVal type As Type, ByVal memberName As String) As String
    If HasBaseMemberWithMatchingName(type, memberName) Then
        Return "Shadows"
    End If
    Return String.Empty
End Function
Private Function ChangingMethodName(ByVal member As EdmMember) As String
    Return String.Format(CultureInfo.InvariantCulture, "On{0}Changing", member.Name)
End Function
Private Function ChangedMethodName(ByVal member As EdmMember) As String
    Return String.Format(CultureInfo.InvariantCulture, "On{0}Changed", member.Name)
End Function
Private Function InitializedTrackingField(ByVal edmProperty As EdmProperty, ByVal code As CodeGenerationTools) As String
    Dim namePart As String = edmProperty.Name & "Initialized"
    If code.CamelCaseFields Then
        namePart = code.CamelCase(namePart)
    End If
    Return "_" & namePart
End Function
Private Function OptionalNullableParameterForSetValidValue(ByVal member As EdmMember, ByVal code As CodeGenerationTools) As String
    Dim ef As New MetadataTools(Me)
    Dim list As String = String.Empty
    Dim type As PrimitiveType = TryCast(member.TypeUsage.EdmType, PrimitiveType)
    If type IsNot Nothing AndAlso type.ClrEquivalentType.IsClass Then
        Dim storeGeneratedPatternProperty As MetadataProperty = Nothing
        Dim isNullable As Boolean = ef.IsNullable(member.TypeUsage) OrElse
            (member.MetadataProperties.TryGetValue(MetadataConstants.EDM_ANNOTATION_09_02 & ":StoreGeneratedPattern", False, storeGeneratedPatternProperty) AndAlso
             Object.Equals(storeGeneratedPatternProperty.Value, "Computed"))
        list += ", " & code.CreateLiteral(isNullable)
    End If
    Return list
End Function
Private Shared Function IsVisibleMember(ByVal memberInfo As MemberInfo) As Boolean
    If TypeOf memberInfo Is EventInfo Then
        Dim ei As EventInfo = DirectCast(memberInfo, EventInfo)
        Dim add As MethodInfo = ei.GetAddMethod()
        Dim remove As MethodInfo = ei.GetRemoveMethod()
        Return IsVisibleMethod(add) OrElse IsVisibleMethod(remove)
    ElseIf TypeOf memberInfo Is FieldInfo Then
        Dim fi As FieldInfo = DirectCast(memberInfo, FieldInfo)
        Return Not fi.IsPrivate AndAlso Not fi.IsAssembly
    ElseIf TypeOf memberInfo Is MethodBase Then
        Dim mb As MethodBase = DirectCast(memberInfo, MethodBase)
        If mb.IsSpecialName Then
            Return False
        End If
        Return IsVisibleMethod(mb)
    ElseIf TypeOf memberInfo Is PropertyInfo Then
        Dim pi As PropertyInfo = DirectCast(memberInfo, PropertyInfo)
        Dim getMethod As MethodInfo = pi.GetGetMethod()
        Dim entitySet As MethodInfo = pi.GetSetMethod()
        Return IsVisibleMethod(getMethod) OrElse IsVisibleMethod(entitySet)
    End If
    Return False
End Function
Private Shared Function IsVisibleMethod(ByVal methodBase As MethodBase) As Boolean
    If methodBase Is Nothing Then
        Return False
    End If
    Return Not methodBase.IsPrivate AndAlso Not methodBase.IsAssembly
End Function
Private Shared Function HasBaseMemberWithMatchingName(ByVal type As Type, ByVal memberName As String) As Boolean
    Dim bindings As BindingFlags = BindingFlags.FlattenHierarchy Or BindingFlags.NonPublic Or BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.Static
    Return type.GetMembers(bindings).Where(Function(m) IsVisibleMember(m)).Any(Function(m) m.Name.Equals(memberName, StringComparison.OrdinalIgnoreCase))
End Function
Private Function BeginCastToEnumType(ByVal typeUsage As TypeUsage, ByVal code As CodeGenerationTools) As String
    Dim type As EnumType = TryCast(typeUsage.EdmType, EnumType)
    If type Is Nothing Then
        Return String.Empty
    End If
    Return "CType("
End Function
Private Function EndCastToEnumType(ByVal typeUsage As TypeUsage, ByVal code As CodeGenerationTools) As String
    Dim type As EnumType = TryCast(typeUsage.EdmType, EnumType)
    If type Is Nothing Then
        Return String.Empty
    End If
    Return ", " & MultiSchemaEscape(typeUsage, code) & ")"
End Function
Private Function BeginCastToUnderlyingType(ByVal typeUsage As TypeUsage, ByVal code As CodeGenerationTools) As String
    Dim type As EnumType = TryCast(typeUsage.EdmType, EnumType)
    If type Is Nothing Then
        Return String.Empty
    End If
    Return "CType("
End Function
Private Function EndCastToUnderlyingType(ByVal typeUsage As TypeUsage, ByVal code As CodeGenerationTools) As String
    Dim ef As MetadataTools = New MetadataTools(Me)
    Dim type As EnumType = TryCast(typeUsage.EdmType, EnumType)
    If type Is Nothing Then
        Return String.Empty
    End If
    Dim clrType As String = code.Escape(type.UnderlyingType.ClrEquivalentType, fullyQualifySystemTypes := False)
    If ef.IsNullable(typeUsage) Then
        clrType = String.Format(CultureInfo.InvariantCulture, "Nullable(Of {0})", clrType)
    End If
    Return ", " & clrType & ")"
End Function
Private Function GetSourceSchemaTypes(Of T As GlobalItem)() As IEnumerable(Of T)
    If Path.GetExtension(SourceCsdlPath) <> ".edmx" Then
        Return ItemCollection.GetItems(Of T)().Where(Function(e) e.MetadataProperties.Any(Function(mp) mp.Name = "SchemaSource" AndAlso DirectCast(mp.Value, String) = SourceCsdlPath))
    Else
        Return ItemCollection.GetItems(Of T)()
    End If
End Function
Private Function EndName(ByVal association As AssociationType, ByVal index As Integer) As String
    Return association.AssociationEndMembers(index).Name
End Function
Private Function EndMultiplicity(ByVal association As AssociationType, ByVal index As Integer, ByVal code As CodeGenerationTools) As String
    Return code.CreateLiteral(association.AssociationEndMembers(index).RelationshipMultiplicity)
End Function
Private Function EscapeEndTypeName(ByVal association As AssociationType, ByVal index As Integer, ByVal code As CodeGenerationTools) As String
    Dim entity As EntityType = association.AssociationEndMembers(index).GetEntityType()
    Return code.CreateFullName(code.EscapeNamespace(GetObjectNamespace(entity.NamespaceName)), code.Escape(entity))
End Function
Private Function GetObjectNamespace(ByVal csdlNamespaceName As String) As String
    Dim objectNamespace As String = Nothing
    If EdmToObjectNamespaceMap.TryGetValue(csdlNamespaceName, objectNamespace) Then
        Return objectNamespace
    End If
    Return csdlNamespaceName
End Function
Private Sub UpdateObjectNamespaceMap(objectNamespace As String)
    If Not objectNamespace = ModelNamespace AndAlso Not EdmToObjectNamespaceMap.ContainsKey(ModelNamespace)
        EdmToObjectNamespaceMap.Add(ModelNamespace, objectNamespace)
    End If
End Sub
Private Shared Function FixParameterName(ByVal name As String, ByVal code As CodeGenerationTools) As String
    ' 
    ' 
    If StringComparer.OrdinalIgnoreCase.Equals(name, "id") Then
        ' 
        Return "id"
    End If
    Return code.CamelCase(name)
End Function
Private Function BaseTypeName(ByVal entity As EntityType, ByVal code As CodeGenerationTools) As String
    Return If(entity.BaseType Is Nothing, "EntityObject", MultiSchemaEscape(entity.BaseType, code))
End Function
Private Function IncludePropertyInFactoryMethod(ByVal factoryType As StructuralType, ByVal edmProperty As EdmProperty) As Boolean
    If edmProperty.Nullable Then
        Return False
    End If
    If edmProperty.DefaultValue IsNot Nothing Then
        Return False
    End If
    If (Accessibility.ForReadOnlyProperty(edmProperty) <> "Public" AndAlso Accessibility.ForWriteOnlyProperty(edmProperty) <> "Public") OrElse (factoryType IsNot edmProperty.DeclaringType AndAlso Accessibility.ForWriteOnlyProperty(edmProperty) = "Private") Then
        ' 
        Return False
    End If
    Return True
End Function
Private Class FactoryMethodParameter
    Public Source As EdmProperty
    Public RawParameterName As String
    Public ParameterName As String
    Public ParameterType As String
    Public ParameterComment As String
    Public IsComplexType As Boolean
    Public Shared Function CreateParameters(ByVal properties As IEnumerable(Of EdmProperty), ByVal unique As UniqueIdentifierService, ByVal multiSchemaEscape As Func(Of TypeUsage, CodeGenerationTools, String), ByVal code As CodeGenerationTools) As IEnumerable(Of FactoryMethodParameter)
        Dim parameters As New List(Of FactoryMethodParameter)()
        For Each edmProperty As EdmProperty In properties
            Dim parameter As New FactoryMethodParameter()
            parameter.Source = edmProperty
            parameter.IsComplexType = TypeOf edmProperty.TypeUsage.EdmType Is ComplexType
            parameter.RawParameterName = unique.AdjustIdentifier(FixParameterName(edmProperty.Name, code))
            parameter.ParameterName = code.Escape(parameter.RawParameterName)
            parameter.ParameterType = multiSchemaEscape(edmProperty.TypeUsage, code)
            parameter.ParameterComment = String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_CommentFactoryMethodParam"), edmProperty.Name)
            parameters.Add(parameter)
        Next
        Return parameters
    End Function
End Class
Private Property DefaultSummaryComment() As String
Private Function SummaryComment(ByVal item As MetadataItem) As String
    If item.Documentation IsNot Nothing AndAlso item.Documentation.Summary IsNot Nothing Then
        Return PrefixLinesOfMultilineComment(XMLCOMMENT_START & " ", XmlEntityize(item.Documentation.Summary))
    End If
    If DefaultSummaryComment IsNot Nothing Then
        Return DefaultSummaryComment
    End If
    Return String.Empty
End Function
Private Function LongDescriptionCommentElement(ByVal item As MetadataItem, ByVal indentLevel As Integer) As String
    If item.Documentation IsNot Nothing AndAlso Not String.IsNullOrEmpty(item.Documentation.LongDescription) Then
        Dim comment As String = Environment.NewLine
        Dim lineStart As String = CodeRegion.GetIndent(indentLevel) + XMLCOMMENT_START & " "
        comment += (lineStart & "<LongDescription>") + Environment.NewLine
        comment += lineStart + PrefixLinesOfMultilineComment(lineStart, XmlEntityize(item.Documentation.LongDescription)) + Environment.NewLine
        comment += lineStart & "</LongDescription>"
        Return comment
    End If
    Return String.Empty
End Function
Private Function PrefixLinesOfMultilineComment(ByVal prefix As String, ByVal comment As String) As String
    Return comment.Replace(Environment.NewLine, Environment.NewLine + prefix)
End Function
Private Function ParameterComments(ByVal parameters As IEnumerable(Of Tuple(Of String, String)), ByVal indentLevel As Integer) As String
    Dim builder As New System.Text.StringBuilder()
    For Each parameter As Tuple(Of String, String) In parameters
        builder.AppendLine()
        builder.Append(CodeRegion.GetIndent(indentLevel))
        builder.Append(XMLCOMMENT_START)
        builder.Append(String.Format(CultureInfo.InvariantCulture, " <param name=""{0}"">{1}</param>", parameter.Item1, parameter.Item2))
    Next
    Return builder.ToString()
End Function
Private Function XmlEntityize(ByVal text As String) As String
    If String.IsNullOrEmpty(text) Then
        Return String.Empty
    End If
    text = text.Replace("&", "&amp;")
    text = text.Replace("<", "&lt;").Replace(">", "&gt;")
    Dim id As String = Guid.NewGuid().ToString()
    text = text.Replace(Environment.NewLine, id)
    text = text.Replace(vbCr, "&#xD;").Replace(vbLf, "&#xA;")
    text = text.Replace(id, Environment.NewLine)
    Return text.Replace("'", "&apos;").Replace("""", "&quot;")
End Function
Const XMLCOMMENT_START As String = "'''"
Private Function GetProperties(ByVal type As StructuralType) As IEnumerable(Of EdmProperty)
    If type.BuiltInTypeKind = BuiltInTypeKind.EntityType Then
        Return DirectCast(type, EntityType).Properties
    Else
        Return DirectCast(type, ComplexType).Properties
    End If
End Function
Protected Sub VerifyGetterAndSetterAccessibilityCompatability(ByVal member As EdmMember)
    Dim rawGetterAccessibility As String = Accessibility.ForReadOnlyProperty(member)
    Dim rawSetterAccessibility As String = Accessibility.ForWriteOnlyProperty(member)
    If (rawGetterAccessibility = "Friend" AndAlso rawSetterAccessibility = "Protected") OrElse (rawGetterAccessibility = "Protected" AndAlso rawSetterAccessibility = "Friend") Then
        Errors.Add(New System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6033", String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("GeneratedPropertyAccessibilityConflict"), member.Name, rawGetterAccessibility, rawSetterAccessibility)))
    End If
End Sub
Private Sub VerifyEntityTypeAndSetAccessibilityCompatability(ByVal entitySet As EntitySet)
    Dim typeAccess As String = Accessibility.ForType(entitySet.ElementType)
    Dim setAccess As String = Accessibility.ForReadOnlyProperty(entitySet)
    If typeAccess = "Friend" AndAlso (setAccess = "Public" OrElse setAccess = "Protected") Then
        Errors.Add(New System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6036", String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("EntityTypeAndSetAccessibilityConflict"), entitySet.ElementType.Name, typeAccess, entitySet.Name, setAccess)))
    End If
End Sub
Private Sub DefineMetadata()
    TemplateMetadata(MetadataConstants.TT_TEMPLATE_NAME) = "VBCodeGen"
    TemplateMetadata(MetadataConstants.TT_TEMPLATE_VERSION) = "5.0"
    TemplateMetadata(MetadataConstants.TT_MINIMUM_ENTITY_FRAMEWORK_VERSION) = "5.0"
End Sub
Private NotInheritable Class UniqueIdentifierService
    Private ReadOnly _knownIdentifiers As HashSet(Of String) = New HashSet(Of string)(StringComparer.OrdinalIgnoreCase)
    ''' <summary>
    ''' 
    ''' 
    ''' </summary>
    Public Function AdjustIdentifier(identifier As String) As String
        ' 
        Dim numberOfConflicts As Int32 = 0
        Dim adjustedIdentifier As String = identifier
        While Not _knownIdentifiers.Add(adjustedIdentifier)
            numberOfConflicts += 1
            adjustedIdentifier = identifier + numberOfConflicts.ToString(CultureInfo.InvariantCulture)
        End While
        Return adjustedIdentifier
    End Function
End Class
' Copyright (c) Microsoft Corporation.  All rights reserved.
Public Shared TemplateMetadata As New Dictionary(Of String, String)()
''' <summary>
''' Responsible for helping to create source code that is
''' correctly formated and functional
''' </summary>
Public Class CodeGenerationTools
    Private ReadOnly _textTransformation As DynamicTextTransformation
    Private ReadOnly _code As VBCodeProvider
    Private ReadOnly _ef As MetadataTools
    ''' <summary>
    ''' Initializes a new CodeGenerationTools object with the TextTransformation (T4 generated class)
    ''' that is currently running.
    ''' </summary>
    Public Sub New(ByVal textTransformation As Object)
        If textTransformation Is Nothing Then
            Throw New ArgumentNullException("textTransformation")
        End If
        _textTransformation = DynamicTextTransformation.Create(textTransformation)
        _code = New VBCodeProvider()
        _ef = New MetadataTools(_textTransformation)
        FullyQualifySystemTypes = False
        CamelCaseFields = True
    End Sub
    ''' <summary>
    ''' When true, all types that are not being generated
    ''' are fully qualified to keep them from conflicting with
    ''' types that are being generated. Useful when you have
    ''' something like a type being generated named System.
    '''
    ''' Default is false.
    ''' </summary>
    Private _FullyQualifySystemTypes As Boolean
    Public Property FullyQualifySystemTypes() As Boolean
        Get
            Return _FullyQualifySystemTypes
        End Get
        Set(ByVal value As Boolean)
            _FullyQualifySystemTypes = value
        End Set
    End Property
    ''' <summary>
    ''' When true, the field names are Camel Cased,
    ''' otherwise they will preserve the case they
    ''' start with.
    '''
    ''' Default is true.
    ''' </summary>
    Private _CamelCaseFields As Boolean
    Public Property CamelCaseFields() As Boolean
        Get
            Return _CamelCaseFields
        End Get
        Set(ByVal value As Boolean)
            _CamelCaseFields = value
        End Set
    End Property
    ''' <summary>
    ''' Returns the NamespaceName suggested by VS if running inside VS. Otherwise, returns
    ''' null.
    ''' </summary>
    Public Function VsNamespaceSuggestion() As String
        Dim suggestion As String = _textTransformation.Host.ResolveParameterValue("directiveId", "namespaceDirectiveProcessor", "namespaceHint")
        If String.IsNullOrEmpty(suggestion) Then
            Return Nothing
        End If
        Return suggestion
    End Function
    ''' <summary>
    ''' Returns a string that is safe for use as an identifier in C#.
    ''' Keywords are escaped.
    ''' </summary>
    Public Function Escape(ByVal name As String) As String
        If name Is Nothing Then
            Return Nothing
        End If
        Return _code.CreateEscapedIdentifier(name)
    End Function
    ''' <summary>
    ''' Returns the name of the TypeUsage's EdmType that is safe for
    ''' use as an identifier.
    ''' </summary>
    Public Function Escape(ByVal typeUsage As TypeUsage) As String
        If typeUsage Is Nothing Then
            Return Nothing
        End If
        If TypeOf typeUsage.EdmType Is ComplexType OrElse TypeOf typeUsage.EdmType Is EntityType Then
            Return Escape(typeUsage.EdmType.Name)
        ElseIf TypeOf typeUsage.EdmType Is SimpleType Then
            Dim clrType As Type = _ef.UnderlyingClrType(typeUsage.EdmType)
            Dim typeName As String = If(TypeOf typeUsage.EdmType Is EnumType, Escape(typeUsage.EdmType.Name), Escape(clrType))
            If clrType.IsValueType AndAlso _ef.IsNullable(typeUsage) Then
                Return String.Format(CultureInfo.InvariantCulture, "Nullable(Of {0})", typeName)
            End If
            Return typeName
        ElseIf TypeOf typeUsage.EdmType Is CollectionType Then
            Return String.Format(CultureInfo.InvariantCulture, "ICollection(Of {0})", Escape(DirectCast(typeUsage.EdmType, CollectionType).TypeUsage))
        End If
        Throw New ArgumentException("typeUsage")
    End Function
    ''' <summary>
    ''' Returns the name of the EdmMember that is safe for
    ''' use as an identifier.
    ''' </summary>
    Public Function Escape(ByVal member As EdmMember) As String
        If member Is Nothing Then
            Return Nothing
        End If
        Return Escape(member.Name)
    End Function
    ''' <summary>
    ''' Returns the name of the EdmType that is safe for
    ''' use as an identifier.
    ''' </summary>
    Public Function Escape(ByVal type As EdmType) As String
        If type Is Nothing Then
            Return Nothing
        End If
        Return Escape(type.Name)
    End Function
    ''' <summary>
    ''' Returns the name of the EdmFunction that is safe for
    ''' use as an identifier.
    ''' </summary>
    Public Function Escape(ByVal edmFunction As EdmFunction) As String
        If edmFunction Is Nothing Then
            Return Nothing
        End If
        Return Escape(edmFunction.Name)
    End Function
    ''' <summary>
    ''' Returns the name of the EnumMember that is safe for
    ''' use as an identifier.
    ''' </summary>
    Public Function Escape(ByVal member As EnumMember) As String
        If member Is Nothing Then
            Return Nothing
        End If
        Return Escape(member.Name)
    End Function
    ''' <summary>
    ''' Returns the name of the EntityContainer that is safe for
    ''' use as an identifier.
    ''' </summary>
    Public Function Escape(ByVal container As EntityContainer) As String
        If container Is Nothing Then
            Return Nothing
        End If
        Return Escape(container.Name)
    End Function
    ''' <summary>
    ''' Returns the name of the EntitySet that is safe for
    ''' use as an identifier.
    ''' </summary>
    Public Function Escape(ByVal edmSet As EntitySet) As String
        If edmSet Is Nothing Then
            Return Nothing
        End If
        Return Escape(edmSet.Name)
    End Function
    ''' <summary>
    ''' Returns the name of the StructuralType that is safe for
    ''' use as an identifier.
    ''' </summary>
    Public Function Escape(ByVal type As StructuralType) As String
        If type Is Nothing Then
            Return Nothing
        End If
        Return Escape(type.Name)
    End Function
    ''' <summary>
    ''' Returns the NamespaceName with each segment safe to
    ''' use as an identifier.
    ''' </summary>
    Public Function EscapeNamespace(ByVal namespaceName As String) As String
        If String.IsNullOrEmpty(namespaceName) Then
            Return namespaceName
        End If
        Dim parts As String() = namespaceName.Split("."c)
        namespaceName = String.Empty
        For Each part As String In parts
            If namespaceName <> String.Empty Then
                namespaceName += "."
            End If
            namespaceName += Escape(part)
        Next
        Return namespaceName
    End Function
    ''' <summary>
    ''' Returns the name of the EdmMember formatted for
    ''' use as a field identifier.
    '''
    ''' This method changes behavior based on the CamelCaseFields
    ''' setting.
    ''' </summary>
    Public Function FieldName(ByVal member As EdmMember) As String
        If member Is Nothing Then
            Return Nothing
        End If
        Return FieldName(member.Name)
    End Function
    ''' <summary>
    ''' Returns the name of the EntitySet formatted for
    ''' use as a field identifier.
    '''
    ''' This method changes behavior based on the CamelCaseFields
    ''' setting.
    ''' </summary>
    Public Function FieldName(ByVal edmSet As EntitySet) As String
        If edmSet Is Nothing Then
            Return Nothing
        End If
        Return FieldName(edmSet.Name)
    End Function
    Private Function FieldName(ByVal name As String) As String
        If CamelCaseFields Then
            Return "_" & CamelCase(name)
        Else
            Return "_" & name
        End If
    End Function
    ''' <summary>
    ''' Returns the name of the Type object formatted for
    ''' use in source code.
    '''
    ''' This method changes behavior based on the FullyQualifySystemTypes
    ''' setting.
    ''' </summary>
    Public Function Escape(ByVal clrType As Type) As String
        Return Escape(clrType, FullyQualifySystemTypes)
    End Function
    ''' <summary>
    ''' Returns the name of the Type object formatted for
    ''' use in source code.
    ''' </summary>
    Public Function Escape(ByVal clrType As Type, ByVal fullyQualifySystemTypes As Boolean) As String
        If clrType Is Nothing Then
            Return Nothing
        End If
        Dim typeName As String
        If fullyQualifySystemTypes Then
            If(Not clrType.IsArray) Then
                typeName = clrType.FullName
            Else
                typeName = clrType.GetElementType().FullName & "()"
            End If
            typeName = "Global." & typeName
        Else
            typeName = _code.GetTypeOutput(New CodeTypeReference(clrType))
        End If
        Return typeName
    End Function
    ''' <summary>
    ''' Returns the abstract option if the entity is Abstract, otherwise returns String.Empty
    ''' </summary>
    Public Function MustInheritOption(entity As EntityType) As String
        If entity.Abstract Then
            Return "MustInherit"
        End If
        Return String.Empty
    End Function
    ''' <summary>
    ''' Returns the passed in identifier with the first letter changed to lowercase
    ''' </summary>
    Public Function CamelCase(ByVal identifier As String) As String
        If String.IsNullOrEmpty(identifier) Then
            Return identifier
        End If
        If identifier.Length = 1 Then
            Return identifier(0).ToString(CultureInfo.InvariantCulture).ToLowerInvariant()
        End If
        Return identifier(0).ToString(CultureInfo.InvariantCulture).ToLowerInvariant() + identifier.Substring(1)
    End Function
    ''' <summary>
    ''' If the value parameter is null or empty an empty string is returned,
    ''' otherwise it retuns value with a single space concatenated on the end.
    ''' </summary>
    Public Function SpaceAfter(ByVal value As String) As String
        Return StringAfter(value, " ")
    End Function
    ''' <summary>
    ''' If the value parameter is null or empty an empty string is returned,
    ''' otherwise it retuns value with a single space concatenated on the end.
    ''' </summary>
    Public Function SpaceBefore(ByVal value As String) As String
        Return StringBefore(" ", value)
    End Function
    ''' <summary>
    ''' If the value parameter is null or empty an empty string is returned,
    ''' otherwise it retuns value with append concatenated on the end.
    ''' </summary>
    Public Function StringAfter(ByVal value As String, ByVal append As String) As String
        If String.IsNullOrEmpty(value) Then
            Return String.Empty
        End If
        Return value + append
    End Function
    ''' <summary>
    ''' If the value parameter is null or empty an empty string is returned,
    ''' otherwise it retuns value with prepend concatenated on the front.
    ''' </summary>
    Public Function StringBefore(ByVal prepend As String, ByVal value As String) As String
        If String.IsNullOrEmpty(value) Then
            Return String.Empty
        End If
        Return prepend + value
    End Function
    ''' <summary>
    ''' Returns false and shows an error if the supplied type names aren't case-insensitively unique,
    ''' otherwise returns true.
    ''' </summary>
    Public Function VerifyCaseInsensitiveTypeUniqueness(types As IEnumerable(Of String), ByVal sourceFile As String) As Boolean
        Return VerifyCaseInsensitiveUniqueness(types, _
            Function(t) String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_CaseInsensitiveTypeConflict"), t), sourceFile)
    End Function
    ''' <summary>
    ''' Returns false and shows an error if the supplied entity set names aren't case-insensitively unique,
    ''' otherwise returns true.
    ''' </summary>
    Public Function VerifyCaseInsensitiveEntitySetUniqueness(entitySets As IEnumerable(Of String), ByVal entityContainerName As String, ByVal sourceFile As String) As Boolean
        Return VerifyCaseInsensitiveUniqueness(entitySets, Function(e) String.Format(CultureInfo.CurrentCulture, _
                GetResourceString("Template_CaseInsensitiveEntitySetConflict"), entityContainerName, e), sourceFile)
    End Function
    ''' <summary>
    ''' Returns false and shows an error if the supplied type members names aren't case-insensitively unique,
    ''' otherwise returns true.
    ''' </summary>
    Public Function VerifyCaseInsensitiveMemberUniqueness(members As IEnumerable(Of String), ByVal declaringType As String, ByVal sourceFile As String) As Boolean
        Return VerifyCaseInsensitiveUniqueness(members, _
            Function(m) String.Format(CultureInfo.CurrentCulture, _
                GetResourceString("Template_CaseInsensitiveMemberConflict"), declaringType, m), sourceFile)
    End Function
    ''' <summary>
    ''' Returns false and shows an error if the supplied strings aren't case-insensitively unique,
    ''' otherwise returns true.
    ''' </summary>
    Private Function VerifyCaseInsensitiveUniqueness(items As IEnumerable(Of String), formatMessage As Func(Of String, String), ByVal sourceFile As String) As Boolean
        Dim hash As HashSet(Of String) = New HashSet(Of String)(StringComparer.InvariantCultureIgnoreCase)
        For Each item As String in items
            If Not hash.Add(item) Then
                _textTransformation.Errors.Add(New System.CodeDom.Compiler.CompilerError(sourceFile, -1, -1, 6023, formatMessage(item)))
                Return False
            End If
        Next
        Return True
    End Function
    ''' <summary>
    ''' Returns the names of the items in the supplied collection that correspond to O-Space types.
    ''' </summary>
    Public Function GetAllGlobalItems(ByVal itemCollection As EdmItemCollection) As IEnumerable(Of String)
        Return itemCollection.GetItems(Of GlobalItem)() _
                .Where(Function(i) TypeOf i Is EntityType OrElse TypeOf i Is ComplexType OrElse TypeOf i Is EnumType OrElse TypeOf i is EntityContainer) _
                .Select(Function(g) GetGlobalItemName(g))
    End Function
    ''' <summary>
    ''' Returns the name of the supplied GlobalItem.
    ''' </summary>
    Private Function GetGlobalItemName(item As GlobalItem) As String
        If TypeOf item Is EdmType Then
            Return CType(item, EdmType).Name
        Else
            Return CType(item, EntityContainer).Name
        End If
    End Function
    ''' <summary>
    ''' Returns the names of the members of the supplied EdmType.
    ''' </summary>
    Public Function GetAllDeclaredMembers(edmType As EdmType) As IEnumerable(Of String)
        Dim entity As EntityType = TryCast(edmType, EntityType)
        If Not entity Is Nothing Then
            Dim declaredMembers As IEnumerable(Of EdmMember) = entity.Members.Where(Function(m) m.DeclaringType Is entity)
            Dim decalredNavigationProperties As IEnumerable(Of NavigationProperty) = entity.NavigationProperties.Where(Function(n) n.DeclaringType Is entity)
            Return declaredMembers.Union(decalredNavigationProperties.Cast(Of EdmMember)()).Select(Function(m) m.Name)
        End If
        Dim structural As StructuralType = TryCast(edmType, StructuralType)
        If Not structural Is Nothing Then
            Return structural.Members.Where(Function(m) m.DeclaringType Is structural).Select(Function(m) m.Name)
        End If
        Dim enumType As EnumType = TryCast(edmType, EnumType)
        If Not enumType Is Nothing Then
            Return enumType.Members.Select(Function(m) m.Name)
        End If
        Return Enumerable.Empty(Of String)()
    End Function
    ''' <summary>
    ''' Retuns as full of a name as possible, if a namespace is provided
    ''' the namespace and name are combined with a period, otherwise just
    ''' the name is returned.
    ''' </summary>
    Public Function CreateFullName(ByVal namespaceName As String, ByVal name As String) As String
        If String.IsNullOrEmpty(namespaceName) Then
            Return name
        End If
        Return (namespaceName & ".") + name
    End Function
    ''' <summary>
    ''' Retuns a literal representing the supplied value.
    ''' </summary>
    Public Function CreateLiteral(ByVal value As Object) As String
        If value Is Nothing Then
            Return String.Empty
        End If
        Dim type As Type = value.GetType()
        If type.IsEnum Then
            Return (type.FullName & ".") + value.ToString()
        End If
        If type Is GetType(Guid) Then
            Return String.Format(CultureInfo.InvariantCulture, "New Guid(""{0}"")", DirectCast(value, Guid).ToString("D", CultureInfo.InvariantCulture))
        ElseIf type Is GetType(DateTime) Then
            Return String.Format(CultureInfo.InvariantCulture, "New DateTime({0}, DateTimeKind.Unspecified)", DirectCast(value, DateTime).Ticks)
        ElseIf type Is GetType(Byte()) Then
            Dim arrayInit As String = String.Join(", ", DirectCast(value, Byte()).Select(Function(b) b.ToString(CultureInfo.InvariantCulture)).ToArray())
            Return String.Format(CultureInfo.InvariantCulture, "New Byte() {{{0}}}", arrayInit)
        ElseIf type Is GetType(DateTimeOffset) Then
            Dim dto As DateTimeOffset = DirectCast(value, DateTimeOffset)
            Return String.Format(CultureInfo.InvariantCulture, "New DateTimeOffset({0}, New TimeSpan({1}))", dto.Ticks, dto.Offset.Ticks)
        ElseIf type Is GetType(Decimal) Then
            Return String.Format(CultureInfo.InvariantCulture, "{0}D", DirectCast(value, Decimal).ToString(CultureInfo.InvariantCulture))
        ElseIf type Is GetType(TimeSpan) Then
            Return String.Format(CultureInfo.InvariantCulture, "New TimeSpan({0})", DirectCast(value, TimeSpan).Ticks)
        End If
        Dim expression As CodePrimitiveExpression = New CodePrimitiveExpression(value)
        Dim writer As StringWriter = New StringWriter()
        Dim code As VBCodeProvider = New VBCodeProvider()
        code.GenerateCodeFromExpression(expression, writer, New CodeGeneratorOptions())
        Return writer.ToString()
    End Function
    ''' <summary>
    ''' Returns a resource string from the System.Data.Entity.Design assembly.
    ''' </summary>
    Public Shared Function GetResourceString(resourceName As String, Optional culture As CultureInfo = Nothing) As String
        If _resourceManager Is Nothing Then
            _resourceManager = New System.Resources.ResourceManager("System.Data.Entity.Design", GetType(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly)
        End If
        Return _resourceManager.GetString(resourceName, culture)
    End Function
    Shared Private _resourceManager As System.Resources.ResourceManager
    Private Const ExternalTypeNameAttributeName As String = "http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName"
    ''' <summary>
    ''' Gets the entity, complex, or enum types for which code should be generated from the given item collection.
    ''' Any types for which an ExternalTypeName annotation has been applied in the conceptual model
    ''' metadata (CSDL) are filtered out of the returned list.
    ''' </summary>
    ''' <typeparam name="T">The type of item to return.</typeparam>
    ''' <param name="itemCollection">The item collection to look in.</param>
    ''' <returns>The items to generate.</returns>
    Public Function GetItemsToGenerate(Of T As GlobalItem)(itemCollection As ItemCollection) As IEnumerable(Of T)
        Return itemCollection.GetItems(Of T)().Where(Function(i) Not i.MetadataProperties.Any(Function(p) p.Name = ExternalTypeNameAttributeName))
    End Function
    ''' <summary>
    ''' Returns the escaped type name to use for the given usage of an o-space type. This might be
    ''' an external type name if the ExternalTypeName annotation has been specified in the
    ''' conceptual model metadata (CSDL).
    ''' </summary>
    ''' <param name="typeUsage">The o-space type usage to get a name for.</param>
    ''' <returns>The type name to use.</returns>
    Public Function GetTypeName(typeUsage As TypeUsage) As String
        Return If(typeUsage Is Nothing, Nothing, GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace := Nothing))
    End Function
    ''' <summary>
    ''' Returns the escaped type name to use for the given o-space type. This might be
    ''' an external type name if the ExternalTypeName annotation has been specified in the
    ''' conceptual model metadata (CSDL).
    ''' </summary>
    ''' <param name="edmType">The o-space type to get a name for.</param>
    ''' <returns>The type name to use.</returns>
    Public Function GetTypeName(edmType As EdmType) As String
        Return GetTypeName(edmType, isNullable := Nothing, modelNamespace := Nothing)
    End Function
    ''' <summary>
    ''' Returns the escaped type name to use for the given usage of an o-space type. This might be
    ''' an external type name if the ExternalTypeName annotation has been specified in the
    ''' conceptual model metadata (CSDL).
    ''' </summary>
    ''' <param name="typeUsage">The o-space type usage to get a name for.</param>
    ''' <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
    ''' fully qualified name will be returned.</param>
    ''' <returns>The type name to use.</returns>
    Public Function GetTypeName(typeUsage As TypeUsage, modelNamespace As String) As String
        Return If(typeUsage Is Nothing, Nothing, GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace))
    End Function
    ''' <summary>
    ''' Returns the escaped type name to use for the given o-space type. This might be
    ''' an external type name if the ExternalTypeName annotation has been specified in the
    ''' conceptual model metadata (CSDL).
    ''' </summary>
    ''' <param name="edmType">The o-space type to get a name for.</param>
    ''' <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
    ''' fully qualified name will be returned.</param>
    ''' <returns>The type name to use.</returns>
    Public Function GetTypeName(edmType As EdmType, modelNamespace As String) As String
        Return GetTypeName(edmType, isNullable := Nothing, modelNamespace := modelNamespace)
    End Function
    ''' <summary>
    ''' Returns the escaped type name to use for the given o-space type. This might be
    ''' an external type name if the ExternalTypeName annotation has been specified in the
    ''' conceptual model metadata (CSDL).
    ''' </summary>
    ''' <param name="edmType">The o-space type to get a name for.</param>
    ''' <param name="isNullable">Set this to true for nullable usage of this type.</param>
    ''' <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
    ''' fully qualified name will be returned.</param>
    ''' <returns>The type name to use.</returns>
    Private Function GetTypeName(edmType As EdmType, isNullable As System.Nullable(Of Boolean), modelNamespace As String) As String
        If edmType Is Nothing Then
            Return Nothing
        End If
        Dim collectionType = TryCast(edmType, CollectionType)
        If collectionType IsNot Nothing Then
            Return String.Format(CultureInfo.InvariantCulture, "ICollection( Of {0})", GetTypeName(collectionType.TypeUsage, modelNamespace))
        End If
        Dim typeName = If(Escape(edmType.MetadataProperties.Where(Function(p) p.Name = ExternalTypeNameAttributeName).[Select](Function(p) DirectCast(p.Value, String)).FirstOrDefault()), (If(modelNamespace IsNot Nothing AndAlso edmType.NamespaceName <> modelNamespace, CreateFullName(EscapeNamespace(edmType.NamespaceName), Escape(edmType)), Escape(edmType))))
        If TypeOf edmType Is StructuralType Then
            Return typeName
        End If
        If TypeOf edmType Is SimpleType Then
            Dim clrType = _ef.UnderlyingClrType(edmType)
            If Not (TypeOf edmType Is EnumType) Then
                typeName = Escape(clrType)
            End If
            Return If(clrType.IsValueType AndAlso isNullable = True, String.Format(CultureInfo.InvariantCulture, "Nullable(Of {0})", typeName), typeName)
        End If
        Throw New ArgumentException("typeUsage")
    End Function
End Class
''' <summary>
''' Responsible for making the Entity Framework Metadata more
''' accessible for code generation.
''' </summary>
Public Class MetadataTools
    Private ReadOnly _textTransformation As DynamicTextTransformation
    ''' <summary>
    ''' Initializes an MetadataTools Instance with the
    ''' TextTransformation (T4 generated class) that is currently running
    ''' </summary>
    Public Sub New(ByVal textTransformation As Object)
        If textTransformation Is Nothing Then
            Throw New ArgumentNullException("textTransformation")
        End If
        _textTransformation = DynamicTextTransformation.Create(textTransformation)
    End Sub
    ''' <summary>
    ''' This method returns the underlying CLR type of the O-space type corresponding to the supplied <paramref name="typeUsage"/>
    ''' Note that for an enum type this means that the type backing the enum will be returned, not the enum type itself.
    ''' </summary>
    Public Function ClrType(typeUsage As TypeUsage) As Type
        Return UnderlyingClrType(typeUsage.EdmType)
    End Function
    ''' <summary>
    ''' This method returns the underlying CLR type of given the O-space type.
    ''' Note that for an enum type this means that the type backing the enum will be returned, not the enum type itself.
    ''' </summary>
    Public Function UnderlyingClrType(edmType As EdmType) As Type
        Dim primitiveType = TryCast(edmType, PrimitiveType)
        If primitiveType IsNot Nothing Then
            Return primitiveType.ClrEquivalentType
        End If
        Dim enumType = TryCast(edmType, EnumType)
        If enumType IsNot Nothing Then
            Return enumType.UnderlyingType.ClrEquivalentType
        End If
        Return GetType(Object)
    End Function
    ''' <summary>
    ''' True if the EdmProperty is a key of its DeclaringType, False otherwise.
    ''' </summary>
    Public Function IsKey(ByVal edmProp As EdmProperty) As Boolean
        If edmProp IsNot Nothing AndAlso edmProp.DeclaringType.BuiltInTypeKind = BuiltInTypeKind.EntityType Then
            Return DirectCast(edmProp.DeclaringType, EntityType).KeyMembers.Contains(edmProp)
        End If
        Return False
    End Function
    ''' <summary>
    ''' True if the EdmProperty TypeUsage is Nullable, False otherwise.
    ''' </summary>
    Public Function IsNullable(ByVal edmProp As EdmProperty) As Boolean
        Return edmProp IsNot Nothing AndAlso IsNullable(edmProp.TypeUsage)
    End Function
    ''' <summary>
    ''' True if the TypeUsage is Nullable, False otherwise.
    ''' </summary>
    Public Function IsNullable(ByVal typeUsage As TypeUsage) As Boolean
        Dim nullableFacet As Facet = Nothing
        If typeUsage IsNot Nothing AndAlso typeUsage.Facets.TryGetValue("Nullable", True, nullableFacet) Then
            Return CBool(nullableFacet.Value)
        End If
        Return False
    End Function
    ''' <summary>
    ''' If the passed in TypeUsage represents a collection this method returns final element
    ''' type of the collection, otherwise it returns the value passed in.
    ''' </summary>
    Public Function GetElementType(ByVal typeUsage As TypeUsage) As TypeUsage
        If typeUsage Is Nothing Then
            Return Nothing
        End If
        If TypeOf typeUsage.EdmType Is CollectionType Then
            Return GetElementType(DirectCast(typeUsage.EdmType, CollectionType).TypeUsage)
        Else
            Return typeUsage
        End If
    End Function
    ''' <summary>
    ''' Returns the NavigationProperty that is the other end of the same association set if it is
    ''' available, otherwise it returns null.
    ''' </summary>
    Public Function Inverse(ByVal navProperty As NavigationProperty) As NavigationProperty
        If navProperty Is Nothing Then
            Return Nothing
        End If
        Dim toEntity As EntityType = navProperty.ToEndMember.GetEntityType()
        Return toEntity.NavigationProperties.SingleOrDefault(Function(n) n.RelationshipType Is navProperty.RelationshipType AndAlso n IsNot navProperty)
    End Function
    ''' <summary>
    ''' Given a property on the dependent end of a referential constraint, returns the corresponding property on the principal end.
    ''' Requires: The association has a referential constraint, and the specified dependentProperty is one of the properties on the dependent end.
    ''' </summary>
    Public Function GetCorrespondingPrincipalProperty(ByVal navProperty As NavigationProperty, ByVal dependentProperty As EdmProperty) As EdmProperty
        If navProperty Is Nothing Then
            Throw New ArgumentNullException("navProperty")
        End If
        If dependentProperty Is Nothing Then
            Throw New ArgumentNullException("dependentProperty")
        End If
        Dim fromProperties As ReadOnlyMetadataCollection(Of EdmProperty) = GetPrincipalProperties(navProperty)
        Dim toProperties As ReadOnlyMetadataCollection(Of EdmProperty) = GetDependentProperties(navProperty)
        Return fromProperties(toProperties.IndexOf(dependentProperty))
    End Function
    ''' <summary>
    ''' Given a property on the principal end of a referential constraint, returns the corresponding property on the dependent end.
    ''' Requires: The association has a referential constraint, and the specified principalProperty is one of the properties on the principal end.
    ''' </summary>
    Public Function GetCorrespondingDependentProperty(ByVal navProperty As NavigationProperty, ByVal principalProperty As EdmProperty) As EdmProperty
        If navProperty Is Nothing Then
            Throw New ArgumentNullException("navProperty")
        End If
        If principalProperty Is Nothing Then
            Throw New ArgumentNullException("principalProperty")
        End If
        Dim fromProperties As ReadOnlyMetadataCollection(Of EdmProperty) = GetPrincipalProperties(navProperty)
        Dim toProperties As ReadOnlyMetadataCollection(Of EdmProperty) = GetDependentProperties(navProperty)
        Return toProperties(fromProperties.IndexOf(principalProperty))
    End Function
    ''' <summary>
    ''' Gets the collection of properties that are on the principal end of a referential constraint for the specified navigation property.
    ''' Requires: The association has a referential constraint.
    ''' </summary>
    Public Function GetPrincipalProperties(ByVal navProperty As NavigationProperty) As ReadOnlyMetadataCollection(Of EdmProperty)
        If navProperty Is Nothing Then
            Throw New ArgumentNullException("navProperty")
        End If
        Return DirectCast(navProperty.RelationshipType, AssociationType).ReferentialConstraints(0).FromProperties
    End Function
    ''' <summary>
    ''' Gets the collection of properties that are on the dependent end of a referential constraint for the specified navigation property.
    ''' Requires: The association has a referential constraint.
    ''' </summary>
    Public Function GetDependentProperties(ByVal navProperty As NavigationProperty) As ReadOnlyMetadataCollection(Of EdmProperty)
        If navProperty Is Nothing Then
            Throw New ArgumentNullException("navProperty")
        End If
        Return DirectCast(navProperty.RelationshipType, AssociationType).ReferentialConstraints(0).ToProperties
    End Function
    ''' <summary>
    ''' True if this entity type requires the HandleCascadeDelete method defined and the method has
    ''' not been defined on any base type
    ''' </summary>
    Public Function NeedsHandleCascadeDeleteMethod(itemCollection As ItemCollection, entity As EntityType) As Boolean
        Dim needsMethod As Boolean = ContainsCascadeDeleteAssociation(itemCollection, entity)
        ' Check to make sure no base types have already declared this method
        Dim baseType As EntityType = TryCast(entity.BaseType, EntityType)
        While needsMethod AndAlso baseType IsNot Nothing
            needsMethod = Not ContainsCascadeDeleteAssociation(itemCollection, baseType)
            baseType = TryCast(baseType.BaseType, EntityType)
        End While
        Return needsMethod
    End Function
    ''' <summary>
    ''' True if this entity type participates in any relationships where the other end has an OnDelete
    ''' cascade delete defined, or if it is the dependent in any identifying relationships
    ''' </summary>
    Private Function ContainsCascadeDeleteAssociation(itemCollection As ItemCollection, entity As EntityType) As Boolean
        Return itemCollection.GetItems(Of AssociationType)().Where(Function(a) DirectCast(a.AssociationEndMembers(0).TypeUsage.EdmType, RefType).ElementType Is entity AndAlso IsCascadeDeletePrincipal(a.AssociationEndMembers(1)) OrElse DirectCast(a.AssociationEndMembers(1).TypeUsage.EdmType, RefType).ElementType Is entity AndAlso IsCascadeDeletePrincipal(a.AssociationEndMembers(0))).Any()
    End Function
    ''' <summary>
    ''' True if the source end of the specified navigation property is the principal in an identifying relationship.
    ''' or if the source end has cascade delete defined.
    ''' </summary>
    Public Function IsCascadeDeletePrincipal(ByVal navProperty As NavigationProperty) As Boolean
        If navProperty Is Nothing Then
            Throw New ArgumentNullException("navProperty")
        End If
        Return IsCascadeDeletePrincipal(DirectCast(navProperty.FromEndMember, AssociationEndMember))
    End Function
    ''' <summary>
    ''' True if the specified association end is the principal in an identifying relationship.
    ''' or if the association end has cascade delete defined.
    ''' </summary>
    Public Function IsCascadeDeletePrincipal(ByVal associationEnd As AssociationEndMember) As Boolean
        If associationEnd Is Nothing Then
            Throw New ArgumentNullException("associationEnd")
        End If
        Return associationEnd.DeleteBehavior = OperationAction.Cascade OrElse IsPrincipalEndOfIdentifyingRelationship(associationEnd)
    End Function
    ''' <summary>
    ''' True if the specified association end is the principal end in an identifying relationship.
    ''' In order to be an identifying relationship, the association must have a referential constraint where all of the dependent properties are part of the dependent type's primary key.
    ''' </summary>
    Public Function IsPrincipalEndOfIdentifyingRelationship(ByVal associationEnd As AssociationEndMember) As Boolean
        If associationEnd Is Nothing Then
            Throw New ArgumentNullException("associationEnd")
        End If
        Dim refConstraint As ReferentialConstraint = DirectCast(associationEnd.DeclaringType, AssociationType).ReferentialConstraints.Where(Function(rc) rc.FromRole Is associationEnd).SingleOrDefault()
        If refConstraint IsNot Nothing Then
            Dim entity As EntityType = refConstraint.ToRole.GetEntityType()
            Return Not refConstraint.ToProperties.Where(Function(tp) Not entity.KeyMembers.Contains(tp)).Any()
        End If
        Return False
    End Function
    ''' <summary>
    ''' True if the specified association type is an identifying relationship.
    ''' In order to be an identifying relationship, the association must have a referential constraint where all of the dependent properties are part of the dependent type's primary key.
    ''' </summary>
    Public Function IsIdentifyingRelationship(ByVal association As AssociationType) As Boolean
        If association Is Nothing Then
            Throw New ArgumentNullException("association")
        End If
        Return IsPrincipalEndOfIdentifyingRelationship(association.AssociationEndMembers(0)) OrElse IsPrincipalEndOfIdentifyingRelationship(association.AssociationEndMembers(1))
    End Function
    ''' <summary>
    ''' requires: firstType is not null
    ''' effects: if secondType is among the base types of the firstType, return true,
    ''' otherwise returns false.
    ''' when firstType is same as the secondType, return false.
    ''' </summary>
    Public Function IsSubtypeOf(ByVal firstType As EdmType, ByVal secondType As EdmType) As Boolean
        If secondType Is Nothing Then
            Return False
        End If
        ' walk up firstType hierarchy list
        Dim t As EdmType = firstType.BaseType
        While t IsNot Nothing
            If t.Equals(secondType) Then
                Return True
            End If
            t = t.BaseType
        End While
        Return False
    End Function
    ''' <summary>
    ''' Returns the subtype of the EntityType in the current itemCollection
    ''' </summary>
    Public Function GetSubtypesOf(ByVal type As EntityType, ByVal itemCollection As ItemCollection, ByVal includeAbstractTypes As Boolean) As IEnumerable(Of EntityType)
        Dim subTypes As List(Of EntityType) = New List(Of EntityType)
        If type IsNot Nothing Then
            Dim typesInCollection As IEnumerable(Of EntityType) = itemCollection.GetItems(Of EntityType)()
            For Each typeInCollection As EntityType In typesInCollection
                If type.Equals(typeInCollection) = False AndAlso Me.IsSubtypeOf(typeInCollection, type) Then
                    If includeAbstractTypes OrElse Not typeInCollection.Abstract Then
                        subTypes.Add(typeInCollection)
                    End If
                End If
            Next
        End If
        Return subTypes
    End Function
    Public Shared Function TryGetStringMetadataPropertySetting(ByVal item As MetadataItem, ByVal propertyName As String, ByRef value As String) As Boolean
        Dim [property] As MetadataProperty = item.MetadataProperties.FirstOrDefault(Function(p) p.Name = propertyName)
        If [property] IsNot Nothing Then
            value = DirectCast([property].Value, String)
        End If
        Return value IsNot Nothing
    End Function
End Class
''' <summary>
''' Responsible for loading an EdmItemCollection from a .edmx file or .csdl files
''' </summary>
Public Class MetadataLoader
    Private ReadOnly _textTransformation As DynamicTextTransformation
    ''' <summary>
    ''' Initializes an MetadataLoader Instance with the
    ''' TextTransformation (T4 generated class) that is currently running
    ''' </summary>
    Public Sub New(ByVal textTransformation As Object)
        If textTransformation Is Nothing Then
            Throw New ArgumentNullException("textTransformation")
        End If
        _textTransformation = DynamicTextTransformation.Create(textTransformation)
    End Sub
    ''' <summary>
    ''' Load the metadata for Edm, Store, and Mapping collections and register them
    ''' with a new MetadataWorkspace, returns false if any of the parts can't be
    ''' created, some of the ItemCollections may be registered and usable even if false is
    ''' returned
    ''' </summary>
    Public Function TryLoadAllMetadata(ByVal inputFile As String, ByRef metadataWorkspace As MetadataWorkspace) As Boolean
        metadataWorkspace = New MetadataWorkspace()
        Dim edmItemCollection As EdmItemCollection = CreateEdmItemCollection(inputFile)
        metadataWorkspace.RegisterItemCollection(edmItemCollection)
        Dim storeItemCollection As StoreItemCollection = Nothing
        If TryCreateStoreItemCollection(inputFile, storeItemCollection) Then
            Dim storageMappingItemCollection As StorageMappingItemCollection = Nothing
            If TryCreateStorageMappingItemCollection(inputFile, edmItemCollection, storeItemCollection, storageMappingItemCollection) Then
                metadataWorkspace.RegisterItemCollection(storeItemCollection)
                metadataWorkspace.RegisterItemCollection(storageMappingItemCollection)
                Return True
            End If
        End If
        Return False
    End Function
    ''' <summary>
    ''' Create an EdmItemCollection loaded with the metadata provided
    ''' </summary>
    Public Function CreateEdmItemCollection(ByVal sourcePath As String, ByVal ParamArray referenceSchemas As String()) As EdmItemCollection
        Dim edmItemCollection As EdmItemCollection = Nothing
        If TryCreateEdmItemCollection(sourcePath, referenceSchemas, edmItemCollection) Then
            Return edmItemCollection
        End If
        Return New EdmItemCollection()
    End Function
    ''' <summary>
    ''' Attempts to create a EdmItemCollection from the specified metadata file
    ''' </summary>
    Public Function TryCreateEdmItemCollection(ByVal sourcePath As String, ByRef edmItemCollection As EdmItemCollection) As Boolean
        Return TryCreateEdmItemCollection(sourcePath, Nothing, edmItemCollection)
    End Function
    ''' <summary>
    ''' Attempts to create a EdmItemCollection from the specified metadata file
    ''' </summary>
    Public Function TryCreateEdmItemCollection(ByVal sourcePath As String, ByVal referenceSchemas As String(), ByRef edmItemCollection As EdmItemCollection) As Boolean
        edmItemCollection = Nothing
        If Not ValidateInputPath(sourcePath, _textTransformation) Then
            Return False
        End If
        If referenceSchemas Is Nothing Then
            referenceSchemas = New String(-1) {}
        End If
        Dim itemCollection As ItemCollection = Nothing
        sourcePath = _textTransformation.Host.ResolvePath(sourcePath)
        Dim collectionBuilder As New EdmItemCollectionBuilder(_textTransformation, referenceSchemas.Select(Function(s) _textTransformation.Host.ResolvePath(s)).Where(Function(s) s <> sourcePath))
        If collectionBuilder.TryCreateItemCollection(sourcePath, itemCollection) Then
            edmItemCollection = DirectCast(itemCollection, EdmItemCollection)
        End If
        Return edmItemCollection IsNot Nothing
    End Function
    ''' <summary>
    ''' Attempts to create a StoreItemCollection from the specified metadata file
    ''' </summary>
    Public Function TryCreateStoreItemCollection(ByVal sourcePath As String, ByRef storeItemCollection As StoreItemCollection) As Boolean
        storeItemCollection = Nothing
        If Not ValidateInputPath(sourcePath, _textTransformation) Then
            Return False
        End If
        Dim itemCollection As ItemCollection = Nothing
        Dim collectionBuilder As New StoreItemCollectionBuilder(_textTransformation)
        If collectionBuilder.TryCreateItemCollection(_textTransformation.Host.ResolvePath(sourcePath), itemCollection) Then
            storeItemCollection = DirectCast(itemCollection, StoreItemCollection)
        End If
        Return storeItemCollection IsNot Nothing
    End Function
    ''' <summary>
    ''' Attempts to create a StorageMappingItemCollection from the specified metadata file, EdmItemCollection, and StoreItemCollection
    ''' </summary>
    Public Function TryCreateStorageMappingItemCollection(ByVal sourcePath As String, ByVal edmItemCollection As EdmItemCollection, ByVal storeItemCollection As StoreItemCollection, ByRef storageMappingItemCollection As StorageMappingItemCollection) As Boolean
        storageMappingItemCollection = Nothing
        If Not ValidateInputPath(sourcePath, _textTransformation) Then
            Return False
        End If
        If edmItemCollection Is Nothing Then
            Throw New ArgumentNullException("edmItemCollection")
        End If
        If storeItemCollection Is Nothing Then
            Throw New ArgumentNullException("storeItemCollection")
        End If
        Dim itemCollection As ItemCollection = Nothing
        Dim collectionBuilder As New StorageMappingItemCollectionBuilder(_textTransformation, edmItemCollection, storeItemCollection)
        If collectionBuilder.TryCreateItemCollection(_textTransformation.Host.ResolvePath(sourcePath), itemCollection) Then
            storageMappingItemCollection = DirectCast(itemCollection, StorageMappingItemCollection)
        End If
        Return storageMappingItemCollection IsNot Nothing
    End Function
    ''' <summary>
    ''' Gets the Model Namespace from the provided schema file.
    ''' </summary>
    Public Function GetModelNamespace(ByVal sourcePath As String) As String
        If Not ValidateInputPath(sourcePath, _textTransformation) Then
            Return String.Empty
        End If
        Dim builder As New EdmItemCollectionBuilder(_textTransformation)
        Dim model As XElement = Nothing
        If builder.TryLoadRootElement(_textTransformation.Host.ResolvePath(sourcePath), model) Then
            Dim attribute As XAttribute = model.Attribute("Namespace")
            If attribute IsNot Nothing Then
                Return attribute.Value
            End If
        End If
        Return String.Empty
    End Function
    ''' <summary>
    ''' Returns true if the specified file path is valid
    ''' </summary>
    Private Shared Function ValidateInputPath(sourcePath As String, textTransformation As DynamicTextTransformation) As Boolean
        If String.IsNullOrEmpty(sourcePath) Then
            Throw New ArgumentException("sourcePath")
        End If
        If sourcePath = "$edmxInputFile$" Then
            textTransformation.Errors.Add(New CompilerError(If(textTransformation.Host.TemplateFile, CodeGenerationTools.GetResourceString("Template_CurrentlyRunningTemplate")), -1, -1, String.Empty, _
                CodeGenerationTools.GetResourceString("Template_ReplaceVsItemTemplateToken")))
            Return False
        End If
        Return True
    End Function
    ''' <summary>
    ''' base class for ItemCollectionBuilder classes that
    ''' load the specific types of metadata
    ''' </summary>
    Private MustInherit Class ItemCollectionBuilder
        Private ReadOnly _textTransformation As DynamicTextTransformation
        Private ReadOnly _fileExtension As String
        Private ReadOnly _edmxSectionName As String
        Private ReadOnly _rootElementName As String
        ''' <summary>
        ''' FileExtension for individual (non-edmx) metadata file for this
        ''' specific ItemCollection type
        ''' </summary>
        Public ReadOnly Property FileExtension() As String
            Get
                Return _fileExtension
            End Get
        End Property
        ''' <summary>
        ''' The name of the XmlElement in the .edmx <Runtime> element
        ''' to find this ItemCollection's metadata
        ''' </summary>
        Public ReadOnly Property EdmxSectionName() As String
            Get
                Return _edmxSectionName
            End Get
        End Property
        ''' <summary>
        ''' The name of the root element of this ItemCollection's metadata
        ''' </summary>
        Public ReadOnly Property RootElementName() As String
            Get
                Return _rootElementName
            End Get
        End Property
        ''' <summary>
        ''' Method to build the appropriate ItemCollection
        ''' </summary>
        Protected MustOverride Function CreateItemCollection(ByVal readers As IEnumerable(Of XmlReader), ByRef errors As IList(Of EdmSchemaError)) As ItemCollection
        ''' <summary>
        ''' Ctor to setup the ItemCollectionBuilder members
        ''' </summary>
        Protected Sub New(ByVal textTransformation As DynamicTextTransformation, ByVal fileExtension As String, ByVal edmxSectionName As String, ByVal rootElementName As String)
            _textTransformation = textTransformation
            _fileExtension = fileExtension
            _edmxSectionName = edmxSectionName
            _rootElementName = rootElementName
        End Sub
        ''' <summary>
        ''' Selects a namespace from the supplied constants.
        ''' </summary>
        Protected MustOverride Function GetNamespace(ByVal constants As SchemaConstants) As String
        ''' <summary>
        ''' Try to create an ItemCollection loaded with the metadata provided
        ''' </summary>
        Public Function TryCreateItemCollection(ByVal sourcePath As String, ByRef itemCollection As ItemCollection) As Boolean
            itemCollection = Nothing
            If Not ValidateInputPath(sourcePath, _textTransformation) Then
                Return False
            End If
            Dim schemaElement As XElement = Nothing
            If TryLoadRootElement(sourcePath, schemaElement) Then
                Dim readers As New List(Of XmlReader)()
                Try
                    readers.Add(schemaElement.CreateReader())
                    Dim errors As IList(Of EdmSchemaError) = Nothing
                    Dim tempItemCollection As ItemCollection = CreateItemCollection(readers, errors)
                    If ProcessErrors(errors, sourcePath) Then
                        Return False
                    End If
                    itemCollection = tempItemCollection
                    Return True
                Finally
                    For Each reader As XmlReader In readers
                        DirectCast(reader, IDisposable).Dispose()
                    Next
                End Try
            End If
            Return False
        End Function
        ''' <summary>
        ''' Tries to load the root element from the metadata file provided
        ''' </summary>
        Public Function TryLoadRootElement(ByVal sourcePath As String, ByRef schemaElement As XElement) As Boolean
            schemaElement = Nothing
            Dim extension As String = Path.GetExtension(sourcePath)
            If extension.Equals(".edmx", StringComparison.InvariantCultureIgnoreCase) Then
                Return TryLoadRootElementFromEdmx(sourcePath, schemaElement)
            ElseIf extension.Equals(FileExtension, StringComparison.InvariantCultureIgnoreCase) Then
                ' load from single metadata file (.csdl, .ssdl, or .msl)
                schemaElement = XElement.Load(sourcePath, LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)
                Return True
            End If
            Return False
        End Function
        ''' <summary>
        ''' Tries to load the root element from the provided edmxDocument
        ''' </summary>
        Private Function TryLoadRootElementFromEdmx(ByVal edmxDocument As XElement, ByVal schemaConstants As SchemaConstants, ByVal sectionName As String, ByVal rootElementName As String, ByRef rootElement As XElement) As Boolean
            rootElement = Nothing
            Dim edmxNs As XNamespace = schemaConstants.EdmxNamespace
            Dim sectionNs As XNamespace = GetNamespace(schemaConstants)
            Dim runtime As XElement = edmxDocument.Element(edmxNs + "Runtime")
            If runtime Is Nothing Then
                Return False
            End If
            Dim section As XElement = runtime.Element(edmxNs + sectionName)
            If section Is Nothing Then
                Return False
            End If
            Dim templateVersion As String = Nothing
            If Not TemplateMetadata.TryGetValue(MetadataConstants.TT_TEMPLATE_VERSION, templateVersion) Then
                templateVersion = MetadataConstants.DEFAULT_TEMPLATE_VERSION
            End If
            If schemaConstants.MinimumTemplateVersion > New Version(templateVersion) Then
                _textTransformation.Errors.Add(New CompilerError(If(_textTransformation.Host.TemplateFile, CodeGenerationTools.GetResourceString("Template_CurrentlyRunningTemplate")), -1, -1, String.Empty, _
                    CodeGenerationTools.GetResourceString("Template_UnsupportedSchema")) With { _
                        .IsWarning = True _
                    })
            End If
            rootElement = section.Element(sectionNs + rootElementName)
            Return rootElement IsNot Nothing
        End Function
        ''' <summary>
        ''' Tries to load the root element from the provided .edmx metadata file
        ''' </summary>
        Private Function TryLoadRootElementFromEdmx(ByVal edmxPath As String, ByRef rootElement As XElement) As Boolean
            rootElement = Nothing
            Dim element As XElement = XElement.Load(edmxPath, LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)
            Return TryLoadRootElementFromEdmx(element, MetadataConstants.V3_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, rootElement) OrElse TryLoadRootElementFromEdmx(element, MetadataConstants.V2_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, rootElement) OrElse TryLoadRootElementFromEdmx(element, MetadataConstants.V1_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, rootElement)
        End Function
        ''' <summary>
        ''' Takes an Enumerable of EdmSchemaErrors, and adds them
        ''' to the errors collection of the template class
        ''' </summary>
        Private Function ProcessErrors(ByVal errors As IEnumerable(Of EdmSchemaError), ByVal sourceFilePath As String) As Boolean
            Dim foundErrors As Boolean = False
            For Each schemaError As EdmSchemaError In errors
                Dim newError As New CompilerError(schemaError.SchemaLocation, schemaError.Line, schemaError.Column, schemaError.ErrorCode.ToString(CultureInfo.InvariantCulture), schemaError.Message)
                newError.IsWarning = schemaError.Severity = EdmSchemaErrorSeverity.Warning
                foundErrors = foundErrors Or schemaError.Severity = EdmSchemaErrorSeverity.Error
                If schemaError.SchemaLocation Is Nothing Then
                    newError.FileName = sourceFilePath
                End If
                _textTransformation.Errors.Add(newError)
            Next
            Return foundErrors
        End Function
    End Class
    ''' <summary>
    ''' Builder class for creating a StorageMappingItemCollection
    ''' </summary>
    Private Class StorageMappingItemCollectionBuilder
        Inherits ItemCollectionBuilder
        Private ReadOnly _edmItemCollection As EdmItemCollection
        Private ReadOnly _storeItemCollection As StoreItemCollection
        Public Sub New(ByVal textTransformation As DynamicTextTransformation, ByVal edmItemCollection As EdmItemCollection, ByVal storeItemCollection As StoreItemCollection)
            MyBase.New(textTransformation, MetadataConstants.MSL_EXTENSION, MetadataConstants.MSL_EDMX_SECTION_NAME, MetadataConstants.MSL_ROOT_ELEMENT_NAME)
            _edmItemCollection = edmItemCollection
            _storeItemCollection = storeItemCollection
        End Sub
        Protected Overloads Overrides Function CreateItemCollection(ByVal readers As IEnumerable(Of XmlReader), ByRef errors As IList(Of EdmSchemaError)) As ItemCollection
            Return MetadataItemCollectionFactory.CreateStorageMappingItemCollection(_edmItemCollection, _storeItemCollection, readers, errors)
        End Function
        ''' <summary>
        ''' Selects a namespace from the supplied constants.
        ''' </summary>
        Protected Overrides Function GetNamespace(ByVal constants As SchemaConstants) As String
            Return constants.MslNamespace
        End Function
    End Class
    ''' <summary>
    ''' Builder class for creating a StoreItemCollection
    ''' </summary>
    Private Class StoreItemCollectionBuilder
        Inherits ItemCollectionBuilder
        Public Sub New(ByVal textTransformation As DynamicTextTransformation)
            MyBase.New(textTransformation, MetadataConstants.SSDL_EXTENSION, MetadataConstants.SSDL_EDMX_SECTION_NAME, MetadataConstants.SSDL_ROOT_ELEMENT_NAME)
        End Sub
        Protected Overloads Overrides Function CreateItemCollection(ByVal readers As IEnumerable(Of XmlReader), ByRef errors As IList(Of EdmSchemaError)) As ItemCollection
            Return MetadataItemCollectionFactory.CreateStoreItemCollection(readers, errors)
        End Function
        ''' <summary>
        ''' Selects a namespace from the supplied constants.
        ''' </summary>
        Protected Overrides Function GetNamespace(ByVal constants As SchemaConstants) As String
            Return constants.SsdlNamespace
        End Function
    End Class
    ''' <summary>
    ''' Builder class for creating a EdmItemCollection
    ''' </summary>
    Private Class EdmItemCollectionBuilder
        Inherits ItemCollectionBuilder
        Private _referenceSchemas As New List(Of String)()
        Public Sub New(ByVal textTransformation As DynamicTextTransformation)
            MyBase.New(textTransformation, MetadataConstants.CSDL_EXTENSION, MetadataConstants.CSDL_EDMX_SECTION_NAME, MetadataConstants.CSDL_ROOT_ELEMENT_NAME)
        End Sub
        Public Sub New(ByVal textTransformation As DynamicTextTransformation, ByVal referenceSchemas As IEnumerable(Of String))
            Me.New(textTransformation)
            _referenceSchemas.AddRange(referenceSchemas)
        End Sub
        Protected Overloads Overrides Function CreateItemCollection(ByVal readers As IEnumerable(Of XmlReader), ByRef errors As IList(Of EdmSchemaError)) As ItemCollection
            Dim ownedReaders As New List(Of XmlReader)()
            Dim allReaders As New List(Of XmlReader)()
            Try
                allReaders.AddRange(readers)
                For Each path As String In _referenceSchemas.Distinct()
                    Dim reference As XElement = Nothing
                    If TryLoadRootElement(path, reference) Then
                        Dim reader As XmlReader = reference.CreateReader()
                        allReaders.Add(reader)
                        ownedReaders.Add(reader)
                    End If
                Next
                Return MetadataItemCollectionFactory.CreateEdmItemCollection(allReaders, errors)
            Finally
                For Each reader As XmlReader In ownedReaders
                    DirectCast(reader, IDisposable).Dispose()
                Next
            End Try
        End Function
        ''' <summary>
        ''' Selects a namespace from the supplied constants.
        ''' </summary>
        Protected Overrides Function GetNamespace(ByVal constants As SchemaConstants) As String
            Return constants.CsdlNamespace
        End Function
    End Class
End Class
''' <summary>
''' Responsible for encapsulating the retrieval and translation of the CodeGeneration
''' annotations in the EntityFramework Metadata to a form that is useful in code generation.
''' </summary>
Public Class Accessibility
    Private Sub New()
    End Sub
    Private Const GETTER_ACCESS As String = "http://schemas.microsoft.com/ado/2006/04/codegeneration:GetterAccess"
    Private Const SETTER_ACCESS As String = "http://schemas.microsoft.com/ado/2006/04/codegeneration:SetterAccess"
    Private Const TYPE_ACCESS As String = "http://schemas.microsoft.com/ado/2006/04/codegeneration:TypeAccess"
    Private Const METHOD_ACCESS As String = "http://schemas.microsoft.com/ado/2006/04/codegeneration:MethodAccess"
    Private Const ACCESS_PROTECTED As String = "Protected"
    Private Const ACCESS_INTERNAL As String = "Internal"
    Private Const ACCESS_PRIVATE As String = "Private"
    Private Shared ReadOnly AccessibilityRankIdLookup As New Dictionary(Of String, Integer)() From _
        { _
            { "Private", 1}, _
            { "Friend", 2}, _
            { "Protected", 3}, _
            { "Public", 4} _
        }
    ''' <summary>
    ''' Gets the accessibility that should be applied to a type being generated from the provided GlobalItem.
    '''
    ''' defaults to public if no annotation is found.
    ''' </summary>
    Public Shared Function ForType(ByVal item As GlobalItem) As String
        If item Is Nothing Then
            Return Nothing
        End If
        Return GetAccessibility(item, TYPE_ACCESS)
    End Function
    ''' <summary>
    ''' Gets the accessibility that should be applied at the property level for a property being
    ''' generated from the provided EdmMember.
    '''
    ''' defaults to public if no annotation is found.
    ''' </summary>
    Public Shared Function ForProperty(ByVal member As EdmMember) As String
        If member Is Nothing Then
            Return Nothing
        End If
        Dim getterAccess As String = Nothing
        Dim setterAccess As String = Nothing
        Dim propertyAccess As String = Nothing
        CalculatePropertyAccessibility(member, propertyAccess, getterAccess, setterAccess)
        Return propertyAccess
    End Function
    ''' <summary>
    ''' Gets the accessibility that should be applied at the property level for a Read-Only property being
    ''' generated from the provided EdmMember.
    '''
    ''' defaults to public if no annotation is found.
    ''' </summary>
    Public Shared Function ForReadOnlyProperty(ByVal member As EdmMember) As String
        If member Is Nothing Then
            Return Nothing
        End If
        Return GetAccessibility(member, GETTER_ACCESS)
    End Function
    ''' <summary>
    ''' Gets the accessibility that should be applied at the property level for a property being
    ''' generated from the provided EntitySet.
    '''
    ''' defaults to public if no annotation is found.
    ''' </summary>
    Public Shared Function ForReadOnlyProperty(ByVal edmSet As EntitySet) As String
        If edmSet Is Nothing Then
            Return Nothing
        End If
        Return GetAccessibility(edmSet, GETTER_ACCESS)
    End Function
    ''' <summary>
    ''' Gets the accessibility that should be applied at the property level for a Write-Only property being
    ''' generated from the provided EdmMember.
    '''
    ''' defaults to public if no annotation is found.
    ''' </summary>
    Public Shared Function ForWriteOnlyProperty(ByVal member As EdmMember) As String
        If member Is Nothing Then
            Return Nothing
        End If
        Return GetAccessibility(member, SETTER_ACCESS)
    End Function
    ''' <summary>
    ''' Gets the accessibility that should be applied at the get level for a property being
    ''' generated from the provided EdmMember.
    '''
    ''' defaults to empty if no annotation is found or the accessibility is the same as the property level.
    ''' </summary>
    Public Shared Function ForGetter(ByVal member As EdmMember) As String
        If member Is Nothing Then
            Return Nothing
        End If
        Dim getterAccess As String = Nothing
        Dim setterAccess As String = Nothing
        Dim propertyAccess As String = Nothing
        CalculatePropertyAccessibility(member, propertyAccess, getterAccess, setterAccess)
        Return getterAccess
    End Function
    ''' <summary>
    ''' Gets the accessibility that should be applied at the set level for a property being
    ''' generated from the provided EdmMember.
    '''
    ''' defaults to empty if no annotation is found or the accessibility is the same as the property level.
    ''' </summary>
    Public Shared Function ForSetter(ByVal member As EdmMember) As String
        If member Is Nothing Then
            Return Nothing
        End If
        Dim getterAccess As String = Nothing
        Dim setterAccess As String = Nothing
        Dim propertyAccess As String = Nothing
        CalculatePropertyAccessibility(member, propertyAccess, getterAccess, setterAccess)
        Return setterAccess
    End Function
    ''' <summary>
    ''' Gets the accessibility that should be applied to a method being generated from the provided EdmFunction.
    '''
    ''' defaults to public if no annotation is found.
    ''' </summary>
    Public Shared Function ForMethod(ByVal edmFunction As EdmFunction) As String
        If edmFunction Is Nothing Then
            Return Nothing
        End If
        Return GetAccessibility(edmFunction, METHOD_ACCESS)
    End Function
    Private Shared Sub CalculatePropertyAccessibility(ByVal item As MetadataItem, ByRef propertyAccessibility As String, ByRef getterAccessibility As String, ByRef setterAccessibility As String)
        getterAccessibility = GetAccessibility(item, GETTER_ACCESS)
        Dim getterRank As Integer = AccessibilityRankIdLookup(getterAccessibility)
        setterAccessibility = GetAccessibility(item, SETTER_ACCESS)
        Dim setterRank As Integer = AccessibilityRankIdLookup(setterAccessibility)
        Dim propertyRank As Integer = Math.Max(getterRank, setterRank)
        If setterRank = propertyRank Then
            setterAccessibility = String.Empty
        End If
        If getterRank = propertyRank Then
            getterAccessibility = String.Empty
        End If
        propertyAccessibility = AccessibilityRankIdLookup.Where(Function(v) v.Value = propertyRank).Select(Function(v) v.Key).Single()
    End Sub
    Private Shared Function GetAccessibility(ByVal item As MetadataItem, ByVal name As String) As String
        Dim accessibility As String = Nothing
        If MetadataTools.TryGetStringMetadataPropertySetting(item, name, accessibility) Then
            Return TranslateUserAccessibilityToCSharpAccessibility(accessibility)
        End If
        Return "Public"
    End Function
    Private Shared Function TranslateUserAccessibilityToCSharpAccessibility(ByVal userAccessibility As String) As String
        If userAccessibility = ACCESS_PROTECTED Then
            Return "Protected"
        ElseIf userAccessibility = ACCESS_INTERNAL Then
            Return "Friend"
        ElseIf userAccessibility = ACCESS_PRIVATE Then
            Return "Private"
        Else
            ' default to public
            Return "Public"
        End If
    End Function
End Class
''' <summary>
''' Responsible for creating source code regions in code when the loop inside
''' actually produces something.
''' </summary>
Public Class CodeRegion
    Private Const STANDARD_INDENT_LENGTH As Integer = 4
    Private ReadOnly _textTransformation As DynamicTextTransformation
    Private _beforeRegionLength As Integer
    Private _emptyRegionLength As Integer
    Private _regionIndentLevel As Integer = -1
    ''' <summary>
    ''' Initializes an CodeRegion instance with the
    ''' TextTransformation (T4 generated class) that is currently running
    ''' </summary>
    Public Sub New(ByVal textTransformation As Object)
        If textTransformation Is Nothing Then
            Throw New ArgumentNullException("textTransformation")
        End If
        _textTransformation = DynamicTextTransformation.Create(textTransformation)
    End Sub
    ''' <summary>
    ''' Initializes an CodeRegion instance with the
    ''' TextTransformation (T4 generated class) that is currently running,
    ''' and the indent level to start the first region at.
    ''' </summary>
    Public Sub New(ByVal textTransformation As Object, ByVal firstIndentLevel As Integer)
        Me.New(textTransformation)
        If firstIndentLevel < 0 Then
            Throw New ArgumentException("firstIndentLevel")
        End If
        _regionIndentLevel = firstIndentLevel - 1
    End Sub
    ''' <summary>
    ''' Starts the begining of a region
    ''' </summary>
    Public Sub Begin(ByVal regionName As String)
        If regionName Is Nothing Then
            Throw New ArgumentNullException("regionName")
        End If
        Begin(regionName, 1)
    End Sub
    ''' <summary>
    ''' Start the begining of a region, indented
    ''' the numbers of levels specified
    ''' </summary>
    Public Sub Begin(ByVal regionName As String, ByVal levelsToIncreaseIndent As Integer)
        If regionName Is Nothing Then
            Throw New ArgumentNullException("regionName")
        End If
        _beforeRegionLength = _textTransformation.GenerationEnvironment.Length
        _regionIndentLevel += levelsToIncreaseIndent
        _textTransformation.Write(GetIndent(_regionIndentLevel))
        _textTransformation.WriteLine("#Region """ + regionName + """")
        _emptyRegionLength = _textTransformation.GenerationEnvironment.Length
    End Sub
    ''' <summary>
    ''' Ends a region, or totaly removes it if nothing
    ''' was generted since the begining of the region.
    ''' </summary>
    Public Sub [End]()
        [End](1)
    End Sub
    ''' <summary>
    ''' Ends a region, or totaly removes it if nothing
    ''' was generted since the begining of the region, also outdents
    ''' the number of levels specified.
    ''' </summary>
    Public Sub [End](ByVal levelsToDecrease As Integer)
        Dim indentLevel As Integer = _regionIndentLevel
        _regionIndentLevel -= levelsToDecrease
        If _emptyRegionLength = _textTransformation.GenerationEnvironment.Length Then
            _textTransformation.GenerationEnvironment.Length = _beforeRegionLength
        Else
            _textTransformation.WriteLine(String.Empty)
            _textTransformation.Write(GetIndent(indentLevel))
            _textTransformation.WriteLine("#End Region")
            _textTransformation.WriteLine(String.Empty)
        End If
    End Sub
    ''' <summary>
    ''' Gets the current indent level that the next end region statement will be written
    ''' at
    ''' </summary>
    Public ReadOnly Property CurrentIndentLevel() As Integer
        Get
            Return _regionIndentLevel
        End Get
    End Property
    ''' <summary>
    ''' Get a string of spaces equivelent to the number of indents
    ''' desired.
    ''' </summary>
    Public Shared Function GetIndent(ByVal indentLevel As Integer) As String
        If indentLevel < 0 Then
            Throw New ArgumentException("indentLevel")
        End If
        Return String.Empty.PadLeft(indentLevel * STANDARD_INDENT_LENGTH)
    End Function
End Class
''' <summary>
''' Responsible for collecting together the actual method parameters
''' and the parameters that need to be sent to the Execute method.
''' </summary>
Public Class FunctionImportParameter
Private _Source As FunctionParameter
    Public Property Source() As FunctionParameter
        Get
            Return _Source
        End Get
        Set(ByVal value As FunctionParameter)
            _Source = value
        End Set
    End Property
Private _RawFunctionParameterName As String
    Public Property RawFunctionParameterName() As String
        Get
            Return _RawFunctionParameterName
        End Get
        Set(ByVal value As String)
            _RawFunctionParameterName = value
        End Set
    End Property
Private _FunctionParameterName As String
    Public Property FunctionParameterName() As String
        Get
            Return _FunctionParameterName
        End Get
        Set(ByVal value As String)
            _FunctionParameterName = value
        End Set
    End Property
Private _FunctionParameterType As String
    Public Property FunctionParameterType() As String
        Get
            Return _FunctionParameterType
        End Get
        Set(ByVal value As String)
            _FunctionParameterType = value
        End Set
    End Property
Private _LocalVariableName As String
    Public Property LocalVariableName() As String
        Get
            Return _LocalVariableName
        End Get
        Set(ByVal value As String)
            _LocalVariableName = value
        End Set
    End Property
Private _RawClrTypeName As String
    Public Property RawClrTypeName() As String
        Get
            Return _RawClrTypeName
        End Get
        Set(ByVal value As String)
            _RawClrTypeName = value
        End Set
    End Property
Private _ExecuteParameterName As String
    Public Property ExecuteParameterName() As String
        Get
            Return _ExecuteParameterName
        End Get
        Set(ByVal value As String)
            _ExecuteParameterName = value
        End Set
    End Property
Private _EsqlParameterName As String
    Public Property EsqlParameterName() As String
        Get
            Return _EsqlParameterName
        End Get
        Set(ByVal value As String)
            _EsqlParameterName = value
        End Set
    End Property
Private _NeedsLocalVariable As Boolean
    Public Property NeedsLocalVariable() As Boolean
        Get
            Return _NeedsLocalVariable
        End Get
        Set(ByVal value As Boolean)
            _NeedsLocalVariable = value
        End Set
    End Property
Private _IsNullableOfT As Boolean
    Public Property IsNullableOfT() As Boolean
        Get
            Return _IsNullableOfT
        End Get
        Set(ByVal value As Boolean)
            _IsNullableOfT = value
        End Set
    End Property
    ''' <summary>
    ''' Creates a set of FunctionImportParameter objects from the parameters passed in.
    ''' </summary>
    Public Shared Function Create(ByVal parameters As IEnumerable(Of FunctionParameter), ByVal code As CodeGenerationTools, ByVal ef As MetadataTools) As IEnumerable(Of FunctionImportParameter)
        If parameters Is Nothing Then
            Throw New ArgumentNullException("parameters")
        End If
        If code Is Nothing Then
            Throw New ArgumentNullException("code")
        End If
        If ef Is Nothing Then
            Throw New ArgumentNullException("ef")
        End If
        Dim unique As New UniqueIdentifierService()
        Dim importParameters As New List(Of FunctionImportParameter)()
        For Each parameter As FunctionParameter In parameters
            Dim importParameter As New FunctionImportParameter()
            importParameter.Source = parameter
            importParameter.RawFunctionParameterName = unique.AdjustIdentifier(code.CamelCase(parameter.Name))
            importParameter.FunctionParameterName = code.Escape(importParameter.RawFunctionParameterName)
            If parameter.Mode = ParameterMode.In Then
                Dim typeUsage As TypeUsage = parameter.TypeUsage
                importParameter.NeedsLocalVariable = True
                importParameter.FunctionParameterType = code.GetTypeName(typeUsage)
                importParameter.EsqlParameterName = parameter.Name
                Dim clrType As Type = ef.UnderlyingClrType(parameter.TypeUsage.EdmType)
                importParameter.RawClrTypeName = If(TypeOf typeUsage.EdmType Is EnumType, code.GetTypeName(typeUsage.EdmType), code.Escape(clrType))
                importParameter.IsNullableOfT = clrType.IsValueType
            Else
                importParameter.NeedsLocalVariable = False
                importParameter.FunctionParameterType = "ObjectParameter"
                importParameter.ExecuteParameterName = importParameter.FunctionParameterName
            End If
            importParameters.Add(importParameter)
        Next
        ' we save the local parameter uniquification for a second pass to make the visible parameters
        ' as pretty and sensible as possible
        For i As Integer = 0 To importParameters.Count - 1
            Dim importParameter As FunctionImportParameter = importParameters(i)
            If importParameter.NeedsLocalVariable Then
                importParameter.LocalVariableName = unique.AdjustIdentifier(importParameter.RawFunctionParameterName & "Parameter")
                importParameter.ExecuteParameterName = importParameter.LocalVariableName
            End If
        Next
        Return importParameters
    End Function
    '
    ' Class to create unique variables within the same scope
    '
    Private NotInheritable Class UniqueIdentifierService
        Private ReadOnly _knownIdentifiers As HashSet(Of String)
        Public Sub New()
            _knownIdentifiers = New HashSet(Of String)(StringComparer.OrdinalIgnoreCase)
        End Sub
        ''' <summary>
        ''' Given an identifier, makes it unique within the scope by adding
        ''' a suffix (1, 2, 3, ...), and returns the adjusted identifier.
        ''' </summary>
        Public Function AdjustIdentifier(ByVal identifier As String) As String
            ' find a unique name by adding suffix as necessary
            Dim numberOfConflicts As Integer = 0
            Dim adjustedIdentifier As String = identifier
            While Not _knownIdentifiers.Add(adjustedIdentifier)
                numberOfConflicts += 1
                adjustedIdentifier = identifier + numberOfConflicts.ToString(CultureInfo.InvariantCulture)
            End While
            Return adjustedIdentifier
        End Function
    End Class
End Class
''' <summary>
''' Responsible for marking the various sections of the generation,
''' so they can be split up into separate files
''' </summary>
Public Class EntityFrameworkTemplateFileManager
    ''' <summary>
    ''' Creates the VsEntityFrameworkTemplateFileManager if VS is detected, otherwise
    ''' creates the file system version.
    ''' </summary>
    Public Shared Function Create(ByVal textTransformation As Object) As EntityFrameworkTemplateFileManager
        Dim transformation As DynamicTextTransformation = DynamicTextTransformation.Create(textTransformation)
        Dim host As IDynamicHost = transformation.Host
        #If Not PREPROCESSED_TEMPLATE Then
        Dim hostServiceProvider = host.AsIServiceProvider()
        If hostServiceProvider IsNot Nothing Then
            Dim dte = DirectCast(hostServiceProvider.GetService(GetType(EnvDTE.DTE)), EnvDTE.DTE)
            If dte IsNot Nothing Then
                Return New VsEntityFrameworkTemplateFileManager(transformation)
            End If
        End If
        #End If
        Return New EntityFrameworkTemplateFileManager(transformation)
    End Function
    Private NotInheritable Class Block
        Public Name As String
        Public Start As Integer, Length As Integer
    End Class
    Private ReadOnly files As New List(Of Block)()
    Private ReadOnly footer As New Block()
    Private ReadOnly header As New Block()
    Private ReadOnly _textTransformation As DynamicTextTransformation
    ' reference to the GenerationEnvironment StringBuilder on the
    ' TextTransformation object
    Private ReadOnly _generationEnvironment As StringBuilder
    Private m_currentBlock As Block
    ''' <summary>
    ''' Initializes an EntityFrameworkTemplateFileManager Instance  with the
    ''' TextTransformation (T4 generated class) that is currently running
    ''' </summary>
    Private Sub New(ByVal textTransformation As Object)
        If textTransformation Is Nothing Then
            Throw New ArgumentNullException("textTransformation")
        End If
        _textTransformation = DynamicTextTransformation.Create(textTransformation)
        _generationEnvironment = _textTransformation.GenerationEnvironment
    End Sub
    ''' <summary>
    ''' Marks the end of the last file if there was one, and starts a new
    ''' and marks this point in generation as a new file.
    ''' </summary>
    Public Sub StartNewFile(ByVal name As String)
        If name Is Nothing Then
            Throw New ArgumentNullException("name")
        End If
        CurrentBlock = New Block() With { .Name = name }
    End Sub
    Public Sub StartFooter()
        CurrentBlock = footer
    End Sub
    Public Sub StartHeader()
        CurrentBlock = header
    End Sub
    Public Sub EndBlock()
        If CurrentBlock Is Nothing Then
            Exit Sub
        End If
        CurrentBlock.Length = _generationEnvironment.Length - CurrentBlock.Start
        If CurrentBlock IsNot header AndAlso CurrentBlock IsNot footer Then
            files.Add(CurrentBlock)
        End If
        m_currentBlock = Nothing
    End Sub
    ''' <summary>
    ''' Produce the template output files.
    ''' </summary>
    Public Overridable Function Process(Optional split As Boolean = True) As IEnumerable(Of String)
        Dim generatedFileNames As List(Of String) = New List(Of String)()
        If split Then
            EndBlock()
            Dim headerText As String = _generationEnvironment.ToString(header.Start, header.Length)
            Dim footerText As String = _generationEnvironment.ToString(footer.Start, footer.Length)
            Dim outputPath As String = Path.GetDirectoryName(_textTransformation.Host.TemplateFile)
            files.Reverse()
            For Each block As Block In files
                Dim fileName As String = Path.Combine(outputPath, block.Name)
                Dim content = headerText + _generationEnvironment.ToString(block.Start, block.Length) + footerText
                generatedFileNames.Add(fileName)
                CreateFile(fileName, content)
                _generationEnvironment.Remove(block.Start, block.Length)
            Next
        End If
        Return generatedFileNames
    End Function
    Protected Overridable Sub CreateFile(ByVal fileName As String, ByVal content As String)
        If IsFileContentDifferent(fileName, content) Then
            File.WriteAllText(fileName, content)
        End If
    End Sub
    Protected Function IsFileContentDifferent(ByVal fileName As String, ByVal newContent As String) As Boolean
        Return Not (File.Exists(fileName) AndAlso File.ReadAllText(fileName) = newContent)
    End Function
    Private Property CurrentBlock() As Block
        Get
            Return m_currentBlock
        End Get
        Set(ByVal value As Block)
            If CurrentBlock IsNot Nothing Then
                EndBlock()
            End If
            If value IsNot Nothing Then
                value.Start = _generationEnvironment.Length
            End If
            m_currentBlock = value
        End Set
    End Property
    #If Not PREPROCESSED_TEMPLATE Then
    Private NotInheritable Class VsEntityFrameworkTemplateFileManager
        Inherits EntityFrameworkTemplateFileManager
        Private templateProjectItem As EnvDTE.ProjectItem
        Private dte As EnvDTE.DTE
        Private checkOutAction As Action(Of String)
        Private projectSyncAction As Action(Of IEnumerable(Of String))
        ''' <summary>
        ''' Creates an instance of the VsEntityFrameworkTemplateFileManager class with the IDynamicHost instance
        ''' </summary>
        Public Sub New(ByVal textTemplating As Object)
            MyBase.New(textTemplating)
            Dim hostServiceProvider = _textTransformation.Host.AsIServiceProvider()
            If hostServiceProvider Is Nothing Then
                Throw New ArgumentNullException("Could not obtain hostServiceProvider")
            End If
            dte = DirectCast(hostServiceProvider.GetService(GetType(EnvDTE.DTE)), EnvDTE.DTE)
            If dte Is Nothing Then
                Throw New ArgumentNullException("Could not obtain DTE from host")
            End If
            templateProjectItem = dte.Solution.FindProjectItem(_textTransformation.Host.TemplateFile)
            checkOutAction = Function(fileName) dte.SourceControl.CheckOutItem(fileName)
            projectSyncAction = Sub(keepFileNames) ProjectSync(templateProjectItem, keepFileNames)
        End Sub
        Public Overloads Overrides Function Process(Optional split As Boolean = True) As IEnumerable(Of String)
            If templateProjectItem.ProjectItems Is Nothing Then
                Return New List(Of String)
            End If
            Dim generatedFileNames As IEnumerable(Of String) = MyBase.Process(split)
            projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, Nothing, Nothing))
            Return generatedFileNames
        End Function
        Protected Overloads Overrides Sub CreateFile(ByVal fileName As String, ByVal content As String)
            If IsFileContentDifferent(fileName, content) Then
                CheckoutFileIfRequired(fileName)
                File.WriteAllText(fileName, content)
            End If
        End Sub
        Private Shared Sub ProjectSync(ByVal templateProjectItem As EnvDTE.ProjectItem, ByVal keepFileNames As IEnumerable(Of String))
            Dim keepFileNameSet = New HashSet(Of String)(keepFileNames)
            Dim projectFiles = New Dictionary(Of String, EnvDTE.ProjectItem)()
            Dim originalOutput = Path.GetFileNameWithoutExtension(templateProjectItem.FileNames(0))
            For Each projectItem As EnvDTE.ProjectItem In templateProjectItem.ProjectItems
                projectFiles.Add(projectItem.FileNames(0), projectItem)
            Next
            ' Remove unused items from the project
            For Each pair As KeyValuePair(Of String, EnvDTE.ProjectItem) In projectFiles
                If Not keepFileNames.Contains(pair.Key) _
                  AndAlso Not (Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalOutput + ".") Then
                    pair.Value.Delete()
                End If
            Next
            ' Add missing files to the project
            For Each fileName As String In keepFileNameSet
                If Not projectFiles.ContainsKey(fileName) Then
                    templateProjectItem.ProjectItems.AddFromFile(fileName)
                End If
            Next
        End Sub
        Private Sub CheckoutFileIfRequired(ByVal fileName As String)
            If dte.SourceControl Is Nothing OrElse Not dte.SourceControl.IsItemUnderSCC(fileName) OrElse dte.SourceControl.IsItemCheckedOut(fileName) Then
                Exit Sub
            End If
            ' run on worker thread to prevent T4 calling back into VS
            checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, Nothing, Nothing))
        End Sub
    End Class
    #End If
End Class
''' <summary>
''' Responsible creating an instance that can be passed
''' to helper classes that need to access the TextTransformation
''' members. It accesses member by name and signature rather than
''' by type. This is necessary when the
''' template is being used in Preprocessed mode
''' and there is no common known type that can be
''' passed instead
''' </summary>
Public Class DynamicTextTransformation
    Private _instance As Object
    Private _dynamicHost As IDynamicHost
    Private ReadOnly _write As MethodInfo
    Private ReadOnly _writeLine As MethodInfo
    Private ReadOnly _generationEnvironment As PropertyInfo
    Private ReadOnly _errors As PropertyInfo
    Private ReadOnly _host As PropertyInfo
    ''' <summary>
    ''' Creates an instance of the DynamicTextTransformation class around the passed in
    ''' TextTransformation shapped instance passed in, or if the passed in instance
    ''' already is a DynamicTextTransformation, it casts it and sends it back.
    ''' </summary>
    Public Shared Function Create(ByVal instance As Object) As DynamicTextTransformation
        If instance Is Nothing Then
            Throw New ArgumentNullException("instance")
        End If
        Dim textTransformation As DynamicTextTransformation = TryCast(instance, DynamicTextTransformation)
        If textTransformation IsNot Nothing Then
            Return textTransformation
        End If
        Return New DynamicTextTransformation(instance)
    End Function
    Private Sub New(ByVal instance As Object)
        _instance = instance
        Dim type As Type = _instance.GetType()
        _write = type.GetMethod("Write", New Type() {GetType(String)})
        _writeLine = type.GetMethod("WriteLine", New Type() {GetType(String)})
        _generationEnvironment = type.GetProperty("GenerationEnvironment", BindingFlags.Instance Or BindingFlags.NonPublic)
        _host = type.GetProperty("Host")
        _errors = type.GetProperty("Errors")
    End Sub
    ''' <summary>
    ''' Gets the value of the wrapped TextTranformation instance's GenerationEnvironment property
    ''' </summary>
    Public ReadOnly Property GenerationEnvironment() As StringBuilder
        Get
            Return DirectCast(_generationEnvironment.GetValue(_instance, Nothing), StringBuilder)
        End Get
    End Property
    ''' <summary>
    ''' Gets the value of the wrapped TextTranformation instance's Errors property
    ''' </summary>
    Public ReadOnly Property Errors() As System.CodeDom.Compiler.CompilerErrorCollection
        Get
            Return DirectCast(_errors.GetValue(_instance, Nothing), System.CodeDom.Compiler.CompilerErrorCollection)
        End Get
    End Property
    ''' <summary>
    ''' Calls the wrapped TextTranformation instance's Write method.
    ''' </summary>
    Public Sub Write(ByVal text As String)
        _write.Invoke(_instance, New Object() {text})
    End Sub
    ''' <summary>
    ''' Calls the wrapped TextTranformation instance's WriteLine method.
    ''' </summary>
    Public Sub WriteLine(ByVal text As String)
        _writeLine.Invoke(_instance, New Object() {text})
    End Sub
    ''' <summary>
    ''' Gets the value of the wrapped TextTranformation instance's Host property
    ''' if available (shows up when hostspecific is set to true in the template directive) and returns
    ''' the appropriate implementation of IDynamicHost
    ''' </summary>
    Public ReadOnly Property Host() As IDynamicHost
        Get
            If _dynamicHost Is Nothing Then
                If _host Is Nothing Then
                    _dynamicHost = New NullHost()
                Else
                    _dynamicHost = New DynamicHost(_host.GetValue(_instance, Nothing))
                End If
            End If
            Return _dynamicHost
        End Get
    End Property
End Class
''' <summary>
''' Reponsible for abstracting the use of Host between times
''' when it is available and not
''' </summary>
Public Interface IDynamicHost
    ''' <summary>
    ''' An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
    ''' </summary>
    Function ResolveParameterValue(ByVal id As String, ByVal name As String, ByVal otherName As String) As String
    ''' <summary>
    ''' An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
    ''' </summary>
    Function ResolvePath(ByVal path As String) As String
    ''' <summary>
    ''' An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
    ''' </summary>
    ReadOnly Property TemplateFile() As String
    ''' <summary>
    ''' Returns the Host instance cast as an IServiceProvider
    ''' </summary>
    Function AsIServiceProvider() As IServiceProvider
End Interface
''' <summary>
''' Reponsible for implementing the IDynamicHost as a dynamic
''' shape wrapper over the Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost interface
''' rather than type dependent wrapper. We don't use the
''' interface type so that the code can be run in preprocessed mode
''' on a .net framework only installed machine.
''' </summary>
Public Class DynamicHost
    Implements IDynamicHost
    Private ReadOnly _instance As Object
    Private ReadOnly _resolveParameterValue As MethodInfo
    Private ReadOnly _resolvePath As MethodInfo
    Private ReadOnly _templateFile As PropertyInfo
    ''' <summary>
    ''' Creates an instance of the DynamicHost class around the passed in
    ''' Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost shapped instance passed in.
    ''' </summary>
    Public Sub New(ByVal instance As Object)
        _instance = instance
        Dim type As Type = _instance.GetType()
        _resolveParameterValue = type.GetMethod("ResolveParameterValue", New Type() {GetType(String), GetType(String), GetType(String)})
        _resolvePath = type.GetMethod("ResolvePath", New Type() {GetType(String)})
        _templateFile = type.GetProperty("TemplateFile")
    End Sub
    ''' <summary>
    ''' A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
    ''' </summary>
    Public Function ResolveParameterValue(ByVal id As String, ByVal name As String, ByVal otherName As String) As String Implements IDynamicHost.ResolveParameterValue
        Return DirectCast(_resolveParameterValue.Invoke(_instance, New Object() {id, name, otherName}), String)
    End Function
    ''' <summary>
    ''' A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
    ''' </summary>
    Public Function ResolvePath(ByVal path As String) As String Implements IDynamicHost.ResolvePath
        Return DirectCast(_resolvePath.Invoke(_instance, New Object() {path}), String)
    End Function
    ''' <summary>
    ''' A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
    ''' </summary>
    Public ReadOnly Property TemplateFile() As String Implements IDynamicHost.TemplateFile
        Get
            Return DirectCast(_templateFile.GetValue(_instance, Nothing), String)
        End Get
    End Property
    ''' <summary>
    ''' Returns the Host instance cast as an IServiceProvider
    ''' </summary>
    Public Function AsIServiceProvider() As IServiceProvider Implements IDynamicHost.AsIServiceProvider
        Return TryCast(_instance, IServiceProvider)
    End Function
End Class
''' <summary>
''' Reponsible for implementing the IDynamicHost when the
''' Host property is not available on the TextTemplating type. The Host
''' property only exists when the hostspecific attribute of the template
''' directive is set to true.
''' </summary>
Public Class NullHost
    Implements IDynamicHost
    ''' <summary>
    ''' An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
    ''' that simply retuns null.
    ''' </summary>
    Public Function ResolveParameterValue(ByVal id As String, ByVal name As String, ByVal otherName As String) As String Implements IDynamicHost.ResolveParameterValue
        Return Nothing
    End Function
    ''' <summary>
    ''' An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
    ''' that simply retuns the path passed in.
    ''' </summary>
    Public Function ResolvePath(ByVal path As String) As String Implements IDynamicHost.ResolvePath
        Return path
    End Function
    ''' <summary>
    ''' An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
    ''' that returns null.
    ''' </summary>
    Public ReadOnly Property TemplateFile() As String Implements IDynamicHost.TemplateFile
        Get
            Return Nothing
        End Get
    End Property
    ''' <summary>
    ''' Returns null.
    ''' </summary>
    Public Function AsIServiceProvider() As IServiceProvider Implements IDynamicHost.AsIServiceProvider
        Return Nothing
    End Function
End Class
''' <summary>
''' Responsible for encapsulating the constants defined in Metadata
''' </summary>
Public NotInheritable Class MetadataConstants
    Private Sub New()
    End Sub
    Public Const CSDL_EXTENSION As String = ".csdl"
    Public Const CSDL_EDMX_SECTION_NAME As String = "ConceptualModels"
    Public Const CSDL_ROOT_ELEMENT_NAME As String = "Schema"
    Public Const EDM_ANNOTATION_09_02 As String = "http://schemas.microsoft.com/ado/2009/02/edm/annotation"
    Public Const SSDL_EXTENSION As String = ".ssdl"
    Public Const SSDL_EDMX_SECTION_NAME As String = "StorageModels"
    Public Const SSDL_ROOT_ELEMENT_NAME As String = "Schema"
    Public Const MSL_EXTENSION As String = ".msl"
    Public Const MSL_EDMX_SECTION_NAME As String = "Mappings"
    Public Const MSL_ROOT_ELEMENT_NAME As String = "Mapping"
    Public Const TT_TEMPLATE_NAME As String = "TemplateName"
    Public Const TT_TEMPLATE_VERSION As String = "TemplateVersion"
    Public Const TT_MINIMUM_ENTITY_FRAMEWORK_VERSION As String = "MinimumEntityFrameworkVersion"
    Public Const DEFAULT_TEMPLATE_VERSION As String = "4.0"
    Public Shared ReadOnly V1_SCHEMA_CONSTANTS As New SchemaConstants(
        "http://schemas.microsoft.com/ado/2007/06/edmx",
        "http://schemas.microsoft.com/ado/2006/04/edm",
        "http://schemas.microsoft.com/ado/2006/04/edm/ssdl",
        "urn:schemas-microsoft-com:windows:storage:mapping:CS",
        New Version("3.5"))
    Public Shared ReadOnly V2_SCHEMA_CONSTANTS As New SchemaConstants(
        "http://schemas.microsoft.com/ado/2008/10/edmx",
        "http://schemas.microsoft.com/ado/2008/09/edm",
        "http://schemas.microsoft.com/ado/2009/02/edm/ssdl",
        "http://schemas.microsoft.com/ado/2008/09/mapping/cs",
        New Version("4.0"))
    Public Shared ReadOnly V3_SCHEMA_CONSTANTS As New SchemaConstants(
        "http://schemas.microsoft.com/ado/2009/11/edmx",
        "http://schemas.microsoft.com/ado/2009/11/edm",
        "http://schemas.microsoft.com/ado/2009/11/edm/ssdl",
        "http://schemas.microsoft.com/ado/2009/11/mapping/cs",
        New Version("5.0"))
End Class
Public Structure SchemaConstants
    Public Sub New(ByVal edmxNamespace As String, ByVal csdlNamespace As String, ByVal ssdlNamespace As String, ByVal mslNamespace As String, ByVal minimumTemplateVersion As Version)
        Me.EdmxNamespace = edmxNamespace
        Me.CsdlNamespace = csdlNamespace
        Me.SsdlNamespace = ssdlNamespace
        Me.MslNamespace = mslNamespace
        Me.MinimumTemplateVersion = minimumTemplateVersion
    End Sub
    Public Property EdmxNamespace() As String
        Get
            Return m_EdmxNamespace
        End Get
        Private Set
            m_EdmxNamespace = Value
        End Set
    End Property
    Private m_EdmxNamespace As String
    Public Property CsdlNamespace() As String
        Get
            Return m_CsdlNamespace
        End Get
        Private Set
            m_CsdlNamespace = Value
        End Set
    End Property
    Private m_CsdlNamespace As String
    Public Property SsdlNamespace() As String
        Get
            Return m_SsdlNamespace
        End Get
        Private Set
            m_SsdlNamespace = Value
        End Set
    End Property
    Private m_SsdlNamespace As String
    Public Property MslNamespace() As String
        Get
            Return m_MslNamespace
        End Get
        Private Set
            m_MslNamespace = Value
        End Set
    End Property
    Private m_MslNamespace As String
    Public Property MinimumTemplateVersion() As Version
        Get
            Return m_MinimumTemplateVersion
        End Get
        Private Set
            m_MinimumTemplateVersion = Value
        End Set
    End Property
    Private m_MinimumTemplateVersion As Version
End Structure
    End Class
    #Region "Base class"
    '''<summary>
    '''Base class for this transformation
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")>  _
    Public Class VBCodeGenTemplateV50Base
        #Region "Fields"
        Private generationEnvironmentField As Global.System.Text.StringBuilder
        Private errorsField As Global.System.CodeDom.Compiler.CompilerErrorCollection
        Private indentLengthsField As Global.System.Collections.Generic.List(Of Integer)
        Private currentIndentField As String = ""
        Private endsWithNewline As Boolean
        Private sessionField As Global.System.Collections.Generic.IDictionary(Of String, Object)
        #End Region
        #Region "Properties"
        '''<summary>
        '''The string builder that generation-time code is using to assemble generated output
        '''</summary>
        Protected Property GenerationEnvironment() As System.Text.StringBuilder
            Get
                If (Me.generationEnvironmentField Is Nothing) Then
                    Me.generationEnvironmentField = New Global.System.Text.StringBuilder()
                End If
                Return Me.generationEnvironmentField
            End Get
            Set
                Me.generationEnvironmentField = value
            End Set
        End Property
        '''<summary>
        '''The error collection for the generation process
        '''</summary>
        Public ReadOnly Property Errors() As System.CodeDom.Compiler.CompilerErrorCollection
            Get
                If (Me.errorsField Is Nothing) Then
                    Me.errorsField = New Global.System.CodeDom.Compiler.CompilerErrorCollection()
                End If
                Return Me.errorsField
            End Get
        End Property
        '''<summary>
        '''A list of the lengths of each indent that was added with PushIndent
        '''</summary>
        Private ReadOnly Property indentLengths() As System.Collections.Generic.List(Of Integer)
            Get
                If (Me.indentLengthsField Is Nothing) Then
                    Me.indentLengthsField = New Global.System.Collections.Generic.List(Of Integer)()
                End If
                Return Me.indentLengthsField
            End Get
        End Property
        '''<summary>
        '''Gets the current indent we use when adding lines to the output
        '''</summary>
        Public ReadOnly Property CurrentIndent() As String
            Get
                Return Me.currentIndentField
            End Get
        End Property
        '''<summary>
        '''Current transformation session
        '''</summary>
        Public Overridable Property Session() As Global.System.Collections.Generic.IDictionary(Of String, Object)
            Get
                Return Me.sessionField
            End Get
            Set
                Me.sessionField = value
            End Set
        End Property
        #End Region
        #Region "Transform-time helpers"
        '''<summary>
        '''Write text directly into the generated output
        '''</summary>
        Public Overloads Sub Write(ByVal textToAppend As String)
            If String.IsNullOrEmpty(textToAppend) Then
                Return
            End If
            'If we're starting off, or if the previous text ended with a newline,
            'we have to append the current indent first.
            If ((Me.GenerationEnvironment.Length = 0)  _
                        OrElse Me.endsWithNewline) Then
                Me.GenerationEnvironment.Append(Me.currentIndentField)
                Me.endsWithNewline = false
            End If
            'Check if the current text ends with a newline
            If textToAppend.EndsWith(Global.System.Environment.NewLine, Global.System.StringComparison.CurrentCulture) Then
                Me.endsWithNewline = true
            End If
            'This is an optimization. If the current indent is "", then we don't have to do any
            'of the more complex stuff further down.
            If (Me.currentIndentField.Length = 0) Then
                Me.GenerationEnvironment.Append(textToAppend)
                Return
            End If
            'Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(Global.System.Environment.NewLine, (Global.System.Environment.NewLine + Me.currentIndentField))
            'If the text ends with a newline, then we should strip off the indent added at the very end
            'because the appropriate indent will be added when the next time Write() is called
            If Me.endsWithNewline Then
                Me.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - Me.currentIndentField.Length))
            Else
                Me.GenerationEnvironment.Append(textToAppend)
            End If
        End Sub
        '''<summary>
        '''Write text directly into the generated output
        '''</summary>
        Public Overloads Sub WriteLine(ByVal textToAppend As String)
            Me.Write(textToAppend)
            Me.GenerationEnvironment.AppendLine
            Me.endsWithNewline = true
        End Sub
        '''<summary>
        '''Write formatted text directly into the generated output
        '''</summary>
        Public Overloads Sub Write(ByVal format As String, <System.ParamArrayAttribute()> ByVal args() As Object)
            Me.Write(String.Format(Global.System.Globalization.CultureInfo.CurrentCulture, format, args))
        End Sub
        '''<summary>
        '''Write formatted text directly into the generated output
        '''</summary>
        Public Overloads Sub WriteLine(ByVal format As String, <System.ParamArrayAttribute()> ByVal args() As Object)
            Me.WriteLine(String.Format(Global.System.Globalization.CultureInfo.CurrentCulture, format, args))
        End Sub
        '''<summary>
        '''Raise an error
        '''</summary>
        Public Sub [Error](ByVal message As String)
            Dim [error] As System.CodeDom.Compiler.CompilerError = New Global.System.CodeDom.Compiler.CompilerError()
            [error].ErrorText = message
            Me.Errors.Add([error])
        End Sub
        '''<summary>
        '''Raise a warning
        '''</summary>
        Public Sub Warning(ByVal message As String)
            Dim [error] As System.CodeDom.Compiler.CompilerError = New Global.System.CodeDom.Compiler.CompilerError()
            [error].ErrorText = message
            [error].IsWarning = true
            Me.Errors.Add([error])
        End Sub
        '''<summary>
        '''Increase the indent
        '''</summary>
        Public Sub PushIndent(ByVal indent As String)
            If (indent = Nothing) Then
                Throw New Global.System.ArgumentNullException("indent")
            End If
            Me.currentIndentField = (Me.currentIndentField + indent)
            Me.indentLengths.Add(indent.Length)
        End Sub
        '''<summary>
        '''Remove the last indent that was added with PushIndent
        '''</summary>
        Public Function PopIndent() As String
            Dim returnValue As String = ""
            If (Me.indentLengths.Count > 0) Then
                Dim indentLength As Integer = Me.indentLengths((Me.indentLengths.Count - 1))
                Me.indentLengths.RemoveAt((Me.indentLengths.Count - 1))
                If (indentLength > 0) Then
                    returnValue = Me.currentIndentField.Substring((Me.currentIndentField.Length - indentLength))
                    Me.currentIndentField = Me.currentIndentField.Remove((Me.currentIndentField.Length - indentLength))
                End If
            End If
            Return returnValue
        End Function
        '''<summary>
        '''Remove any indentation
        '''</summary>
        Public Sub ClearIndent()
            Me.indentLengths.Clear
            Me.currentIndentField = ""
        End Sub
        #End Region
        #Region "ToString Helpers"
        '''<summary>
        '''Utility class to produce culture-oriented representation of an object as a string.
        '''</summary>
        Public Class ToStringInstanceHelper
            Private formatProviderField  As System.IFormatProvider = Global.System.Globalization.CultureInfo.InvariantCulture
            '''<summary>
            '''Gets or sets format provider to be used by ToStringWithCulture method.
            '''</summary>
            Public Property FormatProvider() As System.IFormatProvider
                Get
                    Return Me.formatProviderField 
                End Get
                Set
                    If (Not (value) Is Nothing) Then
                        Me.formatProviderField  = value
                    End If
                End Set
            End Property
            '''<summary>
            '''This is called from the compile/run appdomain to convert objects within an expression block to a string
            '''</summary>
            Public Function ToStringWithCulture(ByVal objectToConvert As Object) As String
                If (objectToConvert Is Nothing) Then
                    Throw New Global.System.ArgumentNullException("objectToConvert")
                End If
                Dim t As System.Type = objectToConvert.GetType
                Dim method As System.Reflection.MethodInfo = t.GetMethod("ToString", New System.Type() {GetType(System.IFormatProvider)})
                If (method Is Nothing) Then
                    Return objectToConvert.ToString
                Else
                    Return CType(method.Invoke(objectToConvert, New Object() {Me.formatProviderField }),String)
                End If
            End Function
        End Class
        Private toStringHelperField As ToStringInstanceHelper = New ToStringInstanceHelper()
        '''<summary>
        '''Helper to produce culture-oriented representation of an object as a string
        '''</summary>
        Public ReadOnly Property ToStringHelper() As ToStringInstanceHelper
            Get
                Return Me.toStringHelperField
            End Get
        End Property
        #End Region
    End Class
    #End Region
End Namespace
>!eXM&
DE2~:A
V7- [
RSDSG
System.Data.Entity.Design.pdb
_CorDllMain
mscoree.dll
PROFILE_DATA
\&`@f
WHYHgH
&HCHKGYH[HbIk
GKIrWKY'
7|@4BHP4R
?TGR_Tb
%T,T<
_*_8_J
|,|5|P|_9aC
&|A|R|e|nCv9
0pHp`
$"H+$-$;$
System.Collections.Generic
System.Data.Common
System.Threading
System
System.Linq
System.Data.Metadata.Edm
System.Data.Common.Utils
System.Xml
System.Data.Mapping
ICollection`1
List`1
DbProviderFactory
Interlocked
IEnumerable`1
IEnumerator`1
Enumerator
IList`1
EqualityComparer`1
IEquatable`1
ObjectEqualityComparer`1
IEqualityComparer`1
Enumerable
Dictionary`2
EntityType
IDictionary`2
KeyValuePair`2
IReadOnlyDictionary`2
IReadOnlyCollection`1
RowType
HashSet`1
Action`5
EdmSchemaError
IReadOnlyList`1
Func`2
Entry
ValueCollection
Enumerator
EntityContainer
EntitySet
Set`1
EmptyEnumerable`1
ISet`1
SZArrayHelper
SZGenericArrayEnumerator`1
Enumerator
XmlWriter
StoreItemCollection
XmlReader
EdmItemCollection
SynchronizedList
StorageMappingItemCollection
CompareExchange
ToList
Dispose
.ctor
get_Default
CreateComparer
.ctor
.ctor
AddIfNotPresent
Where
Single
Insert
Initialize
GetHashCode
Resize
Resize
InternalGetHashCode
IncreaseCapacity
SetCapacity
Initialize
get_Values
.ctor
V=System.Collections.Generic.IEnumerable<TValue>.GetEnumerator
.ctor
MoveNext
get_Current
TryGetValue
FindEntry
Dispose
Equals
Empty
GetEnumerator
VS_VERSION_INFO
VarFileInfo
Translation
StringFileInfo
000004b0
Comments
System.Data.Entity.Design.dll
CompanyName
Microsoft Corporation
FileDescription
System.Data.Entity.Design.dll
FileVersion
4.8.9032.0
InternalName
System.Data.Entity.Design.dll
LegalCopyright
 Microsoft Corporation.  All rights reserved.
OriginalFilename
System.Data.Entity.Design.dll
ProductName
Microsoft
 .NET Framework
ProductVersion
4.8.9032.0
Assembly Version
4.0.0.0
PADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDING
Washington1
Redmond1
Microsoft Corporation1(0&
Microsoft Code Signing PCA 20110
210902183259Z
220901183259Z0t1
Washington1
Redmond1
Microsoft Corporation1
Microsoft Corporation0
(NI51
Microsoft Corporation1
230012+4675960
M0K0I
Chttp://www.microsoft.com/pkiops/crl/MicCodSigPCA2011_2011-07-08.crl0a
U0S0Q
Ehttp://www.microsoft.com/pkiops/certs/MicCodSigPCA2011_2011-07-08.crt0
v0B5V,
b}x`i
Washington1
Redmond1
Microsoft Corporation1200
)Microsoft Root Certificate Authority 20110
110708205909Z
260708210909Z0~1
Washington1
Redmond1
Microsoft Corporation1(0&
Microsoft Code Signing PCA 20110
S0Q0O
Ihttp://crl.microsoft.com/pki/crl/products/MicRooCerAut2011_2011_03_22.crl0^
R0P0N
Bhttp://www.microsoft.com/pki/certs/MicRooCerAut2011_2011_03_22.crt0
3http://www.microsoft.com/pkiops/docs/primarycps.htm0@
Legal_policy_statement
e_.,>
D=xz#
*?*kXIc
QEX82q'
WqVNHE
Washington1
Redmond1
Microsoft Corporation1(0&
Microsoft Code Signing PCA 2011
Microsof
http://www.microsoft.com0
20220408230418.481Z0
Washington1
Redmond1
Microsoft Corporation1-0+
$Microsoft Ireland Operations Limited1&0$
Thales TSS ESN:2AD4-4B92-FA011%0#
Microsoft Time-Stamp Service
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
211028192739Z
230126192739Z0
Washington1
Redmond1
Microsoft Corporation1-0+
$Microsoft Ireland Operations Limited1&0$
Thales TSS ESN:2AD4-4B92-FA011%0#
Microsoft Time-Stamp Service0
6z$WD
IsK6*
L8zp0
X0V0T
Nhttp://www.microsoft.com/pkiops/crl/Microsoft%20Time-Stamp%20PCA%202010(1).crl0l
`0^0\
Phttp://www.microsoft.com/pkiops/certs/Microsoft%20Time-Stamp%20PCA%202010(1).crt0
vFfl|
n{(aM0
"c}FK
^?H4"
g;^z 
Washington1
Redmond1
Microsoft Corporation1200
)Microsoft Root Certificate Authority 20100
210930182225Z
300930183225Z0|1
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
q\Q17
&S|9a
!]_0t
U0S0Q
3http://www.microsoft.com/pkiops/Docs/Repository.htm0
O0M0K
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
N0L0J
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
>NGdx
fg:SM
xSu$W
as.,k{n?,
J>f;O
!TkjE
Washington1
Redmond1
Microsoft Corporation1-0+
$Microsoft Ireland Operations Limited1&0$
Thales TSS ESN:2AD4-4B92-FA011%0#
Microsoft Time-Stamp Service
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
20220409004052Z
20220410004052Z0t0:
1,0*0
1(0&0
84p:c
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 2010
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 2010
3Pdi--
'Gyck
\0AYuV
