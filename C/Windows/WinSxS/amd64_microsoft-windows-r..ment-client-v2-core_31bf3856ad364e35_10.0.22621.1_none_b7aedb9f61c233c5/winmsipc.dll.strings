!This program cannot be run in DOS mode.
yRich
.text
`.rdata
@.data
.pdata
@.didat
.rsrc
@.reloc
L$HH3
\$ UVWAVAWH
f94Bu
fA94@u
fA94@u
A_A^_^]
\$ UVWATAVH
f94Bu
f94Bu
f94Bu
A^A\_^]
\$ UVWAVAWH
f94Bu
fA94@u
fA94@u
A_A^_^]
L$ SVWH
L$ SVWAVH
(A^_^[
WAVAWH
0A_A^_
\$ UVWH
|$ [H
D$ u%
;@8:t
\$ UVW
@SVWH
WAVAWH
fD;8H
A_A^_
q*Z~:
q*Z~:
L$ SUVWH
L$hH+
f9,Cu
(_^][
\$ UVWAVAWH
t,D8=
L9{Hu
A_A^_^]
x AVH
\$ UVWH
D$0H;
L$ SVWH
WATAUAVAWH
f9,Au
f9,Ou
fD9t}
 A_A^A]A\_
q*Z~:
UVWATAUAVAWH
ty@8=
t"@8=Y
fA9>u
@A_A^A]A\_^]
D$ E3
L$(H3
x UAVAWH
T$0H+
A_A^]
t/HcL$$A
HcD$ H
VWAVH
 A^_^
UVWATAUAVAWH
f9,Qu
H9/sDH
 A_A^A]A\_^]
u%H!\$8H
x AVH
t$ WH
L$0H3
L$0H3
L$0H3
@SVWH
L$XH3
WATAUAVAWH
 A_A^A]A\_
x AVH
L$0H3
L$0H3
UWAVH
VWAVH
L$(H3
0A^_^
L$ SH
L$ SH
UVWATAUAVAWH
pcU6P.
pcU6P.
fD92u
fF94Bu
fD92u
fF94Bu
fD97u
fF94Gu
A_A^A]A\_^]
|$(f9|$Pu
fB9<@u
D$(H;
l$ VWAWH
@A__^
\$ VWATAVAW
A_A^A\_^
|$hE3
CD$HH
|$hE3
CD$HH
L$pH3
\$`E3
CD$@H
\$`E3
CD$@H
L$hH3
@SVWATAUAVAW
t$ E3
pcU6P.
pcU6P.
fD90u
fF94@u
t$xfD90u
fF94@u
pcU6P.
fD90u
fF94@u
pcU6P.
A_A^A]A\_^[
@SVWATAUAVAWH
A_A^A]A\_^[
@SVWATAUAVAWH
d$ E3
fB9<Bu
A_A^A]A\_^[
qyWv3
@SVWATAUAVAWH
A_A^A]A\_^[
@SVWATAVAWH
|$ E3
A_A^A\_^[
@SVWATAVAW
\$hE3
\$ E3
A_A^A\_^[
@SVWATAUAVAWH
d$ E3
fB9<Bu
A_A^A]A\_^[
@SVWATAUAVAWH
fB9<Bu
|$Pf9:u
fB9<Bu
|$Pf9;u
fB9<Cu
A_A^A]A\_^[
@SVWATAUAVAW
L$hH9|$X
D$PH9
|$ E3
H98t7H
H9D$P
|$ E3
fB9<@u
A_A^A]A\_^[
@SVWATAUAVAW
A_A^A]A\_^[
\Pp>l
L$ E3
L$hH3
@SVWATAUAVAW
A_A^A]A\_^[
@SVWATAUAVAW
9|$xu
pK]0[.
A_A^A]A\_^[
\Pp>l
L$ E3
L$hH3
q"QVm
VWAVH
@SVWATAUAVAW
H9|$@
T$hH;
fB9<@u
A_A^A]A\_^[
@SVWATAUAVAWH
|$ E3
A_A^A]A\_^[
t$ WH
VWAVH
|$pE3
CD$PH
|$pE3
CD$PH
@SVWATAUAVAW
I9|$ t
A_A^A]A\_^[
@SUVWATAVAWH
A_A^A\_^][
@SVWATAUAVAW
p RZs
L$TH9=Z
pcU6P.
|$pf98u
fB9<@u
pcU6P.
`@8|$P
@8|$Pt}H
pcU6P.
pcU6P.
A_A^A]A\_^[
@SVWATAUAVAW
A_A^A]A\_^[
@SVWATAUAVAWH
L$hE3
A_A^A]A\_^[
@SVWATAUAVAW
D$`E3
p RZs
fD90u
fF94@u
D9t$Pu
A_A^A]A\_^[
VWAVH
WAVAWH
A_A^_
@SVWATAUAVAW
pcU6P.
fB9<@u
pcU6P.
A_A^A]A\_^[
@SVWATAVAW
f9<Au
fA9<Fu
H9T$8
A_A^A\_^[
@SVWATAUAVAW
A_A^A]A\_^[
@SVWATAUAVAW
l$<H98uSH
A_A^A]A\_^[
@SVWATAUAVAW
D$@E3
L9t$@
T$XH;
d$ E3
T$XH;
Y>o& 
L9t$x
|$ E3
fD90u
fF94@u
A_A^A]A\_^[
@SVWATAUAVAWH
A_A^A]A\_^[
@SVWATAUAVAWH
A_A^A]A\_^[
VWATAVAW
T$hE3
|$hD85|e
pB[Vx
L9t$0
L9t$0
A_A^A\_^
@SVWATAUAVAW
L$HE3
A_A^A]A\_^[
@SVWATAVAW
A_A^A\_^[
@SVWATAVAW
H95]e
A_A^A\_^[
@SVWATAUAVAW
l$XH95
H9t$@
H9t$P
H9t$H
T$XH;
fB94@u
A_A^A]A\_^[
VWAVH
|$ AVH
@SVWATAUAVAW
A_A^A]A\_^[
9\$ t
L$XH3
\$ VWAV
f9<Cu
H9D$8
t$ WH
H9D$8
q"QVm
t$ WH
@SVWATAUAVAW
A_A^A]A\_^[
\$XE3
CD$8H
\$XE3
CD$8H
@SVWAVAWH
A_A^_^[
|$hE3
CD$HH
|$hE3
CD$HH
L$pH3
q;S>D.X
UVWAVAWH
A_A^_^]
@SVWATAUAVAWH
CD$`H
CD$`H
A_A^A]A\_^[
\$ VWAV
\$ VWATAVAW
t$@H95
T$@H;
t$xf90u
fB94@u
A_A^A\_^
UWAWH
UWAWH
@SUVWAVH
L$8H3
@A^_^][
@USWH
x AVH
}0D9u tNH
90tBH
t$ UWAVH
t$ WH
L$(H3
t$ WH
x AVH
x AVH
UVWATAUAVAWH
L$@fD
A_A^A]A\_^]
SVWAVAWH
 A_A^_^[
x AVH
w}H9{
SVWAVH
(A^_^[
tAfA9(t;H
fA9,@u
t$ UWATAVAWH
D9d$(|
D$,D8%q
t(D8%
VWAVH
D84.u
0A^_^
L$`H3
L$hH3
L$hH3
fB9<Bu
f9<Au
L$pH3
L$hH3
L$hH3
L$0H3
L$PH3
WATAUAVAWH
0A_A^A]A\_
t$ WATAUAVAWH
|$pI;
D$PH;
 A_A^A]A\_
x AVH
UVWAVAWH
D9|$(
t(D8=
A_A^_^]
|$ AVH
UVWATAUAVAWH
H!L$HH
fD94Xu
H9D$@
p(]2A
fD94Au
H9D$@
H9D$@
p(]2A
A_A^A]A\_^]
H UATAUAVAWH
L$0H;
D$@H;
D$0H;
A_A^A]A\]
t$ WAVAWH
A_A^_
D$PHc
D$ H;
L$PH3
L$8H3
L$ SVWAVH
(A^_^[
{ AWH
D$ E3
x UATAUAVAWH
T$`E3
A_A^A]A\]
L$(E3
9|$,u
L$ 9|$,u
L$0H3
@SVWATAUAVAW
A_A^A]A\_^[
@SVWATAUAVAWH
swf98
A_A^A]A\_^[
L$HH3
@VWATAUAVAW
l$ E3
A_A^A]A\_^
WAVAWH
 A_A^_
pB[Vx
pB[Vx
pB[Vx
pB[Vx
pB[Vx
WATAUAVAWH
fD9(t
<wEt<
>t"A+
fG9l9
@A_A^A]A\_
|$ ATAVAWH
fD9 t
fD9'tYI
fD9$Ou
@A_A^A\
L$8H3
fA;T@
qB[Vx
WATAUAVAWH
C|$8H
H9|$ 
L$`H3
A_A^A]A\_
x AVH
fD92u
fD94zu
WAVAWH
 A_A^_
D$DDtXH
@USWATAUAVAWH
EHt6H
EHt>H
t4A9~
t.HcC<
EPt>H
pA_A^A]A\_[]
|$ AVH
q#Xr0
)t$PH
CD$(H
L$HH3
(t$PH
f9\$0t
L$ SH
tLD9Y
wZH9_
9 r'H
UVWAVAWH
A_A^_^]
t$ UWATAVAWH
A_A^A\_]
s WAVAWH
A_A^_
L$(H3
L$(H3
L$pH3
L$(H3
\$ UVWAVAWH
\$0H;
A_A^_^]
@SUVWAVH
A^_^][
[ UVWH
\$Hf9;t
f9<Cu
L$HH3
CD$(H
9\$ }&L
CD$(E3
L$xH3
UVWATAUAVAWH
A_A^A]A\_^]
|$ UATAUAVAWH
t,fD9W"
fD9W$
A_A^A]A\]
@USVWATAUAVH
9t$0v)
;t$0r
9t$0v%
;t$0r
A^A]A\_^[]
@USVWATAUAVAWH
L$@E3
A_A^A]A\_^[]
` UAVAWH
t(D8}
A_A^]
L$(H3
\$ VWAVH
L$0E3
|$ AVH
UVWATAUAVAWH
l$HfD
D$8H;
|$8H+
A_A^A]A\_^]
L$`H3
VWAVH
L$PH3
CD$(H
x UATAVH
L$hE3
fF94@u
A^A\]
` AUAVAWH
A_A^A]
L$@H3
t$ WH
L$8H3
|$@E3
CD$`L
CL$@H
t)f9;t
f9<Ku
@USVWAVH
L$hE3
fD94Hu%H
A^_^[]
UVWAVAWH
L$hE3
A_A^_^]
WAVAWH
A_A^_
t$HH+
WAVAWH
A_A^_
t$8H+
X UVWH
@SUVWH
L$PH3
h_^][
@USVWAVH
A^_^[]
@USVWAVAWH
D$ E3
A_A^_^[]
@USVWAVAWH
D$ E3
A_A^_^[]
@USVWAUAVAWH
A_A^A]_^[]
)D$@H
t$ UWATAVAWH
A_A^A\_]
L$`H3
\$8E3
t$ UWAVH
fD96u
fF94Fu
fD94xu
8{u:H
H9Ahs
H9Ahs
I9Hhv)M
VWATAVAWH
C8u^H
 A_A^A\_^
\$0HcH
UVWAVAWH
FXH9nHu
0A_A^_^]
tqH+;H
x ATAVAWH
 A_A^A\
x ATAVAWH
 A_A^A\
SVWAVAWH
@8|$H
(D$Pf
pA_A^_^[
D$@Hc
SUVWATAUAVAWH
A_A^A]A\_^][
SUVWATAUAVAWH
A_A^A]A\_^][
@SUVWH
@SUVWH
@SUVWH
@SUVWH
@USVWATAUAVAWH
A_A^A]A\_^[]
VWAVH
0A^_^
@SVWATAUAVAWH
@A_A^A]A\_^[
UVWATAUAVAWH
<}w\I
A_A^A]A\_^]
UVWATAUAVAWH
A_A^A]A\_^]
|$ AVH
x AVH
VWAVH
 A^_^
VWAVH
 A^_^
@SVWAVAWH
@A_A^_^[
s fB;
@UVWATAVAWH
fD;$Ft
A_A^A\_^]
VWAVH
L$ H3
0A^_^
@SVWAVAWH
@A_A^_^[
@SVWAVAWH
@A_A^_^[
|$ AVH
toH91uj
VWAVH
WAVAWH
|$`I+
 A_A^_
WAVAWH
A_A^_
x AVE3
|$(A^
x AVAWD
|$0A_A^
UVWATAUAVAWH
@A_A^A]A\_^]
|$ AVH
q;TXi
p;TXi
qcVx:
p;TXi
L$0H3
l$ VWAVH
L$0H3
@A^_^
x AVH
@SVWATAUAVAWH
A_A^A]A\_^[
H9Ahs
H9Ahs
qP[\=
M9Qhv.I
v;fD;
t$ WATAUAVAWH
$H+0I
C8uqH
0A_A^A]A\_
AXH90t^L
\$0HcH
UVWAVAWH
FXH9nHu
0A_A^_^]
WAVAWH
 A_A^_
WAVAWH
 A_A^_
pP[\=
qP[\=
SVWAVAWH
@8|$H
(D$Pf
pA_A^_^[
SVWAVAWH
@8|$H
(D$Pf
pA_A^_^[
qX\pG
D$@Hc
SUVWATAUAVAWH
A_A^A]A\_^][
SUVWATAUAVAWH
A_A^A]A\_^][
@SUVWH
@SUVWH
@SUVWH
@SUVWH
@USVWATAUAVAWH
D$(fD
A_A^A]A\_^[]
UVWATAUAVAWH
<}w^I
A_A^A]A\_^]
UVWATAUAVAWH
A_A^A]A\_^]
WAVAWH
 A_A^_
@SVWAVAWH
@A_A^_^[
WATAUAVAWH
\$hf9:u
fB9<zu
@8|$(u
@@H98t
@X98~
@@H98t
@X98~
0A_A^A]A\_
@SVWAVAWH
@A_A^_^[
@SVWAVAWH
@A_A^_^[
|$ AVH
toH91uj
VWAVH
|$ ATAVAWH
D$0.fD
D$0,fD
A_A^A\
@8kXt
L$HH3
fD;DA
UWATAVAWH
L9=36
D8{Xt,I
A_A^A\_]
UATAVH
t$@fD
A^A\]
t$0f92u
fB94Bu
CL$0H
t$ WH
D$ E3
f9<Au
f9<Cu
UWATAVAWH
D8f8u
D8f9u
A_A^A\_]
|$ ATAVAWH
A_A^A\
UVWATAUAVAWH
E8o8u
E8o9u
 A_A^A]A\_^]
t$ WAVAWH
fD94Bu
A_A^_H
x UAVAWH
A_A^]
@SVWATAUAVAW
A_A^A]A\_^[
t$8H;
@USVWATAUAVAWH
A_A^A]A\_^[]
|$ ATAVAWH
0A_A^A\
WAVAWH
C8H;C
H#K0H
H9C(w
H!S0H
A_A^_H
H#K0H
H#K0H
WAVAWH
fffffff
 A_A^_
H;|$Pt5H
9f9:u
fB9<Bu
fD;LH
WAVAWH
|$09t$(|
L$hH3
A_A^_
L$ SH
ID$8H
L$@H3
9\$ }1H
9\$ |=H
D$ H;
9|$(|
L$0H3
s WATAUAVAWH
E8N0A
D$XD8H9A
A_A^A]A\_
UVWATAUAVAWH
A_A^A]A\_^]
\$ UVWATAUAVAWH
L$0E3
A_A^A]A\_^]
VWAVH
x UATAUAVAWH
t$@A;
|$ E3
|$ E3
D$XL;
A_A^A]A\]
|$ ATAVAWH
0A_A^A\
\$ UVWATAUAVAWH
A_A^A]A\_^]
\$ UVWATAUAVAWH
0A_A^A]A\_^]
WAVAWH
\$XH;
 A_A^_
L$pH3
x AVH
@SUVWAVH
 A^_^][
@SUVWAUAVAWH
 A_A^A]_^][
l$ WH
|$ AVH
VWAVH
H9w@w
0A^_^
@USVWATAVAWH
|$HL;
F0H;F@u
TUUUUUU
A_A^A\_^[]
\$ UVWH
TUUUUUU
VWAVH
D$`H9F8u1
D$(L;
@A^_^
VWAVH
H;^8u
 A^_^
x AVH
L;u8t-I
H;u8u
l$ VWAVH
L$ H3
0A^_^
@USVWATAVAWH
d$ E3
d$pfD9#u
fF9$Cu
d$`fD
d$`fD
A_A^A\_^[]
|$0f9:u
fB9<Bu
L$PH3
@USVWATAUAVAWH
fD9+u
fF9,Cu
|$ E3
A_A^A]A\_^[]
\$ VWAVH
@SUVWATAVAWH
A_A^A\_^][
@USVWATAVAWH
D$ E3
9;vCH
A_A^A\_^[]
t$ UWAVH
RSA1u
D$ E3
UVWATAUAVAWH
l$ E3
l$ E3
t$XE3
RSA2A
uWfD9o
RSA1u
l$ E3
A_A^A]A\_^]
L$XH3
L$XH3
L$XH3
x AVH
D9s$v5H
s D9s4v5H
@SVWATAUAVAWH
L$@H3
PA_A^A]A\_^[
9K wk
D;C$r
@SVWAVAWH
L$8H3
@A_A^_^[
t$ WAVAWH
L$8H3
@A_A^_
t$ WH
9A0wk
D9G4v
D;G4r
9Y4vOH
WAVAWH
D9>v;H
 A_A^_
@SVWATAUAVAWH
L$HH3
PA_A^A]A\_^[
@SVWATAUAVAWH
L9l$ tT
L$8H3
@A_A^A]A\_^[
` AUAVAWH
@A_A^A]
WATAUAVAWH
A_A^A]A\_
WAVAWH
@A_A^_
VWATAVAWH
!p !p$H!p(!p0!p4H
A_A^A\_^
VWATAVAWH
!p !p$H!p(!p0!p4H
A_A^A\_^
WAVAWH
 A_A^_
\$ UVWAVAWH
D$(E3
L$(H3
0A_A^_^]
SVWATAUAVAWH
L$PH3
`A_A^A]A\_^[
SVWATAUAVAWH
L$hH3
pA_A^A]A\_^[
@SVWH
L$(H3
SVWATAUAVAWH
D$XE3
f9<Pu
E;n s:A
E;f$s8A
A_A^A]A\_^[
t$ WATAUAVAW
8\$@tpL
A_A^A]A\_
@SVWATAUAVAWH
E;`Ps0A
@8|$0t
@8|$0
@8|$0
D$HL+
D$HL+
D$HL+
H9|$xteI
l$`D;d$@
H9|$xte
H9|$xteI
@8|$0
A_A^A]A\_^[
p AWH
x ATAUAWH
 A_A]A\
T$8f9
L$@H3
T$8f9
L$@H3
p AWH
@SVWH
\$ VWATAVAWH
L$8H3
@A_A^A\_^
|$ AVH
t$@fD
t$0fD92u
fF94Bu
t$@fD
D$P9D$\t
D$@H9
D$@H9
L$0H+
D$(9D$$s:
9D$ ss
L$HH+
D$P9D$$u
L$(H+
D$09D$
D$09D$
@$9D$ 
L$`H3
@49D$ s[
L$HH+
D$8H9D$0t
D$ H9D$(t
H9D$ r
H9D$ w
D$(9D$@v
D$(9D$ v
H9D$ r
H9D$ w
f9\$0t
|$ UH
t$ WATAUAVAWH
 A_A^A]A\_
x AVH
@USVWATAUAVAWH
A_A^A]A\_^[]
@SVWATAUAVAW
f94yu
A_A^A]A\_^[
L$`H;
t$ UWATAUAWH
A_A]A\_]
k VWAVH
L$0H3
@A^_^
pB[Vx
ot$0f
t$ WH
L$(H3
|$ AVH
@SVWAVAWH
L$@H3
PA_A^_^[
SVWATAUAVAWH
H9|$h
A_A^A]A\_^[
@SVWATAUAVAW
D$PH;
A_A^A]A\_^[
@SVWATAUAVAW
L9l$@I
A_A^A]A\_^[
WATAUAVAWH
L$@H3
PA_A^A]A\_
t$ WATAUAVAWH
fA9<Xu
A_A^A]A\_
WAVAWH
0A_A^_
s WATAUAVAWH
A_A^A]A\_
\$ UVWATAUAVAWH
PA_A^A]A\_^]
@SVWATAUAVAWH
D$HE3
H9D$ 
L$`E3
H9D$ 
L$`E3
L9l$x
9D$tu
L9l$ tZ
D$(E3
FL9\$8
L9\$ tUA
D$0E3
A_A^A]A\_^[
t$ WH
L$HH3
t$ WATAUAVAWH
9|$ht
A_A^A]A\_
|$ ATAVAWH
D$8I;
L$@I;
fD9<Cu
L$XH3
A_A^A\
@SVWATAUAVAWH
pcU6P.
L$`E3
L$`E3
u58\$Ct/H
D$ E3
8\$At
A_A^A]A\_^[
t$ UWATAVAWH
t$@fD
fD92u
fF94Bu
A_A^A\_]
s WATAUAVAWH
l$hfD
l$hfD
L$xH3
A_A^A]A\_
@SVWATAUAW
9\$DsyL
A_A]A\_^[
x AVH
SVWATAUAVAWH
H9={'
|$ E3
D$PM+
A_A^A]A\_^[
t$ WATAUAVAWH
d$ E3
A_A^A]A\_
x UATAVH
t$HfD
t$8E3
fD96u
fF94Fu
CT$8H
t$HfD
A^A\]
L$0H3
{ ATAVAWH
L$`H3
A_A^A\
WATAVH
A^A\_
H+;H9K
x UAVAWH
A_A^]
x AVH
WATAUAVAWH
D9n t
~0D9n tKH
 A_A^A]A\_
|$ ATAVAWH
0A_A^A\
VWAVH
0A^_^
UWAVH
VWAVH
 A^_^
USWAVH
HA^_[]
|$ AWH
D$8E3
VWATAVAWH
L$@L;
L$HH3
PA_A^A\_^
VWAVH
 A^_^
|$ ATAVAWH
H;8u,H
0A_A^A\
VWAVH
\$XH;
 A^_^
L$ SH
L$(H3
L$ SH
L$ SH
UWAVH
@A^_]
9eu#3
usH9A
UVWATAUAVAWH
WpL9j
GPL9h
fD9$Pu
d$PfD
fD9#u
fF9$Cu
d$xfD
d$hL9l$Xr
d$xH9
T$hH+
d$PfD
t-L9n
L9l$Xr
d$PfD
d$@L9m
A_A^A]A\_^]
x AVH
fB9,Bu
fB9,Bu
f9,zu
t$ AVH
fB9,Fu
\$ UVWH
f9<Ku
x UAVAWH
]/fD9;u
fD9<su
A_A^]
L$(H3
UWAVH
(D$ f
(D$ f
(D$ f
USVWAWH
PA__^[]
UVWATAUAVAWH
|$pfA9>u
fC9<Fu
|$pI;]
A_A^A]A\_^]
|$`E3
SVWATAVAWH
\$@f9
\$@f9
A_A^A\_^[
p AWH
H;8u2
L$8H3
2333333
|$ AVH
D$8E3
p!]rm
D$@f;
USVWAWH
PA__^[]
@USVWATAVAWH
A_A^A\_^[]
qIS6N
L$ SH
L$ SH
9du#3
(usH9A
:du+L
VWAVH
 A^_^
VWAVH
 A^_^
t$ UWATAVAWH
D$8E3
A_A^A\_]
!|$ H
L$(H3
L$8H3
L$8H3
L$8H3
L$ SH
\$ E3
CT$ L
L$@H3
L$`H3
VWAVH
 A^_^
SVWAVH
(D$0f
(D$0f
XA^_^[
L$ SH
VWAVH
L9p t
0A^_^
t$ UWAVH
pr^4#
pr^4#
:fu=H
9L$@|(H
G@H9B
GHH9B
t$fD9
SVWAVAWH
D$0H;
A_A^_^[
VWAVH
 A^_^
L$ SH
L$ SH
L$ SH
L$ SH
SVWAVAWH
A_A^_^[
@USVWAVH
A^_^[]
UVWATAUAVAWH
f9<su
@A_A^A]A\_^]
t$ UWATAVAWH
fF94Hu
fD94Hu
A_A^A\_]
x AVH
|$ UAVAWH
A_A^]
L$PH+
WAVAWH
0A_A^_
@SVWATAUAVAWH
u|9t$ u
T$PH;
L$hH3
pA_A^A]A\_^[
L$(H3
L$@H3
{ ATAVAWH
A_A^A\
fB9<@u
VWAVH
 A^_^
L$8H3
@USVWATAUAVAWH
A_A^A]A\_^[]
UAVAWH
fD98u
fF9<@u
A_A^]
UVWAVAWH
fD97u
fF94Gu
t$PfD
A_A^_^]
fB94@u
t$ UWATAVAWH
A_A^A\_]
t$ WH
L$(H3
L$(H3
t$PE3
D$PH;
CL$PA
L$xH3
x AVH
\$ UVWH
D$(E3
fA9(u
fA9,Hu
p AWH
H;8u2
L$8H3
WATAUAVAWH
D$XE3
 A_A^A]A\_
{ ATH
H9-y3
H9-`3
H9-_3
H9-f3
{ AUH
FX;F8
[ UVWAVAWH
L$hH3
pA_A^_^]
{ ATAVAWH
@A_A^A\
@SUVWATH
L$HH3
PA\_^][
@USVWATAVAWH
A_A^A\_^[]
@USVWAUAVAWH
A_A^A]_^[]
L$ SH
UWATAVAWH
fD9:u
fF9<Bu
8fD9:u
fF9<Bu
A_A^A\_]
L$0H3
t$ WH
L9XHA
t5-n-
C0t.D;C4u(H
f9<Au
USVWAWH
PA__^[]
TUUUUUU
0_^]H
\$ H;_
t$ WH
L$ SH
VWAVH
 A^_^
UVWAVAWH
L$xE3
t$HfD
CL$8L
t$HfD
A_A^_^]
UVWAVAWH
fD9>u
fF9<Fu
PA_A^_^]
qr^4#
WAVAWH
fD9:u
fF9<Bu
A_A^_
t$8E3
UVWATAUAVAWH
G8H;G@t2
H;G@u
A_A^A]A\_^]
D$8I;}
t$0L;_@tfE3
 L;_@u
@USVWATAVAWH
d$@fD
d$0fD9"u
fF9$Bu
d$@fD
d$0H;
tLL9cPvFI
A_A^A\_^[]
UVWATAUAVAWH
nL9`P
 H;G@u
A_A^A]A\_^]
t$8L;_@tfE3
 L;_@u
t$ UWATAUAWH
l$0D9
fD9*u
fF9,Bu
fD9*u
fF9,Bu
fD9*u
fF9,Bu
fD9/u
fF9,Gu
fD9+u
fF9,Cu
A_A]A\_]
l$0f9*u
fB9,Bu
UVWAVAWH
A_A^_^]
UVWATAUAVAWH
fD9#u
fF9$Cu
fD9#u
fF9$Cu
fD9#u
fF9$Cu
A_A^A]A\_^]
UVWATAUAVAWH
L$XE2
 I;_8u
A_A^A]A\_^]
t$ WH
gfffffffH
H+;H9K
UVWAVAWH
A_A^_^]
3333333
|$ AVH
3333333
WATAUAVAWH
 A_A^A]A\_
VWAVH
\$hE3
0A^_^
VWATAVAWH
 A_A^A\_^
VWAVH
D$XE3
 A^_^
VWAVH
D$HE3
 A^_^
\$ UVWATAUAVAWH
L$XE2
D$8H;
L$0I+
t$0E2
D$8L;
L$0I+
t$0E2
A_A^A]A\_^]
\$ UVWATAUAVAWH
L$pE3
D$ E3
D$ E3
A_A^A]A\_^]
t$ WH
L$0H3
@USVWATAUAVAWH
A_A^A]A\_^[]
@SUVWATAVAWH
<Cf9;t
f9<su
A_A^A\_^][
t$ UWAVH
x UAVAWH
A_A^]
L$ H3
|$ UH
fB94Cu
x UAVAWH
A_A^]
|$ UH
|$ UH
|$ UH
|$ UH
t$ WH
UVWAVAWH
A_A^_^]
t$ WH
UVWAVAWH
PA_A^_^]
f9<ru
t$ WH
;f9|$0t
f9<Au
L$pH3
f9\$0t
L$pH3
f9\$0t
L$pH3
WAVAWH
fD9:u
fD9<zu
@A_A^_
L$HH3
D$ E3
q3[tn
L$pH3
\$ UVWATAUAVAWH
fD9$Pu
fF9$pu
A_A^A]A\_^]H
@SUVWATAVAWH
D$0E3
;{ seH
`A_A^A\_^][
\$ UVWH
L$@H3
t$ UWAVH
WAVAWH
0A_A^_
WAVAWH
0A_A^_
l$ VWAVH
I9:u)A8h
 A^_^
l$ VWAVH
I9:u)A8h
 A^_^
VWAVH
 A^_^
UATAUAVAWH
A_A^A]A\]
s WATAUAVAWH
t$(E3
!E;` sWH
D9a s=L
L$@I;
D;` s1H
L$HH3
A_A^A]A\_
VWAVH
D$XE3
0A^_^
VWATAVAWH
L$@L;
L$HH3
PA_A^A\_^
WATAUAVAWH
t;H;2u'L
9C s'L
0A_A^A]A\_
|$ ATAVAWH
H;8u,H
0A_A^A\
VWATAVAWH
 A_A^A\_^
\$ UVWATAUAVAWH
L$PE3
A_A^A]A\_^]
t$ UWAUAVAWH
A_A^A]_]
L$0H3
\$ UVWATAUAVAWH
A_A^A]A\_^]
\$ VWATAVAWH
L$8H3
@A_A^A\_^
t$ WAVAWH
H!|$(L
L$8H3
@A_A^_
t$ WAVAWH
H!|$(L
L$8H3
@A_A^_
t$ WAVAWH
D$ H;
L9|$ tV
L$@H3
A_A^_
UVWATAUAVAWH
PA_A^A]A\_^]
\$ UVWAVAWH
D$(E3
<B-u|
<B-uq
<B-u*
D$ fC
L$(H3
0A_A^_^]
@SVWATAUAVAWH
L$ E3
L9l$(tM
L$@H3
PA_A^A]A\_^[
@SVWATAUAVAWH
H9|$ t_
\$(fC
L$XfA
D+D$XA
H9|$(tc
\$ fC
4D;L$0w
L$pH3
A_A^A]A\_^[
9Z@v*H
WATAUAVAWH
 A_A^A]A\_
x ATAVAWH
 A_A^A\
A;PPs1I
VWATAVAWH
D$49D$0
+D$0D
L9d$ tU
D$49D$0w:+D$0fD
L$@H3
PA_A^A\_^
s WATAUAVAWH
L9d$ tUA
D$,9D$(
+D$(D
L9d$ tPA
D$,9D$(wZ+D$(fD
L$@H3
A_A^A]A\_
\$ VWAVH
L$(H3
0A^_^
[ VWATAVAWH
|$0I![
H9L$ w`
L$HH3
PA_A^A\_^
x AVH
UWATAVAWH
A_A^A\_]
L$XH3
SVWATAUAVAWH
L$HH3
PA_A^A]A\_^[
H;\$ r@
L$8H3
_f9(u
WATAUAVAWH
\$PE3
D$@A;
T$@A;
A_A^A]A\_
@SUVWAVH
L$8H3
@A^_^][
WATAUAVAWH
0A_A^A]A\_
t)E97s
RSA1H
q*UP8
UWAVH
fD96u
fF94Fu
fD96u
fD94~u
D8u@t
q#[>;
qpP8V
P0,>A
t$ WH
q+[tI
t$ WAUAVAWH
t$@A_A^A]_
x ATAUAVAWD
|$@A_A^A]A\
UWATAVAWH
A_A^A\_]
p AWH
T$@f92u
fB94Bu
|$ UH
\$ UVWH
UVWAVAWH
D$@H;
fD9:u
fF9<Bu
fD98u
T$@H;
D$@L;
fD98u
D$@H;
T$@H;
D$@L;
A_A^_^]
fB9<Bu
|$ Hc
|$ UH
CX9{Xu
y`H9y
L$@H3
x AVH
fD92t
fD93u
\$@fD
D$ H;
D$ H;
D$ H;
_ H;_
L$8H3
x AVH
WATAUAVAWH
 A_A^A]A\_
t$ UWAVH
)t$`H
(t$`I
D$ H;
L$8H3
VWAVH
 A^_^
WATAUAVAWH
 A_A^A]A\_
8ntwf
8}u(H
8]u(H
UVWATAUAVAWH
)t$@L
{0fD99u
tZfD9:
fD9:rWL
9wBA;
tlfA;
9wfI;
D8}HI
w0f92rZL
(D8uH
(t$@H
PA_A^A]A\_^]
ATAVAWH
N8D9~0
V8D9~0
 A_A^A\
@USVWAVH
A^_^[]
UVWATAUAVAWH
L$@H;
fB9<Bu
L$@H;
fB9<Bu
H;\$@
L$@H;
fB9<Bu
L$@H;
fB9<ru
A_A^A]A\_^]
|$ Hc
@USVWAWH
A__^[]
UVWATAUAVAWH
L$@H;
fD9"t
fF9$Bu
L$@H;
fD9"t
fF9$Bu
L$@H;
fD9"u
fF9$Bu
L$@H;
fD9"u
fF9$ru
T$@H;
D$@L;
A_A^A]A\_^]
\$ UVWH
t$ UWATAVAWH
L$@H;
fD9"u
fF9$Bu
L$@H;
fD9"u
fF9$Bu
L$@H;
fD9"t
fD9$zu
A_A^A\_]
|$ Hc
@USVWATAVAWH
fD9:u
fD9<Zu
A_A^A\_^[]
UVWAVAWH
D$@H;
fD9:u
fF9<Bu
fD98u
T$@H;
D$@L;
fD98u
D$@H;
T$@H;
D$@L;
A_A^_^]
|$ Hc
\$ UVWATAVH
A^A\_^]
UATAUAVAWH
fD9"u
fF9$Bu
fD9"t
fF9$Bu
D$@H;
fD9"u
fF9$Bu
D$@H;
fD9"u
fF9$ru
A_A^A]A\]
|$ Hc
L$@H3
\$ WH
\$ Hc
\$ UVWATAUAVAWH
A_A^A]A\_^]
UVWATAUAVAWH
fB9<Bu
fB9<Bu
fB9<Bu
fB9<Bu
fB9<Bu
fB9<Bu
fB94Bu
fB94Bu
fB9<bu
A_A^A]A\_^]
)L$`H
UATAUAVAWH
A_A^A]A\]
\$ UVWAVAWH
A_A^_^]
UVWATAUAVAWH
fD9"u
fF9$Bu
fD9"t
fF9$Bu
fD9"u
fF9$Bu
fD9"u
fF9$Bu
d$pfD
thD9b(tbH
A_A^A]A\_^]
)L$PH
\$ UVWH
UAVAWH
A_A^]
|$ Hc
@USVWATH
A\_^[]
` UAVAWH
A_A^]
t$ UWAVH
` UAVAWH
\$@H;
M+7H;F
H;T$@
D$@H;
A_A^]
\$ Hc
\$ UVWATAUAVAWH
 L;\$`u
L;\$`t[
|$pfA9>t
fA9<^u
fC9|E
fA9>u
fA9<^u
A_A^A]A\_^]
|$ ATAVAWH
0A_A^A\
D$HH;
@USVWAVH
`A^_^[]
UATAUAVAWH
\$@H;
d$XfD
d$HfD9"u
fF9$Bu
\$@H;
d$XfD
d$HfD9"u
fF9$Bu
A_A^A]A\]
\$ Hc
WAUAVH
0A^A]_
@USVWATAVAWH
T$0H;T$0
A_A^A\_^[]H
VWATAVAWH
A_A^A\_^
@SVWATAVAW
T$@E3
L!|$8H
L$0E3
A94$s
A_A^A\_^[
l$ VWAVH
t$`L9q
@A^_^
@SVWAVAW
A_A^_^[
VWATAVAW
|$HH!|$@H!
D$(E3
T$@H;T$@
uN!D$ L
A_A^A\_^
UWAVH
T$8H;T$8
A^_]H
VWATAUAVAWH
A_A^A]A\_^
p+[tI
@SVWATAUAVAW
\$ E3
L$xH;
\$xH;\$x
\$xH;\$x
\$xH;\$x
\$xH;\$x
A_A^A]A\_^[
@SVWATAUAVAWH
A_A^A]A\_^[
@SVWATAUAVAW
D$xA;
t[E9<$v9A
t@E9<$v+A
E9<$v0A
E;,$r
E9<$v0H
E;,$r
A_A^A]A\_^[
UVWATAUAVAWH
A_A^A]A\_^]H
UVWATAUAVAWH
L;l$h
A_A^A]A\_^]
UVWATAUAVAWH
\$`H+
\$hE3
L$`H+
fE94Ou
A_A^A]A\_^]
@SVWATAUAVAW
D$(E3
H9L$p
H9D$h
L9l$ht'L
A_A^A]A\_^[
L$ SH
\$ E3
@USVWATAUAVAWH
fE9|E
tMF9,
A_A^A]A\_^[]
VWATAVAWH
f9<pu
A_A^A\_^
UVWAUAVH
A^A]_^]
UVWATAVH
fD92u
fF94Bu
H9D$0
H9D$0
A^A\_^]
WATAUAVAW
|$8E3
t$@E3
A_A^A]A\_
@USVWATAUAVAWH
A_A^A]A\_^[]
VWAVH
 A^_^
VWAVH
 A^_^
D$ E3
L$HH3
VWAVH
H!x L
VWAVH
H!x H!|$0L
WATAUAVAW
T$0E3
d$4L!d$@3
D$HL;
A_A^A]A\_
UVWAVAWH
H!\$0L
H!\$0L
H9\$0tLH;
A_A^_^]
UWATAVAWH
A_A^A\_]H
x UAVAWH
A_A^]H
WAVAWH
A_A^_
VWAVH
9|$0t0H
UVWATAUAVAWH
D9>u}H
t,D!|$PH
WPD9:t 
L!|$ H
A_A^A]A\_^]
t$ ATAVAWH
A_A^A\
UVWAVAWH
A_A^_^]
L$ WH
@SUVWAVH
L$8H3
@A^_^][
UWAVH
t$ WATAUAVAWH
L$pH3
A_A^A]A\_
H;L$0v
H;L$0
L+|$ 
H9\$(t`
VWAVH
L$@E3
L$hH3
L$0H3
WATAUAVAW
H!|$`!
d$ E3
A_A^A]A\_
` UAVAWH
A_A^]
UVWAVAWH
|$ E3
fD9='
A_A^_^]
x AVH
x AVH
x AVH
SVWAVH
A^_^[
VWAVH
x AVH
\$ VWAVH
H!|$8H!
SWATAVAWH
L!t$8L!t$@M!s
A_A^A\_[
|$ ATAVAWH
H!|$@
A_A^A\
|$ ATAVAWH
H!|$@
A_A^A\
|$ ATAVAWH
|$\!|$`H
H!|$@
A_A^A\
@USVWATAUAVAWH
t$0E3
A_A^A]A\_^[]
t$ WH
WATAUAVAWH
H!|$@
A_A^A]A\_
WATAUAVAWH
A_A^A]A\_
t$ WH
t$ WH
\$ UVWH
SVWAUAWH
A_A]_^[H
l$ VWATAVAWH
w@A9wHvbA;v
\$PH;
A;wHr
 A_A^A\_^H
\$ UVWATAUAVAWH
A_A^A]A\_^]
D9vxvnH
D;vxr
\$ UVWATAUAVAWH
A_A^A]A\_^]
\$ UVWATAUAVAWH
$fE9GX
fE9Gh
A_A^A]A\_^]
\$ UVWATAUAVAWH
A_A^A]A\_^]
D$@;XHsy
L$0;KHr
\$ UVWATAUAVAWH
A_A^A]A\_^]
H9ZHtqH
H9ZHuWH
H9_@tHH
H9_@u.H
H9_8t
H9_8u
@SVATAUAVAW
A_A^A]A\^[
\$ UVWATAUAVAWH
d$xfD
d$XfD
d$XfD
d$xfD
A_A^A]A\_^]
\$ UVWATAUAVAWH
L9d$@tUH;
A_A^A]A\_^]
H9_@H
H9_Hu
H9_ht
H9\$`
t$PH9W`
G8H9W@L
H9WXL
L9_Hu
L9_hthL
L9_hL
VWAVH
A^_^H
\$ UVWATAUAVAWH
txfD9?trL
A_A^A]A\_^]
\$ UVWAVAWH
A_A^_^]
@USVWATAUAVAWH
|$PE3
t$hE3
|$pE3
H9D$`t6H
A_A^A]A\_^[]
@SVWATAUAVAW
l$PE3
\$PE3
L$ E3
T$PH;
|$ E3
d$pD8
A_A^A]A\_^[
UVWATAUAVAWH
A_A^A]A\_^]H
V<!&,
UVWATAUAVAWH
D$`A9
D$`A;
D9#v&E
D9#v,D
 A_A^A]A\_^]H
UVWATAUAVAWH
A_A^A]A\_^]H
UVWATAUAVAWH
d$0A;
fA9DU
A_A^A]A\_^]
UVWATAUAVAWH
t$0t4H
A_A^A]A\_^]H
\$ UVWATAUAVAWH
D;d$8
D;d$8
A_A^A]A\_^]
VWAVH
fA96t
 A^_^H
UVWATAUAVAWH
|$@E3
\$8E;fP
\$8D;
L!k8L!k@L!kHL!k8L!k8L!k@D!kHD!kP
A_A^A]A\_^]H
\$ UVWATAUAVAWH
|$PE3
t$XL!
D$0;_P
D$0;_P
A_A^A]A\_^]
\$ UVWATAUAVAWH
|$PE3
\$8E;w
\$8D;
D$4E3
l$0D;{
D$@L;
A_A^A]A\_^]
\$ UVWATAUAVAWH
t$HH!
E;}@sjI
A_A^A]A\_^]
qXT:C
UVWATAUAVAWH
A_A^A]A\_^]
@USVWATAUAVAWH
fE;,$t
fE;.t
A_A^A]A\_^[]
@USVWATAVAWH
A_A^A\_^[]
\$ UVWATAUAVAWH
A_A^A]A\_^]
@USVWAVH
A^_^[]
p WATAUAVAWH
t:I9x0t4I
H9|2PtnH
t:I9x0t4I
f9<Bu
A_A^A]A\_H
UVWAVAWH
A_A^_^]
x AVH
\$8f9
UVWATAUAVAWH
pXT:C
T$ E3
pXT:C
L$ E3
H9FHt
pXT:C
pXT:C
A_A^A]A\_^]
x AVH
USVWATAUAVAWH
\$HE;~@s
\$HE;
A_A^A]A\_^[]H
UVWATAUAVAWH
t$0A;
A_A^A]A\_^]
\$ UVWATAUAVAWH
L9\$0t-A
A_A^A]A\_^]
UVWATAUAVAWH
D$<E3
l$0!\$@!\$4!\$83
|$DE;
A_A^A]A\_^]
t$ WATAUAVAWH
d$8A9<$u2I
A9<$u!I
J9|:PtsH
t:I9x0t4H
A_A^A]A\_
x AVH
l$(E3
l$0E3
l$(E3
ppP8V
ppP8V
WATAUAVAWH
p#[>;
p#[>;
A_A^A]A\_
UVWATAUAVAWH
D$pE3
H+N H
N(H+N H
F@H+F8H
F8L9l
F8L9l
l$`fD
l$PfD9*u
fF9,Bu
l$@fD
L9l$@t-H
L$PH;
l$@fD
l$`fD
l$PfD9*u
fF9,Bu
l$@fD
L9l$@t-H
L$PH;
l$@fD
l$`fD
l$PfD9*u
fF9,Bu
l$@fD
L9l$@t-H
L$PH;
l$@fD
N@H+N8H
D8nPu
A_A^A]A\_^]
UVWATAUAVAWH
D$ E3
A_A^A]A\_^]
UVWATAVH
A^A\_^]
SUVWAWH
A__^][H
SUVWAWH
A__^][H
@USVWATAUAVAWH
A_A^A]A\_^[]
@SVWATAUAVAW
A_A^A]A\_^[
UVWATAUAVAWH
t2fD9+t,L
t5fD9/t/L
A_A^A]A\_^]
UVWAVAWH
fD9?t
A_A^_^]
t$ UATAVH
A^A\]
@USVWATAVAWH
A_A^A\_^[]
\$ UVWATAUAVAWH
d$0H!
D$0E;}P
\$0E;}P
\$0E;
A_A^A]A\_^]
V<!&,
UVWAVAWH
E9~@vuE;~@sfI
E;~@r
0A_A^_^]H
@USVWAVH
A^_^[]
x AVH
t$ UWATAVAWH
A_A^A\_]
D$ E3
DD$@H
L$HH3
t$ WH
@USVWATAUAVAWH
A_A^A]A\_^[]
WATAUAVAWH
|$`f98u
fB9<@u
D$`H;
fB9<Bu
fB9<@u
|$ E3
L$ E3
|$`f9:u
fB9<Bu
fB9<Bu
L$ E3
A_A^A]A\_
x UATAUAVAWH
A_A^A]A\]
\$ UVWATAUAVAWH
|$@Hc
|$@Hc
fD9*u
fF9,Bu
|$@Hc
A_A^A]A\_^]
{ UATAUAVAWH
A_A^A]A\]
@USVWATAUAVAWH
L9r8t8L
L9rht
A_A^A]A\_^[]
\$ UVWATAVH
T$pE3
A^A\_^]
H9t$PtIH
UWAWH
|$PH;|$X
H;\$Xu
H;\$@
L$PH3
@USVWATAUAVAWH
\$ E3
A_A^A]A\_^[]
D$HH;
x AUAVAWH
A_A^A]
\$ UVWATAUAVAWH
pA_A^A]A\_^]
\$ f9
H9\$0t(
L$ H;
L$@H3
\$ f9
H9\$0t(
L$ H;
L$@H3
\$ f9
H9\$0t(
L$ H;
L$@H3
t$ WH
` UAVAWH
t$pfD
t$PfD
t$0fD
L9d$8r
t$0fD
fD93u
fD94su
L9d$8
t$0fD
L9d$Xr
t$PfD
L9d$8r
L9t$P
t$0fD
L9d$Xr
t$PfD
L9d$8r
L9t$P
t$0fD
L9d$xr
t$pfD
L9d$8r
L9t$p
t$0fD
L9d$xr
t$pfD
L9d$8r
t$0fD
L9d$8r
L9t$pt!L9u
L9d$Xr
t$PfD
t$@L9e
L9d$xr
t$pfD
A_A^]
VWAVH
6f93t
f94Cu
VWATAVAWH
|$XfD
|$HfD9;u
fF9<Cu
A_A^A\_^
WATAUAVAWH
A_A^A]A\_
WAVAWH
0A_A^_
VWAVH
\$XE3
 A^_^
\$ UVWAVAWH
A_A^_^]
L$PH3
L$PH3
pRW^T
D$(E3
L$0H3
UVWAVAWH
T$ E3
L$(H3
0A_A^_^]
@USVWATAVAWH
d$HfD
d$8fD9&u
fF9$Fu
CT$8H
d$HfD
d$8fD9'u
fD9$_u
CT$8H
pcU6P.
A_A^A\_^[]
@SVWH
L$HH3
\$ UVWAVAWH
A_A^_^]
@USVWATAUAVAWH
L$pE3
tlH9M
A_A^A]A\_^[]
SVWATAUAVAWH
A_A^A]A\_^[
@SVWATAUAVAWH
pcU6P.
pcU6P.
~@@8~D
tP9{ 
8f9:u
fB9<bu
A_A^A]A\_^[
\$ UVWATAUAVAWH
A_A^A]A\_^]
SVWATAUAVAWH
A_A^A]A\_^[
SVWATAUAVAWH
A_A^A]A\_^[
D$8E3
L$ SVWATAUAVAWH
D$ E3
A_A^A]A\_^[
UATAUAVAWH
L$pE3
tOD9k A
(fD9*u
fF9,Bu
d$ E3
A_A^A]A\]
UVWATAUH
A]A\_^]
@SVWATAUAVAWH
pcU6P.
pcU6P.
A_A^A]A\_^[
SVWATAUAVAWH
fD9*u
fF9,Bu
fD9+u
fF9,Cu
L9l$pu?H
fD9/u
fF9,Gu
t~fD9+u
fF9,Cu
fD9*u
fF9,Bu
fD9*u
fF9,Bu
D8l$`
D8l$`t
D9l$htOH
D8l$`tvH
L$hE3
pcU6P.
pcU6P.
A_A^A]A\_^[
L$hE3
VWATAVAWH
A_A^A\_^
@SVWATAUAVAWH
@8~ L
|$ E3
A_A^A]A\_^[
\$ VWAVH
A8x H
@8~ A
{ AUAVAWH
A_A^A]
UWATAVAWH
A_A^A\_]
tmH9\:
t$@H;t$HuxH
H;t$Ht
H;\$Hu
L$8H3
@USVWAVH
w"H+}
A^_^[]
{ AVH
L$hH3
UVWAVAWH
`A_A^_^]
L$8H3
|$@H;
L$PH3
SVWAVAWH
t$`H+
|$HH+
\$@I;
\$@I;
A_A^_^[
UATAUAVAWH
l$hfD
l$XfE9/u
fG9,Gu
l$HfD
l$8fE9.u
fE9,~u
l$HfD
A_A^A]A\]
UVWAVAWH
A_A^_^]
t$ WH
CL$HL
D$ HcP
L$ H+
UWAWH
k VWAUH
CL$ L
CL$ L
L$PH3
UWAVH
fA9<Hu
f9<Bu
VWATAVAWH
L$@L;
L$HH3
PA_A^A\_^
VWATAVAWH
 A_A^A\_^
|$ ATAVAWH
H;0u/H
0A_A^A\
t$ WH
t$ WATAUAVAWH
D$(E3
|$PM+
L;|$Xt
H;\$Xu
A_A^A]A\_
UVWATAUAVAWH
D$@E3
L$@H;
A_A^A]A\_^]
UVWATAUAVAWH
H;|$xt
H;\$xu
H;t$Xt
H;\$Xu
A_A^A]A\_^]
L$@H3
|$ ATAVAWH
0A_A^A\
VWAVH
 A^_^
VWAVH
 A^_^
WATAUAVAWH
D$hH;
 A_A^A]A\_
f94Xu
CL$ A
L$@H3
\$`f9;t
f9<Cu
UVWAVAWH
fD9;u
fF9<Cu
PA_A^_^]
@USVWAVH
A^_^[]
x AVH
VWAVH
x ATAVAWH
 A_A^A\
t$ UWATAVAWH
A_A^A\_]
L$XH3
WATAUAVAWH
 A_A^A]A\_
SVWATAUAVAWH
A_A^A]A\_^[
x AVH
@SVWATAUAVAW
D$ E3
d$hE3
D$pE3
fD9 u
fF9$@u
T$`fD9"u
fD9$ru
A_A^A]A\_^[
@SVWATAUAVAW
d$xA9<$
A_A^A]A\_^[
@SVWATAUAVAWH
A_A^A]A\_^[
@SVWATAUAVAWH
\$0@2
A_A^A]A\_^[
@SVWATAUAVAWH
A_A^A]A\_^[
UVWAVAWH
 A_A^_^]
SVWATAUAVAWH
@8|$pu
A_A^A]A\_^[
WAVAWH
A_A^_
t$ WH
VWATAVAWH
 A_A^A\_^
8\$0t
L$pH3
t$ WAVAWH
\$`f9
\$ E3
A_A^_
SVWATAVAWH
fD9"u
fF9$Bu
D$@E3
d$(L9
d$ E3
D$HH+
H;\$Ht
H;|$Hu
A_A^A\_^[
@SVWAUAVAWH
L$`E3
l$xfD
l$hfE9.u
fG9,Fu
fE97u
fG94Gu
fD99u
fF9<Au
A_A^A]_^[
@SVWATAUAVAWH
L$hE3
d$pfD9"u
fF9$Bu
D$ E3
A_A^A]A\_^[
UATAUAVAWH
\$ E3
|$@H+
t$XH+
A_A^A]A\]
@SVWATAUAVAWH
D$XL!d$h
D$pL!
t$XH+
|$pH+
A_A^A]A\_^[
@SVWATAUAVAWH
fA96u
fC9TE
A_A^A]A\_^[
SVWATAUAVAWH
fD9&u
fF9$Fu
fE9'u
fG9$Gu
\$@H+
A_A^A]A\_^[
@USVWAVH
\$ E3
L$`H;
A^_^[]
@SVWATAUAVAWH
t$hfA96u
A_A^A]A\_^[
@SVWAVAWH
\$ E3
L$xH3
A_A^_^[
D$PH+
H;\$Pt
H;|$Pu
SVWAUAWH
L$pf9
fC9LE
|$ E3
A_A]_^[
SVWAUAWH
L$Xf9
L$xfA9
fC9LE
A_A]_^[
t$ E3
L$PH3
L$ H3
@SVATAUAVAWH
L$8H;
L$8H9
t$8H+3H;C
D$8H;
A_A^A]A\^[
@VWATAUAVAWH
L+?I9
A_A^A]A\_^
@VWAUAVAW
A_A^A]_^
UVWATAUAVAWH
D$ E3
L$0H3
@A_A^A]A\_^]
t>H+;H9K
H+;H9K
VWAVH
L$ E3
@SUVWAVH
A^_^][
WATAUAVAWH
A_A^A]A\_
@USVWATAUAVAWH
L$@H;
A_A^A]A\_^[]
SVWATAUAVAWH
A_A^A]A\_^[
@SVWATAUAVAW
t$PL!
A_A^A]A\_^[
@USVWATAVAWH
|$ E3
pA_A^A\_^[]
@USVWATAUAVAWH
L$HE3
A_A^A]A\_^[]
@USVWATAUAVAWH
A_A^A]A\_^[]
UVWATAUAVAWH
fD;?u
A_A^A]A\_^]
@SVWATAUAVAW
A_A^A]A\_^[
UVWATAUAVAWH
A_A^A]A\_^]
@SVWATAUAVAWH
H9\$Hu
H9\$`
D$PH;
A_A^A]A\_^[
x AUH
D$H!\$@3
SVWAVH
A^_^[
\$ UVWATAUAVAWH
D80H+D9(D
fD9<Hu
\$ E3
A_A^A]A\_^]
L$ SH
pBVR+
L$0H3
@USVWATAVAWH
fE9'u
fG9$Gu
pA_A^A\_^[]
@VWAUAVH
pcU6P.
A^A]_^
UAVAWH
A_A^]
@SVWATAUAVAWH
8f9:u
fB9<Bu
t#I9>t
A_A^A]A\_^[
SVWATAUAVAWH
t"H9{
t$h9|$x
A_A^A]A\_^[
@SVWATAUAVAW
D$pE3
pcU6P.
pcU6P.
A_A^A]A\_^[
@SVWATAUAVAW
pcU6P.
pcU6P.
A_A^A]A\_^[
SVATAVAWH
L!|$ L
A_A^A\^[
SVWATAUAVAWH
\$0H!\$ M
A_A^A]A\_^[
SVWATAUAVAWH
\$@f9
A_A^A]A\_^[
@SVWATAUAVAW
9|$@}TH
pcU6P.
t%f9:u
fB9<Bu
A_A^A]A\_^[
WATAUAVAWH
D$PE3
D9|$HE
A_A^A]A\_
SVWAVAWH
\$HH;Z
A_A^_^[
@SVWATAUAVAW
p+[tI
p+[tI
l$ E3
D$ E3
A_A^A]A\_^[
@SVWATAUAVAW
\$ E3
9\$p}4H
A_A^A]A\_^[
@USVWAVH
A^_^[]
L$@H3
VWAVH
SVWATAUAVAWH
A_A^A]A\_^[
VWAVH
 A^_^
VWAVH
 A^_^
VWAVH
 A^_^
VWAVH
 A^_^
UVWATAVH
`A^A\_^]
L$0H3
t$ WH
L$ SH
L$ SH
\$ UVWH
l$8E3
@USVWATAVAWH
T$PE3
d$@fD
d$0E3
A_A^A\_^[]
@SVWATAUAVAWH
D$xL!
\$xH+
A_A^A]A\_^[
UVWAVAWH
Y H;Y(
`A_A^_^]
|$ UATAUAVAWH
A_A^A]A\]
WAVAWH
0A_A^_
VWAVH
 A^_^
D$HH;
\$HH;
D$HH;
VWATAVAWH
|$0fD
|$ fD9>u
fF9<Fu
D$ H;
A_A^A\_^
\$ UVWATAUAVAWH
D$0E3
D9/vz
fD9)u
fF9,Au
A_A^A]A\_^]
UVWATAUAVAWH
A !s7
A_A^A]A\_^]
UVWAVAWH
A !s7
pA_A^_^]
UVWAVAWH
A !s7
pA_A^_^]
UWATAVAWH
A !s7
d$ E3
A_A^A\_]
t$ UWAVH
q(]2A
VWATAVAWH
pcU6P.
A_A^A\_^
Y>o& 
@SVWATAUAVAW
@8t$`ttI
D$h@8
pcU6P.
pcU6P.
A_A^A]A\_^[
\$ UVWAVAWH
A_A^_^]
x AVH
UVWATAUAVAWH
A_A^A]A\_^]
@SVWATAUAVAW
fB9<Bu
u2H9|$Xt+H
d$PI9?u
d$ E3
D$ E3
H9|$XtZH
A_A^A]A\_^[
UVWATAUAVAWH
A_A^A]A\_^]
t$ UWAVH
fB94Bu
@USVWATAVAWH
A_A^A\_^[]
\$ UVWATAUAVAWH
d$ E3
d$ E3
t$ E3
t$ E3
d$xfD
d$xfD
d$hfD9 u
fD9$Xu
A_A^A]A\_^]
UVWATAUAVAWH
A_A^A]A\_^]
V<!&,
pXT:C
L$PH3
D$8H9x0u
|$8H9_0u
H9D$0
D$@fD
t$ UWAVH
t$HfD
t$8fD93u
fF94Cu
P0,>A
VWAVH
 A^_^
VWAVH
 A^_^
UVWAVAWH
D$@H;
A_A^_^]
\$ UVWAVAWH
|$ E3
pA_A^_^]
L$ SH
@USWH
D$XL;
H9\$Ht]H
D$8H;
qiZZ/
VWAVH
UVWAVAWH
A_A^_^]
L$pH3
qKVVB
x AVH
UVWAVAWH
|$PfD
|$@E3
|$PfD
A_A^_^]
\$ UVWATAUAVAWH
A_A^A]A\_^]
UVWATAUAVAWH
A_A^A]A\_^]
WAVAWH
A_A^_
WAVAWH
A_A^_
C`!s7
@USVWATAVAWH
D$HL!t$XH
|$HH+
D$0H;
H;|$Pt
H;\$Pu
A_A^A\_^[]
UATAUAVAWH
|$XH;
H;|$Xt
H;\$Xu
A_A^A]A\]
@USWATAVAWH
L$0E3
D$ E3
t$8L9t$0u
D$0H;
|$PH;
H;|$8t
H;\$8u
A_A^A\_[]
x UATAUAVAWH
A_A^A]A\]
L$ UVWATAUAVAWH
D$`H9D$XuKH
pKVVB
t$`H;
A_A^A]A\_^]
UAVAWH
A_A^]
UVWATAUAVAWH
fD9 u
fF9$@u
\$XfD9#u
fF9$Cu
|$`fD9'u
fF9$Gu
fD9 u
fD9$pu
A_A^A]A\_^]
L$pH3
t$ WATAUAVAWH
u/H90u*H
A_A^A]A\_
@USVWATAUAVAWH
A_A^A]A\_^[]
@SUVWAVH
H;|$8t
H;\$8u
L$hH3
pA^_^][
H;|$8t
H;\$8u
x ATAVAWH
t$ L+
@A_A^A\
t$ WH
L$@H3
L$hE3
H9t$@
H+t$@
|$ UH
@SVWH
CL$ A
L$@H3
t$ WAVAWH
fB9<@u
A_A^_
x UATAUAVAWH
A_A^A]A\]
L$0H3
L$0H3
L$(H3
WAVAWH
0A_A^_
\$HH;
D$HH;
SVWATAUAVAW
CP!s7
t$PfD
t$@E3
t$PfD
A_A^A]A\_^[
SVWATAUAVAWH
GP!s7
G8H9_h
A_A^A]A\_^[
D9q<t
fD92u
fF94Bu
VWATAVAWH
A_A^A\_^
qK]0[.
VWATAVAWH
A_A^A\_^
piZZ/
9Yxv<;Yxs0H
UVWAVAWH
D;}xs
@A_A^_^]
WATAUAVAWH
FP!s7
t$PA9>t
\$@9;t
A_A^A]A\_
@USVWAVH
D$ E3
A^_^[]
p AWH
I;6t+H
A(!s7
@USVWATAVAWH
Y>o& 
A_A^A\_^[]
VWAVH
 A^_^
pqQT#
SUVWATAUAVAWH
(A_A^A]A\_^][
t$ UWAUAVAWH
fD9:u
fF9<Bu
A_A^A]_]
x UATAUAVAWH
A_A^A]A\]
\$ UVWATAUAVAWH
|$PH9t$pr
|$PH9u
A_A^A]A\_^]
\$ UVWATAUAVAWH
fD9"t
d$XfD
d$HE3
d$xfD
d$hfD9'u
fF9$Gu
d$xfD
d$XfD
d$XfD
d$HfD9"u
fD9$ru
CT$HL
A_A^A]A\_^]
L$xH3
x AVH
@SUVWAVH
L$HH3
PA^_^][
Y>o& 
@USVWATAUAVAWH
t$ E3
A_A^A]A\_^[]
f9\$pu
D$(H;
VWAVH
f9\$pu
D$(H;
s WAVAWH
CD$0H
L$PH3
A_A^_
x ATAVAWH
fD9$^u
fD9$nu
0A_A^A\
WAVAWH
fD98t
L$@H3
A_A^_
UVWAVAWH
D$(!|$ E3
A_A^_^]
UVWATAUAVAWH
L$8E3
pB[Vx
A_A^A]A\_^]
VWAVH
WATAUAVAW
|$PL9/
t$PL9.
|$PL9/
D9l$D
A_A^A]A\_
VWATAVAWH
@A_A^A\_^
fA9(u
fA9,@u
L$8H3
@USVWATAVAWH
r{I9_
`A_A^A\_^[]
t$ UWAVH
VWAVH
 A^_^
t$ WAVAWH
@A_A^_
(fD9}
fD9|}
L$ SH
tCH97u>A
VWAVH
 A^_^
VWAVH
 A^_^
G H9w taH
H9w u/H
|$ E3
L$PH;
t'fD9
L$0H3
qRW^T
q RZs
fB94Bu
\$ UVWH
qcU6P.
q{Z\}
tnH+;H;
|$ ATAVAWH
0A_A^A\
WAVAWH
 A_A^_
VWAVH
 A^_^
VWAVH
 A^_^
\$HH;
L$ SH
L$ SH
\$ UVWAVAWH
w(H+}
PA_A^_^]
\$ UVWATAUAVAWH
A_A^A]A\_^]
p3[tn
s WAVAWH
@8;t^H
A_A^_
L$0H3
VWAVH
 A^_^
VWAVH
 A^_^
x UATAUAVAWH
A_A^A]A\]
ttL+6H
UUUUUUU
|$ ATAVAWH
UUUUUUU
0A_A^A\
\$HH;
L$(H3
L$(H3
L$ SH
UVWATAUAVAWH
L9|$8
H+\$8I;
A_A^A]A\_^]
qqQT#
fA90u
fB94@u
x AVH
\$0fA9
H9\$@A
|$ UH
UVWATAUAVAWH
D$@f9
fB94Bu
H9|$8r
H9|$8r
H9|$Xr
H9|$8r
H9|$Xr
A_A^A]A\_^]
UVWATAVH
pA^A\_^]
UWATAVAWH
t5fD9
fF9<@u
|$PfD
|$pfD
|$`fD9}
fF9<@u
|$PfD
|$PfD
|$pfD
|$`fD9}Hu
fF9<@u
|$PfD
|$PfD
|$pfD
|$`fD9
fF9<@u
|$PfD
|$PfD
|$pfD
|$`fD9
fF9<@u
|$PfD
|$PfD
fD9;u
fD9<{u
|$pfD
A_A^A\_]
@SVWH
H9t$0t
L$@H3
L$@H3
L$ SH
t$ UWAVH
L$ SH
H9C@w
H!{HH
D$ H;
UVWAVAWH
 A_A^_^]
|$ UATAUAVAWH
8Y(t`H9
p:X<J
p:X<J
A_A^A]A\]
q:X<J
qC_Zj
t$ UWAUAVAWH
|$@fD
|$@fD
|$@fD
|$@fD
|$@fD
A_A^A]_]
UVWAVAWH
F0D+F(A
A_A^_^]
A0+A(
WAVAWH
 A_A^_
WAVAWH
 A_A^_
@USVWATAVAWH
A_A^A\_^[]
\$ UVWAVAWH
A_A^_^]
VWAVH
 A^_^
UVWAVAWH
A_A^_^]
q:X<J
UWATAVAWH
e0D8a(tdL9a
p:X<J
whL9g
A_A^A\_]
UWATAVAWH
e0D8a(tdL9a
p:X<J
whL9g
A_A^A\_]
f9\$(u
L$xH3
VWAVH
 A^_^
@USVWAVH
p:X<J
A^_^[]
pC_Zj
@USVWAVH
A^_^[]
@USVWAVH
A^_^[]
|$ f9:u
fB9<Bu
D$ H;
q#[>;
qpP8V
q@W>{
UWATAVAWH
|$0fD
p:X<J
|$0fD
p:X<J
|$PfD
A_A^A\_]
UVWATAUAVAWH
D$ E3
p:X<J
I;^Ps@L
A_A^A]A\_^]
\$ UVWATAUAVAWH
D$ E3
|$hfD
|$hfD
@88u2A
A_A^A]A\_^]
WAVAWH
 A_A^_
VWATAVAWH
 A_A^A\_^
|$ UATAUAVAWH
A_A^A]A\]
x ATAVAWH
A_A^A\
t$(H;
x AVH
P0,>A
p WATAUAVAWH
A_A^A]A\_
@SUVWAVH
 A^_^][
VWAVH
 A^_^
t$ WH
q:X<J
UVWATAUAVAWH
p:X<J
d$8fD
A_A^A]A\_^]
q:X<J
UVWATAUAVAWH
p:X<J
H+;I;
A_A^A]A\_^]
q:X<J
UWATAVAWH
e0D8a(tdL9a
p:X<J
whL9g
A_A^A\_]
q:X<J
UVWATAUAVAWH
p:X<J
A_A^A]A\_^]
q:X<J
UWATAVAWH
e0D8a(tdL9a
p:X<J
whL9g
A_A^A\_]
q:X<J
T$(E3
UVWATAUAVAWH
D8a(t`L9a
p:X<J
pA_A^A]A\_^]
|$ ATAVAWH
0A_A^A\
|$ ATAVAWH
0A_A^A\
|$ ATAVAWH
0A_A^A\
@USVWATAVAWH
t$`fD
t$8fD
D$PH;
D$pH;
A_A^A\_^[]
t$ UWAVH
@USVWAUAVAWH
A_A^A]_^[]
t$ UWAVH
\$ UVWAVAWH
A_A^_^]
t$ UWAVH
@USVWATAVAWH
t$xfD
t$8fD
A_A^A\_^[]
\$ UVWAVAWH
A_A^_^]
t$ UWAVH
x AVH
D$HH;
D$HH;
D$HH;
D$HH;
@USVWAVH
A^_^[]
D9s8uaH
D$HH;
VWATAVAWH
\$hH;
 A_A^A\_^
\$HH;
@USVWAVH
A^_^[]
@USVWAVH
A^_^[]
@USVWAVH
A^_^[]
@USVWAVH
A^_^[]
@USVWAVH
A^_^[]
D$HH;
x AVH
L$ H3
UUUUUUU
VWATAVAWH
\$hH;
 A_A^A\_^
H+:t/H
\$HH;
VWATAVAWH
 A_A^A\_^
VWAVH
D$XE3
 A^_^
q+[tI
D$ H;
L$ SH
@USVWATAUAVH
A^A]A\_^[]
t$ UWAUAVAWH
|$@fD
|$@fD
|$@fD
|$@fD
|$@fD
|$@fD
|$@fD
|$@fD
|$@fD
|$@fD
A_A^A]_]
VWAVH
t$0fD
@A^_^
UVWATAUAVAWH
t$0fD
t$0fD
t$0fD
t$0fD
t$0fD
t$0fD
t$0fD
t$0fD
t$0fD
t$0fD
t$0fD
t$0fD
A_A^A]A\_^]
|$ UH
\$ WH
@SUVWH
L$HH+
L$`H3
x_^][
@SUVWH
L$HH+
L$`H3
x_^][
SUVWH
L$HH3
X_^][
SUVWAUAVAWH
A_A^A]_^][
WAVAWH
 A_A^_
|$8E3
CD$8L
CT$8H
UATAUAVAWH
l$HfD
F0I+F(
C0I+C(
l$hfD
l$HfD
A_A^A]A\]
t$ UWAVH
q:X<J
UWATAVAWH
e0D8a(tdL9a
p:X<J
whL9g
A_A^A\_]
q:X<J
UVWATAUAVAWH
D8a(tkL9a
d$8fD
p:X<J
d$`fD
D$PH;
D$PH9
|$PH+;H
d$8fD
A_A^A]A\_^]
q:X<J
UWATAVAWH
e0D8a(tdL9a
p:X<J
whL9g
A_A^A\_]
q:X<J
UWATAVAWH
e0D8a(tdL9a
p:X<J
whL9g
A_A^A\_]
|$ ATAVAWH
0A_A^A\
@USVWATAVAWH
t$`fD
t$8fD
D$PH;
D$xH;
A_A^A\_^[]
t$ UWAVH
@USVWATAVAWH
t$pfD
t$8fD
A_A^A\_^[]
t$ UWAVH
\$ UVWATAUAVAWH
|$8fD
|$8fD
L9}8vbH
|$XfD
A_A^A]A\_^]
@USVWAVH
A^_^[]
D9s8uaH
\$HH;
@USVWAVH
A^_^[]
@USVWAVH
A^_^[]
@USVWAVH
A^_^[]
q@W>{
UWATAVAWH
fE9;u
fG9<Cu
|$@fD
|$@fD
|$`fD
|$`fD
A_A^A\_]
VWAVH
 A^_^
VWAVH
 A^_^
|$ UH
{ ATAVAWH
t$Xf93u
fB94Cu
A_A^A\
VWATAUAVH
p@W>{
d$`A8<$
A8<$tuL
A8<$t%H
A^A]A\_^
x AUAVAWH
A_A^A]
l$ VWAVH
UWAVH
p+[tI
t$ UWAUAVAWH
t$0I+
L;t$8t
H;\$8u
A_A^A]_]
VWAVH
@USWH
l$ VWATAVAWH
L$ H3
0A_A^A\_^
pYS|~&
q:X<J
|$ UAVAWH
p:X<J
@A_A^]
q:X<J
UWATAVAWH
e0D8a(tdL9a
p:X<J
whL9g
A_A^A\_]
1@82u
SVWAVAWH
D$(H;
PA_A^_^[
VWAVH
L$XE3
 A^_^
L$ SH
\$ UVWATAUAVAWH
|$8fD
|$8fD
|$XfD
A_A^A]A\_^]
t$ UWAVH
@USVWAVH
A^_^[]
q+[tI
VWAVH
VWAVH
 A^_^
|$ UATAUAVAWH
A_A^A]A\]
t$ WH
q:X<J
UWATAVAWH
e0D8a(tdL9a
p:X<J
whL9g
A_A^A\_]
\$ UVWAVAWH
A_A^_^]
t$ UWAVH
@USVWAVH
A^_^[]
q+[tI
x UATAUAVAWH
D8i(tHH
l$0fD
l$0fD
D$ H;
l$0fD
p:X<J
l$PfD
A_A^A]A\]
VWAVH
I9F@w
I#vHI
D$ H;
0A^_^
H9pPt
p WATAUAVAWH
A_A^A]A\_
t$ WH
q+[tI
t$ UH
t$ UWAVH
UATAUAVAWH
A_A^A]A\]
UAVAWH
|$@fD
|$@fD
A_A^]
UVWATAVH
t$@fD
t$@fD
t$@fD
t$@fD
D$0H;
t$@fD
D$0H;
A^A\_^]
UVWAVAWH
A_A^_^]
t$ UWATAVAWH
A_A^A\_]
UVWATAWH
A_A\_^]
UVWATAUAVAWH
l$@fD
l$@fD
l$@fD
A_A^A]A\_^]
` UAVAWH
@A_A^]
UVWATAUAVAWH
d$PfD
H9\$Xr
d$PfD
H9\$Xr
d$PfD
H9\$Xr
d$PfD
H9\$Xr
d$PfD
H9\$Xr
d$PfD
H9\$Xr
d$PfD
H9\$Xr
d$PfD
H9\$Xr
d$PfD
H9\$Xr
d$PfD
H9\$Xr
d$PfD
H9\$Xr
d$PfD
H9\$Xr
d$PfD
H9\$Xr
d$PfD
H9\$Xr
d$PfD
H9\$Xr
d$PfD
H9\$Xr
d$PfD
d$PfD
d$PfD
d$pfD
D$@H;
D$@I9
t$@I+6I;
H;O0u
A_A^A]A\_^]
UVWATAUAVAWH
d$@fD
d$@fD
d$@fD
A_A^A]A\_^]
UVWATAUAVAWH
l$@fD
l$@fD
A_A^A]A\_^]
UVWATAUAVAWH
L$PE3
A_A^A]A\_^]
[ UVWAVAWH
A_A^_^]
` UAVAWH
fD9$Bu
d$@fD
d$0fD9&u
fD9$~u
D$0H;
d$@fD
D$0H;
A_A^]
UUUUUUU
|$ ATAVAWH
0A_A^A\
|$ ATAVAWH
0A_A^A\
|$ ATAVAWH
UUUUUUU
0A_A^A\
|$ ATAVAWH
0A_A^A\
@USVWATAVAWH
A_A^A\_^[]
t$ UWAVH
q:X<J
UVWATAUAVAWH
d$XfD
p:X<J
d$0fD
d$0fD
D$pH;C
D$pH9
|$pH+;H
A_A^A]A\_^]
q:X<J
t$ UWATAVAWH
d$XfD
p:X<J
d$8fD
D$pH;C
D$pH9
|$pH+;H
A_A^A\_]
q:X<J
UWATAVAWH
e0D8a(tdL9a
p:X<J
whL9g
A_A^A\_]
|$ ATAVAWH
0A_A^A\
f9\$(u
L$xH3
\$ UVWATAUAVAWH
d$8fD
d$8fD
D$`H;
A_A^A]A\_^]
@USVWATAVAWH
|$8fD
A_A^A\_^[]
t$ UWAVH
ATAVAWH
$H;0u5
L$@H3
A_A^A\
@USVWAVH
A^_^[]
D9s8uaH
\$HH;
\$HH;
WAVAWH
\$XH;
 A_A^_
@USVWAVH
A^_^[]
@USVWAVH
A^_^[]
@USVWAVH
A^_^[]
WATAUAVAWH
fD9#@
 A_A^A]A\_
@USVWATAUAVAWH
A_A^A]A\_^[]
T$8L+
UVWAVAWH
fF9<@u
w-H9S
A_A^_^]
VWAVH
 A^_^
x UATAUAVAWH
A_A^A]A\]
q:X<J
T$(E3
UVWAVAWH
p:X<J
A_A^_^]
\$ UVWATAUAVAWH
fD9:u
fD9<Zu
A_A^A]A\_^]
t$ UWAVH
D$@H;
fD92u
fF94Bu
fD90u
T$@H;
D$@L;
fD90u
T$@H;
D$@L;
fD90u
T$@H;
D$@L;
T$@H;
D$@L;
|$ Hc
UVWAVAWH
fD9>u
fF9<Fu
fD9>u
fD9<~u
`A_A^_^]
t$ WH
q+[tI
@USWATAUAVAWH
A_A^A]A\_[]
UVWAVAWH
L$@H;
fD9:u
fF9<Bu
L$@H;
fD9:u
fF9<Bu
L$@H;
fD9:u
fD9<zu
T$@H;
D$@L;
A_A^_^]
\$ Hc
qBVR+
UVWATAUAVAWH
A_A^A]A\_^]
t$ WAVAWH
A_A^_
L$`H;
D$`Hk
L$dH;
D$d9D$X
D$XHk
D$p9D$l
D$XHk
p+[tI
D$XHk
p+[tI
p+[tI
D$XHk
D$XHk
H9D$Pt
L$@H+
L$@H+
H9D$Ht
L$`H+
D$pHkD$8
HkD$P
D$@Hk
L$@H+
D$XHk
L$@H+
D$HH9
L$HH3
L$HH+
H;D$(s
D$xH9D$(s
?H9D$Xw
HkD$p
L$HH3
L$HH+
T$PH+
L$PH+
L$HH+
D$0H9D$ t
L$XH+
t$ UWAVH
T$pE3
t$HfD
fD96u
fF94Fu
\$ UVWATAUAVAWH
L$pE3
l$PfD
l$@fD9*u
fD9,zu
l$PfD
A_A^A]A\_^]
@SVWATAUAVAW
9t$Tv{H
;\$Tr
\$TI;
t$ E3
L$xL;
I96tCI
A_A^A]A\_^[
qBVR+
x UATAUAVAWH
fD9/u
fF9,Gu
A_A^A]A\]
VWAVH
 A^_^
@SVWATAUAVAW
;t$XsoH
p+[tI
p+[tI
p+[tI
D9l$`
fD9(u
fD9,xu
p+[tI
A_A^A]A\_^[
qBVR+
UWATAVAWH
fD9'u
fF9$Gu
A_A^A\_]
\$ UVWATAUAVAWH
fD9*u
fF9,Bu
fD9.u
fF9,Fu
A_A^A]A\_^]
@SVWATAUAVAW
D$PI;
|$ E3
\$pH;
9|$T|
A_A^A]A\_^[
VWAVH
 A^_^
H9|$0t^
L$PH3
WAVAWH
 A_A^_
VWAVH
 A^_^
L$hH3
s WATAUAVAWH
fA9|E
A_A^A]A\_
p+[tI
@USVWATAVAWH
A_A^A\_^[]
UVWATAUAVAWH
!|$(3
!|$(3
t$8E3
D$0E3
@A_A^A]A\_^]
WATAUAVAWH
D$ E3
D;t$P
D;t$P
L$`H;
A_A^A]A\_
|$ ATAVAWH
A_A^A\
SVWATAUAVAWH
\$`f9
A_A^A]A\_^[
VWATAVAW
p{Z\}
p{Z\}
D$ E3
A_A^A\_^
UVWATAUAVAWH
D$ E3
D$ E3
t$ E3
A_A^A]A\_^]
SVWATAUAVAWH
A_A^A]A\_^[
WATAUAVAW
D$DD;
D;t$@
t99|$Dv$H
A_A^A]A\_
@SVWAVAWH
L$HH3
PA_A^_^[
@SVWATAVAWH
t$ E3
A_A^A\_^[
@SVWATAVAWH
A_A^A\_^[
@SVWATAVAWH
\$PH!\$H3
D$HH!\$HI
A_A^A\_^[
@SVWAVAWH
L$pH3
A_A^_^[
[ VWAUAVAWH
D$ E3
|$`fD
|$PfD9:u
fF9<Bu
D$@H;
A_A^A]_^
VWAVH
 A^_^
t$ UH
UVWAVAWH
t$HfD
D$8H;
A_A^_^]
t$ WAVAWH
|$0fD
@A_A^_
t$ WH
VWAVH
 A^_^
VWATAVAWH
 A_A^A\_^
|$ AVH
VWAUAVAWH
9\u;H
 A_A^A]_^
t4y#I
t4y#I
UVWAVAWH
t8y%H
0A_A^_^]
t2y"I
|$ AVH
WATAUAVAWH
 A_A^A]A\_
` AUAVAWH
t?fD99u5H
 A_A^A]
t:fD98u0H
CHD1p
t:fD98u0H
t?fD99u5H
t:fD98u0H
fD99u5H
t?fD99u5H
l$ VWATAVAWH
M(HcE$I
L$xH3
A_A^A\_^
WAUAWH
CHD1x
9\u7H
9S|uZH
9\u7H
9\u7H
9Ct|dD
 A_A]_
VWAVH
:\u/H
9\u5H
 A^_^
WATAVH
9\u6H
8\u:H
{|}t&E
9\u6H
{|?uPH
9\u0H
 A^A\_
t$ WH
{(9C w#H
UVWATAUAVAWH
A_A^A]A\_^]
UVWATAUAVAWH
D;o }*E
A_A^A]A\_^]
UVWATAUAVAWH
f91t=H
 A_A^A]A\_^]
UVWATAUAVAWH
PA_A^A]A\_^]
t$ WATAUAVAWH
A_A^A]A\_
p;TXi
p;TXi
L$`H3
VWAVH
@A^_^
x AVH
p;TXi
GHD1p
:\u=H
:\u0H
p;TXi
GtH;O
9\u6H
:\u5H
:\u5H
t$ WAVAWH
 A_A^_
UVWATAUAVAWH
E9u ~/H
E;u |
A_A^A]A\_^]
UVWATAUAVAWH
A_A^A]A\_^]
SUVWATAVAWH
D$xH;
L$(H3
0A_A^A\_^][
VWATAVAWH
D$hH;
L$(H3
0A_A^A\_^
@SVWAVAWH
@A_A^_^[
x AVH
CtH;K
9\u;H
x AVH
t?fD91u5H
{xauO
t?fD90u5H
t?fD91u5H
tDfD91u:H
p;TXi
GtH;W
:\u=H
VWAUAVAWH
D;s }XL
;K$|DH
9+w"H
 A_A^A]_^
t$ WH
t$ WH
t$ WATAUAVAWH
L$ E3
L$(M;
L$ Hc
A_A^A]A\_
UVWAVAWH
A_A^_^]
t$ WAVAWH
9\u7H
.u$H;3
9\uDH
9\u6H
0A_A^_
f9CxuVH
CtH;S
9{tu#
\$ UVWATAUAVAWH
t$0I;
A_A^A]A\_^]
t$ WAVAWH
 A_A^_
WATAUAVAWH
D$pE3
0A_A^A]A\_
x AVH
WATAUAVAWH
L$hE3
 A_A^A]A\_
WATAUAVAWH
L$hE3
 A_A^A]A\_
x ATAVAWH
A_A^A\
L$ SVWATAUAVAW
D$ E3
D$ E3
D$`D;
d$hD;
 D;l$`H
9T$dt
D$`D;
A_A^A]A\_^[
p+[tI
D$@!\$8!\$(L
|$ UH
VWATAVAWH
H!\$8
A_A^A\_^
L$(H3
SWAVH
pB[Vx
VWAVH
 A^_^
VWAVH
 A^_^
UWAVH
 A^_]
t$ WH
L$0Hcy
D$0;x
SUVWATAUAVAWH
D$8H;
H;t$8
HA_A^A]A\_^][
VWAVH
 A^_^
x AVH
WAVAWH
 A_A^_
x AWH
WAVAWH
 A_A^_
L$ SH
t$ UWAVH
L$ H3
L$ SH
t$ UWAVH
^4=&m
l$ VWAVH
t$ UWATAVAWH
A_A^A\_]
t$ UWAVH
VWAWH
 A__^
L$8H3
L$ SH
t$ WH
D$ H;
f;t$ t
L$8H3
t$ UWAVH
t$8f92u
fB94Bu
fB94Bu
D$8H;
@SVWH
L$PH3
\$ UVWAVAWH
f94Bu
L$@H3
PA_A^_^]
UVWAVAWH
A_A^_^]
L$0H3
L$PH3
t$ UWATAVAWH
fD9"u
fF9$Bu
A_A^A\_]
UVWAVAWH
A_A^_^]
\$ UVWAVAWH
pA_A^_^]
\$ UVWAVAWH
`A_A^_^]
^4=&m
L$0H3
@SUVWAVH
L$8H3
@A^_^][
L$ SH
L$ SH
L$ SH
L$ SH
L$ SH
L$ SH
UVWATAUAVAWH
|$PfD
(D$`f
|$PfD
A_A^A]A\_^]
UVWATAUAVAWH
L99u+H
\$8E3
A_A^A]A\_^]
UWAVH
|$ UAVAWH
9q8tnH
A_A^]
VWAVH
t$0E3
H;YHu
@A^_^
t$ UWATAVAWH
TUUUUUU
A_A^A\_]
@USVWAWH
A__^[]
UVWATAUAVAWH
H;YHtvH
l$XfD
H;ZHu
^4=&m
A_A^A]A\_^]
UWATAVAWH
H;_Hu
H;_HtR
A_A^A\_]
[ UVWH
VWAVH
0A^_^
\$ UVWH
UVWATAUAVAWH
A_A^A]A\_^]
f9\$(u
L$xH3
:_uhH
|$0fD
|$ E3
|$0fD
\$ VWAVH
 A^_^
L$(H3
t$ WAVAWH
t$0H+
~%fD9>u
fF9<Fu
A_A^_
L$ SH
L$ SH
UVWATAUAVAWH
l$XfD
fD9(u
fF9,@u
l$XfD
l$8fD
l$(fD9(u
fF9,@u
l$xfD
l$xfD
l$8fD
l$XfD
l$HfD9*u
fF9,Bu
l$8fD
l$xfD
l$8fD
A_A^A]A\_^]
UVWATAUAVAWH
d$HfD
d$HfD
A_A^A]A\_^]
WAUAVH
@A^A]_
qYS|~&
H9pPt*H
VWAVH
 A^_^
UWATAVAWH
|$HE3
d$@fD
d$@fD
d$@fD
d$@fD
d$@fD
d$@fD
d$@fD
d$@fD
d$@fD
d$@fD
d$@fD
A_A^A\_]
x AVH
H9xPHcA
f9<Cu
L$(H3
x AVH
q+[tI
\$ UVWH
UAVAWH
A_A^]
|$ Hc
VWAVH
 A^_^
@SVWATAUAVAWH
;\$@swH
A_A^A]A\_^[
q0R^G'
ATAVAWH
p0R^G'
 A_A^A\
q:_0#
VWAVH
\$ E3
LcA<E3
HcQ<H
\$ UH
 H3E H3E
D$HE3
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
q*Z~:
q*Z~:
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
l$ VWAVH
l$ VWAVH
VWATAVAWH
D8"u3H
A_A^A\_^
D9&tZA
f#D$@H
x ATAVAWH
@A_A^A\
WATAUAVAWH
A_A^A]A\_
SVWAVH
\$px#H+
8A^_^[
VWAVH
\$px I+
@A^_^
WAVAWH
\$ A;
0A_A^_
x AVH
H;]@u
HH;]Pu
 H;]Pu
PH;]`u
 H;]0u
H;]@u
pcU6P.
pcU6P.
`H;]`u
pBVR+
H;]0u
pcU6P.
pcU6P.
SUVWH
pqQT#
H;]@u
p3[tn
0H;]@u
pC_Zj
 H;]@u
H;]@u
HH;]@u
`H;]@u
HH;]`u
H;]@u
HH;]`u
H;]`u
@H;]Pu
H;]@u
H;]@u
H;]@u
~"HkE8
E@H9E t
E`H9E(t
H;]0u
u;8Cpt6
E(=csm
E8=csm
EH=csm
EX=csm
Eh=csm
Ex=csm
CRYPT32.dll
OLEAUT32.dll
bad allocation
bad function call
regex_error(error_collate): The expression contained an invalid collating element name.
regex_error(error_ctype): The expression contained an invalid character class name.
regex_error(error_escape): The expression contained an invalid escaped character, or a trailing escape.
regex_error(error_backref): The expression contained an invalid back reference.
regex_error(error_brack): The expression contained mismatched [ and ].
regex_error(error_paren): The expression contained mismatched ( and ).
regex_error(error_brace): The expression contained mismatched { and }.
regex_error(error_badbrace): The expression contained an invalid range in a { expression }.
regex_error(error_range): The expression contained an invalid character range, such as [b-a] in most encodings.
regex_error(error_space): There was insufficient memory to convert the expression into a finite state machine.
regex_error(error_badrepeat): One of *?+{ was not preceded by a valid regular expression.
regex_error(error_complexity): The complexity of an attempted match against a regular expression exceeded a pre-set level.
regex_error(error_stack): There was insufficient memory to determine whether the regular expression could match the specified character sequence.
regex_error(error_parse)
regex_error(error_syntax)
regex_error
permission denied
file exists
no such device
filename too long
device or resource busy
io error
directory not empty
invalid argument
no space on device
no such file or directory
function not supported
no lock available
not enough memory
resource unavailable try again
cross device link
operation canceled
too many files open
permission_denied
address_in_use
address_not_available
address_family_not_supported
connection_already_in_progress
bad_file_descriptor
connection_aborted
connection_refused
connection_reset
destination_address_required
bad_address
host_unreachable
operation_in_progress
interrupted
invalid_argument
already_connected
too_many_files_open
message_size
filename_too_long
network_down
network_reset
network_unreachable
no_buffer_space
no_protocol_option
not_connected
not_a_socket
operation_not_supported
protocol_not_supported
wrong_protocol_type
timed_out
operation_would_block
address family not supported
address in use
address not available
already connected
argument list too long
argument out of domain
bad address
bad file descriptor
bad message
broken pipe
connection aborted
connection already in progress
connection refused
connection reset
destination address required
executable format error
file too large
host unreachable
identifier removed
illegal byte sequence
inappropriate io control operation
invalid seek
is a directory
message size
network down
network reset
network unreachable
no buffer space
no child process
no link
no message available
no message
no protocol option
no stream resources
no such device or address
no such process
not a directory
not a socket
not a stream
not connected
not supported
operation in progress
operation not permitted
operation not supported
operation would block
owner dead
protocol error
protocol not supported
read only file system
resource deadlock would occur
result out of range
state not recoverable
stream timeout
text file busy
timed out
too many files open in system
too many links
too many symbolic link levels
value too large
wrong protocol type
WINHTTP.dll
r;WININET.dll
Invalid parameter passed to C runtime function.
[%u]%hc
RtlTrace error: hr = 0x%08x
false
generic
unknown error
iostream
iostream stream error
system
FsTrace error: hr = 0x%08x
Unknown
%s%sException at %s(%lu)%s%s
HRESULT = 0x%08x
FsException::setDetailedMessage - Error in ::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf.
Exception
ReturnNt
ReturnHr
LogNt
LogHr
FailFast
%hs(%u)\%hs!%p: 
%hs!%p: 
(caller: %p) 
%hs(%d) tid(%x) %08X %ws
Msg:[%ws] 
CallContext:[%hs] 
[%hs(%hs)]
[%hs]
kernelbase.dll
RaiseFailFastException
onecore\internal\sdk\inc\wil\opensource\wil\resource.h
onecore\internal\sdk\inc\wil\opensource\wil\result.h
WilError_03
ntdll.dll
RtlDllShutdownInProgress
RtlDisownModuleHeapAllocation
WilFailureNotifyWatchers
Microsoft::InformationProtection::LogFunctionHelper::LogFunctionHelper
onecoreuap\ds\security\rm\client\src\base\Logging\IpcLogging.h
-%hs hr=0x%x
Microsoft::InformationProtection::LogFunctionHelper::~LogFunctionHelper
Failure
os::IpcOsInitializeCriticalSectionAndSpinCount(&m_cs, 0)
onecoreuap\ds\security\rm\client\src\base\FsCommon\FastMutex.h
CorrelationId
DataSize
ScenarioId
ContentId
IssuerName
IssuerId
RACObjectId
OwnerId
DurationWithoutExternalOps
Status
SubType
TokenProvided
UserProvided
AuthCallbackProvided
ConnectionMode
HRESULT
HomeTenant
GuestTenant
HttpCall
DnsSuccess
UserInfo.Principal
LicenseId
LicensePropertyType
IsFromTemplate
OperationName
TemplatesCount
ServerType
ReinterpretKeyHandle
KeyHandle
AppInfo.Name
AppInfo.Version
DeviceInfo.OSArch
AppInfo.ClientHierarchy
Identity.Status
Identity.Failure
Identity.Type
Identity.IntranetUrl
Identity.ExtranetUrl
Identity.UserProvided
ConnectionInfo.IntranetUrl
ConnectionInfo.ExtranetUrl
SDKVersion
NoOfDomainsSearched
NoOfDomainsSkipped
TemplateId
CallBackStatus
Duration
StartTime
EndTime
FileExtension
FileFormat
PolicyType
ErrorCode
StatusCode
Result
LicenseFormat
RACType
CallbackTime
VerifyCertChainDuration
VerifySignatureDuration
LicenseType
Online
Offline
Renew
Expired
False
Template
Adhoc
Success
AADRM
ApiOp
HttpOp
DnsLookupOp
ServiceDiscoveryOp
RenewUserOp
GetUserOp
StoreOp
ParseLicenseOp
RegistryBasedLocator
UrlBasedLocator
GlobalServiceLocator
AddRAC
DeleteRAC
UnhandledError
MsipcActivity
alnum
alpha
blank
cntrl
digit
graph
lower
print
punct
space
upper
xdigit
SOFTWARE\Microsoft\WinMSIPC
Trace
onecoreuap\ds\security\rm\client\src\base\FsCommon\auto_coinit.h
HandleException
NullHandleException
InvalidHandleTypeException
Assert
Error
Warning
Trace
onecoreuap\ds\security\rm\client\src\msipc\api\ippapi.cpp
IpcAccessCheck
wszRequestedRights
*** Error tracing API entry
IpcAccessCheck
0 != hKey
onecoreuap\ds\security\rm\client\src\msipc\api\ippapi.cpp
os::IpcOsStringCchLength(wszRequestedRights, IPC_OS_MAX_CCH, 0)
pfAccessGranted
pKey->IsValid()
AccessCheck returned %s
*** Error tracing API exit
IpcCloseHandle
handle
IpcCloseHandle
IpcFreeMemory
IpcFreeMemory
0 == pConnectionInfo || SUCCEEDED(ipp::ConnectionInfo::Check(pConnectionInfo))
0 == pvReserved
os::IpcOsStringCchLength(wszID, IPC_OS_MAX_CCH, 0)
ppvTemplate
0 != g_pFactory
HRESULT_FROM_WIN32(ERROR_FILE_NOT_FOUND)
pvCreateInfo
unknown type for dwType
phLicense
EDITRIGHTSDATA
dwFlags
ipp::IppUser::Check(pOwner)
(0 == dwFlags) || (IPC_CL_FLAG_QUERY_ONLY == dwFlags)
(0 == dwFlags)
0 != pAutoTemplateBuffer.get()
IppGetUser(IPP_GU_TEMPLATE, &userFromTemplateInfo, IPP_GU_SKIP_EXPIRY_CHECK, pIpcContext, &hUser)
0 != hUser
pUser->IsValid()
ipp::IppUtil::ConvertBufferToString(pAutoTemplateBuffer, &wszTemplate, false)
IpcCreateLicenseInternal( pvCreateInfo, dwType, dwFlags, pOwner, pCreator, pIpcContext, phLicense)
converting 0x%x to HRESULT_FROM_WIN32(ERROR_FILE_NOT_FOUND)
IpcCreateLicense
NULL == pvReserved
IpcCreateLicense((LPCVOID)wszTemplateId, IPC_CL_TEMPLATE_ID, dwFlags, pOwner, pCreator, phLicense)
IpcCreateLicenseFromTemplateID
wszTemplateID
pvReserved
IpcCreateLicenseFromTemplateID
IpcCreateLicenseFromTemplateIdInternal( wszTemplateID, dwFlags, NULL, NULL, pvReserved, phLicense)
IpcpCreateLicenseFromTemplateId
wszTemplateId
pOwner
pCreator
IpcpCreateLicenseFromTemplateId
ipp::IppUser::CheckBootstrapUser(pCreator)
IpcCreateLicenseFromTemplateIdInternal( wszTemplateId, dwFlags, pOwner, pCreator, pvReserved, phLicense)
IpcpCreateLicenseFromTemplateID
IpcCreateLicenseFromKey
IpcCreateLicenseFromKey
IpcCreateLicense((LPCVOID)hKey, IPC_CL_KEY, dwFlags, NULL, NULL, phLicense)
0 != pTemplateIssuer
0 == dwFlags
IpcCreateLicenseFromScratch
pTemplateIssuer
IpcCreateLicenseFromScratch
IpcCreateLicenseFromScratchInternal( pTemplateIssuer, dwFlags, NULL, NULL, pvReserved, activity, phLicense)
IpcpCreateLicenseFromScratch
IpcpCreateLicenseFromScratch
IpcCreateLicenseFromScratchInternal( pTemplateIssuer, dwFlags, pOwner, pCreator, pvReserved, activity, phLicense)
IpcpCreateLicenseFromTemplate
wszTemplate
pContext
IpcpCreateLicenseFromTemplate
0 != wszTemplate
ipp::IppUtil::CheckPromptContext(pContext)
ipp::IppUser::Check(pCreator)
hr = CERT_E_MALFORMED
IppGetUser(IPP_GU_CONNECTION_INFO, &connInfo, 0, pContext, &hUser)
os::IpcOsStringCchLength(wszTemplate, IPC_OS_MAX_CCH, &cchLength)
IpcDecryptInternal
cbCiphertext > 0
pbCiphertext
pcbResult
pcbHash
pbHash == nullptr
cbHash == 0
IpcDecrypt (deferred)
dwBlockNumber
fFinal
cbCiphertext
IpcDecryptInternal
IpcDecrypt
IpcSetLicenseProperty
hLicense
fDelete
dwType
pvLicenseInfo
IpcSetLicenseProperty
0 != hLicense
INVALID_HANDLE_VALUE != hLicense
pLicense->IsValid()
!fDelete
ipp::IppAcl::Check(pAcl)
ipp::CipherInfo::Check(pCipherInfo)
The connection string associated with a license cannot be set.
Changing of owner is not allowed for Republish only license
ipp::IppTerm::Check(pTerm)
*pdwIntervalTime <= USHRT_MAX
ipp::LicenseNameValue::Check(pNameValueList)
The flag specifying whether the license is created based on an official template cannot be set.
The flag specifying whether the license is created by RMSO cannot be set.
ipp::IppUtil::CheckTemplateInfo(pDescriptor)
Using AES256 - CBC4K Encryption package
Using AES128 - CBC4K Encryption package
Using AES128 - ECB Encryption package
Using AES256 - CBC512NOPAD Encryption package
Using AES128 - CBC512NOPAD Encryption package
Unknown preferred encryption package.
Signer info cannot be set.
The flag specifying docTrackingUrl cannot be set.
IpcEncryptInternal
cbPlaintext > 0
pbPlaintext
pbHash != nullptr
IpcEncrypt(deferred)
cbPlaintext
IpcEncryptInternal
IpcEncrypt
IpcGetGlobalProperty
IpcGetGlobalProperty
ppvInfo
pvLicense
ipp::IppUtil::CheckBuffer(pvLicense)
ipp::IppUtil::CheckBuffer(pvUseLicense)
phKey
Getting user identity from license
IpcGetKeyInternal
IppGetUser( IPP_GU_LICENSE, &userFromLicense, dwFlags & ipp::IppUtil::GetValidIppGetUserFlags(), pIpcContext, &hUser)
Done getting identity from license
Creating a key
Done creating key
IpcGetKey
IpcGetKey
ipp::IppUtil::CheckGetKeyFlags(dwFlags)
IpcGetKeyInternal( &activity, pvLicense, dwFlags, NULL, NULL, pContext, NULL, pvReserved, phKey )
ipp::IppUtil::CheckNameValue(&argCheck)
phIpcAuthToken
IpcCreateOAuth2Token
wszAuthToken
IpcCreateOAuth2Token
IpcpGetKey
pConsumer
pToken
pvUseLicense
IpcpGetKey
ipp::IppUser::CheckBootstrapUser(pConsumer)
ipp::IppUtil::CheckToken(pToken)
IpcGetKeyInternal( &activity, pvLicense, dwFlags, pConsumer, pToken, pContext, pvUseLicense, pvReserved, phKey )
ipp::IppUtil::CheckToken(pcToken)
ppcTil
pConnectionInfo
(!(IPC_GTL_FLAG_SKIP_USER & dwFlags)) || pcLocalIppUser
+++++++++ Getting user identitiy before getting templates ++++++++
       Extranet URL: %ws
       Intranet URL: %ws
       UserID: %ws
IpcGetTemplateListInternal
--------- Done getting user Identity hr = 0x%x ---------
Can't get User Handle hr = 0x%x
+++++++ Getting all templates +++++++
------- Done getting all templates -------
+++++++ Getting templates for the user: %ws +++++++
-------- Done getting templates -------
IpcpGetTemplateListForUser
pcToken
IpcpGetTemplateListForUser
ipp::IppUtil::CheckGetTemplateListFlags(dwFlags)
IpcGetTemplateListInternal( &activity, pConnectionInfo, pCreator, pvReserved, dwFlags, lcid, pcToken, pContext, ppcTil)
IpcGetTemplateList
IpcGetTemplateList
IpcGetTemplateListInternal( &activity, pConnectionInfo, NULL, pvReserved, dwFlags, lcid, NULL, pContext, ppcTil)
IpcGetTemplateIssuerList
IpcGetTemplateIssuerList
ipp::IppUtil::CheckGetTemplateIssuerListFlags(dwFlags)
ppcTemplateIssuers
!pConnectionInfo
IppGetUser Failed hr = 0x%x
IPC_GTIL_FLAG_DEFAULT_SERVER_ONLY is specified but couldn't get the default user.
HRESULT_FROM_WIN32(ERROR_INTERNAL_ERROR)
No template issuers available locally or from non-default servers, default service discovery failed. Failed hr = 0x%x
hrIppGetUser
IpcpGetUserListForIssuer
IpcpGetUserListForIssuer
ppcUsers
IppGetUser(dwType, pvInfo, dwFlags, pIpcContext, phUser)
ipp::IppUtil::CheckIppGetUserFlags( dwFlags )
pvInfo
phUser
ipp::IppUtil::CheckUserInfoConnection( pUserConnectionInfo )
ipp::IppUtil::CheckUserInfoLicense(pLicenseInfo)
ipp::IppUtil::CheckUserInfoTemplate( pTemplateInfo )
Getting templates for user
IppGetUser
Done getting templates with result: hr = 0x%x
IpcGetKeyProperty
IpcGetKeyProperty
ppvKeyInfo
os::IpcOsStringCchCopy(wszOut, cchUserName, wszDisplayUserName)
IpcGetLicenseProperty
IpcGetLicenseProperty
ppvLicenseInfo
IpcGetSerializedLicenseProperty
dwPropID
IpcGetSerializedLicenseProperty
NULL != pvLicense
ppvProperty
A key handle is required for accessing this property
IPC_LI_CONTENT_KEY is not a valid dwPropID value for this API
storing cached license in key
ipp::IppUtil::CheckSerializeLicenseType(dwType)
0 != pvLicenseInfo
ipp::IppUtil::CheckSerializeLicenseFlags(dwFlags)
ppvLicense
Creating license from template ID
IpcSerializeLicenseInternal
IpcCreateLicenseInternal( pvLicenseInfo, IPC_CL_TEMPLATE_ID, 0, NULL, pCreator, pIpcContext, reinterpret_cast<PIPC_LICENSE_HANDLE>(&hLicense) )
License Created
0 != pLicense.get()
Getting templated for rollover check
Serialize is not supported for this CLC
Done with getting templates
Serializing the license
Done serializing the license
Done creating a key
IpcSerializeLicense
IpcSerializeLicense
IpcSerializeLicenseInternal( &activity, pvLicenseInfo, dwType, dwFlags, NULL, NULL, pContext, phKey, ppvLicense)
IpcpSerializeLicense
IpcpSerializeLicense
IpcSerializeLicenseInternal( &activity, pvLicenseInfo, dwType, dwFlags, pCreator, pToken, pContext, phKey, ppvLicense)
IpcSetGlobalProperty
IpcSetGlobalProperty
g_fIsEnvironmentChangeOK
IPC_EI_API_MODE
ipp::IppUtil::CheckApiMode(nApiMode)
IPCP_EI_STORE_NAME
IPC_EI_APPLICATION_ID
pAppId->cbSize >= sizeof(IPC_AAD_APPLICATION_ID)
pAppId->wszClientId
Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchLength(pAppId->wszClientId, IPC_OS_MAX_CCH, &_cchLen)
0 != _cchLen
pAppId->wszRedirectUri
Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchLength(pAppId->wszRedirectUri, IPC_OS_MAX_CCH, &_cchLen)
IPC_EI_STORE_PATH_ROOT
IPC_EI_LOG_CONFIGURATION
pLoggingConfig->cbSize >= sizeof(IPC_LOGGING_CONFIGURATION)
0 == ((~IPC_LOGGING_MASK) & pLoggingConfig->dwLogTypes)
dwReservedCheck != (dwReservedCheck & pLoggingConfig->dwLogTypes)
E_OUTOFMEMORY
FALSE
IPC_EI_ENABLE_TELEMETRY
IpcCreateLicenseMetadataHandle
pvSerializedLicense
phMetadata
IpcCreateLicenseMetadataHandle
NULL != pvSerializedLicense
OWNER
pKey->AccessCheck(IPC_GENERIC_ALL)
(IPC_USER_TYPE_EMAIL == pOwner->dwType) && (0 == wcsicmp(wszEmailFromCLC, pOwner->wszID))
IpcSetLicenseMetadataProperty
hLicenseMetadata
IpcSetLicenseMetadataProperty
0 != hLicenseMetadata
INVALID_HANDLE_VALUE != hLicenseMetadata
!fDelete && NULL != pvLicenseInfo
pLicenseMetadata->IsValid()
ipp::IppUtil::CheckNotificationType(dwNotificationType)
ipp::IppUtil::CheckNotificationPreference(dwNotificationPref)
IpcSerializeLicenseWithMetadata
IpcSerializeLicenseWithMetadata
0 != pLicenseMetadata.get()
IpcpBootstrapUser
pUser
IpcpBootstrapUser
ipp::IppUser::CheckBootstrapUser(pUser)
ppcTi
ppcUser
IppGetUser( IPP_GU_CONNECTION_INFO, &pUserFromConnInfo, pUserFromConnInfo.wszID ? dwFlags : (dwFlags | IPP_GU_NEW), pIpcContext, &hUser)
IpcpGetUseLicenseFromSerializedLicense
pcvLicense
IpcpGetUseLicenseFromSerializedLicense
ppvUseLicense
dwFlags == 0
IpcpGeneratePreLicensesForUsers
pUserList
ppUseLicenses
IpcpGeneratePreLicensesForUsers
ipp::IppUtil::CheckUserList(pUserList)
IpcpGeneratePreLicensesForUsersInternal(pvLicense, pUserList, dwFlags, pIpcContext, ppUseLicenses)
E_INVALIDARG
pFactory != 0 && pFactory->IsValid()
(g_pFactory.get() == 0) || (!pFactory->ProductionCodeOnly())
server
client
Logging Initialized for %hs mode, store name is %ws
ippInitializeAuthAndFileBasedLoggingIfNeeded
Log Version: 1.1
[msipp]: IPP API debug tracing is on.
IpcGetErrorMessageText
hrError
dwLanguageId
IpcGetErrorMessageText
S_OK != hrError
ppwszErrorMessageText
IpcOsGetErrorMessageText( hrError, dwLanguageId, g_hMSIPPHandle, const_cast<LPCWSTR *>(&wszErrorText))
os::IpcOsStringCchCopy(wszOut, cchErrorText, wszErrorText)
IpcGetLastErrorMessageText
IpcGetLastErrorMessageText
os::IpcOsStringCchCopy(wszOut, cchErrorText, wstrErrorMsg.c_str())
IpcpAllocMemory
IpcpAllocMemory
NULL != ppv
IpcpCreateKeyFromKey
dwCipherMode
IpcpCreateKeyFromKey
IPCP_CK_CIPHER_MODE_CBC_4K == dwCipherMode
0 != phKey
IpcpClearKeys
IpcpClearKeys
IpcpGetKeyBits
pbContentKey
pcbContentKey
IpcpGetKeyBits
0 != pcbContentKey
IpcpGetLoggerInstance
ppLoggerInstance
IpcpGetLoggerInstance
0 != IIpcLogger::GetInstance()
IpcpSetLastIpcError
hrErrorCode
IpcpSetLastIpcError
IpcpSetLastFileName
wszFileName
IpcpSetLastFileName
IpcpGetErrorInfoInstance
ppErrorInfoInstance
IpcpGetErrorInfoInstance
IpcRegisterLicenseInternal
pvLicenseWithMetadata
ipp::IppUtil::CheckBuffer(pvLicenseWithMetadata)
!(NULL != pContext && (pContext->dwFlags & IPC_PROMPT_FLAG_OFFLINE))
ipp::IppUtil::ConvertBufferToString(pvLicenseWithMetadata, &wszLicense)
canRegisterPL
IpcRegisterLicense
wszContentName
fSendRegistrationMail
IpcRegisterLicense
IpcpSetKeyBits
cbContentKey
IpcpSetKeyBits
0 != pbContentKey
0 != cbContentKey
IpcpGetUserInfo
IpcpGetUserInfo
ppUserInfo
IppGetUser(IPP_GU_CONNECTION_INFO, &pUserFromConnInfo, 0, pIpcContext, &hUser)
onecoreuap\ds\security\rm\client\src\base\FsCommon\auto_pointer.h
Local\SM0:%lu:%lu:%hs
onecoreuap\ds\security\rm\client\src\base\FsCommon\auto_ipcmem.h
onecoreuap\ds\security\rm\client\src\base\FsCommon\auto_array.h
invalid string position
string too long
Validation failed 'handle'
onecoreuap\ds\security\rm\client\src\base\Handle\IpcHandle.h
Validation failed 'pHandle'
msipc
vector<T> too long
msipc
Getting connection info, extranet: %ws, intranet : %ws
Microsoft::InformationProtection::LicensePropertyAllocator::GetProperty
onecoreuap\ds\security\rm\client\src\msipc\api\licensepropertyallocator.cpp
Connection info is NULL
Current owner: %ws
os::IpcOsStringCchCopy(const_cast<LPWSTR>(pOut->wszID), cchID, pOwner->wszID)
onecoreuap\ds\security\rm\client\src\msipc\api\licensepropertyallocator.cpp
IPC_LI_VALIDITY_TIME: %hs
IPC_LI_INTERVAL_TIME: %u days
License is not created from official template. wszId will be NULL
Issuer name: %ws
os::IpcOsStringCchLength(wszIssuerName, IPC_OS_MAX_CCH, &cchIssuerName)
Template name: %ws
os::IpcOsStringCchLength(wszName, IPC_OS_MAX_CCH, &cchName)
Template description: %ws
os::IpcOsStringCchLength(wszDescription, IPC_OS_MAX_CCH, &cchDescription)
Template id: %ws
os::IpcOsStringCchLength(wszTemplateId, IPC_OS_MAX_CCH, &cchTemplateId)
os::IpcOsStringCchCopy(const_cast<PWSTR>(pOut->wszName), cchName, wszName)
os::IpcOsStringCchCopy(const_cast<PWSTR>(pOut->wszDescription), cchDescription, wszDescription)
os::IpcOsStringCchCopy(const_cast<PWSTR>(pOut->wszIssuerDisplayName), cchIssuerName, wszIssuerName)
os::IpcOsStringCchCopy(const_cast<PWSTR>(pOut->wszID), cchTemplateId, wszTemplateId)
Template is from template: %s
Template is from RMSO: %s
os::IpcOsStringCchCopy(wszOut, cchReferralInfoUrl, wstrReferralInfoUrl.c_str())
Referal info URL: %ws
Licesne usees deprecated algorithm: %s
License uses CBC512 no padding: %s 
The prefered encryption package is: %ud 
License handle doesn't have contentId set
HRESULT_FROM_WIN32(ERROR_NO_DATA)
os::IpcOsStringCchCopy(wszOut, cchContentId, wstrContentId.c_str())
License handle doesn't have IssuedTimeSet set
IssuedTimeSet : %hs
Signer Id : %ws, Name = %ws
%s#/summary/%s/%s
License handle doesn't have owner set
os::IpcOsStringCchPrintf( wszDocTrackingUrl, ARRAYSIZE(wszDocTrackingUrl), format, g_wszTrackingPortalBaseUrl, wstrContentId.c_str(), pOwner->wszID)
DocTrackingUrl requested for non RMSO
IsFromRmso
os::IpcOsStringCchCopy(wszOut, trackingUrlsize, wszDocTrackingUrl)
 DocTrackingUrl info URL: %ws
ipp::IppUtil::AreIpcBuffersEqual(pvLicense, pLicense)
using cached parsed license
Microsoft::InformationProtection::LicensePropertyAllocator::GetParsedLicense
parsing new license
spLicense->IsValid()
https://track.azurerms.com/
ProactiveEULRenewalDisabled
Microsoft.DigitalRightsManagement.Licensing.UserIsExcludedException
TemplateUpdateFrequency
CERT-Machine
CERT-Machine-2048
mailto:
Value
IdentityCacheSize
ServiceDiscovery
Windows
QueryString
wresult
CertificationService
http://microsoft.com/DRM/LicensingService
false
https://licensing.drm.microsoft.com/licensing
TMPV2-
\Template
RepublishOnly
soap:Body
ServiceLocations
RequiresRedirect
GetClientLicensorCertResponse
1.0.0.0
SkipServerInfo
AcquirePreLicense
AcquireLicenseParams
string
ServerService
NoValidation
xsd:string
\Microsoft\WINMSIPC\Server\
<soap:Header>
</soap:Body>
Microsoft.DigitalRightsManagement.PublishingDisabledException
RMS Online
SOFTWARE\Microsoft\WINMSIPC\Server
ServerFeatureInfo
</soap:Envelope>
Verified
SOFTWARE\Microsoft\WINMSIPC\ServiceLocation\EnterpriseCertification
AcquireDelegationLicenseResponse
https://discover.aadrm.com/_wmcs/certification
ServiceDiscoveryForUser
Identities
AcquireLicenseForIssuanceLicenseV2
GetLicensorCertificate
Microsoft.DigitalRightsManagement.Licensing.BlackBoxIsInvalidException
MSOSPN
Certificate
AcquireLicense
IssuanceLicV2Enabled
Microsoft.DigitalRightsManagement.Licensing.InvalidPersonaCertTimeException
/server.asmx
xmlns
ServiceDiscoveryService
/Certification.asmx
Global\
ServiceLocation
Header
AcquirePreLicenseResponse
RMSOServerVerification
</CERTIFICATECHAIN>
faultcode
/ServiceLocator.asmx
Feature
AcquireTemplates
CertificationService
LicensingService
LicenseeCerts
AcquireDelegationLicense
\Microsoft\WINMSIPC\
requestParameters
 xsi:nil="1"/>
ServerInfo
Quota
Referral-Info
Message
Templates\
soapenc:arrayType
<?xml version="1.0"
IssuanceLicense
IntranetLicenseURL
external
Envelope
OAUTH2
Microsoft.DigitalRightsManagement.Licensing.NoRightsForRequestedPrincipalException
ServiceLocationResponse
Certification
<CERTIFICATECHAIN>
</CERTIFICATE>
<CERTIFICATE>
<soap:Body>
string
Microsoft.DigitalRightsManagement.Utilities.ADEntrySearchFailedException
LicensingInternalService
http://microsoft.com/DRM/LicensingService
encrypted-rights-data
GetClientLicensorAndUserCertificatesParams
Microsoft.DigitalRightsManagement.Licensing.InvalidPersonaCertSignatureException
serviceDiscoveryRequest
AcquireLicenseForIssuanceLicenseV2Params
http://microsoft.com/DRM/PublishingService
Microsoft.DigitalRightsManagement.Core.VerifyEmailAddressFailedException
MachineCertificateChain
Microsoft.DigitalRightsManagement.Activation.EmailAddressNotVerified
Content-Type: application/x-www-form-urlencoded
AcquirePreLicenseParams
AcquireDelegationLicense
string
soap:Fault
SOFTWARE\Microsoft\WINMSIPC
SOFTWARE\Microsoft\WINMSIPC\Servicelocation\LicensingRedirection\
XmlElement
CorrelationId
Template
Software\Microsoft\WINMSIPC
/ServiceDiscovery.asmx
Software\Microsoft\MSOIdentityCRL
GetClientLicensorAndUserCertificatesResponse
AcquireTemplateInformation
SOFTWARE\Microsoft\WINMSIPC\ServiceLocation\RMSOnlineGlobalCertification
Licensing
ServerInfoRequest
/servicediscovery/
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/">
CertificateChain
TemplateDistributionService
Microsoft.DigitalRightsManagement.Certification.MismatchedIdentificationEmailAddressException
FederationHomeRealm
ServiceDiscoveryUrl
ServiceDiscoveryChecked
TrustIntEKU
UserCertificateResponse
LicensingService
detail
SOFTWARE\Microsoft\WINMSIPC\ServiceLocation\EnterprisePublishing
LicensorCertificateResponse
http://microsoft.com/DRM/TemplateDistributionService
faultstring
DelegatedEmailAddress
IssuanceLicenseV2
/licensing/
APPSPECIFIC
Content-Type: application/x-www-form-urlencoded
Accept-Encoding: gzip, deflate
Certify
Microsoft.DigitalRightsManagement.Licensing.IssuanceLicenseIsNotWithinValidTimeRangeException
ServerType
DelegatedIdentities
Hierarchy
AuthType
SOFTWARE\Microsoft\WINMSIPC\ServiceLocation\TrustTestRoot
Licenses
UDRMPublishingSignRL_%lu%lu
UnManagedTemplates\
GetClientLicensorCert
SOFTWARE\Microsoft\WINMSIPC\ServiceLocation\CloudPublishing
GetServerInfo
LastUpdatedTime
LICENSEMETADATA
<?xml
DnsRedirectionDisabled
CertificationInternalService
VersionInfo
MaxLengthSignedOfflineIssuanceLicense
Content-Type: text/xml; charset=utf-8
SOAPAction: "http://microsoft.com/DRM/%s/%s"
AcquireLicenseResponse
/License.asmx
/templatedistribution.asmx
http://microsoft.com/DRM/ServiceDiscoveryService
MSOSSP
SOFTWARE\Microsoft\WINMSIPC
PublishingService
xsi:nil
soap:Envelope
MSOIDCRLVersion
RequestParams
</soap:Header>
VersionData
hidden
-GIC-
SOFTWARE\Microsoft\WINMSIPC
DisablePassportCertification
EnableBrowser
AcquireDelegationLicenseParams
LicenseeIdentities
Results
MinimumVersion
Microsoft.DigitalRightsManagement.Cryptography.UnsupportedCryptographicSetException
http://microsoft.com/DRM/ServerService
Microsoft.DigitalRightsManagement.Licensing.UnexpectedPersonaCertException
http://microsoft.com/DRM/LicensingService
FindServiceLocationsForUser
\Identities
JCLC-
http://microsoft.com/DRM/CertificationService
EndUserLicenseService
ServiceDiscovery
ServerInfo
6.0.0.0
 soapenc:arrayType="
/PreLicense.asmx
Trace
Certificate
/publish.asmx
Microsoft.DigitalRightsManagement.Licensing.DrmacIsExcludedException
<?xml version="1.0" encoding="utf-8"?>
TemplateUpdateFrequencyInSeconds
http://microsoft.com/DRM/ServiceLocatorService
SOFTWARE\Microsoft\WINMSIPC
RequiresBrowser
Fault
PersonaCertificates
GetClientLicensorCertParams
MaximumVersion
 xmlns="
ExtranetLicenseURL
Software\Microsoft\WINMSIPC\TrustedServers
CertificateChain
ServerType
System.UnauthorizedAccessException
ServiceLocationRequest
SLCPublicKey
guids
Persistent
/ServerCertification.asmx
AllowOnlyTrustedServers
LANGID=
/certification/
AuthTypes
ServiceLocatorService
Federation
ServiceNames
Microsoft.DigitalRightsManagement.Licensing.UntrustedPersonaCertException
NOLICCACHE
requestParams
soap:Header
Microsoft.DigitalRightsManagement.Core.VerifyMachineCertificateChainFailedException
GetClientLicensorAndUserCertificates
Software\Microsoft\WINMSIPC
TemplatesVersion
MSOSSO
SOFTWARE\Microsoft\WINMSIPC\LicensingRedirection\
1.1.0.0
CertificateChain
Content-Type: text/xml; charset=utf-8
Accept-Encoding: gzip, deflate
SOAPAction: "http://microsoft.com/DRM/%s/%s"
requests
AcquirePreLicense
TrustTestSSLRoot
SOFTWARE\Microsoft\WINMSIPC\Federation
GetClientLicensorAndUserCertificatesEnabled
Version
AcquireLicenseForIssuanceLicenseV2Response
PersonaCerts
 href="
0 == psz || SUCCEEDED(StringCchLengthA(psz, cchMaxLength, 0))
onecoreuap\ds\security\rm\client\src\base\FsCommon\str_t.h
0 != cch
0 != MultiByteToWideChar(CP_ACP, 0, psz, -1, m_wsz, cch)
IpcOsInitializeEventTracing: EventRegister failed with error code: %lu.
IpcOsUninitializeEventTracing: EventUnregister failed with error code: %lu.
IpcOsEventLevelEnabled: Event tracing has not been initialized or initialization failed.
IpcOsEventLevelEnabled: an invalid event level provided, returning false...
IpcOsEventWrite: Event tracing has not been initialized or initialization failed.
IpcOsEventWrite: an invalid event level provided, no event is generated.
IpcOsEventWrite: Event tracing failed due to invalid event data.
IpcOsEventWrite: EventWrite failed with error code: %lu.
IpcOsEventWrite: SafeInt Exception
IpcOsEventWrite: an exception caught during writing an event.
onecoreuap\ds\security\rm\client\src\oswindows\core\ipcossync.cpp
onecoreuap\ds\security\rm\client\src\oswindows\core\ipcosmisc.cpp
%d.%d.%d.%d
pGetLanguagesFunc != nullptr
ppdwLcid != nullptr
*ppdwLcid == nullptr
cdwLcid != nullptr
os::IpcOsStringCchLength(&wszLangNames[cOffset], IPC_OS_MAX_CCH, &stDataSize)
*ppwszErrorText == nullptr
hModule != nullptr
hResource != nullptr
HRESULT_FROM_WIN32(GetLastError())
pFilePath
WindowsPortUtil::GetFileNameFromModulePath(wcszModule, wcszFileName, &wszPath)
+[msipc]:IpcOsVerifyCertMicrosoftRooted
-[msipc]:IpcOsVerifyCertMicrosoftRooted hr=0x%x
+[msipc]:MsftRootBuiltinVerification
-[msipc]:MsftRootBuiltinVerification hr=0x%x
+[msipc]:MsftRootCustomVerification
SHA256
-[msipc]:MsftRootCustomVerification hr=0x%x
Windows
SameAsOSVersion
BCryptOpenAlgorithmProvider( &hAlgHandle, BCRYPT_SHA256_ALGORITHM, NULL, BCRYPT_ALG_HANDLE_HMAC_FLAG)
HashDigestLength
BCryptGetProperty( hAlgHandle, BCRYPT_HASH_LENGTH, (PBYTE)&cbHash, sizeof(cbHash), &cbResult, 0)
BCryptCreateHash( hAlgHandle, &hHashHandle, NULL, 0, const_cast<BYTE *>(pbKey), cbKey, 0)
BCryptHashData( hHashHandle, const_cast<BYTE *>(pbData), cbData, 0)
BCryptFinishHash( hHashHandle, pbLocalHash, cbHash, 0)
winmsipc.dll
\\?\UNC\
bad locale name
ios_base::badbit set
ios_base::failbit set
ios_base::eofbit set
invalid stoi argument
stoi argument out of range
Microsoft::FoundationServices::Common::Registry::LogRegistryOperation
onecoreuap\ds\security\rm\client\src\base\FsCommon\registry.h
REGISTRY: %hs [%hs\%ws\%ws] %ws=%ws
Missing
REGISTRY: %hs - %hs [%hs\%ws\%ws] %ws.
onecoreuap\ds\security\rm\client\src\base\FsCommon\registry.h
IncorrectBufferSizeException
DiagnosticTenantId
bd664257d8ba4f5683d748011eb67a1b-7336a5d4-f348-4010-ac80-e0616834cf8e-7517
IDispatch error #%d
Unknown error 0x%0lX
onecoreuap\ds\security\rm\client\src\base\util\ipputil.cpp
pTemplateInfo
pTemplateInfo->lcid != 0
os::IpcOsStringCchLength(pTemplateInfo->wszName, IPC_OS_MAX_CCH, 0)
os::IpcOsStringCchLength(pTemplateInfo->wszDescription, IPC_OS_MAX_CCH, 0)
cRights > 0
rgwszRights
os::IpcOsStringCchLength(rgwszRights[i], IPC_OS_MAX_CCH, 0)
pvBuffer
pvBuffer->pvBuffer
pvBuffer->cbBuffer != 0
pUserList->cUsers > 0
IppUser::Check(&(pUserList->aUser[i]))
ipp::IppUtil::CheckCipherMode(nCipherMode)
ipp::IppUtil::CheckSymmetricAlgorithmAndKeySize(wszAlgorithm, cbKey)
pNameValue
pNameValue->wszName
pNameValue->wszValue
os::IpcOsStringCchLength(pNameValue->wszName, IPC_OS_MAX_CCH, 0)
os::IpcOsStringCchLength(pNameValue->wszValue, IPC_OS_MAX_CCH, 0)
sizeof(IPC_PROMPT_CTX) == pContext->cbSize
!(pContext->dwFlags & (~dwValidFlags))
CheckIpcCredential(pContext->pcCredential)
pContext->pcCredential
pContext->pcCredential->dwType == IPC_CREDENTIAL_TYPE_OAUTH2
ipp::IppUtil::CheckForServerApiMode(ipp::IppSettings::GetInstance()->GetApiMode())
( pcCredential->dwType == IPC_CREDENTIAL_TYPE_X509 || pcCredential->dwType == IPC_CREDENTIAL_TYPE_SYMMETRIC_KEY || pcCredential->dwType == IPC_CREDENTIAL_TYPE_OAUTH2)
pcCredential->pcCertContext
!(nFlags & ~( IPC_SL_FLAG_REUSE_KEY | IPC_SL_FLAG_KEY_NO_PERSIST | IPC_SL_FLAG_KEY_NO_PERSIST_DISK | IPC_SL_FLAG_DEPRECATED_UNSIGNED_LICENSE_TEMPLATE | IPC_SL_FLAG_KEY_NO_PERSIST_LICENSE | IPC_SL_FLAG_ISSUANCE_LICENSE_V2 | IPCP_SL_FLAG_CHANGE_DISTRIBUTIONPOINT))
!(nFlags & ~(IPC_GK_FLAG_KEY_NO_PERSIST_DISK))
!wcscmp(wszAlgorithm, IPC_ALGORITHM_AES)
0 == cbKey || IPC_AES128_KEY_SIZE == cbKey || IPC_AES256_KEY_SIZE == cbKey
ipp::IppUtil::CheckStructVersion(pConnectionInfo->cbSize, sizeof(IPP_USER_FROM_CONNECTION_INFO))
0 == pConnectionInfo->pConnectionInfo || SUCCEEDED(ipp::ConnectionInfo::Check(pConnectionInfo->pConnectionInfo ))
pLicenseInfo
pLicenseInfo->pvLicense
pLicenseInfo->pvLicense->pvBuffer
cchString < STRSAFE_MAX_CCH
pTemplateInfo->pvTemplate
pTemplateInfo->pvTemplate->pvBuffer
!(dwFlags & (~ GetValidIppGetUserFlags()))
unknown type for dwNotificationType
unknown type for dwNotificationPreference
!(dwFlags & ~(IPC_GTL_FLAGS))
!(dwFlags & ~(IPC_GTIL_FLAG_DEFAULT_SERVER_ONLY | IPC_GTIL_FLAG_USE_PROVIDED_LICENSING_URL))
cbBuffer > sizeof(s_pbUTF8Preamble)
pcbPreamble
*(reinterpret_cast<const wchar_t*>(pvBuffer)) < 0x80
ppwszUTF16
cchUTF8 < STRSAFE_MAX_CCH
0 != cchUTF16
cchUTF16 < STRSAFE_MAX_CCH
pstrUTF16
0 != cchUTF8
(SafeInt<size_t>(pvBuffer->cbBuffer) % sizeof(WCHAR) == 0)
Microsoft::InformationProtection::IppUtil::HandleException
onecoreuap\ds\security\rm\client\src\base\util\ipputil.cpp
SafeIntException
Unknown COM error
Out of memory
Unknown C++ error
Error of unknown type
%ws: %ws
Microsoft::InformationProtection::IppUtil::HandlePublicAPIException
++++++++ WARNING: %ws: %ws ++++++++
++++++++ ERROR: %ws: %ws ++++++++
++++++++ WARNING: %ws ++++++++
++++++++ ERROR: %ws ++++++++
++++++++ ERROR: SafeIntException: arithmetic overflow. ++++++++
++++++++ ERROR: Com error: %ws ++++++++
++++++++ ERROR: Out of memory ++++++++
++++++++ ERROR: caught C++ exception: %ws ++++++++
++++++++ ERROR: caught unnknown C++ error ++++++++
++++++++ ERROR: Error of unknown type ++++++++
Error HRESULT 0x%x mapped to 0x%x
Microsoft::InformationProtection::IppUtil::MapDRMErrorToIPCError
os::IpcOsStringCchLength(wszSrc, IPC_OS_MAX_CCH, &lenSrc)
os::IpcOsStringCbCopy(wszDest, cbDest, wszSrc)
cbBuffer < STRSAFE_MAX_CCH
0 == cbBuffer%sizeof(wchar_t)
pRegistry
ppwszValue
HRESULT_FROM_WIN32(status)
ppwszDest
os::IpcOsStringCchLength(wszSrc, IPC_OS_MAX_CCH, &uSrcLength)
os::IpcOsStringCchCopy(localStr, uSrcLength, wszSrc)
os::IpcOsGetCurrentUserId(&wszUserID)
os::IpcOsStringCchLength(wszUserID, IPC_OS_MAX_CCH, &cchUserID)
++++++++ WARNING: Couldn't find name and description for the user and system preferred locales. Falling back to the first name and description. ++++++++
Microsoft::InformationProtection::IppUtil::GetNameAndDescriptionFallback
os::IpcOsStringCchCopy(*pwszOut, *pcchRemaining, wszIn.c_str())
copyStringToList - Not enough memory allocated.
Microsoft::InformationProtection::IppUtil::copyStringToList
The URL "%ws" does not point to a trusted server
Microsoft::InformationProtection::IppUtil::IsServerURLTrusted
os::IpcOsCoCreateGuid(&guid)
(0 != uiGUIDLength)
Exception while building user agent string: hr == 0x%x. Setting it to "MSIPC".
MSIPC
os::IpcOsGetFileVersionInfo(wstrAppFilePath.c_str(), dwHandle, SafeInt<DWORD>(vbVersionInfo.size()), &vbVersionInfo[0])
os::IpcOsVerQueryValue(&vbVersionInfo[0], wszSubBlock, (LPVOID*) &pFileInfo, (PUINT)&nBufLen)
0 != dwAppFilePathLength
wstring::npos != nLastSlash
os::IpcOsStringCchPrintf(wszVersion, MAX_VERSION_LENGTH, L"%d.%d.%d.%d", dwMajor, dwMinor, dwBuild, dwRevision)
%d.%d.%d
os::IpcOsStringCchPrintf(wszVersion, MAX_VERSION_LENGTH, L"%d.%d.%d", dwMajor, dwMinor, dwBuild)
amd64
unknown
CurrentMajorVersionNumber
CurrentMinorVersionNumber
CurrentVersion
CurrentBuildNumber
Software\Microsoft\Windows NT\CurrentVersion
MSIPC;version=%ws;AppName=%ws;AppVersion=%ws;AppArch=%ws;PID=%u;OSName=%ws;OSVersion=%ws;OSArch=%ws
os::IpcOsStringCchPrintf( wszUserAgentString, MAX_USER_AGENT_STRING, wszUserAgentStringFormat, os::IpcOsGetBuildVersion(), wstrAppName.c_str(), wstrAppVersion.c_str(), wstrAppArch.c_str(), os::IpcOsGetCurrentProcessId(), os::IpcOsGetOsName(), wstrOsVersion.c_str(), wstrOsArch.c_str())
************* System/App Info *************
* OS: Windows
* OS Version: %ws
* OS Architecture: %ws
* Client Hierarchy: %d
* AppName: %ws
* AppVersion: %ws
* PID: %u
* DateTime (UTC): %hs
******************************************
os::IpcOsStringCchPrintf( s_wszSystemInformationString, ARRAYSIZE(s_wszSystemInformationString), wszSystemInfoFormat, GetOsVersion().c_str(), GetArchitecture(true).c_str(), CUdmgrldr().GetClientHierarchy(), appName.c_str(), appVersion.c_str(), os::IpcOsGetCurrentProcessId(), GetLogableStdStringA(stNow).c_str())
IppUtil::IsPassportCertificationEnabled: hr == 0x%x
False
Could not format a systemtime
StringCchPrintfW( &dateTimeString[0], dateTimeString.size(), wszDateTimeFormat, st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute)
Could not format a filetime
Could not format a time range
os::IpcOsGetErrorMessageText( hrError, 0, g_hMSIPPHandle, const_cast<PCWSTR*>(&wszErrorMessage))
Microsoft::InformationProtection::IppUtil::Base64Encode
wszInput
cbData
CBase64::UDBinToBase64W(cbSize, cbData, &cbOutput, NULL)
CBase64::UDBinToBase64W(cbSize, cbData, &cbOutput, &wstrOutput[0])
CBase64::UDBase64ToBinW(cbInputData, wstrData.c_str(), &cbData, NULL)
CBase64::UDBase64ToBinW(cbInputData, wstrData.c_str(), &cbData, &vbDecodedData[0])
NULL != pv
Microsoft::InformationProtection::IppUtil::WideCharToMultiByte
0 != cNeededLen
cNeededLen == cWrittenLen
GXGetLastHR()
D:(A;OICI;GA;;;BA)(A;OICI;GA;;;SY)(A;OICI;GA;;;%s)
phProv
CryptAcquireContext(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_NEWKEYSET)
CryptImportKey(hProv, (BYTE*)&pbKeyBlob[0], SafeInt<DWORD>(pbKeyBlob.size()), 0, 0, &hKey)
CryptSetKeyParam(hKey, KP_MODE, (BYTE*)&dwMode, 0)
CryptEncrypt(hKey, 0, FALSE, 0, (BYTE*)&encData[0], &dwEncDataLen, cbRequiredBytes)
CryptDecrypt(hKey, 0, FALSE, 0, (BYTE*)&decData[0], &dwDecDataLen)
CryptAcquireContext(&hProv, NULL, NULL, PROV_RSA_FULL, CRYPT_NEWKEYSET)
CryptImportKey(hProv, pbKey, SafeInt<DWORD>(cbKey), 0, 0, &hKey)
CryptEncrypt(hKey, 0, FALSE, dwEncryptFlags, (BYTE*)&encData[0], &dwData, cbRequiredBytes)
wszLic
StringCchLengthW(wszLic, STRSAFE_MAX_CCH, &licLen)
Version component is invalid : %ws
Microsoft::InformationProtection::IppUtil::WstringToInteger
onecoreuap\ds\security\rm\client\src\base\util\auto_localfree.h
bad cast
IppUser::Check(&pAce->User)
0 == pszValueName || SUCCEEDED(os::IpcOsStringCchLength(pszValueName, CCH_MAX_REG_VALUE_NAME, 0))
pcchOut
nTypeRead == nType && *pcchOut > 0 && *pcchOut % sizeof (T) == 0
************* Build Info *****************
* WinMSIPC Version: SameAsOsVersion 
* Official Build
* Flavor: Retail
* Architecture: x64
******************************************
%04d-%02d-%02dT%02d:%02d
msipc
%02d/%02d/%02d %02d:%02d:%02d.%03d
%hs - %hs
?456789:;<=
 !"#$%&'()*+,-./0123
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=
HresultException
Tried to create an Exception with a non-failing error code - hr=0x%x. Converting it to E_FAIL.
) [hr = 0x
L'\0' != *rootDirectory
StringCchPrintfW( &descriptor[0], descriptor.size(), wszFormat, userId.c_str())
onecoreuap\ds\security\rm\client\src\base\storepath\storepath.cpp
0 == wcsncmp(uncPathCheck, L"\\\\", 2)
wstring::npos != i
L'\\' != uncPathCheck[2] && L'\0' != uncPathCheck[2] && L'?' != uncPathCheck[2]
::CreateDirectory(path.c_str(), pSecurityAttributes)
DoesDirectoryExist(path)
StringCchLength(wszStoreName, STRSAFE_MAX_CCH, &cchStoreName)
ConvertStringSecurityDescriptorToSecurityDescriptorW( wszSecurityDescriptor, SDDL_REVISION_1, &(pSecurityAttributes->lpSecurityDescriptor), NULL)
StringCchCopy( s_wszStoreNameBuffer, _countof(s_wszStoreNameBuffer), wszStoreName)
(0 < cchStoreName && cchStoreName <= s_cchMaxStoreName)
Logging failed
Formatting log message failed with hr = 0x%x
Logging failed with hr = 0x%x
Microsoft::InformationProtection::CIpcLogger::Release
++++++++ WARNING the ref count of logger instance is 0 +++++++++
onecoreuap\ds\security\rm\client\src\base\logging\ipclogger.cpp
XYTOX
msipc
{{[%I64u][%s]:[%s]:[%d]:[%04d-%02d-%02d %02d:%02d:%02d.%03d]: %s:%s:%d
deque<T> too long
{{========================================= ERROR LOGS BEGIN =========================================================}}
{{========================================= ERROR LOGS END ==========================================================}}
EtwEnabled
MaxFiles
LogPath
MaxLinesInFile
Trace
Level
MaxLinesInMemory
DebugOutputEnabled
MemoryTracingEnabled
.ipclog
HRESULT_FROM_WIN32(nError)
.lock
StringCchPrintf(&path[0], path.size(), wszPathFormat, basePath.c_str(), iSlot, wszSuffix)
onecoreuap\ds\security\rm\client\src\base\logging\LogFileSlot.h
onecoreuap\ds\security\rm\client\src\base\logging\ipcfilelogchannel.cpp
INVALID_HANDLE_VALUE != m_hLogFile
[msipc] All the logging slots are taken.
%ws\LogFile_%d%ws
onecoreuap\ds\security\rm\client\src\base\logging\circularfilelogger.cpp
SetEndOfFile(m_hFile)
StringCbLengthA(szMessage, STRSAFE_MAX_CCH, &cbSize)
INVALID_SET_FILE_POINTER != SetFilePointer(m_hFile, 0, NULL, SEEK_SET)
WriteFile(m_hFile, szMessage, static_cast<DWORD>(cbSize), &dwWritten, NULL)
0 == pszName || SUCCEEDED(cmn::FsStringCchLength(pszName, MAX_PATH, 0))
ReaderWriterLock::LockRead: Error in %lu ResetEvent.
ReaderWriterLock::UnlockRead: Error in %lu SetEvent.
ReaderWriterLock::LockWrite: Error in %lu ResetEvent.
onecoreuap\ds\security\rm\client\src\base\fscommon\auto_pointer.h
ReaderWriterLock::UnlockWrite: Error in %lu SetEvent.
onecoreuap\ds\security\rm\client\src\base\fscommon\auto_handle.h
onecoreuap\ds\security\rm\client\src\base\fscommon\ccachemruqueue.cpp
list<T> too long
REGISTRY: %hs [%hs\%ws\%ws] %ws=dword:%u
onecoreuap\ds\security\rm\client\src\base\fscommon\Registry.h
onecoreuap\ds\security\rm\client\src\base\fscommon\registry.cpp
os::IpcOsStringCchLength(pszSubkey, IPC_OS_MAX_CCH, 0)
Create
os::IpcOsRegCreateKeyEx( hRoot, pszSubkey, 0, 0, 0, KEY_READ | KEY_WRITE, const_cast<SECURITY_ATTRIBUTES*>(pSa), &m_hKey, &dwDisposition)
os::IpcOsRegDeleteKey(m_hKey, pszKey)
os::IpcOsStringCchLength(pszKey, CCH_MAX_REG_KEY_NAME, 0)
os::IpcOsStringCchLength(pszValue, CCH_MAX_REG_VALUE_NAME, 0)
Delete
Software\Classes\Local Settings\
os::IpcOsRegDeleteValue(m_hKey, pszValue)
Microsoft::FoundationServices::Common::Registry::Open
REGISTRY - Attempted searching for RegKey with %ws           opening a reg key using HKEY_CURRENT_USER_LOCAL_SETTING failed.            Falling back to HKEY_CURRENT_USER.
REGISTRY - searched with %ws
onecoreuap\ds\security\rm\client\src\base\fscommon\registry.cpp
pnValue
os::IpcOsRegSetValueEx( m_hKey, pszValueName, 0, REG_DWORD, (PBYTE)&nValue, sizeof (nValue))
REG_DWORD == nType && sizeof (DWORD) == cbSize
HKEY_LOCAL_MACHINE
Write
HKEY_CURRENT_USER_LOCAL_SETTINGS
HKEY_CURRENT_USER
UNKNOWN_REGISTRY_ROOT
HKEY_CLASSES_ROOT
REGISTRY: %hs [%hs\%ws\%ws] %ws
msipc
onecoreuap\ds\security\rm\client\src\base\fscommon\mutex.cpp
Mutex::Unlock - Error in ReleaseMutex.  rc = %lu.
Mutex::Lock - Error in WaitForSingleObject.  rc = %lu.
sealed-key-v2
sealed-key
os::IpcOsCryptGenRandom(hProv, cFill, pbFill)
onecoreuap\ds\security\rm\client\src\msipc\cryptutil\rmsudcapi.cpp
os::IpcOsCryptGetHashParam(hHash, HP_HASHSIZE, (BYTE*)pcbDigest, &dwDataLen, 0)
os::IpcOsCryptCreateHash(hProv, uType, NULL, 0, &hHash)
os::IpcOsCryptGetHashParam(hHash, HP_HASHVAL, pbDigest, (DWORD*)pcbDigest, 0)
os::IpcOsCryptHashData(hHash, pbContent, cbContent, 0)
hr = CBase64::UDBase64ToBinW(SafeInt<UINT>(cchBase64Hash), wszBase64Hash, &cbDecoded, NULL)
hr=os::IpcOsStringCchLength(wszBase64Hash, IPC_OS_MAX_CCH, &cchBase64Hash)
os::IpcOsCryptCreateHash(hProv, uAlgID, NULL, 0, &hHash)
onecoreuap\ds\security\rm\client\src\msipc\cryptutil\udcapirsa.cpp
os::IpcOsCryptSetHashParam(hHash, HP_HASHVAL, pbDigest, 0)
zdq^`
Vt\pt
Microsoft Enhanced RSA and AES Cryptographic Provider
CryptImportKey(hProv, pbSimpleBlob, cbSimpleBlob, hE1K, 0, &hKey)
onecoreuap\ds\security\rm\client\src\msipc\cryptutil\udcapiblob.cpp
*ppbCapiBlob = new (std::nothrow) BYTE[*pcbCapiBlob]
CryptImportKey(hProv, (PBYTE)&deskey, sizeof(deskey), NULL, 0, &hKey)
Microsoft Online Services Sign-in Assistant version is %ws
[msipc]:Disabled SSPI auth for RMSO
onecoreuap\ds\security\rm\client\src\msipc\http\soaprequest.cpp
IsMOSSAInstalled
onecoreuap\ds\security\rm\client\src\msipc\http\soaprequest.cpp
[msipc]:IsMOSSAInstalled MOSSA Check hr = 0x%x
Microsoft Online Services Sign-in Assistant is not Installed
Microsoft Online Services Sign-in Assistant is Installed
[msipc]:IsMOSSAInstalled hr = 0x%x
CDRMSoapRequest::PutResponse
+++++++ WARNING Got a non-XML response from the server ++++++
drmXml.GetNodeType(&nodeType)
tagchk
drmXml.FirstChild(&tagchk)
+++++++ WARNING Got a non-SOAP response from the server ++++++
drmXml.GetNodeValue(&wszNodeValue)
ExtractParameter(&drmXml, pNewParameter)
drmXml.Parent(&tagchk)
drmXml.GetXMLFragment(FALSE, &m_wszFaultCode)
drmXml.GetNodeValue(&m_wszMethodName)
drmXml.GetXMLFragment(FALSE, &m_wszFaultString)
CXmlenc::UnescapeXML(m_wszFaultCode)
+++++++ Warning server fault: ++++++
      FaultString: %ws 
      FaultCode: %ws
CXmlenc::UnescapeXML(m_wszFaultString)
drmXml.Child(g_wszSOAP_FAULT_SERVERINFO, 0, &tagchk)
drmXml.Child(g_wszSOAP_FAULT_DETAIL, 0, &tagchk)
+++++++ Warning server fault CorrelationId=%ws: ++++++
CXmlenc::UnescapeXML(m_wszFaultCorrelationId)
drmXml.GetXMLFragment(FALSE, &m_wszExceptionMessage)
drmXml.Child(g_wszSOAP_FAULT_EXCEPTION_MESSAGE, 0, &tagchk)
+++++++++ WARNING Parsing the server response failed with +++++++++
       hr=0x%x
       response=%ws
CXmlenc::UnescapeXML(m_wszExceptionMessage)
CDRMSoapRequest::TryToGetServerInfo
+++++++++ WARNING Can't use Azure RMS token with an on-prem Server. ++++++++++
IPC_API_MODE_SERVER == apiMode || connectivity.isConnected || connectivity.isConnectedToInternet
HRESULT_FROM_WIN32(ERROR_NOT_SUPPORTED)
CDRMSoapRequest::DispatchRequest
[msipc]:CDRMSoapRequest::DispatchRequest Using ServerInfo
[msipc]:CDRMSoapRequest::DispatchRequest Using Original URL. Ignoring ServerInfo.
IPC_API_MODE_SERVER == apiMode || (ipp::IServerInfo::SERVER_TYPE::eOnlineServer != eServerType) || connectivity.isConnectedToInternet
+++++++++ WARNING Can't use this token with Azure RMS +++++++++
[msipc]:CDRMSoapRequest::DispatchRequest hr: 0x%x
This is Azure RMS and we have a token.
CDRMSoapRequest::DispatchRequestUseServerInfo
This is Azure RMS and we don't have a token, try using adal and get a token from a social idp
DispatchRequestLocal(pToken->GetTokenType())
DispatchRequestLocal(g_wszAT_MSOSSP)
This is Azure RMS and we don't have a token, try using the Sign-in Assistant.
+++++++++ WARNING Sign-in Assistant is not installed +++++++++
+++++++++ WARNING This is Azure RMS and Office is calling us without a Token. +++++++++
       Office should retry with a token if an appropriate Identity is signed-in into Office
This is an on-prem server. Use the original url.
IPCERROR_SIA_NOT_INSTALLED
CDRMSoapRequest::DispatchRequestLocal
+++++++++ AuthType "%ws" is not supported by server. Refreshing ServerInfo +++++++++
+++++++++ ERROR After refreshing ServerInfo AuthType: %ws is still not supported by server. This is an invalid token. ++++++++++
--------- Refreshing ServerInfo done ---------
---------- Soap call done hr = 0x%x ----------
++++++++++ Soap call using: +++++++++
       AuthType: %ws
       Url: %ws
       RequerRedirect: %ws
       RequerBrowser: %ws
[msipc]:CDRMSoapRequest::DispatchRequestLocal hr: %x
msipc
%I64u
[msipc]:InitMsipcExt Failed hr = 0x%x
Microsoft::InformationProtection::OperatingSystem::IpcOsGetFilePathFromMsipcInstallLocation (g_wszRedirectionUrlFileName, &ipcosPath)
MsipcHostNameRedirection.dat
[msipc]:ReadHostNameRedirectionUrlsFromFile Trying to load file %ws
onecoreuap\ds\security\rm\client\src\msipc\http\drmchttp.cpp
[msipc]:ReadHostNameRedirectionUrlsFromFile File not found.
[msipc]:ReadHostNameRedirectionUrlsFromFile %ws -> %ws
%ws %ws
[msdrm]: IsResponseFromStartingUrl: Found final page: startUrl %S
[msdrm]: AtlEscapeUrl failed
[msdrm]: IsResponseFromStartingUrl: responseUrl %S
+[msdrm]:GetDataFromResponse 
wresult
[msdrm]: InCorrect No. of Forms found in the message: %d
[msdrm]: Incorrect form Action
[msdrm]: Incorrect form method: %ws
[msdrm]: Param Value = %ws
[msdrm]: Param Name = %ws
issuedtoken
[msdrm]: Ignoring un-known parameter type: %ws
-[msdrm]:GetDataFromResponse: All params of interest NOT found
-[msdrm]:GetDataFromResponse: All params of interest (%d) found
Error message 401.3
-[msdrm]:GetDataFromResponse 0x%x
SOFTWARE\Microsoft\WINMSIPC\HostNameRedirection
/_wmcs
pcRedirectorUrlLength
pwszOrgUrl
HostNameRedirection detected: redirecting %ws to %ws
os::IpcOsStringCchCopy(pwszRedirectorUrl, *pcRedirectorUrlLength, wstrNewUrl.c_str())
onecoreuap\ds\security\rm\client\src\msipc\http\drmchttp.cpp
CHttpBase::SetServerInfo
+[msdrm]:CHttpBase::HandlePostRedirects
No HostNameRedirection hr=0x%x
[msdrm]:Posting token to %ws
[msdrm]:MultiByte Error
+++++++++ WARNING: Max number of retries reached. +++++++
[msdrm]: SendRequest hr = 0x%x, HTTPReturnCode=%d
[msdrm]:HandlePostRedirects: When loop ended, response was NOT from starting url.
CHttpBase::HandlePostRedirects
[msdrm]:HandlePostRedirects: m_wszLastRequestURI: %ws
[msdrm]:HandlePostRedirects: wszFirstURL: %ws
[msdrm]:CHttpBase::SendMsgToRMS. Entered function with %s
-[msdrm]:CHttpBase::HandlePostRedirects 0x%x
[msdrm]:CHttpBase::SendMsgToRMS: Returned successfully from GetResponse
[msdrm]:CHttpBase::SendMsgToRMS %s returned hr:%x,ErrorCode=%d when hitting Url=%S
[msdrm]:CHttpBase::SendMsgToRMS: Returned from HandlePostRedirects, hr: %x
[msdrm]:CHttpBase::SendMsgToRMS:  Got final message
+++++++++ ADFS flow silent with url %ws +++++++++
[msdrm]:CHttpBase::SendMsgToRMS. Exiting function with %s, hr : %x
silent flag
CHttpBase::DoGetOpertaion
[msdrm]:CHttpBase::DoGetOpertaion. If non-silent, will try other options
--------- ADFS flow silent done hr=0x%x, status=%d --------
original flags
+++++++++ ADFS flow non-silent with url %ws +++++++++
+++++++++ ADFS flow NEEDS UI ++++++++
--------- ADFS flow non-silent done hr=0x%x, status=%d --------
[msdrm]:CHttpBase::DispatchRequest returned hr:%x,ErrorCode=%d when hitting Url=%S with Post size=%d
ADFS flow: exiting. return hr:%x  HttpStatusErrorCode %d
CHttpBase::DispatchRequest
Decoding failed, try disabling the compression and retrying
     
[msdrm]:FAILED hr: %x
Initializing an HTTP request with WinHTTP url=%ws, UserAgent=%ws
Initializing an HTTP request with WinINET url=%ws, UserAgent=%ws
CHttpBase::InitializeHttpRequest
++++++++ ERROR: could not resolve the proxy: +++++++++
       Url: %ws
       hr: 0x%x
++++++++ ERROR: could not open an internet handle hr=0x%x +++++++++
token_type=acs
++++++++ ERROR: could not connect to the server: +++++++++
       Server: %ws
       hr: 0x%x
HTTP/1.0
++++++++ ERROR: could not disable redirects option on a request hr=0x%x ++++++++
++++++++ ERROR: could open a request: +++++++++
       Server: %ws
       ObjectPath: %ws
       hr: 0x%x
[msdrm]:FAILED AddRequestHeaders: Not able to disable Basic over non-ssl channel 0x%x
++++++++ ERROR: could not set the status callback +++++++++
       hr: 0x%x
Content-Length: 
CHttpBase::SendRequest
++++++++ ERROR No proxy settings are available hr = 0x%x +++++++++
+++++++++ Send Request Failed with status=%d +++++++
+++++++ Sending Request post size=%d +++++++
+++++++++ WARNING: Querying http status code failed. hr=0x%x +++++++
+++++++++ Receive Request Failed with status=%d +++++++
+++++++++ WARNING: Querying redirect location failed. hr=0x%x +++++++
------ Sending Request done. HTTP Status code = %d ------
+++++++ WARNING Can't get a valid token - tried %u times. +++++++
++++++++++ WARNING Got status access denied (not an authentication failure). ++++++++
------- Cred prompt returned: status = %d -------
+++++++ Cred prompt +++++++
+++++++ WARNING NEED UI. +++++++
[msipc]:CHttpBase::SendRequest InternetErrorDlg with status code 0x%x
+++++++ WARNING Can't authenticate with smart card. +++++++
+++++++ WARNING can't prompt for creds with WinHTTP. NEED UI. +++++++
+++++++ NEED UI. +++++++
+++++++ Cred prompt for smart card scenario +++++++
[msipc]:CHttpBase::SendRequest The WinHttpSendRequest() failed with %d, but there is another proxy setting to try with.
[msipc]:-CHttpBase::SendRequest Entered unhandled case (m_dwStatusCode= %d)
++++++++++ WARNING Could not connect. ++++++++
++++++++++ WARNING Setting next proxy settings failed with 0x%x. ++++++++
++++++++++ WARNING Got status forbidden, assuming couldn't authenticate with the client cert. ++++++++
++++++++++ WARNING Revocation check failed ++++++++
Getting the response failed with hr=0x%x
[msipp]:-CHttpBase::SendRequest hr = 0x%x
[msdrm]:Response Url=%S
CHttpBase::CheckResponseBodyForContent
CheckforMaxNumber(dwLength)
CHttpBase::GetResponse
CheckAdd(dwReceived, dwBytesRead)
CheckMultiply(dwReceived, 100)
CHttpBase::GetResponseBody
Getting the response body failed with hr=0x%x
https://
?whr=
CHttpBase::GetAlternateUrl
FederationHomeRealm registry key is detected:
       FederationHomeRealm value: %ws
       BrowserEnabled: %ws
We have the ADFS alternate url cached for this url:
       Original Url: %ws
       Alternate Url: %ws
No federation home realm
Our cache indicates that this url is resolvable and therefore does not use ADFS.
Our cache indicates that this url does not use ADFS.
[msdrm]:ADFS Url for the Url = %S is %S
(0 == _wcslwr_s(wszObjectPath, cchObjectPath + 1))
Our cache indicates that %ws server is not resolvable
[msdrm]:ADFS Url is too large to be logged
++++++++++ Dummy http GET call to see if the %ws url is resolvable. ++++++++++
CHttpBase::ResolveUrlWithGET
[msdrm]:Caching ServerNotResolvable Url is too large to be logged
[msdrm]:Caching ServerNotResolvable Url=%S
[msdrm]:Caching Resolvable UrL is too large to be logged
[msdrm]:Caching Resolvable Url=%S
----------- Dummy GET call done hr=0x%x. ---------
[msipc]IsSmartcardAuthNeeded: From cache, Smart Card Auth is needed
[msipc]IsSmartcardAuthNeeded: Checking for Url: %S
[msipc]IsSmartcardAuthNeeded: Making a Get call to check if Smartcard Auth is needed.
[msipc]IsSmartcardAuthNeeded: From cache, Smart Card Auth is not needed
[msipc]IsSmartcardAuthNeeded: Smart Card Auth is not needed
[msipc]IsSmartcardAuthNeeded: Smart Card Auth is needed
[msipc]:-CHttpBase::SendRequest Token Couldn't handle Error Code 0x%x. hr = 0x%x
[msdrm]:+CHttpBase::LetTokenHandleTheError
AddHttpHeader(wstrRequestIdHeader.c_str())
[msdrm]:-CHttpBase::LetTokenHandleTheError hr = 0x%x
CHttpBase::AddDiagnosticIdsToHeader
Correlation-Id/Request-Id: %ws
Scenario-Id: %ws
AddHttpHeader(wstrScenarioIdHeader.c_str())
[msipc]:CHttpBase::AddDiagnosticIdsToHeader hr = 0x%x
[msipc]: Scenario-Id is not available
HRESULT_FROM_WIN32(os::IpcOsGetLastError())
wszHeader
invalid map/set<T> iterator
[msipc]:CHttpBase::AddHttpHeader hr = 0x%x
map/set<T> too long
rmsoscenarioid: 
rmsocorrelationid: 
Content-Type: application/x-www-form-urlencoded
msipc
IIpcTokenException
[msdrm]:CloseHttpHandle FAILED hr: %x
SymmetricKeyTokenNotUsingWinHttpException
onecoreuap\ds\security\rm\client\src\msipc\http\SymmetricKeyToken.h
SymmetricKeyTokenIncorrectSizeException
Authorization: Bearer 
{     "aud":"AADRM.COM",     "iss":"MSIPC",     "nbf":%I64d,     "exp":%I64d,     "api":"%ws",     "tid":"%ws",     "mcn":"%ws" } 
eyJ0eXAiOiJKV1QiLCJhbGciOiJTaGEyNTYifQ==
onecoreuap\ds\security\rm\client\src\msipc\http\symmetrickeytoken.cpp
g_fGlobalOptionUseWinhttp
(IPCP_TOKEN_TYPE_SYMMETRIC_KEY == pcToken->dwType)
pcToken->pcvTokenData
fCheckTokenSize
CRMSOServerVerification::ValidateRMSOSSLRequest(hRequest)
hRequest
pcSymmetricKey
os::IpcOsStringCchPrintf( &wszJwtToken[0], cchJwtToken, g_wstrJwtTokenFmt.c_str(), stTimeInSecSince1970, endTimeInSecSince1970, m_wstrAppPrincipalId.c_str(), m_wstrBposTenantId.c_str(), wstrMachineName.c_str())
pcSymmetricKey->wszAppPrincipalId
pcSymmetricKey->wszBase64Key
os::IpcOsGetMachineName(&wszMachineName)
pcSymmetricKey->wszBposTenantId
os::IpcOsGetHMACSHA256(m_pbSymmKey, m_cbSymmKey, const_cast<PBYTE>(&vbData[0]), SafeInt<int>(vbData.size()), &pbHash, &cbHash)
onecoreuap\ds\security\rm\client\src\msipc\http\iipctoken.cpp
[msipc]: IIpcToken::Create Unknown Token type
[msipc]: IIpcToken::ValidateToken Unknown Token type
onecoreuap\ds\security\rm\client\src\msipc\http\serverinfocache.cpp
(pcConnInfo->wszIntranetUrl || pcConnInfo->wszExtranetUrl)
pcConnInfo
[msipp]:ServerInfoCache::GetServerInfo GetServerInfo Extranet Url hr=0x%x
[msipp]:ServerInfoCache::GetServerInfo GetServerInfo Intranet Url hr=0x%x
pNetworkListManager->get_IsConnected(&bIsConnected)
pNetworkListManager->get_IsConnectedToInternet(&bIsConnectedToInternet)
pNetworkListManager.CoCreateInstance(CLSID_NetworkListManager)
onecoreuap\ds\security\rm\client\src\msipc\http\networkconnectivity.cpp
onecoreuap\ds\security\rm\client\src\msipc\http\networkconnectivity.cpp
Error while trying to get the network connectivity info - hr=0x%x. Will assume it is connected.
Network connectivity: local - %ws, internet - %ws
Microsoft::InformationProtection::GetNetworkConnectivityInfo
r;msipc
[msipc]:IpcTokenCache::GetCachedToken Using Cached Token
[msipc]:IpcTokenCache::GetCachedToken Creating a new IIpcToken
[msipc]:IpcTokenCache::GetCachedToken Adding new token to cache
X509TokenNotUsingWinHttpException
(IPCP_TOKEN_TYPE_X509 == pcToken->dwType)
onecoreuap\ds\security\rm\client\src\msipc\http\x509token.cpp
X509TokenIncorrectSizeException
onecoreuap\ds\security\rm\client\src\msipc\http\X509Token.h
wszUrl
onecoreuap\ds\security\rm\client\src\msipc\http\winhttpproxywrapper.cpp
+[msipc]:CRMSOServerVerification::CheckRMSOUrlIsHttps
+[msipc]:CRMSOServerVerification::CheckRMSOUrlIsHttps Not using https
hr = HRESULT_FROM_WIN32(ERROR_NOT_SUPPORTED)
g_pfnWinHttpQueryOption(hWinHttpRequest, dwWINHTTP_OPTION_SECURITY_FLAGS, &dwSecurityFlags, &cbSecurityFlags)
onecoreuap\ds\security\rm\client\src\msipc\http\rmsoserververification.cpp
CheckRMSOUrlIsHttps(hWinHttpRequest)
+[msipc]:CRMSOServerVerification::ValidateRMSOSSLRequest server SSL cert validation failed, but we don't require Microsoft rooted cert since NoValidation regkey is set and it is not the Production RMSO.
-[msipc]:CRMSOServerVerification::CheckRMSOUrlIsHttps hr = 0x%x
+[msipc]:CRMSOServerVerification::ValidateRMSOSSLRequest
+[msipc]:CRMSOServerVerification::CheckSSLCert
-[msipc]:CRMSOServerVerification::CheckSSLCert hr = 0x%x
+[msipc]:CRMSOServerVerification::ValidateRMSOSSLRequest Microsoft root is required, but the server SSL cert validation failed.
-[msipc]:CRMSOServerVerification::ValidateRMSOSSLRequest hr = 0x%x
+[msipc]:CRMSOServerVerification::CheckCertEKU
+[msipc]:CRMSOServerVerification::CheckCertEKU: Production EKU found
+[msipc]:CRMSOServerVerification::GetSSLCert
-[msipc]:CRMSOServerVerification::GetSSLCert hr = 0x%x
-[msipc]:CRMSOServerVerification::CheckCertEKU hr = 0x%x
+[msipc]:CRMSOServerVerification::CheckCertEKU: Dogfood EKU found
+[msipc]:CRMSOServerVerification::CheckCertEKU: Int EKU found
1.3.6.1.4.1.311.76.7.1
1.3.6.1.4.1.311.76.7.3
1.3.6.1.4.1.311.76.7.2
onecoreuap\ds\security\rm\client\src\msipc\http\OrgIdIdcrlToken.h
Authorization: MSOID 
OrgIdIdcrlTokenException
fCheck
(IPCP_TOKEN_TYPE_IDCRL == pcToken->dwType)
onecoreuap\ds\security\rm\client\src\msipc\http\orgididcrltoken.cpp
onecoreuap\ds\security\rm\client\src\msipc\http\windowstoken.cpp
onecoreuap\ds\security\rm\client\src\msipc\http\oauth2token.cpp
(sizeof(IPC_OAUTH2_CALLBACK_INFO) <= pcToken->cbTokenData)
OAuth2TokenException
(IPCP_TOKEN_TYPE_OAUTH2 == pcToken->dwType)
HTTP_STATUS_DENIED == dwStatusCode
(sizeof(IPC_OAUTH2_CALLBACK_INFO_WITH_TOKEN) == pcCallbackInfo->cbSize) || (sizeof(IPC_OAUTH2_CALLBACK_INFO) == pcCallbackInfo->cbSize)
Didn't get a 401 challenge.
IServerInfoException
IServerInfoNotSupportedException
ServerInfoUnSupportedAuthTypeException
onecoreuap\ds\security\rm\client\src\msipc\http\serverinfo.cpp
ServerInfoInvalidUrlException
drmSoap.SetServerInfo(wstrServerInfoUrl.c_str(), ipp::IIpcContext::IsSilentMode(pIpcContext) ? HTTP_NO_UI : 0)
!(ipp::IIpcContext::IsOfflineMode(pIpcContext) && bForceDownload)
.asmx
drmSoap.CreateRequest( g_wszSI_GetServerInfo, g_wszSI_GetServerInfoRequests, g_wszPUB_ServerServiceNamespace, 1)
wszHostName
drmSoap.SetServerMethod(g_wszPUB_ServerService, g_wszSI_GetServerInfo)
drmSoap.SetIpcContext(pIpcContext)
wszUrl = CDRMSoapRequest::GetAttributeValue(pServiceLocation, g_wszSI_SLTypeUrl)
[msipc]:ServerInfoImpl::loadAuthTypesFromRegistry AuthInfo not available
[msipc]:ServerInfo::checkAndSetSecondUrlRegPath Also setting ServerInfo for %ws
pServiceLocation = CDRMSoapRequest::GetElementWithAttributeValue( pServiceLocations, g_wszSI_ServiceLocation, g_wszSI_ServiceLocationType, wszServiceName)
AuthType not supported by server
[msipc]:ServerInfoImpl::GetUrlForAuthType Unknown VRoot type url: %ws
_wmcs
[msipc]:ServerInfoImpl::GetUrlForAuthType: %ws AuthType not supported by server
os::IpcOsGetUserPerferredLocale(&dwLangId)
(wstring::npos != iAsmxPos)
(wstring::npos != iWstrPos)
drmSoap.AddStructParameter(g_wszSI_ServerInfoRequest, 1)
drmSoap.AddParameter( g_wszSI_ServerInfoRequest, g_wszSI_ServerInfoRequestType, SOAP_DATA_TYPE_STRING, dwRequestIndex, g_wszSI_VersionInfo)
_ultow_s(dwLangId, wszLangId, MAX_ULONG_STR_LENGTH, 10)
[msipc]:ServerInfoImpl::getServerInfoFromServer: Getting Server Info From server
[msipc]:ServerInfoImpl::getServerInfoFromServer  FaultCode = %S , FaultCorrelationId = %S , FaultString = %S 
[msipc]:ServerInfoImpl::getServerInfoFromServer  FaultCode = %S , FaultString = %S 
drmSoap.AddParameter( g_wszSI_ServerInfoRequest, g_wszSI_ServerInfoRequestType, SOAP_DATA_TYPE_STRING, dwRequestIndex, g_wszSI_ServerFeatureInfo)
drmSoap.AddParameter( g_wszSI_ServerInfoRequest, g_wszSI_ServerInfoRequestType, SOAP_DATA_TYPE_STRING, dwRequestIndex, g_wszSI_ServiceLocations)
pSIRVersionInfo = CDRMSoapRequest::GetElementWithAttributeValue( pResultsEle, g_wszSI_ServerInfoRequest, g_wszSI_ServerInfoRequestType, g_wszSI_VersionInfo)
pVersionInfo = CDRMSoapRequest::GetElement(pSIRVersionInfo, g_wszSI_VersionInfo, 0)
(!(E_SOAP_FAULT_RESPONSE == hr))
pResultsEle = drmSoap.GetElement(g_wszSI_Results, 0)
[msipc]:ServerInfoImpl::processResponse: Missing ServerType. Setting to Enterprise
pSIRServerFeatureInfo = CDRMSoapRequest::GetElementWithAttributeValue( pResultsEle, g_wszSI_ServerInfoRequest, g_wszSI_ServerInfoRequestType, g_wszSI_ServerFeatureInfo)
wszVersion = CDRMSoapRequest::GetAttributeValue(pVersionInfo, g_wszSI_Version)
[msipc]:ServerInfoImpl::processResponse: Online Server
Microsoft::InformationProtection::ServerInfoImpl::processResponse
onecoreuap\ds\security\rm\client\src\msipc\http\serverinfo.cpp
pServerFeatureInfo = CDRMSoapRequest::GetElement(pSIRServerFeatureInfo, g_wszSI_ServerFeatureInfo, 0)
[msipc]:ServerInfoImpl::processResponse: Processing IssuanceLicenseV2
[msipc]:ServerInfoImpl::processResponse: Processing AuthTypes
[msipc]:ServerInfoImpl::processResponse: Missing AuthTypes
[msipc]:ServerInfoImpl::processResponse: Missing IssuanceLicenseV2
pAuthTypeLicensing = CDRMSoapRequest::GetElement(pAuthType, g_wszSI_AuthTypeLicensing, 0)
pAuthTypeVDir = CDRMSoapRequest::GetElement(pAuthTypeVRoot, g_wszSI_Vdir, 0)
wszName = CDRMSoapRequest::GetAttributeValue(pAuthType, g_wszSI_Name)
pAuthTypeCertification = CDRMSoapRequest::GetElement(pAuthType, g_wszSI_AuthTypeCertification, 0)
wszRBValue = CDRMSoapRequest::GetValue(pAuthTypeRequiresBrowser)
wszName = CDRMSoapRequest::GetName(pQueryString)
wszVdir = CDRMSoapRequest::GetValue(pAuthTypeVDir)
wszRRValue = CDRMSoapRequest::GetValue(pAuthTypeRequiresRedirect)
os::IpcOsRegSetValueEx(m_hKey, pszValueName, 0, nType, (PBYTE)pszValue, cbValue)
wszValue = CDRMSoapRequest::GetValue(pQueryString)
Failure writing to registry value '%ws'.
msipc
+ProxyResolver::ProxyResolver
winhttp.dll
WinHttpGetProxyForUrlEx
Microsoft::InformationProtection::ProxyResolver::ProxyResolver
onecoreuap\ds\security\rm\client\src\msipc\http\winhttpproxy.cpp
WinHttpGetProxyResult
Using the extended WinHttp APIs for the resolving proxy.
WinHttpFreeProxyResult
WinHttpCreateProxyResolver
Microsoft::InformationProtection::ProxyResolver::SetNextProxySettingEx
Setting WinHttp proxy: type=%d, proxy=%ws, bypass=%ws
-ProxyResolver::ProxyResolver
+ProxyResolver::SetNextProxySettingEx
+ProxyResolver::SetNextProxySetting
Microsoft::InformationProtection::ProxyResolver::SetNextProxySetting
Setting WinHttp proxy: direct=%ws, bypass=%ws, scheme=%d, proxy=%ws, port=%d
-ProxyResolver::SetNextProxySettingEx hr=0x%x
Microsoft::InformationProtection::ProxyResolver::GetProxyCallBack
ProxyResolver::GetProxyCallBack ignoring the status.
-ProxyResolver::SetNextProxySetting hr=0x%x
+ProxyResolver::GetProxyCallBack dwInternetStatus = %d
ProxyResolver::GetProxyCallBack Success
-ProxyResolver::GetProxyCallBack
ProxyResolver::GetProxyCallBack quitting dwResult=%d
ProxyResolver::GetProxyCallBack Failed with hr=0x%x
-ProxyResolver::GetProxyForUrlEx hr=0x%x
+ProxyResolver::GetProxyForAutoSettings
+ProxyResolver::GetProxyForUrlEx
Microsoft::InformationProtection::ProxyResolver::GetProxyForUrlEx
ProxyResolver::ResolveProxy
Microsoft::InformationProtection::ProxyResolver::ResolveProxy
Microsoft::InformationProtection::ProxyResolver::GetProxyForAutoSettings
-ProxyResolver::GetProxyForAutoSettings hr=0x%x
ProxyResolver::ResolveProxy WinHttp proxy configuration: AutoDetect=%ws, AutoConfigUrl=%ws, Proxy=%ws, Bypass=%ws
ProxyResolved: AutoDetecting
ProxyResolver already Initialized
ProxyResolver: WinHttpGetIEProxyConfigForCurrentUser Failed : %d
ProxyResolver::ResolveProxy hr=0x%x
ProxyResolved: Autoproxy with Autoconfig Url
ProxyResolved: Using Static Proxy setting
msipc
onecoreuap\ds\security\rm\client\src\msipc\http\windowsusernameandpasswordtoken.cpp
WindowsUsernameAndPasswordTokenException
pcWinCreds->pwszUserName
[msipc]:+WindowsUsernameAndPasswordToken Created
(IPCP_TOKEN_TYPE_WINDOWS == pcToken->dwType)
pcToken->cbTokenData == sizeof(PCIPCP_WINDOWS_CREDENTIALS)
[msipc]:+WindowsUsernameAndPasswordToken::HandleCredsError
[msipc]:+WindowsUsernameAndPasswordToken::HandleCredsError Suppoerted Schemes = %d,                                                                                     First Scheme = %d, Target = %d
[msipc]:+WindowsUsernameAndPasswordToken::SetHeader Found URL in NTLM Cache.                   Setting Auth Scheme to NTLM
m_pfnHttpSetWindowsCredentialsCallback( hRequest, dwStatusCode, hParentWindow, fSilent, hCancelEvent, m_pvAppData)
[msipc]:+WindowsUsernameAndPasswordToken::HandleCredsError Server doesn't support either                                                           WINHTTP_AUTH_SCHEME_NEGOTIATE or WINHTTP_AUTH_SCHEME_NTLM
[msipc]:+WindowsUsernameAndPasswordToken::HandleCredsError updating Auth Target from %d to %d
[msipc]:+WindowsUsernameAndPasswordToken::HandleCredsError Server already supports Auth Scheme.                                                                                         Credentials might be wrong
HRESULT_FROM_WIN32(ERROR_NOT_AUTHENTICATED)
[msipc]:+WindowsUsernameAndPasswordToken::HandleCredsError Using NTLM Scheme
[msipc]:+WindowsUsernameAndPasswordToken::HandleCredsError Using NEGOTIATE Scheme
LoggedOnUserTokenException
0 == pcToken->cbTokenData
NULL == pcToken->pcvTokenData
onecoreuap\ds\security\rm\client\src\msipc\http\LoggedOnUserToken.h
onecoreuap\ds\security\rm\client\src\msipc\http\loggedonusertoken.cpp
[msipc]:+LoggedOnUserToken Created
Bearer 
resource
Invalid challenge returned by the server.
(NULL != spwstrResource) && !spwstrResource->empty()
realm
[msipc] ParseChallengeHeader: 401 challenge didn't return a resouce, trying the realm instead
g_pfnWinHttpQueryHeaders( hRequest, dwWINHTTP_QUERY_FLAG_NUMBER | dwWINHTTP_QUERY_STATUS_CODE, g_wszWINHTTP_HEADER_NAME_BY_INDEX, &dwStatusCode, &cbQueryBufferLength, lpdwWINHTTP_NO_HEADER_INDEX)
[msipc] QueryWWWAuthenticateHeader: Got a %d from the server.
onecoreuap\ds\security\rm\client\src\msipc\http\bearerchallengeparser.cpp
[msipc] ParseChallengeHeader: Parsed the challenge successfully:
0 == cbQueryBufferLength%sizeof(wchar_t)
g_pfnWinHttpQueryHeaders( hRequest, dwWINHTTP_QUERY_WWW_AUTHENTICATE, g_wszWINHTTP_HEADER_NAME_BY_INDEX, &header[0], &cbQueryBufferLength, lpdwWINHTTP_NO_HEADER_INDEX)
!g_pfnWinHttpQueryHeaders( hRequest, dwWINHTTP_QUERY_WWW_AUTHENTICATE, g_wszWINHTTP_HEADER_NAME_BY_INDEX, pvWINHTTP_NO_OUTPUT_BUFFER, &cbQueryBufferLength, lpdwWINHTTP_NO_HEADER_INDEX)
ERROR_INSUFFICIENT_BUFFER == dwError
Authorization:
pCipherInfo
ipp::IppUtil::CheckStructVersion(pCipherInfo->cbSize, sizeof(IPC_CIPHER_INFO))
onecoreuap\ds\security\rm\client\src\msipc\common\cipherinfo.cpp
ipp::IppUtil::CheckPaddingMode(pCipherInfo->dwPaddingMode)
ipp::IppUtil::CheckIV( pCipherInfo->pbIV, pCipherInfo->cbIV, pCipherInfo->dwCipherMode, pCipherInfo->wszAlgorithm, pCipherInfo->dwKeySize)
ipp::IppUtil::CheckSymmetricAlgorithmAndKeySize(pCipherInfo->wszAlgorithm, pCipherInfo->dwKeySize)
ipp::IppUtil::CheckCipherMode(pCipherInfo->dwCipherMode)
pcbBuffer
onecoreuap\ds\security\rm\client\src\msipc\common\ippterm.cpp
os::IpcOsSystemTimeToFileTime(&stStart, &ftStart)
[msipc]:IppTerm::Check An invalid term is specified. The duration is less than 1 minute. 
os::IpcOsSystemTimeToFileTime(&stEnd, &ftEnd)
os::IpcOsStringCchCopy(wszBuffer, cchCharsInBuffer, iter->userId.c_str())
IppUtil::CheckAce(&pAcl->rgUserRights[static_cast<DWORD>(i)])
onecoreuap\ds\security\rm\client\src\msipc\common\ippacl.cpp
os::IpcOsFileTimeAsSystemTime( static_cast<const IPCOS_FILETIME *>(&(pTerm->ftStart)), &stStart )
wszUserId
os::IpcOsStringCchCopy(*wszBuffer, cchCharsInBuffer, propIter->second.c_str())
os::IpcOsStringCchCopy(wszBuffer, cchCharsInBuffer, rightsIter->c_str())
[msipp]:IppAcl::WriteToLicense Adding full permissions to owner
Internal
E_DRM_RIGHT_NOT_SET
os::IpcOsFileTimeAsSystemTime( &ftEnd, &stEnd )
[msipp]:IppAcl::WriteToLicense Some rights have already been specified for owner. So not adding full permissions to owner.
IppUtil::CheckNameValue(&pNameValueList->aNameValuePairs[static_cast<DWORD>(i)])
onecoreuap\ds\security\rm\client\src\msipc\common\namevalue.cpp
pNameValueList
_LCID_
os::IpcOsStringCchCopy(pszOut, cchRemaining, pNameValueIn->wszValue)
os::IpcOsStringCchLength(pNameValueIn->wszValue, IPC_OS_MAX_CCH, &cch)
os::IpcOsStringCchCopy(pszOut, cchRemaining, pNameValueIn->wszName)
os::IpcOsStringCchLength(pNameValueIn->wszName, IPC_OS_MAX_CCH, &cch)
[msipp]:LicenseNameValue::WriteToLicense Skipping NOLICCACHE App data
os::IpcOsStringCchCopy(wsz, cch, wszValue)
os::IpcOsStringCchCopy(wsz, cch, wstrName.c_str())
IppUtil::CheckBuffer(cbRequiredStructs + cbRequiredStrings, pvBuffer, pcbBuffer)
os::IpcOsStringCchCopy(wszNameCopy, cchNameCopy, wszName)
os::IpcOsStringCchLength(wszName, IPC_OS_MAX_CCH, &cchNameCopy)
(0 == _itow_s(lcid, wsz, ARRAYSIZE(wsz), 10))
[msipp]:LicenseNameValue::WriteToLicense Adding NOLICCACHE because IntervalTime is set to 0
 Public API called: 
/-----------------------------------------------------------------------
\-----------------------------------------------------------------------
 Public API 
 exited with return code 
IPC_LICENSE_METADATA_HANDLE: 
IPC_LICENSE_HANDLE: 
IPC_KEY_HANDLE: 
IPC_HANDLE: 
PCIPC_PROMPT_CTX
wszIntranetUrl: 
wszExtranetUrl: 
PCIPC_CONNECTION_INFO
hCancelEvent: 
dwFlags:      
hwndParent:   
cbSize:       
dwType:        
IPC_CREDENTIAL_TYPE_X509
PCIPC_CREDENTIAL
-->pcCredential:
IPC_CREDENTIAL_TYPE_OAUTH2
pcSymmetricKey: 
IPC_CREDENTIAL_TYPE_SYMMETRIC_KEY
pcCertContext: 
ERROR -- UNKNOWN TYPE: 
pcOAuth2: 
wszID:     
dwType:    
PCIPC_USER
fAllowFromScratch: 
wszDisplayName:    
-->connectionInfo:
PCIPC_TEMPLATE_ISSUER
cbTokenData:  
pcvTokenData: 
dwType:       
PCIPCP_TOKEN
0x%08X
onecoreuap\ds\security\rm\client\src\msipc\common\traceutil.cpp
Microsoft::InformationProtection::TraceUtil::Trace
[msipp]: Most Recently Used UserIdentity Cache is disabled.
[msipp]: Most Recently Used UserIdentity Cache with size %d is enabled.
pConnectionInfo->wszExtranetUrl != 0 || pConnectionInfo->wszIntranetUrl != 0
os::IpcOsStringCchCopy(reinterpret_cast<wchar_t*>(pbOut), cchIntranetURL, pConnectionInfo->wszIntranetUrl)
onecoreuap\ds\security\rm\client\src\msipc\common\connectioninfo.cpp
os::IpcOsStringCchCopy(reinterpret_cast<wchar_t*>(pbOut), cchExtranetURL, pConnectionInfo->wszExtranetUrl)
ipp::ConnectionInfo::Check(pConnectionInfo)
ipp::IppUtil::CheckURL(pConnectionInfo->wszIntranetUrl)
ipp::IppUtil::CheckURL(pConnectionInfo->wszExtranetUrl)
AES_CBC512NOPAD
AES_CBC4K
symmetric-key-size
symmetric-key-type
E_DRM_ABORTED
cbBuffer % sizeof (wchar_t) == 0
DRMENCODINGTYPE_STRING == eType
onecoreuap\ds\security\rm\client\src\msipc\common\drmutil.cpp
CDRMtoSP::DRMGetInfo( hEnablingBits, g_wszQUERY_SYMMETRICKEYTYPE, &eType, &cbBuffer, 0)
DRMENCODINGTYPE_UINT == eType
CDRMtoSP::DRMGetInfo( hEnablingBits, g_wszQUERY_SYMMETRICKEYSIZE, &eType, &cbBuffer, 0)
Unknown key type: %s
CDRMtoSP::DRMGetInfo( hEnablingBits, g_wszQUERY_SYMMETRICKEYTYPE, &eType, &cbBuffer, reinterpret_cast<BYTE*>(static_cast<wchar_t*>(wszKeyType)))
CDRMCPub::DRMGetUserRights(hLicense, hUser, i, &hRight)
Unknown key size
CDRMtoSP::DRMGetInfo( hEnablingBits, g_wszQUERY_SYMMETRICKEYSIZE, &eType, &cbBuffer, reinterpret_cast<BYTE*>(&puKeySize))
cbBuffer % sizeof (UINT) == 0
wszName
Unrecognized user type
Unrecognized internal user ID
ANYONE
Unspecified
Passport
wszNameType
wszUserIdType
CDRMCPub::DRMSetNameAndDescription( hLicense, TRUE, lc, NULL, NULL)
Unsupported user type
wszIdType
Federation
EscapeXML(wszIn, NULL, &cchEscapedSize)
&amp;
EscapeXML(wszIn, &escaped[0], &cchEscapedSize)
onecoreuap\ds\security\rm\client\src\msipc\drmxrml\xmlenc.cpp
<XrML
</XrML>
[msdrm]:-DRMDeconstructCertificateChain HR=%x
[msdrm]:+DRMDeconstructCertificateChain iWhich = %d
[msdrm]:-DRMConstructCertificateChain HR=%x
[msdrm]:+DRMConstructCertificateChain
<?xml version="1.0"?>
CERTIFICATE
CERTIFICATECHAIN
onecoreuap\ds\security\rm\client\src\msipc\Licenses\IPLLicense.h
!IsTemplate()
wszPL
IsSigned()
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\cjsonpllicense.cpp
Microsoft::InformationProtection::JsonLicenses::IJsonObject::Deserialize
Failed to parse JSON string : %d Offset: %u
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\IJsonObject.h
!data.empty()
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\IJsonObject.h
Required element has empty value : %ws
Value element has empty value : %ws
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\publishinglicense.cpp
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\publishinglicense.cpp
Microsoft::InformationProtection::JsonLicenses::PublishingLicense::AddSerializableData
Required element not found : %ws
Parent element is empty when querying member : %ws
Microsoft::InformationProtection::JsonLicenses::PublishingLicense::DeserializeFromObject
Parent element is not an object
Microsoft::InformationProtection::JsonLicenses::PublishingLicense::FinalizePayload
!m_wstrOrgPayload.empty()
uuuuuuuubtnufruuuuuuuuuuuuuuuuuu
0123456789ABCDEF
U1(\Q
~)p$w
11eU%
9Y>)F$
raB3G
[*QmU
mr"iR
-sSO\
X5AHx
Z~$|7
s\ax}?
tC7Ddx
eax~Z
ekhHD
k*do^
:V!2m
STv/N
xg^Jp5|
{zel#|67
msipc
00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899
stoul argument out of range
invalid stoul argument
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\rsakey.cpp
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\rsakey.cpp
Microsoft::InformationProtection::JsonLicenses::RSAKey::AddSerializableData
m_pKeyBlob->InitRSAPublic(m_uPubExponent, SafeInt<UINT>(BYTES_TO_BITS(vbPubKey.size())), &vbPubKey[0])
HRESULT_FROM_WIN32(ERROR_INVALID_DATA)
Invalid element type : %ws
Microsoft::InformationProtection::JsonLicenses::RSAKey::DeserializeFromObject
msipc
Both Extranet URL and Intranet URLs can't be null in Issuer
Microsoft::InformationProtection::JsonLicenses::Issuer::DeserializeFromObject
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\issuer.cpp
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\issuer.cpp
Microsoft::InformationProtection::JsonLicenses::Issuer::AddSerializableData
fname
msipc
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\signature.cpp
Microsoft::InformationProtection::JsonLicenses::Signature::AddSerializableData
utf-16
utf-8
Microsoft::InformationProtection::JsonLicenses::Signature::DeserializeFromObject
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\signature.cpp
sha256
msipc
Microsoft::InformationProtection::JsonLicenses::UserCertPublicData::AddSerializableData
Microsoft::InformationProtection::JsonLicenses::UserCertPublicData::DeserializeFromObject
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\usercertpublicdata.cpp
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\usercertpublicdata.cpp
issto
msipc
Microsoft::InformationProtection::JsonLicenses::IssuedTo::DeserializeFromObject
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\issuedto.cpp
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\issuedto.cpp
Microsoft::InformationProtection::JsonLicenses::IssuedTo::AddSerializableData
Public Key doesn't have required members.
fname
msipc
Microsoft::InformationProtection::JsonLicenses::Header::AddSerializableData
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\header.cpp
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\header.cpp
Microsoft::InformationProtection::JsonLicenses::Header::DeserializeFromObject
msipc
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\license.cpp
Microsoft::InformationProtection::JsonLicenses::License::DeserializeFromObject
IppUtil::DecipherTime(wstrIssuedDate.c_str(), &m_creationDate)
IppUtil::DecipherTime(wstrValidUntil.c_str(), &m_validUntil)
Microsoft::InformationProtection::JsonLicenses::License::AddSerializableData
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\license.cpp
Expecting an Object element but value is not an Object : %ws
expecting name value pairs to be strings : %ws
msipc
Both TemplateId and CustomPolicy cannot be specified
Microsoft::InformationProtection::JsonLicenses::Policy::AddSerializableData
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\policy.cpp
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\policy.cpp
Microsoft::InformationProtection::JsonLicenses::Policy::DeserializeFromObject
msipc
Microsoft::InformationProtection::JsonLicenses::ContentKey::DeserializeFromObject
Microsoft::InformationProtection::JsonLicenses::ContentKey::AddSerializableData
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\contentkey.cpp
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\contentkey.cpp
msipc
Microsoft::InformationProtection::JsonLicenses::SessionKey::AddSerializableData
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\sessionkey.cpp
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\sessionkey.cpp
Microsoft::InformationProtection::JsonLicenses::SessionKey::DeserializeFromObject
msipc
wszRight
Microsoft::InformationProtection::JsonLicenses::CustomPolicy::DeserializeFromObject
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\custompolicy.cpp
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\custompolicy.cpp
wszUser
Expecting an Array element but value is not an Array : %ws
Element not found : %ws
usrts
msipc
Microsoft::InformationProtection::JsonLicenses::UserRights::DeserializeFromObject
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\userrights.cpp
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\userrights.cpp
Expecting a string element but value is not string : %ws
msipc
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszFilePath, uLen, wszDirectory)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszFilePath, uLen, wszPrimaryKeyIn)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszFilePath, uLen, g_wszLS_FileNameKeyDelimitter)
onecoreuap\ds\security\rm\client\src\msipc\store\drmstore.cpp
hr = os::IpcOsStringCchLength(wszDirectory, IPC_OS_MAX_CCH, &cchDirectory)
hr=os::IpcOsStringCchLength(wszPrimaryKeyIn, IPC_OS_MAX_CCH, &cchPrimaryKeyIn)
hr=os::IpcOsStringCchLength(wszSecKeyIn, IPC_OS_MAX_CCH, &cchSecKeyIn)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszFilePath, uLen, L".drm")
[msipc]: Deleting unreadable file.
[msipc]: FAILED to delete file on read error hr = %x
STORE: Add license %ws
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszFilePath, uLen, wszSecKeyIn)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszFilePath, uLen, L".xml")
STORE: Delete license - %ws
CDRMStore::Delete
hr=os::IpcOsStringCchLength(FindFileData.cFileName, IPC_OS_MAX_CCH, &ccFileName)
STORE: Deleting license - %ws
CDRMStore::Add
onecoreuap\ds\security\rm\client\src\msipc\store\drmstore.cpp
[msipc]: FAILED to write to file. Deleting incomplete file.
[msipc]: FAILED to delete file on error hr = %x
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszLockName, uLockNameBufferLength, wszFileName)
hr = DeletePersistedLicenseNoThrow(eType, FALSE, 0, NULL, pLicense->GetLicenseId().c_str())
hr = DeletePersistedLicenseNoThrow(DRM_LICENSE_TYPE_GIC, FALSE, 0, NULL, racLicense.GetLicenseId().c_str())
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszFileName, uFileNameBufferLength, m_storePath->GetPath().c_str())
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszFileName, uFileNameBufferLength, FindFileData.cFileName)
hr=os::IpcOsStringCchLength(wszFileName, IPC_OS_MAX_CCH, &cchFileName)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszLockName, uLockNameBufferLength, m_storePath->GetPath().c_str())
hr = os::IpcOsMaskFileNameNotAllowedChar(wszCID,NULL,&wszCIDMasked)
hr=os::IpcOsStringCchLength(wszCIDMasked, IPC_OS_MAX_CCH, &cchCIDMasked)
hr = os::IpcOsMaskFileNameNotAllowedChar(wszIssuerID, NULL, &wszIssuerIDMasked)
hr=os::IpcOsStringCchLength(wszIssuerIDMasked, IPC_OS_MAX_CCH, &cchIssuerIDMasked)
NULL != dynamic_cast<const ipp::IEULLicense*>(&license)
hr = os::IpcOsMaskFileNameNotAllowedChar(wszLicenseID,NULL,&wszLicenseIDMasked)
hr=os::IpcOsStringCchLength(wszLicenseIDMasked, IPC_OS_MAX_CCH, &cchLicenseIDMasked)
hr=os::IpcOsStringCchLength(wszRACIssuerIDMasked, IPC_OS_MAX_CCH, &cchRACIssuerIDMasked)
hr=os::IpcOsStringCchLength(wszRACHostNameMasked, IPC_OS_MAX_CCH, &cchRACHostNameMasked)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszPrimaryKey, uTotalLength, wszPrefixToUse)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uTotalLength, g_wszOpenBraceChar)
hr=os::IpcOsStringCchLength(wszHostNameMasked, IPC_OS_MAX_CCH, &cchHostNameMasked)
hr=os::IpcOsStringCchLength(wszUserNameMasked, IPC_OS_MAX_CCH, &cchUserNameMasked)
hr=os::IpcOsStringCchLength(wszRACUserNameMasked, IPC_OS_MAX_CCH, &cchRACUserNameMasked)
hr = os::IpcOsMaskFileNameNotAllowedChar(pRACLicense->GetIssuerId().c_str(),NULL,&wszRACIssuerIDMasked)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uTotalLength, wszHostNameMasked)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uTotalLength, wszIssuerIDMasked)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uTotalLength, wszLicenseIDMasked)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uTotalLength, g_wszLS_GIC_Prefix)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uTotalLength, wszUserNameMasked)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uTotalLength, g_wszCloseBraceChar)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uTotalLength, g_wszLS_FileNameKeyDelimitter)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uTotalLength, wszCIDMasked)
[msdrm]: FAILED while storing the License with hr = %x
pvpLicenses
hr = GetLicense( eType, pwszSearchData, pbUseRawData, uSearchDataCount, fDefaultForUser, &uCount, &rgwszLicenseFileNames, &rgwszLicenses, pvpRacs ? &rgwszRacFileNames : NULL, pvpRacs ? &rgwszRacs : NULL)
[msdrm]:-CDRMStore::GetLicense type=%d hr=%x
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uTotalLength, wszRACUserNameMasked)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uTotalLength, wszRACHostNameMasked)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uTotalLength, wszRACIssuerIDMasked)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uTotalLength, g_wszDefaultForUser)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopyN(wszRACIssuerID, uRACIdSize, wszRACIdStart, (uRACIdSize-1))
[msipc]:CDRMStore::GetPersistedLicense File Prefix to search = %ws
CDRMStore::GetPersistedLicense
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchLength(pwszSearchData[i], IPC_OS_MAX_CCH, &strLen)
pwszLocalRACList = new (std::nothrow) PWSTR[*puCount]
pwszLocalRACFileNames = new (std::nothrow) PWSTR[*puCount]
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopyN(wszRACUserName, uRACIdSize, wszRACIdStart, (uRACIdSize-1))
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopyN(wszRACHostName, uRACIdSize, wszRACIdStart, (uRACIdSize-1))
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszPrimaryKey, uPrimaryKeyBufferLength, wszPrefixToUse)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uPrimaryKeyBufferLength, g_wszWildCardAsteriskChar)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszPrimaryKey, uPrimaryKeyBufferLength, g_wszWildCardAsteriskChar)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uPrimaryKeyBufferLength, pwszSearchDataMasked[i])
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(pwszSearchDataMasked[i], strLen + 1, pwszSearchData[i])
hr = os::IpcOsMaskFileNameNotAllowedChar(pwszSearchData[i],NULL,&pwszSearchDataMasked[i])
hr=os::IpcOsStringCchLength(pwszSearchDataMasked[i], IPC_OS_MAX_CCH, &cchSearchDataMasked)
[msipc]:CDRMStore::GetPersistedLicense Raw Search Data = %ws Masked Data = %ws
CDRMStore::GetFileNamesAndData
STORE: Found license - %ws
Not able to read data from file hr=%x
Not able to find any valid files matching the search criteria
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uPrimaryKeyBufferLength, g_wszOpenBraceChar)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uPrimaryKeyBufferLength, g_wszCloseBraceChar)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uPrimaryKeyBufferLength, g_wszDefaultForUser)
STORE: Query license - %ws
hr = os::IpcOsMaskFileNameNotAllowedChar(wszLicenseId,NULL,&wszLicenseIdMasked)
hr = CheckAdd(uPrimaryKeyBufferLength,uSearchDataLength)
hr = CheckAdd(uPrimaryKeyBufferLength,uTemp)
[msipp]:-CDRMStore::GetFileNamesAndData hr=%x
DRM_LICENSE_TYPE_UNMANAGED_TEMPLATE != eType
(NULL == wszLicenseId)
hr = CheckMultiply(uCountSearchData,sizeof(PWSTR))
hr=os::IpcOsStringCchLength(wszUrl, IPC_OS_MAX_CCH, &cchUrl)
hr=os::IpcOsStringCchCopy(wszLocalUrl, wszUrlLength, wszUrl)
hr=os::IpcOsStringCchLength(localHostName, IPC_OS_MAX_CCH, &clocalHostName)
hr=os::IpcOsStringCchCopy(wszTempToken, uTempTokenLength, localHostName)
hr=os::IpcOsStringCchLength(wszLicenseIdMasked, IPC_OS_MAX_CCH, &cchLicenseIdMasked)
hr = CheckAdd(uPrimaryKeyBufferLength,1)
hr = CheckAdd(uPrimaryKeyBufferLength, uTemp)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uPrimaryKeyBufferLength, wszLicenseIdMasked)
wszString = new WCHAR[static_cast<size_t>(cchString)]
os::IpcOsStringCchCopy(wszString, cchString, (*i).c_str())
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszSecurityDescriptor, lenSD, pwszSDTemplate, wszUserID)
hr = os::IpcOsStringCchLength(wszTemplateHash, IPC_OS_MAX_CCH, &cchHash)
hr = CBase64::UDBinToBase64W( cHash, pbHash, &cHashValue, NULL)
hr = CBase64::UDBinToBase64W( cHash, pbHash, &cHashValue, wszLocalHashValue)
hr = os::IpcOsMaskFileNameNotAllowedChar(wszLocalHashValue,NULL,&wszMaskedHashValue)
pwszStringArray = new PWSTR[uCount]
hr = os::IpcOsStringCchLength(wszTemplateHashMasked, IPC_OS_MAX_CCH, &cchTemplateHashMasked)
hr = os::IpcOsStringCchLength(wszTemplateGuidMasked, IPC_OS_MAX_CCH, &cchTemplateGuidMasked)
hr = os::IpcOsStringCchLength(wszUserIdMaskedHash, IPC_OS_MAX_CCH, &cchUserIdMaskedHash)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszPrimaryKey, uTotalLength, g_wszLS_TEMPLATE_Prefix)
hr = os::IpcOsStringCchLength(wszTemplate, IPC_OS_MAX_CCH, &cchData)
hr = os::IpcOsMaskFileNameNotAllowedChar(wszTemplateHash,NULL,&wszTemplateHashMasked)
hr = os::IpcOsMaskFileNameNotAllowedChar(wszTemplateGuid,NULL,&wszTemplateGuidMasked)
hr = os::IpcOsStringCchLength(wszServerPubKeyDigestMaskedHash, IPC_OS_MAX_CCH, &cchServerPubKeyDigestMaskedHash)
onecoreuap\ds\security\rm\client\src\base\FsCommon\auto_handle.h
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uTotalLength, wszServerPubKeyDigestMaskedHash)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uTotalLength, wszTemplateHashMasked)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uTotalLength, wszTemplateGuidMasked)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszPrimaryKey, uTotalLength, wszUserIdMaskedHash)
-Default
msipc
[msdrm]:+DRMSetGlobalOptions eGlobalOptions = DRMGLOBALOPTIONS_USE_WINHTTP
onecoreuap\ds\security\rm\client\src\msipc\drmmain\udmgrldr.cpp
[msdrm]:+DRMSetGlobalOptions eGlobalOptions = DRMGLOBALOPTIONS_USE_SERVERSECURITYPROCESSOR
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszTemp, strLen + 1, pwszToDup[cCount])
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchLength(wszToDup, IPC_OS_MAX_CCH, &strLen)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszLocal, strLen + 1, wszToDup)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszMaxUINT, strLen, L"%d", uValue)
onecoreuap\ds\security\rm\client\src\msipc\drmobjects\drmcint.h
onecoreuap\ds\security\rm\client\src\msipc\drmobjects\drmcbase.cpp
pwszArrayLocal = new (std::nothrow) PWSTR[cArray]
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchLength(pwszToDup[cCount], IPC_OS_MAX_CCH, &strLen)
hr = CBase64::UDBase64ToBinW(uDataLen, wszEncodedString, &uDecodedDataLen, pbData)
hr = CheckAdd(uCount,m_ulInitialCount)
GetActualIndex(hSession,&uActualIndex)
hr = os::IpcOsCoCreateGuid(&guid)
hr = CBase64::UDBinToBase64W( uDataLen, pbDataToEncode, &uBase64DataLen, NULL)
hr = CBase64::UDBinToBase64W( uDataLen, pbDataToEncode, &uBase64DataLen, wszEncodedString)
hr = CBase64::UDBase64ToBinW(uDataLen, wszEncodedString, &uDecodedDataLen, NULL)
hr = GetActualIndex(hSession,&uActualIndex)
onecoreuap\ds\security\rm\client\src\base\FsCommon\auto_refcount.h
onecoreuap\ds\security\rm\client\src\msipc\drmobjects\drmcbase.h
UDStdPlg Enabling Principal
block-size
[msdrm]:-DRMCloseEnvironmentHandle HR=0x%x
[msdrm]:+DRMCreateBoundLicense 
Created the enabling principal
IpcSPCreateEnablingPrincipal
[msdrm]:+DRMCloseHandle
IpcSPCloseHandle
[msdrm]:-DRMCloseHandle HR=0x%x
[msdrm]:+DRMCloseEnvironmentHandle
IpcSPCreateDecryptor
[msdrm]:-DRMCreateEnablingBitsDecryptor HR=0x%x
[msdrm]:+DRMCreateEnablingBitsEncryptor
IpcSPCreateEncryptor
Using existing enabling principal
IpcSPBindLicense
[msdrm]:-DRMCreateBoundLicense HR=0x%x
[msdrm]:+DRMCreateEnablingBitsDecryptor
IpcSPDecrypt
[msdrm]:-DRMDecrypt HR=0x%x
[msdrm]:+DRMDecryptWithRac
IpcSPDecryptWithRac
[msdrm]:-DRMCreateEnablingBitsEncryptor HR=0x%x
[msdrm]:+DRMCreateEnablingPrincipal
[msdrm]:-DRMCreateEnablingPrincipal HR=0x%x
[msdrm]:+DRMDecrypt
[msdrm]:+DRMEncrypt
IpcSPEncrypt
[msdrm]:-DRMEncrypt HR=0x%x
[msdrm]:-DRMDecryptWithRac HR=0x%x
[msdrm]:+DRMDuplicateHandle
[msdrm]:-DRMDuplicateHandle HR=0x%x
IpcSPGetCurrentTime
[msdrm]:+DRMInitEnvironment 
IpcSPCreateSecurityProcessor
[msdrm]:+DRMGetInfo attribute = %S
IpcSPGetInfo
[msdrm]:-DRMGetInfo HR=0x%x
IpcSPInitialize
[msdrm]:+DRMSignWB
IpcSPSign
[msdrm]:-DRMSignWB HR=0x%x
[msdrm]:IpcSPCreateSecurityProcessor failed with HR=0x%x
[msdrm]:IpcSPCreateSecurityProcessor took %d milliseconds
[msdrm]:Environment Handle Creation took %d milliseconds
[msdrm]:-DRMInitEnvironment HR=0x%x
IpcSPAttest
[msdrm]:-DRMCreateEnablingBitsSigner HR=0x%x
[msdrm]:+_DRMDecryptECB
[msdrm]:-_DRMDecryptECB HR=0x%x
[msdrm]:+DRMEnableAndEncrypt
IpcSPEnableAndEncrypt
[msdrm]:-DRMEnableAndEncrypt HR=0x%x
[msdrm]:+DRMCreateEnablingBitsSigner
[msdrm]:-RMGetBoundRightKey HR=0x%x
IpcSPIsActivated
IpcSPCreateMachineCerts
[msdrm]:+RMGetBoundRightKey
IpcSPGetBoundRightKey
([msdrm]:Referral Info Name=%ls, Referral Info URL=%ls, Rights Template=%ls)
[msdrm]:CreateHandle FAILED : %x
[msdrm]:CreateEvents FAILED : %x
+DRMCreateUser (username=%ls, userID=%ls, userIdType=%ls)
onecoreuap\ds\security\rm\client\src\msipc\publishing\drmcpub.cpp
[msdrm]:+DRMCreateIssuanceLicense
!(dwFlags & ~(IPC_DCIL_SKIP_RIGHTS_CHECK | DRM_ISSUANCELICENSE_V2))
+DRMClearAllRights
+DRMSetMetaData (Content ID=%ls, Content ID Type=%ls, SKU ID=%ls, SKU ID Type=%ls, Content Type=%ls, Content Name=%ls
hr=os::IpcOsStringCchLength(wszContentId, MAX_CIDSKUID_LENGTH, &cchContentId)
+DRMSetUserProperties
+DRMCreateRight (right=%ls, # of ExtendedInfo =%d)
hr = CXmlenc::EscapeXML(wszRightName,&wszRightNameInt)
+DRMAddRightWithUser
hr = CXmlenc::EscapeXML(wszSKUId,&wszSKUIdInt)
hr = CXmlenc::EscapeXML(wszSKUIdType,&wszSKUIdTypeInt)
hr = CXmlenc::EscapeXML(wszContentType,&wszContentTypeInt)
hr = CXmlenc::EscapeXML(wszContentName,&wszContentNameInt)
hr = CXmlenc::EscapeXML(wszContentId,&wszContentIdInt)
hr = CXmlenc::EscapeXML(wszContentIdType,&wszContentIdTypeInt)
onecoreuap\ds\security\rm\client\src\msipc\publishing\drmcpub.cpp
+DRMGetIssuanceLicenseTemplate
[msdrm]:+DRMGetSignedIssuanceLicense
[msdrm]:GetIssuanceLicensePointer FAILED : %x
+DRMSetApplicationSpecificData Args: Name=%S, Value=%S
+DRMSetApplicationSpecificDataNotEncrypted Args: Name=%S, Value=%S
+DRMSetLicenseMetadatNotEncrypted Args: Name=%S, Value=%S
CDRMCPub::DRMSetLicenseMetadataNotEncrypted
+DRMGetUsers
-DRMGetUsers HR=%x
+DRMGetUserRights
-DRMGetUserRights HR=%x
+DRMGetUserInfo
-DRMGetUserInfo
+DRMGetRightInfo
-DRMGetRightInfo
CDRMCPub::DRMGetLicenseMetadataNotEncrypted
+DRMGetIssuanceLicenseInfo
+DRMGetLicenseId
hIssuanceLicense
+DRMGetApplicationSpecificData
-DRMGetApplicationSpecificData HR=%x
+DRMGetApplicationSpecificDataNotEncrypted
-GetApplicationSpecificDataNotEncrypted HR=%x
-DRMSetNameAndDescription HR=%x
+DRMSetIntervalTime
-DRMGetLicenseId hr = 0x%x
+DRMGetNameAndDescription
-DRMGetNameAndDescription HR=%x
+DRMSetNameAndDescription Args: Name=%S, Description=%S
-DRMSetIntervalTime HR=%x
+DRMResetValidityTime
-DRMResetValidityTime HR=%x
msipc
MS-GUID
<PARAMETER name="%s"><VALUE encoding="string">%s</VALUE></PARAMETER>
hr=os::IpcOsStringCchLength(m_pwszExtendedInfoName[i], IPC_OS_MAX_CCH, &cchExtendedInfoName)
hr=os::IpcOsStringCchLength(m_pwszExtendedInfoValue[i], IPC_OS_MAX_CCH, &cchExtendedInfoValue)
onecoreuap\ds\security\rm\client\src\msipc\publishing\drmcpubimp.cpp
CXmlenc::UnescapeXML(m_wszRightName,&wszOut,&uRightNameLength)
wszOut
<TIME><RANGETIME><FROM>%04d-%02d-%02dT%02d:%02d</FROM><UNTIL>%04d-%02d-%02dT%02d:%02d</UNTIL></RANGETIME></TIME>
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszValidityTimeXML, uValidityTimeXMLTemplateLength, wszValidityTimeXMLTemplate, m_stFrom.wYear, m_stFrom.wMonth, m_stFrom.wDay, m_stFrom.wHour, m_stFrom.wMinute, m_stUntil.wYear, m_stUntil.wMonth, m_stUntil.wDay, m_stUntil.wHour, m_stUntil.wMinute)
<CONDITIONLIST><ACCESS>%s</ACCESS>%s%s</CONDITIONLIST>
hr=os::IpcOsStringCchLength(wszUsersXML, IPC_OS_MAX_CCH, &cchUsersXML)
hr=os::IpcOsStringCchLength(wszExtendedInfoXML, IPC_OS_MAX_CCH, &uExtendedInfoXMLLength)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszExtendedInfoXML + static_cast<size_t>(uExtendedInfoXMLLength), uExtendedInfoDataLength - uExtendedInfoXMLLength, wszExtendedInfoXMLTemplate, m_pwszExtendedInfoName[i], m_pwszExtendedInfoValue[i])
<TIME><INTERVALTIME days="%d" /></TIME>
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszIntervalTimeXML, uIntervalTimeXMLTemplateLength, wszIntervalTimeXMLTemplate, m_cIntervalTime)
hr=os::IpcOsStringCchLength(m_wszRightName, IPC_OS_MAX_CCH, &cchRightName)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszXML, uRightXMLTemplateLength, wszRightXMLTemplate, m_wszRightName, wszExtendedInfoXML ? wszExtendedInfoXML : L"", wszConditionListXML ? wszConditionListXML : L"")
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszXML, uRightXMLTemplateLength, wszRightXMLTemplate, m_wszRightName, wszExtendedInfoXML ? wszExtendedInfoXML : L"", wszConditionListXML ? wszConditionListXML : L"", m_wszRightName)
hr=os::IpcOsStringCchLength(m_wszUserName, IPC_OS_MAX_CCH, &cchUserName)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszUsersXML + static_cast<UINT>(uCurrentBufferOffset), uUserXMLLength - uCurrentBufferOffset, wszUserXMLLocal)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(static_cast<WCHAR *>(wszConditionListXML), uConditionListXMLTemplateLength, wszConditionListXMLTemplate, static_cast<WCHAR *>(wszUsersXML), static_cast<WCHAR *>(wszTimeXML) ? static_cast<WCHAR *>(wszTimeXML) : L"", static_cast<WCHAR *>(wszIntervalTimeXML) ? static_cast<WCHAR *>(wszIntervalTimeXML) : L"")
<RIGHT name = "%s">%s%s</RIGHT>
<%s>%s%s</%s>
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszUserIdType, *puUserIdTypeLength, m_wszUserIdType)
<PRINCIPAL><OBJECT><ID type="%s">%s</ID><NAME>%s</NAME>%s</OBJECT></PRINCIPAL>
<PRINCIPAL><OBJECT><ID type="%s" /><NAME>%s</NAME>%s</OBJECT></PRINCIPAL>
<PRINCIPAL><OBJECT><ID type="%s">%s</ID>%s</OBJECT></PRINCIPAL>
hr=os::IpcOsStringCchLength(m_wszUserId, IPC_OS_MAX_CCH, &cchUserId)
hr=os::IpcOsStringCchLength(m_wszUserIdType, IPC_OS_MAX_CCH, &cchUserIdType)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszUserName, *puUserNameLength, m_wszUserName)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszUserId, *puUserIdLength, m_wszUserId)
hr=os::IpcOsStringCchLength(wszEscapedUserIdType, IPC_OS_MAX_CCH, &cchEscapedUserIdType)
hr = CXmlenc::EscapeXML(m_wszUserName, &wszEscapedUserName)
hr = CXmlenc::EscapeXML(m_wszUserId, &wszEscapedUserId)
hr = CXmlenc::EscapeXML(m_wszUserIdType, &wszEscapedUserIdType)
hr = CXmlenc::EscapeXML(iter->second.c_str(), &wszEscapedStr)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(static_cast< WCHAR *>(wszXML), uXMLLength, wszUserXMLTemplate3, static_cast<const WCHAR *>(wszEscapedUserIdType) ? static_cast<const WCHAR *>(wszEscapedUserIdType) : static_cast<const WCHAR *>(wszUserIdTypeUnSpecified), static_cast<const WCHAR *>(wszEscapedUserId), wstrUserPropXml.c_str())
<OBJECT><ID type="" /></OBJECT>
<OBJECT%s><ID type="%s">%s</ID>%s</OBJECT>
 type="%s"
hr=os::IpcOsStringCchLength(wszEscapedUserName, IPC_OS_MAX_CCH, &cchEscapedUserName)
hr=os::IpcOsStringCchLength(wszEscapedUserId, IPC_OS_MAX_CCH, &cchEscapedUserId)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(static_cast< WCHAR *>(wszXML), uXMLLength, wszUserXMLTemplate1, static_cast<const WCHAR *>(wszEscapedUserIdType) ? static_cast<const WCHAR *>(wszEscapedUserIdType) : static_cast<const WCHAR *>(wszUserIdTypeUnSpecified), static_cast<const WCHAR *>(wszEscapedUserId), static_cast<const WCHAR *>(wszEscapedUserName), wstrUserPropXml.c_str())
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(static_cast< WCHAR *>(wszXML), uXMLLength, wszUserXMLTemplate2, static_cast<const WCHAR *>(wszEscapedUserIdType) ? static_cast<const WCHAR *>(wszEscapedUserIdType) : static_cast<const WCHAR *>(wszUserIdTypeUnSpecified), static_cast<const WCHAR *>(wszEscapedUserName), wstrUserPropXml.c_str())
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszCIDSKUIDXML, strLen + 1, wszCIDXMLEmpty)
hr=os::IpcOsStringCchLength(m_wszContentId, IPC_OS_MAX_CCH, &cchContentId)
hr = os::IpcOsStringCchLength(m_wszContentIdType == NULL ? L"MS-GUID" : m_wszContentIdType, IPC_OS_MAX_CCH, &cchContentIdType)
hr=os::IpcOsStringCchLength(m_wszContentType, IPC_OS_MAX_CCH, &cchContentType)
<NAME>%s</NAME>
<SKU type="%s">%s</SKU>
<METADATA>%s%s</METADATA>
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchLength(wszCIDXMLEmpty, IPC_OS_MAX_CCH, &strLen)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszObjTypeXMLData, uLength, wszObjTypeXML, m_wszContentType)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszContentNameXMLData, uLength, wszContentNameXML, m_wszContentName)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszCIDSKUIDXML, uXMLLength, wszCIDXML, m_wszContentType ? wszObjTypeXMLData : L"", m_wszContentIdType ? m_wszContentIdType : L"MS-GUID", m_wszContentId, wszContentNameXMLData ? wszContentNameXMLData : L"")
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszSKUIDXMLData, uLength, wszSKUIDXML, m_wszSKUIdType, m_wszSKUId)
hr=os::IpcOsStringCchLength(m_wszContentName, IPC_OS_MAX_CCH, &cchContentName)
hr=os::IpcOsStringCchLength(m_wszSKUId, IPC_OS_MAX_CCH, &cchSKUId)
hr=os::IpcOsStringCchLength(m_wszSKUIdType, IPC_OS_MAX_CCH, &cchSKUIdType)
hr=os::IpcOsStringCchLength(m_wszOwnerXML, IPC_OS_MAX_CCH, &cchOwnerXML)
hr=os::IpcOsStringCchLength(m_VersionInfo.m_wszMinVersion, IPC_OS_MAX_CCH, &cchMinVersion)
hr=os::IpcOsStringCchLength(m_VersionInfo.m_wszMaxVersion, IPC_OS_MAX_CCH, &cchMaxVersion)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszXML, uXMLLength, wszPolicyByNameXMLTemplate, m_VersionInfo.m_wszName, m_VersionInfo.m_wszMinVersion, m_VersionInfo.m_wszMaxVersion)
<POLICY><PUBLICKEY><ALGORITHM>RSA</ALGORITHM><PARAMETER name="public-exponent"><VALUE encoding="integer32">65537</VALUE></PARAMETER><PARAMETER name="modulus"><VALUE encoding="base64" size="%d">%s</VALUE></PARAMETER></PUBLICKEY></POLICY>
hr=os::IpcOsStringCchLength(wszCIDSKUIDXML, IPC_OS_MAX_CCH, &cchCIDSKUIDXML)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszCIDSKUIDXML + static_cast<size_t>(uLength), SafeInt<size_t>(uXMLLength) - uLength, wszMetaDataXML, m_wszOwnerXML ? m_wszOwnerXML : L"", wszSKUIDXMLData ? wszSKUIDXMLData : L"")
<POLICY><OBJECT><ID type="filename">%s</ID><VERSIONSPAN min="%s" max="%s" /></OBJECT></POLICY>
hr=os::IpcOsStringCchLength(m_VersionInfo.m_wszName, IPC_OS_MAX_CCH, &cchName)
hr=os::IpcOsStringCchLength(wszDigest, IPC_OS_MAX_CCH, &cchDigest)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszXML, uXMLLength, wszPolicyByDigestXMLTemplate, m_DigestInfo.m_wszDigestAlgorithm, m_DigestInfo.m_cbDigest, static_cast<WCHAR *>(wszDigest))
<CONDITION name="OS-Exclusion" type="versionspan">%s-%s</CONDITION>
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszXML, uXMLLength, wszOSExclusionXMLTemplate, m_VersionInfo.m_wszMinVersion, m_VersionInfo.m_wszMaxVersion ? m_VersionInfo.m_wszMaxVersion : m_VersionInfo.m_wszMinVersion)
hr=os::IpcOsStringCchLength(m_wszPublicKey, IPC_OS_MAX_CCH, &cchPublicKey)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszXML, uXMLLength, wszPubKeyXMLTemplate, uDecodedDataLen, m_wszPublicKey)
<POLICY><DIGEST><ALGORITHM>%s</ALGORITHM><VALUE encoding="base64" size="%d">%s</VALUE></DIGEST></POLICY>
hr=os::IpcOsStringCchLength(m_DigestInfo.m_wszDigestAlgorithm, IPC_OS_MAX_CCH, &cchDigestAlgorithm)
onecoreuap\ds\security\rm\client\src\msipc\publishing\drmcpubimp.cpp
DRMCreateEnablingBitsDecryptor for VIEWRIGHTSDATA FAILED : %x
DRMCreateEnablingBitsDecryptor for EDITRIGHTSDATA FAILED : %x
Parsing owner ...
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszCancelEventName, uCancelEventNameBufferLength, g_wszPUB_SignCancelEventName, GetCurrentProcessId(), hIssuanceLicense)
phDecryptor
DRMCreateEnablingBitsDecryptor for Any Rights FAILED : %x
CIssuanceLicense::GetDecryptor
ParseIssuanceLicenseTemplate ...
hr = CXmlenc::EscapeXML(wszReferralInfoName, &wszReferralInfoNameInt)
hr = CXmlenc::EscapeXML(wszReferralInfoURL, &wszReferralInfoURLInt)
Intializing License ...
CIssuanceLicense::ParseLicense
ParseSignedIssuanceLicense ...
Base64 Decoding ...
DRMDecrypt FAILED : %x
</BODY>
[msdrm]:DRMSign FAILED  : %x 
[msdrm]:GetSignatureXML FAILED : %x 
[msdrm]:pIssuanceLicense->GetSignatureXML FAILED  : %x 
[msdrm]:CheckAndSetArguments FAILED : %x
[msdrm]:DRMGetSignedIssuanceLicense Args: SymKeyType=%S
ISSUE
<BODY
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszLicenseTemp, ulength, wszLicense)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszLicenseTemp + static_cast<size_t>(uLicenselength), ulength - uLicenselength, L"%s%s", static_cast<WCHAR *>(wszEULSignature), L"</XrML>")
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszLicenseTemp + static_cast<size_t>(uLicenselength), ulength - uLicenseTempLength, pCCLCPubData->m_wstrCLC.c_str())
hr = os::IpcOsStringCchLength(wszIssuanceLicenseData, IPC_OS_MAX_CCH, &uILDataLengthInWchars)
[msdrm]:signed issuance license size (%d) exceeds limit (%d) : %x 
hr = os::IpcOsStringCchLength(wszLicense, IPC_OS_MAX_CCH, &uLicenselength)
hr = os::IpcOsStringCchLength(wszEULSignature, IPC_OS_MAX_CCH, &uLicenseSignaturelength)
hr = CXmlenc::EscapeXML(pCNameValue->GetName(), &wstrName[0] ,&cGetName)
hr = CXmlenc::EscapeXML(pCNameValue->GetValue(), &wstrValue[0] ,&cGetValue)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszApplicationSpecificDataXML + static_cast<size_t> (uXMLLength), SafeInt<size_t>(uApplicationSpecificDataXMLTemplateLen) - uXMLLength, wszApplicationSpecificDataXMLTemplate, wszId, wstrName.c_str(), wstrValue.c_str())
<DESCRIPTOR><OBJECT><ID type="MS-GUID">%s</ID><NAME>%s</NAME></OBJECT></DESCRIPTOR>
<AUTHENTICATEDDATA id="%s" name="%s">%s</AUTHENTICATEDDATA>
hr = CXmlenc::EscapeXML(pCNameValue->GetName(), NULL ,&cGetName)
hr = CXmlenc::EscapeXML(pCNameValue->GetValue(), NULL ,&cGetValue)
hr=os::IpcOsStringCchLength(wszApplicationSpecificDataXML, IPC_OS_MAX_CCH, &uXMLLength)
hr=os::IpcOsStringCchLength(m_wszDescriptorId, IPC_OS_MAX_CCH, &cchDescriptorId)
hr=os::IpcOsStringCchLength(wszNameAndDescriptionXML, IPC_OS_MAX_CCH, &cchNameAndDescriptionXML)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszNameAndDescriptionXML + static_cast<UINT>(uXMLLength), uNameAndDescriptionXMLTemplateLen - uXMLLength, wszNameAndDescriptionXMLTemplate, pCNameValue->GetData(), pCNameValue->GetName(), pCNameValue->GetValue())
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszDescriptorXML, static_cast<UINT>(uDescriptorXMLLen), wszDescriptorXMLTemplate, m_wszDescriptorId ? m_wszDescriptorId : static_cast<WCHAR *>(wszGUID), static_cast<WCHAR *>(wszNameAndDescriptionXML))
LCID %d:NAME %s:DESCRIPTION %s;
hr=os::IpcOsStringCchLength(pCNameValue->GetName(), IPC_OS_MAX_CCH, &cGetName)
hr=os::IpcOsStringCchLength(pCNameValue->GetValue(), IPC_OS_MAX_CCH, &cGetValue)
hr=os::IpcOsStringCchLength(wszGUID, IPC_OS_MAX_CCH, &cchGUID)
hr=os::IpcOsStringCchLength(wszUsagePolicyInclusionXML, IPC_OS_MAX_CCH, &cchUsagePolicyInclusionXML)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszUsagePolicyInclusionXML + static_cast<UINT>(uCurrentBufferOffset), uUsagePolicyInclusionXMLLength - uCurrentBufferOffset, wszXMLData)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(static_cast<WCHAR *>(wszUsagePolicyXML), static_cast<UINT>(uUsagePolicyXMLLength), wszUsagePolicyExclusionXMLTemplate, static_cast<WCHAR *>(wszUsagePolicyExclusionXML))
hr=os::IpcOsStringCchLength(wszUsagePolicyXML, IPC_OS_MAX_CCH, &cchUsagePolicyXML)
<POLICYLIST type="exclusion">%s</POLICYLIST>
<POLICYLIST type="inclusion">%s</POLICYLIST>
hr=os::IpcOsStringCchLength(wszUsagePolicyExclusionXML, IPC_OS_MAX_CCH, &cchUsagePolicyExclusionXML)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszUsagePolicyExclusionXML + static_cast<UINT>(uCurrentBufferOffset), uUsagePolicyExclusionXMLLength - uCurrentBufferOffset, wszXMLData)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(static_cast< WCHAR *>(wszRightsGroupXML), static_cast<UINT>(uRightsGroupXMLLength), wszRightsGroupXMLTemplate, static_cast<const WCHAR *>(wszRightsXML))
<XrML version="1.2" xmlns=""><BODY type="Microsoft Rights Template" version="3.0">%s%s%s%s%s<WORK>%s%s%s</WORK>%s%s%s</BODY></XrML>
<?xml version="1.0"?><XrML version="1.2" xmlns=""><BODY type="Microsoft Rights Label" version="3.0">%s%s%s%s%s<WORK>%s%s%s</WORK>%s%s%s%s</BODY></XrML>
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszIssuanceLicenseTemplate, *puIssuanceLicenseTemplateLength, m_wszSignedIssuanceLicenseTemplate)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszUsagePolicyXML + static_cast<UINT>(uUsagePolicyExclusionXMLLength), static_cast<UINT>(uUsagePolicyXMLLength - uUsagePolicyExclusionXMLLength), wszUsagePolicyInclusionXMLTemplate, static_cast<WCHAR *>(wszUsagePolicyInclusionXML))
<RIGHTSGROUP name="Main-Rights"><RIGHTSLIST>%s</RIGHTSLIST></RIGHTSGROUP>
hr=os::IpcOsStringCchLength(wszRightsXML, IPC_OS_MAX_CCH, &cchRightsXML)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszRightsXML + static_cast<UINT>(uCurrentBufferOffset), uRightXMLLength - uCurrentBufferOffset, wszRight)
Microsoft Official Rights Template
hr=os::IpcOsStringCchLength(m_wszSignedIssuanceLicenseTemplate, IPC_OS_MAX_CCH, &cchSignedIssuanceLicenseTemplate)
{81C42010-208A-458A-BAB6-C3C60F06DD5F}
<DISTRIBUTIONPOINT><OBJECT type="%s"><ID type="MS-GUID">%s</ID><NAME>%s</NAME><ADDRESS type="URL">%s</ADDRESS></OBJECT></DISTRIBUTIONPOINT>
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszRightsTemplateXMLLocal, uRLTemplateLength, wszRLTemplate, m_wszIssuedTimeXML ? m_wszIssuedTimeXML : L"", m_wszValidityTimeXML ? m_wszValidityTimeXML : L"", m_wszNameAndDescriptionXML ? m_wszNameAndDescriptionXML : L"", wszIssuerXRML ? wszIssuerXRML : L"", m_wszReferralInfoXML ? m_wszReferralInfoXML : L"", m_wszMetaDataXML ? m_wszMetaDataXML : L"", m_wszRefreshConditionXML ? m_wszRefreshConditionXML : L"", ((uFlag == 0x01) && m_wszRightsDataXML) ? m_wszRightsDataXML : L"", wszEncryptedRightsXML ? wszEncryptedRightsXML : L"", m_wszUsagePolicyXML ? m_wszUsagePolicyXML : L"", wszAppSpecificData ? wszAppSpecificData : L"", wszLicenseMetadata ? wszLicenseMetadata : L"")
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszIssuanceLicenseTemplate, *puIssuanceLicenseTemplateLength, wszRightsTemplateXMLLocal)
Microsoft Rights Label
Microsoft Rights Template
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszReferralInfoXML, uReferralInfoXMLLength, wszDistPointXMLTemplate1, wszDistPointType, wszGUID, m_wszReferralInfoName, m_wszReferralInfoURL)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszReferralInfoXML, uReferralInfoXMLLength, wszDistPointXMLTemplate2, wszDistPointType, wszGUID, m_wszReferralInfoURL)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszReferralInfoXML, uReferralInfoXMLLength, wszDistPointXMLTemplate3, wszDistPointType, wszGUID, m_wszReferralInfoName)
<VALIDITYTIME><FROM>%04d-%02d-%02dT%02d:%02d</FROM><UNTIL>%04d-%02d-%02dT%02d:%02d</UNTIL></VALIDITYTIME>
<DISTRIBUTIONPOINT><OBJECT type="%s"><ID type="MS-GUID">%s</ID><ADDRESS type="URL">%s</ADDRESS></OBJECT></DISTRIBUTIONPOINT>
<DISTRIBUTIONPOINT><OBJECT type="%s"><ID type="MS-GUID">%s</ID><NAME>%s</NAME></OBJECT></DISTRIBUTIONPOINT>
hr=os::IpcOsStringCchLength(m_wszReferralInfoName, IPC_OS_MAX_CCH, &cchReferralInfoName)
hr=os::IpcOsStringCchLength(m_wszReferralInfoURL, IPC_OS_MAX_CCH, &cchReferralInfoURL)
CIssuanceLicense::ParseSignedIssuanceLicense
<AUTHENTICATEDDATA id="Encrypted-Rights-Data">%s</AUTHENTICATEDDATA>
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszEncryptedRightsXML, uEncryptedRightsXMLLength, wszEncryptedRightsXMLTemplate, wszRightsData)
<ENABLINGBITS type="%s"><VALUE encoding="base64" size="%d">%s</VALUE></ENABLINGBITS>
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszValidityTimeXML, uValidityTimeXMLLength, wszValidityTimeXMLTemplate, m_stTimeFrom.wYear, m_stTimeFrom.wMonth, m_stTimeFrom.wDay, m_stTimeFrom.wHour, m_stTimeFrom.wMinute, m_stTimeUntil.wYear, m_stTimeUntil.wMonth, m_stTimeUntil.wDay, m_stTimeUntil.wHour, m_stTimeUntil.wMinute)
<ISSUEDTIME>%04d-%02d-%02dT%02d:%02d</ISSUEDTIME>
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszIssuedTimeXML, uIssuedTimeXMLLength, wszIssuedTimeXMLTemplate, systime.wYear, systime.wMonth, systime.wDay, systime.wHour, systime.wMinute)
Extranet URL of the original PL is %ws
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszIssuerXML, uIssuerLen, L"<ISSUER>")
hr=os::IpcOsStringCchLength(wszIssuerXML, IPC_OS_MAX_CCH, &cchIssuerXML)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopyN(wszIssuerXML + static_cast<size_t>(uIssuerCurrentLen), uIssuerLen - uIssuerCurrentLen, wszObjTagLocation, wszPrincipalEndTagLocation - wszObjTagLocation)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszIssuerXML + static_cast<size_t>(uIssuerCurrentLen), uIssuerLen - uIssuerCurrentLen, wszVersionXML)
hr=os::IpcOsStringCchLength(wszIssuanceLicenseTemplate, IPC_OS_MAX_CCH, &cchIssuanceLicenseTemplate)
<OBJECT
</PRINCIPAL>
<ISSUER>
hr= DRMtoSPObj.DRMEnableAndEncrypt( hEnv, UDCRYPTO_CIPHER_AES | UDCRYPTO_CIPHERMODE_ECB, m_pbSymKey,m_cbSymKey,RMS_SYMMETRIC_KEY_BLOCKLENGTH, cExponent,pbModulus,cModulus, (const PBYTE)(wszIssuerXML.get()),SafeInt<UINT>(uIssuerCurrentLen)*sizeof(WCHAR), NULL,0, NULL,&cbEnablingBitsTmp)
hr = DRMtoSPObj.DRMEnableAndEncrypt( hEnv, UDCRYPTO_CIPHER_AES | UDCRYPTO_CIPHERMODE_ECB, m_pbSymKey,m_cbSymKey,RMS_SYMMETRIC_KEY_BLOCKLENGTH, cExponent,pbModulus,cModulus, (const PBYTE)(wszIssuerXML.get()),SafeInt<UINT>(uIssuerCurrentLen)*sizeof(WCHAR), pbEncrypedData,cbAlignedRightsDataLen, pbEnablingBitsTmp,&cbEnablingBitsTmp)
hr=os::IpcOsStringCchLength(pdrmCryptoVersion->wszSealedKeyType, IPC_OS_MAX_CCH, &cchSealedKeyType)
hr=os::IpcOsStringCchLength(wszEnablingBitsBase64data, IPC_OS_MAX_CCH, &cchEnablingBitsBase64data)
</ISSUER>
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszIssuerXML + static_cast<size_t>(uIssuerCurrentLen), uIssuerLen - uIssuerCurrentLen, L"</ISSUER>")
hr= DRMtoSPObj.DRMEnableAndEncrypt( hEnv, uCryptoFlags, m_pbSymKey,m_cbSymKey,RMS_SYMMETRIC_KEY_BLOCKLENGTH, cExponent,pbModulus,cModulus, (const PBYTE)(wszIssuerXML.get()),SafeInt<UINT>(uIssuerCurrentLen)*sizeof(WCHAR), NULL,0, NULL,&cbEnablingBits)
hr = DRMtoSPObj.DRMEnableAndEncrypt( hEnv, uCryptoFlags, m_pbSymKey,m_cbSymKey,RMS_SYMMETRIC_KEY_BLOCKLENGTH, cExponent,pbModulus,cModulus, (const PBYTE)(wszIssuerXML.get()),SafeInt<UINT>(uIssuerCurrentLen)*sizeof(WCHAR), NULL,0, pbEnablingBits,&cbEnablingBits)
hr=os::IpcOsStringCchLength(wszActualIssuedPrincipalXML, IPC_OS_MAX_CCH, &cchActualIssuedPrincipalXML)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszIssuerXMLFull, uIssuerXMLBufferLength, wszIssuerXML)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszIssuerXMLFull, uIssuerXMLBufferLength, wszActualIssuedPrincipalXML)
AppSpecificData Name = %S, Value = %S
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(static_cast<WCHAR *>(wszEnablingBitsXML), uEnablingBitsXMLLength, wszEnablingBitsXMLTemplate, pdrmCryptoVersion->wszSealedKeyType, (m_uFlags & 0x02) ? (static_cast<UINT>(cbEnablingBits)*8) : cBits, static_cast<WCHAR *>(wszEnablingBitsBase64data))
hr=os::IpcOsStringCchLength(wszEnablingBitsXML, IPC_OS_MAX_CCH, &cchEnablingBitsXML)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszIssuerXML + static_cast<size_t>(uIssuerCurrentLen), uIssuerLen - uIssuerCurrentLen, wszLicAcqDistPointXML)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszIssuerXML + static_cast<size_t>(uIssuerCurrentLen), uIssuerLen - uIssuerCurrentLen, wszExtLicAcqDistPointXML)
pCNameValue->GetValue()
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszValue, *puValueLength, pCNameValue->GetValue())
os::IpcOsSystemTimeToFileTime(&st, &ft)
os::IpcOsFileTimeToSystemTime(&ftAdded, &stAdded)
hr=os::IpcOsStringCchLength(pCNameValue->GetName(), IPC_OS_MAX_CCH, &uNameLength)
hr=os::IpcOsStringCchLength(pCNameValue->GetValue(), IPC_OS_MAX_CCH, &uValueLength)
pCNameValue->GetName()
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszName, *puNameLength, pCNameValue->GetName())
hr = CXmlenc::UnescapeXML(pCNameValue->GetName(),&wszNameOut,&uNameLength)
wszNameOut
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszName, *puNameLength, wszNameOut)
hr = CXmlenc::UnescapeXML(pCNameValue->GetValue(),&wszDescriptionOut,&uDescriptionLength)
hr = os::IpcOsStringCchLength(wszTempName, IPC_OS_MAX_CCH, &cchReferralInfoNameLength)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszReferralInfoName, *puReferralInfoNameLength, wszTempName)
hr = os::IpcOsStringCchLength(wszTempURL, IPC_OS_MAX_CCH, &cchReferralInfoURLLength)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszReferralInfoURL, *puReferralInfoURLLength, wszTempURL)
CXmlenc::EscapeXML(vNameAndDescriptionItems[i].wstrDescription.c_str(),&wszEscapedDesc)
m_pCRACPubData = new (std::nothrow) CRACPubData()
m_pCCLCPubData = new (std::nothrow) CCLCPubData()
hr=os::IpcOsStringCchLength(wszIL, IPC_OS_MAX_CCH, &cchIL)
wszDescriptionOut
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszDescription, *puDescriptionLength, wszDescriptionOut)
m_pbOfficialTemplateIssuerPubKey = new (std::nothrow) BYTE[m_cbOfficialTemplateIssuerPubKey]
CXmlenc::EscapeXML(vNameAndDescriptionItems[i].wstrName.c_str(),&wszEscapedName)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszIssuanceLicenseDataTemp + static_cast<UINT>(ulength), uTotalLength - ulength, L"</XrML>")
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopyN(wszIssuanceLicenseDataTemp + static_cast<UINT>(ulength), uTotalLength - ulength, m_pCCLCPubData->m_wszLicensorCertLeafNodeStart, m_pCCLCPubData->m_wszLicensorCertLeafNodeEnd-m_pCCLCPubData->m_wszLicensorCertLeafNodeStart+wcslen(L"</XrML>"))
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszILXml, static_cast<UINT>(uTotalLength), wszIssuanceLicenseDataTemp)
<XrML version="1.2" xmlns="" purpose="Content-License"><BODY type="LICENSE" version="3.0">%s%s%s<ISSUER>%s</ISSUER><ISSUEDPRINCIPALS>%s</ISSUEDPRINCIPALS>%s<WORK>%s<RIGHTSGROUP name="Main-Rights"><RIGHTSLIST><RIGHT name = "OWNER"><ACCESS>%s</ACCESS></RIGHT></RIGHTSLIST></RIGHTSGROUP></WORK>%s</BODY>
hr=os::IpcOsStringCchLength(wszSignature, IPC_OS_MAX_CCH, &cchSignature)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszIssuanceLicenseDataTemp, uTotalLength, wszIL)
hr=os::IpcOsStringCchLength(wszIssuanceLicenseDataTemp, IPC_OS_MAX_CCH, &cchIssuanceLicenseDataTemp)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszIssuanceLicenseDataTemp + static_cast<UINT>(ulSignatureOffset), uTotalLength - ulSignatureOffset, wszSignature)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszIssuerData + (UINT)cIssuerData, uIssuerDataBufferLength - cIssuerData, wszIssuerObjectTagStart)
hr=os::IpcOsStringCchLength(wszIssuerObjectTagStart, IPC_OS_MAX_CCH, &cchIssuerObjectTagStart)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszIssuerData + (UINT)cIssuerData, uIssuerDataBufferLength - cIssuerData, L"</ISSUER>")
hr = DRMtoSPObj.DRMEnableAndEncrypt( m_hEnv, uCryptoFlags, m_pbSymKey,m_cbSymKey,RMS_SYMMETRIC_KEY_BLOCKLENGTH, cExponent,pbModulusConst,cModulus, (const PBYTE)(wszIssuerData.get()),cIssuerData*sizeof(WCHAR), NULL,0, pbEnablingBits,&cbEnablingBits)
<PRINCIPAL internal-id="1"><ENABLINGBITS type="%s"><VALUE encoding="base64" size="%d">%s</VALUE></ENABLINGBITS></PRINCIPAL>
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchLength(m_pCCLCPubData->m_wstrIssuedPrincipalXML.c_str(), IPC_OS_MAX_CCH, &strLen)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszIssuerXML, strLen + 1, m_pCCLCPubData->m_wstrIssuedPrincipalXML.c_str())
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszIssuerData, uIssuerDataBufferLength, L"<ISSUER>")
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(static_cast<WCHAR *>(wszDescriptor), uDescriptorXMLLength, wszDescriptorXMLTemplate, static_cast<WCHAR *>(wszLID))
<SIGNATURE><ALGORITHM>RSA PKCS#1-V1.5</ALGORITHM><DIGEST><ALGORITHM>%s</ALGORITHM><PARAMETER name="codingtype"><VALUE encoding="string">surface-coding</VALUE></PARAMETER><VALUE encoding="base64" size="%d">%s</VALUE></DIGEST><VALUE encoding="base64" size="%d">%s</VALUE></SIGNATURE>
hr=os::IpcOsStringCchLength(pdrmCryptoVersion->wszHashAlg, IPC_OS_MAX_CCH, &cchHashAlg)
hr=os::IpcOsStringCchLength(wszEULDigest, IPC_OS_MAX_CCH, &cchEULDigest)
hr=os::IpcOsStringCchLength(wszDescriptor, IPC_OS_MAX_CCH, &cchDescriptor)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(static_cast<WCHAR *>(wszLicense), static_cast<UINT>(uLicenseLength), wszLicenseTemplate, m_wszIssuedTimeXML ? m_wszIssuedTimeXML : L"", L"", static_cast<WCHAR *>(wszDescriptor), wszIssuerObjectTagStart, wszGICIssuedPrincipal, m_wszReferralInfoXML ? m_wszReferralInfoXML : L"", m_wszMetaDataXML, static_cast<WCHAR *>(wszEnablingBitsXML), m_wszAppSpecificDataXML ? m_wszAppSpecificDataXML : L"")
<DESCRIPTOR><OBJECT type="Content-License"><ID type="MS-GUID">%s</ID></OBJECT></DESCRIPTOR>
hr=os::IpcOsStringCchLength(wszLID, IPC_OS_MAX_CCH, &cchLID)
</OBJECT>
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszOwner, uOwnerLength, wszOwnerTemplate, wszObjectNodeStart)
<SECURITYLEVEL name="SDK" value="%s" />
hr = os::IpcOsGetIpcPlatformVersion(&wszVersion)
hr=os::IpcOsStringCchLength(wszEULSigValue, IPC_OS_MAX_CCH, &cchEULSigValue)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(static_cast<WCHAR *>(wszSignature), uSignatureXMLLength, wszSignatureTemplate, pdrmCryptoVersion->wszHashAlg, cHashed*8, static_cast<WCHAR *>(wszEULDigest), cNumOfSigBytes*8, static_cast<WCHAR *>(wszEULSigValue))
<OWNER>%s</OWNER>
<OBJECT>
hr=os::IpcOsStringCchLength(wszPrincipalSource, IPC_OS_MAX_CCH, &cchPrincipalSource)
hr=os::IpcOsStringCchLength(wszEnablingBits, IPC_OS_MAX_CCH, &cchEnablingBits)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszIssuedPrincipalXML, uIssuedPrincipalXMLLength, wszIssuedPrincipalXMLTemplate, wszPrincipalStart, wszEnablingBits)
hr= publicKey.InitRSAPublic( m_uOfficialTemplateIssuerPubKeyExponent, m_cbOfficialTemplateIssuerPubKey*8, m_pbOfficialTemplateIssuerPubKey)
hr=os::IpcOsStringCchLength(wszVersion, IPC_OS_MAX_CCH, &cchVersion)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(static_cast<WCHAR *>(wszVersionXML), uXMLLength, wszVersionXMLTemplate, static_cast<WCHAR *>(wszVersion))
hr=os::IpcOsStringCchLength(wszVersionXML, IPC_OS_MAX_CCH, &cchVersionXML)
<ISSUEDPRINCIPALS><PRINCIPAL internal-id="1">%s%s</PRINCIPAL></ISSUEDPRINCIPALS>
hr = CDRMCChain::DRMConstructCertificateChain(1,const_cast<PWSTR *> (&wszLicense),&cChain,NULL)
*pwszLicenseChain = new (std::nothrow) WCHAR[cChain]
hr = CDRMCChain::DRMConstructCertificateChain(1,const_cast<PWSTR *>(&wszLicense),&cChain,*pwszLicenseChain)
hr = CXmlenc::UnescapeXML(m_MetaData.GetContentId(),&wszContentIdOut, &uContentIdLength)
<CONDITIONLIST>%s%s</CONDITIONLIST>
hr=os::IpcOsStringCchLength(wszOSExclusionConditionsXML, IPC_OS_MAX_CCH, &cchOSExclusionConditionsXML)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszOSExclusionConditionsXML + static_cast<UINT>(uCurrentBufferOffset), uOSExclusionXMLLength - uCurrentBufferOffset, wszOSExclusionXML)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszRefreshConditionXML, uRefreshConditionXMLLength, wszRefreshConditionXMLTemplate, L"", wszOSExclusionConditionsXML ? wszOSExclusionConditionsXML : L"")
m_pbModulusIssuedPrincipal = new BYTE[m_cModulusIssuedPrincipal]
onecoreuap\ds\security\rm\client\src\msipc\DrmObjects\drmcbase.h
wszContentIdOut
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszContentId, *puContentIdLength, wszContentIdOut)
m_pbModulusIssuer = new BYTE[m_cModulusIssuer]
os::IpcOsStringCchLength(m_wszInternalChainStart, IPC_OS_MAX_CCH, &cchInternalChainStart)
PRINT
UNINSTALL
EMBED
EXTRACT
RESTORE
DELETE
VERIFY
FOLDER
INSTALL
RETURN
DIRECTORY
BACKUP
EDITRIGHTSDATA
TRANSFER
EXPORT
msipc
RIGHT
VIEWRIGHTSDATA
JsonIssuanceLicense::JsonIssuanceLicense
JsonIssuanceLicense::EncryptPayload
pRacPubKeyBlob->InitRSAPublic(pCRACPubData->m_cExponentIssuedPrincipal, SafeInt<UINT>(BYTES_TO_BITS(pCRACPubData->m_cModulusIssuedPrincipal)), pCRACPubData->m_pbModulusIssuedPrincipal)
JsonIssuanceLicense::GetSignedIssuanceLicense
jsonClcLicense.get()
onecoreuap\ds\security\rm\client\src\msipc\publishing\jsonissuancelicense.cpp
JsonIssuanceLicense::SetJsonData
JsonIssuanceLicense::SetJsonUserRights
JsonIssuanceLicense::ParseLicense
JsonIssuanceLicense::DecryptAndParseData
hr = DRMtoSPObj._DRMDecryptECB( hDecryptor, 0, SafeInt<UINT>(encryptedBytes.size()), &encryptedBytes[0], &cbDecryptedData, (BYTE*)&strDecryptedData[0])
JsonIssuanceLicense::SignLicense
hr = CDRMtoSP::DRMCreateBoundLicense( hEnv, &BindParams, wszCLCChain, &hBoundLicense, NULL)
hr = DRMtoSPObj.DRMCreateEnablingBitsSigner( hBoundLicense, L"ISSUE", NULL, NULL, &hCLCSigner)
1.0.0.0
JsonIssuanceLicense::ParseUserRights
hr = drmStore.GetLicense(DRM_LICENSE_TYPE_JSON_CLC, wszSearchCriteria, abUseRawData, uSearchCriteriaCount, FALSE, &uCount, &rgwszLicense, NULL)
Can't find the required template. hr = 0x%x
JsonIssuanceLicense::ParseOfficialPolicy
onecoreuap\ds\security\rm\client\src\msipc\publishing\jsonissuancelicense.cpp
JsonIssuanceLicense::ParseCustomPolicy
JsonIssuanceLicense::GenerateOwnerLicense
Rac's Public key doesn't match with PL creators
CDRMtoSP::DRMDecryptWithRac(hRac, SafeInt<UINT>(vEncSessionKey.size()), &vEncSessionKey[0], CRYPT_OAEP, &cbDecSessionKey, &vDecSessionKey[0])
Owner Key is not available in PL.
msipc
CMicrosoftUrlHelper::GetExtranetDistributionPoint
onecoreuap\ds\security\rm\client\src\msipc\publishing\microsofturlhelper.cpp
needToReplaceWithRMSOUrl is %ws
Will replace external distribution point Url in license
https://48fc04bd-c84b-44ac-91b7-a4c5eefd5ac1.rms.na.aadrm.com/_wmcs/licensing
https://exchange.microsoft.com/_wmcs/licensing
https://corprights.microsoft.com/_wmcs/licensing
isClcUrlMicrosoftUrl is %ws
ReplaceWithMicrosoftRMSOURL: Replacing extranet Url %ws with Microsoft RMSO Url: %ws
CMicrosoftUrlHelper::ReplaceWithMicrosoftRMSOUrl
msipc
os::IpcOsGetErrorMessageText(GetErrorInfo().hrErrorCode, dwLanguageId, g_hMSIPPHandle, const_cast<LPCWSTR*>(&wszErrStr))
wszErrStr.is_valid()
Last Error Code set is 0x%x and the error message is %ws
Microsoft::InformationProtection::IpcErrorManager::GetLastIpcError
Internal error: Unexpected error message string index
onecoreuap\ds\security\rm\client\src\base\errormanager\ipcerrormanager.cpp
Internal error: Can not initialize Error Manager
onecoreuap\ds\security\rm\client\src\base\errormanager\ipcerrormanager.cpp
os::IpcOsGetErrorMessageFromStringTable(HRErrorToResourceString(errInfo.hrErrorCode), static_cast<WORD>(dwLanguageId), g_hMSIPPHandle, &wszErrStr)
wszErrStr != nullptr
Internal error: Incorrect error message format
msipc
home_tenantId
guest_tenantId
IsRMSO Getting server info silently to check whether the Urls point to RMSO.
Microsoft::InformationProtection::ippIsRMSO
onecoreuap\ds\security\rm\client\src\msipc\core\ippuseridentity.cpp
Microsoft::InformationProtection::GetCertAndLicURLsWithoutFallback
os::IpcOsGetCurrentUserId( &m_wszSID )
onecoreuap\ds\security\rm\client\src\msipc\core\ippuseridentity.cpp
Microsoft::InformationProtection::IPPUserIdentity::SetRAC
pRACLicense.get()
Got the Urls: CertURL = %ws LicURL = %ws
WindowsAuthProvider
Microsoft::InformationProtection::GetCertAndLicURLsWithFallback
Failed to get certification and licensing URLs using new service discovery. Falling back to using old service discovery.
This is the default identity
Microsoft::InformationProtection::IPPUserIdentity::InitializeIdentityForIdentityInfo
++++++++ INFORMATION: Getting UserIdentity (RAC & CLC) for ++++++++
          User: "%ws",
          IssuerId: "%ws"
          Intranet Url: "%ws",
          Extranet Url: "%ws", 
Intranet Licensing redirection detected from %ws to %ws
Microsoft::InformationProtection::IPPUserIdentity::SetCLC
pCLCLicense.get()
No Json CLC available hr = 0x%x
This identity is not allowed for Publishing
++++++++ INFORMATION: Getting UserIdentity (RAC & CLC) for ++++++++
          User: "%ws",
          IssuerId: "%ws"
          Intranet Url: "%ws",
          Extranet Url: "%ws", 
          Default SD: %ws,
          Require New Identity: %ws
Microsoft::InformationProtection::IPPUserIdentity::InitializeIdentityForServer
Microsoft::InformationProtection::IPPUserIdentity::InitializeIdentityFromCache
Extranet Licensing redirection detected from %ws to %ws
++++++++ INFORMATION: UserIdentity is successfully initialized. ++++++++
+IPPUserIdentity::InitializeIdentityForUserInfo entered
Microsoft::InformationProtection::IPPUserIdentity::InitializeIdentityForUserInfo
Microsoft::InformationProtection::IPPUserIdentity::GetIdentityFromRegistryOrStore
[msipc]:+IPPUserIdentity::GetIdentityFromRegistryOrStore Searching using Urls
+++++++++  Finding the user identity information in the registry cache ++++++++++
--------- Unable to find the user identity information in the registry ----------
+++++++++ INFORMATION: Couldn't find the UserIdentity in the cache. Getting it from the server. ++++++++
++++++++ INFORMATION: Successfully retrieved a new UserIdentity(RAC & CLC) from the server. ++++++++
++++++++ INFORMATION: Successfully retrieved UserIdentity (RAC & CLC) from the license store. ++++++++
[msipc]:+IPPUserIdentity::GetIdentityFromRegistryOrStore Searching using IssuerId
Default server in registry cache is %ws
IDentity Email: %ws ExtUrl: %ws
Microsoft::InformationProtection::IPPUserIdentity::GetServerIdentityRegValues
wszServerHostName
Microsoft::InformationProtection::IPPUserIdentity::GetIdentityFromRegistry
Identity information from the registry cache
       Email: %ws
       IntranetUrl: %ws
       ExtranetUrl: %ws
Email-ID didn't match
Microsoft::InformationProtection::IPPUserIdentity::GetServerIdentityRegValuesForURL
BootstrapIdentityFailure
Microsoft::InformationProtection::IPPUserIdentity::GetNewWindowsIdentity
The default server is not set and is not configured. Setting this as a default server.
Intranet DNS redirection detected from %ws to %ws
ppIdRegValues
Microsoft::InformationProtection::IPPUserIdentity::GetNewIdentity
++++++++++ INFORMATION NEEDS ONLINE +++++++++
--------- Done storing RAC & CLC ---------
This server/tenant is for consumption only. Not setting it as a default.
Reset the defaults as the new identity was acquired because of a license redirection.
Symmetric Key Token provided. Caching identity information for the token in registry.
Extranet DNS redirection detected from %ws to %ws
+++++++++ Getting new RAC and CLC +++++++++
---------- Done getting new RAC and CLC ---------
+++++++++ Storing new RAC & CLC +++++++++
Reg key not defined (%ws)
Reg value not defined (%ws)
Reg key not defined(%ws)
Retrieve RAC & CLC from the store...
Windows
Microsoft::InformationProtection::IPPUserIdentity::ReadIdentityRegValues
Setting the default identity information for the server.
       Server Url: %ws
       Server Url from CLC: %ws
       Email from CLC: %ws
       Overwrite global default: %ws
       Overwrite defaults for server: %ws
Microsoft::InformationProtection::IPPUserIdentity::SetDefaultsForServer
The defaults are already set. 
wszEmail
Microsoft::InformationProtection::IPPUserIdentity::ReadCLCAndRACFromStore
Failed to retrieve RAC & CLC from the store hr = 0x%x.
       IsFederated: %ws
       UPN: %ws
(wszIntUrl || wszExtUrl)
+SetServerIdentityRegKeysSetting HostName: %ws EMail: %ws ExtUrl %ws IntUrl %ws
Microsoft::InformationProtection::IPPUserIdentity::SetServerIdentityRegKeys
ippDupEnvHandle(m_hEnv, &(pCloneId->m_hEnv))
+SetUpnRegKeys HostName: %ws EMail: %ws UPN %ws IsFederated %ws
Microsoft::InformationProtection::IPPUserIdentity::SetUpnRegKeys
couldn't open key (%ws) - 0x%X
wszHostNameName
Microsoft::InformationProtection::IPPUserIdentity::InitializeUserIdentity
++++++++ INFORMATION: The machine activation succeeded. ++++++++
++++++++ INFORMATION: The machine cert is not valid. Trying to reactivate the machine... ++++++++
ippGetEnvHandle(wszMachineCert, pIpcContext, &hTempEnv)
CDRMtoSP::DRMDuplicateHandle(m_hSpRAC, &(pCloneId->m_hSpRAC))
CDRMtoSP::DRMDuplicateHandle(m_hSpCLC, &(pCloneId->m_hSpCLC))
IPP_MACHINE_CERT_LOCK_FOR_USER
++++++++ INFORMATION: The machine cert is not found.Trying to activate the machine... ++++++++
m_pRACLicense.get()
IsExpired hr = 0x%x
Microsoft::InformationProtection::IPPUserIdentity::IsExpired
IsRMSOIdentity hr = 0x%x
++++++++ License redirection detected. We need to renew the identity with the new redirection. ++++++++
Microsoft::InformationProtection::IPPUserIdentity::InitializeIDFromCLCAndRAC
++++++++ Initializing the UserIdentity using RAC & CLC ++++++++++
pIdRegValues
IsGlobalDefaultServerSet hr = 0x%x
Default server is configured in the registry: %ws
Microsoft::InformationProtection::IPPUserIdentity::IsDefaultServerConfigured
wszCertificationUrl from registry is NULL.
Microsoft::InformationProtection::IPPUserIdentity::IsRMSOIdentity
Default server is set
Microsoft::InformationProtection::IPPUserIdentity::IsGlobalDefaultServerSet
Default server is not set
CleanLicenseStoreForUrls Deleting all licenses corresponding to %ws
Microsoft::InformationProtection::IPPUserIdentity::CleanLicenseStoreForUrls
vpCLCLicenses.size() == vpRACLicenses.size()
VerifyServerIsTrusted No check needed. AllowOnlyTrustedServers reg key is not set or this is RMSO (we always trust RMSO).
Could not get a url from the registry. hr = 0x%x
Default server is the SCP : %ws
wszCertificationUrl from AD is NULL.
Could not get a url from AD. hr = 0x%x
MSIPC-Client
Microsoft::InformationProtection::IPPUserIdentity::VerifyServerIsTrusted
VerifyServerIsTrusted Looks like URLs point to an on-prem server. Verify that the given URLs are trusted.
wszServerURLExt && IppUtil::IsServerURLTrusted(wszServerURLExt) || wszServerURLInt && IppUtil::IsServerURLTrusted(wszServerURLInt)
Microsoft::InformationProtection::IPPUserIdentity::GetServerIdentityRegValuesForToken
IsFederated
DefaultIdentityServer
NeedsRenewal
Email
ExternalUrl
InternalUrl
msipc
os::IpcOsStringCchLength(wszString, IPC_OS_MAX_CCH, &cchString)
onecoreuap\ds\security\rm\client\src\msipc\core\ippumcommon.cpp
wszUserSid
os::IpcOsStringCchCopyN(wszTempName, cchLocalName, wszLocalName.c_str(), (cchLocalName - 1))
.rms-bvt.testv1.com
.aadrm.com
os::IpcOsStringCchLength(wszEnding, IPC_OS_MAX_CCH, &cchEnding)
.hostedrms.com
.aadrm.de
invalid vector<T> subscript
[msipc]:getLicensingRedirectionUrl Found Redirection Url %ws -> %ws
DRMtoSPObj.RMGetBoundRightKey( hBoundLicense, g_wszEDITRIGHTSDATARIGHT, pbKeyBlob, &cbKeyBlob)
DRMtoSPObj.RMGetBoundRightKey( hBoundLicense, g_wszEDITRIGHTSDATARIGHT, NULL, &cbKeyBlob)
0 != cbProvidedContentKey
0 != pbProvidedContentKey
CDRMtoSP::DRMInitEnvironment(wszMachineCert, &autohEnv)
((dwFlags & IPC_SL_FLAG_REUSE_KEY) != 0) == (hBoundLicense != 0)
onecoreuap\ds\security\rm\client\src\msipc\core\secureenv.cpp
pUserIdentity->GetCLCLicense().get()
hr = CDRMtoSP::DRMCreateBoundLicense( pUserIdentity->GetEnvironmentHandle(), &BindParams, pUserIdentity->GetCLCLicense()->GetLicense().c_str(), &hBoundLicense, NULL)
CDRMtoSP::DRMCreateEnablingPrincipal( pUserIdentity->GetEnvironmentHandle(), NULL, idStandardEP.wszID, &idNULL, const_cast<PWSTR>(wstrRac.c_str()), &hEnablingPrincipal)
ippRenewUser( pUserIdentity, IPP_GU_CONSUMPTION_MODE, pIpcContext)
ippRenewUser( pUserIdentity, 0, pIpcContext)
IsTestHooked()
SecureEnvHelper::InitializeEnablingPrincipal(pUserIdentity)
pUserIdentity->GetRACLicense().get()
CDRMtoSP::DRMCreateBoundLicense( hEnv, &oParams, eulLicense.GetCertificateChain().c_str(), &hBoundLicense, NULL)
Main-Rights
onecoreuap\ds\security\rm\client\src\base\Util\auto_localfree.h
os::IpcOsGetCurrentUserId( ppwszSid )
EDITRIGHTSDATA
vpCLCs.size() == vpRACs.size()
msipc
onecoreuap\ds\security\rm\client\src\msipc\core\ipplicensestore.cpp
GetTemplates
[msipp]:+IPPLicenseStore::GetTemplates
[msipp]: Error occured while deleteing the RAC HR=0x%x
[msipp]:+IPPLicenseStore::AddRAC
(0 != vClcs.size()) == (0 != vRacs.size())
[msipp]: Error occured while deleteing the CLC HR=0x%x
[msipp]:No of Licenses found: %d
[msipp]:+IPPLicenseStore::GetFirstCLCWithRAC
[msipp]:+IPPLicenseStore::AddCLCWithRAC
[msipp]:+IPPLicenseStore::DeleteRAC
wszCLCIssuerUrl
AddCLCWithRAC
Microsoft::InformationProtection::IPPLicenseStore::GetCLCForRAC
GetCLCWithRAC
GetCLCForRAC
vRacObjs.size() > 0
vClcObjs.size() > 0
Microsoft::InformationProtection::IPPLicenseStore::GetCLCWithRAC
[msipp]:Failed to parse the %d license set. hr = 0x%x
[msipp]: Error occured while deleteing the EUL HR=0x%x
AddEULWithRAC
[msipp]:+IPPLicenseStore::GetEULWithRAC
GetEULWithRAC
Microsoft::InformationProtection::IPPLicenseStore::DeleteCLC
Microsoft::InformationProtection::IPPLicenseStore::GetFirstJsonCLC
[msipp]:+IPPLicenseStore::AddEULWithRAC
DeleteCLC
[msipp]:+IPPLicenseStore::GetMachineCert
DeleteAllLicenses
DeleteEUL
[msipp]:IPPLicenseStore::GetEULWithRAC No license found
GetMachineCert
[msipp]:+IPPLicenseStore::DeleteEUL
[msipp]:ERROR: Not able to delete Machine Cert hr = 0x%x
[msipp]:ERROR: Not able to delete EULs hr = 0x%x
[msipp]:ERROR: Not able to delete GICs hr = 0x%x
[msipp]:+IPPLicenseStore::DeleteAllLicenses
[msipp]:ERROR: Not able to delete JSON CLCs hr = 0x%x
[msipp]:ERROR: Not able to delete CLCs hr = 0x%x
[msipp]:Failed to delete the file hr = 0x%x
[msipp]:IPPLicenseStore::DeleteLicense: Failed to parse the license, So deleting: %ws
DeleteLicense
CreateLicenseWithRacFromStoreObject
[msipp]:IPPLicenseStore::CreateLicenseWithRacFromArray: Failed to parse the license pair.                         Ignoring this pair and continuing. hr = 0x%x
pspLicense
spLicObj.get()
onecoreuap\ds\security\rm\client\src\msipc\core\ippmsdrmwrapper.cpp
pUserIdentity
ippEULAndRACCanBind
ippEULAndRACCanBind
onecoreuap\ds\security\rm\client\src\msipc\core\ippmsdrmwrapper.cpp
ippGetEULFromStoreWithContentID
RAC cannot bind to EULIssuedPrincipal public key didn't match with RAC.
RAC cannot bind to EUL, content Id didn't match (%ws) didn't match eul (%ws)
ippGetEULForIdentity
Getting the EUL from Context
Email in RAC = %ws Email in EUL = %ws
pEULLicense
RAC cannot bind to EUL user identity (%ws) didn't match eul (%ws)
Email in PL Content ID = %ws EUL Content ID = %ws
ippGetEULForRACs Using Redirection Urls
spLicAcqObj->ItemCount()
ippGetEULsForIdentities
GetUserConsentForUrls(pwszLicIntUrl, pwszLicExtUrl, pIpcContext)
NOLICCACHE is set. Saved EUL in Context
Cannot get EUL with the specified RAC in the hUser.HR = %x
ippGetEULsForIdentities
ippGetEULForIdentities
+++++++++++ Service discovery using ++++++++
       Token type: %ws
       Intranet Url: %ws
       Extranet Url: %ws
ippGetCertAndLicURLsWithNewSD
GetUserConsentForUrls(wszIntURL, wszExtURL, pIpcContext)
(wszIntURL || wszExtURL)
ippGetEULForRACs
spLicAcqObj->ItemCount() == vpEULs.size()
Done ippGetEULForRACs
puiCorrRACIndex
------- Service discovery for Certification done: ---------
       CertificationIntranetUrl: %ws
       CertificationExtranetUrl: %ws
+++++++++ Service discovery for Certification ++++++++++
------- Service discovery for Certification and Licensing done: ---------
       CertificationIntranetUrl: %ws
       CertificationExtranetUrl: %ws
       LicensingIntranetUrl: %ws
       LicensingExtranetUrl: %ws
+++++++++ Service discovery for Certification and Licensing ++++++++++
ippGetCertAndLicURLs
--------- Service discovery done --------
ippGetNewRACAndCLC
+++++++++++++++++ Getting a new RAC +++++++++++++++++++
GetUserConsentForUrls(wszLicensingIntURL, wszLicensingExtURL, pIpcContext)
------------------ Got a new RAC from server %ws: ----------------
          RAC user: "%ws",
          RAC user type: "%ws",
          RAC Issuer name: "%ws",
          RAC Issuer Id: "%ws",
          RAC Intranet Certification Url: "%ws",
          RAC Extranet Certification Url: "%ws".
+++++++++ Service discovery for Licensing ++++++++++
GetUserConsentForUrls(wszUserCertIntURL, wszUserCertExtURL, pIpcContext)
GetUserConsentForUrls(wszCertificationIntURL, wszCertificationExtURL, pIpcContext)
------- Service discovery for Licensing done: ---------
       LicensingIntranetUrl: %ws
       LicensingExtranetUrl: %ws
Key rollover occurred for %ws. Deleting templates
Number of existing matching CLCs, %d
ippGetNewRAC
Returned from deleting templates. hr = 0x%x
---------------- Got a new CLC from server %ws: -----------------
          CLC user: "%ws",
          CLC Issuer name: "%ws",
          CLC Issuer Id: "%ws",
          CLC Intranet Licensing Url: "%ws",
          CLC Extranet Licensing Url: "%ws".
+++++++++++++++++ Getting a new CLC +++++++++++++++++++
Failed to enumerate existing identities hr = 0x%x
Checking for Key rollover. Looking for CLCs matching URL: %ws
ippActivateMachine
User is not allowed to publish as CLC request is rejected by the Server. Generating a Temporary CLC.
Error encountered while deleting existing certs, hr = 0x%08x
Skipping Machine activation because of Offline mode
wszEmailId
(wszServerExtURL || wszServerIntURL)
ippGetNewCLC
ippGetNewRAC
Not able to delete CLCs, hr = 0x%08x
Not able to delete GICs, hr = 0x%08x
Not able to delete 1024-bit machine cert, hr = 0x%08x
Error encountered while activating the machine, hr = 0x%08x
Not able to delete 2048-bit machine cert, hr = 0x%08x
DeleteCertsForMachineActivation
ippIsLicensingAnonymous hr = 0x%x
drmSoap.DispatchGetRequest()
wszCertUrl
ippIsLicensingAnonymous
drmSoap.SetServerInfo(wstrLicensingUrl.c_str(), HTTP_NO_UI | HTTP_GET)
os::IpcOsStringCchPrintf(wszModulusSize, ARRAYSIZE(wszModulusSize), L"%d", uModulusSize)
wszIntranetUrl && wszExtranetUrl
os::IpcOsStringCchPrintf( wszSerializedCLC.get(), cchCLC, g_wszCLC, wszCLCGuid.c_str(), racLicense.GetIssuerId().c_str(), wstrIssuerNameEscaped.c_str(), wszModulusSize, wstrModulus.c_str(), wstrLicensingIntranetUrlEscaped.c_str(), wstrLicensingExtranetUrlEscaped.c_str(), wstrIssuedPrincipalTypeEscaped.c_str(), wstrIssuedPrincipalIdEscaped.c_str(), wstrEmailIdEscaped.c_str(), wszModulusSize, wstrModulus.c_str(), wszModulusSize, wstrModulus.c_str())
/licensing
E_DRM_INVALID_LICENSE
ippGenerateCLCForRAC
Generating a dummy CLC for consumption only access.
<XrML xmlns="" version="1.2">     <BODY type="LICENSE" version="3.0">         <ISSUEDTIME>2010-11-02T17:47</ISSUEDTIME>         <DESCRIPTOR>             <OBJECT type="Client-Licensor-Certificate">                 <ID type="MS-GUID">%ws</ID>             </OBJECT>         </DESCRIPTOR>         <ISSUER>             <OBJECT type="MSIPC-Client">                 <ID type="MS-GUID">%ws</ID>                 <NAME>%ws</NAME>                 <ADDRESS type="URL">https://someserver.com/_wmcs</ADDRESS>             </OBJECT>             <PUBLICKEY>                 <ALGORITHM>RSA</ALGORITHM>                 <PARAMETER name="public-exponent">                     <VALUE encoding="integer32">65537</VALUE>                 </PARAMETER>                 <PARAMETER name="modulus">                     <VALUE encoding="base64" size="%ws">%ws</VALUE>                 </PARAMETER>             </PUBLICKEY>             <SECURITYLEVEL name="Server-Version" value="6.1.0.0" />             <SECURITYLEVEL name="Server-SKU" value="RMS 2.0" />         </ISSUER>         <DISTRIBUTIONPOINT>             <OBJECT type="License-Acquisition-URL">                 <ID type="MS-GUID">{0F45FD50-383B-43EE-90A4-ED013CD0CFE5}</ID>                 <NAME>DRM Server Cluster</NAME>                 <ADDRESS type="URL">%ws</ADDRESS>             </OBJECT>         </DISTRIBUTIONPOINT>         <DISTRIBUTIONPOINT>             <OBJECT type="Extranet-License-Acquisition-URL">                 <ID type="MS-GUID">{94BF969A-CA04-44d6-AA96-51071281FEF2}</ID>                 <NAME>DRM Server Cluster</NAME>                 <ADDRESS type="URL">%ws</ADDRESS>             </OBJECT>         </DISTRIBUTIONPOINT>         <ISSUEDPRINCIPALS>             <PRINCIPAL internal-id="1">                 <OBJECT type="Group-Identity">                     <ID type="%ws">%ws</ID>                     <NAME>%ws</NAME>                 </OBJECT>                 <PUBLICKEY>                     <ALGORITHM>RSA</ALGORITHM>                     <PARAMETER name="public-exponent">                         <VALUE encoding="integer32">65537</VALUE>                     </PARAMETER>                     <PARAMETER name="modulus">                         <VALUE encoding="base64" size="%ws">%ws</VALUE>                     </PARAMETER>                 </PUBLICKEY>             </PRINCIPAL>         </ISSUEDPRINCIPALS>         <WORK>             <OBJECT type="Client-Licensor-Certificate">                 <ID type="MS-GUID">{8f54eeb7-378b-4e37-96f5-78f8f5ca3c0b}</ID>             </OBJECT>             <RIGHTSGROUP name="Main-Rights">                 <RIGHTSLIST>                     <RIGHT name="ISSUE">                         <CONDITIONLIST>                             <TIME>                                 <RANGETIME>                                     <FROM>2010-11-01T17:47</FROM>                                     <UNTIL>2011-11-02T17:47</UNTIL>                                 </RANGETIME>                             </TIME>                             <ACCESS>                                 <PRINCIPAL internal-id="1">                                     <ENABLINGBITS type="sealed-key">                                         <VALUE encoding="base64" size="6144">LbfbhLQGn391BNucH6QGmovJx3SNtbAxZqU+DVTiMZId+Myx+B2ij+ajxexEa78/9JCjMsT4NELl3wew0DRwr4KDb7fHUHuG2uwpanWNOy9+THf16sEVqzxKLsh+LLZzBycCxXX1PB3W46Kf4mY+/yHRGl4Fp9gLIc9bJfKlJZGjyLWiE1iaZ727NXo8z411v0AYgfWV15rx+f6e+ejKwfsQ8qWaDqHmquGLdZmr+7M3c3iZWUkQ4OflC/F+Jym4T37Tp+Gv+vWUtcxmNxrJVE9nCHnvOTwcdPKt1EQK+QtgzmeAN1VuRyj3fdwFEltiFOqLIMZn6WJtvjhKo9e31rtV+TNSmyimItG0UfEQBFwvz8D/Fw2iM/nkRNtsc0LLdgfm8Y5ZOo3U4r6dmbXqKndkMxvbeE0lms4HigPFU3BnnRHQ8/DRq/69OtFNyC4/bhJJ38IgFkix577ri4l40AAoErOq0F4zqO8KSXdBTU8RbQgFS3KMWO4na+otU0gMALGLAb+6ksTww1foOcui7NKJHTGg7J3P6nYvB6FUWmPZVKHVhObTK3wZEO4bnk87VJgPSiMiToBDdap1aDUhhxr78vE/UwGKOn4Xf/eJxUlprFSBV5zJl1X3i94qu9e1LpJAEc74FVBpYJHI4EUQ8VFr/ehd2WeOe15kFTC6nO9bDfk8kYVmEqNPk613FyAvXeqiHFLyNJJGEia+OOOpYucWRuMDctmQXTuY0+KvkThPIJL2hoHzbogIs4deOxsYD2tshNpm27DzeZiI8t78U5ukzmguTL2xpTcwUKggy8ZbxuOYvaNuj0Zxw18NFpRuFFsgbVL2DU9dY1mouvOurYz4KOc32p4R7NZ9x7jruiFwrYCWqow7XZ47bzwV4jv3ruAhcJCeoL/6l73z8csYrpeb0UXEnquMltvNKIZkdDh9zQy4b4FZsgGp/vw7uuDSZ15wjky2IThuPVn6m6dYhurBoIVeGya+qkldmHU+tSLbmqx3CaxJ0PyMIvN3cKna</VALUE>                                     </ENABLINGBITS>                                 </PRINCIPAL>                             </ACCESS>                         </CONDITIONLIST>                     </RIGHT>                 </RIGHTSLIST>             </RIGHTSGROUP>         </WORK>     </BODY>     <SIGNATURE>         <DIGEST>             <ALGORITHM>SHA1</ALGORITHM>             <PARAMETER name="codingtype">                 <VALUE encoding="string">surface-coding</VALUE>             </PARAMETER>             <VALUE encoding="base64" size="160">Y4Sbj54Pqt/GF+kdOVkmjzEXmbA=</VALUE>         </DIGEST>         <ALGORITHM>RSA PKCS#1-V1.5</ALGORITHM>         <VALUE encoding="base64" size="%ws">%ws</VALUE>     </SIGNATURE> </XrML>
__NoSuchMailId__@dontexit.foo
msipc
cbSize >= (sizeof(WCHAR) * m_cchData)
0 == (cbSize % sizeof(WCHAR))
onecoreuap\ds\security\rm\client\src\msipc\core\ipcstringallocator.cpp
NULL == m_wszData
onecoreuap\ds\security\rm\client\src\msipc\core\offlinepl.cpp
os::IpcOsStringCchCopy( wszCombinedLicense, IPC_OS_MAX_CCH, wsCombinedLicense.c_str())
<XrML 
IPP_GU_TEMPLATE is handled at public API level, this type should not have come here
onecoreuap\ds\security\rm\client\src\msipc\core\ippusermanagement.cpp
Server identity not defined in registry (%ws)
onecoreuap\ds\security\rm\client\src\msipc\core\ippusermanagement.cpp
ippGetUser
Microsoft::InformationProtection::ippGetUser
Couldn't find identity information for the Symmetric Key Token info cached in the registry
Found identity information for the symmetric key token info cached in the registry.
        Email: %ws
        IntranetUrl: %ws
        ExtranetUrl: %ws
Microsoft::InformationProtection::ippRenewUser
ippRenewUser(ppUserIdentity.get(), dwFlags, pIpcContext)
Identity information incomplete - refreshing the cache
Microsoft::InformationProtection::ippGetUserForUserInfoWithCache
Symmetric Key token is detected, let's see if we have identity information cached for this token...
Microsoft::InformationProtection::ippGetUserForUserInfo
ippGetUserForLicense
ippRenewUser HR=%x
Consuming with regular discovery flow
Microsoft::InformationProtection::ippGetUserForLicense
++++++++ INFORMATION: Renewing the UserIdentity succeeeded++++++++
++++++++ INFORMATION: Renewing the following UserIdentity : ++++++++
           User: "%ws",
           Intranet Url: "%ws",
           Extranet Url: "%ws".
RenewIdentityFailure
++++++++ Renewing the UserIdentity failed with hr = 0x%x ++++++++
pcUserInfo
hrGetUserSD
Microsoft::InformationProtection::ippGetUserForLicenseUsingServiceDiscovery
Trying Owner EUL
Trying TUD hr = 0x%x
Done consuming with regular discovery flow hr = 0x%x
IPCERROR_RIGHT_NOT_GRANTED == hr ? hr : hrGetUserSD
Done trying TUD ippGetUserForLicenseUsingTud hr = 0x%x
Trying to generate Owner EUL from PL locally
Couldn't find a EUL in the store
Couldn't Generate the EUL from PL locally
++++++++ INFORMATION: Successfully generated the EUL from the license ++++++++
Owner EUL didn't work
++++++++ INFORMATION: Successfully retreived the Owner EUL from the PL ++++++++
++++++++ INFORMATION: Successfully retreived the EUL from the license store ++++++++
Trying to get the EUL from the store
Trying to check if DNS redirection exist.
Couldn't get an EUL from the server.
Couldn't find a EUL in the store for deletion
Trying to get the EUL from the server
ProActive EUL renewal from server
++++++++ INFORMATION: Successfully retreived the EUL from the server++++++++
Microsoft::InformationProtection::ippGetEULfromServer
Microsoft::InformationProtection::ippGetEULForLicenseDns
Found DNS redirection. Setting licensing redirection registry key for user.
Cannot get ServerInfo, so skipping enterprise server check
Token Type is not supported : %ws
Licensing endpoint is not anonymous.So skipping TUD check.
Not an enterprise server, so skipping TUD check
Setting extranet licensing redirection %ws to %ws
Setting intranet licensing redirection %ws to %ws
Microsoft::InformationProtection::ippGetUserForLicenseUsingTud
Licensing URL from PL is %ws
Microsoft::InformationProtection::ippGetUserFromUserListForLicense
Trying TUD or Social IDP with user %ws
ippGetEULForIdentities hr = 0x%x
++++++++ INFORMATION: Trying TUD or Social IDP with %d UserIdentities (RACs) in the store valid for TUD ++++++++
TUD using identities
Get Default Identity hr = 0x%x
FAILED(retHr) ? retHr : HRESULT_FROM_WIN32(ERROR_NOT_SUPPORTED)
Tried to acquire EUL using existing identities hr = 0x%x
Cannot Use Token for ILS Server
Microsoft::InformationProtection::ippGetEULForLicense
Renewing user %ws from %ws
Renew expired users and try TUD.
Renewing user Failed hr = 0x%x
Microsoft::InformationProtection::ippRenewUserAndLicenseUsingTud
Microsoft::InformationProtection::ippPreProcessUserListForTud
Skipping the "%ws" user as it's federated.
Skipping the "%ws" user as it's an ILS user and PassportCertification is disabled.
Skipping the "%ws" user as it's an Azure RMS user.
ippGetEULFromStoreWithContentID failed with unhandled error.
crypto upgrade is detected
ippGenerateOwnerEULForLicense(plLicense, pUserIdentity, pIpcContext, pEULLicense)
Microsoft::InformationProtection::ippGetEULFromPL
msipc
IUserIdentitiesIncorrectBufferSizeException
IUserIdentitiesException
IUserIdentitiesNotEnoughMemoryException
Found %lu RAC & CLC pairs in the store
[msipc]:+UserIdentities::init Initialize Identity for %ws from Issuer %ws
Microsoft::InformationProtection::UserIdentities::init
onecoreuap\ds\security\rm\client\src\msipc\core\useridentities.cpp
[msipc]:+UserIdentities::GetTemplateIssuers Skipping identity as its for consumption only.
++++++++++ Enumerating user identities for: +++++++++++
       EmailId: %ws
       IntranetUrl: %ws
       ExtranetUrl: %ws
       PublishingOnly: %ws
onecoreuap\ds\security\rm\client\src\msipc\core\useridentities.cpp
!(cbData % sizeof(WCHAR))
IUserIdentities::GenerateIpcUserList - Not enough memory allocated.
Failed to initialze Identity hr = 0x%x
retHr
msipc
ipp::IppUtil::ConvertBufferToString(pvLicense, &wszLicense)
[msipp]:Win7IppLicense::GetReferralInfoUrl Using default value: %s
onecoreuap\ds\security\rm\client\src\msipc\msipcobjects\win7ipplicense.cpp
[msipc]: Error - could not generate the EUL for user '%ws'. HRESULT = 0x%08X
[msipc]: Error - cannot generate the EUL for user of type %u, ID='%ws' - only email users are currently supported.
Microsoft::InformationProtection::Win7IppLicense::Serialize
onecoreuap\ds\security\rm\client\src\msipc\msipcobjects\win7ipplicense.cpp
ippRenewUser(m_pUser->GetIppUserIdentity(), 0, pIpcContext)
UserLicense for this identity is not available to serialize in IPC_SL_FLAG_ISSUANCE_LICENSE_V2 format
[msipc]:+Win7IppLicense::IsFromRmso ServerInfo Not found hr = 0x%x
[msipc]:+Win7IppLicense::IsFromRmso ServerInfo IsRmso = %d
[msipp]::Win7IppLicense::GetReferralInfoUrl no referral info URL found
[msipp]::Win7IppLicense::GetReferralInfoUrl referral info found in license: %s
os::IpcOsStringCbLength(wszLicense, IPC_OS_MAX_CCH, &cbTemp)
ipp::IppUtil::ConvertBufferToString(spKey->GetLicense(), &wszLicense)
ippSerializeLicense( hLicense, m_pUser->GetIppUserIdentity(), dwFlags, (m_fGenerateNewContentId || m_State.GetContentId().empty()) ? NULL : m_State.GetContentId().c_str(), const_cast<BYTE *>(&m_vbContentKeyBits[0]), m_cbContentKeyBits, GetCipherInfo(), dwFlags & IPC_SL_FLAG_REUSE_KEY ? m_hBoundLicense : 0, &wszLicense, pOwnerEUL, pIpcContext, true)
ippSerializeLicense( hLicense, m_pUser->GetIppUserIdentity(), dwFlags, (m_fGenerateNewContentId || m_State.GetContentId().empty()) ? NULL : m_State.GetContentId().c_str(), GetCipherInfo(), dwFlags & IPC_SL_FLAG_REUSE_KEY ? m_hBoundLicense : 0, &wszLicense, pOwnerEUL, pIpcContext)
m_fCanRepublish
Not persisting the owner EUL as the owner  doesn't have owner rights or AutoGrantOwnerFullAccess = 0.
m_pUser.get() != 0
m_hBoundLicense != 0
CDRMCPub::DRMResetValidityTime(hLicense)
hr = os::IpcOsFileTimeAsSystemTime( static_cast<const IPCOS_FILETIME *>(&(pTerm->ftStart)), &stStart )
hr = os::IpcOsFileTimeAsSystemTime( &ftEnd, &stEnd )
[msipp]:Win7IppLicense::SetContentKey updating cipher info 
[msipp]:Win7IppLicense::Setting SetRepublishScenario
[msipp]:Win7IppLicense::SetContentKey republishing not permitted for this key 
CDRMtoSP::DRMDuplicateHandle(spKey->GetBoundLicenseHandle(), &m_hBoundLicense)
[msipp]:Win7IppLicense::DetermineIssuerName Using PL connection info as issuer name
[msipp]:Win7IppLicense::DetermineIssuerName Reading IssuerName from Template %ws
failed
[msipp]:Win7IppLicense::DetermineIssuerName Reading IssuerName from PL %ws
CDRMCPub::DRMGetLicenseId(m_hLicenseInitial, OUT m_wstrLicenseId)
succeeded
CDRMtoSP::DRMDuplicateHandle(pKey->GetBoundLicenseHandle(), &m_hBoundLicense)
[msipp]:Win7IppLicense::init  RepublishOnly in CLC set to true
[msipp]:Win7IppLicense::init  Issuers of user and original PL are %ws
[msdrm]:DRMCreateEnablingBitsDecryptor for EXTRACT SUCCEEDED
different
[msipp]:Win7IppLicense::DetermineIssuerName Using user connection info as issuer name
[msipp]:Win7IppLicense::DetermineIssuerName Cannot read IssuerName from either PL, Template or Identity
[msipp]:Win7IppLicense::DetermineIssuerName Using template connection info as issuer name
[msipp]:Win7IppLicense::DetermineIssuerName Reading IssuerName from UserIdentity %ws
ipp::IppUtil::ConvertBufferToString(pcvLicense, &wszLicense)
os::IpcOsStringCchLength(wszEUL, IPC_OS_MAX_CCH, &cbEUL)
CDRMCPub::DRMSetIntervalTime(hLicense, m_State.GetIntervalTime())
CDRMCPub::DRMSetNameAndDescription( m_hLicenseInitial, fDelete, pDescriptor->lcid, pDescriptor->wszName, pDescriptor->wszDescription)
CDRMCPub::DRMSetNameAndDescription( hLicense, FALSE, lc, wszNm, wszDes)
[msipp]:Win7IppLicense::updateLicenseFromIntervalTime IntervalTime is not set
[msdrm]:DRMCreateEnablingBitsDecryptor for EXTRACT FAILED : %x
CDRMtoSP::DRMCreateEnablingBitsDecryptor(m_hBoundLicense, 0, 0, 0, &hDecryptor)
pdwNameType
CheckTemplateOwnerRight
nullptr != pUserIdentity
pdwIdType
EXTRACT
msipc
UserIdentityNotFoundForTemplateIssuerException
onecoreuap\ds\security\rm\client\src\msipc\msipcobjects\win7templateissuermanager.cpp
onecoreuap\ds\security\rm\client\src\msipc\msipcobjects\win7ippuser.cpp
m_pUser.get()
ServerInfo Not found for a previously bootstrapped server: hr = 0x%x
Microsoft::InformationProtection::Win7IppUser::IsEnterpriseFederatedUser
ippGetUser(IPP_GU_LICENSE, pLicenseInfo, dwFlags, ipcContext, m_pUser)
ippGetUser(IPP_GU_CONNECTION_INFO, pConnectionInfo, dwFlags, ipcContext, m_pUser)
onecoreuap\ds\security\rm\client\src\msipc\msipcobjects\win7ippuser.cpp
os::IpcOsStringCchCopy(pwszOut, (cbInfo - cchUsed) / 2, wszEmailId.c_str())
ippRenewUser(m_pUser.get(), dwFlags, pIpcContext)
os::IpcOsStringCchCopy(pwszOut, (cbInfo - cchUsed) / 2, wszId.c_str())
msipc
++++++++ INFORMATION: Getting templates for the following UserIdentity: ++++++++
          User: %ws,
          Intranet Url: %ws,
          Extranet Url: %ws.
Microsoft::InformationProtection::TemplateManager::GetTemplateList
onecoreuap\ds\security\rm\client\src\msipc\msipcobjects\win7ippstore.cpp
pcUser
os::IpcOsStringCchCopy(wszTemplate, cchTemplateBuffer, vpTemplates[i]->GetLicense().c_str())
++++++++ INFORMATION: Getting templates for all UserIdentities ++++++++
+++++++++ Ensuring the templates are up-to-date for the Idenitity: +++++++++
       EmailId: %ws
       IntranetUrl: %ws
       ExtranetUrl: %ws
++++++++ INFORMATION: Identity is not allowed for publishing. ++++++++
++++++++ INFORMATION: Getting templates succeeded. ++++++++
++++++++ INFORMATION: We have unmanaged templates in the store. ++++++++
hrDownloadTemplates
onecoreuap\ds\security\rm\client\src\msipc\msipcobjects\win7ippstore.cpp
GetTemplateList
Identity is for consumption only. Skipping template download.
The user needs to be renewed before we can get the templates. Marking appropriately in the registry.
Templates in UnManagedStore %ws the same public key as the user.
Returning IPCERROR_NEEDS_ONLINE, store is stale
don't have
Microsoft::InformationProtection::TemplateManager::DownloadTemplatesIfNeeded
Found templates in UnManagedStore.
Microsoft::InformationProtection::TemplateManager::copyTemplateInfoToList
Microsoft::InformationProtection::TemplateManager::isV1Server
------------- Ensuring the templates are up-to-date done hr=0x%x: ----------
[msipc]: ++++++++ INFORMATION: Adding template: ++++++++
          Id: "%ws",
          Name: "%ws",
          Description: "%ws",
          IssuerName: "%ws".
Public key with template didn't match after renewing the user.
IPCERROR_BROKEN_CERT_CHAIN
downloadTemplates(pcUser)
Identity is for consumption only. Skipping download templates.
No Connection info specified
--------- Done downloading templates hr = 0x%x ----------
Federated User from enterprise server, skip downloading templates
GetUserConsentForConnectionInfo(connectionInfo.Get(), m_pIpcContext)
V1 Serever doesn't have Templates
++++++++ INFORMATION: Downloading templates for the following UserIdentity: ++++++++
          User: %ws,
          Intranet Url: %ws,
          Extranet Url: %ws.
Microsoft::InformationProtection::TemplateManager::downloadTemplates
TemplateStore is stale - last update time is not valid
TemplateStore is stale - last update time is past current time
Microsoft::InformationProtection::TemplateManager::isTemplateStoreStale
TemplateStore is stale - templates version is not current.
[msipc]:TemplateManager :: isTemplateStoreStale TemplateStore is Stale
TemplateStore is stale - can't find last update time hr=0x%x
[msipc]: ++++++++ WARNING: Skipping a template because it doesn't have a name and a description of the requested language. ++++++++
Microsoft::InformationProtection::TemplateManager::GetTemplateIssuersFromTemplates
[msipp]:TemplateManager::GetConfiguredUpdateFrequencyInDays can't find the MSIPC reg key 0x%x
[msipp]:TemplateManager::GetConfiguredUpdateFrequencyInSeconds can't find the MSIPC reg key 0x%x
Microsoft::InformationProtection::TemplateManager::usersPublicKeyMatchWithTemplates
Failed matching the CLC issuer public key with the template issuer key hr = 0x%x
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchPrintf(wszCurrTime, 260, L"%04d-%02d-%02dT%02d:%02d", currTime.wYear, currTime.wMonth, currTime.wDay, currTime.wHour, currTime.wMinute)
The CLC issuer public key doesn't match with the template issuer key. The key has been rolled.
TemplateStore is stale - templates are not up-to-date
msipc
m_setRights.size() > 0
CDRMtoSP::DRMCreateEnablingBitsDecryptor(m_hBoundLicense, 0, 0, 0, &m_hDecryptor)
onecoreuap\ds\security\rm\client\src\msipc\msipcobjects\win7ippkey.cpp
ippGetKey( *pPLLicense, m_pUser->GetIppUserIdentity(), ipcContext, FALSE, &m_hBoundLicense, pEULLicense, m_setRights, m_appSpecificData)
CDRMtoSP::DRMGetInfo( h, g_wszQUERY_BLOCKSIZE, &eType, &cbcbBlock, reinterpret_cast<BYTE*>(&m_cbBlock))
CDRMtoSP::DRMCreateEnablingBitsDecryptorWithCipherMode(pNewKey->m_hBoundLicense, 0, 0, 0, dwCipherMode, &(pNewKey->m_hDecryptor))
CDRMtoSP::DRMDecrypt( m_hDecryptor, uiPosition, fFinal, fHash, cb, reinterpret_cast<BYTE*>(pvCiphertext), reinterpret_cast<UINT*>(pcbResult), reinterpret_cast<BYTE*>(pvPlaintext), reinterpret_cast<UINT*>(pcbHash), reinterpret_cast<BYTE*>(pvHash) )
CDRMtoSP::DRMEncrypt( m_hEncryptor, reinterpret_cast<UINT>(pvIV), fFinal, fHash, cb, reinterpret_cast<BYTE*>(pvPlaintext), reinterpret_cast<UINT*>(pcbResult), reinterpret_cast<BYTE*>(pvCiphertext), reinterpret_cast<UINT*>(pcbHash), reinterpret_cast<BYTE*>(pvHash))
argument pvIV out of range
pvOverflowCheck == pvIV
CDRMtoSP::DRMCreateEnablingBitsEncryptor(m_hBoundLicense, 0, 0, 0, &m_hEncryptor)
[msipc]: Create Encryptor Failed hr = 0x%x
DRMtoSPObj.RMGetBoundRightKey( m_hBoundLicense, IPC_WRITE_RIGHTS, &keyBlob[0], &cbKeyBlob)
HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER)
DRMtoSPObj.RMGetBoundRightKey( m_hBoundLicense, IPC_WRITE_RIGHTS, NULL, &cbKeyBlob)
cbKeyBlob > sizeof(UDSymBlobHdr)
Microsoft::InformationProtection::Win7IppLicenseWithMetadata::Serialize
msipc
[msipc]:CDRMRegisterPLRestRequest::CanRegisterPL returning false for OnPrem server URL: %ws
onecoreuap\ds\security\rm\client\src\msipc\register\registerplrestrequest.cpp
https://api.aadrm.com/my/v1/publishedpolicies
CDRMRegisterPLRestRequest::CanRegisterPL
ServerForRegisterPL
Content-Type: application/json;charset=UTF-8
onecoreuap\ds\security\rm\client\src\msipc\register\registerplrestrequest.cpp
StringCchPrintfExW(&wstrJsonObjectString[0], lengthOfObject + 1, NULL, &unusedCharactersCount, STRSAFE_NULL_ON_FAILURE, JSON_OBJECT_FORMAT_STRING, wstrJsonPL.c_str(), wstrJsonContentName.c_str(), wstrJsonSendRegistrationMail.c_str())
CDRMRegisterPLRestRequest::BuildJsonObject
StringCchLengthW(JSON_OBJECT_FORMAT_STRING, STRSAFE_MAX_CCH, &lengthOfObject)
[msipc]:CDRMRegisterPLRestRequest::GetRegisterPLEndPointURL server URL: %ws
{"SerializedPublishingLicense":"%ws","ContentName":"%ws","SendRegistrationMail":%ws}
CDRMRegisterPLRestRequest::GetRegisterPLEndPointURLFromRegistry
CDRMRegisterPLRestRequest::GetRegisterPLEndPointURL
[msipc]:CDRMRegisterPLRestRequest::RegisterPL Going to hit REST endpoint: %ws
[msipc]:CDRMRegisterPLRestRequest::RegisterPL JSON object for HTTP request built
[msipc]:CDRMRegisterPLRestRequest::RegisterPL JSON object for HTTP request packed into byte stream
httpRequest.DispatchRequest((BYTE*) &strJsonObjectString[0], (UINT)strJsonObjectString.length())
CDRMRegisterPLRestRequest::RegisterPL
CDRMRegisterPLRestRequest::DispatchRequest
RegisterPL
msipc
CJsonHelper::Serialize
false
msipc
ippSerializeLicense( hLicense, m_pUser->GetIppUserIdentity(), dwFlags, NULL, (BYTE*)(&m_vbContentKey[0]), (DWORD)m_vbContentKey.size(), GetCipherInfo(), 0, &wszLicense, pOwnerEUL, pIpcContext)
onecoreuap\ds\security\rm\client\src\msipc\testhooks\testwin7ipplicense.cpp
WindowsPortUtil::GetSecurityProcessorFileName
++++++++ ERROR Failed to find secproc +++++++
       path: %ws
WindowsPortUtil::GetModuleDirectory(wszModuleName, OUT wstrPath)
onecoreuap\ds\security\rm\client\src\oswindows\util\winutil.cpp
onecoreuap\ds\security\rm\client\src\oswindows\util\winutil.cpp
msipc
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszForest, strLen + 1, ptempDomainInfo->DnsForestName)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchLength(ptempDomainInfo->DnsForestName, IPC_OS_MAX_CCH, &strLen)
onecoreuap\ds\security\rm\client\src\oswindows\core\ipcosactivedirectory.cpp
pwszDomain
(pfnGetUserNameExWAdd)(eFormat, spwszCurrentName.get(), &ulNameSize)
[msdrm]: GetUserNameExW/GetComputerObjectNameW FAILED with error code: %d 
nullptr != pfnGetUserNameExWAdd
GetUserNameExW
GetComputerObjectNameW
secur32.dll
ipcos::IpcOsStringCchLength(pwszLDAPString[0], STRSAFE_MAX_CCH, &cchLDAPString)
rootDomainNamingContext
(objectClass=*)
++++++ INFORMATION Couldn't connect to the Active Directory. Most likely ++++++       the user is not connected to the corporate network. Error=%lu
onecoreuap\ds\security\rm\client\src\oswindows\core\ipcosactivedirectory.cpp
Microsoft::InformationProtection::IpcOsGetActiveDirectoryServiceImpl
++++++ INFORMATION the user is not a domain user. GetUserDomain() failed with 0x%x++++++
[msipc]: GetComputerNameEx FAILED with error code: %d 
pwszMachineName
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszValue, strLen + 1, pwszLDAPString[0])
serviceBindingInformation
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszDomain, strLen + 1, pwszLDAPString[0])
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchLength(pwszLDAPString[0], IPC_OS_MAX_CCH, &strLen)
configurationNamingContext
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopyN(pCurPosition, uiDomainBufferLength - (pCurPosition - wszDomain), pStart, pEnd - pStart)
msipc
(&(objectCategory=serviceConnectionPoint)(keywords=MSRMRootCluster)(keywords=1.0))
winipcsecproc_ssp.dll
winipcsecproc_test.dll
winipcsecproc_isv.dll
winipcsecproc.dll
Done loading the Security Processor.
onecoreuap\ds\security\rm\client\src\oswindows\core\ipcossecuritygeneral.cpp
Microsoft::InformationProtection::OperatingSystem::IpcOsInitializeSecurityProcessor
Loading the Security Processor
        hierarchy: %d
        path: %ws
onecoreuap\ds\security\rm\client\src\oswindows\core\ipcossecuritygeneral.cpp
hr = CDRMtoSP::CreateMachineCerts()
winipcsecproc_ssp_test.dll
winipcsecproc_ssp_isv.dll
Failed loading secproc with path: %ws, with error 0x%x
msipc
onecoreuap\ds\security\rm\client\src\base\util\wstringutil.cpp
0 == _wcsnicmp(prefix.c_str(), wstr.c_str(), prefix.size())
IUrlIteratorInvalidArgException
Only Extranet Url is available.
onecoreuap\ds\security\rm\client\src\msipc\http\urliterator.cpp
Microsoft::InformationProtection::UrlIterator::GetNextUrl
Only Intranet Url is available.
onecoreuap\ds\security\rm\client\src\msipc\http\urliterator.cpp
Both Intranet and Extranet Urls can't be null
(IIpcContext::URL_STATE::eInitial != m_eLastUsedState)
Iteration = %d UrlType = %ws Using url = %ws
Extranet
Intranet
msipc
wszScenarioId
onecoreuap\ds\security\rm\client\src\msipc\common\ipccontext.cpp
[msipc]:IpcContext::CheckCancelEvent Cancel Event is Set
[msipc]:IpcContext::init Silent flag is not specified for the token type: %d. Setting silent flags.
TemplateIssuerIncorrectBufferSizeException
TemplateIssuerNotEnoughMemoryException
TemplateIssuer::GenerateIpcProtTil - Not enough memory allocated.
onecoreuap\ds\security\rm\client\src\msipc\common\templateissuer.cpp
onecoreuap\ds\security\rm\client\src\msipc\common\proactiverenewal.cpp
os::IpcOsSystemTimeToFileTime(&(validityTimeRange.GetFrom()), &ftFrom)
onecoreuap\ds\security\rm\client\src\msipc\common\proactiverenewal.cpp
Not suggesting identity renew - identity does not expire.
Microsoft::InformationProtection::ProactiveRenewal::ShouldRenewUser
os::IpcOsStringCchPrintf(wszCurrTime,MAX_PATH,L"%04d-%02d-%02dT%02d:%02d",currTime.wYear,currTime.wMonth,currTime.wDay,currTime.wHour,currTime.wMinute)
LastUserUpdateAttempt
Not suggesting identity renew with %.2f % remaining.
Suggesting identity renew with %.2f % remaining.
There has not been a last try (or it is in the incorrect format).
Last attempt was more than 1 day ago, suggesting identity renew.
Less than 1 day remaining, suggesting identity renew.
os::IpcOsSystemTimeToFileTime(&(validityTimeRange.GetTo()), &ftExpiry)
IdentityRenewalProactivity
os::IpcOsSystemTimeToFileTime(&stlastUpdatedTime,&ftLastTry)
ipp::IppUtil::DecipherTime(wszLastUpdatedTime,&stlastUpdatedTime)
msipc
os::IpcOsStringCbLength(wszId, STRSAFE_MAX_CCH * sizeof(WCHAR), &stDataSize)
0 != dwBytesWritten
dwPreambleSize <= (pvEnd - pvStrings)
os::IpcOsStringCbLength((LPWSTR)pvStrings, STRSAFE_MAX_CCH * sizeof(WCHAR), &stDataSize)
os::IpcOsStringCbCopy(reinterpret_cast<LPWSTR>(pvStrings), pvEnd - pvStrings, wszId)
onecoreuap\ds\security\rm\client\src\msipc\common\ipcuselicenselist.cpp
os::IpcOsSystemTimeToFileTime(&stIssuedTime, &m_ftIssuedTime)
onecoreuap\ds\security\rm\client\src\msipc\common\licensestate.cpp
IPCERROR_LICENSE_INTERVAL_TIME_NOT_SET
[msipp]:LicenseState::GetIntervalTime NOLICCACHE is set. So returning Interval time as 0
onecoreuap\ds\security\rm\client\src\msipc\common\templateinfo.cpp
TemplateInfo::GenerateIpcProtTil - Not enough memory allocated.
TemplateInfoNotEnoughMemoryException
CBase64::UDBase64ToBinW( uDataSize, wszData, &uDecodedDataSize, NULL)
CBase64::UDBinToBase64W( uDataSize, pByte, &dwEncodedDigestSize, &wstrEncodedDigest[0])
CBase64::UDBinToBase64W( uDataSize, pByte, &dwEncodedDigestSize, NULL)
!wstrValue.empty()
onecoreuap\ds\security\rm\client\src\msipc\common\licensemetadata.cpp
!wstring(wszContentName).empty()
IpcOsGetMachineName failed with hr = 0x%08x
GetDynamicTimeZoneInformation failed with hr = 0x%08x
IpcOsGetUserPreferredLocale failed with hr = 0x%08x
onecoreuap\ds\security\rm\client\src\msipc\common\licensemetadata.cpp
Microsoft::InformationProtection::LicenseMetadata::AddReadOnlyValues
LCIDToLocaleName failed with hr = 0x%08x
CBase64::UDBase64ToBinW( uDataSize, wszData, &uDecodedDataSize, &vecDecodedData[0])
FileTimeToSystemTime failed with hr = 0x%08x
Microsoft::InformationProtection::LicenseMetadata::GetFileTimeString
IpcOsStringCchPrintf failed with hr = 0x%08x
MS.Notify.TZSN
MS.MachineName.Hash
MS.Notify.TZDN
MS.Notify.Enabled
MS.Content.Name
MS.ContentPath.Hash
MS.Content.DateCreated
false
en-us
MS.Notify.Digest
MS.Notify.TZO
MS.Notify.Culture
MS.Content.DateModified
MS.Notify.TZID
MS.Notify.DeniedOnly
msipc
ArgumentException
SerializationException
__ptr64
const
Hr validation failed 'IpcUtf8ToWideChar(lhs, OUT rhs)
onecoreuap\ds\security\rm\client\src\base\Serialization\TypeConversions.h
TypeConversionsException
unsigned 
unsigned_
NoTypeNameFoundException
XmlProtocolException
Validation failed 'FALSE'
Uint32
String
Validation failed 'false'
onecoreuap\ds\security\rm\client\src\base\Serialization\DeserializeTree.h
CBase64::UDBase64ToBinW(SafeInt<UINT>(wstrValue.size()), wstrValue.c_str(), &uSize, &m_key.m_vbModulus[0])
BYTES_TO_BITS(uSize) == uBitsSize
CBase64::UDBase64ToBinW(SafeInt<UINT>(wstrValue.size()), wstrValue.c_str(), &uSize, NULL)
onecoreuap\ds\security\rm\client\src\msipc\licenses\cpublickey.cpp
wstrEncoding.empty() || wstrEncoding == xa::wszEncodingBase64
CBase64::UDBinToBase64W(SafeInt<UINT>(m_vbModulus.size()), &m_vbModulus[0], &uSize, &wstrModulus[0])
CBase64::UDBinToBase64W(SafeInt<UINT>(m_vbModulus.size()), &m_vbModulus[0], &uSize, NULL)
pCryptoVersion
m_keyBlob.InitRSAPublic(m_uExponent, GetModulusBitsSize(), &m_vbModulus[0])
!bModulus
!bExponent
onecoreuap\ds\security\rm\client\src\base\Serialization\XmlProtocol.h
Validation failed 'SerializerGetTypeName(m_object, wstrName)'
Error: hr validation had unexpected behavior
Hr validation failed 'e.Error()
@encoding
base64
@size
public-exponent
ALGORITHM
@name
modulus
VALUE
PARAMETER
Thrown error
Validation failed 'IsNamedValue()'
Validation failed '0 != m_pCurrent'
!m_vAppSpecificData.empty()
onecoreuap\ds\security\rm\client\src\msipc\licenses\cpllicense.cpp
vDPTypes.size() == vDPAddresses.size()
vDPTypes.size() == m_vwstrDistributionPointNames.size()
Validation failed 'SerializerGetTypeName(T(), wstrName)'
!GetContentId().empty()
!GetIssuer().IsNull()
!GetIssuedPrincipal().IsNull()
IppUtil::DecipherTime(m_wstrIssuedTime.c_str(), &m_stIssuedTime)
++++++++ INFORMATION: PL details: ++++++++
          Intranet Licensing Url: "%ws",
          Extranet Licensing Url: "%ws",
          IssuerName: "%ws"
          Owner: "%ws",
          ContentId: "%ws",
          Content Valid until: "%hs".
Microsoft::InformationProtection::CPLLicense::LogPL
onecoreuap\ds\security\rm\client\src\msipc\licenses\cpllicense.cpp
OWNER
OWNER
INTERNAL
Publishing-URL
Referral-Info
RIGHTSLIST
DISTRIBUTIONPOINT
@type
License-Acquisition-URL
AUTHENTICATEDDATA
DESCRIPTOR
OWNER
RIGHTSGROUP
CONDITIONLIST
POLICYLIST
ISSUEDTIME
RANGETIME
PRECONDITIONLIST
METADATA
OBJECT
msipc
SafeEnumException
InvalidValueException
vBodies.size() == vLicenses.size()
!vCertChain.empty()
!bRequireV1Crypto || leafVersion.dwRSAKeySize <= gc_DRMCryptoV1.dwRSAKeySize
!bCheckActServerKey || eRequiredHierarchy != ANY_ROOT
MatchKey(keyBlob, s_rootKeys, ARRAYSIZE(s_rootKeys), eMatchedHierarchy)
ANY_ROOT == eRequiredHierarchy || eRequiredHierarchy == eMatchedHierarchy
TrustTestRoot()
onecoreuap\ds\security\rm\client\src\msipc\licenses\verification.cpp
CBase64::UDBase64ToBinW(SafeInt<UINT>(wstrValue.size()), wstrValue.c_str(), &uSize, &m_vbSignature[0])
m_vRights.end() != std::find(m_vRights.begin(), m_vRights.end(), xa::wszIssueRight)
os::IpcOsSystemTimeToFileTime(&stNow, &ftNow)
os::IpcOsSystemTimeToFileTime(&stFrom, &ftFrom)
os::IpcOsSystemTimeToFileTime(&stTo, &ftTo)
+1 != os::IpcOsCompareFileTime(&ftFrom, &ftNow)
-1 != os::IpcOsCompareFileTime(&ftTo, &ftNow)
Validation failed '(value >= 0) && (value <= MaxValue)'
onecoreuap\ds\security\rm\client\src\base\Serialization\SafeEnum.h
xe::wszRSAAlgorithm == issuerKey.GetAlgorithm() && xe::wszPKCS1_15Algorithm == signature.GetSignatureAlgorithm() && signature.GetSignatureBitsSize() == issuerKey.GetModulusBitsSize() && signature.GetSignatureBitsSize() >= childVersion.dwRSAKeySize
xe::wszRSAAlgorithm == pIssuedPrincipalKey->GetAlgorithm() && signature.GetSignatureBitsSize() >= pIssuedPrincipalKey->GetModulusBitsSize()
( xe::wszSHA256Algorithm == signature.GetDigestAlgorithm() && UDCRYPTO_SIZE_HASH_SHA256 == signature.GetDigestSize() ) || ( xe::wszSHA1Algorithm == signature.GetDigestAlgorithm() && UDCRYPTO_SIZE_HASH_SHA1 == signature.GetDigestSize() )
( xe::wszSHA256Algorithm == signature.GetDigestAlgorithm() && UDCRYPTO_SIZE_HASH_SHA256 == signature.GetDigestSize() )
!license.GetIssuedPrincipalsPublicKeys().empty()
CCertTypeUtils::SoftCompare(eExpectedLeafType, vCertChain.front()->GetCertType())
CCertTypeUtils::CanIssue(vCertChain[i-1]->GetCertType(), vCertChain[i]->GetCertType())
CERT_TYPE_CA == vCertChain.back()->GetCertType()
@xULa
U$r>P
6/b9[
U:[]S,I
wEHK~%
@encoding
base64
@size
ISSUE
@name
@type
9B]R.B
Machine-Certificate
RSA PKCS#1-V1.5
ISSUER
Server-Licensor-Certificate
RIGHT
RIGHTSLIST
DIGEST
VALUE
ISSUEDPRINCIPALS
PUBLICKEY
PRINCIPAL
DESCRIPTOR
SHA256
SIGNATURE
Client-Licensor-Certificate
RIGHTSGROUP
RANGETIME
Content-License
DRM-CA-Certificate
VALIDITYTIME
ALGORITHM
Group-Identity-Credential
OBJECT
wszLicense
onecoreuap\ds\security\rm\client\src\msipc\licenses\clicense.cpp
!m_bVerifyCertificateChain || NULL != m_pCryptoVersionToVerify
m_pSignature.get()
!m_issuer.IsNull()
m_pCryptoVersionToVerify
m_pVerificationData.get()
ch.ConstructCertificateChain(1, &wszLicense, &nChainLength, NULL)
ch.ConstructCertificateChain(1, &wszLicense, &nChainLength, const_cast<PWSTR>(wstrChain.c_str()))
Microsoft::InformationProtection::CBaseLicense::Parse
Getting the error message out of the Exception object failed with hr=0x%x
onecoreuap\ds\security\rm\client\src\msipc\licenses\clicense.cpp
Exception while getting the error message out of the Exception object
IsCertTypeOptional() || CERT_TYPE_UNKNOWN != m_eCertType
CCertTypeUtils::SoftCompare(GetExpectedCertType(), GetCertType())
Activation
Extranet-License-Acquisition-URL
ISSUEDPRINCIPALS
ADDRESS
ISSUER
Publishing-URL
Extranet-Activation
@type
License-Acquisition-URL
VALIDITYTIME
PRINCIPAL
DESCRIPTOR
OBJECT
DISTRIBUTIONPOINT
msipc
RIGHTSLIST
@type
RIGHTSGROUP
OBJECT
wszEUL
onecoreuap\ds\security\rm\client\src\msipc\licenses\ceullicense.cpp
!GetEmailId().empty()
onecoreuap\ds\security\rm\client\src\msipc\licenses\craclicense.cpp
++++++++ INFORMATION: RAC details: ++++++++
          User: "%ws",
          User type: "%ws",
          Issuer name: "%ws",
          Issuer Id: "%ws",
          Intranet Certification Url: "%ws",
          Extranet Certification Url: "%ws",
          Valid Until: "%hs".
Microsoft::InformationProtection::CRACLicense::LogRAC
onecoreuap\ds\security\rm\client\src\msipc\licenses\craclicense.cpp
wszRAC
ISSUEDPRINCIPALS
PRINCIPAL
msipc
Uint16
IppUtil::DecipherTime(wstrFrom.c_str(), &m_stFrom)
onecoreuap\ds\security\rm\client\src\msipc\licenses\licenseobjects.cpp
IppUtil::DecipherTime(wstrTo.c_str(), &m_stTo)
m_pTimeRange
m_pTimeInterval
vwstrPrincipalIds.size() == vwstrPrincipalTids.size()
vwstrPrincipalIds.size() == vwstrPrincipalObjectIds.size()
vwstrPrincipalIds.size() == vwstrPrincipalPuids.size()
m_psRights
m_pvRights
pwszNextItemStart
!(bTimeRange && bTimeInterval)
wstring::npos != nDash
xa::wszEncodingBase64 == wstrEncoding
CBase64::UDBase64ToBinW(SafeInt<UINT>(wstrDigest.size()), wstrDigest.c_str(), &uDigestSize, NULL)
CBase64::UDBase64ToBinW(SafeInt<UINT>(wstrDigest.size()), wstrDigest.c_str(), &uDigestSize, &m_vbDigest[0])
vwstrParameterNames.size() == vwstrParameterValues.size()
vwstrPrincipalIds.size() == vwstrPrincipalIdTypes.size()
vwstrPrincipalIds.size() == vwstrPrincipalNames.size()
wszKeyword
pwszNextValue
inclusion
@months
OS-Exclusion
@hours
@name
@type
@days
@encoding
@minutes
@seconds
base64
versionspan
VERSIONSPAN
PARAMETER
CONDITIONLIST
INTERVALTIME
@years
exclusion
:DESCRIPTION 
RIGHT
DIGEST
VALUE
PUBLICKEY
ACCESS
OBJECT
:NAME 
LCID 
CONDITION
POLICY
RANGETIME
UNTIL
ALGORITHM
PRINCIPAL
onecoreuap\ds\security\rm\client\src\msipc\licenses\cxmlutils.cpp
<Root>
</Root>
@type
ADDRESS
OBJECT
Microsoft::InformationProtection::JsonLicenses::UserCert::AddSerializableData
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\usercert.cpp
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\usercert.cpp
Microsoft::InformationProtection::JsonLicenses::UserCert::DeserializeFromObject
msipc
CLC Sig Verification for UTF16 Payload
wszCLC
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\cjsonclclicense.cpp
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\CJsonCLCLicense.h
CLC Sig Verification for UTF8 Payload
Microsoft::InformationProtection::JsonLicenses::CJsonCLCLicense::VerifySignature
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\cjsonclclicense.cpp
msipc
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\usercertprivatedata.cpp
Microsoft::InformationProtection::JsonLicenses::UserCertPrivateData::AddSerializableData
Microsoft::InformationProtection::JsonLicenses::UserCertPrivateData::DeserializeFromObject
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\usercertprivatedata.cpp
PrivateKey is missing
IppUtil::DecipherTime(wstrIssuedData.c_str(), &m_issuedTime)
msipc
AcquireBatchLicenses : wszLAURL = %ws, uFlags = %d, uNoOfUserCerts = %d
CLicenseAcq::AcquireBatchLicenses
onecoreuap\ds\security\rm\client\src\msipc\licenseacquisition\licacq.cpp
onecoreuap\ds\security\rm\client\src\msipc\licenseacquisition\licacq.cpp
m_pPLLicense
!m_pvpUserCerts->empty()
drmSoap.SetCancelHandle(NULL)
drmSoap.SetCallbackInfo(NULL, DRM_MSG_ACQUIRE_LICENSE, NULL)
drmSoap.CreateRequest(wszAcqLicMethod, g_wszLA_RequestParams, g_wszLA_AcquireLicenseNamespace, 1)
drmSoap.SetIpcContext(m_spIpcContext)
drmSoap.AddHeaderParameter(NULL, g_wszACT_MinimumVersion, SOAP_DATA_TYPE_STRING, g_wszACT_CurrentVersion)
drmSoap.CreateHeader(g_wszACT_VersionData, 2)
CLicenseAcq::AcquireContext::DispatchSoapRequest
Exception Message not of Revocation type
+++++++ WARNING: Licensing failed with
        FaultCode = %ws,
        FaultCorrelationId = %ws,
        FaultString = %ws ++++++++
+++++++ WARNING: Licensing failed with
        FaultCode = %ws,
        FaultCorrelationId = %ws,
        FaultString = %ws ,
        Revokedby = %ws ,
        RevokedTime =%ws , 
drmSoap.SetServerInfo(wstrUrl.c_str(), HTTP_NO_UI)
+++++++ WARNING: Licensing failed with
        FaultCode = %ws,
        FaultString = %ws ++++++++
CLicenseAcq::AcquireLicenseContext::AcquisitionProc_msipp
drmSoap.SetServerInfo(wstrUrl.c_str(), 0)
drmSoap.AddParameter( wszAcqLicParams, g_wszLA_ParamIssuanceLicenseV2, SOAP_DATA_TYPE_STRING, m_pPLLicense->GetLicense().c_str() )
Acquiring License for Json License.
drmSoap.SetServerMethod(g_wszLA_LicensingService, wszAcqLicMethod)
drmSoap.AddArrayParameter( wszAcqLicParams, g_wszLA_ParamLicenseeCerts, g_wszLA_ParamTypeCertificate, SOAP_DATA_TYPE_CERT, vwstrUserCerts, 1, j)
(cEULs == m_pvpUserCerts->size())
++++++++INFORMATION: Licensing call using the url : "%ws" ++++++++
Crypto version of EUL doesn't match crypto verion of the RAC.
+++++++ WARNING: Licensing failed with FaultCode = %ws +++++++
drmSoap.AddHeaderParameter(NULL, g_wszACT_MinimumVersion, SOAP_DATA_TYPE_STRING, g_wszACT_Version11)
drmSoap.AddHeaderParameter(NULL, g_wszACT_MaximumVersion, SOAP_DATA_TYPE_STRING, g_wszACT_CurrentVersion)
CDRMCChain::DRMDeconstructCertificateChain(m_pPLLicense->GetCertificateChain().c_str(), SafeInt<UINT>(vwstrILChain.size()), &ccNextCert, &vwcNextCertInChain[0])
drmSoap.AddHeaderParameter(NULL, g_wszACT_MaximumVersion, SOAP_DATA_TYPE_STRING, g_wszACT_Version11)
drmSoap.AddStructParameter(wszAcqLicParams, 7)
0 != vwstrILChain.size()
drmSoap.AddArrayParameter( wszAcqLicParams, g_wszLA_ParamRightsLabel, g_wszLA_ParamTypeCertificate, SOAP_DATA_TYPE_CERT, vwstrILChain, SafeInt<UINT>(vwstrILChain.size()), j)
Acquiring License for Xrml License.
Server returned a valid EUL for one of the RACs
AcquisitionProc: BatchLicensing User = %ws User's Issuer = %ws hr = 0x%x
+++++++ WARNING: Licensing failed with hr = 0x%x +++++++
++++++++ INFORMATION: Licensing succeeded. ++++++++
msipc
m_wstrAddressesType.size() == m_wstrAddresses.size()
onecoreuap\ds\security\rm\client\src\msipc\Licenses\CPrincipal.h
!m_wstrLAURL.empty()
nullptr != m_userIdentities && !m_userIdentities->empty()
+++++++++ WARNING Acquiring delegated licenses requires an Azure RMS server. ++++++++++
DRM_AL_NO_SERVERINFO != (DRM_AL_NO_SERVERINFO & m_uFlags)
drmSoap.CreateRequest(g_wszLA_AcquireDelegationLicenseMethod, g_wszLA_RMSO_requestParameters, g_wszLA_AcquireDelegationLicenseNamespace, 1)
onecoreuap\ds\security\rm\client\src\msipc\licenseacquisition\delegationlicacq.cpp
Acquiring Delegation License for Xrml License.
drmSoap.AddStructParameter(g_wszLA_AcquireDelegationLicenseStruct, 3)
CDRMCChain::DRMDeconstructCertificateChain(certChain.c_str(), i, &ccNextCert, &chainItem[0])
0 != issuanceLicenseChain.size()
onecoreuap\ds\security\rm\client\src\msipc\licenseacquisition\delegationlicacq.cpp
nullptr != m_userCerts && !m_userCerts->empty()
Microsoft::InformationProtection::DelegationLicenseAcq::AcquireDelegationLicenseContext::AcquisitionProc_msipp
++++++++ ERROR: Acquire Delegation License failed with error = 0x%X ++++++++
licenseCount == principals
++++++++ WARNING: Acquire Delegation License failed with FaultCode = %ws ++++++++
Microsoft::InformationProtection::DelegationLicenseAcq::AcquireDelegationLicenseContext::HandleDelegationLicenseResponse_msipp
++++++++ INFORMATION: Acquire Delegation License succeeded. ++++++++
++++++++ ERROR: Acquire Delegation License principal (%ws) doesn't match the request (%ws) ++++++++
System.ArgumentException
++++++++ WARNING: Acquire Delegation License did not return a single valid EUL ++++++++
drmSoap.AddArrayParameter( g_wszLA_AcquireDelegationLicenseStruct, g_wszLA_ParamLicenseeCerts, g_wszLA_ParamTypeCertificate, SOAP_DATA_TYPE_CERT, vwstrUserCerts)
drmSoap.AddArrayParameter( g_wszLA_AcquireDelegationLicenseStruct, g_wszLA_ParamRightsLabel, g_wszLA_ParamTypeCertificate, SOAP_DATA_TYPE_CERT, issuanceLicenseChain)
drmSoap.SetServerMethod(g_wszLA_LicensingService, g_wszLA_AcquireDelegationLicense)
drmSoap.AddArrayParameter( g_wszLA_AcquireDelegationLicenseStruct, g_wszLA_ParamDelegatedIdentities, g_wszLA_ParamTypeString, SOAP_DATA_TYPE_STRING, *m_userIdentities)
drmSoap.GetArrayParameterValueCount(g_wszLA_AcquireDelegationLicenseResponse, 0, g_wszLA_ParamCertChain, &licenseCount)
(1 <= drmSoap.GetRequestParamsCount())
drmSoap.GetArrayParameterValueCount(g_wszLA_AcquireDelegationLicenseResponse, 0, g_wszLA_ParamLicenses, &licenseCount)
drmSoap.GetArrayParameterValue(g_wszLA_AcquireDelegationLicenseResponse, 0, g_wszLA_ParamCertChain, i, certChainPart)
Microsoft::InformationProtection::DelegationLicenseAcq::AcquireBatchLicenses
System.UnauthorizedAccessException
AcquireBatchLicenses : url = %ws, flags = %d, number of certs = %d, number of identities = %d
msipc
[msipc]:+AcquireEnrollmentCert_msipp
drmSoap.CreateRequest(wszMethod, g_wszLA_RequestParams, g_wszPUB_PublishingServiceNamespace, 1)
onecoreuap\ds\security\rm\client\src\msipc\licenseacquisition\enrollment.cpp
SignatureEncoding
drmSoap.AddStructParameter(wszLicensorParams, 1)
pCLCLicense->GetCryptoVersion().dwRSAKeySize == racLicense.GetCryptoVersion().dwRSAKeySize
drmSoap.GetParameterValue(wszResponse, wszCertChainResponseName, i, pwstrNextCert)
pParentUserCertResponseEle = CDRMSoapRequest::GetElement(pResponseEle, g_wszPUB_UserCertificateResponse, 0)
pResponseEle = drmSoap.GetElement(g_wszPUB_GetClientLicensorAndUserCertificatesResponse, 0)
UserCert Issuer public key didn't match with original CLC public key
pUserCertResponseEle = CDRMSoapRequest::GetElement(pParentUserCertResponseEle, g_wszPUB_UserCertificateResponse, 0)
[msipc]:-AcquireEnrollmentCert_msipp
++++++++ WARNING: Enrollment call (getting CLC) failed with 0x%x ++++++++
drmSoap.AddArrayParameter(wszLicensorParams, wszPersonaCerts, g_wszLA_ParamTypeCertificate, SOAP_DATA_TYPE_CERT, vwstrUserCerts)
drmSoap.AddParameter(wszLicensorParams, L"SignatureEncoding", SOAP_DATA_TYPE_STRING, L"utf-8")
drmSoap.SetServerMethod(g_wszPUB_PublishingService, wszMethod)
drmSoap.SetServerInfo(wstrPaddedURL.c_str(),(uFlags & DRM_AL_NOUI) ? HTTP_NO_UI : 0)
CEnrollment::AcquireEnrollmentCert_msipp
++++++++ INFORMATION: Enrollment call (getting CLC) using the url: "%ws" ++++++++
drmSoap.GetParameterValueCount(wszResponse, wszCertChainResponseName, &cCertChainCount)
onecoreuap\ds\security\rm\client\src\msipc\licenseacquisition\enrollment.cpp
++++++++ WARNING: Enrollment (getting CLC) failed with
          FaultCode = %ws,
         FaultCorrelationId = %ws
,         FaultString = %ws ++++++++
++++++++ INFORMATION: Enrollment call (getting CLC) succeeded. ++++++++
++++++++ WARNING: Enrollment (getting CLC) failed with
          FaultCode = %ws,
         FaultString = %ws ++++++++
CEnrollment::DispatchSoapRequest
msipc
NULL != m_pvwstrUserIdentities && !m_pvwstrUserIdentities->empty()
[msdrm]:+AcquisitionProc
CDRMCChain::DRMDeconstructCertificateChain(wstrCertChain.c_str(), i, &ccNextCert, &vwcChainItem[0])
drmSoap.CreateRequest(g_wszLA_AcquirePreLicenseMethod, requestParams.c_str(), g_wszLA_AcquirePreLicenseNamespace, 1)
drmSoap.AddArrayParameter( g_wszLA_AcquirePreLicenseStruct, g_wszLA_ParamRightsLabel, g_wszLA_ParamTypeCertificate, SOAP_DATA_TYPE_CERT, vwstrILChain)
drmSoap.AddStructParameter(g_wszLA_AcquirePreLicenseStruct, 2)
drmSoap.SetServerMethod(g_wszLA_LicensingService, g_wszLA_AcquirePreLicense)
drmSoap.AddArrayParameter( g_wszLA_AcquirePreLicenseStruct, g_wszLA_ParamLicenseeIdentities, g_wszLA_ParamTypeString, SOAP_DATA_TYPE_STRING, *m_pvwstrUserIdentities)
[msdrm]: AcquireBatchPreLicenses : wszLAURL = %S, uFlags = %d , uNoOfUserIdentities = %d  
[msdrm]:+AcquireBatchPreLicenses
[msdrm]:-AcquireBatchPreLicenses
onecoreuap\ds\security\rm\client\src\msipc\licenseacquisition\prelicacq.cpp
[msipc]: ++++++++ ERROR: PreLicensing principal (%ws) doesn't match the request (%ws) ++++++++
[msipc]: ++++++++ ERROR: PreLicensing failed with error = 0x%X ++++++++
 [msdrm]:AcquisitionProc: Server returned a valid EUL for one of the RACs
 [msdrm]:AcquisitionProc: BatchLicensing User = %ws hr = 0x%x
[msipc]: ++++++++ WARNING: PreLicensing failed with hr=0x%x ++++++++
[msipc]: ++++++++ INFORMATION: PreLicensing succeeded. ++++++++
[msdrm]:-AcquisitionProc
[msipc]: ++++++++ INFORMATION: PreLicensing call using the url: "%ws" ++++++++
drmSoap.GetArrayParameterValueCount(g_wszLA_AcquirePreLicenseResponse, 0, g_wszLA_ParamCertChain, &cLicenseCount)
1 <= drmSoap.GetRequestParamsCount()
drmSoap.GetArrayParameterValueCount(g_wszLA_AcquirePreLicenseResponse, 0, g_wszLA_ParamLicenses, &cLicenseCount)
drmSoap.GetArrayParameterValue(g_wszLA_AcquirePreLicenseResponse, 0, g_wszLA_ParamCertChain, i, spwstrValue)
[msipc]: ++++++++ WARNING: PreLicensing failed with FaultCode = %ws ++++++++
cLicenseCount == cPrincipals
msipc
[msipp]:wszServer = %S ,wszUserID = %S,wszUserType = %S 
[msdrm]:wszServer = %S,wszUserID = %S,wszUserType = %S 
CActivation::ProcessCertificationResponse_msipp
++++++++ INFORMATION: Certification call succeeded. ++++++++n
CActivation::CertifyGroupIdentity_msipp
++++++++ INFORMATION: Certification call using the url: "%ws" ++++++++
++++++++ WARNING: Certification call failed with
          FaultCode = %ws,
          FaultCorrelationId = %ws,
          FaultString = %ws ++++++++ 
onecoreuap\ds\security\rm\client\src\msipc\activation\activation.cpp
++++++++ WARNING: Certification call failed with
          FaultCode = %ws,
          FaultString = %ws ++++++++ 
[msdrm]: GenerateCertificationRequest - ExtractConcatenatedChain function FAILED with hr = %x 
++++++++ WARNING: Certification call failed FAILED with 0x%x ++++++++
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchLength(g_wszRMSOnlineCertificationUrl, IPC_OS_MAX_CCH, &strLen)
[msdrm]: GlobalServiceLocator::GetGlobalCertificationUrl Registry entry is missing so using                                                                                     hardcoded url : 0x%x 
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszLocalValue, strLen + 1, g_wszRMSOnlineCertificationUrl)
[msdrm]: ServiceLocatorHelpers::GetServiceLocationForCertification Registry lookup : 0x%08x 
onecoreuap\ds\security\rm\client\src\msipc\servicelocation\servicelocatorhelpers.cpp
[msdrm]: GetActiveDirectoryService FAILED : %x 
hr = DRMCXRMLObj.GetRegistryKey(HKEY_LOCAL_MACHINE,g_wszSD_ActivationKey,NULL,pwszValue)
hr= drmSoap.CreateHeader(g_wszACT_VersionData,2)
hr= drmSoap.CreateRequest(g_wszPUB_ServiceDiscoveryForUser, g_wszPUB_ServiceDiscoveryRequest, g_wszPUB_DiscoverServiceNamespace, 1)
hr= drmSoap.AddHeaderParameter(NULL,g_wszACT_MaximumVersion, SOAP_DATA_TYPE_STRING, g_wszACT_CurrentVersion)
hr= drmSoap.AddHeaderParameter(NULL,g_wszACT_MinimumVersion, SOAP_DATA_TYPE_STRING, g_wszACT_CurrentVersion)
CServiceLocation::DoServiceDiscoveryRequest
++++++++ INFORMATION: Service discovery call using Url: "%ws" for service types: ++++++++
          service type: %ws
onecoreuap\ds\security\rm\client\src\msipc\servicelocation\servicelocation.cpp
GetServiceLocationForCertificationAndLicensing
onecoreuap\ds\security\rm\client\src\msipc\servicelocation\servicelocation.cpp
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszServerUrl, cchServerUrl, wszDiscoverUrl.c_str())
ipcos::IpcOsStringCchLength(wszDiscoverUrl.c_str(), IPC_OS_MAX_CCH, &cchDiscoverUrl)
hr= drmSoap.SetServerInfo(wszServerUrl, (uFlags & DRM_SL_SILENT) ? HTTP_NO_UI : 0)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszServerUrl, cchServerUrl, g_wszPUB_DiscoverServicePadding)
hr= drmSoap.SetServerMethod(g_wszPUB_DiscoverService, g_wszPUB_ServiceDiscoveryForUser)
hr= drmSoap.SetIpcContext(pIpcContext)
++++++++ INFORMATION: Service discovery call succeeded with result: "%ws" ++++++++
hr= drmSoap.GetArrayParameterValue(g_wszPUB_ServiceNames, i, g_wszPUB_URL, 0, &(rgwszLocalValues[i]))
locator->GetCertificationUrls(ppwszInternalUrl, ppwszExternalUrl, &eState)
hr = drmSoap.GetParameterValue(NULL, g_wszPUB_Upn, 0, &(rgwszLocalValues[uCount]))
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszLicExtUrl, strLen + 1, g_wszCloudLicenseServerUrl)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchLength(g_wszCloudLicenseServerUrl, IPC_OS_MAX_CCH, &strLen)
hr = DoFindServiceLocation( 1, &(rgwszServiceTypes[1]), wszTempCertIntUrl, wszTempCertExtUrl, uFlags, hParentWnd, pIpcContext, &wszLicExtUrl, NULL)
GetServiceLocationForLicensing
hr= drmSoap.AddParameter(g_wszPUB_ServiceNames, g_wszPUB_Type, SOAP_DATA_TYPE_STRING, i, pwszServiceTypes[i])
hr= drmSoap.AddStructParameter(g_wszPUB_ServiceNames, 1)
hr= drmSoap.AddParameter(NULL, g_wszPUB_ExtranetLicenseUrl, SOAP_DATA_TYPE_STRING, 0, wszExtranetUrlFromPl ? wszExtranetUrlFromPl : L"")
hr= drmSoap.AddParameter(NULL, g_wszPUB_IntranetLicenseUrl, SOAP_DATA_TYPE_STRING, 0, wszIntranetUrlFromPl ? wszIntranetUrlFromPl : L"")
hr= drmSoap.DispatchRequest()
hr= drmSoap.AddParameter(NULL, g_wszPUB_SlcPublicKey, SOAP_DATA_TYPE_STRING, 0, pIpcContext->GetSlcPublicKey())
hr= drmSoap.GetArrayParameterValue(g_wszPUB_ServiceNames, i, g_wszPUB_Type, 0, &wszType)
rgwszLocalValues = new (std::nothrow) PWSTR[uResponseCount]
hr= drmSoap.AddStructParameter(g_wszPUB_ServiceLocationRequest, 1)
ipcos::IpcOsStringCchLength(wszLicenseUrl, IPC_OS_MAX_CCH, &cchLicenseUrl)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszServerUrl, uServerUrlBufferLength, g_wszPUB_ServiceLocatorPadding)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszServerUrl, uServerUrlBufferLength, wszLicenseUrl)
hr= drmSoap.SetServerMethod(g_wszPUB_ServiceLocator, g_wszPUB_FindServiceLocations)
hr= drmSoap.CreateRequest(g_wszPUB_FindServiceLocations, g_wszPUB_ServiceNames, g_wszPUB_ServiceLocatorNamespace, 1)
hr= drmSoap.AddHeaderParameter(NULL,g_wszACT_MaximumVersion, SOAP_DATA_TYPE_STRING,g_wszACT_CurrentVersion)
hr= drmSoap.AddHeaderParameter(NULL,g_wszACT_MinimumVersion, SOAP_DATA_TYPE_STRING,g_wszACT_CurrentVersion)
hr= drmSoap.AddParameter(g_wszPUB_ServiceLocationRequest,g_wszPUB_Type, SOAP_DATA_TYPE_STRING, i, pwszServiceTypes[i])
CServiceLocation::FindServiceLocationBatchRequest
[msipc]:CServiceLocation::FindServiceLocationBatchRequest drmSoap.GetArrayParameterValue failed hr = 0x%x
hr= drmSoap.GetArrayParameterValue(g_wszPUB_ServiceLocationResponse, i, g_wszPUB_Type, 0, &wszType)
msipc
[msdrm]: WindowsScpLocator::GetServiceLocationForCertification SCP lookup : %x 
Microsoft::InformationProtection::GlobalServiceLocator::GetCertificationUrls
++++++++ INFORMATION: Global Service Discovery... ++++++++
[msdrm]: GetServiceLocationForCertification Global Online SD lookup : %x 
onecoreuap\ds\security\rm\client\src\msipc\servicelocation\globalservicelocator.cpp
GetCertificationUrls
msipc
[msipp]:+CServiceLocation::GetServiceLocationForCertification Server didn't support CertificationInternalService
[msdrm]: UnknownIdentityTypeLocator::GetServiceLocationForCertification SCP lookup : %x 
DNS Lookup succeeded looking up record for %ws
DNS Lookup failed looking up record for %ws with %d
onecoreuap\ds\security\rm\client\src\msipc\dnslookupclient\dnslookupclient.cpp
!domain->GetDomainStringForDnsLookup().empty()
onecoreuap\ds\security\rm\client\src\msipc\dnslookupclient\dnslookupclient.cpp
_rmsredir._http._tcp.
Microsoft::InformationProtection::DnsLookupClient::LookupDiscoveryService
msipc
[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?
::UrlGetPartW(domain.c_str(), wszStrippedDomain, &dwSize , URL_PART_HOSTNAME, 0)
wszData is not a valid email or url
onecoreuap\ds\security\rm\client\src\msipc\dnslookupclient\domain.cpp
vector<bool> too long
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_
()$^.*+?[]|\-{},:=!
hr = drmSoap.AddHeaderParameter(NULL,g_wszACT_MaximumVersion,SOAP_DATA_TYPE_STRING,g_wszACT_CurrentVersion)
drmSoap.AddStructParameter(g_wszLA_RequestParams, 1)
hr = drmSoap.CreateHeader(g_wszACT_VersionData,2)
hr = drmSoap.AddHeaderParameter(NULL,g_wszACT_MinimumVersion,SOAP_DATA_TYPE_STRING,g_wszACT_CurrentVersion)
CRMTemplateAPI::AcquireTemplatesFromServer
onecoreuap\ds\security\rm\client\src\msipc\templateacquisition\rmtemplateapi.cpp
drmSoap.AddArrayParameter(g_wszLA_RequestParams, g_wszPUB_PersonaCerts, g_wszLA_ParamTypeCertificate, SOAP_DATA_TYPE_CERT, vwstrUserCerts)
++++++++ INFORMATION: Template hash acquisition call using the url: "%ws" ++++++++
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCopy(wszServerURL, uServerUrlBufferLength, wszURL)
::Microsoft::InformationProtection::OperatingSystem::IpcOsStringCchCat(wszServerURL, uServerUrlBufferLength, g_wszAILT_GetAcquireTemplatesPadding)
onecoreuap\ds\security\rm\client\src\msipc\templateacquisition\rmtemplateapi.cpp
hr = os::IpcOsStringCchLength(wszURL, IPC_OS_MAX_CCH, &cchURL)
hr = drmSoap.SetServerMethod(g_wszAILTTemplateDistributionService,g_wszAILT_GetAcquireTemplatesInformation)
hr = drmSoap.CreateRequest(g_wszAILT_GetAcquireTemplatesInformation,NULL,g_wszAILTTemplateDistributionServiceNameSpace,1)
hr = drmSoap.SetServerInfo(wszServerURL, uFlags & DRM_AILT_NONSILENT ? 0 : HTTP_NO_UI)
hr = drmSoap.SetIpcContext(pIpcContext)
hr = drmSoapTemplate.SetServerMethod(g_wszAILTTemplateDistributionService,g_wszAILT_GetAcquireTemplates)
hr = drmSoapTemplate.CreateRequest(g_wszAILT_GetAcquireTemplates,NULL,g_wszAILTTemplateDistributionServiceNameSpace,1)
hr = drmSoapTemplate.SetServerInfo(wszServerURL, uFlags & DRM_AILT_NONSILENT ? 0 : HTTP_NO_UI)
hr = drmSoapTemplate.SetIpcContext(pIpcContext)
hr = drmSoapTemplate.AddHeaderParameter(NULL,g_wszACT_MaximumVersion,SOAP_DATA_TYPE_STRING,g_wszACT_CurrentVersion)
drmSoapTemplate.AddStructParameter(g_wszLA_RequestParams, 1)
hr = drmSoapTemplate.CreateHeader(g_wszACT_VersionData,2)
hr = drmSoapTemplate.AddHeaderParameter(NULL,g_wszACT_MinimumVersion,SOAP_DATA_TYPE_STRING,g_wszACT_CurrentVersion)
hr = drmSoap.GetParameterValue(NULL,L"ServerPublicKey",0,&wszServerPublicKey)
GuidHashCount
++++++++ WARNING: Template hash acquisition FAILED with hr=0x%x ++++++++
ServerPublicKey
hr = drmSoap.GetElementValue(NULL,g_wszAILT_Hash,i,&(pTemplateGuidHash[cCount].wszHash))
++++++++ INFORMATION: Server didn't return any template hashes, so no need to download the templates ++++++++
hr = drmSoap.GetParameterValue(NULL,L"GuidHashCount",0,&wszValue)
hr = drmSoap.GetElementValue(NULL,g_wszAILT_Guid,i,&(pTemplateGuidHash[cCount].wszGuid))
Identity and Server are in same crypto mode
Server key rollover detected. Renew the Identity.
CRMTemplateAPI::CheckForCryptoUpdate
CryptoUpdate Clean License Store hr = 0x%x
pwszUnMaskedFileNames = new (std::nothrow) PWSTR[cFileNames]
hr = os::IpcOsUnMaskFileNameNotAllowedChar(pwszFileNames[i],NULL,&pwszUnMaskedFileNames[i])
CRMTemplateAPI::IsKeyRolloverDetected
hr = os::IpcOsStringCchLength(wszData, IPC_OS_MAX_CCH, &cchData)
hr = drmSoapTemplate.AddParameter(g_wszAILT_Guids,g_wszAILT_String,SOAP_DATA_TYPE_STRING,pTemplateGuidHash[j].wszGuid)
++++++++ INFORMATION: Template acquisition call using the url: "%ws" ++++++++
drmSoapTemplate.AddArrayParameter(g_wszLA_RequestParams, g_wszPUB_PersonaCerts, g_wszLA_ParamTypeCertificate, SOAP_DATA_TYPE_CERT, vwstrUserCerts)
drmSoapTemplate.AddStructParameter(g_wszAILT_Guids, 1)
++++++++ INFORMATION: Template acquisition succeeded. %u templates were updated. ++++++++
Identities Crypto version didn't match with Server. Clean the license store and Renew the Identity
++++++++ WARNING: Template acquisition failed with hr=0x%x ++++++++
hr = drmSoapTemplate.GetElementValue(NULL,g_wszAILT_Guid,i,&(pTemplateGuidTemplate[i].wszGuid))
hr = os::IpcOsGetLicenseStoreTemplatePath(&ipcfile)
E_FAIL
[msipc]: ++++++++ WARNING: Template acquisition failed with FaultCode = %S , FaultCorrelationId = %S , FaultString = %S ++++++++ 
[msipc]: ++++++++ WARNING: Template acquisition failed with FaultCode = %S , FaultString = %S ++++++++ 
msipc
=L9o<
bad_weak_ptr
DomException
Validation failed 'newRoot'
Validation failed 'root'
onecoreuap\ds\security\rm\client\src\base\domdocument\domdocument.cpp
MSXmlDomException
Hr validation failed 'document->createElement(CComBSTR(rootName.c_str()), OUT &root)
Hr validation failed 'document->putref_documentElement(root)
onecoreuap\ds\security\rm\client\src\base\domdocument\msxmldomdocument.cpp
Hr validation failed 'document.CoCreateInstance(CLSID_DOMDocument60)
Hr validation failed 'document->loadXML(CComBSTR(xml.c_str()), OUT &success)
Validation failed 'VARIANT_FALSE != success'
Temporary
Hr validation failed 'document->get_xml(OUT &text)
DocumentCreationException
DocumentWriteException
Validation failed 'document'
DocumentReadException
DocumentReadHrException
Hr validation failed 'document->load(CComVariant(filePath.c_str()), OUT &success)
Hr validation failed 'document->get_documentElement(OUT &newRoot)
./text()
ElementReadException
ElementWriteException
AttributeWriteException
ElementException
TextWriteException
QueryException
TextException
TextReadException
AttributeException
AttributeReadException
Hr validation failed 'element->getAttribute(CComBSTR(key.c_str()), OUT &attribute)
Hr validation failed 'element->setAttribute(CComBSTR(key.c_str()), _variant_t(value.c_str()))
Hr validation failed 'node->get_nodeName(OUT &name)
Hr validation failed 'node->get_nodeValue(OUT &value)
Hr validation failed 'textNode->get_text(OUT &result)
Hr validation failed 'element->selectNodes(CComBSTR(ChildText), OUT &nodes)
Hr validation failed 'element->get_nodeName(OUT &name)
Hr validation failed 'element->selectSingleNode(CComBSTR(ChildText), OUT &textNode)
NodeInformationException
ChangeRootException
NodeTypeException
NodeCastException
Hr validation failed 'element->get_attributes(OUT &attributes)
Hr validation failed 'attributes->nextNode(OUT &node)
onecoreuap\ds\security\rm\client\src\base\domdocument\msxmldomelement.cpp
Validation failed 'element'
Hr validation failed 'document->putref_documentElement(element)
Hr validation failed 'node->get_nodeType(OUT &type)
Hr validation failed 'document->createElement(CComBSTR(name.c_str()), OUT &child)
Hr validation failed 'element->appendChild(child, NULL)
Hr validation failed 'node.QueryInterface(OUT &elementNode)
Validation failed 'node'
Validation failed 'IsElement(node)'
Hr validation failed 'document->createTextNode(CComBSTR(text.c_str()), OUT &textNode)
Hr validation failed 'element->appendChild(textNode, NULL)
Hr validation failed 'nodes->nextNode(OUT &node)
Hr validation failed 'element->removeChild(node, OUT &oldChild)
Hr validation failed 'element->get_childNodes(OUT &nodes)
Hr validation failed 'element->get_xml(OUT &text)
Hr validation failed 'element->selectNodes(CComBSTR(query.c_str()), OUT &nodes)
Hr validation failed 'element->selectSingleNode(CComBSTR(query.c_str()), OUT &node)
NoChildrenException
InvalidItemNameException
InvalidScopeException
InvalidChildNodeException
TreeException
IndexNotFoundException
onecoreuap\ds\security\rm\client\src\base\serialization\TypeConversions.h
InvalidRootException
Validation failed 'elements.size() > 1'
Validation failed 'configuration.Root().first == element->Index()'
onecoreuap\ds\security\rm\client\src\base\serialization\xmlreader.cpp
onecoreuap\ds\security\rm\client\src\base\serialization\IndexedTree.h
Validation failed 'item'
Validation failed 'FindFirst(target, OUT result)'
onecoreuap\ds\security\rm\client\src\base\serialization\SafeEnum.h
version
onecoreuap\ds\security\rm\client\src\base\serialization\xmlprotocol.cpp
Validation failed 'name.length() > 1'
_Element%i
Validation failed 'name.length() > 0'
onecoreuap\ds\security\rm\client\src\base\serialization\serializationtree.cpp
Validation failed 'tree'
Validation failed 'data.empty()'
Validation failed 'tree->Index() == element->Name().c_str()'
Validation failed 'name.size() > 0'
SerializationTreeNameConflictException
SerializationTreeException
SerializationTreeElementNameException
Microsoft::InformationProtection::CCLCLicense::LogCLC
onecoreuap\ds\security\rm\client\src\msipc\licenses\cclclicense.cpp
[msipp]:+CCLCLicense::SetIssuerName Setting Issuer name based on the URL: %ws
++++++++ INFORMATION: CLC details: ++++++++
          User: "%ws",
          Issuer name: "%ws",
          Issuer Id: "%ws",
          Intranet Licensing Url: "%ws",
          Extranet Licensing Url: "%ws".
onecoreuap\ds\security\rm\client\src\msipc\licenses\cclclicense.cpp
vDPTypes.size() == m_vwstrDistributionPointXMLs.size()
Validation failed '0 != dynamic_cast<VN*>(m_pCurrent)'
@type
DISTRIBUTIONPOINT
PRINCIPAL
ISSUER
ISSUEDPRINCIPALS
OBJECT
msipc
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\revokeobject.cpp
Microsoft::InformationProtection::JsonLicenses::RevokeObject::DeserializeFromObject
Microsoft::InformationProtection::JsonLicenses::RevokeObject::AddSerializableData
onecoreuap\ds\security\rm\client\src\msipc\jsonlicenses\revokeobject.cpp
RevokedTime
RevokedBy
RevokedMessage
msipc
raB3G
MsipcApi
wszMsipcApi
FallbackError
PartA_PrivTags
wilResult
hresult
fileName
lineNumber
module
failureType
message
threadId
callContext
originatingContextId
originatingContextName
originatingContextMessage
currentContextId
currentContextName
currentContextMessage
failureId
failureCount
function
MsipcActivity
PartA_PrivTags
wilActivity
hresult
threadId
FallbackError
PartA_PrivTags
wilResult
hresult
fileName
lineNumber
module
failureType
message
threadId
callContext
originatingContextId
originatingContextName
originatingContextMessage
currentContextId
currentContextName
currentContextMessage
MsipcApiConnectionInfo
wszIntranetUrl
wszExtranetUrl
MsipcActivity
PartA_PrivTags
wilActivity
threadId
MsipcApiOnline
bOnline
ActivityError
PartA_PrivTags
wilActivity
hresult
fileName
lineNumber
module
failureType
message
threadId
callContext
originatingContextId
originatingContextName
originatingContextMessage
currentContextId
currentContextName
currentContextMessage
failureId
failureCount
function
MsipcApiUserProvided
bUserProvided
ActivityError
PartA_PrivTags
wilActivity
hresult
fileName
lineNumber
module
failureType
message
threadId
callContext
originatingContextId
originatingContextName
originatingContextMessage
currentContextId
currentContextName
currentContextMessage
MsipcApiAuthCallbackProvided
bAuthCallbackProvided
ActivityIntermediateStop
PartA_PrivTags
wilActivity
hresult
threadId
MsipcApiTokenProvided
bTokenProvided
MsipcActivity
PartA_PrivTags
PartA_PrivTags
wilActivity
hresult
fileName
lineNumber
module
failureType
message
threadId
callContext
originatingContextId
originatingContextName
originatingContextMessage
currentContextId
currentContextName
currentContextMessage
ActivityStoppedAutomatically
StopApi
logEvent
success
MsipcApiBootstrapIdentity
wszIntranetUrl
wszExtranetUrl
bUserProvided
MsipcApiRenewIdentity
MsipcApiIdentityExpired
f W{Q
Microsoft.Windows.ErrorHandling.Fallback
Microsoft.InformaionProtection.RMS.MSIPC
winmsipc.pdb
.text
.text$di
.text$mn
.text$mn$00
.text$x
.text$yd
.rdata$brc
.rdata$T$brc
.idata$5
.00cfg
.CRT$XCA
.CRT$XCC
.CRT$XCL
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIAA
.CRT$XIZ
.CRT$XLA
.CRT$XLZ
.gehcont
.gfids
.giats
.rdata
.rdata$r
.rdata$voltmd
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zzzdbg
.tls$
.tls$ZZZ
.xdata
.xdata$x
.didat$2
.didat$3
.didat$4
.didat$6
.didat$7
.edata
.idata$2
.idata$3
.idata$4
.idata$6
.data$brc
.data$r$brc
.data$rs$brc
.data
.pdata
.didat$5
.rsrc$01
.rsrc$02
. .".$.&.(.*.,L..0.2.4.6.8.:.<.>.@FBDDFFFH.J.L.N.P.R.T.V.X.Z.\.^.`.b.d.f.h.j.l.n.p.r.t.v.x.z.|.~.
,f*,"
""$L]
**,U]
..0^]
 (08@HP
!;8@N
F ,",$D
`08@H
 T"P&v,
t"|$2&
("*Z(d
4.6x8h6":@6e
.f2V4D6p4:8
BRD0BpF6BQ
&H(L,-
6 h"n$"& *
8@HPZd
08@HR,D
 (08@HP
08@HPX`hpx
A(8@N
(".$V":&
08@HPX`
b8@Jd
p |"L -
P <"L$8&
$V&z$
L L"L$(&((.*(,
v p"p$p&=
8@HPZ
CertGetEnhancedKeyUsage
CertGetCertificateChain
CertFreeCertificateContext
CryptHashCertificate2
CertFreeCertificateChain
CertVerifyCertificateChainPolicy
WinHttpQueryDataAvailable
WinHttpCrackUrl
WinHttpConnect
WinHttpQueryOption
WinHttpSetStatusCallback
WinHttpSendRequest
WinHttpCloseHandle
WinHttpSetOption
WinHttpOpenRequest
WinHttpReadData
WinHttpQueryHeaders
WinHttpAddRequestHeaders
WinHttpOpen
WinHttpReceiveResponse
CertCompareCertificate
WinHttpGetProxyForUrl
WinHttpGetIEProxyConfigForCurrentUser
WinHttpSetCredentials
WinHttpQueryAuthSchemes
HttpOpenRequestW
InternetQueryOptionW
InternetQueryDataAvailable
InternetErrorDlg
InternetOpenW
HttpQueryInfoW
InternetCrackUrlW
HttpSendRequestW
InternetCloseHandle
InternetConnectW
InternetSetOptionW
InternetReadFile
HttpAddRequestHeadersW
winmsipc.dll
_XcptFilter
_amsg_exit
malloc
_initterm
__C_specific_handler
msvcrt.dll
_lock
_unlock
__dllonexit
_onexit
GetModuleHandleW
Sleep
QueryPerformanceCounter
GetCurrentProcessId
GetCurrentThreadId
GetSystemTimeAsFileTime
GetTickCount
RtlCaptureContext
RtlLookupFunctionEntry
RtlVirtualUnwind
UnhandledExceptionFilter
SetUnhandledExceptionFilter
GetCurrentProcess
TerminateProcess
EventActivityIdControl
GetModuleFileNameA
InitOnceBeginInitialize
CreateSemaphoreExW
HeapFree
SetLastError
ReleaseSemaphore
GetModuleHandleExW
OutputDebugStringA
CoUninitialize
GetThreadLocale
EventUnregister
WaitForSingleObject
ReleaseMutex
EventSetInformation
FormatMessageW
GetLastError
ReleaseSRWLockExclusive
OutputDebugStringW
InitOnceComplete
AcquireSRWLockExclusive
WaitForSingleObjectEx
OpenSemaphoreW
CloseHandle
HeapAlloc
EventRegister
GetProcAddress
CreateMutexExW
GetProcessHeap
EventWriteTransfer
CoInitializeEx
DebugBreak
IsDebuggerPresent
EventEnabled
MultiByteToWideChar
EventWrite
WideCharToMultiByte
GetTokenInformation
TlsSetValue
EnterCriticalSection
OpenThreadToken
ConvertSidToStringSidW
InitializeCriticalSectionAndSpinCount
LeaveCriticalSection
CreateMutexW
OpenProcessToken
CreateEventW
SetEvent
GetCurrentThread
TlsAlloc
ResetEvent
DeleteCriticalSection
TlsGetValue
GetFileVersionInfoSizeExW
GetFileVersionInfoExW
BCryptGetProperty
CoCreateGuid
StringFromGUID2
GetModuleFileNameW
VerQueryValueW
LocalAlloc
GetVersionExW
GetUserPreferredUILanguages
BCryptOpenAlgorithmProvider
BCryptFinishHash
GetNativeSystemInfo
GetSystemInfo
BCryptCloseAlgorithmProvider
FindResourceExW
LoadResource
BCryptDestroyHash
LocalFree
LocaleNameToLCID
GetSystemPreferredUILanguages
BCryptHashData
BCryptCreateHash
CreateDirectoryW
ReadFile
FindFirstFileW
FindNextFileW
WriteFile
SetFilePointer
FindClose
CreateFileW
GetFileAttributesW
SetFileAttributesW
DeleteFileW
GetFileSize
RegQueryValueExW
RegEnumValueW
RegDeleteValueW
RegOpenKeyExW
RegSetValueExW
RegCreateKeyExW
RegDeleteKeyW
RegEnumKeyW
RegCloseKey
CLSIDFromString
FreeLibrary
NetApiBufferFree
LoadLibraryExW
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-rtlsupport-l1-1-0.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-eventing-provider-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-com-l1-1-0.dll
api-ms-win-core-localization-l1-2-0.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-string-l1-1-0.dll
api-ms-win-security-base-l1-1-0.dll
api-ms-win-security-sddl-l1-1-0.dll
api-ms-win-core-version-l1-1-0.dll
bcrypt.dll
api-ms-win-core-heap-l2-1-0.dll
api-ms-win-core-sysinfo-l1-2-0.dll
api-ms-win-core-file-l1-1-0.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-core-registry-l2-1-0.dll
api-ms-win-core-memory-l1-1-0.dll
netutils.dll
GetDesktopWindow
api-ms-win-rtcore-ntuser-window-l1-1-0.dll
__CxxFrameHandler4
??_V@YAXPEAX@Z
_vsnwprintf
memcpy_s
_wcsicmp
_vsnprintf
??3@YAXPEAX@Z
_purecall
??1exception@@UEAA@XZ
??0exception@@QEAA@XZ
??0exception@@QEAA@AEBV0@@Z
_vsnprintf_s
strchr
sprintf_s
wcsnlen
strnlen
wcsncpy_s
wcsncmp
_callnewh
??0exception@@QEAA@AEBQEBD@Z
??0exception@@QEAA@AEBQEBDH@Z
?what@exception@@UEBAPEBDXZ
_CxxThrowException
__CxxFrameHandler3
memcpy
memmove
_wcsdup
??8type_info@@QEBAHAEBV0@@Z
__crtCompareStringW
__crtLCMapStringW
__crtLCMapStringA
_wsetlocale
___lc_handle_func
?terminate@@YAXXZ
??1type_info@@UEAA@XZ
VirtualProtect
LoadLibraryExA
RaiseException
VirtualQuery
InitializeCriticalSectionEx
ConvertStringSecurityDescriptorToSecurityDescriptorW
CryptImportKey
CryptSetKeyParam
LCIDToLocaleName
CryptDecrypt
FileTimeToSystemTime
CryptEncrypt
CryptAcquireContextW
GetSystemTime
SHGetFolderPathW
CompareFileTime
GetFileAttributesExW
SetEndOfFile
CryptReleaseContext
CoCreateInstance
QueryPerformanceFrequency
CreateEventExW
GlobalFree
SystemTimeToFileTime
CryptGetHashParam
CryptDestroyHash
CryptSetHashParam
CryptHashData
CryptCreateHash
CryptVerifySignatureW
CryptGenRandom
CryptDestroyKey
DsGetDcNameW
GetComputerNameExW
api-ms-win-security-cryptoapi-l1-1-0.dll
api-ms-win-core-localization-l1-2-2.dll
api-ms-win-core-timezone-l1-1-0.dll
ext-ms-win-shell32-shellfolders-l1-1-0.dll
WLDAP32.dll
logoncli.dll
??1bad_cast@@UEAA@XZ
??0bad_cast@@QEAA@PEBD@Z
??0bad_cast@@QEAA@AEBV0@@Z
towlower
wcstol
iswspace
strcspn
localeconv
swprintf_s
_errno
wcscpy_s
strrchr
wcschr
wcsstr
fwscanf_s
calloc
_wfopen_s
fclose
fseek
_strlwr_s
strncmp
_wcslwr_s
_ultoa_s
strstr
_wcsnicmp
wcsrchr
_time64
_ultow_s
_wtoi
_itow_s
realloc
wcstoul
wcstok_s
toupper
setlocale
__uncaught_exception
__pctype_func
isupper
___lc_codepage_func
___mb_cur_max_func
_ismbblead
islower
abort
memset
___lc_collate_cp_func
memcmp
GetStringTypeW
EncodePointer
DecodePointer
WakeAllConditionVariable
SleepConditionVariableSRW
GetDynamicTimeZoneInformation
DnsQuery_W
DnsFree
PathIsURLW
UrlGetPartW
SizeofResource
LockResource
api-ms-win-core-util-l1-1-0.dll
DNSAPI.dll
api-ms-win-core-url-l1-1-0.dll
isalpha
?name@type_info@@QEBAPEBDXZ
iswalnum
_mbsinc
_ismbcspace
_mbsrev
_mbscspn
_mbsstr
memmove_s
HeapSize
HeapReAlloc
HeapDestroy
InitializeCriticalSection
_vsnwprintf_s
_vscwprintf
__RTDynamicCast
wcscmp
.?AVinvalid_argument@std@@
.?AVlogic_error@std@@
.?AVlength_error@std@@
.?AVout_of_range@std@@
.?AVbad_function_call@std@@
.?AVregex_error@std@@
.?AVIpcHandle@@
.?AV?$SharedPointerHandle@VIIppLicenseWithMetadata@InformationProtection@Microsoft@@@@
.?AVbad_alloc@std@@
.?AV?$SharedPointerHandle@VIIppLicense@InformationProtection@Microsoft@@@@
.?AVResultException@wil@@
.?AV?$SharedPointerHandle@VIIppKey@InformationProtection@Microsoft@@@@
.?AVFreeIpcBufferFunctor@InformationProtection@Microsoft@@
.?AVexception@@
.?AVInvalidHandleTypeException@@
.?AVHresultException@@
.?AV?$SharedPointerHandle@VIIppUser@InformationProtection@Microsoft@@@@
.?AVHandleException@@
.?AVException@@
.?AVFsException@Common@FoundationServices@Microsoft@@
.?AVNullHandleException@@
.?AVSafeIntException@@
.?AVIIpcOsPath@OperatingSystem@InformationProtection@Microsoft@@
.?AVCIpcOsPath@OperatingSystem@InformationProtection@Microsoft@@
.?AVfailure@ios_base@std@@
.?AVruntime_error@std@@
.?AVbad_cast@@
.?AVsystem_error@std@@
.?AVIncorrectBufferSizeException@@
.?AV_com_error@@
.?AV<lambda_8365a833b8fe5ac981227a48af927a28>@@
.?AV<lambda_b1340379e8d9b8874765b559d8a0edb5>@@
.?AV<lambda_931eb1e0976bb56038fdca63b07def58>@@
.?AVCAtlException@ATL@@
.?AVSymmetricKeyTokenIncorrectSizeException@InformationProtection@Microsoft@@
.?AVCloseWinHttpHandleFunctor@@
.?AVSymmetricKeyToken@InformationProtection@Microsoft@@
.?AVIIpcToken@InformationProtection@Microsoft@@
.?AVIIpcTokenException@InformationProtection@Microsoft@@
.?AVSymmetricKeyTokenNotUsingWinHttpException@InformationProtection@Microsoft@@
.?AVX509TokenNotUsingWinHttpException@InformationProtection@Microsoft@@
.?AVX509TokenIncorrectSizeException@InformationProtection@Microsoft@@
.?AVOrgIdIdcrlTokenException@InformationProtection@Microsoft@@
.?AVUserApplicationException@Common@FoundationServices@Microsoft@@
.?AVOAuth2TokenException@InformationProtection@Microsoft@@
.?AVOAuth2Token@InformationProtection@Microsoft@@
.?AVServerInfoInvalidUrlException@InformationProtection@Microsoft@@
.?AVIServerInfoNotSupportedException@InformationProtection@Microsoft@@
.?AVIServerInfoException@InformationProtection@Microsoft@@
.?AVServerInfoUnSupportedAuthTypeException@InformationProtection@Microsoft@@
.?AVWindowsUsernameAndPasswordToken@InformationProtection@Microsoft@@
.?AVWindowsUsernameAndPasswordTokenException@InformationProtection@Microsoft@@
.?AVLoggedOnUserTokenException@InformationProtection@Microsoft@@
.?AVILicense@InformationProtection@Microsoft@@
.?AVIPLLicense@InformationProtection@Microsoft@@
.?AVFileStoreObject@store@@
.?AVIEULLicense@InformationProtection@Microsoft@@
.?AVIStoreObject@store@@
.?AVICLCLicense@InformationProtection@Microsoft@@
.?AVCJsonCLCLicense@JsonLicenses@InformationProtection@Microsoft@@
.?AV<lambda_89ae7c55f310c536b714b20c52a8d5ed>@@
.?AV<lambda_ec4b1714ee6dd9e85cef8d60cd3f3a39>@@
.?AVCUserIdentityCacheKey@InformationProtection@Microsoft@@
.?AVICacheKey@Common@FoundationServices@Microsoft@@
.?AVIUserIdentitiesIncorrectBufferSizeException@InformationProtection@Microsoft@@
.?AVIUserIdentitiesException@InformationProtection@Microsoft@@
.?AVIUserIdentitiesNotEnoughMemoryException@InformationProtection@Microsoft@@
.?AVIIppUser@InformationProtection@Microsoft@@
.?AV<lambda_a63007df84f36ef2d8e0b2a575367a22>@@
.?AV<lambda_5729b6d261b8d11aabeaa7150a8cdce2>@@
.?AVWin7IppUser@InformationProtection@Microsoft@@
.?AVUserIdentityNotFoundForTemplateIssuerException@InformationProtection@Microsoft@@
.?AVWin7IppKey@InformationProtection@Microsoft@@
.?AVIIppKey@InformationProtection@Microsoft@@
.?AV?$FreeArrayObject@PEAG@@
.?AVIUrlIteratorInvalidArgException@InformationProtection@Microsoft@@
.?AVTemplateIssuerIncorrectBufferSizeException@InformationProtection@Microsoft@@
.?AVTemplateIssuerNotEnoughMemoryException@InformationProtection@Microsoft@@
.?AVTemplateInfoNotEnoughMemoryException@InformationProtection@Microsoft@@
.?AVArgumentException@Serialization@@
.?AV?$NamedElement@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@@Serialization@@
.?AVSerializationException@Serialization@@
.?AV?$NamedElement@I@Serialization@@
.?AVNoTypeNameFoundException@XmlProtocolExceptions@Serialization@@
.?AVDeserializeTreeNode@Implementation@Serialization@@
.?AVTypeConversionsException@@
.?AVXmlProtocolException@XmlProtocolExceptions@Serialization@@
.?AV?$NamedElement@VCAppSpecificData@InformationProtection@Microsoft@@@Serialization@@
.?AV?$NamedElement@VCRightListHelper@InformationProtection@Microsoft@@@Serialization@@
.?AV?$NamedElement@VCVersionSpan@InformationProtection@Microsoft@@@Serialization@@
.?AV?$NamedElement@VCPolicyList@InformationProtection@Microsoft@@@Serialization@@
.?AV?$NamedElement@VCTimeConditionHelper@InformationProtection@Microsoft@@@Serialization@@
.?AVDeserializeTreeVectorNode@Implementation@Serialization@@
.?AVCVersionSpan@InformationProtection@Microsoft@@
.?AVCTimeRange@InformationProtection@Microsoft@@
.?AVInvalidValueException@SafeEnumExceptions@@
.?AVSafeEnumException@@
.?AV?$NamedElement@VCPublicKey@InformationProtection@Microsoft@@@Serialization@@
.?AV?$NamedElement@VCSignature@InformationProtection@Microsoft@@@Serialization@@
.?AV?$NamedElement@VCTimeRange@InformationProtection@Microsoft@@@Serialization@@
.?AV?$NamedElement@VCPrincipal@InformationProtection@Microsoft@@@Serialization@@
.?AV<lambda_990c01d070e2e16db686d8c81995fbf9>@@
.?AV?$NamedElement@VCRightNameSetHelper@InformationProtection@Microsoft@@@Serialization@@
.?AVIRACLicense@InformationProtection@Microsoft@@
.?AV?$NamedElement@G@Serialization@@
.?AVCRight@InformationProtection@Microsoft@@
.?AV?$NamedElement@VCRight@InformationProtection@Microsoft@@@Serialization@@
.?AV?$NamedElement@VCUsagePolicy@InformationProtection@Microsoft@@@Serialization@@
.?AVDomException@@
.?AVArgumentException@DomExceptions@@
.?AVbad_weak_ptr@std@@
.?AVDocumentWriteException@MSXmlDomExceptions@@
.?AVDocumentReadException@MSXmlDomExceptions@@
.?AVMSXmlDomException@@
.?AVDocumentReadHrException@MSXmlDomExceptions@@
.?AVDocumentCreationException@MSXmlDomExceptions@@
.?AVElementException@MSXmlDomExceptions@@
.?AVAttributeException@MSXmlDomExceptions@@
.?AVNodeCastException@MSXmlDomExceptions@@
.?AVQueryException@MSXmlDomExceptions@@
.?AVAttributeReadException@MSXmlDomExceptions@@
.?AVAttributeWriteException@MSXmlDomExceptions@@
.?AVChangeRootException@MSXmlDomExceptions@@
.?AVNodeTypeException@MSXmlDomExceptions@@
.?AVTextWriteException@MSXmlDomExceptions@@
.?AVNodeInformationException@MSXmlDomExceptions@@
.?AVElementReadException@MSXmlDomExceptions@@
.?AVElementWriteException@MSXmlDomExceptions@@
.?AVTextException@MSXmlDomExceptions@@
.?AVTextReadException@MSXmlDomExceptions@@
.?AVNoChildrenException@XmlProtocolExceptions@Serialization@@
.?AVInvalidItemNameException@XmlProtocolExceptions@Serialization@@
.?AVIndexNotFoundException@@
.?AVInvalidChildNodeException@@
.?AVTreeException@@
.?AVInvalidRootException@XmlProtocolExceptions@Serialization@@
.?AVInvalidScopeException@XmlProtocolExceptions@Serialization@@
.?AVSerializationTreeNameConflictException@Serialization@@
.?AVSerializationTreeException@Serialization@@
.?AVSerializationTreeElementNameException@Serialization@@
.?AVMsipcActivity@IpcTelemetryTraceLoggingImpl@InformationProtection@Microsoft@@
.?AUIFailureCallback@details@wil@@
.?AV?$SharedPointerHandle@VIIpcAuthToken@InformationProtection@Microsoft@@@@
.?AVErrorHandlingHelpers@wil@@
.?AVerror_category@std@@
.?AV?$_Ref_count@VIIppUser@InformationProtection@Microsoft@@@std@@
.?AV_System_error_category@std@@
.?AV?$SharedPointerHandle@$$CBVIIppKey@InformationProtection@Microsoft@@@@
.?AVMSIPCTraceLoggingProvider@InformationProtection@Microsoft@@
.?AV_Generic_error_category@std@@
.?AV?$_Ref_count@VIIppLicenseWithMetadata@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@G@std@@
.?AV?$_Ref_count@VIIppKey@InformationProtection@Microsoft@@@std@@
.?AV_Iostream_error_category@std@@
.?AV?$_Ref_count_del@XVFreeIpcBufferFunctor@InformationProtection@Microsoft@@@std@@
.?AV_Ref_count_base@std@@
.?AVTraceLoggingProvider@wil@@
.?AVCCacheMRUQueue@Common@FoundationServices@Microsoft@@
.?AV?$ActivityBase@VMSIPCTraceLoggingProvider@InformationProtection@Microsoft@@$00$0CAAAAAAAAAAA@$04$0A@U_TlgReflectorTag_Param0IsProviderType@@@wil@@
.?AVICache@Common@FoundationServices@Microsoft@@
.?AV?$_Ref_count@VIIppLicense@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@$$CBVIIppLicense@InformationProtection@Microsoft@@@std@@
.?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@
.?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@
.?AVios_base@std@@
.?AV?$ctype@D@std@@
.?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@
.?AV_Facet_base@std@@
.?AV?$_Iosb@H@std@@
.?AV?$numpunct@D@std@@
.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@
.?AUctype_base@std@@
.?AV?$basic_istream@DU?$char_traits@D@std@@@std@@
.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@
.?AVfacet@locale@std@@
.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@
.?AV?$_Ref_count@VRegistry@Common@FoundationServices@Microsoft@@@std@@
.?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@
.?AV?$ctype@G@std@@
.?AV?$basic_ios@GU?$char_traits@G@std@@@std@@
.?AV?$basic_ostream@GU?$char_traits@G@std@@@std@@
.?AV?$basic_stringstream@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@
.?AV?$basic_iostream@GU?$char_traits@G@std@@@std@@
.?AV?$num_put@GV?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@@std@@
.?AV?$basic_streambuf@GU?$char_traits@G@std@@@std@@
.?AV?$basic_stringbuf@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@
.?AV?$basic_istream@GU?$char_traits@G@std@@@std@@
.?AV?$numpunct@G@std@@
.?AUIUnknown@@
.?AVIIpcLogger@@
.?AVCIpcEtwLogChannel@InformationProtection@Microsoft@@
.?AVCIpcLogger@InformationProtection@Microsoft@@
.?AVCIpcDebugOutputLogChannel@InformationProtection@Microsoft@@
.?AVIIpcLogChannel@InformationProtection@Microsoft@@
.?AVCIpcMemoryLogChannel@InformationProtection@Microsoft@@
.?AVCIpcFileLogChannel@InformationProtection@Microsoft@@
.?AV?$_Ref_count@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@@std@@
.?AVCHttpBase@@
.?AVCDRMSoapRequest@@
.?AVITimer@util@@
.?AV?$_Func_base@_NV?$shared_ptr@VHttpActivity@?A0xf13b1a0a@@@std@@U_Nil@2@U32@U32@U32@U32@U32@@std@@
.?AV?$_Ref_count@VTimer@util@@@std@@
.?AV?$_Ref_count_obj@V?$AutoActivity@VMsipcActivity@IpcTelemetryTraceLoggingImpl@InformationProtection@Microsoft@@@InformationProtection@Microsoft@@@std@@
.?AV?$_Func_impl@U?$_Callable_obj@V<lambda_931eb1e0976bb56038fdca63b07def58>@@$0A@@std@@V?$allocator@V?$_Func_class@_NV?$shared_ptr@VHttpActivity@?A0xf13b1a0a@@@std@@U_Nil@2@U32@U32@U32@U32@U32@@std@@@2@_NV?$shared_ptr@VHttpActivity@?A0xf13b1a0a@@@2@U_Nil@2@U52@U52@U52@U52@U52@@std@@
.?AV?$_Func_impl@U?$_Callable_obj@V<lambda_8365a833b8fe5ac981227a48af927a28>@@$0A@@std@@V?$allocator@V?$_Func_class@XAEAVMsipcActivity@IpcTelemetryTraceLoggingImpl@InformationProtection@Microsoft@@U_Nil@std@@U56@U56@U56@U56@U56@@std@@@2@XAEAVMsipcActivity@IpcTelemetryTraceLoggingImpl@InformationProtection@Microsoft@@U_Nil@2@U82@U82@U82@U82@U82@@std@@
.?AV?$_Ref_count_obj@VMsipcActivity@IpcTelemetryTraceLoggingImpl@InformationProtection@Microsoft@@@std@@
.?AV?$_Func_impl@U?$_Callable_obj@V<lambda_b1340379e8d9b8874765b559d8a0edb5>@@$0A@@std@@V?$allocator@V?$_Func_class@_NV?$shared_ptr@VHttpActivity@?A0xf13b1a0a@@@std@@U_Nil@2@U32@U32@U32@U32@U32@@std@@@2@_NV?$shared_ptr@VHttpActivity@?A0xf13b1a0a@@@2@U_Nil@2@U52@U52@U52@U52@U52@@std@@
.?AVTimer@util@@
.?AV?$_Ref_count@VHttpActivity@?A0xf13b1a0a@@@std@@
.?AV?$_Func_base@XAEAVMsipcActivity@IpcTelemetryTraceLoggingImpl@InformationProtection@Microsoft@@U_Nil@std@@U56@U56@U56@U56@U56@@std@@
.?AV?$_Ref_count@VProxyResolverWrapper@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count_del@XVCloseWinHttpHandleFunctor@@@std@@
.?AV?$_Ref_count@VSymmetricKeyToken@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@VServerInfoCache@InformationProtection@Microsoft@@@std@@
.?AVServerInfoCache@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VServerInfoMapData@ServerInfoCache@InformationProtection@Microsoft@@@std@@
.?AVIServerInfoCache@InformationProtection@Microsoft@@
.?AVIpcTokenCache@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VIpcTokenCache@InformationProtection@Microsoft@@@std@@
.?AVIIpcTokenCache@InformationProtection@Microsoft@@
.?AVX509Token@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VX509Token@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@VProxyResolver@InformationProtection@Microsoft@@@std@@
.?AVOrgIdIdcrlToken@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VOrgIdIdcrlToken@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@VOAuth2Token@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@VServerInfoImpl@InformationProtection@Microsoft@@@std@@
.?AVServerInfo@InformationProtection@Microsoft@@
.?AVUnknownServerInfo@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VUnknownServerInfo@InformationProtection@Microsoft@@@std@@
.?AVIServerInfo@InformationProtection@Microsoft@@
.?AVServerInfoImpl@InformationProtection@Microsoft@@
.?AV_SharedData@WindowsUsernameAndPasswordToken@InformationProtection@Microsoft@@
.?AVINtlmUrlCache@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VWindowsUsernameAndPasswordToken@InformationProtection@Microsoft@@@std@@
.?AVIWindowsToken@InformationProtection@Microsoft@@
.?AV?$_Ref_count@V_SharedData@WindowsUsernameAndPasswordToken@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@VNtlmUrlCache@InformationProtection@Microsoft@@@std@@
.?AVNtlmUrlCache@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VLoggedOnUserToken@InformationProtection@Microsoft@@@std@@
.?AVLoggedOnUserToken@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VIpcAuthToken@InformationProtection@Microsoft@@@std@@
.?AVIpcAuthToken@InformationProtection@Microsoft@@
.?AVIIpcAuthToken@InformationProtection@Microsoft@@
.?AVCipherInfo@InformationProtection@Microsoft@@
.?AVIppTerm@InformationProtection@Microsoft@@
.?AVIppUser@InformationProtection@Microsoft@@
.?AVIppAcl@InformationProtection@Microsoft@@
.?AVLicenseNameValue@InformationProtection@Microsoft@@
.?AVIppSettings@InformationProtection@Microsoft@@
.?AVConnectionInfo@InformationProtection@Microsoft@@
.?AV?$_Ref_count@U_IPC_NAME_VALUE_LIST@@@std@@
.?AVCJsonPLLicense@JsonLicenses@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VCPLLicense@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@VCJsonPLLicense@JsonLicenses@InformationProtection@Microsoft@@@std@@
.?AVIJsonObject@JsonLicenses@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VPublishingLicense@JsonLicenses@InformationProtection@Microsoft@@@std@@
.?AVPublishingLicense@JsonLicenses@InformationProtection@Microsoft@@
.?AVRSAKey@JsonLicenses@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VRSAKey@JsonLicenses@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@VCKeyBlob@@@std@@
.?AV?$_Ref_count@VIssuer@JsonLicenses@InformationProtection@Microsoft@@@std@@
.?AVIssuer@JsonLicenses@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VSignature@JsonLicenses@InformationProtection@Microsoft@@@std@@
.?AVSignature@JsonLicenses@InformationProtection@Microsoft@@
.?AVUserCertPublicData@JsonLicenses@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VUserCertPublicData@JsonLicenses@InformationProtection@Microsoft@@@std@@
.?AVIssuedTo@JsonLicenses@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VIssuedTo@JsonLicenses@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@VHeader@JsonLicenses@InformationProtection@Microsoft@@@std@@
.?AVHeader@JsonLicenses@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VLicense@JsonLicenses@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@VSessionKey@JsonLicenses@InformationProtection@Microsoft@@@std@@
.?AVLicense@JsonLicenses@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VPolicy@JsonLicenses@InformationProtection@Microsoft@@@std@@
.?AVContentKey@JsonLicenses@InformationProtection@Microsoft@@
.?AVPolicy@JsonLicenses@InformationProtection@Microsoft@@
.?AVSessionKey@JsonLicenses@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VContentKey@JsonLicenses@InformationProtection@Microsoft@@@std@@
.?AVCustomPolicy@JsonLicenses@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VCustomPolicy@JsonLicenses@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@VUserRights@JsonLicenses@InformationProtection@Microsoft@@@std@@
.?AVUserRights@JsonLicenses@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VFileStoreObject@store@@@std@@
.?AV?$_Ref_count_obj@VStorePath@InformationProtection@Microsoft@@@std@@
.?AVStringArray@@
.?AV?$_Ref_count@VStringArray@@@std@@
.?AVEntry@@
.?AVCDRMCBase@@
.?AVCMetaData@@
.?AVCIssuanceLicense@@
.?AVCCLCPubData@@
.?AVCRight@@
.?AVCRACPubData@@
.?AVCUser@@
.?AVIIssuanceLicense@@
.?AVCNameValue@@
.?AVCUsagePolicy@@
.?AVJsonIssuanceLicense@@
.?AVICacheElement@Common@FoundationServices@Microsoft@@
.?AV?$_Ref_count@UIpcUserPrincipal@InformationProtection@Microsoft@@@std@@
.?AVIPPUserIdentity@InformationProtection@Microsoft@@
.?AVIppIdentityManager@InformationProtection@Microsoft@@
.?AVIIppIdentityManager@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VIPPUserIdentity@InformationProtection@Microsoft@@@std@@
.?AVCIppUserEnv@InformationProtection@Microsoft@@
.?AVIppRefBase@@
.?AV?$_Func_impl@U?$_Callable_obj@V<lambda_89ae7c55f310c536b714b20c52a8d5ed>@@$0A@@std@@V?$allocator@V?$_Func_class@V?$shared_ptr@VICLCLicense@InformationProtection@Microsoft@@@std@@PEBGAEBV?$shared_ptr@VIIpcContext@InformationProtection@Microsoft@@@2@U_Nil@2@U42@U42@U42@U42@@std@@@2@V?$shared_ptr@VICLCLicense@InformationProtection@Microsoft@@@2@PEBGAEBV?$shared_ptr@VIIpcContext@InformationProtection@Microsoft@@@2@U_Nil@2@U62@U62@U62@U62@@std@@
.?AV?$_Func_impl@U?$_Callable_obj@V<lambda_ec4b1714ee6dd9e85cef8d60cd3f3a39>@@$0A@@std@@V?$allocator@V?$_Func_class@V?$shared_ptr@VIPLLicense@InformationProtection@Microsoft@@@std@@PEBGAEBV?$shared_ptr@VIIpcContext@InformationProtection@Microsoft@@@2@U_Nil@2@U42@U42@U42@U42@@std@@@2@V?$shared_ptr@VIPLLicense@InformationProtection@Microsoft@@@2@PEBGAEBV?$shared_ptr@VIIpcContext@InformationProtection@Microsoft@@@2@U_Nil@2@U62@U62@U62@U62@@std@@
.?AV?$_Ref_count@VIIpcContext@InformationProtection@Microsoft@@@std@@
.?AVIPPLicenseStore@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VMsipcActivity@IpcTelemetryTraceLoggingImpl@InformationProtection@Microsoft@@@std@@
.?AV?$_Func_base@V?$shared_ptr@VIPLLicense@InformationProtection@Microsoft@@@std@@PEBGAEBV?$shared_ptr@VIIpcContext@InformationProtection@Microsoft@@@2@U_Nil@2@U42@U42@U42@U42@@std@@
.?AV?$_Func_base@V?$shared_ptr@VICLCLicense@InformationProtection@Microsoft@@@std@@PEBGAEBV?$shared_ptr@VIIpcContext@InformationProtection@Microsoft@@@2@U_Nil@2@U42@U42@U42@U42@@std@@
.?AV?$_Ref_count@VDelegationLicenseAcq@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@VIEULLicense@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@VCLicenseAcq@@@std@@
.?AV?$_Ref_count@VCPreLicenseAcq@@@std@@
.?AV?$_Ref_count@U_IPC_CONNECTION_INFO@@@std@@
.?AV?$_Ref_count@VConnectionInfoCacheKey@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@V?$autosrwlock@VReaderWriterLock@Common@FoundationServices@Microsoft@@@Common@FoundationServices@Microsoft@@@std@@
.?AV?$_Ref_count@VCUserIdentityCacheKey@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@UIPP_ID_REGVALUES@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@U_IPP_USER_FROM_CONNECTION_INFO@@@std@@
.?AVUserConsent@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VUserConsent@InformationProtection@Microsoft@@@std@@
.?AVIUserConsent@InformationProtection@Microsoft@@
.?AVConnectionInfoCacheKey@InformationProtection@Microsoft@@
.?AVUserIdentities@InformationProtection@Microsoft@@
.?AVIUserIdentities@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VUserIdentities@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@VIPLLicense@InformationProtection@Microsoft@@@std@@
.?AV?$_Func_base@XV?$shared_ptr@$$CBV?$vector@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@V?$allocator@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@@2@@std@@@std@@AEAV?$vector@V?$shared_ptr@VIEULLicense@InformationProtection@Microsoft@@@std@@V?$allocator@V?$shared_ptr@VIEULLicense@InformationProtection@Microsoft@@@std@@@2@@2@AEAV?$vector@JV?$allocator@J@std@@@2@U_Nil@2@U52@U52@U52@@std@@
.?AV?$_Ref_count@VOfflinePL@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@V?$vector@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@V?$allocator@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@@2@@std@@@std@@
.?AVWin7IppLicense@InformationProtection@Microsoft@@
.?AVIIppLicense@InformationProtection@Microsoft@@
.?AV?$_Func_impl@U?$_Callable_obj@V<lambda_a63007df84f36ef2d8e0b2a575367a22>@@$0A@@std@@V?$allocator@V?$_Func_class@XV?$shared_ptr@$$CBV?$vector@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@V?$allocator@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@@2@@std@@@std@@AEAV?$vector@V?$shared_ptr@VIEULLicense@InformationProtection@Microsoft@@@std@@V?$allocator@V?$shared_ptr@VIEULLicense@InformationProtection@Microsoft@@@std@@@2@@2@AEAV?$vector@JV?$allocator@J@std@@@2@U_Nil@2@U52@U52@U52@@std@@@2@XV?$shared_ptr@$$CBV?$vector@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@V?$allocator@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@@2@@std@@@2@AEAV?$vector@V?$shared_ptr@VIEULLicense@InformationProtection@Microsoft@@@std@@V?$allocator@V?$shared_ptr@VIEULLicense@InformationProtection@Microsoft@@@std@@@2@@2@AEAV?$vector@JV?$allocator@J@std@@@2@U_Nil@2@U72@U72@U72@@std@@
.?AV?$_Func_impl@U?$_Callable_obj@V<lambda_5729b6d261b8d11aabeaa7150a8cdce2>@@$0A@@std@@V?$allocator@V?$_Func_class@XV?$shared_ptr@$$CBV?$vector@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@V?$allocator@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@@2@@std@@@std@@AEAV?$vector@V?$shared_ptr@VIEULLicense@InformationProtection@Microsoft@@@std@@V?$allocator@V?$shared_ptr@VIEULLicense@InformationProtection@Microsoft@@@std@@@2@@2@AEAV?$vector@JV?$allocator@J@std@@@2@U_Nil@2@U52@U52@U52@@std@@@2@XV?$shared_ptr@$$CBV?$vector@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@V?$allocator@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@@2@@std@@@2@AEAV?$vector@V?$shared_ptr@VIEULLicense@InformationProtection@Microsoft@@@std@@V?$allocator@V?$shared_ptr@VIEULLicense@InformationProtection@Microsoft@@@std@@@2@@2@AEAV?$vector@JV?$allocator@J@std@@@2@U_Nil@2@U72@U72@U72@@std@@
.?AVIIppObject@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VWin7IppUser@InformationProtection@Microsoft@@@std@@
.?AVWin7IppFactory@InformationProtection@Microsoft@@
.?AVIIppFactory@InformationProtection@Microsoft@@
.?AVIIppTemplate@InformationProtection@Microsoft@@
.?AVTemplateManager@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VWin7IppKey@InformationProtection@Microsoft@@@std@@
.?AVWin7IppLicenseWithMetadata@InformationProtection@Microsoft@@
.?AVIIppLicenseWithMetadata@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VLicenseMetadata@InformationProtection@Microsoft@@@std@@
.?AVTestWin7IppFactory@InformationProtection@Microsoft@@
.?AVTestWin7IppLicense@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VNameValueList@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count_del@GV?$FreeArrayObject@PEAG@@@std@@
.?AVUrlIterator@InformationProtection@Microsoft@@
.?AVIUrlIterator@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VUrlIterator@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@U_IPC_PROMPT_CTX@@@std@@
.?AV?$_Ref_count@U_IPCP_TOKEN@@@std@@
.?AVIpcContext@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VIpcContext@InformationProtection@Microsoft@@@std@@
.?AVIIpcContext@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VIIpcToken@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@V?$vector@V?$shared_ptr@VIIpcToken@InformationProtection@Microsoft@@@std@@V?$allocator@V?$shared_ptr@VIIpcToken@InformationProtection@Microsoft@@@std@@@2@@std@@@std@@
.?AV?$_Ref_count@VTemplateIssuer@InformationProtection@Microsoft@@@std@@
.?AVTemplateIssuer@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VConnectionInfo@InformationProtection@Microsoft@@@std@@
.?AVLicenseState@InformationProtection@Microsoft@@
.?AVIppObject@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VTemplateInfo@InformationProtection@Microsoft@@@std@@
.?AVTemplateInfo@InformationProtection@Microsoft@@
.?AVILicenseMetadata@InformationProtection@Microsoft@@
.?AVLicenseMetadata@InformationProtection@Microsoft@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VDeserializeTreeNode@Implementation@2@@Serialization@@@std@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@I@2@@Serialization@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@@2@@Serialization@@@std@@
.?AVScopedActionInterface@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VDeserializeTreeNode@Implementation@2@@Serialization@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCPublicKeyParameter@Implementation@InformationProtection@Microsoft@@@Serialization@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@@2@@Serialization@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@I@2@@Serialization@@@std@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCPublicKeyParameter@Implementation@InformationProtection@Microsoft@@@Serialization@@@std@@
.?AV?$_Ref_count@VDeserializeTreeNode@Implementation@Serialization@@@std@@
.?AV?$DeserializeTreeLeaf@I@Implementation@Serialization@@
.?AV?$DeserializeTreeLeaf@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@@Implementation@Serialization@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCPolicyList@InformationProtection@Microsoft@@@Serialization@@@std@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCRightListHelper@InformationProtection@Microsoft@@@Serialization@@@std@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCRightListHelper@InformationProtection@Microsoft@@@2@@Serialization@@@std@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCAppSpecificData@InformationProtection@Microsoft@@@Serialization@@@std@@
.?AV?$DeserializeTreeLeaf@V?$vector@VCPolicyList@InformationProtection@Microsoft@@V?$allocator@VCPolicyList@InformationProtection@Microsoft@@@std@@@std@@@Implementation@Serialization@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCTimeConditionHelper@InformationProtection@Microsoft@@@2@@Serialization@@@std@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCAppSpecificData@InformationProtection@Microsoft@@@2@@Serialization@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCTimeConditionHelper@InformationProtection@Microsoft@@@Serialization@@
.?AV?$DeserializeTreeLeaf@V?$vector@VCVersionSpan@InformationProtection@Microsoft@@V?$allocator@VCVersionSpan@InformationProtection@Microsoft@@@std@@@std@@@Implementation@Serialization@@
.?AVCBaseLicense@InformationProtection@Microsoft@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCAppSpecificData@InformationProtection@Microsoft@@@2@@Serialization@@@std@@
.?AV?$DeserializeTreeLeaf@VCRightListHelper@InformationProtection@Microsoft@@@Implementation@Serialization@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCVersionSpan@InformationProtection@Microsoft@@@Serialization@@@std@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCVersionSpan@InformationProtection@Microsoft@@@2@@Serialization@@
.?AVCPLLicense@InformationProtection@Microsoft@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCTimeConditionHelper@InformationProtection@Microsoft@@@2@@Serialization@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCPolicyList@InformationProtection@Microsoft@@@Serialization@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCVersionSpan@InformationProtection@Microsoft@@@2@@Serialization@@@std@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCVersionSpan@InformationProtection@Microsoft@@@Serialization@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCAppSpecificData@InformationProtection@Microsoft@@@Serialization@@
.?AV?$DeserializeTreeLeaf@VCTimeConditionHelper@InformationProtection@Microsoft@@@Implementation@Serialization@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCRightListHelper@InformationProtection@Microsoft@@@Serialization@@
.?AV?$DeserializeTreeLeaf@V?$vector@VCAppSpecificData@InformationProtection@Microsoft@@V?$allocator@VCAppSpecificData@InformationProtection@Microsoft@@@std@@@std@@@Implementation@Serialization@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCTimeConditionHelper@InformationProtection@Microsoft@@@Serialization@@@std@@
.?AV?$DeserializeTreeVectorNodeLeaf@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@@Implementation@Serialization@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCPolicyList@InformationProtection@Microsoft@@@2@@Serialization@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCPolicyList@InformationProtection@Microsoft@@@2@@Serialization@@@std@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCRightListHelper@InformationProtection@Microsoft@@@2@@Serialization@@
.?AV?$DeserializeTreeLeaf@VCPublicKey@InformationProtection@Microsoft@@@Implementation@Serialization@@
.?AV?$DeserializeTreeLeaf@VCSignature@InformationProtection@Microsoft@@@Implementation@Serialization@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCTimeRange@InformationProtection@Microsoft@@@2@@Serialization@@@std@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCTimeRange@InformationProtection@Microsoft@@@Serialization@@
.?AVXmlConfiguration@Serialization@@
.?AV?$ProtocolConfiguration@VXmlReader@Serialization@@@Serialization@@
.?AV?$DeserializeTreeVectorNodeLeaf@VCPublicKey@InformationProtection@Microsoft@@@Implementation@Serialization@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCSignature@InformationProtection@Microsoft@@@2@@Serialization@@@std@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCTimeRange@InformationProtection@Microsoft@@@Serialization@@@std@@
.?AV?$_Ref_count@VCLicenseVerificationData@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCPublicKey@InformationProtection@Microsoft@@@Serialization@@@std@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCTimeRange@InformationProtection@Microsoft@@@2@@Serialization@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCLicenseVerificationData@InformationProtection@Microsoft@@@Serialization@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCLicenseVerificationData@InformationProtection@Microsoft@@@Serialization@@@std@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCSignature@InformationProtection@Microsoft@@@Serialization@@@std@@
.?AVXmlReader@Serialization@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCPublicKey@InformationProtection@Microsoft@@@2@@Serialization@@@std@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCPublicKey@InformationProtection@Microsoft@@@2@@Serialization@@
.?AV?$DeserializeTreeLeaf@VCTimeRange@InformationProtection@Microsoft@@@Implementation@Serialization@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCSignature@InformationProtection@Microsoft@@@Serialization@@
.?AVXmlProtocol@Serialization@@
.?AV?$CSerializer@VXmlReader@Serialization@@@Serialization@@
.?AVProtocolBase@Serialization@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCSignature@InformationProtection@Microsoft@@@2@@Serialization@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCPublicKey@InformationProtection@Microsoft@@@Serialization@@
.?AV?$_Ref_count_obj@VTimedActivity@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCBaseLicense@InformationProtection@Microsoft@@@Serialization@@@std@@
.?AV?$_Func_impl@U?$_Callable_obj@V<lambda_990c01d070e2e16db686d8c81995fbf9>@@$0A@@std@@V?$allocator@V?$_Func_class@XAEAVTimedActivity@InformationProtection@Microsoft@@U_Nil@std@@U45@U45@U45@U45@U45@@std@@@2@XAEAVTimedActivity@InformationProtection@Microsoft@@U_Nil@2@U72@U72@U72@U72@U72@@std@@
.?AV?$_Func_base@XAEAVTimedActivity@InformationProtection@Microsoft@@U_Nil@std@@U45@U45@U45@U45@U45@@std@@
.?AV?$_Ref_count@VCSignature@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCPrincipal@InformationProtection@Microsoft@@@Serialization@@@std@@
.?AV?$_Ref_count_obj@V?$AutoActivity@VTimedActivity@InformationProtection@Microsoft@@@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@VCBaseLicense@InformationProtection@Microsoft@@@std@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCPrincipal@InformationProtection@Microsoft@@@2@@Serialization@@
.?AV?$DeserializeTreeLeaf@VCPrincipal@InformationProtection@Microsoft@@@Implementation@Serialization@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCPrincipal@InformationProtection@Microsoft@@@Serialization@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCPrincipal@InformationProtection@Microsoft@@@2@@Serialization@@@std@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCBaseLicense@InformationProtection@Microsoft@@@Serialization@@
.?AV?$DeserializeTreeLeaf@V?$shared_ptr@VCSignature@InformationProtection@Microsoft@@@std@@@Implementation@Serialization@@
.?AVCLicense@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VCLicense@InformationProtection@Microsoft@@@std@@
.?AVCEULLicense@InformationProtection@Microsoft@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCRightNameSetHelper@InformationProtection@Microsoft@@@2@@Serialization@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCRightNameSetHelper@InformationProtection@Microsoft@@@Serialization@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCRightNameSetHelper@InformationProtection@Microsoft@@@Serialization@@@std@@
.?AV?$_Ref_count@VCEULLicense@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCRightNameSetHelper@InformationProtection@Microsoft@@@2@@Serialization@@@std@@
.?AV?$DeserializeTreeLeaf@VCRightNameSetHelper@InformationProtection@Microsoft@@@Implementation@Serialization@@
.?AV?$_Ref_count@VCRACLicense@InformationProtection@Microsoft@@@std@@
.?AVCRACLicense@InformationProtection@Microsoft@@
.?AVDeserializeTreeGetSourceNode@Implementation@Serialization@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCTimeInterval@InformationProtection@Microsoft@@@Serialization@@@std@@
.?AV?$DeserializeTreeLeaf@V?$vector@VCRight@InformationProtection@Microsoft@@V?$allocator@VCRight@InformationProtection@Microsoft@@@std@@@std@@@Implementation@Serialization@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCTimeInterval@InformationProtection@Microsoft@@@Serialization@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCUsagePolicy@InformationProtection@Microsoft@@@Serialization@@@std@@
.?AV?$DeserializeTreeLeaf@VCVersionSpan@InformationProtection@Microsoft@@@Implementation@Serialization@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCUsagePolicy@InformationProtection@Microsoft@@@2@@Serialization@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCUsagePolicy@InformationProtection@Microsoft@@@Serialization@@
.?AV?$DeserializeTreeLeaf@V?$vector@VCUsagePolicy@InformationProtection@Microsoft@@V?$allocator@VCUsagePolicy@InformationProtection@Microsoft@@@std@@@std@@@Implementation@Serialization@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@G@2@@Serialization@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCRight@InformationProtection@Microsoft@@@2@@Serialization@@@std@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCRight@InformationProtection@Microsoft@@@Serialization@@@std@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCRight@InformationProtection@Microsoft@@@2@@Serialization@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@G@2@@Serialization@@@std@@
.?AV?$_Ref_count@V?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@V?$NamedElement@VCUsagePolicy@InformationProtection@Microsoft@@@2@@Serialization@@@std@@
.?AV?$SerializerScopedAction@V?$CSerializer@VXmlReader@Serialization@@@Serialization@@VCRight@InformationProtection@Microsoft@@@Serialization@@
.?AV?$DeserializeTreeLeaf@V?$vector@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@V?$allocator@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@@2@@std@@@Implementation@Serialization@@
.?AV?$_Ref_count@VUserCert@JsonLicenses@InformationProtection@Microsoft@@@std@@
.?AVUserCert@JsonLicenses@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VCCLCLicense@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@VCJsonCLCLicense@JsonLicenses@InformationProtection@Microsoft@@@std@@
.?AVUserCertPrivateData@JsonLicenses@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VUserCertPrivateData@JsonLicenses@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@VAcquireLicenseContext@CLicenseAcq@@@std@@
.?AVAcquireContext@CLicenseAcq@@
.?AVCLicenseAcq@@
.?AVAcquireLicenseContext@CLicenseAcq@@
.?AV?$_Ref_count@VAcquireDelegationLicenseContext@DelegationLicenseAcq@InformationProtection@Microsoft@@@std@@
.?AVDelegationLicenseAcq@InformationProtection@Microsoft@@
.?AVAcquireDelegationLicenseContext@DelegationLicenseAcq@InformationProtection@Microsoft@@
.?AV?$_Ref_count@$$CBV?$vector@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@V?$allocator@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@@2@@std@@@std@@
.?AVCPreLicenseAcq@@
.?AV?$_Ref_count@VAcquirePreLicenseContext@CPreLicenseAcq@@@std@@
.?AVAcquirePreLicenseContext@CPreLicenseAcq@@
.?AVRevocationDetails@@
.?AV?$_Ref_count@VRevocationDetails@@@std@@
.?AV?$_Ref_count@VRegistryBasedLocator@InformationProtection@Microsoft@@@std@@
.?AVWindowsScpLocator@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VUnknownIdentityTypeLocator@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@VGlobalServiceLocator@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@VProvidedUrlBasedLocator@InformationProtection@Microsoft@@@std@@
.?AV?$_Ref_count@VWindowsScpLocator@InformationProtection@Microsoft@@@std@@
.?AVIServiceLocator@InformationProtection@Microsoft@@
.?AVGlobalServiceLocator@InformationProtection@Microsoft@@
.?AVProvidedUrlBasedLocator@InformationProtection@Microsoft@@
.?AVUnknownIdentityTypeLocator@InformationProtection@Microsoft@@
.?AVRegistryBasedLocator@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VDnsResponse@InformationProtection@Microsoft@@@std@@
.?AV?$_Node_class@GV?$regex_traits@G@std@@@std@@
.?AV_Node_if@std@@
.?AV_Node_back@std@@
.?AV_Node_end_group@std@@
.?AV_Node_end_rep@std@@
.?AV?$_Ref_count@VDomain@InformationProtection@Microsoft@@@std@@
.?AV?$collate@G@std@@
.?AV_Node_base@std@@
.?AV?$_Node_str@G@std@@
.?AV_Root_node@std@@
.?AV_Node_assert@std@@
.?AV_Node_rep@std@@
.?AV_Node_capture@std@@
.?AV_Node_endif@std@@
.?AVCRMTemplateAPI@@
.?AV?$_Ref_count@VCDRMStore@@@std@@
.?AV?$_Ref_count@VCRMTemplateAPI@@@std@@
.?AVDomElement@@
.?AV?$DomElementBase@VDomDocument@@@@
.?AVDomDocument@@
.?AV?$enable_shared_from_this@VDomDocument@@@std@@
.?AVMSXmlDomDocument@@
.?AV?$_Ref_count@VMSXmlDomElement@@@std@@
.?AV?$_Ref_count@VMSXmlDomDocument@@@std@@
.?AV?$enable_shared_from_this@VMSXmlDomElement@@@std@@
.?AV?$DomElementBase@VMSXmlDomElement@@@@
.?AVMSXmlDomElement@@
.?AV?$_Ref_count@V?$ScopedActionImpl@V?$_Bind@$00XU?$_Pmf_wrap@P8XmlReader@Serialization@@EAAXAEBV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@@ZXV12@AEBV34@U_Nil@4@U54@U54@U54@U54@U54@@std@@PEAVXmlReader@Serialization@@AEBV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@2@U_Nil@2@U62@U62@U62@U62@@std@@V?$_Bind@$00XU?$_Pmf_wrap@P8XmlReader@Serialization@@EAAXXZXV12@U_Nil@std@@U34@U34@U34@U34@U34@U34@@std@@PEAVXmlReader@Serialization@@U_Nil@2@U52@U52@U52@U52@U52@@2@@@@std@@
.?AV?$_Ref_count@V?$IndexedTree@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@V12@@@@std@@
.?AV?$ScopedActionImpl@V?$_Bind@$00XU?$_Pmf_wrap@P8XmlReader@Serialization@@EAAXAEBV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@@ZXV12@AEBV34@U_Nil@4@U54@U54@U54@U54@U54@@std@@PEAVXmlReader@Serialization@@AEBV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@2@U_Nil@2@U62@U62@U62@U62@@std@@V?$_Bind@$00XU?$_Pmf_wrap@P8XmlReader@Serialization@@EAAXXZXV12@U_Nil@std@@U34@U34@U34@U34@U34@U34@@std@@PEAVXmlReader@Serialization@@U_Nil@2@U52@U52@U52@U52@U52@@2@@@
.?AV?$IndexedTree@V?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@V12@@@
.?AVDomMultiSelect@DomQuery@@
.?AVChildren@DomQuery@@
.?AVTimedActivity@InformationProtection@Microsoft@@
.?AVCCLCLicense@InformationProtection@Microsoft@@
.?AVRevokeObject@JsonLicenses@InformationProtection@Microsoft@@
.?AV?$_Ref_count@VRevokeObject@JsonLicenses@InformationProtection@Microsoft@@@std@@
<>:"/\|?*-
*************** System/App Info **************
* Could not get System/App Info
******************************************
WEVT_TEMPLATE
VS_VERSION_INFO
StringFileInfo
040904B0
CompanyName
Microsoft Corporation
FileDescription
Microsoft Active Directory Rights Management Services Client
FileVersion
10.0.22621.1 (WinBuild.160101.0800)
InternalName
winmsipc
LegalCopyright
 Microsoft Corporation. All rights reserved.
OriginalFilename
winmsipc.dll
ProductName
Microsoft
 Windows
 Operating System
ProductVersion
10.0.22621.1
VarFileInfo
Translation
CHANT
Microsoft-RMS-MSIPC/Debug
EventData
Value
Value
PRVA<
Microsoft-RMS-MSIPC
win:Error
win:Warning
win:Informational
win:Verbose
MSIPC
IPViewer
OfficePlugin
WEVT_TEMPLATE
en-US
