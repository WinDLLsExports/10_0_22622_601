!This program cannot be run in DOS mode.
.text
`.rsrc
 .%(3
%- (3
&+*(3
&+*(3
-&+-sh
v4.0.30319
#Strings
#GUID
#Blob
"/y5e
r`y5e
Xey5Y
S=y5e
BFy59
PMy5Y
e%y5Y
}dy5Y
ZMy5Y
 oP( 
 \7e 
 i$n F
 53!!U
 %%K!d
 DIQ!e
\%i!l
la*$ 
<d1$!
&P?$$
1 2!?"L#Y%g&h'i(j)k*l+m,n-x.y/
>b>U>
[G\H]H^H_K`NaPbPcPdPePfPgPhPiPjPkPlPmPnPoQpQqQrQsQtQuQvQwQxRyRzS{U
<>9__49_0
<AttributesEqual>b__49_0
dwReserved0
<>9__49_1
<AttributesEqual>b__49_1
Nullable`1
IEnumerable`1
IOrderedEnumerable`1
Queue`1
Stack`1
ICollection`1
Comparison`1
IEnumerator`1
HashSet`1
IList`1
dwReserved1
rule1
get_Item1
kernel32
Microsoft.Win32
UInt32
ReadInt32
ToInt32
Crypt32
WINTRUST_ACTION_GENERIC_VERIFY_V2
Func`2
Tuple`2
KeyValuePair`2
CIDictionary`2
Reserved2
rule2
X509Certificate2
get_Item2
CryptCATAdminAcquireContext2
SIPolicyConvertFileFuleV3
PolicyFormatVersionV3
SIPolicyConvertSignerV3
CryptCATAdminCalcHashFromFileHandle3
CRYPTCAT_ATTR_DATABASE64
ReadInt64
SIPolicyConvertFileRuleV4
PolicyFormatVersionV4
SIPolicyConvertFileRuleV5
PolicyFormatVersionV5
ToUInt16
get_SIPHash256
set_SIPHash256
get_Hash256
set_Hash256
get_PageHash256
set_PageHash256
PolicyFormatVersionV6
CERT_STORE_PROV_PKCS7
SIPolicyConvertFileRuleV7
PolicyFormatVersionV7
<Module>
WIN32_FIND_DATA
WHQL_OPUS_INFO_DATA
CRYPT_PROVIDER_DATA
SIP_INDIRECT_DATA
CERT_STORE_PROV_FILENAME_A
CERT_STORE_PROV_SYSTEM_A
CERT_STORE_PROV_SYSTEM_REGISTRY_A
CRYPT_DATA_BLOB
CRYPT_OBJID_BLOB
CRYPTOAPI_BLOB
CRYPT_INTEGER_BLOB
CRYPT_BIT_BLOB
GENERIC_READ
FILE_SHARE_READ
FILE_MAP_READ
SECTION_MAP_READ
SE_PRIVILEGE_ENABLED
CODEINTEGRITYPOLICY_OPTION_ENABLED
CODEINTEGRITYPOLICY_OPTION_AUDIT_ENABLED
SE_PRIVILEGE_DISABLED
CRYPTCAT_ATTR_UNAUTHENTICATED
CRYPTCAT_ATTR_AUTHENTICATED
CERT_STORE_PROV_SERIALIZED
SHA1_HASH_ALGID
CRYPTCAT_ATTR_NAMEOBJID
SPC_SP_OPUS_INFO_OBJID
WHQL_EKU_OID
CODESIGN_EKU_OID
EncodeOID
get_ID
set_ID
MergeID
get_RuleID
set_RuleID
get_AllowRuleID
set_AllowRuleID
get_DenyRuleID
set_DenyRuleID
get_PolicyTypeID
set_PolicyTypeID
DeletePolicyTypeID
GetPolicyTypeID
SetPolicyTypeID
get_CertOemID
set_CertOemID
get_PlatformID
set_PlatformID
pgActionID
get_AppID
set_AppID
appID
ObjectID
ShadowID
get_PolicyID
set_PolicyID
get_BasePolicyID
set_BasePolicyID
get_SupplementsBasePolicyID
set_SupplementsBasePolicyID
supplementsBasePolicyID
GetBasePolicyID
SetBasePolicyID
basePolicyID
GetPolicyID
SetPolicyID
get_ResetPolicyID
set_ResetPolicyID
resetPolicyID
policyID
CERT_STORE_PROV_SMART_CARD
CRYPTCAT_ATTR_DATAREPLACE
KERNEL_DEVICE_DRIVER_SERVICE
FILE_SYSTEM_DRIVER_SERVICE
IMAGE_DIRECTORY_ENTRY_RESOURCE
CRYPT_SUBJTYPE_CATALOG_IMAGE
CRYPT_SUBJTYPE_CTL_IMAGE
CRYPT_SUBJTYPE_CABINET_IMAGE
CMSG_ENCODED_MESSAGE
CERT_STORE_PROV_FILE
CERT_STORE_PROV_FILENAME
SE_RESTORE_NAME
SE_BACKUP_NAME
IMAGE_IMPORT_BY_NAME
SE_SECURITY_NAME
FILETIME
X509_CHOICE_OF_TIME
FILE_ATTRIB_TYPE
ALLOW_TYPE
DENY_TYPE
IsUserPE
isUserPE
get_isPE
set_isPE
WTD_STATEACTION_CLOSE
FILE_SHARE_DELETE
PAGE_READWRITE
GENERIC_WRITE
FILE_SHARE_WRITE
CRYPTCATATTRIBUTE
INVALID_HANDLE_VALUE
CRYPT_ATTRIBUTE_TYPE_VALUE
EKU_CODE_SIGNING_VALUE
SYSTEM_CODEINTEGRITYPOLICY_INFORMATION_SIZE
CRYPT_DECODE_TO_BE_SIGNED_FLAG
CERT_STORE_ENUM_ARCHIVED_FLAG
CERT_STORE_MAXIMUM_ALLOWED_FLAG
CERT_STORE_UPDATE_KEYID_FLAG
CERT_STORE_MANIFOLD_FLAG
CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG
CERT_STORE_SET_LOCALIZED_NAME_FLAG
CERT_STORE_BACKUP_RESTORE_FLAG
CERT_STORE_SHARE_STORE_FLAG
CERT_STORE_NO_CRYPT_RELEASE_FLAG
CERT_STORE_DELETE_FLAG
CERT_STORE_OPEN_EXISTING_FLAG
CERT_STORE_SHARE_CONTEXT_FLAG
CERT_STORE_CREATE_NEW_FLAG
CERT_STORE_READONLY_FLAG
CERT_STORE_PROV_REG
X509_PKCS7_ENCODING
PKCS_7_ASN_ENCODING
PKCS_7_OR_X509_ASN_ENCODING
CRYPT_ASN_ENCODING
PKCS_7_NDR_ENCODING
X509_NDR_ENCODING
CRYPT_NDR_ENCODING
FILE_FLAG_NO_BUFFERING
WINTRUST_ACTION_GENERIC_VERIFY_V2_STRING
OPEN_EXISTING
ZERO_ULONG
CERT_STORE_PROV_MSG
STATUS_INFO_LENGTH_MISMATCH
MAX_PATH
EnabledUMCI
CRYPTCAT_ATTR_DATAASCII
CRYPTCAT_ATTR_NAMEASCII
get_NamespaceURI
CERT_STORE_PROV_PHYSICAL
FILE_VER_GET_NEUTRAL
get_EnforceDLL
set_EnforceDLL
PROV_RSA_FULL
RequiredWHQL
CERT_STORE_PROV_SYSTEM
BCRYPT_SHA1_ALGORITHM
BCRYPT_SHA256_ALGORITHM
RTL_SHA256_HASH_LEN
SYSTEM_CODEINTEGRITYPOLICY_INFORMATION
CERT_STORE_PROV_COLLECTION
VS_FIXEDFILEINFO
DRIVER_FILE_SIGNER_INFO
SPC_SP_OPUS_INFO
CERT_SIGNED_CONTENT_INFO
System.IO
CERT_STORE_PROV_LDAP
hasSIP
CRYPTCATMEMBER
ERROR_INSUFFICIENT_BUFFER
CRYPT_ALGORITHM_IDENTIFIER
SERVICE_RECOGNIZER_DRIVER
GetExceptionForHR
CRYPT_PROVIDER_SGNR
IMAGE_IMPORT_DESCRIPTOR
UnsupportedTBS
CalculateTBS
FILE_FLAG_BACKUP_SEMANTICS
TOKEN_ADJUST_PRIVILEGES
FILE_READ_ATTRIBUTES
INVALID_FILE_ATTRIBUTES
FILE_WRITE_ATTRIBUTES
dwFileDateLS
dwFileVersionLS
dwProductVersionLS
dwFileDateMS
dwFileVersionMS
dwProductVersionMS
dwFileOS
STATUS_SUCCESS
ERROR_ALREADY_EXISTS
CRYPTCATADMIN_CALCHASH_FLAG_NONCONFORMANT_FILES_FALLBACK_FLAT
ERROR_BAD_EXE_FORMAT
SPC_SP_OPUS_INFO_STRUCT
X509_CERT
IMAGE_DIRECTORY_ENTRY_IMPORT
IMAGE_DIRECTORY_ENTRY_EXPORT
CRYPT_VERIFYCONTEXT
OID_EKU
GetWhqlEKU
HasEKU
get_CertEKU
set_CertEKU
CERT_STORE_PROV_SMART_CARD_W
CERT_STORE_PROV_FILENAME_W
CERT_STORE_PROV_PHYSICAL_W
CERT_STORE_PROV_SYSTEM_W
CERT_STORE_PROV_LDAP_W
CERT_STORE_PROV_SYSTEM_REGISTRY_W
CreateFileW
GetFullPathNameW
GetFileAttributesW
WTD_STATEACTION_VERIFY
PAGE_READONLY
TOKEN_QUERY
CERT_STORE_PROV_MEMORY
CERT_STORE_PROV_SYSTEM_REGISTRY
value__
ImageRvaToVa
System.Xml.Schema
XmlSchema
pWVTData
pcbData
pbData
AsnEncodedData
lpFindFileData
hStateData
WTHelperProvDataFromStateData
PolicyCallbackData
lpData
EncodedIndirectData
SIPClientData
WinTrustData
pWintrustData
pvData
get_RawData
mscorlib
FileAttrib
System.Collections.Generic
get_Id
set_Id
wantedId
PackageId
AppendMergeId
mergeId
ruleId
get_TypeId
set_TypeId
pszAlgId
pszObjId
get_OemId
set_OemId
oemId
pgActionId
get_SignerId
set_SignerId
GetHighestId
HasDuplicateEkuId
get_PolicyId
set_PolicyId
SModePolicyId
policyId
ruleToAdd
PolicyToAdd
cbEncoded
pbEncoded
get_EnforceDLLSpecified
set_EnforceDLLSpecified
enforceDLLFieldSpecified
policyTypeFieldSpecified
minimumHashAlgorithmFieldSpecified
signTimeAfterFieldSpecified
hvciOptionsFieldSpecified
get_PolicyTypeSpecified
set_PolicyTypeSpecified
get_MinimumHashAlgorithmSpecified
set_MinimumHashAlgorithmSpecified
get_SignTimeAfterSpecified
set_SignTimeAfterSpecified
get_HvciOptionsSpecified
set_HvciOptionsSpecified
get_Enabled
set_Enabled
enabled
ToBeSigned
EnabledRevokedExpiredAsUnsigned
lpBytesReturned
lpOverlapped
CertExpired
GenericUnsafeInSignedPolicyPrinted
IsPathRooted
requested
SubjectNotTrusted
Reserved
get_DisableAllowed
set_DisableAllowed
disableAllowed
get_Oid
searchOid
xmlIsValid
PolicyTypeGuid
CryptSIPRetrieveSubjectGuid
NewGuid
PolicyGuid
TokPriv1Luid
pluid
allowRuleIDField
denyRuleIDField
ruleIDField
policyTypeIDField
certOemIDField
platformIDField
basePolicyIDField
policyIDField
enforceDLLField
certEKUField
signerIdField
idField
workaroundField
exceptAllowRuleField
exceptDenyRuleField
fileNameField
valueNameField
internalNameField
productNameField
friendlyNameField
packageFamilyNameField
nameField
policyTypeField
typeField
valueField
fileAttribRefField
fileRuleRefField
fileRulesRefField
appIDTagField
<Hash256>k__BackingField
<SIPHash256>k__BackingField
<PageHash256>k__BackingField
<AppID>k__BackingField
<isPE>k__BackingField
<Id>k__BackingField
<TypeId>k__BackingField
<UserMode>k__BackingField
<UserWriteable>k__BackingField
<Name>k__BackingField
<FileName>k__BackingField
<InternalName>k__BackingField
<ProductName>k__BackingField
<FriendlyName>k__BackingField
<PackageFamilyName>k__BackingField
<AppIDRef>k__BackingField
<FileVersionRef>k__BackingField
<Hash>k__BackingField
<PageHash>k__BackingField
<DOSPath>k__BackingField
<FilePath>k__BackingField
<PackageVersion>k__BackingField
<FileVersion>k__BackingField
<FileDescription>k__BackingField
<Root>k__BackingField
hashField
filePathField
itemField
minimumHashAlgorithmField
packageVersionField
minimumFileVersionField
maximumFileVersionField
fileDescriptionField
macroField
providerField
certPublisherField
deniedSignerField
allowedSignerField
signTimeAfterField
certIssuerField
appIDsField
eKUsField
fileRulesField
rulesField
appIDTagsField
settingsField
itemsField
hvciOptionsField
inheritedScenariosField
signingScenariosField
macrosField
deniedSignersField
allowedSignersField
testSigningSignersField
ciSignersField
productSignersField
testSignersField
updatePolicySignersField
supplementalPolicySignersField
signersField
certRootField
versionExField
keyField
AppendChild
RemoveChild
get_FirstChild
Build
TrimEnd
AddSignerRuleCommand
SetCIPolicyVersionCommand
SetRuleOptionCommand
GetCIPolicyInfoCommand
SetHVCIOptionsCommand
ConvertFromCIPolicyCommand
Append
get_Workaround
set_Workaround
InvokeMethod
ErrorRecord
ProcessRecord
ProgressRecord
EventRecord
Microsoft.ConfigCI.Commands.CIPolicy.xsd
AddNamespace
LookupNamespace
UIChoice
UnionChoice
hDevice
QueryDosDevice
ScpyInstance
URLReference
fileReference
dwIoControlCode
ErrorCode
FileMode
dwShareMode
get_DebugMode
set_DebugMode
debugMode
EnabledWindowsLockdownTrialMode
GCLargeObjectHeapCompactionMode
get_LargeObjectHeapCompactionMode
set_LargeObjectHeapCompactionMode
get_UserMode
set_UserMode
userMode
EnabledAuditMode
SelectSingleNode
CreateBaseNode
baseNode
XmlNode
scenarioNode
DocumentHasNode
GetNode
get_ParentNode
Decode
sha256Authenticode
Exclude
get_Package
set_Package
AppxPackage
package
MappedAsImage
Windows.Storage
get_Message
xmlErrorMessage
message
EnablePrivilege
privilege
AddRange
get_NameTable
XmlNameTable
pfnMappingTable
TranslationTable
get_UserWriteable
set_UserWriteable
GetEnvironmentVariable
IEnumerable
disable
IDisposable
RuntimeTypeHandle
CloseHandle
CatalogHandle
GetTypeFromHandle
MemberHandle
CryptProviderHandle
processHandle
bInheritHandle
lpdwHandle
fOpenedFile
CreateFromSignedFile
hFindFile
hTemplateFile
MapViewOfFile
UnmapViewOfFile
ParseCatalogFile
hFile
ValidateXmlFile
OpenFile
DriverFile
FindFirstFile
FindNextFile
SIConvertToBinaryFile
Console
SIPolicyConvertFileFule
SIValidateFileAttribRule
AddDocRule
AddRule
foundRule
ConvertGenericFileRule
AddFileRule
CompareFileRule
AddExceptionOrAttributeFileRule
GetFileRule
newFileRule
UpdateRule
RemoveRule
CompareSettingRule
get_FilePathRule
set_FilePathRule
filePathRule
AddSignerRule
GetSignerRule
TryGetRule
SIValidateAllowRule
get_ExceptAllowRule
set_ExceptAllowRule
RemoveCIPolicyRule
EditCIPolicyRule
NewCIPolicyRule
SIValidateDenyRule
get_ExceptDenyRule
set_ExceptDenyRule
get_Name
set_Name
deviceName
get_FileName
set_FileName
cFileName
OriginalFileName
lpFileName
GetTempFileName
ScriptPlaceHolderFileName
fileName
ParseName
get_ValueName
set_ValueName
valueName
algName
OriginalFileNameStringName
InternalNameStringName
ProductNameStringName
FileDescriptionStringName
hashName
GetFullPathName
get_InternalName
set_InternalName
internalName
get_FullName
lpName
get_ProductName
set_ProductName
productName
get_PolicyName
set_PolicyName
policyName
get_FriendlyName
set_FriendlyName
friendlyName
get_FamilyName
get_PackageFamilyName
set_PackageFamilyName
packageFamilyName
CompanyName
DriverBinaryName
lptstrFilename
filename
ToFileTime
DateTime
ftLastWriteTime
ftCreationTime
ftLastAccessTime
System.Runtime
Volume
WriteLine
LocalMachine
get_None
set_None
get_RType
set_RType
get_Type
set_Type
set_RecordType
ProgressRecordType
get_NodeType
XmlNodeType
dwFileType
RuleType
ruleType
RuleTypeType
get_ValueType
set_ValueType
SettingValueType
valueType
OfType
dwCertEncodingType
dwParamType
CertEnumType
set_ValidationType
OptionType
ProviderType
dwSignerType
SubjectType
lpszStructType
GetType
attType
get_PolicyType
set_PolicyType
GetPolicyType
SetPolicyType
policyType
dwFileSubtype
Compare
System.Core
InsertBefore
X509Store
CertCloseStore
CertOpenStore
hCertStore
myStore
EnabledBootAuditOnFailure
dwSignature
IndirectDataStructure
PtrToStructure
get_InvariantCulture
get_CurrentCulture
Capture
ImageBase
WriteVerbose
CryptCATClose
FindClose
Dispose
Parse
X509Certificate
get_Certificate
PcaCertificate
LeafCertificate
TryGetCertificate
RootCertificate
RuleHasDuplicate
RuleGetDuplicate
get_Update
set_Update
update
Create
cAlternate
SessionState
get_Delete
set_Delete
delete
get_PercentComplete
set_PercentComplete
stringToWrite
CompilerGeneratedAttribute
GeneratedCodeAttribute
UnverifiableCodeAttribute
NeutralResourcesLanguageAttribute
DebuggableAttribute
ComVisibleAttribute
AssemblyKeyFileAttribute
RuleAttribute
XmlTypeAttribute
XmlIgnoreAttribute
XmlAttributeAttribute
DebuggerStepThroughAttribute
TargetFrameworkAttribute
XmlAttribute
XmlArrayItemAttribute
XmlEnumAttribute
AssemblyDelaySignAttribute
AssemblyFileVersionAttribute
SecurityPermissionAttribute
DefaultMemberAttribute
ParameterAttribute
AliasAttribute
FlagsAttribute
CompilationRelaxationsAttribute
HandleProcessCorruptedStateExceptionsAttribute
AssemblyProductAttribute
GetAttribute
ValidateSetAttribute
CmdletAttribute
AssemblyCopyrightAttribute
XmlElementAttribute
XmlRootAttribute
PrevAttribute
AssemblyCompanyAttribute
DesignerCategoryAttribute
RuntimeCompatibilityAttribute
ValidateNotNullOrEmptyAttribute
ReadByte
fallbackQueue
Dequeue
mapMacroId2Value
scenarioIndex2Value
TValue
get_Value
set_Value
LookupPrivilegeValue
get_AppIdTaggingValue
set_AppIdTaggingValue
appIdTaggingValue
WriteStringValue
MinValue
SIPolicyCalculateScenarioIndexToValue
get_HasValue
TryGetValue
VerQueryValue
GetPropertyValue
SetPropertyValue
value
potentiallyRelative
native
idToRemove
GetFileSize
StructureSize
ValueSize
actualSize
systemInformationSize
nInBufferSize
nOutBufferSize
bufferSize
StructSize
Deserialize
SuppressFinalize
SizeOf
get_ItemOf
sftVerifyAsOf
LastIndexOf
get_AppIDRef
set_AppIDRef
get_FileAttribRef
set_FileAttribRef
get_FileRuleRef
set_FileRuleRef
get_FileVersionRef
set_FileVersionRef
SIPolicyConvertCiSignerRef
SIPolicyConvertSupplementalSignerRef
SIPolicyConvertSignerRef
get_FileRulesRef
set_FileRulesRef
UserFileRulesRef
DriverFileRulesRef
get_AppIDTag
set_AppIDTag
AddAppIdTag
RemoveAppIdTag
appIdTag
ReferenceTag
CryptoConfig
Microsoft.SecureBoot.UserConfig
UnicodeEncoding
dwEncoding
DisabledFlightSigning
System.Runtime.Versioning
WriteWarning
warning
CreateFileMapping
OpenFileMapping
ValueTypeString
WriteString
ToString
GetString
Substring
EndProcessing
BeginProcessing
AddSecureSetting
RemoveSecureSetting
SetCIPolicySetting
CreateAppIdTaggingDefaultPolicySetting
ValueTypeUlong
hCryptMsg
findPFNMatch
FileRulesMatch
nFileSizeHigh
lpFileSizeHigh
dwMaximumSizeHigh
dwFileOffsetHigh
GetSIPSha256Hash
GetAuthenticodeSha256Hash
get_Hash
set_Hash
pcbHash
pbHash
get_PageHash
set_PageHash
ComputeFirstPageHash
GetFirstPageHash
CalculateFileHash
ComputeHash
filePathToHash
get_DOSPath
set_DOSPath
System.Xml.XPath
get_Path
FormatImagePath
imagePath
get_FilePath
set_FilePath
GetAbsoluteFilePath
fullFilePath
get_XmlFilePath
set_XmlFilePath
xmlFilePath
get_DriverFilePath
set_DriverFilePath
driverFilePath
CatFilePath
get_OutputFilePath
set_OutputFilePath
outputFilePath
get_BinaryFilePath
set_BinaryFilePath
binaryFilePath
filePath
get_CertStorePath
set_CertStorePath
certStorePath
get_CertificatePath
set_CertificatePath
certificatePath
ConvertNativePathToNonNativePath
ConvertShadowCopyPathToOriginalOrNonNativePath
catalogPath
get_HashPath
set_HashPath
GetFullPath
fullPath
get_ScanPath
set_ScanPath
scanPath
GetFolderPath
dirPath
get_BasePolicyToSupplementPath
set_BasePolicyToSupplementPath
basePolicyToSupplementPath
GetShadowCopyAndNewPath
ScpyPath
scpyPath
ConvertOriginalPathToShadowCopyPath
ConvertPathsToShadowCopyPath
directoryPath
xmlfilepath
binaryfilepath
get_Length
EndsWith
StartsWith
PtrToStringAnsi
ValidateXmlFileCallback
get_Fallback
set_Fallback
fallback
ekuToCheck
WintrustUserWriteabilityCheck
lpSubBlock
pBlock
CharacteristicsOrOriginalFirstThunk
phtok
dwFileFlagsMask
AllocHGlobal
FreeHGlobal
Marshal
get_Supplemental
set_Supplemental
supplemental
SequenceEqual
AttributesEqual
Windows.ApplicationModel
System.ComponentModel
get_Kernel
set_Kernel
kernel
get_Level
set_Level
RuleLevel
get_SpecificFileNameLevel
set_SpecificFileNameLevel
specificFileNameLevel
currentFileNameLevel
fileNameLevel
GetCertAtLevel
level
detail
disall
advapi32.dll
kernel32.dll
crypt32.dll
ntdll.dll
version.dll
DbgHelp.dll
Microsoft.ConfigCI.Commands.dll
Wintrust.dll
wintrust.dll
System.Xml
CatalogToXml
get_InnerXml
DeviceIoControl
GetManifestResourceStream
FileStream
xmlStream
binaryStream
MemoryStream
CryptMsgGetParam
AllocCoTaskMem
FreeCoTaskMem
get_Item
set_Item
System
pgSubsystem
SignatureAlgorithm
get_MinimumHashAlgorithm
set_MinimumHashAlgorithm
pwszHashAlgorithm
hashAlgorithm
get_DigestAlgorithm
hFileIn
chainIn
signerIn
sys32DllScan
ValueTypeBoolean
pathLen
puLen
dwLen
OpenProcessToken
relen
CryptCATOpen
X509Chain
ForwarderChain
pasCertChain
csCertChain
SeekOrigin
phCatAdmin
Revision
X509Extension
X509EnhancedKeyUsageExtension
get_Version
set_Version
PublicVersion
dwStrucVersion
SignedVersion
get_PackageVersion
set_PackageVersion
packageVersion
get_FileVersion
set_FileVersion
get_MinimumFileVersion
set_MinimumFileVersion
get_MaximumFileVersion
set_MaximumFileVersion
compareVersion
NextPolicyFormatVersion
CertVersion
GetPolicyVersion
SetPolicyVersion
version
get_InstalledLocation
get_CurrentFileSystemLocation
System.Management.Automation
NtQuerySystemInformation
systemInformation
SystemCodeIntegrityPolicyInformation
CreateXmlDeclaration
System.Globalization
System.Xml.Serialization
EnabledIntelligentSecurityGraphAuthorization
AttributeTypeAndAction
StateAction
SecurityAction
LastRvaSection
System.Reflection
X509Certificate2Collection
AsnEncodedDataCollection
OidCollection
XmlAttributeCollection
ValueCollection
X509ExtensionCollection
SignerInfoCollection
CryptographicAttributeObjectCollection
ManagementObjectCollection
X509ChainElementCollection
DisabledRuntimeFilePathRuleProtection
EnabledBootMenuProtection
get_Position
dwCreationDisposition
get_Option
set_Option
AddOption
RemoveOption
CheckOption
CryptographicException
AddException
FileNotFoundException
EventLogNotFoundException
EntryPointNotFoundException
FileException
RemoveException
PathTooLongException
TargetInvocationException
AccessViolationException
InvalidOperationException
UnauthorizedAccessException
FormatException
ManagementException
ArgumentException
CIPolicyException
get_FileDescription
set_FileDescription
fileDescription
set_StatusDescription
option
StringComparison
Wellknown
SubjectFormUnknown
ActionUnknown
ProviderUnknown
CompareTo
WriteTo
CopyTo
GetCIPolicyIdInfo
SetCIPolicyIdInfo
StringFileInfo
WinTrustFileInfo
pMoreInfo
CultureInfo
dfsigInfo
PathInfo
FileSystemInfo
VersionInfo
EncodedMemberInfo
CryptCATGetMemberInfo
pPublisherInfo
SignerInfo
pcbStructInfo
DirectoryInfo
SIValidateSigningScenario
SIPolicyConvertScenario
scenario
get_Macro
set_Macro
MacrosMacro
pvStructInto
PtrToStringAuto
StringToCoTaskMemAuto
XmlNamedNodeMap
dwNumberOfBytesToMap
get_Help
set_Help
TimeDateStamp
Cleanup
System.Linq
Clear
PrevCatalogMemeber
CryptCATEnumerateMember
StringVersionToNumber
FoundHeader
ImageNtHeader
System.Diagnostics.Eventing.Reader
EventLogReader
XmlReader
XmlTextReader
textReader
get_Provider
set_Provider
SHA1CryptoServiceProvider
SHA512CryptoServiceProvider
SHA384CryptoServiceProvider
MD5CryptoServiceProvider
SHA256CryptoServiceProvider
CertStoreProvider
hProvider
IFormatProvider
provider
StringBuilder
StorageFolder
SpecialFolder
sender
lpInBuffer
lplpBuffer
lpOutBuffer
buffer
InitializeNamespaceManager
XmlNamespaceManager
ResourceManager
PackageManager
nsManager
WHQLPublisher
get_Publisher
set_Publisher
WHQLFilePublisher
get_CertPublisher
set_CertPublisher
publisher
DirectoryWalker
add_ValidationEventHandler
System.CodeDom.Compiler
EnabledManagedInstaller
get_DeniedSigner
set_DeniedSigner
get_AllowedSigner
set_AllowedSigner
SIValidateSigner
UpdateSigner
ConvertSignerToCiSigner
SupplementalSigner
psSigner
SIPolicyConvertSigner
UpdatePolicySigner
SupplementalPolicySigner
signer
Container
inner
ShadowCopyKeeper
Helper
ToUpper
FileRuleComparer
SettingRuleComparer
get_User
set_User
FindPackagesForUser
CatParser
ImportParser
VersionGreater
SwitchParameter
get_SignTimeAfter
set_SignTimeAfter
InsertAfter
valueWriter
StreamWriter
binWriter
TextWriter
BinaryWriter
filter
ValuePointer
AppIdTaggingPolicyConverter
get_Issuer
set_Issuer
get_CertIssuer
set_CertIssuer
issuer
GetSystemDriver
set_XmlResolver
ToLower
XmlSerializer
Major
set_ForegroundColor
ConsoleColor
ResetColor
Minor
GetHRForLastWin32Error
GetLastWin32Error
PropagateError
ThrowTerminatingError
dwError
throwError
error
CreateNavigator
XPathNavigator
X509Certificate2Enumerator
IEnumerator
OidEnumerator
X509ExtensionEnumerator
SignerInfoEnumerator
CryptographicAttributeObjectEnumerator
ManagementObjectEnumerator
System.Collections.IEnumerable.GetEnumerator
.ctor
.cctor
defaultConstructor
StructureToPtr
FileInfoPtr
IntPtr
verStr
CryptCATEnumerateAttr
CryptCATEnumerateCatAttr
get_AppIDs
set_AppIDs
GetFolderPEs
get_UserPEs
set_UserPEs
getUserPEs
userPEs
get_EKUs
set_EKUs
set_Schemas
PathIntrinsics
System.Diagnostics
System.Security.Cryptography.Pkcs
initializeOids
Microsoft.ConfigCI.Commands
Microsoft.Windows.Appx.PackageManager.Commands
System.Runtime.ExceptionServices
System.Runtime.InteropServices
System.Runtime.CompilerServices
GetInstances
System.Resources
bootResources
Microsoft.ConfigCI.Commands.resources
DebuggingModes
get_ChildNodes
SelectNodes
get_EnhancedKeyUsages
EnableAdvancedPrivileges
RestorePrivileges
AdjustTokenPrivileges
hashes
EnabledAllowSupplementalPolicies
GetDirectories
get_Properties
readInfFiles
GetCatalogFiles
get_DriverFiles
set_DriverFiles
driverFiles
readSys32SysFiles
readSysFiles
GetFolderSysFiles
GetFiles
get_Rules
set_Rules
docRules
get_FileRules
set_FileRules
SIPolicyConvertRequiredFileRules
GetRules
rules
get_ScriptFileNames
set_ScriptFileNames
scriptFileNames
GetSubKeyNames
System.Runtime.InteropServices.ComTypes
pahStores
chStores
signatures
System.Security.Cryptography.X509Certificates
get_Certificates
AddCatalogCertificates
GetCatalogCertificates
get_Attributes
get_SignedAttributes
dwFlagsAndAttributes
compareFileAttributes
dwFileAttributes
ruleAttributes
pFileMappigAttributes
lpSecurityAttributes
attributes
WriteCountedAlignedBytes
GetBytes
get_Values
GetSettingValues
previousValues
GetValues
get_AppIDTags
set_AppIDTags
allAppIdTags
UserAppIdTags
GetAppIdTags
dwFileFlags
CertStoreFlags
OpenFlags
BuildOptionFlags
MemberFlags
ProvFlags
dwFlags
GetMultipleEmbeddedSigs
cSecondarySigs
SIPolicyParseStrings
GCSettings
get_Settings
set_Settings
ConvertAppIdTagsToSecureSettings
GetSecureSettings
SIPolicyConvertSecureSettings
pSignatureSettings
WintrustSignatureSettings
AllSettings
XmlReaderSettings
sSettings
dwRegPolicySettings
dwRegSecuritySettings
ReadAuditEventLogs
PackagedAppCatalogs
ValidationEventArgs
get_UserWriteablePaths
set_UserWriteablePaths
userWriteablePaths
get_OmitPaths
set_OmitPaths
omitPaths
get_PolicyPaths
set_PolicyPaths
policyPaths
xpaths
get_AllowFileNameFallbacks
set_AllowFileNameFallbacks
allowFileNameFallbacks
RevocationChecks
get_Ticks
Equals
SignedCms
get_Items
set_Items
psPfns
Contains
get_Extensions
System.Text.RegularExpressions
System.Security.Permissions
RequiredEnforceStoreApplications
System.Collections
SetHVCIOptions
InvokeMethodOptions
get_HvciOptions
set_HvciOptions
GetOptions
StringSplitOptions
RegexOptions
get_AddExceptions
set_AddExceptions
addExceptions
compareExceptions
get_RemoveExceptions
set_RemoveExceptions
removeExceptions
get_SignerInfos
GetWhqlOpusInfos
get_InheritedScenarios
set_InheritedScenarios
get_SigningScenarios
set_SigningScenarios
get_Macros
set_Macros
numBufferChars
NtHeaders
ReadDriverFolders
RequiredEVSigners
get_Signers
set_Signers
get_DeniedSigners
set_DeniedSigners
UserDeniedSigners
DriverDeniedSigners
SIPolicyConvertDeniedSigners
get_AllowedSigners
set_AllowedSigners
UserAllowedSigners
DriverAllowedSigners
SIPolicyConvertAllowedSigners
get_TestSigningSigners
set_TestSigningSigners
get_CiSigners
set_CiSigners
pasCounterSigners
csCounterSigners
pasSigners
csSigners
get_ProductSigners
set_ProductSigners
get_TestSigners
set_TestSigners
get_UpdatePolicySigners
set_UpdatePolicySigners
get_SupplementalPolicySigners
set_SupplementalPolicySigners
signers
initializeContainers
GetMethodParameters
GetFolderDllKernelDrivers
RulesFromDrivers
GetDrivers
WaitForPendingFinalizers
GetSubDirs
padwTrustStepErrors
cdwTrustStepErrors
SystemInformationClass
systemInfoClass
ManagementClass
dwDesiredAccess
Success
GetCurrentProcess
lpBaseAddress
WriteProgress
progress
cUnusedBits
get_ChainElements
GetImports
imports
FileExists
docEkus
get_AddEkus
set_AddEkus
addEkus
get_RemoveEkus
set_RemoveEkus
removeEkus
GetAllEkus
add_ekus
remove_ekus
Windows
get_Keys
Concat
get_MultiplePolicyFormat
set_MultiplePolicyFormat
multiplePolicyFormat
CryptDecodeObject
ManagementBaseObject
WriteObject
CryptographicAttributeObject
hFileMappingObject
hObject
ManagementObject
get_Subject
GetRuleSubject
ruleSubject
pgKnownSubject
flProtect
baseNodesDict
get_Strict
set_Strict
strict
cbStruct
XmlSchemaSet
CurrentCmdlet
op_Implicit
op_Explicit
get_Audit
set_Audit
audit
Split
GetValueOrDefault
WinVerifyTrustResult
ToLowerInvariant
IsEquivalent
DisabledScriptEnforcement
System.Management
CreateElement
XmlElement
X509ChainElement
get_DocumentElement
CreateComment
XmlComment
Environment
XmlDocument
Windows.Management.Deployment
hWndParent
get_Current
createIfAbsent
ReadEvent
get_Count
fileRuleCount
signerRuleCount
ekuCount
get_Root
set_Root
OriginalPathRoot
GetPathRoot
ShadowCopyPathRoot
ReadDriverFoldersRoot
pathToCatRoot
get_CertRoot
set_CertRoot
SIValidateCertRoot
EnabledInvalidateEAsonReboot
EnabledUpdatePolicyNoReboot
get_PathToCatroot
set_PathToCatroot
pathToCatroot
get_NoScript
set_NoScript
noScript
filePart
TrimStart
UntrustedRootCert
pathToConvert
pathsToConvert
Digest
XmlNodeList
ruleList
secureSettingList
ContainedInList
ToList
EnabledDeveloperModeDynamicCodeTrust
WinTrust
WinVerifyTrust
newst
filePathInput
MoveNext
System.Text
get_InnerText
set_InnerText
UIContext
CryptAcquireContext
CryptCATAdminReleaseContext
CryptReleaseContext
pChainContext
AddEku
RemoveEku
GetEku
newEku
EnabledAdvancedBootOptionsMenu
hProv
nFileSizeLow
dwMaximumSizeLow
dwFileOffsetLow
get_Now
Allow
ImageDirectoryEntryToDataEx
GetFileVersionInfoSizeEx
get_VersionEx
set_VersionEx
GetFileVersionInfoEx
add_ex
remove_ex
mapFileRuleId2Index
mapScenarioId2Index
mapSignerId2Index
mapEkuId2Index
dwVerifiedSigIndex
dwIndex
arrayIndex
index
Regex
OrderBy
CompareByteArray
ToByteArray
ToArray
array
MergeCIPolicy
GetCIPolicy
NewCIPolicy
AddPolicy
BasePolicy
AppIDTaggingPolicy
get_AppIdTaggingPolicy
set_AppIdTaggingPolicy
appIdTaggingPolicy
EnabledSecureSettingPolicy
pStrongHashPolicy
SiPolicy
siPolicy
SystemIntegrityPolicySupplementalPolicy
XmlPolicy
EnabledConditionalWindowsLockdownPolicy
pCryptoPolicy
EnabledInheritDefaultPolicy
EnabledUnsignedSystemIntegrityPolicy
policy
get_Key
set_Key
OpenSubKey
GetCorrectFileNameKey
get_AppIdTaggingKey
set_AppIdTaggingKey
appIdTaggingKey
ContainsKey
RegistryKey
System.Security.Cryptography
GetExecutingAssembly
get_IsReadOnly
get_Deny
set_Deny
get_NoShadowCopy
set_NoShadowCopy
noShadowCopy
ValueTypeBinary
SIConvertToBinary
BuildPFNDictionary
internalDictionary
ErrorCategory
get_SystemDirectory
directory
DirectoryEntry
ReadRegistry
op_Equality
op_Inequality
GetUserWriteability
System.Security
EnabledDynamicCodeSecurity
ScanningActivity
GeneratingRulesActivity
CheckingCatalogsActivity
ParsingCatalogsActivity
get_Empty
IsNullOrEmpty
EventProperty
PerAppBadLevel
NoVersionInfoName
FileNoSIP
Enabled:Unsigned System Integrity Policy
Enabled:Audit Mode
Enabled:Advanced Boot Options Menu
Required:Enforce Store Applications
Enabled:UMCI
BadAppIdTaggingPolicyParameters
Disabled:Script Enforcement
Disabled:Runtime FilePath Rule Protection
Base Policy
A244370E-44C9-4C06-B551-F6016E563076
InvalidOption
Enabled:Boot Menu Protection
Required:WHQL
Disabled:Flight Signing
Enabled:Inherit Default Policy
Allowed:Debug Policy Augmented
Required:EV Signers
Enabled:Boot Audit On Failure
Enabled:Managed Installer
Enabled:Intelligent Security Graph Authorization
Enabled:Invalidate EAs on Reboot
Enabled:Update Policy No Reboot
Enabled:Allow Supplemental Policies
Enabled:Dynamic Code Security
Enabled:Revoked Expired As Unsigned
PolicyInfo
Information
String
PolicyID = {
BasePolicyGuidNotPresent
AddSupplementalSigners
AddSupplementalSignersPolicyOption
AddSupplementalSignersAndPolicyOption
AppID Tagging Policy
Supplemental Policy
IdNotFound
allow
ErrorBadStatus
CIPolicyInfoSizeError
AddSignerRuleMissingParameter
ValidatePolicyMsg
InvalidPolicyFile
NullDriverFile
ID_ALLOW_A_
ID_DENY_D_
ID_FILEATTRIB_F_
BadTypeID
ID_FILE_F_
0.0.0.0
65535.65535.65535.65535
SignedScript
Script Placeholder
 FileAttribute
 FileRule
 Hash 
 SignedVersion
NullCert
ID_SIGNER_S_
NullLeafOrPca
ID_SIGNER_F_
ID_SIGNER_W_
NullDoc
FileAttribRef
FileRuleRef
ExceptAllowRule
ExceptDenyRule
RuleID
AllowRuleID
DenyRuleID
CouldNotObtainID
NoNodeWithID
FriendlyName
FileRule
Match
Exclude
Attribute
UnacceptableFileRuleType
FileAttrib
Allow
UnacceptableFileRuleAttribute
SignerId
UpdatePolicySigner
SupplementalPolicySigner
AllowedSigner
CertRoot
CertEKU
Value
Wellknown
UnacceptableSignerRuleAttribute
ExceptionIdNotFound
NoExceptionsInRule
ExceptionNotInRule
EkuNotInRule
RuleNoAttributes
EkuEncodingError
PolicyType
./si:Rules
./si:Signers
./si:FileRules
./si:EKUs
./si:SigningScenarios/si:SigningScenario[@Value="131"]/si:ProductSigners/si:AllowedSigners
./si:SigningScenarios/si:SigningScenario[@Value="131"]/si:ProductSigners/si:FileRulesRef
./si:SigningScenarios/si:SigningScenario[@Value="131"]/si:ProductSigners/si:DeniedSigners
./si:SigningScenarios/si:SigningScenario[@Value="12"]/si:ProductSigners/si:AllowedSigners
./si:SigningScenarios/si:SigningScenario[@Value="12"]/si:ProductSigners/si:FileRulesRef
./si:SigningScenarios/si:SigningScenario[@Value="12"]/si:ProductSigners/si:DeniedSigners
./si:HvciOptions
./si:UpdatePolicySigners
./si:CiSigners
./si:VersionEx
./si:Settings
./si:PolicyID
./si:BasePolicyID
./si:SupplementalPolicySigners
./si:PolicyTypeID
./si:SigningScenarios/si:SigningScenario[@Value="12"]/si:AppIDTags
utf-8
SiPolicy
VersionEx
10.0.0.0
PlatformID
{2E07F7E4-194C-4D20-B7C9-6F44A6C5A234}
Rules
File Rules
FileRules
Signers
Driver Signing Scenarios
SigningScenarios
SigningScenario
ProductSigners
ID_SIGNINGSCENARIO_DRIVERS_1
Auto generated policy on 
MM-dd-yyyy
ID_SIGNINGSCENARIO_WINDOWS
UpdatePolicySigners
CiSigners
HvciOptions
si:EKU
NoBaseNode
RuleId
Unsupported
NodeAtPathNotFound
si:Signer[@ID='
si:AllowedSigner[@SignerId='
si:DeniedSigner[@SignerId='
si:CiSigner[@SignerId='
si:UpdatePolicySigner[@SignerId='
si:SupplementalPolicySigner[@SignerId='
*[@ID='
si:FileRuleRef[@RuleID='
EkuNotInDocument
RuleTypeNotSupported
_[A-Z]_[A-F0-9]+
xmlns
urn:schemas-microsoft-com:sipolicy
Signer
DeniedSigner
NotAcceptableRuleTypeValue
CiSigner
NullIdException
NullEkuIdDiscovered
MaxEkuIdReached
ID_EKU_E_
MalformedRuleOption
Option
Setting
Provider
ValueName
InvalidSecureSettingPKV
AppIDTag
InvalidAppIdTag
InvalidSubjectDuringMergeIdAppend
CheckingForCatSigners
ParsingCats
CouldNotAcquireContext
CouldNotHash
CouldNotCloseFileHandle
\catroot\
*.cat
CatalogFile/CRYPTCATMEMBER/ReferenceTag
CatError
FileNotFound
ErrorGettingCryptServiceProvider
UnableToOpenCatFile
CatalogFile
CRYPTCATATTRIBUTE
ReferenceTag
CRYPTCATMEMBER
\\?\GLOBALROOT\Device\Mup\
Microsoft-Windows-CodeIntegrity/Operational
\\?\GLOBALROOT
AuditNotFound
Microsoft-Windows-Applocker/MSI and Script
AllHostIds
EnterpriseDefinedClsId
Boolean
ApplockerEventLogNotFound
GeneratingRules
Progress
InvalidLevel
NoSigner
HashInaccessible
Sha256
Page Sha1
Page Sha256
Authenticode SIP Sha256
NoFilePath
UserWriteable
NoWHQLSigner
ScanUnsuccessful
ScanSuccessful
GetCertAtInvalidLevel
NoCatalogs
CheckingFilesAgainstCats
SYSTEM\CurrentControlSet\Services
ImagePath
ImagePathNotFound
system32\
\DriverStore\FileRepository\
\drivers\
windir
\Boot\Resources
\bootres.dll.mui
Scanning
CouldNotAccessSubdirectoryDenied
CouldNotAccessSubdirectorySymlink
ErrorsProcessingSubDirectory
*.sys
*.dll
kernel32.dll
kernelbase.dll
ntdll.dll
user32.dll
mscoree.dll
BadVersionCompare
1.2.840.113549.1.1.4
1.2.840.113549.1.1.5
1.3.14.3.2.29
1.2.840.113549.1.1.11
SHA256
1.2.840.113549.1.1.12
SHA384
1.2.840.113549.1.1.13
SHA512
CouldNotDecode
UnsupportedSigAlg
UnsupportedSigAlgFIPS
OriginalFileName:
InternalName:
FileDescription:
ProductName:
PackageFamilyName:
FilePath:
Microsoft.ConfigCI.Commands
\VarFileInfo\Translation
StringFileInfo\
\OriginalFileName
\InternalName
\FileDescription
\ProductName
FileInaccessible
Bad Dev No Cookie (This DriverFile constructor is only for paths for now)
{00AAC56B-CD44-11d0-8CC2-00C04FC295EE}
1.3.6.1.4.1.311.10.3.5
1.3.6.1.5.5.7.3.3
1.3.6.1.4.1.311.2.1.12
2.5.29.37
01082B06010505070303
DE351A43-8E59-11d0-8C47-00C04FC295EE
9BA61D3F-E73A-11d0-8CD2-00C04FC295EE
C689AABA-8E78-11d0-8C47-00C04FC295EE
CouldNotOpenFile
CodeIntegrity.cat
GetFileSizeFailed
CreateFileMappingFailed
CreateFileMappingAlreadyExists
MapViewOfFileFailed
ImageNtHeaderFailed
ImageDirectoryEntryToDataExFailed
UnmapViewOfFileFailed
CouldNotCloseMapHandle
PropagateErrorMessage
SeSecurityPrivilege
SeRestorePrivilege
SeBackupPrivilege
Win32_ShadowCopy
Create
Volume
Context
ClientAccessible
ShadowID
DeviceObject
NoDiskSpaceShadowCopyError
ShadowcopyFailure
WDACAppId
TaggingSettings
DefaultPolicy
EnforceDLL
Tagging
Microsoft.ConfigCI.Commands.CIPolicy.xsd
DuplicatedSigningScenarioIDs
InvalidAllowRule
GenericUnsafeInSignedPolicy
FilePathInSignedPolicy
\Device\Mup
UNCPathsAreDangerous
InvalidDenyRule
InvalidFileRule
InvalidFileRuleType
\$\(([^\(\)]+)\)
NoSuchMacroDefined
NoMacroDefined
IncorrectVersions
InvalidCertRoot
InvalidSigner
InvalidSigningScenario
InvalidSignerID
InvalidEkuID
FileAttribRefMustReferenceFileAttrib
SignerFileRefRuleID
InheritInvalidSigningScenario
InvalidSignerIDMacro
ExceptDenyRuleMustReferenceDeny
AllowSignerExceptDenyRuleID
Invalid signer id macro in AllowedSigners.
ExceptAllowRuleMustReferenceAllow
DenySignerAllowExceptRuleID
TooManyAppIdTagsOrSecureSettings
InvalidSettingValueType
InvalidRuleID
InvalidVersion
InvalidPolicyIDsError
MismatchPolicyTypeAndPolicyIDs
LegacyInvalidPolicyIDsError
NoUpdatePolicySigner
ManagedInstallerAndISGInSignedPolicy
ShouldNotHaveSupplementalSigners
ShouldNotHaveAllowSupplementalPolicies
{5951A96A-E0B5-4D3D-8FB8-3E5B61030784}
NoSupplementalSigners
AppIdTaggingPolicyUMCIOnly
AppIdTaggingPolicyMustHaveAppIdTags
AppIdTagsOnlyForUMCI
DuplicateRuleIdError
Unsupported
StringFileInfo\
\OriginalFileName
\InternalName
\FileDescription
\ProductName
\VarFileInfo\Translation
SignedScript
SeRestorePrivilege
SeBackupPrivilege
SeSecurityPrivilege
{5951A96A-E0B5-4D3D-8FB8-3E5B61030784}
System.Security.Permissions.SecurityPermissionAttribute, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
SkipVerification
WrapNonExceptionThrows
.NETFramework,Version=v4.6
*Microsoft (R) Windows (R) Operating System
9Copyright (c) Microsoft Corporation. All rights reserved.
Microsoft Corporation
10.0.10011.16384
Id:\os\public\amd64fre\onecoreuap\internal\strongnamekeys\fake\windows.snk
Enabled:UMCI
Enabled:Boot Menu Protection
0Enabled:Intelligent Security Graph Authorization
 Enabled:Invalidate EAs on Reboot
#Enabled:Windows Lockdown Trial Mode
Required:WHQL
)Enabled:Developer Mode Dynamic Code Trust
#Enabled:Allow Supplemental Policies
)Disabled:Runtime FilePath Rule Protection
#Enabled:Revoked Expired As Unsigned
Enabled:Audit Mode
Disabled:Flight Signing
Enabled:Inherit Default Policy
(Enabled:Unsigned System Integrity Policy
Enabled:Dynamic Code Security
Required:EV Signers
Enabled:Boot Audit On Failure
"Enabled:Advanced Boot Options Menu
Disabled:Script Enforcement
#Required:Enforce Store Applications
Enabled:Secure Setting Policy
Enabled:Managed Installer
Enabled:Update Policy No Reboot
+Enabled:Conditional Windows Lockdown Policy
Base Policy
Supplemental Policy
AppID Tagging Policy
4.8.3928.0
AnonymousType
Namespace"urn:schemas-microsoft-com:sipolicyA
Namespace"urn:schemas-microsoft-com:sipolicyT
IsNullable
Namespace"urn:schemas-microsoft-com:sipolicy
SystemDriver
CIPolicyRule
CIPolicy
CIPolicy
Merge
CIPolicy
RuleOption
HVCIOptions
CIPolicySetting
CIPolicyIdInfo
CIPolicyIdInfo
Remove
CIPolicyRule
CIPolicyRule
CIPolicyInfo
SignerRule
CIPolicyVersion
ConvertFrom
CIPolicy
Macro
Option
BinaryZSystem.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
DataType
hexBinaryh
Boolean[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
DWordZSystem.UInt32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
StringZSystem.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
Setting
DataType
hexBinary
AllowedSigner
ExceptDenyRule
DeniedSigner
ExceptAllowRule
FileRuleRef
AppIDTag
Allow
Allow
FileAttrib
FileAttrib
FileRule
FileRule
UpdatePolicySigner
SupplementalPolicySigner
CiSigner
Signer
CertEKU
FileAttribRef
SigningScenario
IsNullable
IsNullable
Allow
Allow
IsNullable
IsNullable
FileAttrib
FileAttrib
IsNullable
FileRule
FileRule
IsNullable
Signer
IsNullable
SigningScenario
IsNullable
UpdatePolicySigner
IsNullable
CiSigner
IsNullable
Setting
IsNullable
Macro
IsNullable
SupplementalPolicySigner
IsNullable
ParameterSetName
DriverFileListT
ValueFromPipeline
ParameterSetName
DriverFilePathT
Mandatory
ParameterSetName
DriverFilePathT
Mandatory
Mandatory
ParameterSetName
DriverFileList3
Mandatory
ParameterSetName
DriverFilePath
ParameterSetName
PackageFamilyNameT
ValueFromPipeline
ParameterSetName
ManualFilePath 
Mandatory
Position
ParameterSetName
DriversT
ValueFromPipeline
Mandatory
ParameterSetName
Drivers
ParameterSetName
Drivers?
Mandatory
ParameterSetName
RulesT
ValueFromPipeline
Position
Mandatory
Mandatory
Position
ValueFromPipeline
ParameterSetName
Action:
Mandatory
Position
ParameterSetName
Action)
Mandatory
ParameterSetName
Mandatory
Position
ParameterSetName
Action
ParameterSetName
Options
ParameterSetName
None(
Mandatory
ParameterSetName
Mandatory
ParameterSetName
Delete
Boolean
DWord
Binary
String
Mandatory
Allow
IgnoreCase
ParameterSetName
FileRule"
ParameterSetName
SignerRule0
ParameterSetName
CertificateT
Mandatory
ParameterSetName
CertStoreT
Mandatory
Mandatory
Position
ValueFromPipeline
Mandatory
Position
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADP(~"
@k+uAB
QLxqR
{zqZ|
AccessVioloationException
AddSignerRuleMissingParameter&
AddSupplementalSigners^
AddSupplementalSignersAndPolicyOption
AddSupplementalSignersPolicyOption
AllowSignerExceptDenyRuleID
AppIdTaggingPolicyMustHaveAppIdTags
AppIdTaggingPolicyUMCIOnly
AppIdTagsOnlyForUMCI
ApplockerEventLogNotFound
AuditBadPath
AuditNotFound
AuditNotLocal
BadAppIdTaggingPolicyParameters
BadTypeID
BadVersionCompare
BasePolicyGuidNotPresent
CIPolicyInfoSizeError
CatError
CheckingFilesAgainstCats
CheckingForCatSigners
CiSignerCantHaveWellknownRoot
CouldNotAccessSubdirectoryDenied
CouldNotAccessSubdirectorySymlink
CouldNotAcquireContext
CouldNotCloseFileHandle
CouldNotCloseMapHandle
CouldNotDecode
CouldNotHash
CouldNotObtainID
CouldNotOpenFile
CreateFileMappingAlreadyExists
CreateFileMappingFailed
DenySignerAllowExceptRuleID
DuplicateRuleIdError
DuplicatedSigningScenarioIDs
EkuEncodingError
EkuNotInDocument
EkuNotInRule
ErrorBadStatus
ErrorGettingCryptServiceProvider
ErrorsProcessingSubDirectory
ExceptAllowRuleMustReferenceAllow
ExceptDenyRuleMustReferenceDeny
ExceptionIdNotFound
ExceptionNotInRule
FileAttribRefMustReferenceFileAttrib
FileInaccessible
FileNoSIP
FileNotFound
FilePathInSignedPolicy
GeneratingRules
GenericUnsafeInSignedPolicy
GetCertAtInvalidLevel
GetFileSizeFailed
HashInaccessible
IdNotFound
ImageDirectoryEntryToDataExFailed
ImageNtHeaderFailed
ImagePathNotFound
IncorrectSBCPPolicyFormat
IncorrectVersions
InheritInvalidSigningScenario
InvalidAllowRule
InvalidAllowRuleV3
InvalidAllowedSigner
InvalidAppIdTag
InvalidCertRoot
InvalidDenyRule
InvalidDenyRuleV3
InvalidEkuID
InvalidFileRule
InvalidFileRuleType
InvalidFileRuleV3
InvalidLevel
InvalidLicense
InvalidOption
InvalidPolicy
InvalidPolicyFile
InvalidPolicyIDsError
InvalidPolicyVersion
InvalidPublisherInList
InvalidRuleID
InvalidSecureSettingPKV
InvalidSettingValueType
InvalidSigner
InvalidSignerID
InvalidSignerIDMacro
InvalidSigningScenario
InvalidSigningScenarioValue
InvalidSubjectDuringMergeIdAppend
InvalidVersion
LegacyInvalidPolicyIDsError
MalformedRuleOption
ManagedInstallerAndISGInSignedPolicy
MapViewOfFileFailed
MaxEkuIdReached
MismatchPolicyTypeAndPolicyIDs
NoBaseNode
NoCatalogs
NoDenyRulesFromSupplementalPolicies
NoDiskSpaceShadowCopyError
NoExceptionsInRule
NoFilePath
NoMacroDefined
NoNodeWithID
NoSigner
NoSuchMacroDefined
NoSupplementalSigners
NoUpdatePolicySigner
NoVersionInfoName
NoVersionInfoNamePublisherRule
NoWHQLSigner
NodeAtPathNotFound
NotAcceptableRuleTypeValue
NotImplementedException
NullCert
NullDoc
NullDriverFile
NullEkuIdDiscovered
NullIdException
NullLeafOrPca
ParsingCats
PathDoesNotExist
PerAppBadLevel
Progress
PropagateErrorMessage
RuleNoAttributes
RuleNotInDocument
RuleTypeNotSupported
ScanSuccessful
ScanUnsuccessful
Scanning
SetCIPolicyIds
ShadowcopyFailure
ShouldNotHaveAllowSupplementalPolicies
ShouldNotHaveSupplementalSigners
SignerFileRefRuleID
TooManyAppIdTagsOrSecureSettings
TooMuchDefinedFormat
UNCPathsAreDangerous
UnableToOpenCatFile
UnacceptableFileRuleAttribute
UnacceptableFileRuleType
UnacceptableSignerRuleAttribute
UnexpectedChildOfSignerScenarioNode
UnmapViewOfFileFailed
UnsupportedSigAlg
UnsupportedSigAlgFIPS
UserWriteable
ValidatePolicyMsg
VarNotFoundException
VerifyingRules
WritingBinPolicyMsg
WritingStagedPolicyVariable
$Incorrect authentication data: 0x{0}
6Please provide either CertificatePath or CertStorePath
This is a base policy which allows supplemental signers, as a next step please add Supplemental Signers using Add-SignerRule (-supplemental).
This is a base policy, if you wish to make use of supplemental policies please add Supplemental Signers using Add-SignerRule (-supplemental) and Set-RuleOption (for Enabled: Allow Supplemental Policies).
This is a base policy which has supplemental signers, inorder to allow supplemental policy please use Set-RuleOption (for Enabled: Allow Supplemental Policies).
3Allow signer exception deny rule ID {0} is invalid.
8AppId Tagging Policy must have AppIdTags field specified
KAppId Tagging Policy only supports SigningScenario Value 12 (UMCI Scenario)
CAppIdTags Field only valid for User Mode SigningScenario (Value 12)
9MSI and Script EventLog not found, auditing only PE Rules
."Cannot obtain full path from audit entry {0}"
d"File at path {0} in the audit log was not found.  It has likely been deleted since it was last run"
R"{0} is not local and can not be included via audit scan, please include manually"
AppIdTaggingPolicy must have AppIdTaggingKey and AppIdTaggingValue specified, and both must contain the same number of elements
B"Bad TypeID given to Rule Constructor (this is a developer error)"
"Error bad version comparison"
`The policy file supplied as the base policy does not have a policy GUID or is not a base policy.
H"Unexpected CIPolicyInfo size returned by NTQuerySystemInformation: {0}'
7"The catalog file {0} threw an error and wasn't parsed"
!"Checking files against catalogs"
"Checking for Catalog Signers"
(CiSigner should not have wellknown root.
I"Could not access subdirectory (permission denied) directory not scanned"
="Could not access subdirectory {0} a symlink cycle may exist"
-"Could not acquire Algorithm Context for {0}"
"Could not close file handle"
"Could not close map handle"
"Could not decode {0}"
"Could not hash {0} with {1}"
A"Incorrectly formatted FileRule of type {0}, could not obtain ID"
@"Warning: Could not open file {0}, file not scanned for imports"
>"CreateFileMapping failed, since mapped object already exists"
"CreateFileMapping failed"
0Deny signer allow except rule ID {0} is invalid.
Rule with Duplicate Id {0}
AThere are more than one signing scenarios have the same ID = {0}.
$"An EKU oid encoding error occurred"
!"No Eku with ID {0} in document."
"EKU {0} not in rule {1}"
"Unexpected NTSTATUS: {0}"
<"Error getting cryptographic service provider.  hResult={0}"
5"An error occurred while processing subdirectory {0}"
UInvalid AllowRuleID {0} ExceptAllowRule must reference an "allow" or "match" filerule
SInvalid DenyRuleID {0} ExceptDenyRule must reference a "deny" or "exclude" filerule
3"Provided Exception ID {0} not present in document"
"Exception {0} not in rule {1}"
dInvalid FileAttribRef RuleID {0} FileAttribRef must reference a "fileattrib" or "attribute" filerule
""The file at {0} was inaccessible"
g"File {0} does not have a SIP or was inaccessible and cannot be included in the Configurable CI Policy"
"Error: File not found: {0}"
FilePath in Rule with ID {0}
"Generating Rules"
Policies that use options other than signer or hash rules do not provide the strongest possible WDAC protections. Recommendation for signed policy: if the management overhead is reasonable consider only using signer and\or hash rules.  Options with reduced security protection:
."GetCertAtLevel called with invalid level {0}"
"GetFileSize failed"
E"File {0} hash was inaccessible, this file was not included in rules"
"Provided ID not found"
$"ImageDirectoryEntryToDataEx failed"
"ImageNtHeader failed"
'"Driver file {0} in Registry not found"
&Incorrect SBCP Policy file format {0}.
FFor {0}, MinimumFileVersion {1} is bigger than MaximumFileVersion {2}.
;Signing scenario {0} inherits invalid signing scenario {1}.
$There is an invalid allow rule: {0}.
DThere is an invalid allow rule {0} which has both Hash and FileName.
Invalid AllowedSigner object.
0AppIdTag must have both Key and Value attributes
NCertificate root type is invalid. It must be wellknown or defined by TBS hash.
)There is an invalid deny rul with ID {0}.
/There is an invalid deny rule which has ID {0}.
Invalid EKU ID {0}.
'There is invalid file rule with ID {0}.
8File rule has an invalid type other than Deny and Allow.
/There is an invalid file rule which has ID {0}.
2"Invalid level specified for rule generation: {0}"
9Device Guard is not available in this edition of Windows.
"Invalid option {0}"
Policy in registry is invalid
Policy file is invalid.
S"Error: ConfigCI policy must have both required PolicyID {0} and BasePolicyID {1}."
,New policy version is less than old version:
9New policy publisher not in the list of accepted updates.
Invalid  file rule ID: {0}
5The secure setting provider, key or value is invalid.
)Secure Setting value type {0} is invalid.
Invalid signer {0}.
Invalid signer ID {0}.
%The signer ID Macro {0} is incorrect.
Invalid SigningScenario object.
#Invalid signing scenario value {0}.
1"Invalid RuleSubject when appending MergeId: {0}"
The version is incorrect {0}.
"Error: Existing legacy Code Integrity policy can have PolicyTypeID {0}, but should not have PolicyID {1} and BasePolicyID {2}. The compiled policy will have PolicyID and BasePolicyID equal to PolicyTypeID."
1"Malformed policy: rule node has no option child"
Q"Enabled:Managed Installer" or "Enabled:Intelligent Security Graph Authorization"
"MapViewOfFile failed"
r"Cannot generate new EKU ID as highest possible ID is already present in policy, please defragment policy EKU IDs"
"Error: Mismatched policy type {0}, PolicyID {1} and BasePolicyID {2}. PolicyID and BasePolicyID are the same for base policy, not the same for Supplemental policy."
/"Malformed Code Integrity Policy. No {0} node."
e"An error occurred attempting to access catalogs, no catalog signatures were included with this scan"
9Supplemental policy should not have explicite deny rules.
"Error {0} was thrown while cleaning up the shadowcopy.  Policy creation aborted as this signals a corrupt state. This may be due to an interaction between the shadowcopy functionality and low disk space on the target drive.  Please free up some disk space or attempt to rescan with the -NoShadowCopy option"
#"No exceptions present in rule {0}"
Error retrieving file path
2There is no Macros defined, but {0} is referenced.
F"Incorrectly formatted document: there must be one node with ID = {0}"
]"Unable to find a signing certificate for file at path {0}.  Cannot create signer based rule"
5There is no macro defined for {0}, referenced in {1}.
VSigned base policies that allow supplemental policies should have SupplementalSigners.
BSigned policy is required, but no UpdatePolicySigner is specified.
c"File at path {0} has a null or empty Original name in VersionInfo.  Cannot create name based rule"
"File at path {0} has a null or empty Original and Internal name in VersionInfo.  Cannot create name based rule.  Creating Hash based rule instead."
m"Unable to find a signing certificate with a WHQL EKU for file at path {0}.  Cannot create signer based rule"
>"Malformed Code Integrity Policy. Node at {0} cannot be found"
+"{0} is not an acceptable Rule type value."
,Cmdlet not supported on this platform: 0x{0}
-"Attempting to construct rule from null cert"
"Attempting to edit null doc"
3"Attempting to construct rule from null driverfile"
"A null EKU ID was discovered"
!"Null ID in AddExceptionFileRule"
4"Attempting to construct rule from null leaf or pca"
"Parsing Catalogs"
"{0} does not exist"
wPer-Application rules can only be made at the FileName, FilePublisher, Hash, SignedVersion, or WHQLFilePublisher level.
"Progress:"
G"An Error occurred while processing {0}. Message: {1}. Error Code: {2}"
'"Rule {0} does not have any attributes"
""Rule with ID {0} not in document"
'"Provided rule type {0} not supported."
"Scan completed successfully"
"Unable to generate rules for all scanned files at the requested level.  A list of files not covered by the current policy can be found at {0}.  If it is safe to not include these files, no action needs to be taken, otherwise a more complete policy may be created using the -fallback switch"
#"Scanning... This may take a while"
^Use  Set-CIPolicyIdInfo to set base policy ID if this is supposed to be a supplemental policy.
"Unable to create a shadowcopy of the target drive. Files that are in use may generate warnings and fail to be scanned. To enable shadowcopy, ensure that powershell is running as administrator and that the Win32_Shadowcopy service is enabled."
;Only base policy can have allow supplemental policy option.
7Only signed base policies can have SupplementalSigners.
-Signer file reference rule ID {0} is invalid.
@Number of AppIdTags plus Secure Settings must be less than 65535
 Too much {0} rules defined: {1}.
Policies that contain UNC paths require UNC hardening to be secure, see https://go.microsoft.com/fwlink/?linkid=2068062&clcid=0x409
3"Error:  Unable to open catalog file.  hResult={0}"
+"{0} is an unacceptable FileRule attribute"
${0} is an unacceptable FileRule Type
-"{0} is an unacceptable SignerRule attribute"
e"Incorrectly formatted document: Unexpected child of signer scenarioNode (expecting only exceptions)"
"UnmapViewOfFile failed"
O"Unrecognized/Unsupported SignatureAlgorithm {0} by cert {1}. CertRoot not set"
Y"Cert {0} has a SignatureAlgorithm {1} which is not supported by FIPS.  CertRoot not set"
sFile at path {0} was identified as being User Writeable.  To Include in policy please specify "-UserWriteablePaths"
Validating policy file.
&Variable is currently undefined: 0x{0}
Verifying rules.
Writing policy binary file.
.Writing staged policy path to system variable.
<?xml version="1.0" encoding="utf-8"?>
<xs:schema
    targetNamespace="urn:schemas-microsoft-com:sipolicy"
    elementFormDefault="qualified"
    xmlns="urn:schemas-microsoft-com:sipolicy"
    xmlns:ps="urn:schemas-microsoft-com:sipolicy"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
  <!-- A {00000000-0000-0000-0000-000000000000} GUID type -->
  <xs:simpleType name="GuidType">
    <xs:restriction base="xs:string">
      <xs:pattern value="\{[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\}"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DWordType">
    <xs:restriction base="xs:unsignedInt"/>
  </xs:simpleType>
  <xs:simpleType name="BooleanType">
    <xs:restriction base="xs:boolean"/>
  </xs:simpleType>
  <xs:simpleType name="QWordType">
    <xs:restriction base="xs:unsignedLong"/>
  </xs:simpleType>
  <!-- Macros -->
  <xs:element name="Macros">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Macro" minOccurs="1" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>
              A Macro element defines a text substitution macro that can be used in other elements.
              Macros are referenced using NMAKE syntax, i.e. $(runtime.windows).
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:attribute name="Id" type="MacroIdType" use="required">
              <xs:annotation>
                <xs:documentation>
                  Required. The Id for this macro, used in macro references. For example, if the
                  Id for this macro is "runtime.windows", the macro would be referenced as $(runtime.windows).
                </xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Value" type="MacroValueStringType" use="required">
              <xs:annotation>
                <xs:documentation>
                  Required. The value that will be substituted for macro references in macro- enabled XML attributes.
                </xs:documentation>
              </xs:annotation>
            </xs:attribute>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
    <xs:unique name="UniqueMacroId">
      <xs:selector xpath="ps:Macro" />
      <xs:field xpath="@Id" />
    </xs:unique>
  </xs:element>
  <!--File Path -->
  <xs:simpleType name="FilePathType">
    <xs:restriction base="xs:string">
      <xs:minLength value="1"/>
      <xs:maxLength value="32767"/>
    </xs:restriction>
  </xs:simpleType>
  <!-- Sid Type -->
  <xs:simpleType name="SidType">
    <xs:restriction base="xs:string">
      <xs:minLength value="3"/>
      <!-- Accepts Macros only-->
      <xs:pattern value="(\$\([a-zA-Z_][a-zA-Z_0-9.]*\))+" />
    </xs:restriction>
  </xs:simpleType>
  <!-- SignTime Type -->
  <xs:simpleType name="SignTimeType">
    <xs:restriction base="xs:dateTime">
    </xs:restriction>
  </xs:simpleType>
  <!-- Macro Type -->
  <xs:simpleType name="MacroIdType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[a-zA-Z_][a-zA-Z_0-9.]*" />
    </xs:restriction>
  </xs:simpleType>
  <!-- Macro Value String Type -->
  <xs:simpleType name="MacroValueStringType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[a-zA-Z0-9\-_!@#%\^\.,;:=\+~`'\{\}\(\)\[\]\$ \\]*" />
    </xs:restriction>
  </xs:simpleType>
  <!-- AppIDs Type -->
  <xs:simpleType name="AppIdType">
    <xs:annotation>
      <xs:documentation>
        AppIDs may use either macros only (and be multi-valued). For example $(Adobe65)$(TestApp)
        ((\$\([a-zA-Z_][a-zA-Z_0-9.]*\))+)
        or they may be a string that does not begin with a $ and be single valued
        (^[^\$]([a-zA-Z0-9\-_!@#%\^\.,;:=\+~`'\{\}\(\)\[\]\$ \\])*)
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:minLength value="1"/>
      <xs:pattern value="(^[^\$]([a-zA-Z0-9\-_!@#%\^\.,;:=\+~`'\{\}\(\)\[\]\$ \\])*)|((\$\([a-zA-Z_][a-zA-Z_0-9.]*\))+)" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="OptionType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Enabled:UMCI"/>
      <xs:enumeration value="Enabled:Boot Menu Protection"/>
      <xs:enumeration value="Enabled:Intelligent Security Graph Authorization"/>
      <xs:enumeration value="Enabled:Invalidate EAs on Reboot"/>
      <xs:enumeration value="Enabled:Windows Lockdown Trial Mode"/>
      <xs:enumeration value="Required:WHQL"/>
      <xs:enumeration value="Enabled:Developer Mode Dynamic Code Trust"/>
      <xs:enumeration value="Enabled:Allow Supplemental Policies"/>
      <xs:enumeration value="Disabled:Runtime FilePath Rule Protection"/>
      <xs:enumeration value="Enabled:Revoked Expired As Unsigned"/>
      <xs:enumeration value="Enabled:Audit Mode"/>
      <xs:enumeration value="Disabled:Flight Signing"/>
      <xs:enumeration value="Enabled:Inherit Default Policy"/>
      <xs:enumeration value="Enabled:Unsigned System Integrity Policy"/>
      <xs:enumeration value="Enabled:Dynamic Code Security"/>
      <xs:enumeration value="Required:EV Signers"/>
      <xs:enumeration value="Enabled:Boot Audit On Failure"/>
      <xs:enumeration value="Enabled:Advanced Boot Options Menu"/>
      <xs:enumeration value="Disabled:Script Enforcement"/>
      <xs:enumeration value="Required:Enforce Store Applications"/>
      <xs:enumeration value="Enabled:Secure Setting Policy"/>
      <xs:enumeration value="Enabled:Managed Installer"/>
      <xs:enumeration value="Enabled:Update Policy No Reboot"/>
      <xs:enumeration value="Enabled:Conditional Windows Lockdown Policy"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="PolicyType">
    <xs:annotation>
      <xs:documentation>
        Base and Supplemental Policy Types.
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Base Policy"/>
      <xs:enumeration value="Supplemental Policy"/>
      <xs:enumeration value="AppID Tagging Policy"/>
    </xs:restriction>
  </xs:simpleType>
  <!-- Secure Setting Value Type -->
  <xs:complexType name="SettingValueType">
    <xs:choice>
      <xs:element name="Boolean" type="BooleanType" />
      <xs:element name="DWord" type="DWordType" />
      <xs:element name="Binary" type="xs:hexBinary" />
      <xs:element name="String" type="xs:string" />
    </xs:choice>
  </xs:complexType>
  <!-- Secure Setting <Provider,Key,Value> -->
  <xs:element name="Setting">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Value" type="SettingValueType"/>
      </xs:sequence>
      <xs:attribute name="Provider" type="xs:string" use="required" />
      <xs:attribute name="Key" type="xs:string" use="required" />
      <xs:attribute name="ValueName" type="xs:string" use="required" />
    </xs:complexType>
  </xs:element>
  <!-- Collection of Setting-->
  <xs:element name="Settings">
    <xs:annotation>
      <xs:documentation>
        Collection of setting elements.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="1" maxOccurs="65535">
        <xs:element ref="Setting"  minOccurs="0" maxOccurs="65535" />
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="RuleType">
    <xs:sequence>
      <xs:choice>
        <xs:element name="Option" type="OptionType"/>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="UShortType">
      <xs:restriction base="xs:unsignedShort"/>
  </xs:simpleType>
  <!-- System Integrity Policy Version-->
  <xs:simpleType name="VersionExType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9]*.[0-9]*.[0-9]*.[0-9]*" />
     </xs:restriction>
  </xs:simpleType>
    <!-- SignerNameType-->
    <xs:simpleType name="SignerNameType">
        <xs:restriction base="xs:string">
        </xs:restriction>
    </xs:simpleType>
    <!-- Type of CertificateToChainTo-->
    <xs:simpleType name="CertEnumType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="TBS"/>
            <xs:enumeration value="Wellknown"/>
        </xs:restriction>
    </xs:simpleType>
    <!-- Certificate EKU -->
    <xs:element name="CertEKU">
        <xs:complexType>
               <xs:attribute name="ID" type="EKUType" use="required"/>
        </xs:complexType>
    </xs:element>
    <!-- Certificate OEM ID-->
    <xs:element name="CertOemID">
        <xs:complexType>
            <xs:attribute name="Value" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
    <!-- Certificate Publisher -->
    <xs:element name="CertPublisher">
        <xs:complexType>
            <xs:attribute name="Value" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
    <!-- Certificate Issuer-->
    <xs:element name="CertIssuer">
        <xs:complexType>
            <xs:attribute name="Value" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
    <!-- certificate to chain to-->
    <xs:element name="CertRoot">
        <xs:complexType>
            <xs:attribute name="Type" type="CertEnumType" use="required" />
            <!-- Value is either wellknow Root ID or TBS hash, both in hexBinary form-->
            <xs:attribute name="Value" type="xs:hexBinary" use="required" />
        </xs:complexType>
    </xs:element>
    <!-- Product Signers-->
    <xs:element name="ProductSigners">
        <xs:complexType>
            <xs:all minOccurs="1" maxOccurs="1">
                 <xs:element ref="AllowedSigners" minOccurs="0" maxOccurs="1"/>
                 <xs:element ref="DeniedSigners" minOccurs="0" maxOccurs="1"/>
                 <xs:element ref="FileRulesRef" minOccurs="0" maxOccurs="1"/>
            </xs:all>
        </xs:complexType>
    </xs:element>
    <!-- Test Signers-->
    <xs:element name="TestSigners">
        <xs:complexType>
            <xs:sequence minOccurs="1" maxOccurs="1">
                   <xs:element ref="AllowedSigners" minOccurs="0" maxOccurs="1"/>
                   <xs:element ref="DeniedSigners" minOccurs="0" maxOccurs="1"/>
                   <xs:element ref="FileRulesRef" minOccurs="0" maxOccurs="1"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <!-- TestSiging Signers-->
    <xs:element name="TestSigningSigners">
        <xs:complexType>
            <xs:sequence minOccurs="1" maxOccurs="1">
                <xs:element ref="AllowedSigners" minOccurs="0" maxOccurs="1"/>
                <xs:element ref="DeniedSigners" minOccurs="0" maxOccurs="1"/>
                <xs:element ref="FileRulesRef" minOccurs="0" maxOccurs="1"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <!-- AppIDTag with Key/Value Pair -->
    <xs:element name="AppIDTag">
        <xs:complexType>
            <xs:attribute name="Key" type="xs:string" use="required" />
            <xs:attribute name="Value" type="xs:string" use="required" />
        </xs:complexType>
    </xs:element>
    <!-- AppIDTags-->
    <xs:element name="AppIDTags">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="AppIDTag" minOccurs="0" maxOccurs="65535"/>
            </xs:sequence>
            <xs:attribute name="EnforceDLL" type="xs:boolean" use="optional" />
        </xs:complexType>
    </xs:element>
    <!-- Signer Type-->
    <xs:complexType name="SignerType">
        <xs:annotation>
            <xs:documentation>
                Define a Signer
            </xs:documentation>
        </xs:annotation>
        <xs:sequence minOccurs="1" maxOccurs="1">
            <xs:element ref="CertRoot" minOccurs="1" maxOccurs="1"/>
            <xs:element ref="CertEKU" minOccurs="1" maxOccurs="1"/>
            <xs:element ref="CertPublisher" minOccurs="0" maxOccurs="1"/>
            <xs:element ref="CertOemID" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="Name" type="SignerNameType" use="required" />
        <xs:attribute name="ID" type="SignerIdType" use="required" />
    </xs:complexType>
    <!-- EKU Type-->
    <xs:simpleType name="EKUType">
        <xs:annotation>
            <xs:documentation>
                EKU ID type starts with ID_EKU_
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="ID_EKU_[A-Z][_A-Z0-9]*" />
            <xs:minLength value="1"/>
        </xs:restriction>
    </xs:simpleType>
    <!-- Signing Scenario ID Type -->
    <xs:simpleType name="SigningScenarioIDType">
        <xs:annotation>
            <xs:documentation>
                Signing Scenario ID type starts with ID_SIGNGINGSCENARIO_
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="ID_SIGNINGSCENARIO_[A-Z][_A-Z0-9]*" />
            <xs:minLength value="1"/>
        </xs:restriction>
    </xs:simpleType>
    <!-- Signing Scenario IDs Type-->
    <xs:simpleType name="SigningScenarioIDsType">
        <xs:annotation>
            <xs:documentation>
                Multiple ID_SIGNINGSCENARIO_ seperated by ','
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="((ID_SIGNINGSCENARIO_[A-Z][_A-Z0-9]*)[,]?)*" />
            <xs:minLength value="1"/>
        </xs:restriction>
    </xs:simpleType>
    <!-- Allow File Rule ID Type-->
    <xs:simpleType name="AllowType">
        <xs:annotation>
            <xs:documentation>
                Allow Rule ID should start with ID_ALLOW_ or ID_FILE
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="((ID_ALLOW_[A-Z][_A-Z0-9]*))|((ID_FILE_[A-Z][_A-Z0-9]*))" />
        </xs:restriction>
    </xs:simpleType>
    <!-- Generic file attribute type that can be used directly inside a signer-->
    <xs:simpleType name="FileAttribType">
        <xs:annotation>
            <xs:documentation>
                Generic file rule ID should start with ID_FILEATTRIB_ or ID_FILE_
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="((ID_FILEATTRIB_[A-Z][_A-Z0-9]*))|((ID_FILE_[A-Z][_A-Z0-9]*))" />
            <xs:minLength value="10"/>
        </xs:restriction>
    </xs:simpleType>
    <!-- Deny File RUle ID Type-->
    <xs:simpleType name="DenyType">
        <xs:annotation>
            <xs:documentation>
                Deny Rule ID should start with ID_DENY_ or ID_FILE
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="((ID_DENY_[A-Z][_A-Z0-9]*))|((ID_FILE_[A-Z][_A-Z0-9]*))" />
            <xs:minLength value="1"/>
        </xs:restriction>
    </xs:simpleType>
    <!-- Generic File Rule ID Type-->
    <xs:simpleType name="FileRuleType">
        <xs:annotation>
            <xs:documentation>
                FileRule Rule ID should start with ID_FILE_
                Can also grandfather in ID_ALLOW, ID_DENY, or ID_FILEATTRIB
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="((ID_FILE_[A-Z][_A-Z0-9]*))|((ID_ALLOW_[A-Z][_A-Z0-9]*))|((ID_DENY_[A-Z][_A-Z0-9]*))|((ID_FILEATTRIB_[A-Z][_A-Z0-9]*))" />
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="RuleTypeType">
        <xs:annotation>
            <xs:documentation>
                Enumeration to specify "type" (allow/deny) of a generic file rule
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="Match"/>
            <xs:enumeration value="Exclude"/>
            <xs:enumeration value="Attribute"/>
        </xs:restriction>
    </xs:simpleType>
    <!-- Signer ID Type -->
    <xs:simpleType name="SignerIdType">
        <xs:annotation>
            <xs:documentation>
                Signer ID should start with ID_SIGNER_
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="ID_SIGNER_[A-Z][_A-Z0-9]*" />
            <xs:minLength value="1"/>
        </xs:restriction>
    </xs:simpleType>
    <!-- FileRulesRef Element-->
    <xs:element name="FileRulesRef">
        <xs:annotation>
            <xs:documentation>
                FileRulesRef is a collection of FileRuleRef
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="FileRuleRef" minOccurs="1" maxOccurs="10000000" />
            </xs:sequence>
            <!-- Work around with XSD.exe http://connect.microsoft.com/VisualStudio/feedback/details/471297 -->
            <xs:attribute name="Workaround" type="xs:string" />
        </xs:complexType>
    </xs:element>
    <!-- File Rule ID Type -->
    <xs:simpleType name="RuleIdType">
        <xs:annotation>
            <xs:documentation>
                ID_ALLOW_... or ID_DENY_... or ID_FILE_...
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="((ID_ALLOW_[A-Z][_A-Z0-9]*))|((ID_DENY_[A-Z][_A-Z0-9]*))|((ID_FILE_[A-Z][_A-Z0-9]*))" />
            <xs:minLength value="1"/>
        </xs:restriction>
    </xs:simpleType>
    <!-- FileRuleRef Element -->
    <xs:element name="FileRuleRef">
        <xs:annotation>
            <xs:documentation>
                Used to reference an file rule through rule ID
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="RuleID" type="RuleIdType" use="optional" />
        </xs:complexType>
    </xs:element>
    <xs:element name="FileAttribRef">
        <xs:annotation>
            <xs:documentation>
                A FileAttribRef is used to reference a FILE_ATTRIB rule through ID
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="RuleID" type="FileAttribType" use="required" />
        </xs:complexType>
    </xs:element>
    <!-- ExceptDenyRule element-->
    <xs:element name="ExceptDenyRule">
        <xs:annotation>
            <xs:documentation>
                ExceptDenyRule rule is a deny rule type. It makes specific allow Signer conditional.
                If the allow Signer rule allows, but the exception condition met, then the result 
                is treated as allow signer rule did not match.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="DenyRuleID" type="DenyType" use="required" />
        </xs:complexType>
    </xs:element>
    <!-- ExceptAllowRule element-->
    <xs:element name="ExceptAllowRule">
        <xs:annotation>
            <xs:documentation>
                ExceptAllowRule rule is an allow rule type. It makes specific deny Signer conditional.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="AllowRuleID" type="AllowType" use="required" />
        </xs:complexType>
    </xs:element>
    <!-- EKUs Element-->
    <xs:element name="EKUs">
        <xs:annotation>
            <xs:documentation>
                Collection of EKUs.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice minOccurs="1" maxOccurs="255">
                <xs:element ref="EKU"  minOccurs="0" maxOccurs="255" />
            </xs:choice>
        </xs:complexType>
    </xs:element>
    <!-- Define one EKU -->
    <xs:element name="EKU">
        <xs:annotation>
            <xs:documentation>
                Define an EKU
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="ID" type="EKUType" use="required" />
            <xs:attribute name="Value" type="xs:hexBinary" use="required" />
            <xs:attribute name="FriendlyName" type="xs:string" use="optional" />
        </xs:complexType>
    </xs:element>
    <!-- Define File Rule Collection-->
    <xs:element name="FileRules">
        <xs:annotation>
            <xs:documentation>
                Collection of File Rules.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice minOccurs="1" maxOccurs="10000000">
                <xs:element ref="Allow"  minOccurs="0" maxOccurs="10000000" />
                <xs:element ref="Deny"  minOccurs="0" maxOccurs="10000000" />
                <xs:element ref="FileAttrib"  minOccurs="0" maxOccurs="10000000" />
                <xs:element ref="FileRule"  minOccurs="0" maxOccurs="10000000" />
            </xs:choice>
        </xs:complexType>
    </xs:element>
    <!-- Allow element -->
    <xs:element name="Allow">
        <xs:annotation>
            <xs:documentation>
                Define a file allow rule
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="ID" type="AllowType" use="required" />
            <xs:attribute name="FriendlyName" type="xs:string" use="optional" />
            <xs:attribute name="FileName" type="xs:string" use="optional" />
            <xs:attribute name="InternalName" type="xs:string" use="optional" />
            <xs:attribute name="FileDescription" type="xs:string" use="optional" />
            <xs:attribute name="ProductName" type="xs:string" use="optional" />
            <xs:attribute name="PackageFamilyName" type="xs:string" use="optional" />
            <xs:attribute name="PackageVersion" type="VersionExType" use="optional" />
            <xs:attribute name="MinimumFileVersion" type="VersionExType" use="optional" />
            <xs:attribute name="MaximumFileVersion" type="VersionExType" use="optional" />
            <xs:attribute name="Hash" type="xs:hexBinary" use="optional" />
            <xs:attribute name="AppIDs" type="AppIdType" use="optional" />
            <xs:attribute name="FilePath" type="xs:string" use="optional" />
        </xs:complexType>
    </xs:element>
    <!-- Deny File Rule element-->
    <xs:element name="Deny">
        <xs:annotation>
            <xs:documentation>
                Define a File deny rule
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="ID" type="DenyType" use="required" />
            <xs:attribute name="FriendlyName" type="xs:string" use="optional" />
            <xs:attribute name="FileName" type="xs:string" use="optional" />
            <xs:attribute name="InternalName" type="xs:string" use="optional" />
            <xs:attribute name="FileDescription" type="xs:string" use="optional" />
            <xs:attribute name="ProductName" type="xs:string" use="optional" />
            <xs:attribute name="PackageFamilyName" type="xs:string" use="optional" />
            <xs:attribute name="PackageVersion" type="VersionExType" use="optional" />
            <xs:attribute name="MinimumFileVersion" type="VersionExType" use="optional" />
            <xs:attribute name="MaximumFileVersion" type="VersionExType" use="optional" />
            <xs:attribute name="Hash" type="xs:hexBinary" use="optional" />
            <xs:attribute name="AppIDs" type="AppIdType" use="optional" />
            <xs:attribute name="FilePath" type="xs:string" use="optional" />
        </xs:complexType>
    </xs:element>
    <xs:element name="FileAttrib">
        <xs:annotation>
            <xs:documentation>
                Define a generic file attribute rule than can be combined with Signers
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="ID" type="FileAttribType" use="required" />
            <xs:attribute name="FriendlyName" type="xs:string" use="optional" />
            <xs:attribute name="FileName" type="xs:string" use="optional" />
            <xs:attribute name="InternalName" type="xs:string" use="optional" />
            <xs:attribute name="FileDescription" type="xs:string" use="optional" />
            <xs:attribute name="ProductName" type="xs:string" use="optional" />
            <xs:attribute name="PackageFamilyName" type="xs:string" use="optional" />
            <xs:attribute name="PackageVersion" type="VersionExType" use="optional" />
            <xs:attribute name="MinimumFileVersion" type="VersionExType" use="optional" />
            <xs:attribute name="MaximumFileVersion" type="VersionExType" use="optional" />
            <xs:attribute name="Hash" type="xs:hexBinary" use="optional" />
            <xs:attribute name="AppIDs" type="AppIdType" use="optional" />
            <xs:attribute name="FilePath" type="xs:string" use="optional" />
        </xs:complexType>
    </xs:element>
    <!-- Generic File Rule element-->
    <xs:element name="FileRule">
        <xs:annotation>
            <xs:documentation>
                Define a generic file rule
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="ID" type="FileRuleType" use="required" />
            <xs:attribute name="FriendlyName" type="xs:string" use="optional" />
            <xs:attribute name="FileName" type="xs:string" use="optional" />
            <xs:attribute name="InternalName" type="xs:string" use="optional" />
            <xs:attribute name="FileDescription" type="xs:string" use="optional" />
            <xs:attribute name="ProductName" type="xs:string" use="optional" />
            <xs:attribute name="PackageFamilyName" type="xs:string" use="optional" />
            <xs:attribute name="PackageVersion" type="VersionExType" use="optional" />
            <xs:attribute name="MinimumFileVersion" type="VersionExType" use="optional" />
            <xs:attribute name="MaximumFileVersion" type="VersionExType" use="optional" />
            <xs:attribute name="Hash" type="xs:hexBinary" use="optional" />
            <xs:attribute name="AppIDs" type="AppIdType" use="optional" />
            <xs:attribute name="FilePath" type="xs:string" use="optional" />
            <xs:attribute name="Type" type="RuleTypeType" use="required" />
        </xs:complexType>
    </xs:element>
    <!-- Allowed Signers element-->
    <xs:element name="AllowedSigners">
        <xs:annotation>
            <xs:documentation>
                Collection of AllowedSigner
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="AllowedSigner" minOccurs="1" maxOccurs="10000000" />
            </xs:sequence>
            <!-- Work around with XSD.exe http://connect.microsoft.com/VisualStudio/feedback/details/471297 -->
            <xs:attribute name="Workaround" type="xs:string" />
        </xs:complexType>
    </xs:element>
    <!-- Denied Signers element-->
    <xs:element name="DeniedSigners">
        <xs:annotation>
            <xs:documentation>
                Collection of DeniedSigner
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="DeniedSigner" minOccurs="1" maxOccurs="10000000" />
            </xs:sequence>
            <!-- Work around with XSD.exe http://connect.microsoft.com/VisualStudio/feedback/details/471297 -->
            <xs:attribute name="Workaround" type="xs:string" />
        </xs:complexType>
    </xs:element>
    <!-- Allowed Signer element-->
    <xs:element name="AllowedSigner">
        <xs:annotation>
            <xs:documentation>
                An AllowedSigner defines a signer with condition (with exceptions)
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence minOccurs="1" maxOccurs="1">
                <xs:element ref="ExceptDenyRule" minOccurs="0" maxOccurs="10000000"/>
            </xs:sequence>
            <xs:attribute name="SignerId" type="SignerIdType" use ="required" />
        </xs:complexType>
    </xs:element>
    <!-- Denied Signer element-->
    <xs:element name="DeniedSigner">
        <xs:annotation>
            <xs:documentation>
                An DeniedSgner defines a deny rule
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence minOccurs="1" maxOccurs="1">
                <xs:element ref="ExceptAllowRule" minOccurs="0" maxOccurs="10000000"/>
            </xs:sequence>
            <xs:attribute name="SignerId" type="SignerIdType" use ="required" />
        </xs:complexType>
    </xs:element>
    <!-- Update Policy Signer-->
    <xs:element name="UpdatePolicySigner">
        <xs:annotation>
            <xs:documentation>
                defines a signer for System Integrity Policy Updating
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="SignerId" type="SignerIdType" use ="required" />
        </xs:complexType>
    </xs:element>
    <xs:element name="UpdatePolicySigners">
        <xs:annotation>
            <xs:documentation>
              Collection of UpdatePolicySigner.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice minOccurs="1" maxOccurs="10000000">
                <xs:element ref="UpdatePolicySigner"  minOccurs="0" maxOccurs="10000000" />
            </xs:choice>
        </xs:complexType>
    </xs:element>
  <!-- Supplemental Policy Signer-->
  <xs:element name="SupplementalPolicySigner">
    <xs:annotation>
      <xs:documentation>
        defines a signer for Supplemental policies.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="SignerId" type="SignerIdType" use ="required" />
    </xs:complexType>
  </xs:element>
  <xs:element name="SupplementalPolicySigners">
    <xs:annotation>
      <xs:documentation>
        Collection of SupplementalPolicySigner.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="1" maxOccurs="10000000">
        <xs:element ref="SupplementalPolicySigner"  minOccurs="0" maxOccurs="10000000" />
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <!-- Signers for CI -->
  <xs:element name="CiSigner">
    <xs:annotation>
      <xs:documentation>
        defines a signer that CI will trust for CI signing levels.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="SignerId" type="SignerIdType" use ="required" />
    </xs:complexType>
  </xs:element>
  <xs:element name="CiSigners">
    <xs:annotation>
      <xs:documentation>
        Collection of CiSigner.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="1" maxOccurs="10000000">
        <xs:element ref="CiSigner"  minOccurs="0" maxOccurs="10000000" />
      </xs:choice>
    </xs:complexType>
  </xs:element>
    <xs:element name="Signers">
        <xs:annotation>
            <xs:documentation>
                Collection of signers.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice minOccurs="1" maxOccurs="10000000">
                <xs:element ref="Signer"  minOccurs="0" maxOccurs="10000000" />
            </xs:choice>
        </xs:complexType>
    </xs:element>
  <xs:element name="Signer">
        <xs:annotation>
            <xs:documentation>
                A Signer
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence minOccurs="1" maxOccurs="1">
                <xs:element ref="CertRoot" minOccurs="1" maxOccurs="1"/>
                <xs:element ref="CertEKU" minOccurs="0" maxOccurs="255"/>
                <xs:element ref="CertIssuer" minOccurs="0" maxOccurs="1"/>
                <xs:element ref="CertPublisher" minOccurs="0" maxOccurs="1"/>
                <xs:element ref="CertOemID" minOccurs="0" maxOccurs="1"/>
                <xs:element ref="FileAttribRef" minOccurs="0" maxOccurs="10000000"/>
              </xs:sequence>
            <xs:attribute name="Name" type="SignerNameType" use="required" />
            <xs:attribute name="ID" type="SignerIdType" use="required" />
            <xs:attribute name="SignTimeAfter" type="SignTimeType" use="optional" />
         </xs:complexType>
  </xs:element>
    <xs:element name="SigningScenarios">
        <xs:annotation>
            <xs:documentation>
                Collection of SigningScenarios
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice minOccurs="1" maxOccurs="255">
                <xs:element ref="SigningScenario"  minOccurs="0" maxOccurs="255" />
            </xs:choice>
        </xs:complexType>
    </xs:element>
    <xs:element name="SigningScenario">
        <xs:annotation>
            <xs:documentation>
                Define a Signing Scenario
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence minOccurs="1"  maxOccurs="1">
                <xs:element ref="ProductSigners" minOccurs="1" maxOccurs="1"/>
                <xs:element ref="TestSigners" minOccurs="0" maxOccurs="1"/>
                <xs:element ref="TestSigningSigners" minOccurs="0" maxOccurs="1"/>
                <xs:element ref="AppIDTags" minOccurs="0" maxOccurs="1"/>
            </xs:sequence>
            <xs:attribute name="ID" type="SigningScenarioIDType" use="required" />
            <xs:attribute name="FriendlyName" type="SignerNameType" use="optional" />
            <xs:attribute name="Value" type="xs:unsignedByte" use="required" />
            <xs:attribute name="InheritedScenarios" type="SigningScenarioIDsType" use="optional" />
            <xs:attribute name="MinimumHashAlgorithm" type="UShortType" use="optional" />
        </xs:complexType>
    </xs:element>
  <!-- The SI Policy definition-->
  <xs:element name="SiPolicy">
    <xs:complexType>
      <xs:all>
        <xs:element name="VersionEx" type="VersionExType" minOccurs="1" maxOccurs="1"/>
        <xs:element name="PolicyTypeID" type="GuidType" minOccurs="0" maxOccurs="1"/>
        <xs:element name="PlatformID" type="GuidType" minOccurs="1" maxOccurs="1"/>
        <xs:element name="PolicyID" type="GuidType" minOccurs="0" maxOccurs="1"/>
        <xs:element name="BasePolicyID" type="GuidType" minOccurs="0" maxOccurs="1"/>
        <xs:element name="Rules">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Rule" type="RuleType" minOccurs="0" maxOccurs="65535"/>            
            </xs:sequence>
          </xs:complexType>
        </xs:element>
         <xs:element ref="EKUs" minOccurs="0" maxOccurs="1"/>
         <xs:element ref="FileRules" minOccurs="0" maxOccurs="1"/>
         <xs:element ref="Signers" minOccurs="0" maxOccurs="1"/>
         <xs:element ref="SigningScenarios" minOccurs="0" maxOccurs="1"/>
         <xs:element ref="UpdatePolicySigners" minOccurs="0" maxOccurs="1"/>
         <xs:element ref="CiSigners" minOccurs="0" maxOccurs="1"/>
         <xs:element name="HvciOptions" type="DWordType" minOccurs="0" maxOccurs="1"/>
         <xs:element ref="Settings" minOccurs="0" maxOccurs="1"/>
         <xs:element ref="Macros" minOccurs="0" maxOccurs="1"/>
         <xs:element ref="SupplementalPolicySigners" minOccurs="0" maxOccurs="1"/>
      </xs:all>
      <xs:attribute name="FriendlyName" type="xs:string" use="optional" />
      <xs:attribute name="PolicyType" type="PolicyType" use="optional" />
    </xs:complexType>
  </xs:element>
</xs:schema>
RSDSZ
Microsoft.ConfigCI.Commands.pdb
VS_VERSION_INFO
VarFileInfo
Translation
StringFileInfo
000004b0
CompanyName
Microsoft Corporation
FileDescription
FileVersion
10.0.22621.1
InternalName
Microsoft.ConfigCI.Commands.dll
LegalCopyright
Copyright (c) Microsoft Corporation. All rights reserved.
OriginalFilename
Microsoft.ConfigCI.Commands.dll
ProductName
Microsoft (R) Windows (R) Operating System
ProductVersion
10.0.22621.1
Assembly Version
10.0.0.0
