!This program cannot be run in DOS mode.
.text
`.rsrc
@.reloc
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADP
'%C>}%
1K$S2Q
><}N?
T=Xmq
^2oW_t
<fon=
CrP$gs
tPd3v
AbortDescription
AcceptAndGetNextDescription>
AcceptLineDescription
AddLineDescription
BackwardCharDescription
BackwardDeleteCharDescription
BackwardDeleteLineDescription
BackwardDeleteWordDescription
BackwardKillLineDescription
BackwardKillWordDescription
BackwardReplaceCharDescription
BackwardWordDescription
BasicGrouping
BeginningOfHistoryDescription
BeginningOfLineDescription
CancelLineDescription
CantTranslateKey
CaptureScreenDescription
CharacterSearchBackwardDescription
CharacterSearchDescription
ChordWithTooManyKeys
ClearHistoryDescription
ClearKillRingDescription
ClearScreenDescription
CommandNotFoundError
CompleteDescription
CompletionGrouping
CopyDescription
CopyOrCancelLineDescription
CursorMovementGrouping
CustomActionDescription
CustomGrouping
CutDescription
DeleteCharDescription
DeleteCharOrExitDescription
DeleteEndOfWordDescription
DeleteLineDescription
DeleteLineToFirstCharDescription
DeleteToEndDescription
DeleteToEndOfWordDescription
DeleteWordDescription
DigitArgumentDescription
DisplayAllPossibilities
EmacsCtrlXDescription
EmacsMetaDescription
EndOfHistoryDescription
EndOfLineDescription
ExchangePointAndMarkDescription
ForwardCharDescription
ForwardDeleteLineDescription
ForwardSearchHistoryDescription
ForwardWordDescription
GotoBraceDescription
GotoColumnDescription
GotoFirstNonBlankOfLineDescription
HistoryFileErrorFinalMessage
HistoryFileErrorMessage
HistoryGrouping
HistorySearchBackwardDescription
HistorySearchForwardDescription
IgnoreDescription
InsertCharacterDescription
InsertLineAboveDescription
InsertLineBelowDescription
InvalidColorProperty
InvalidColorValue
InvalidModifier
InvalidSequence
InvertCaseDescription
InvokePromptDescription
KeyIsUnbound
KillLineDescription
KillRegionDescription
KillWordDescription
MenuCompleteDescription
MiscellaneousGrouping
MoveToEndOfLineDescription
NextHistoryDescription
NextLineDescription
NextWordDescription
NextWordEndDescription
NotInViMode
OopsAnErrorMessage1
OopsAnErrorMessage2
OopsCustomHandlerException
PasteAfterDescription
PasteBeforeDescription
PasteDescription
PossibleCompletionsDescription
PrependAndAcceptDescription
PreviousHistoryDescription
PreviousLineDescription
RedoDescription
RepeatLastCharSearchBackwardsDescription
RepeatLastCharSearchDescription
RepeatLastCommandDescription
RepeatLastSearchDescription
RepeatSearchBackwardDescription
RepeatSearchDescription
ReplaceCharDescription
ReplaceCharInPlaceDescription
ReplacementLengthInvalid
ReverseSearchHistoryDescription
RevertLineDescription
ScrollDisplayDownDescription
ScrollDisplayDownLineDescription
ScrollDisplayToCursorDescription
ScrollDisplayTopDescription
ScrollDisplayUpDescription
ScrollDisplayUpLineDescription
SearchBackwardCharDescription
SearchCharBackwardDescription
SearchCharBackwardWithBackoffDescription
SearchCharDescription
SearchCharWithBackoffDescription
SearchDescription
SearchForwardDescription
SearchGrouping
SelectAllDescription
SelectBackwardCharDescription
SelectBackwardWordDescription
SelectBackwardsLineDescription
SelectForwardCharDescription
SelectForwardWordDescription
SelectLineDescription
SelectNextWordDescription
SelectShellBackwardWordDescription
SelectShellForwardWordDescription
SelectShellNextWordDescription
SelectionGrouping
SelfInsertDescription
SetMarkDescription
ShellBackwardKillWordDescription
ShellBackwardWordDescription
ShellForwardWordDescription
ShellKillWordDescription
ShellNextWordDescription
ShowKeyBindingsDescription
StartOutOfRange
SwapCharactersDescription
TabCompleteNextDescription
TabCompletePreviousDescription
UndoAllDescription
UndoDescription
UnixWordRuboutDescription
UnrecognizedKey
ValidateAndAcceptLineDescription
ViAcceptLineDescription
ViAcceptLineOrExitDescription
ViAppendAtEndDescription
ViAppendLineDescription
ViBackwardDeleteGlobDescription
ViBackwardGlobDescription
ViBackwardReplaceGlobDescription
ViBackwardReplaceLineDescription
ViBackwardReplaceLineToFirstCharDescription
ViBackwardReplaceWordDescription
ViBackwardWordDescription
ViCommandModeDescription
ViDeleteBraceDescription
ViDeleteEndOfGlobDescription
ViDeleteGlobDescription
ViDeleteToBeforeCharBackwardDescription
ViDeleteToBeforeCharDescription
ViDeleteToCharBackwardDescription
ViDeleteToCharDescription
ViDigitArgumentInChordDescription
ViEditVisuallyDescription
ViEndOfGlobDescription
ViEndOfPreviousGlobDescription
ViExitDescription
ViGotoBraceDescription
ViInsertAtBeginingDescription
ViInsertAtEndDescription
ViInsertLineDescription
ViInsertModeDescription
ViInsertWithAppendDescription
ViInsertWithDeleteDescription
ViJoinLinesDescription
ViNextGlobDescription
ViNextWordDescription
ViReplaceBraceDescription
ViReplaceEndOfGlobDescription
ViReplaceEndOfWordDescription
ViReplaceGlobDescription
ViReplaceLineDescription
ViReplaceToBeforeCharBackwardDescription
ViReplaceToBeforeCharDescription
ViReplaceToCharBackwardDescription
ViReplaceToCharDescription
ViReplaceToEndDescription
ViReplaceUntilEscDescription
ViReplaceWordDescription
ViSearchHistoryBackwardDescription
ViTabCompleteNextDescription
ViTabCompletePreviousDescription
ViTransposeCharsDescription
ViYankBeginningOfLineDescription
ViYankEndOfGlobDescription
ViYankEndOfWordDescription
ViYankLeftDescription
ViYankLineDescription
ViYankNextGlobDescription
ViYankNextWordDescription
ViYankPercentDescription
ViYankPreviousGlobDescription
ViYankPreviousWordDescription
ViYankRightDescription
ViYankToEndOfLineDescription
ViYankToFirstCharDescription
WhatIsKeyDescription
YankDescription
YankLastArgDescription
YankNthArgDescription
YankPopDescription
<Abort the current operation, e.g. incremental history search
gAccept the current line and recall the next line from history after the current line finishes executing
NAccept the input or move to the next line if input is missing a closing token.
HMove the cursor to the next line without attempting to execute the input
"Move the cursor back one character
&Delete the character before the cursor
4Delete text from the cursor to the start of the line
%Delete the previous word in the line.
KMove the text from the cursor to the beginning of the line to the kill ring
[Move the text from the start of the current or previous word to the cursor to the kill ring
.Replaces the character in front of the cursor.
@Move the cursor to the beginning of the current or previous word
Basic editing functions
%Move to the first item in the history
,Move the cursor to the beginning of the line
9Abort editing the current line and re-evaluate the prompt
3Unable to translate '{0}' to virtual key code: {1}.
Allows you to select multiple lines from the console using Shift+UpArrow/DownArrow and copy the selected lines to clipboard by pressing Enter.
PRead a character and move the cursor to the previous occurence of that character
LRead a character and move the cursor to the next occurence of that character
 Chord can have at most two keys.
GRemove all items from the command line history (not PowerShell history)
#Remove all items from the kill ring
EClear the screen and redraw the current line at the top of the screen
Command '{0}' cannot be found.
Complete the input if there is a single completion, otherwise complete the input with common prefix for all completions.  Show possible completions if pressed a second time.
Completion functions
\Copy selected region to the system clipboard.  If no region is selected, copy the whole line
oEither copy selected text to the clipboard, or if no text is selected, cancel editing the line with CancelLine.
Cursor movement functions
User defined action
User defined functions
CDelete selected region placing deleted text in the system clipboard
%Delete the character under the cursor
QDelete the character under the cursor, or if the line is empty, exit the process.
YDelete to the end of the current word, as delimited by white space and common delimiters.
Deletes the current line.
6Deletes all of the line except for leading whitespace.
/Deletes from the cursor to the end of the line.
7Deletes from the cursor to the end of the current word.
Deletes the current word.
9Start or accumulate a numeric argument to other functions
)Display all {0} possibilities? (y or n) _
String is not used in the UI
String is not used in the UI
8Move to the last item (the current input) in the history
&Move the cursor to the end of the line
XMark the location of the cursor and move the cursor to the position of the previous mark
%Move the cursor forward one character
2Delete text from the cursor to the end of the line
$Search history forward interactively
jMove the cursor forward to the end of the current word, or if between words, to the end of the next word. 
Go to matching brace
*Moves the cursor to the prescribed column.
6Positions the cursor at the first non-blank character.
This error will not be reported again in this session. Consider using a different path with:
    Set-PSReadLineOption -HistorySavePath <Path>
Or not saving history with:
    Set-PSReadLineOption -HistorySaveStyle SaveNothing
0Error reading or writing history file '{0}': {1}
History functions
{Search for the previous item in the history that starts with the current input - like PreviousHistory if the input is empty
sSearch for the next item in the history that starts with the current input - like NextHistory if the input is empty
String is not used in the UI
;Delete the current character and insert the next character.
WInserts a new empty line above the current line without attempting to execute the input
WInserts a new empty line below the current line without attempting to execute the input
#'{0}' is not a valid color property
{'{0}' is not a valid color value.  It must be a ConsoleColor, ANSI escape sequence, or RGB value with optional leading '#'.
8Duplicate or invalid modifier token '{0}' for key '{1}'.
Invalid sequence '{0}'.
BInverts the case of the current character and advances the cursor.
OErases the current prompt and calls the prompt function to redisplay the prompt
Key is unbound
FMove the text from the cursor to the end of the input to the kill ring
-Kill the text between the cursor and the mark
UMove the text from the cursor to the end of the current or next word to the kill ring
Complete the input if there is a single completion, otherwise complete the input by selecting from a menu of possible completions.
Miscellaneous functions
Move to the end of the line.
3Replace the input with the next item in the history
AMove the cursor to the next line if the input has multiple lines.
5Move the cursor forward to the start of the next word
5Moves the cursor forward to the end of the next word.
CThe -ViMode parameter was used, but the current EditMode is not Vi.
Oops, something went wrong.  Please report this bug with the details below.
Report on GitHub: https://github.com/PowerShell/PSReadLine/issues/new
m### Environment
PSReadLine: {0}
PowerShell: {1}
OS: {2}
Last {3} Keys
### Exception
QAn exception occurred in custom key handler, see $error for more information: {0}
;Write the contents of the local clipboard after the cursor.
<Write the contents of the local clipboard before the cursor.
$Paste text from the system clipboard
;Display the possible completions without changing the input
DInserts the entered character at the beginning and accepts the line.
7Replace the input with the previous item in the history
EMove the cursor to the previous line if the input has multiple lines.
Redo an undo
DRepeat the last recorded character search in the opposite direction.
*Repeat the last recorded character search.
&Repeats the last modification command.
Repeats the last search.
6Repeat the last search, but in the opposite direction.
Repeat the last search.
DReplace the current character with the next set of characters typed.
6Replace the current character with only one character.
length is not valid
&Search history backwards interactively
QEquivalent to undo all edits (clears the line except lines imported from history)
"Scroll the display down one screen
 Scroll the display down one line
 Scroll the display to the cursor
Scroll the display to the top
 Scroll the display up one screen
Scroll the display up one line
/Searches backward for the prescribed character.
;Move to the previous occurrence of the specified character.
ZMove to the previous occurrence of the specified character and then forward one character.
7Move to the next occurrence of the specified character.
RMove to he next occurrence of the specified character and then back one character.
BSearches for the prescribed character in the prescribed direction.
CPrompts for a search string and initiates a search upon AcceptLine.
Search functions
?Select the entire line. Moves the cursor to the end of the line
>Adjust the current selection to include the previous character
9Adjust the current selection to include the previous word
NAdjust the current selection to include from the cursor to the end of the line
:Adjust the current selection to include the next character
GAdjust the current selection to include the next word using ForwardWord
PAdjust the current selection to include from the cursor to the start of the line
5Adjust the current selection to include the next word
QAdjust the current selection to include the previous word using ShellBackwardWord
LAdjust the current selection to include the next word using ShellForwardWord
IAdjust the current selection to include the next word using ShellNextWord
Selection functions
Insert the key typed
Mark the location of the cursor
\Move the text from the cursor to the start of the current or previous token to the kill ring
VMove the cursor to the beginning of the current or previous token or start of the line
AMove the cursor to the beginning of the next token or end of line
VMove the text from the cursor to the end of the current or next token to the kill ring
/Move the cursor to the end of the current token
Show all key bindings
I'start' cannot be less than zero or greater than the length of the buffer
8Swap the current character with the character before it.
,Complete the input using the next completion
0Complete the input using the previous completion
"Undoes all commands for this line.
Undo a previous edit
pMove the text from the cursor to the start of the current or previous whitespace delimited word to the kill ring
wUnrecognized key '{0}'. Please use a character literal or a well-known key name from the System.ConsoleKey enumeration.
Accept the input or move to the next line if input is missing a closing token.
If there are other parse errors, unresolved commands, or incorrect parameters, show the error and continue editing.
/Accept the line and switch to Vi's insert mode.
?If the line is empty, exit, otherwise accept the line as input.
NSwitches to insert mode after positioning the cursor past the end of the line.
<Appends a new multi-line edit mode line to the current line.
SDelete backward to the beginning of the previous word, as delimited by white space.
SMove the cursor to the beginning of the previous word, as delimited by white space.
jDelete backward to the beginning of the previous word, as delimited by white space, and enter insert mode.
IReplaces the line left of the cursor and all of the way to the beginning.
\Replaces the line left of the cursor and all but one character to the beginning of the line.
Replace the previous word.
Delete backward to the beginning of the previous word, as delimited by white space and common delimiters, and enter insert mode.
Switch to VI's command mode.
ADeletes all characters between the cursor and the matching brace.
<Delete to the end of this word, as delimited by white space.
5Delete the current word, as delimited by white space.
Deletes until given character.
Deletes until given character.
(Deletes backwards until given character.
Deletes until given character.
KHandles the processing of a number argument after the first key of a chord.
kInvokes the console compatible editor specified by $env:VISUAL or $env:$EDITOR on the current command line.
BMove the cursor to the end this word, as delimited by white space.
RMoves to the end of the previous word, using only white space as a word delimiter.
Exit the shell.
&Move the cursor to the matching brace.
JMoves the cursor to the beginning of the line and switches to insert mode.
DMoves the cursor to the end of the line and switches to insert mode.
EInserts a new multi-line edit mode line in front of the current line.
Switches to insert mode.
>Switch to insert mode, appending at the current line position.
:Deletes the current character and switches to insert mode.
:Joins the current multi-line edit mode line with the next.
OMove the cursor to the beginning of the next word, as delimited by white space.
eMove the cursor to the beginning of the next word, as delimited by white space and common delimiters.
UReplace all characters between the current brace character and it's matching partner.
RDelete to the end of the word, as delimited by white space, and enter insert mode.
hDelete to the end of the word, as delimited by white space and common delimiters, and enter insert mode.
]Delete to the beginning of the next word, as delimited by white space, and enter insert mode.
>Repace the current line with the next set of characters typed.
Replaces until given character.
Replaces until given character.
Replaces until given character.
Deletes until given character.
GReplace the characters from the cursor position to the end of the line.
QReplace the current character until an escape is entered or the line is accepted.
Replace the current word.
,Starts a new search backward in the history.
>Invokes TabCompleteNext after doing some vi-specific clean up.
BInvokes TabCompletePrevious after doing some vi-specific clean up.
ETransposes the current character with the next character in the line.
@Place the characters before the cursor into the local clipboard.
pPlace the characters from the cursor to the end of the next white space delimited word into the local clipboard.
Place the characters from the cursor to the end of the next word, as delimited by white space and common delimiters, into the local clipboard.
GPlace the character to the left of the cursor into the local clipboard.
BPlace all characters in the current line into the local clipboard.
sPlace all characters from the cursor to the end of the word, as delimited by white space, into the local clipboard.
Place all characters from the cursor to the end of the word, as delimited by white space and common delimiters, into the local clipboard.
XPlace all characters between the matching brace and the cursor into the local clipboard.
Place all characters from before the cursor to the beginning of the previous word, as delimited by white space, into the local clipboard.
Place all characters from before the cursor to the beginning of the previous word, as delimited by white space and common delimiters, into the local clipboard.
;Place the character at the cursor into the local clipboard.
FPlace all characters at and after the cursor into the local clipboard.
iPlace all characters before the cursor and to the 1st non-white space character into the local clipboard.
/Show the key binding for the next chord entered
>Copy the text from the current kill ring position to the input
/Copy the text of the last argument to the input
0Copy the text of the first argument to the input
QReplace the previously yanked text with the text from the next kill ring position
v4.0.30319
#Strings
#GUID
#Blob
<Module>
Microsoft.PowerShell.PSReadLine.resources
Microsoft.Powershell.PSReadLine.PSReadLineResources.en.resources
Microsoft.PowerShell.PSReadLine.resources.dll
_CorDllMain
mscoree.dll
VS_VERSION_INFO
VarFileInfo
Translation
StringFileInfo
040904b0
CompanyName
Microsoft Corporation
FileDescription
FileVersion
10.0.22621.1
InternalName
Microsoft.PowerShell.PSReadLine.resources.dll
LegalCopyright
Copyright (c) Microsoft Corporation. All rights reserved.
OriginalFilename
Microsoft.PowerShell.PSReadLine.resources.dll
ProductName
Microsoft (R) Windows (R) Operating System
ProductVersion
10.0.22621.1
