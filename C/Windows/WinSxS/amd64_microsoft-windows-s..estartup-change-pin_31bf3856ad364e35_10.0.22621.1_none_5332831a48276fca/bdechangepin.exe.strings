!This program cannot be run in DOS mode.
.text
`.rdata
@.data
.pdata
@.rsrc
@.reloc
\$ WH
\$ WH
H VWAVH
0A^_^
D$0E3
L$XH3
L$XH3
USVWH
L$(E3
L$(E3
VWAVH
0A^_^
@USVWH
X_^[]
@USWH
H!]8H
WATAUAVAWH
A_A^A]A\_
\$ UVWH
UATAUAVAWH
Hc\$dI
|$(E3
D$0E3
A_A^A]A\]
L$ SVWAVH
(A^_^[
{ AVH
L$(E3
qhUp`
D$(E3
t$ E3
WAVAWH
D$XH+
L$@E3
H9|$@t
A_A^_
WAVAWH
D$`H+
L$@E3
H9|$@t
A_A^_
VWAVH
H9l$@u
 A^_^
p AWH
fD98t
fD98t
q1[Rr'
WAVAWH
0A_A^_
|$PIc
|$PIc
\$PIc
x AVH
T$@E3
x AVH
T$@E3
|$ UAVAWH
A_A^]
UVWATAUAVAWH
fD9(t
DD$`D
 A_A^A]A\_^]
qbVRc
pbVRc
VWAVH
UVWATAUAVAWH
fD9?t1H
fD99t
fD9<Au
AfD98t
t(fD9
`A_A^A]A\_^]
UWATAVAWH
D$ E3
A_A^A\_]
L$PL+
D$ E3
T$@E3
p2^8k
T$@E3
qIU6E7U
q2^8k
pIU6E7U
q0R^G'
p AWH
D$$I;
u.L93t
p0R^G'
D$HE3
q0R^G'
u*9Q<|%
HcA<H
f9H\u
LcA<E3
HcQ<H
\$ UH
 H3E H3E
qjV6"
qiU<y
q;U<,
qiR^#
qJ]<8
x AVH
PassphraseEdit
CDUIHost
errortextpanel
statustext
statustexterroricon
asciiwarningicon
pinerrortextpanel
pinstatustext
pinstatustexterroricon
pinwarningicon
existingpinedit
newpinedit
newpinconfirmedit
existingpassphraseedit
newpassphraseedit
newpassphraseconfirmedit
confirmationtextpanel
changepinbutton
cancelbutton
closebutton
passphraseconfirmationtextpanel
changepassphrasebutton
showpassphrasebox
pinchangepanel
passphrasechangepanel
managebitlockerlink
managebitlockerpassphraselink
passphrasehelplink
pinconstraintstext
passphraseconstraintstext
changepassphrasedialogtitle
changepassphrasenonosdialogtitle
%s %c
elevationicon
Local\BitLockerChangePinTaskDialogMutex
\\.\x:
627551
BitLockerWizardElev.exe
BitLockerWizard.exe
305.1i
ncalrpc
http://go.microsoft.com/fwlink/?LinkID=
IdentificationField
FVEWIZ_INIT|
Local\
EncryptionMethod
EncryptionMethodNoDiffuser
Enabled
UseAdvancedStartup
EnableBDEWithNoTPM
UseTPM
UseTPMPIN
UseTPMKey
UseTPMKeyPin
MinimumPIN
UseEnhancedPin
RDVDenyCrossOrg
OSRecovery
FDVRecovery
RDVRecovery
OSRecoveryPassword
FDVRecoveryPassword
RDVRecoveryPassword
OSRecoveryKey
FDVRecoveryKey
RDVRecoveryKey
OSManageDRA
FDVManageDRA
RDVManageDRA
OSActiveDirectoryBackup
FDVActiveDirectoryBackup
RDVActiveDirectoryBackup
OSRequireActiveDirectoryBackup
FDVRequireActiveDirectoryBackup
RDVRequireActiveDirectoryBackup
OSActiveDirectoryInfoToStore
FDVActiveDirectoryInfoToStore
RDVActiveDirectoryInfoToStore
OSHideRecoveryPage
FDVHideRecoveryPage
RDVHideRecoveryPage
PreferCspUsage
SelfSignedCertificates
CertChainErrorStatusMask
OSAllowUserCert
FDVAllowUserCert
FDVEnforceUserCert
OSEnforceUserCert
RDVAllowUserCert
RDVEnforceUserCert
FDVPassphrase
RDVPassphrase
FDVEnforcePassphrase
RDVEnforcePassphrase
FDVDenyWriteAccess
RDVDenyWriteAccess
RDVConfigureBDE
RDVAllowBDE
RDVDisableBDE
FDVNoBitLockerToGoReader
RDVNoBitLockerToGoReader
RecoveryKeyMessageSource
EncryptionMethodWithXtsOs
EncryptionMethodWithXtsFdv
EncryptionMethodWithXtsRdv
IdentificationFieldString
SecondaryIdentificationField
DefaultRecoveryFolderPath
FDVDiscoveryVolumeType
RDVDiscoveryVolumeType
RecoveryKeyMessage
RecoveryKeyURL
OSAllowSoftwareEncryptionFailover
OSPassphraseComplexity
FDVHardwareEncryption
FDVEncryptionType
OSBcdAdditionalExcludedSettings
RDVHardwareEncryption
RDVAllowSoftwareEncryptionFailover
OSAllowSecureBootForIntegrity
FDVAllowSoftwareEncryptionFailover
OSHardwareEncryption
FDVRestrictHardwareEncryptionAlgorithms
DisableExternalDMAUnderLock
RDVRestrictHardwareEncryptionAlgorithms
OSUseEnhancedBcdProfile
FDVPassphraseLength
RDVAllowedHardwareEncryptionAlgorithms
OSAllowedHardwareEncryptionAlgorithms
RDVPassphraseComplexity
OSEncryptionType
OSPassphraseASCIIOnly
FDVAllowedHardwareEncryptionAlgorithms
OSPassphrase
OSEnablePrebootInputProtectorsOnSlates
DisallowStandardUserPINReset
FDVPassphraseComplexity
RDVEncryptionType
OSEnablePreBootPinExceptionOnDECapableDevice
OSBcdAdditionalSecurityCriticalSettings
RDVPassphraseLength
TpmAutoReseal
OSPassphraseLength
OSRestrictHardwareEncryptionAlgorithms
\Windows\System32\Config\SOFTWARE
\Windows\System32\Config\SYSTEM
BitLockerSystemRoot
Software
System
Policies\Microsoft\FVE
BitLockerSoftwareRoot
Policies\Microsoft\FVE\OSPlatformValidation_BIOS
Policies\Microsoft\FVE\OSPlatformValidation_UEFI
CurrentControlSet\Policies\Microsoft\FVE
Policies\Microsoft\FVE\PlatformValidation
ntdll.dll
MicrosoftTelemetryAssertTriggeredUM
Microsoft.Windows.Security.BitLocker.CSP.State.Update
Microsoft.Windows.Security.BitLocker.EncryptionDelay
Microsoft.Windows.Security.BitLocker.BcdUpdate
RSDSL(>
bdechangepin.pdb
.text$mn
.text$mn$00
.text$x
.rdata$brc
.idata$5
.00cfg
.CRT$XCA
.CRT$XCAA
.CRT$XCZ
.CRT$XIA
.CRT$XIAA
.CRT$XIY
.CRT$XIZ
.gehcont
.gfids
.rdata
.rdata$r
.rdata$voltmd
.rdata$zETW2
.rdata$zzzdbg
.xdata
.edata
.idata$2
.idata$3
.idata$4
.idata$6
.data$rs$brc
.data
.pdata
.rsrc$01
.rsrc$02
 !"#$%&'
bdechangepin.exe
??0VolumeFveStatus@@IEAA@XZ
??0VolumeFveStatus@@QEAA@K_KJW4_FVE_WIPING_STATE@@@Z
??4BuiVolume@@QEAAAEAV0@AEBV0@@Z
??4VolumeFveStatus@@QEAAAEAV0@$$QEAV0@@Z
??4VolumeFveStatus@@QEAAAEAV0@AEBV0@@Z
?FailedDryRun@VolumeFveStatus@@QEBA_NXZ
?GetExtendedFlags@VolumeFveStatus@@QEBA_KXZ
?GetLastConvertStatus@VolumeFveStatus@@QEBAJXZ
?GetStatusFlags@VolumeFveStatus@@QEBAKXZ
?HasExternalKey@VolumeFveStatus@@QEBA_NXZ
?HasPBKDF2RecoveryPassword@VolumeFveStatus@@QEBA_NXZ
?HasPassphraseProtector@VolumeFveStatus@@QEBA_NXZ
?HasPinProtector@VolumeFveStatus@@QEBA_NXZ
?HasRecoveryData@VolumeFveStatus@@QEBA_NXZ
?HasRecoveryPassword@VolumeFveStatus@@QEBA_NXZ
?HasSmartCardProtector@VolumeFveStatus@@QEBA_NXZ
?HasStartupKeyProtector@VolumeFveStatus@@QEBA_NXZ
?HasTpmProtector@VolumeFveStatus@@QEBA_NXZ
?IsConverting@VolumeFveStatus@@QEBA_NXZ
?IsCsvMetadataVolume@VolumeFveStatus@@QEBA_NXZ
?IsDEAutoProvisioned@VolumeFveStatus@@QEBA_NXZ
?IsDecrypted@VolumeFveStatus@@QEBA_NXZ
?IsDecrypting@VolumeFveStatus@@QEBA_NXZ
?IsDisabled@VolumeFveStatus@@QEBA_NXZ
?IsEDriveVolume@VolumeFveStatus@@QEBA_NXZ
?IsEncrypted@VolumeFveStatus@@QEBA_NXZ
?IsEncrypting@VolumeFveStatus@@QEBA_NXZ
?IsLocked@VolumeFveStatus@@QEBA_NXZ
?IsOn@VolumeFveStatus@@QEBA_NXZ
?IsOsCriticalVolume@VolumeFveStatus@@QEBA_NXZ
?IsOsVolume@VolumeFveStatus@@QEBA_NXZ
?IsPartiallyConverted@VolumeFveStatus@@QEBA_NXZ
?IsPaused@VolumeFveStatus@@QEBA_NXZ
?IsPreProvisioned@VolumeFveStatus@@QEBA_NXZ
?IsRoamingDevice@VolumeFveStatus@@QEBA_NXZ
?IsSecure@VolumeFveStatus@@QEBA_NXZ
?IsUnknownFveVersion@VolumeFveStatus@@QEBA_NXZ
?IsWiping@VolumeFveStatus@@QEBA_NXZ
?NO_DRIVE_LETTER@BuiVolume@@2IB
?NeedsRestart@VolumeFveStatus@@QEBA_NXZ
FormatMessageW
GetLastError
LocalFree
WaitForSingleObject
CloseHandle
CreateMutexW
GetCommandLineW
GetModuleHandleW
GetProcessHeap
HeapAlloc
HeapFree
KERNEL32.dll
GetActiveWindow
NotifyWinEvent
PostMessageW
SendMessageW
InvalidateRect
FindWindowW
SetForegroundWindow
LoadImageW
GetSystemMetrics
USER32.dll
_vsnwprintf
iswalpha
towupper
_XcptFilter
_amsg_exit
__wgetmainargs
__set_app_type
_exit
_cexit
__setusermatherr
_initterm
__C_specific_handler
_wcmdln
_fmode
_commode
msvcrt.dll
?terminate@@YAXXZ
ShellExecuteW
CommandLineToArgvW
SHELL32.dll
CoCreateInstance
CoInitialize
CoUninitialize
ole32.dll
RtlCaptureContext
RtlLookupFunctionEntry
RtlVirtualUnwind
ntdll.dll
COMCTL32.dll
?ContentProp@Element@DirectUI@@SAPEBUPropertyInfo@2@XZ
?OnPropertyChanged@Edit@DirectUI@@UEAAXPEBUPropertyInfo@2@HPEAVValue@2@1@Z
??0HWNDElement@DirectUI@@QEAA@XZ
??1HWNDElement@DirectUI@@UEAA@XZ
?Destroy@DUIXmlParser@DirectUI@@QEAAXXZ
?FindDescendent@Element@DirectUI@@QEAAPEAV12@G@Z
StrToID
?Initialize@HWNDElement@DirectUI@@QEAAJPEAUHWND__@@_NIPEAVElement@2@PEAK@Z
?Destroy@Element@DirectUI@@QEAAJ_N@Z
?Create@DUIXmlParser@DirectUI@@SAJPEAPEAV12@P6APEAVValue@2@PEBGPEAX@Z2P6AX11H2@Z2@Z
?SetXMLFromResource@DUIXmlParser@DirectUI@@QEAAJIPEAUHINSTANCE__@@0@Z
?CreateElement@DUIXmlParser@DirectUI@@QEAAJPEBGPEAVElement@2@1PEAKPEAPEAV32@@Z
?SetLayoutPos@Element@DirectUI@@QEAAJH@Z
?SetVisible@Element@DirectUI@@QEAAJ_N@Z
?SetContentString@Element@DirectUI@@QEAAJPEBG@Z
?GetEncodedContentString@Element@DirectUI@@QEAAJPEAG_K@Z
?SetKeyFocus@Element@DirectUI@@UEAAXXZ
?SetEnabled@Element@DirectUI@@QEAAJ_N@Z
?GetHWND@HWNDHost@DirectUI@@UEAAPEAUHWND__@@XZ
?Click@Button@DirectUI@@SA?AVUID@@XZ
?OnEvent@HWNDElement@DirectUI@@UEAAXPEAUEvent@2@@Z
?OnInput@HWNDElement@DirectUI@@UEAAXPEAUInputEvent@2@@Z
?GetHWND@HWNDElement@DirectUI@@UEAAPEAUHWND__@@XZ
?SetKeyFocus@HWNDHost@DirectUI@@UEAAXXZ
InitProcessPriv
InitThread
?Create@NativeHWNDHost@DirectUI@@SAJPEBGPEAUHWND__@@PEAUHICON__@@HHHHHHIPEAPEAV12@@Z
?EndDefer@Element@DirectUI@@QEAAXK@Z
?Host@NativeHWNDHost@DirectUI@@QEAAXPEAVElement@2@@Z
?ShowWindow@NativeHWNDHost@DirectUI@@QEAAXH@Z
StartMessagePump
UnInitThread
UnInitProcessPriv
?Register@HWNDElement@DirectUI@@SAJXZ
??0CritSecLock@DirectUI@@QEAA@PEAU_RTL_CRITICAL_SECTION@@@Z
?GetFactoryLock@Element@DirectUI@@SAPEAU_RTL_CRITICAL_SECTION@@XZ
??1CritSecLock@DirectUI@@QEAA@XZ
?ClassExist@ClassInfoBase@DirectUI@@SA_NPEAPEAUIClassInfo@2@PEBQEBUPropertyInfo@2@IPEAU32@PEAUHINSTANCE__@@PEBG_N@Z
?Register@ClassInfoBase@DirectUI@@QEAAJXZ
?Register@Edit@DirectUI@@SAJXZ
?Initialize@ClassInfoBase@DirectUI@@QEAAJPEAUHINSTANCE__@@PEBG_NPEBQEBUPropertyInfo@2@I@Z
?Initialize@Edit@DirectUI@@QEAAJIPEAVElement@2@PEAK@Z
?GetClassInfoPtr@HWNDElement@DirectUI@@SAPEAUIClassInfo@2@XZ
?GetClassInfoPtr@Edit@DirectUI@@SAPEAUIClassInfo@2@XZ
??0ClassInfoBase@DirectUI@@QEAA@XZ
??1ClassInfoBase@DirectUI@@UEAA@XZ
?CreateHWND@Edit@DirectUI@@MEAAPEAUHWND__@@PEAU3@_N@Z
?EraseBkgnd@HWNDHost@DirectUI@@MEAA_NPEAUHDC__@@PEA_J@Z
?CreateHWND@Edit@DirectUI@@MEAAPEAUHWND__@@PEAU3@@Z
?SetWindowDirection@HWNDHost@DirectUI@@UEAAXPEAUHWND__@@@Z
?OnAdjustWindowSize@HWNDHost@DirectUI@@UEAAHHHI@Z
?OnWindowStyleChanged@HWNDHost@DirectUI@@UEAAX_KPEBUtagSTYLESTRUCT@@@Z
?OnCtrlThemeChanged@HWNDHost@DirectUI@@UEAA_NI_K_JPEA_J@Z
?OnSinkThemeChanged@HWNDHost@DirectUI@@UEAA_NI_K_JPEA_J@Z
?OnSysChar@HWNDHost@DirectUI@@UEAA_NG@Z
?OnMessage@HWNDHost@DirectUI@@UEAA_NI_K_JPEA_J@Z
?OnNotify@Edit@DirectUI@@UEAA_NI_K_JPEA_J@Z
?GetUiaFocusDelegate@Element@DirectUI@@UEAAPEAV12@XZ
?HandleUiaEventListener@Element@DirectUI@@UEAAXPEAUEvent@2@@Z
?HandleUiaPropertyChangingListener@Element@DirectUI@@UEAAXPEBUPropertyInfo@2@@Z
?HandleUiaPropertyListener@Element@DirectUI@@UEAAXPEBUPropertyInfo@2@HPEAVValue@2@1@Z
?HandleUiaDestroyListener@Element@DirectUI@@UEAAXXZ
?GetElementProviderImpl@Element@DirectUI@@UEAAJPEAVInvokeHelper@2@PEAPEAVElementProvider@2@@Z
?GetUIAElementProvider@Element@DirectUI@@UEAAJAEBU_GUID@@PEAPEAX@Z
?DefaultAction@Element@DirectUI@@UEAAJXZ
?GetAccessibleImpl@HWNDHost@DirectUI@@UEAAJPEAPEAUIAccessible@@@Z
?GetKeyFocused@HWNDHost@DirectUI@@UEAA_NXZ
?RemoveTooltip@Element@DirectUI@@MEAAXPEAV12@@Z
?ActivateTooltip@Element@DirectUI@@MEAAXPEAV12@K@Z
?UpdateTooltip@Element@DirectUI@@MEAAXPEAV12@@Z
?OnUnHosted@HWNDHost@DirectUI@@MEAAXPEAVElement@2@@Z
?OnHosted@HWNDHost@DirectUI@@MEAAXPEAVElement@2@@Z
?_SelfLayoutUpdateDesiredSize@Element@DirectUI@@MEAA?AUtagSIZE@@HHPEAVSurface@2@@Z
?_SelfLayoutDoLayout@Element@DirectUI@@MEAAXHH@Z
?GetImmersiveFocusRectOffsets@Element@DirectUI@@UEAAXPEAUtagRECT@@@Z
?QueryInterface@Element@DirectUI@@UEAAJAEBU_GUID@@PEAPEAX@Z
?MessageCallback@Edit@DirectUI@@UEAAIPEAUtagGMSG@@@Z
?RemoveBehavior@Element@DirectUI@@UEAAJPEAUIDuiBehavior@@@Z
?AddBehavior@Element@DirectUI@@UEAAJPEAUIDuiBehavior@@@Z
?EnsureVisible@Element@DirectUI@@UEAA_NHHHH@Z
?GetAdjacent@Element@DirectUI@@UEAAPEAV12@PEAV12@HPEBUNavReference@2@K@Z
?Remove@Element@DirectUI@@UEAAJPEAPEAV12@I@Z
?Insert@Element@DirectUI@@UEAAJPEAPEAV12@II@Z
?Add@Element@DirectUI@@UEAAJPEAPEAV12@I@Z
?GetContentSize@Edit@DirectUI@@UEAA?AUtagSIZE@@HHPEAVSurface@2@@Z
?Paint@HWNDHost@DirectUI@@UEAAXPEAUHDC__@@PEBUtagRECT@@1PEAU4@2@Z
?OnEvent@HWNDHost@DirectUI@@UEAAXPEAUEvent@2@@Z
?OnDestroy@HWNDHost@DirectUI@@UEAAXXZ
?OnMouseFocusMoved@Element@DirectUI@@UEAAXPEAV12@0@Z
?OnKeyFocusMoved@Element@DirectUI@@UEAAXPEAV12@0@Z
?OnInput@Edit@DirectUI@@UEAAXPEAUInputEvent@2@@Z
?OnGroupChanged@Element@DirectUI@@UEAAXH_N@Z
?OnPropertyChanged@Element@DirectUI@@UEAAXPEAUPropertyInfo@2@HPEAVValue@2@1@Z
?OnPropertyChanging@Element@DirectUI@@UEAA_NPEAUPropertyInfo@2@HPEAVValue@2@1@Z
?OnPropertyChanging@Element@DirectUI@@UEAA_NPEBUPropertyInfo@2@HPEAVValue@2@1@Z
?GetContentStringAsDisplayed@Edit@DirectUI@@UEAAPEBGPEAPEAVValue@2@@Z
?IsContentProtected@Edit@DirectUI@@UEAA_NXZ
?IsRTLReading@Element@DirectUI@@UEAA_NXZ
??1Edit@DirectUI@@UEAA@XZ
??0Edit@DirectUI@@QEAA@XZ
?IsContentProtected@Element@DirectUI@@UEAA_NXZ
?GetContentStringAsDisplayed@Element@DirectUI@@UEAAPEBGPEAPEAVValue@2@@Z
?OnPropertyChanged@HWNDElement@DirectUI@@UEAAXPEBUPropertyInfo@2@HPEAVValue@2@1@Z
?OnGroupChanged@HWNDElement@DirectUI@@UEAAXH_N@Z
?OnDestroy@HWNDElement@DirectUI@@UEAAXXZ
?Paint@Element@DirectUI@@UEAAXPEAUHDC__@@PEBUtagRECT@@1PEAU4@2@Z
?GetContentSize@Element@DirectUI@@UEAA?AUtagSIZE@@HHPEAVSurface@2@@Z
?MessageCallback@Element@DirectUI@@UEAAIPEAUtagGMSG@@@Z
?OnHosted@Element@DirectUI@@MEAAXPEAV12@@Z
?OnUnHosted@Element@DirectUI@@MEAAXPEAV12@@Z
?UpdateTooltip@HWNDElement@DirectUI@@UEAAXPEAVElement@2@@Z
?ActivateTooltip@HWNDElement@DirectUI@@UEAAXPEAVElement@2@K@Z
?RemoveTooltip@HWNDElement@DirectUI@@UEAAXPEAVElement@2@@Z
?GetKeyFocused@Element@DirectUI@@UEAA_NXZ
?GetClassInfoW@HWNDElement@DirectUI@@UEAAPEAUIClassInfo@2@XZ
?GetAccessibleImpl@HWNDElement@DirectUI@@UEAAJPEAPEAUIAccessible@@@Z
?OnThemeChanged@HWNDElement@DirectUI@@UEAAXPEAUThemeChangedEvent@2@@Z
?OnImmersiveColorSchemeChanged@HWNDElement@DirectUI@@UEAAXXZ
?OnNoChildWithShortcutFound@HWNDElement@DirectUI@@UEAAXPEAUKeyboardEvent@2@@Z
?OnGetDlgCode@HWNDElement@DirectUI@@UEAAXPEAUtagMSG@@PEA_J@Z
?OnWmThemeChanged@HWNDElement@DirectUI@@UEAAX_K_J@Z
?OnWmSettingChanged@HWNDElement@DirectUI@@UEAAX_K_J@Z
?OnCompositionChanged@HWNDElement@DirectUI@@UEAAXXZ
?CanSetFocus@HWNDElement@DirectUI@@UEAA_NXZ
?IsMSAAEnabled@HWNDElement@DirectUI@@UEAA_NXZ
?CreateStyleParser@HWNDElement@DirectUI@@UEAAJPEAPEAVDUIXmlParser@2@@Z
?WndProc@HWNDElement@DirectUI@@UEAA_JPEAUHWND__@@I_K_J@Z
?GetWindowClassNameAndStyle@HWNDElement@DirectUI@@UEAAXPEAPEBGPEAI@Z
?_OnUIStateChanged@HWNDElement@DirectUI@@MEAAXGG@Z
?AddRef@ClassInfoBase@DirectUI@@UEAAXXZ
?Release@ClassInfoBase@DirectUI@@UEAAHXZ
?EnumPropertyInfo@ClassInfoBase@DirectUI@@UEAAPEBUPropertyInfo@2@I@Z
?GetByClassIndex@ClassInfoBase@DirectUI@@UEAAPEBUPropertyInfo@2@I@Z
?GetPICount@ClassInfoBase@DirectUI@@UEBAIXZ
?GetGlobalIndex@ClassInfoBase@DirectUI@@UEBAIXZ
?GetName@ClassInfoBase@DirectUI@@UEBAPEBGXZ
?IsValidProperty@ClassInfoBase@DirectUI@@UEBA_NPEBUPropertyInfo@2@@Z
?IsSubclassOf@ClassInfoBase@DirectUI@@UEBA_NPEAUIClassInfo@2@@Z
?GetModule@ClassInfoBase@DirectUI@@UEBAPEAUHINSTANCE__@@XZ
?IsGlobal@ClassInfoBase@DirectUI@@UEBA_NXZ
?AddChild@ClassInfoBase@DirectUI@@UEAAXXZ
?RemoveChild@ClassInfoBase@DirectUI@@UEAAXXZ
?GetChildren@ClassInfoBase@DirectUI@@UEBAHXZ
?AssertPIZeroRef@ClassInfoBase@DirectUI@@UEBAXXZ
DUI70.dll
??0BuiVolume@@QEAA@XZ
??1BuiVolume@@QEAA@XZ
?Init@BuiVolume@@QEAAJPEAG@Z
?IsCurrentPINEnhanced@BuiVolume@@QEAAJPEAH@Z
BDEUI.dll
FreeSid
AllocateAndInitializeSid
RegOpenKeyExW
RegCloseKey
RegGetValueW
RegLoadKeyW
RegUnLoadKeyW
ADVAPI32.dll
Sleep
GetStartupInfoW
UnhandledExceptionFilter
SetUnhandledExceptionFilter
GetCurrentProcess
TerminateProcess
QueryPerformanceCounter
GetCurrentProcessId
GetCurrentThreadId
GetSystemTimeAsFileTime
GetTickCount
InitializeCriticalSection
DeleteCriticalSection
EnterCriticalSection
LeaveCriticalSection
GetSystemWindowsDirectoryW
VerSetConditionMask
GetProcAddress
GetFileAttributesW
CreateEventW
RtlCompareMemory
GetModuleHandleExA
LoadStringW
__CxxFrameHandler3
??1type_info@@UEAA@XZ
ShellExecuteExW
RtlCheckPortableOperatingSystem
RtlNtStatusToDosError
RtlVerifyVersionInfo
NdrClientCall3
RpcBindingFromStringBindingW
RpcStringBindingComposeW
RpcBindingSetAuthInfoExW
RpcStringFreeW
RpcBindingFree
RPCRT4.dll
malloc
_callnewh
memcpy
memset
wcscmp
.?AVCFvePolicy@@
.?AVCFveRecoverySettings@@
.?AVCFvePolicyImpl@@
.?AVCFveHardwareEncryptionSettings@@
.?AVCFvePolicySettings@@
.?AVCFvePolicyReader@@
.?AVIFvePolicyReader@@
UIFILE
<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<!-- Copyright (c) Microsoft Corporation -->
<assembly
    xmlns="urn:schemas-microsoft-com:asm.v1"
    manifestVersion="1.0"
    >
  <assemblyIdentity
      name="Microsoft.BitLocker.BitLockerChangePin"
      processorArchitecture="*"
      type="win32"
      version="1.0.0.0"
      />
  <description>BitLocker Drive Encryption PIN Change Tool</description>
  <dependency>
    <dependentAssembly>
      <assemblyIdentity
          language="*"
          name="Microsoft.Windows.Common-Controls"
          processorArchitecture="*"
          publicKeyToken="6595b64144ccf1df"
          type="win32"
          version="6.0.0.0"
          />
    </dependentAssembly>
  </dependency>
  <application xmlns="urn:schemas-microsoft-com:asm.v3">
    <windowsSettings>
      <dpiAware xmlns="http://schemas.microsoft.com/SMI/2005/WindowsSettings">true</dpiAware>
    </windowsSettings>
  </application>
  <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">
    <security>
      <requestedPrivileges>
        <requestedExecutionLevel
            level="asInvoker"
            uiAccess="false"
            />
      </requestedPrivileges>
    </security>
  </trustInfo>
</assembly>
<duixml>
<stylesheets>
#pragma once
#pragma warning(push)
#pragma warning(disable:4668) 
#pragma once
#pragma region Input Buffer SAL 1 compatibility macros
#pragma endregion Input Buffer SAL 1 compatibility macros
#pragma once
#pragma once
#pragma once
#pragma warning(pop)
#pragma warning(push)
#pragma warning(disable:4668)    
#pragma warning(disable:4820)    
#pragma warning(disable:4201)    
#pragma once
#pragma warning(push)
#pragma warning(disable:4001) 
#pragma once
#pragma warning(push)
#pragma warning(disable:4001) 
#pragma once
#pragma warning(pop)
#pragma warning(pop)
#pragma region Application Family or OneCore or Games Family
typedef   long HRESULT;
typedef unsigned int ALG_ID;
typedef ULONG_PTR HCRYPTPROV;
typedef ULONG_PTR HCRYPTKEY;
typedef ULONG_PTR HCRYPTHASH;
typedef struct _CMS_KEY_INFO {
DWORD       dwVersion;                      
ALG_ID  Algid;                              
BYTE    *pbOID;                             
DWORD   cbOID;                              
} CMS_KEY_INFO, *PCMS_KEY_INFO;
typedef struct _HMAC_Info {
ALG_ID  HashAlgid;
BYTE    *pbInnerString;
DWORD   cbInnerString;
BYTE    *pbOuterString;
DWORD   cbOuterString;
} HMAC_INFO, *PHMAC_INFO;
typedef struct _SCHANNEL_ALG {
DWORD   dwUse;
ALG_ID  Algid;
DWORD   cBits;
DWORD   dwFlags;
DWORD   dwReserved;
} SCHANNEL_ALG, *PSCHANNEL_ALG;
typedef struct _PROV_ENUMALGS {
ALG_ID    aiAlgid;
DWORD     dwBitLen;
DWORD     dwNameLen;
CHAR      szName[20];
} PROV_ENUMALGS;
typedef struct _PROV_ENUMALGS_EX {
ALG_ID    aiAlgid;
DWORD     dwDefaultLen;
DWORD     dwMinLen;
DWORD     dwMaxLen;
DWORD     dwProtocols;
DWORD     dwNameLen;
CHAR      szName[20];
DWORD     dwLongNameLen;
CHAR      szLongName[40];
} PROV_ENUMALGS_EX;
typedef struct _PUBLICKEYSTRUC {
BYTE    bType;
BYTE    bVersion;
WORD    reserved;
ALG_ID  aiKeyAlg;
} BLOBHEADER, PUBLICKEYSTRUC;
typedef struct _RSAPUBKEY {
DWORD   magic;                  
DWORD   bitlen;                 
DWORD   pubexp;                 
} RSAPUBKEY;
typedef struct _PUBKEY {
DWORD   magic;
DWORD   bitlen;                 
} DHPUBKEY, DSSPUBKEY, KEAPUBKEY, TEKPUBKEY;
typedef struct _DSSSEED {
DWORD   counter;
BYTE    seed[20];
} DSSSEED;
typedef struct _PUBKEYVER3 {
DWORD   magic;
DWORD   bitlenP;                
DWORD   bitlenQ;                
DWORD   bitlenJ;                
DSSSEED DSSSeed;
} DHPUBKEY_VER3, DSSPUBKEY_VER3;
typedef struct _PRIVKEYVER3 {
DWORD   magic;
DWORD   bitlenP;                
DWORD   bitlenQ;                
DWORD   bitlenJ;                
DWORD   bitlenX;                
DSSSEED DSSSeed;
} DHPRIVKEY_VER3, DSSPRIVKEY_VER3;
typedef struct _KEY_TYPE_SUBTYPE {
DWORD   dwKeySpec;
GUID    Type;
GUID    Subtype;
} KEY_TYPE_SUBTYPE, *PKEY_TYPE_SUBTYPE;
typedef struct _CERT_FORTEZZA_DATA_PROP {
unsigned char   SerialNumber[8];
int             CertIndex;
unsigned char   CertLabel[36];
} CERT_FORTEZZA_DATA_PROP;
typedef struct _CRYPT_RC4_KEY_STATE {
unsigned char Key[16];
unsigned char SBox[256];
unsigned char i;
unsigned char j;
} CRYPT_RC4_KEY_STATE, *PCRYPT_RC4_KEY_STATE;
typedef struct _CRYPT_DES_KEY_STATE {
unsigned char Key[8];
unsigned char IV[8];
unsigned char Feedback[8];
} CRYPT_DES_KEY_STATE, *PCRYPT_DES_KEY_STATE;
typedef struct _CRYPT_3DES_KEY_STATE {
unsigned char Key[24];
unsigned char IV[8];
unsigned char Feedback[8];
} CRYPT_3DES_KEY_STATE, *PCRYPT_3DES_KEY_STATE;
typedef struct _CRYPT_AES_128_KEY_STATE {
unsigned char Key[16];
unsigned char IV[16];
unsigned char EncryptionState[11][16];      
unsigned char DecryptionState[11][16];
unsigned char Feedback[16];
} CRYPT_AES_128_KEY_STATE, *PCRYPT_AES_128_KEY_STATE;
typedef struct _CRYPT_AES_256_KEY_STATE {
unsigned char Key[32];
unsigned char IV[16];
unsigned char EncryptionState[15][16];      
unsigned char DecryptionState[15][16];
unsigned char Feedback[16];
} CRYPT_AES_256_KEY_STATE, *PCRYPT_AES_256_KEY_STATE;
typedef struct _CRYPTOAPI_BLOB {
DWORD   cbData;
BYTE    *pbData;
} CRYPT_INTEGER_BLOB, *PCRYPT_INTEGER_BLOB,
CRYPT_UINT_BLOB, *PCRYPT_UINT_BLOB,
CRYPT_OBJID_BLOB, *PCRYPT_OBJID_BLOB,
CERT_NAME_BLOB, *PCERT_NAME_BLOB,
CERT_RDN_VALUE_BLOB, *PCERT_RDN_VALUE_BLOB,
CERT_BLOB, *PCERT_BLOB,
CRL_BLOB, *PCRL_BLOB,
DATA_BLOB, *PDATA_BLOB,
CRYPT_DATA_BLOB, *PCRYPT_DATA_BLOB,
CRYPT_HASH_BLOB, *PCRYPT_HASH_BLOB,
CRYPT_DIGEST_BLOB, *PCRYPT_DIGEST_BLOB,
CRYPT_DER_BLOB, *PCRYPT_DER_BLOB,
CRYPT_ATTR_BLOB, *PCRYPT_ATTR_BLOB;
typedef struct _CMS_DH_KEY_INFO {
DWORD               dwVersion;                      
ALG_ID          Algid;                              
LPSTR           pszContentEncObjId; 
CRYPT_DATA_BLOB PubInfo;            
void            *pReserved;         
} CMS_DH_KEY_INFO, *PCMS_DH_KEY_INFO;
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
__stdcall
CryptAcquireContextA(
HCRYPTPROV  *phProv,
LPCSTR    szContainer,
LPCSTR    szProvider,
DWORD       dwProvType,
DWORD       dwFlags
__stdcall
CryptAcquireContextW(
HCRYPTPROV  *phProv,
LPCWSTR    szContainer,
LPCWSTR    szProvider,
DWORD       dwProvType,
DWORD       dwFlags
#pragma endregion
#pragma region Application Family or OneCore or Games Family
__stdcall
CryptReleaseContext(
HCRYPTPROV  hProv,
DWORD       dwFlags
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
__stdcall
CryptGenKey(
HCRYPTPROV  hProv,
ALG_ID      Algid,
DWORD       dwFlags,
HCRYPTKEY   *phKey
__stdcall
CryptDeriveKey(
HCRYPTPROV  hProv,
ALG_ID      Algid,
HCRYPTHASH  hBaseData,
DWORD       dwFlags,
HCRYPTKEY   *phKey
__stdcall
CryptDestroyKey(
HCRYPTKEY   hKey
__stdcall
CryptSetKeyParam(
HCRYPTKEY   hKey,
DWORD       dwParam,
const BYTE  *pbData,
DWORD       dwFlags
__stdcall
CryptGetKeyParam(
HCRYPTKEY   hKey,
DWORD   dwParam,
BYTE    *pbData,
DWORD   *pdwDataLen,
DWORD   dwFlags
__stdcall
CryptSetHashParam(
HCRYPTHASH  hHash,
DWORD       dwParam,
const BYTE  *pbData,
DWORD       dwFlags
__stdcall
CryptGetHashParam(
HCRYPTHASH  hHash,
DWORD   dwParam,
BYTE    *pbData,
DWORD   *pdwDataLen,
DWORD   dwFlags
__stdcall
CryptSetProvParam(
HCRYPTPROV  hProv,
DWORD       dwParam,
const BYTE  *pbData,
DWORD       dwFlags
__stdcall
CryptGetProvParam(
HCRYPTPROV  hProv,
DWORD   dwParam,
BYTE    *pbData,
DWORD   *pdwDataLen,
DWORD   dwFlags
__stdcall
CryptGenRandom(
HCRYPTPROV  hProv,
DWORD   dwLen,
BYTE    *pbBuffer
__stdcall
CryptGetUserKey(
HCRYPTPROV  hProv,
DWORD       dwKeySpec,
HCRYPTKEY   *phUserKey
__stdcall
CryptExportKey(
HCRYPTKEY   hKey,
HCRYPTKEY   hExpKey,
DWORD   dwBlobType,
DWORD   dwFlags,
BYTE    *pbData,
DWORD   *pdwDataLen
__stdcall
CryptImportKey(
HCRYPTPROV  hProv,
const BYTE  *pbData,
DWORD       dwDataLen,
HCRYPTKEY   hPubKey,
DWORD       dwFlags,
HCRYPTKEY   *phKey
__stdcall
CryptEncrypt(
HCRYPTKEY   hKey,
HCRYPTHASH  hHash,
BOOL    Final,
DWORD   dwFlags,
BYTE    *pbData,
DWORD   *pdwDataLen,
DWORD   dwBufLen
__stdcall
CryptDecrypt(
HCRYPTKEY   hKey,
HCRYPTHASH  hHash,
BOOL        Final,
DWORD       dwFlags,
BYTE        *pbData,
DWORD       *pdwDataLen
__stdcall
CryptCreateHash(
HCRYPTPROV  hProv,
ALG_ID      Algid,
HCRYPTKEY   hKey,
DWORD       dwFlags,
HCRYPTHASH  *phHash
__stdcall
CryptHashData(
HCRYPTHASH  hHash,
const BYTE  *pbData,
DWORD   dwDataLen,
DWORD   dwFlags
__stdcall
CryptHashSessionKey(
HCRYPTHASH  hHash,
HCRYPTKEY   hKey,
DWORD   dwFlags
__stdcall
CryptDestroyHash(
HCRYPTHASH  hHash
__stdcall
CryptSignHashA(
HCRYPTHASH  hHash,
DWORD       dwKeySpec,
LPCSTR    szDescription,
DWORD       dwFlags,
BYTE        *pbSignature,
DWORD       *pdwSigLen
__stdcall
CryptSignHashW(
HCRYPTHASH  hHash,
DWORD       dwKeySpec,
LPCWSTR    szDescription,
DWORD       dwFlags,
BYTE        *pbSignature,
DWORD       *pdwSigLen
__stdcall
CryptVerifySignatureA(
HCRYPTHASH  hHash,
const BYTE  *pbSignature,
DWORD       dwSigLen,
HCRYPTKEY   hPubKey,
LPCSTR    szDescription,
DWORD       dwFlags
__stdcall
CryptVerifySignatureW(
HCRYPTHASH  hHash,
const BYTE  *pbSignature,
DWORD       dwSigLen,
HCRYPTKEY   hPubKey,
LPCWSTR    szDescription,
DWORD       dwFlags
__stdcall
CryptSetProviderA(
LPCSTR    pszProvName,
DWORD       dwProvType
__stdcall
CryptSetProviderW(
LPCWSTR    pszProvName,
DWORD       dwProvType
__stdcall
CryptSetProviderExA(
LPCSTR pszProvName,
DWORD dwProvType,
DWORD *pdwReserved,
DWORD dwFlags
__stdcall
CryptSetProviderExW(
LPCWSTR pszProvName,
DWORD dwProvType,
DWORD *pdwReserved,
DWORD dwFlags
__stdcall
CryptGetDefaultProviderA(
DWORD   dwProvType,
DWORD   *pdwReserved,
DWORD   dwFlags,
LPSTR pszProvName,
DWORD   *pcbProvName
__stdcall
CryptGetDefaultProviderW(
DWORD   dwProvType,
DWORD   *pdwReserved,
DWORD   dwFlags,
LPWSTR pszProvName,
DWORD   *pcbProvName
__stdcall
CryptEnumProviderTypesA(
DWORD   dwIndex,
DWORD   *pdwReserved,
DWORD   dwFlags,
DWORD   *pdwProvType,
LPSTR szTypeName,
DWORD   *pcbTypeName
__stdcall
CryptEnumProviderTypesW(
DWORD   dwIndex,
DWORD   *pdwReserved,
DWORD   dwFlags,
DWORD   *pdwProvType,
LPWSTR szTypeName,
DWORD   *pcbTypeName
__stdcall
CryptEnumProvidersA(
DWORD   dwIndex,
DWORD   *pdwReserved,
DWORD   dwFlags,
DWORD   *pdwProvType,
LPSTR szProvName,
DWORD   *pcbProvName
__stdcall
CryptEnumProvidersW(
DWORD   dwIndex,
DWORD   *pdwReserved,
DWORD   dwFlags,
DWORD   *pdwProvType,
LPWSTR szProvName,
DWORD   *pcbProvName
__stdcall
CryptContextAddRef(
HCRYPTPROV  hProv,
DWORD       *pdwReserved,
DWORD       dwFlags
__stdcall
CryptDuplicateKey(
HCRYPTKEY   hKey,
DWORD   *pdwReserved,
DWORD   dwFlags,
HCRYPTKEY   *phKey
__stdcall
CryptDuplicateHash(
HCRYPTHASH  hHash,
DWORD       *pdwReserved,
DWORD       dwFlags,
HCRYPTHASH  *phHash
#pragma endregion
#pragma region Desktop Family or Games
__cdecl
GetEncSChannel(
BYTE **pData,
DWORD *dwDecSize
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
#pragma once
#pragma warning(push)
#pragma warning(disable:4820) 
#pragma region Desktop Family or OneCore or Games Family
typedef   LONG NTSTATUS;
typedef NTSTATUS *PNTSTATUS;
typedef struct __BCRYPT_KEY_LENGTHS_STRUCT
ULONG   dwMinLength;
ULONG   dwMaxLength;
ULONG   dwIncrement;
} BCRYPT_KEY_LENGTHS_STRUCT;
typedef BCRYPT_KEY_LENGTHS_STRUCT BCRYPT_AUTH_TAG_LENGTHS_STRUCT;
typedef struct _BCRYPT_OID
ULONG   cbOID;
PUCHAR  pbOID;
} BCRYPT_OID;
typedef struct _BCRYPT_OID_LIST
ULONG       dwOIDCount;
BCRYPT_OID  *pOIDs;
} BCRYPT_OID_LIST;
typedef struct _BCRYPT_PKCS1_PADDING_INFO
LPCWSTR pszAlgId;
} BCRYPT_PKCS1_PADDING_INFO;
typedef struct _BCRYPT_PSS_PADDING_INFO
LPCWSTR pszAlgId;
ULONG   cbSalt;
} BCRYPT_PSS_PADDING_INFO;
typedef struct _BCRYPT_OAEP_PADDING_INFO
LPCWSTR pszAlgId;
PUCHAR   pbLabel;
ULONG   cbLabel;
} BCRYPT_OAEP_PADDING_INFO;
typedef struct _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
ULONG       cbSize;
ULONG       dwInfoVersion;
PUCHAR      pbNonce;
ULONG       cbNonce;
PUCHAR      pbAuthData;
ULONG       cbAuthData;
PUCHAR      pbTag;
ULONG       cbTag;
PUCHAR      pbMacContext;
ULONG       cbMacContext;
ULONG       cbAAD;
ULONGLONG   cbData;
ULONG       dwFlags;
} BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO, *PBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO;
typedef struct _BCryptBuffer {
ULONG   cbBuffer;             
ULONG   BufferType;           
PVOID   pvBuffer;             
} BCryptBuffer, * PBCryptBuffer;
typedef struct _BCryptBufferDesc {
ULONG   ulVersion;            
ULONG   cBuffers;             
PBCryptBuffer pBuffers;       
} BCryptBufferDesc, * PBCryptBufferDesc;
typedef PVOID BCRYPT_HANDLE;
typedef PVOID BCRYPT_ALG_HANDLE;
typedef PVOID BCRYPT_KEY_HANDLE;
typedef PVOID BCRYPT_HASH_HANDLE;
typedef PVOID BCRYPT_SECRET_HANDLE;
typedef struct _BCRYPT_KEY_BLOB
ULONG   Magic;
} BCRYPT_KEY_BLOB;
typedef struct _BCRYPT_RSAKEY_BLOB
ULONG   Magic;
ULONG   BitLength;
ULONG   cbPublicExp;
ULONG   cbModulus;
ULONG   cbPrime1;
ULONG   cbPrime2;
} BCRYPT_RSAKEY_BLOB;
typedef struct _BCRYPT_ECCKEY_BLOB
ULONG   dwMagic;
ULONG   cbKey;
} BCRYPT_ECCKEY_BLOB, *PBCRYPT_ECCKEY_BLOB;
typedef struct _SSL_ECCKEY_BLOB
ULONG   dwCurveType;
ULONG   cbKey;
} SSL_ECCKEY_BLOB, *PSSL_ECCKEY_BLOB;
typedef enum
BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE    = 0x1,
BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE      = 0x2,
BCRYPT_ECC_PRIME_MONTGOMERY_CURVE           = 0x3
} ECC_CURVE_TYPE_ENUM;
typedef enum
BCRYPT_NO_CURVE_GENERATION_ALG_ID = 0x0
} ECC_CURVE_ALG_ID_ENUM;
typedef struct _BCRYPT_ECCFULLKEY_BLOB
ULONG                   dwMagic;
ULONG                   dwVersion;              
ECC_CURVE_TYPE_ENUM     dwCurveType;            
ECC_CURVE_ALG_ID_ENUM   dwCurveGenerationAlgId; 
ULONG                   cbFieldLength;          
ULONG                   cbSubgroupOrder;        
ULONG                   cbCofactor;             
ULONG                   cbSeed;                 
} BCRYPT_ECCFULLKEY_BLOB, *PBCRYPT_ECCFULLKEY_BLOB;
typedef struct _BCRYPT_DH_KEY_BLOB
ULONG   dwMagic;
ULONG   cbKey;
} BCRYPT_DH_KEY_BLOB, *PBCRYPT_DH_KEY_BLOB;
typedef   struct _BCRYPT_DH_PARAMETER_HEADER
ULONG           cbLength;
ULONG           dwMagic;
ULONG           cbKeyLength;
} BCRYPT_DH_PARAMETER_HEADER;
typedef struct _BCRYPT_DSA_KEY_BLOB
ULONG   dwMagic;
ULONG   cbKey;
UCHAR   Count[4];
UCHAR   Seed[20];
UCHAR   q[20];
} BCRYPT_DSA_KEY_BLOB, *PBCRYPT_DSA_KEY_BLOB;
typedef enum
DSA_HASH_ALGORITHM_SHA1,
DSA_HASH_ALGORITHM_SHA256,
DSA_HASH_ALGORITHM_SHA512
} HASHALGORITHM_ENUM;
typedef enum
DSA_FIPS186_2,
DSA_FIPS186_3
} DSAFIPSVERSION_ENUM;
typedef struct _BCRYPT_DSA_KEY_BLOB_V2
ULONG                                   dwMagic;
ULONG                                   cbKey;
HASHALGORITHM_ENUM                      hashAlgorithm;
DSAFIPSVERSION_ENUM                     standardVersion;
ULONG                                   cbSeedLength;
ULONG                                   cbGroupSize;
UCHAR                                   Count[4];
} BCRYPT_DSA_KEY_BLOB_V2, *PBCRYPT_DSA_KEY_BLOB_V2;
typedef struct _BCRYPT_KEY_DATA_BLOB_HEADER
ULONG   dwMagic;
ULONG   dwVersion;
ULONG   cbKeyData;
} BCRYPT_KEY_DATA_BLOB_HEADER, *PBCRYPT_KEY_DATA_BLOB_HEADER;
typedef struct _BCRYPT_DSA_PARAMETER_HEADER
ULONG           cbLength;
ULONG           dwMagic;
ULONG           cbKeyLength;
UCHAR           Count[4];
UCHAR           Seed[20];
UCHAR           q[20];
} BCRYPT_DSA_PARAMETER_HEADER;
typedef struct _BCRYPT_DSA_PARAMETER_HEADER_V2
ULONG                   cbLength;
ULONG                   dwMagic;
ULONG                   cbKeyLength;
HASHALGORITHM_ENUM      hashAlgorithm;
DSAFIPSVERSION_ENUM     standardVersion;
ULONG                   cbSeedLength;
ULONG                   cbGroupSize;
UCHAR                   Count[4];
} BCRYPT_DSA_PARAMETER_HEADER_V2;
typedef struct _BCRYPT_ECC_CURVE_NAMES
ULONG   dwEccCurveNames;
LPWSTR  *pEccCurveNames;
} BCRYPT_ECC_CURVE_NAMES;
typedef enum {
BCRYPT_HASH_OPERATION_HASH_DATA = 1,
BCRYPT_HASH_OPERATION_FINISH_HASH = 2,
} BCRYPT_HASH_OPERATION_TYPE;
typedef struct _BCRYPT_MULTI_HASH_OPERATION {
ULONG                           iHash;          
BCRYPT_HASH_OPERATION_TYPE      hashOperation;  
PUCHAR                          pbBuffer;       
ULONG                           cbBuffer;
} BCRYPT_MULTI_HASH_OPERATION;
typedef enum{
BCRYPT_OPERATION_TYPE_HASH = 1,     
} BCRYPT_MULTI_OPERATION_TYPE;
typedef struct _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT
ULONG   cbPerObject;
ULONG   cbPerElement;           
} BCRYPT_MULTI_OBJECT_LENGTH_STRUCT;
NTSTATUS
__stdcall
BCryptOpenAlgorithmProvider(
BCRYPT_ALG_HANDLE   *phAlgorithm,
LPCWSTR pszAlgId,
LPCWSTR pszImplementation,
ULONG   dwFlags);
typedef struct _BCRYPT_ALGORITHM_IDENTIFIER
LPWSTR  pszName;
ULONG   dwClass;
ULONG   dwFlags;
} BCRYPT_ALGORITHM_IDENTIFIER;
NTSTATUS
__stdcall
BCryptEnumAlgorithms(
ULONG   dwAlgOperations,
ULONG   *pAlgCount,
BCRYPT_ALGORITHM_IDENTIFIER **ppAlgList,
ULONG   dwFlags);
typedef struct _BCRYPT_PROVIDER_NAME
LPWSTR  pszProviderName;
} BCRYPT_PROVIDER_NAME;
NTSTATUS
__stdcall
BCryptEnumProviders(
LPCWSTR pszAlgId,
ULONG   *pImplCount,
BCRYPT_PROVIDER_NAME    **ppImplList,
ULONG   dwFlags);
NTSTATUS
__stdcall
BCryptGetProperty(
BCRYPT_HANDLE   hObject,
LPCWSTR pszProperty,
PUCHAR   pbOutput,
ULONG   cbOutput,
ULONG   *pcbResult,
ULONG   dwFlags);
NTSTATUS
__stdcall
BCryptSetProperty(
BCRYPT_HANDLE   hObject,
LPCWSTR pszProperty,
PUCHAR   pbInput,
ULONG   cbInput,
ULONG   dwFlags);
NTSTATUS
__stdcall
BCryptCloseAlgorithmProvider(
BCRYPT_ALG_HANDLE   hAlgorithm,
ULONG   dwFlags);
__stdcall
BCryptFreeBuffer(
PVOID   pvBuffer);
NTSTATUS
__stdcall
BCryptGenerateSymmetricKey(
BCRYPT_ALG_HANDLE   hAlgorithm,
BCRYPT_KEY_HANDLE   *phKey,
PUCHAR   pbKeyObject,
ULONG   cbKeyObject,
PUCHAR   pbSecret,
ULONG   cbSecret,
ULONG   dwFlags);
NTSTATUS
__stdcall
BCryptGenerateKeyPair(
BCRYPT_ALG_HANDLE   hAlgorithm,
BCRYPT_KEY_HANDLE   *phKey,
ULONG   dwLength,
ULONG   dwFlags);
NTSTATUS
__stdcall
BCryptEncrypt(
BCRYPT_KEY_HANDLE hKey,
PUCHAR   pbInput,
ULONG   cbInput,
VOID    *pPaddingInfo,
PUCHAR   pbIV,
ULONG   cbIV,
PUCHAR   pbOutput,
ULONG   cbOutput,
ULONG   *pcbResult,
ULONG   dwFlags);
NTSTATUS
__stdcall
BCryptDecrypt(
BCRYPT_KEY_HANDLE   hKey,
PUCHAR   pbInput,
ULONG   cbInput,
VOID    *pPaddingInfo,
PUCHAR   pbIV,
ULONG   cbIV,
PUCHAR   pbOutput,
ULONG   cbOutput,
ULONG   *pcbResult,
ULONG   dwFlags);
NTSTATUS
__stdcall
BCryptExportKey(
BCRYPT_KEY_HANDLE   hKey,
BCRYPT_KEY_HANDLE   hExportKey,
LPCWSTR pszBlobType,
PUCHAR   pbOutput,
ULONG   cbOutput,
ULONG   *pcbResult,
ULONG   dwFlags);
NTSTATUS
__stdcall
BCryptImportKey(
BCRYPT_ALG_HANDLE hAlgorithm,
BCRYPT_KEY_HANDLE hImportKey,
LPCWSTR pszBlobType,
BCRYPT_KEY_HANDLE *phKey,
PUCHAR   pbKeyObject,
ULONG   cbKeyObject,
PUCHAR   pbInput,
ULONG   cbInput,
ULONG   dwFlags);
NTSTATUS
__stdcall
BCryptImportKeyPair(
BCRYPT_ALG_HANDLE hAlgorithm,
BCRYPT_KEY_HANDLE hImportKey,
LPCWSTR pszBlobType,
BCRYPT_KEY_HANDLE *phKey,
PUCHAR   pbInput,
ULONG   cbInput,
ULONG   dwFlags);
NTSTATUS
__stdcall
BCryptDuplicateKey(
BCRYPT_KEY_HANDLE   hKey,
BCRYPT_KEY_HANDLE   *phNewKey,
PUCHAR   pbKeyObject,
ULONG   cbKeyObject,
ULONG   dwFlags);
NTSTATUS
__stdcall
BCryptFinalizeKeyPair(
BCRYPT_KEY_HANDLE   hKey,
ULONG   dwFlags);
NTSTATUS
__stdcall
BCryptDestroyKey(
BCRYPT_KEY_HANDLE   hKey);
NTSTATUS
__stdcall
BCryptDestroySecret(
BCRYPT_SECRET_HANDLE   hSecret);
NTSTATUS
__stdcall
BCryptSignHash(
BCRYPT_KEY_HANDLE   hKey,
VOID    *pPaddingInfo,
PUCHAR   pbInput,
ULONG   cbInput,
PUCHAR   pbOutput,
ULONG   cbOutput,
ULONG   *pcbResult,
ULONG   dwFlags);
NTSTATUS
__stdcall
BCryptVerifySignature(
BCRYPT_KEY_HANDLE   hKey,
VOID    *pPaddingInfo,
PUCHAR   pbHash,
ULONG   cbHash,
PUCHAR   pbSignature,
ULONG   cbSignature,
ULONG   dwFlags);
NTSTATUS
__stdcall
BCryptSecretAgreement(
BCRYPT_KEY_HANDLE       hPrivKey,
BCRYPT_KEY_HANDLE       hPubKey,
BCRYPT_SECRET_HANDLE    *phAgreedSecret,
ULONG                   dwFlags);
NTSTATUS
__stdcall
BCryptDeriveKey(
BCRYPT_SECRET_HANDLE hSharedSecret,
LPCWSTR              pwszKDF,
BCryptBufferDesc     *pParameterList,
PUCHAR pbDerivedKey,
ULONG                cbDerivedKey,
ULONG                *pcbResult,
ULONG                dwFlags);
NTSTATUS
__stdcall
BCryptKeyDerivation(
BCRYPT_KEY_HANDLE hKey,
BCryptBufferDesc     *pParameterList,
PUCHAR pbDerivedKey,
ULONG                cbDerivedKey,
ULONG                *pcbResult,
ULONG                dwFlags);
NTSTATUS
__stdcall
BCryptCreateHash(
BCRYPT_ALG_HANDLE   hAlgorithm,
BCRYPT_HASH_HANDLE  *phHash,
PUCHAR   pbHashObject,
ULONG   cbHashObject,
PUCHAR   pbSecret,   
ULONG   cbSecret,   
ULONG   dwFlags);
NTSTATUS
__stdcall
BCryptHashData(
BCRYPT_HASH_HANDLE  hHash,
PUCHAR   pbInput,
ULONG   cbInput,
ULONG   dwFlags);
NTSTATUS
__stdcall
BCryptFinishHash(
BCRYPT_HASH_HANDLE hHash,
PUCHAR   pbOutput,
ULONG   cbOutput,
ULONG   dwFlags);
NTSTATUS
__stdcall
BCryptDuplicateHash(
BCRYPT_HASH_HANDLE  hHash,
BCRYPT_HASH_HANDLE  *phNewHash,
PUCHAR   pbHashObject,
ULONG   cbHashObject,
ULONG   dwFlags);
NTSTATUS
__stdcall
BCryptDestroyHash(
BCRYPT_HASH_HANDLE  hHash);
NTSTATUS
__stdcall
BCryptHash(
BCRYPT_ALG_HANDLE   hAlgorithm,
PUCHAR              pbSecret,   
ULONG               cbSecret,   
PUCHAR              pbInput,
ULONG               cbInput,
PUCHAR              pbOutput,
ULONG               cbOutput );
NTSTATUS
__stdcall
BCryptGenRandom(
BCRYPT_ALG_HANDLE   hAlgorithm,
PUCHAR  pbBuffer,
ULONG   cbBuffer,
ULONG   dwFlags);
NTSTATUS
__stdcall
BCryptDeriveKeyCapi(
BCRYPT_HASH_HANDLE  hHash,
BCRYPT_ALG_HANDLE   hTargetAlg,
PUCHAR              pbDerivedKey,
ULONG               cbDerivedKey,
ULONG               dwFlags);
NTSTATUS
__stdcall
BCryptDeriveKeyPBKDF2(
BCRYPT_ALG_HANDLE   hPrf,
PUCHAR              pbPassword,
ULONG               cbPassword,
PUCHAR              pbSalt,
ULONG               cbSalt,
ULONGLONG           cIterations,
PUCHAR              pbDerivedKey,
ULONG               cbDerivedKey,
ULONG               dwFlags);
typedef struct _BCRYPT_INTERFACE_VERSION
USHORT MajorVersion;
USHORT MinorVersion;
} BCRYPT_INTERFACE_VERSION, *PBCRYPT_INTERFACE_VERSION;
typedef struct _CRYPT_INTERFACE_REG
ULONG dwInterface;
ULONG dwFlags;
ULONG cFunctions;
PWSTR *rgpszFunctions;
CRYPT_INTERFACE_REG, *PCRYPT_INTERFACE_REG;
typedef struct _CRYPT_IMAGE_REG
PWSTR pszImage;
ULONG cInterfaces;
PCRYPT_INTERFACE_REG *rgpInterfaces;
CRYPT_IMAGE_REG, *PCRYPT_IMAGE_REG;
typedef struct _CRYPT_PROVIDER_REG
ULONG cAliases;
PWSTR *rgpszAliases;
PCRYPT_IMAGE_REG pUM;
PCRYPT_IMAGE_REG pKM;
CRYPT_PROVIDER_REG, *PCRYPT_PROVIDER_REG;
typedef struct _CRYPT_PROVIDERS
ULONG cProviders;
PWSTR *rgpszProviders;
CRYPT_PROVIDERS, *PCRYPT_PROVIDERS;
typedef struct _CRYPT_CONTEXT_CONFIG
ULONG dwFlags;
ULONG dwReserved;
CRYPT_CONTEXT_CONFIG, *PCRYPT_CONTEXT_CONFIG;
typedef struct _CRYPT_CONTEXT_FUNCTION_CONFIG
ULONG dwFlags;
ULONG dwReserved;
CRYPT_CONTEXT_FUNCTION_CONFIG, *PCRYPT_CONTEXT_FUNCTION_CONFIG;
typedef struct _CRYPT_CONTEXTS
ULONG cContexts;
PWSTR *rgpszContexts;
CRYPT_CONTEXTS, *PCRYPT_CONTEXTS;
typedef struct _CRYPT_CONTEXT_FUNCTIONS
ULONG cFunctions;
PWSTR *rgpszFunctions;
CRYPT_CONTEXT_FUNCTIONS, *PCRYPT_CONTEXT_FUNCTIONS;
typedef struct _CRYPT_CONTEXT_FUNCTION_PROVIDERS
ULONG cProviders;
PWSTR *rgpszProviders;
CRYPT_CONTEXT_FUNCTION_PROVIDERS, *PCRYPT_CONTEXT_FUNCTION_PROVIDERS;
typedef struct _CRYPT_PROPERTY_REF
PWSTR pszProperty;
ULONG cbValue;
PUCHAR pbValue;
CRYPT_PROPERTY_REF, *PCRYPT_PROPERTY_REF;
typedef struct _CRYPT_IMAGE_REF
PWSTR pszImage;
ULONG dwFlags;
CRYPT_IMAGE_REF, *PCRYPT_IMAGE_REF;
typedef struct _CRYPT_PROVIDER_REF
ULONG dwInterface;
PWSTR pszFunction;
PWSTR pszProvider;
ULONG cProperties;
PCRYPT_PROPERTY_REF *rgpProperties;
PCRYPT_IMAGE_REF pUM;
PCRYPT_IMAGE_REF pKM;
CRYPT_PROVIDER_REF, *PCRYPT_PROVIDER_REF;
typedef struct _CRYPT_PROVIDER_REFS
ULONG cProviders;
PCRYPT_PROVIDER_REF *rgpProviders;
CRYPT_PROVIDER_REFS, *PCRYPT_PROVIDER_REFS;
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
NTSTATUS
__stdcall
BCryptQueryProviderRegistration(
LPCWSTR pszProvider,
ULONG dwMode,
ULONG dwInterface,
ULONG* pcbBuffer,
PCRYPT_PROVIDER_REG *ppBuffer);
NTSTATUS
__stdcall
BCryptEnumRegisteredProviders(
ULONG* pcbBuffer,
PCRYPT_PROVIDERS *ppBuffer);
NTSTATUS
__stdcall
BCryptCreateContext(
ULONG dwTable,
LPCWSTR pszContext,
PCRYPT_CONTEXT_CONFIG pConfig); 
NTSTATUS
__stdcall
BCryptDeleteContext(
ULONG dwTable,
LPCWSTR pszContext);
NTSTATUS
__stdcall
BCryptEnumContexts(
ULONG dwTable,
ULONG* pcbBuffer,
PCRYPT_CONTEXTS *ppBuffer);
NTSTATUS
__stdcall
BCryptConfigureContext(
ULONG dwTable,
LPCWSTR pszContext,
PCRYPT_CONTEXT_CONFIG pConfig);
NTSTATUS
__stdcall
BCryptQueryContextConfiguration(
ULONG dwTable,
LPCWSTR pszContext,
ULONG* pcbBuffer,
PCRYPT_CONTEXT_CONFIG *ppBuffer);
NTSTATUS
__stdcall
BCryptAddContextFunction(
ULONG dwTable,
LPCWSTR pszContext,
ULONG dwInterface,
LPCWSTR pszFunction,
ULONG dwPosition);
NTSTATUS
__stdcall
BCryptRemoveContextFunction(
ULONG dwTable,
LPCWSTR pszContext,
ULONG dwInterface,
LPCWSTR pszFunction);
NTSTATUS
__stdcall
BCryptEnumContextFunctions(
ULONG dwTable,
LPCWSTR pszContext,
ULONG dwInterface,
ULONG* pcbBuffer,
PCRYPT_CONTEXT_FUNCTIONS *ppBuffer);
NTSTATUS
__stdcall
BCryptConfigureContextFunction(
ULONG dwTable,
LPCWSTR pszContext,
ULONG dwInterface,
LPCWSTR pszFunction,
PCRYPT_CONTEXT_FUNCTION_CONFIG pConfig);
NTSTATUS
__stdcall
BCryptQueryContextFunctionConfiguration(
ULONG dwTable,
LPCWSTR pszContext,
ULONG dwInterface,
LPCWSTR pszFunction,
ULONG* pcbBuffer,
PCRYPT_CONTEXT_FUNCTION_CONFIG *ppBuffer);
NTSTATUS
__stdcall
BCryptEnumContextFunctionProviders(
ULONG dwTable,
LPCWSTR pszContext,
ULONG dwInterface,
LPCWSTR pszFunction,
ULONG* pcbBuffer,
PCRYPT_CONTEXT_FUNCTION_PROVIDERS *ppBuffer);
NTSTATUS
__stdcall
BCryptSetContextFunctionProperty(
ULONG dwTable,
LPCWSTR pszContext,
ULONG dwInterface,
LPCWSTR pszFunction,
LPCWSTR pszProperty,
ULONG cbValue,
PUCHAR pbValue);
NTSTATUS
__stdcall
BCryptQueryContextFunctionProperty(
ULONG dwTable,
LPCWSTR pszContext,
ULONG dwInterface,
LPCWSTR pszFunction,
LPCWSTR pszProperty,
ULONG* pcbValue,
PUCHAR *ppbValue);
NTSTATUS
__stdcall
BCryptRegisterConfigChangeNotify(
HANDLE *phEvent);
NTSTATUS
__stdcall
BCryptUnregisterConfigChangeNotify(
HANDLE hEvent);
NTSTATUS __stdcall
BCryptResolveProviders(
LPCWSTR pszContext,
ULONG dwInterface,
LPCWSTR pszFunction,
LPCWSTR pszProvider,
ULONG dwMode,
ULONG dwFlags,
ULONG* pcbBuffer,
PCRYPT_PROVIDER_REFS *ppBuffer);
#pragma endregion
#pragma region Application Family or OneCore Family
NTSTATUS
__stdcall
BCryptGetFipsAlgorithmMode(
BOOLEAN *pfEnabled
#pragma endregion
#pragma region Desktop Family
BOOLEAN
CngGetFipsAlgorithmMode(
#pragma endregion
#pragma warning(pop)
#pragma endregion
#pragma region Application Family or OneCore or Games Family
#pragma warning(push)
#pragma warning(disable:4820) 
typedef LONG SECURITY_STATUS;
typedef LPVOID (__stdcall *PFN_NCRYPT_ALLOC)(
SIZE_T cbSize
typedef VOID (__stdcall *PFN_NCRYPT_FREE)(
LPVOID pv
typedef struct NCRYPT_ALLOC_PARA {
DWORD                   cbSize;     
PFN_NCRYPT_ALLOC        pfnAlloc;
PFN_NCRYPT_FREE         pfnFree;
} NCRYPT_ALLOC_PARA;
typedef BCryptBuffer     NCryptBuffer;
typedef BCryptBuffer*    PNCryptBuffer;
typedef BCryptBufferDesc NCryptBufferDesc;
typedef BCryptBufferDesc* PNCryptBufferDesc;
typedef ULONG_PTR NCRYPT_HANDLE;
typedef ULONG_PTR NCRYPT_PROV_HANDLE;
typedef ULONG_PTR NCRYPT_KEY_HANDLE;
typedef ULONG_PTR NCRYPT_HASH_HANDLE;
typedef ULONG_PTR NCRYPT_SECRET_HANDLE;
typedef  
struct _NCRYPT_CIPHER_PADDING_INFO
ULONG       cbSize;
DWORD       dwFlags;
PUCHAR      pbIV;
ULONG       cbIV;
PUCHAR      pbOtherInfo;
ULONG       cbOtherInfo;
} NCRYPT_CIPHER_PADDING_INFO, *PNCRYPT_CIPHER_PADDING_INFO;
typedef struct _NCRYPT_PLATFORM_ATTEST_PADDING_INFO {
ULONG  magic;  
ULONG  pcrMask;
} NCRYPT_PLATFORM_ATTEST_PADDING_INFO;
typedef struct _NCRYPT_KEY_ATTEST_PADDING_INFO {
ULONG   magic;  
PUCHAR  pbKeyBlob;
ULONG   cbKeyBlob;
PUCHAR  pbKeyAuth;
ULONG   cbKeyAuth;
} NCRYPT_KEY_ATTEST_PADDING_INFO;
typedef struct _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES
ULONG Version; 
ULONG Flags;   
ULONG cbPublicKeyBlob;
} NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES, *PNCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES;
typedef struct _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT
ULONG Magic;        
ULONG Version;      
ULONG cbSignature;  
ULONG cbReport;     
ULONG cbAttributes; 
} NCRYPT_VSM_KEY_ATTESTATION_STATEMENT, *PNCRYPT_VSM_KEY_ATTESTATION_STATEMENT;
#pragma warning(disable:4214) 
typedef struct _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS
ULONG Version;            
ULONGLONG TrustletId;     
ULONG MinSvn;             
ULONG FlagsMask;          
ULONG FlagsExpected;      
ULONG AllowDebugging : 1; 
ULONG Reserved : 31;      
} NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS, *PNCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS;
#pragma warning(default:4214) 
#pragma warning(disable:4214) 
typedef struct _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER
ULONG Version;         
ULONG KeyUsage;        
ULONG PerBootKey : 1;  
ULONG Reserved : 31;   
ULONG cbAlgName;       
ULONG cbNonce;         
ULONG cbAuthTag;       
ULONG cbWrappingKey;   
ULONG cbIsolatedKey;   
} NCRYPT_EXPORTED_ISOLATED_KEY_HEADER, *PNCRYPT_EXPORTED_ISOLATED_KEY_HEADER;
#pragma warning(default:4214) 
typedef struct _NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE
NCRYPT_EXPORTED_ISOLATED_KEY_HEADER Header;
} NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE, *PNCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE;
typedef struct __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT
UINT32 Magic;  
UINT32 Version;  
UINT32 HeaderSize;  
UINT32 cbCertifyInfo;
UINT32 cbSignature;
UINT32 cbTpmPublic;
} NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT,*PNCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT;
typedef struct _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT
ULONG Magic;        
ULONG Version;      
ULONG pcrAlg;       
ULONG cbSignature;  
ULONG cbQuote;      
ULONG cbPcrs;       
} NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT, *PNCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT;
SECURITY_STATUS
__stdcall
NCryptOpenStorageProvider(
NCRYPT_PROV_HANDLE *phProvider,
LPCWSTR pszProviderName,
DWORD   dwFlags);
typedef struct _NCryptAlgorithmName
LPWSTR  pszName;
DWORD   dwClass;            
DWORD   dwAlgOperations;    
DWORD   dwFlags;
} NCryptAlgorithmName;
SECURITY_STATUS
__stdcall
NCryptEnumAlgorithms(
NCRYPT_PROV_HANDLE hProvider,
DWORD   dwAlgOperations,
DWORD * pdwAlgCount,
NCryptAlgorithmName **ppAlgList,
DWORD   dwFlags);
SECURITY_STATUS
__stdcall
NCryptIsAlgSupported(
NCRYPT_PROV_HANDLE hProvider,
LPCWSTR pszAlgId,
DWORD   dwFlags);
typedef struct NCryptKeyName
LPWSTR  pszName;
LPWSTR  pszAlgid;
DWORD   dwLegacyKeySpec;
DWORD   dwFlags;
} NCryptKeyName;
SECURITY_STATUS
__stdcall
NCryptEnumKeys(
NCRYPT_PROV_HANDLE hProvider,
LPCWSTR pszScope,
NCryptKeyName **ppKeyName,
PVOID * ppEnumState,
DWORD   dwFlags);
typedef struct NCryptProviderName
LPWSTR  pszName;
LPWSTR  pszComment;
} NCryptProviderName;
#pragma region Desktop Family or OneCore Family
SECURITY_STATUS
__stdcall
NCryptEnumStorageProviders(
DWORD * pdwProviderCount,
NCryptProviderName **ppProviderList,
DWORD   dwFlags);
#pragma endregion
SECURITY_STATUS
__stdcall
NCryptFreeBuffer(
PVOID   pvInput);
SECURITY_STATUS
__stdcall
NCryptOpenKey(
NCRYPT_PROV_HANDLE hProvider,
NCRYPT_KEY_HANDLE *phKey,
LPCWSTR pszKeyName,
DWORD  dwLegacyKeySpec,
DWORD   dwFlags);
SECURITY_STATUS
__stdcall
NCryptCreatePersistedKey(
NCRYPT_PROV_HANDLE hProvider,
NCRYPT_KEY_HANDLE *phKey,
LPCWSTR pszAlgId,
LPCWSTR pszKeyName,
DWORD   dwLegacyKeySpec,
DWORD   dwFlags);
typedef struct __NCRYPT_UI_POLICY
DWORD   dwVersion;
DWORD   dwFlags;
LPCWSTR pszCreationTitle;
LPCWSTR pszFriendlyName;
LPCWSTR pszDescription;
} NCRYPT_UI_POLICY;
typedef struct __NCRYPT_KEY_ACCESS_POLICY_BLOB
DWORD   dwVersion;
DWORD   dwPolicyFlags;
DWORD
cbUserSid;
DWORD
cbApplicationSid;
}NCRYPT_KEY_ACCESS_POLICY_BLOB;
typedef struct __NCRYPT_SUPPORTED_LENGTHS
DWORD   dwMinLength;
DWORD   dwMaxLength;
DWORD   dwIncrement;
DWORD   dwDefaultLength;
} NCRYPT_SUPPORTED_LENGTHS;
typedef struct __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO
DWORD       dwVersion;
INT32       iExpiration;
BYTE        pabNonce[32];
BYTE        pabPolicyRef[32];
BYTE        pabHMAC[32];
} NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO;
typedef struct __NCRYPT_PCP_TPM_FW_VERSION_INFO
UINT16      major1;
UINT16      major2;
UINT16      minor1;
UINT16      minor2;
} NCRYPT_PCP_TPM_FW_VERSION_INFO;
typedef struct __NCRYPT_PCP_RAW_POLICYDIGEST
DWORD   dwVersion;
DWORD   cbDigest;
} NCRYPT_PCP_RAW_POLICYDIGEST_INFO;
SECURITY_STATUS
__stdcall
NCryptGetProperty(
NCRYPT_HANDLE hObject,
LPCWSTR pszProperty,
PBYTE pbOutput,
DWORD   cbOutput,
DWORD * pcbResult,
DWORD   dwFlags);
SECURITY_STATUS
__stdcall
NCryptSetProperty(
NCRYPT_HANDLE hObject,
LPCWSTR pszProperty,
PBYTE pbInput,
DWORD   cbInput,
DWORD   dwFlags);
SECURITY_STATUS
__stdcall
NCryptFinalizeKey(
NCRYPT_KEY_HANDLE hKey,
DWORD   dwFlags);
SECURITY_STATUS
__stdcall
NCryptEncrypt(
NCRYPT_KEY_HANDLE hKey,
PBYTE pbInput,
DWORD   cbInput,
VOID *pPaddingInfo,
PBYTE pbOutput,
DWORD   cbOutput,
DWORD * pcbResult,
DWORD   dwFlags);
SECURITY_STATUS
__stdcall
NCryptDecrypt(
NCRYPT_KEY_HANDLE hKey,
PBYTE pbInput,
DWORD   cbInput,
VOID *pPaddingInfo,
PBYTE pbOutput,
DWORD   cbOutput,
DWORD * pcbResult,
DWORD   dwFlags);
typedef struct _NCRYPT_KEY_BLOB_HEADER
ULONG   cbSize;             
ULONG   dwMagic;
ULONG   cbAlgName;          
ULONG   cbKeyData;
} NCRYPT_KEY_BLOB_HEADER, *PNCRYPT_KEY_BLOB_HEADER;
typedef struct NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER
DWORD magic;
DWORD cbHeader;
DWORD cbPublic;
DWORD cbPrivate;
DWORD cbName;
} NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER, *PNCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER;
SECURITY_STATUS
__stdcall
NCryptImportKey(
NCRYPT_PROV_HANDLE hProvider,
NCRYPT_KEY_HANDLE hImportKey,
LPCWSTR pszBlobType,
NCryptBufferDesc *pParameterList,
NCRYPT_KEY_HANDLE *phKey,
PBYTE pbData,
DWORD   cbData,
DWORD   dwFlags);
SECURITY_STATUS
__stdcall
NCryptExportKey(
NCRYPT_KEY_HANDLE hKey,
NCRYPT_KEY_HANDLE hExportKey,
LPCWSTR pszBlobType,
NCryptBufferDesc *pParameterList,
PBYTE pbOutput,
DWORD   cbOutput,
DWORD * pcbResult,
DWORD   dwFlags);
SECURITY_STATUS
__stdcall
NCryptSignHash(
NCRYPT_KEY_HANDLE hKey,
VOID *pPaddingInfo,
PBYTE pbHashValue,
DWORD   cbHashValue,
PBYTE pbSignature,
DWORD   cbSignature,
DWORD * pcbResult,
DWORD   dwFlags);
SECURITY_STATUS
__stdcall
NCryptVerifySignature(
NCRYPT_KEY_HANDLE hKey,
VOID *pPaddingInfo,
PBYTE pbHashValue,
DWORD   cbHashValue,
PBYTE pbSignature,
DWORD   cbSignature,
DWORD   dwFlags);
SECURITY_STATUS
__stdcall
NCryptDeleteKey(
NCRYPT_KEY_HANDLE hKey,
DWORD   dwFlags);
SECURITY_STATUS
__stdcall
NCryptFreeObject(
NCRYPT_HANDLE hObject);
#pragma region Desktop Family or OneCore Family
__stdcall
NCryptIsKeyHandle(
NCRYPT_KEY_HANDLE hKey);
SECURITY_STATUS
__stdcall
NCryptTranslateHandle(
NCRYPT_PROV_HANDLE *phProvider,
NCRYPT_KEY_HANDLE *phKey,
HCRYPTPROV hLegacyProv,
HCRYPTKEY hLegacyKey,
DWORD  dwLegacyKeySpec,
DWORD   dwFlags);
#pragma endregion
#pragma region Desktop Family or OneCore Family
SECURITY_STATUS
__stdcall
NCryptNotifyChangeKey(
NCRYPT_PROV_HANDLE hProvider,
HANDLE *phEvent,
DWORD   dwFlags);
#pragma endregion
SECURITY_STATUS
__stdcall
NCryptSecretAgreement(
NCRYPT_KEY_HANDLE hPrivKey,
NCRYPT_KEY_HANDLE hPubKey,
NCRYPT_SECRET_HANDLE *phAgreedSecret,
DWORD   dwFlags);
SECURITY_STATUS
__stdcall
NCryptDeriveKey(
NCRYPT_SECRET_HANDLE hSharedSecret,
LPCWSTR              pwszKDF,
NCryptBufferDesc     *pParameterList,
PBYTE pbDerivedKey,
DWORD                cbDerivedKey,
DWORD                *pcbResult,
ULONG                dwFlags);
SECURITY_STATUS
__stdcall
NCryptKeyDerivation(
NCRYPT_KEY_HANDLE   hKey,
NCryptBufferDesc    *pParameterList,
PUCHAR pbDerivedKey,
DWORD               cbDerivedKey,
DWORD               *pcbResult,
ULONG               dwFlags);
SECURITY_STATUS
__stdcall
NCryptCreateClaim(
NCRYPT_KEY_HANDLE   hSubjectKey,
NCRYPT_KEY_HANDLE   hAuthorityKey,
DWORD               dwClaimType,
NCryptBufferDesc    *pParameterList,
PBYTE pbClaimBlob,
DWORD               cbClaimBlob,
DWORD               *pcbResult,
DWORD               dwFlags);
SECURITY_STATUS
__stdcall
NCryptVerifyClaim(
NCRYPT_KEY_HANDLE   hSubjectKey,
NCRYPT_KEY_HANDLE   hAuthorityKey,
DWORD               dwClaimType,
NCryptBufferDesc    *pParameterList,
PBYTE pbClaimBlob,
DWORD               cbClaimBlob,
NCryptBufferDesc    *pOutput,
DWORD               dwFlags);
#pragma warning(pop)
typedef ULONG_PTR HCRYPTPROV_OR_NCRYPT_KEY_HANDLE;
typedef ULONG_PTR HCRYPTPROV_LEGACY;
typedef struct _CRYPT_BIT_BLOB {
DWORD   cbData;
BYTE    *pbData;
DWORD   cUnusedBits;
} CRYPT_BIT_BLOB, *PCRYPT_BIT_BLOB;
typedef struct _CRYPT_ALGORITHM_IDENTIFIER {
LPSTR               pszObjId;
CRYPT_OBJID_BLOB    Parameters;
} CRYPT_ALGORITHM_IDENTIFIER, *PCRYPT_ALGORITHM_IDENTIFIER;
typedef struct _CRYPT_OBJID_TABLE {
DWORD   dwAlgId;
LPCSTR  pszObjId;
} CRYPT_OBJID_TABLE, *PCRYPT_OBJID_TABLE;
typedef struct _CRYPT_HASH_INFO {
CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
CRYPT_HASH_BLOB             Hash;
} CRYPT_HASH_INFO, *PCRYPT_HASH_INFO;
typedef struct _CERT_EXTENSION {
LPSTR               pszObjId;
BOOL                fCritical;
CRYPT_OBJID_BLOB    Value;
} CERT_EXTENSION, *PCERT_EXTENSION;
typedef const CERT_EXTENSION* PCCERT_EXTENSION;
typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE {
LPSTR               pszObjId;
CRYPT_OBJID_BLOB    Value;
} CRYPT_ATTRIBUTE_TYPE_VALUE, *PCRYPT_ATTRIBUTE_TYPE_VALUE;
typedef struct _CRYPT_ATTRIBUTE {
LPSTR               pszObjId;
DWORD               cValue;
PCRYPT_ATTR_BLOB    rgValue;
} CRYPT_ATTRIBUTE, *PCRYPT_ATTRIBUTE;
typedef struct _CRYPT_ATTRIBUTES {
DWORD                cAttr;
PCRYPT_ATTRIBUTE     rgAttr;
} CRYPT_ATTRIBUTES, *PCRYPT_ATTRIBUTES;
typedef struct _CERT_RDN_ATTR {
LPSTR                   pszObjId;
DWORD                   dwValueType;
CERT_RDN_VALUE_BLOB     Value;
} CERT_RDN_ATTR, *PCERT_RDN_ATTR;
typedef struct _CERT_RDN {
DWORD           cRDNAttr;
PCERT_RDN_ATTR  rgRDNAttr;
} CERT_RDN, *PCERT_RDN;
typedef struct _CERT_NAME_INFO {
DWORD       cRDN;
PCERT_RDN   rgRDN;
} CERT_NAME_INFO, *PCERT_NAME_INFO;
typedef struct _CERT_NAME_VALUE {
DWORD               dwValueType;
CERT_RDN_VALUE_BLOB Value;
} CERT_NAME_VALUE, *PCERT_NAME_VALUE;
typedef struct _CERT_PUBLIC_KEY_INFO {
CRYPT_ALGORITHM_IDENTIFIER    Algorithm;
CRYPT_BIT_BLOB                PublicKey;
} CERT_PUBLIC_KEY_INFO, *PCERT_PUBLIC_KEY_INFO;
typedef struct _CRYPT_ECC_PRIVATE_KEY_INFO{
DWORD                       dwVersion;  
CRYPT_DER_BLOB              PrivateKey; 
LPSTR                       szCurveOid; 
CRYPT_BIT_BLOB              PublicKey;  
}  CRYPT_ECC_PRIVATE_KEY_INFO, *PCRYPT_ECC_PRIVATE_KEY_INFO;
typedef struct _CRYPT_PRIVATE_KEY_INFO{
DWORD                       Version;
CRYPT_ALGORITHM_IDENTIFIER  Algorithm;
CRYPT_DER_BLOB              PrivateKey;
PCRYPT_ATTRIBUTES           pAttributes;
}  CRYPT_PRIVATE_KEY_INFO, *PCRYPT_PRIVATE_KEY_INFO;
typedef struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO{
CRYPT_ALGORITHM_IDENTIFIER  EncryptionAlgorithm;
CRYPT_DATA_BLOB             EncryptedPrivateKey;
} CRYPT_ENCRYPTED_PRIVATE_KEY_INFO, *PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
typedef BOOL (__stdcall *PCRYPT_DECRYPT_PRIVATE_KEY_FUNC)(
CRYPT_ALGORITHM_IDENTIFIER Algorithm,
CRYPT_DATA_BLOB EncryptedPrivateKey,
BYTE* pbClearTextKey,
DWORD* pcbClearTextKey,
LPVOID pVoidDecryptFunc);
typedef BOOL (__stdcall *PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC)(
CRYPT_ALGORITHM_IDENTIFIER* pAlgorithm,
CRYPT_DATA_BLOB* pClearTextPrivateKey,
BYTE* pbEncryptedKey,
DWORD* pcbEncryptedKey,
LPVOID pVoidEncryptFunc);
typedef BOOL (__stdcall *PCRYPT_RESOLVE_HCRYPTPROV_FUNC)(
CRYPT_PRIVATE_KEY_INFO      *pPrivateKeyInfo,
HCRYPTPROV                  *phCryptProv,
LPVOID                      pVoidResolveFunc);
typedef struct _CRYPT_PKCS8_IMPORT_PARAMS{
CRYPT_DIGEST_BLOB               PrivateKey;             
PCRYPT_RESOLVE_HCRYPTPROV_FUNC  pResolvehCryptProvFunc; 
LPVOID                          pVoidResolveFunc;       
PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc;
LPVOID                          pVoidDecryptFunc;
} CRYPT_PKCS8_IMPORT_PARAMS, *PCRYPT_PKCS8_IMPORT_PARAMS, CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS, *PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;
typedef struct _CRYPT_PKCS8_EXPORT_PARAMS{
HCRYPTPROV                      hCryptProv;
DWORD                           dwKeySpec;
LPSTR                           pszPrivateKeyObjId;
PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pEncryptPrivateKeyFunc;
LPVOID                          pVoidEncryptFunc;
} CRYPT_PKCS8_EXPORT_PARAMS, *PCRYPT_PKCS8_EXPORT_PARAMS;
typedef struct _CERT_INFO {
DWORD                       dwVersion;
CRYPT_INTEGER_BLOB          SerialNumber;
CRYPT_ALGORITHM_IDENTIFIER  SignatureAlgorithm;
CERT_NAME_BLOB              Issuer;
FILETIME                    NotBefore;
FILETIME                    NotAfter;
CERT_NAME_BLOB              Subject;
CERT_PUBLIC_KEY_INFO        SubjectPublicKeyInfo;
CRYPT_BIT_BLOB              IssuerUniqueId;
CRYPT_BIT_BLOB              SubjectUniqueId;
DWORD                       cExtension;
PCERT_EXTENSION             rgExtension;
} CERT_INFO, *PCERT_INFO;
typedef struct _CRL_ENTRY {
CRYPT_INTEGER_BLOB  SerialNumber;
FILETIME            RevocationDate;
DWORD               cExtension;
PCERT_EXTENSION     rgExtension;
} CRL_ENTRY, *PCRL_ENTRY;
typedef struct _CRL_INFO {
DWORD                       dwVersion;
CRYPT_ALGORITHM_IDENTIFIER  SignatureAlgorithm;
CERT_NAME_BLOB              Issuer;
FILETIME                    ThisUpdate;
FILETIME                    NextUpdate;
DWORD                       cCRLEntry;
PCRL_ENTRY                  rgCRLEntry;
DWORD                       cExtension;
PCERT_EXTENSION             rgExtension;
} CRL_INFO, *PCRL_INFO;
typedef struct _CERT_OR_CRL_BLOB {
DWORD                   dwChoice;
DWORD                   cbEncoded;
BYTE                    *pbEncoded;
} CERT_OR_CRL_BLOB, * PCERT_OR_CRL_BLOB;
typedef struct _CERT_OR_CRL_BUNDLE {
DWORD                   cItem;
PCERT_OR_CRL_BLOB       rgItem;
} CERT_OR_CRL_BUNDLE, *PCERT_OR_CRL_BUNDLE;
typedef struct _CERT_REQUEST_INFO {
DWORD                   dwVersion;
CERT_NAME_BLOB          Subject;
CERT_PUBLIC_KEY_INFO    SubjectPublicKeyInfo;
DWORD                   cAttribute;
PCRYPT_ATTRIBUTE        rgAttribute;
} CERT_REQUEST_INFO, *PCERT_REQUEST_INFO;
typedef struct _CERT_KEYGEN_REQUEST_INFO {
DWORD                   dwVersion;
CERT_PUBLIC_KEY_INFO    SubjectPublicKeyInfo;
LPWSTR                  pwszChallengeString;        
} CERT_KEYGEN_REQUEST_INFO, *PCERT_KEYGEN_REQUEST_INFO;
typedef struct _CERT_SIGNED_CONTENT_INFO {
CRYPT_DER_BLOB              ToBeSigned;
CRYPT_ALGORITHM_IDENTIFIER  SignatureAlgorithm;
CRYPT_BIT_BLOB              Signature;
} CERT_SIGNED_CONTENT_INFO, *PCERT_SIGNED_CONTENT_INFO;
typedef struct _CTL_USAGE {
DWORD               cUsageIdentifier;
LPSTR               *rgpszUsageIdentifier;      
} CTL_USAGE, *PCTL_USAGE,
CERT_ENHKEY_USAGE, *PCERT_ENHKEY_USAGE;
typedef const CTL_USAGE* PCCTL_USAGE;
typedef const CERT_ENHKEY_USAGE* PCCERT_ENHKEY_USAGE;
typedef struct _CTL_ENTRY {
CRYPT_DATA_BLOB     SubjectIdentifier;          
DWORD               cAttribute;
PCRYPT_ATTRIBUTE    rgAttribute;                
} CTL_ENTRY, *PCTL_ENTRY;
typedef struct _CTL_INFO {
DWORD                       dwVersion;
CTL_USAGE                   SubjectUsage;
CRYPT_DATA_BLOB             ListIdentifier;     
CRYPT_INTEGER_BLOB          SequenceNumber;     
FILETIME                    ThisUpdate;
FILETIME                    NextUpdate;         
CRYPT_ALGORITHM_IDENTIFIER  SubjectAlgorithm;
DWORD                       cCTLEntry;
PCTL_ENTRY                  rgCTLEntry;         
DWORD                       cExtension;
PCERT_EXTENSION             rgExtension;        
} CTL_INFO, *PCTL_INFO;
typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO {
LPSTR                   pszTimeStampAlgorithm;   
LPSTR                   pszContentType;          
CRYPT_OBJID_BLOB        Content;
DWORD                   cAttribute;
PCRYPT_ATTRIBUTE        rgAttribute;
} CRYPT_TIME_STAMP_REQUEST_INFO, *PCRYPT_TIME_STAMP_REQUEST_INFO;
typedef struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR {
LPWSTR      pwszName;
LPWSTR      pwszValue;
} CRYPT_ENROLLMENT_NAME_VALUE_PAIR, * PCRYPT_ENROLLMENT_NAME_VALUE_PAIR;
typedef struct _CRYPT_CSP_PROVIDER {
DWORD           dwKeySpec;
LPWSTR          pwszProviderName;
CRYPT_BIT_BLOB  Signature;
} CRYPT_CSP_PROVIDER, * PCRYPT_CSP_PROVIDER;
__stdcall
CryptFormatObject(
DWORD dwCertEncodingType,
DWORD dwFormatType,
DWORD dwFormatStrType,
void *pFormatStruct,
LPCSTR lpszStructType,
const BYTE *pbEncoded,
DWORD cbEncoded,
void *pbFormat,
DWORD *pcbFormat
typedef LPVOID (__stdcall *PFN_CRYPT_ALLOC)(
size_t cbSize
typedef VOID (__stdcall *PFN_CRYPT_FREE)(
LPVOID pv
typedef struct _CRYPT_ENCODE_PARA {
DWORD                   cbSize;
PFN_CRYPT_ALLOC         pfnAlloc;           
PFN_CRYPT_FREE          pfnFree;            
} CRYPT_ENCODE_PARA, *PCRYPT_ENCODE_PARA;
__stdcall
CryptEncodeObjectEx(
DWORD dwCertEncodingType,
LPCSTR lpszStructType,
const void *pvStructInfo,
DWORD dwFlags,
PCRYPT_ENCODE_PARA pEncodePara,
void *pvEncoded,
DWORD *pcbEncoded
__stdcall
CryptEncodeObject(
DWORD dwCertEncodingType,
LPCSTR lpszStructType,
const void *pvStructInfo,
BYTE *pbEncoded,
DWORD *pcbEncoded
typedef struct _CRYPT_DECODE_PARA {
DWORD                   cbSize;
PFN_CRYPT_ALLOC         pfnAlloc;           
PFN_CRYPT_FREE          pfnFree;            
} CRYPT_DECODE_PARA, *PCRYPT_DECODE_PARA;
__stdcall
CryptDecodeObjectEx(
DWORD dwCertEncodingType,
LPCSTR lpszStructType,
const BYTE *pbEncoded,
DWORD cbEncoded,
DWORD dwFlags,
PCRYPT_DECODE_PARA pDecodePara,
void *pvStructInfo,
DWORD *pcbStructInfo
__stdcall
CryptDecodeObject(
DWORD dwCertEncodingType,
LPCSTR lpszStructType,
const BYTE *pbEncoded,
DWORD cbEncoded,
DWORD dwFlags,
void *pvStructInfo,
DWORD *pcbStructInfo
typedef struct _CERT_EXTENSIONS {
DWORD           cExtension;
PCERT_EXTENSION rgExtension;
} CERT_EXTENSIONS, *PCERT_EXTENSIONS;
typedef struct _CERT_AUTHORITY_KEY_ID_INFO {
CRYPT_DATA_BLOB     KeyId;
CERT_NAME_BLOB      CertIssuer;
CRYPT_INTEGER_BLOB  CertSerialNumber;
} CERT_AUTHORITY_KEY_ID_INFO, *PCERT_AUTHORITY_KEY_ID_INFO;
typedef struct _CERT_PRIVATE_KEY_VALIDITY {
FILETIME            NotBefore;
FILETIME            NotAfter;
} CERT_PRIVATE_KEY_VALIDITY, *PCERT_PRIVATE_KEY_VALIDITY;
typedef struct _CERT_KEY_ATTRIBUTES_INFO {
CRYPT_DATA_BLOB             KeyId;
CRYPT_BIT_BLOB              IntendedKeyUsage;
PCERT_PRIVATE_KEY_VALIDITY  pPrivateKeyUsagePeriod;     
} CERT_KEY_ATTRIBUTES_INFO, *PCERT_KEY_ATTRIBUTES_INFO;
typedef struct _CERT_POLICY_ID {
DWORD                   cCertPolicyElementId;
LPSTR                   *rgpszCertPolicyElementId;  
} CERT_POLICY_ID, *PCERT_POLICY_ID;
typedef struct _CERT_KEY_USAGE_RESTRICTION_INFO {
DWORD                   cCertPolicyId;
PCERT_POLICY_ID         rgCertPolicyId;
CRYPT_BIT_BLOB          RestrictedKeyUsage;
} CERT_KEY_USAGE_RESTRICTION_INFO, *PCERT_KEY_USAGE_RESTRICTION_INFO;
typedef struct _CERT_OTHER_NAME {
LPSTR               pszObjId;
CRYPT_OBJID_BLOB    Value;
} CERT_OTHER_NAME, *PCERT_OTHER_NAME;
typedef struct _CERT_ALT_NAME_ENTRY {
DWORD   dwAltNameChoice;
union {                                             
PCERT_OTHER_NAME            pOtherName;         
LPWSTR                      pwszRfc822Name;     
LPWSTR                      pwszDNSName;        
CERT_NAME_BLOB              DirectoryName;      
LPWSTR                      pwszURL;            
CRYPT_DATA_BLOB             IPAddress;          
LPSTR                       pszRegisteredID;    
} DUMMYUNIONNAME;                                   
} CERT_ALT_NAME_ENTRY, *PCERT_ALT_NAME_ENTRY;
typedef struct _CERT_ALT_NAME_INFO {
DWORD                   cAltEntry;
PCERT_ALT_NAME_ENTRY    rgAltEntry;
} CERT_ALT_NAME_INFO, *PCERT_ALT_NAME_INFO;
typedef struct _CERT_BASIC_CONSTRAINTS_INFO {
CRYPT_BIT_BLOB          SubjectType;
BOOL                    fPathLenConstraint;
DWORD                   dwPathLenConstraint;
DWORD                   cSubtreesConstraint;
CERT_NAME_BLOB          *rgSubtreesConstraint;
} CERT_BASIC_CONSTRAINTS_INFO, *PCERT_BASIC_CONSTRAINTS_INFO;
typedef struct _CERT_BASIC_CONSTRAINTS2_INFO {
BOOL                    fCA;
BOOL                    fPathLenConstraint;
DWORD                   dwPathLenConstraint;
} CERT_BASIC_CONSTRAINTS2_INFO, *PCERT_BASIC_CONSTRAINTS2_INFO;
typedef struct _CERT_POLICY_QUALIFIER_INFO {
LPSTR                       pszPolicyQualifierId;   
CRYPT_OBJID_BLOB            Qualifier;              
} CERT_POLICY_QUALIFIER_INFO, *PCERT_POLICY_QUALIFIER_INFO;
typedef struct _CERT_POLICY_INFO {
LPSTR                       pszPolicyIdentifier;    
DWORD                       cPolicyQualifier;       
CERT_POLICY_QUALIFIER_INFO  *rgPolicyQualifier;
} CERT_POLICY_INFO, *PCERT_POLICY_INFO;
typedef struct _CERT_POLICIES_INFO {
DWORD                       cPolicyInfo;
CERT_POLICY_INFO            *rgPolicyInfo;
} CERT_POLICIES_INFO, *PCERT_POLICIES_INFO;
typedef struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE {
LPSTR   pszOrganization;
DWORD   cNoticeNumbers;
int     *rgNoticeNumbers;
} CERT_POLICY_QUALIFIER_NOTICE_REFERENCE, *PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
typedef struct _CERT_POLICY_QUALIFIER_USER_NOTICE {
CERT_POLICY_QUALIFIER_NOTICE_REFERENCE  *pNoticeReference;  
LPWSTR                                  pszDisplayText;     
} CERT_POLICY_QUALIFIER_USER_NOTICE, *PCERT_POLICY_QUALIFIER_USER_NOTICE;
typedef struct _CPS_URLS {
LPWSTR                      pszURL;
CRYPT_ALGORITHM_IDENTIFIER  *pAlgorithm; 
CRYPT_DATA_BLOB             *pDigest;    
} CPS_URLS, *PCPS_URLS;
typedef struct _CERT_POLICY95_QUALIFIER1 {
LPWSTR      pszPracticesReference;      
LPSTR       pszNoticeIdentifier;        
LPSTR       pszNSINoticeIdentifier;     
DWORD       cCPSURLs;
CPS_URLS    *rgCPSURLs;                 
} CERT_POLICY95_QUALIFIER1, *PCERT_POLICY95_QUALIFIER1;
typedef struct _CERT_POLICY_MAPPING {
LPSTR                       pszIssuerDomainPolicy;      
LPSTR                       pszSubjectDomainPolicy;     
} CERT_POLICY_MAPPING, *PCERT_POLICY_MAPPING;
typedef struct _CERT_POLICY_MAPPINGS_INFO {
DWORD                       cPolicyMapping;
PCERT_POLICY_MAPPING        rgPolicyMapping;
} CERT_POLICY_MAPPINGS_INFO, *PCERT_POLICY_MAPPINGS_INFO;
typedef struct _CERT_POLICY_CONSTRAINTS_INFO {
BOOL                        fRequireExplicitPolicy;
DWORD                       dwRequireExplicitPolicySkipCerts;
BOOL                        fInhibitPolicyMapping;
DWORD                       dwInhibitPolicyMappingSkipCerts;
} CERT_POLICY_CONSTRAINTS_INFO, *PCERT_POLICY_CONSTRAINTS_INFO;
typedef struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY {
LPSTR               pszObjId;
DWORD               cValue;
PCRYPT_DER_BLOB     rgValue;
} CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY, *PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
typedef struct _CRYPT_CONTENT_INFO {
LPSTR               pszObjId;
CRYPT_DER_BLOB      Content;
} CRYPT_CONTENT_INFO, *PCRYPT_CONTENT_INFO;
typedef struct _CRYPT_SEQUENCE_OF_ANY {
DWORD               cValue;
PCRYPT_DER_BLOB     rgValue;
} CRYPT_SEQUENCE_OF_ANY, *PCRYPT_SEQUENCE_OF_ANY;
typedef struct _CERT_AUTHORITY_KEY_ID2_INFO {
CRYPT_DATA_BLOB     KeyId;
CERT_ALT_NAME_INFO  AuthorityCertIssuer;    
CRYPT_INTEGER_BLOB  AuthorityCertSerialNumber;
} CERT_AUTHORITY_KEY_ID2_INFO, *PCERT_AUTHORITY_KEY_ID2_INFO;
typedef struct _CERT_ACCESS_DESCRIPTION {
LPSTR               pszAccessMethod;        
CERT_ALT_NAME_ENTRY AccessLocation;
} CERT_ACCESS_DESCRIPTION, *PCERT_ACCESS_DESCRIPTION;
typedef struct _CERT_AUTHORITY_INFO_ACCESS {
DWORD                       cAccDescr;
PCERT_ACCESS_DESCRIPTION    rgAccDescr;
} CERT_AUTHORITY_INFO_ACCESS, *PCERT_AUTHORITY_INFO_ACCESS,
CERT_SUBJECT_INFO_ACCESS, *PCERT_SUBJECT_INFO_ACCESS;
typedef struct _CRL_DIST_POINT_NAME {
DWORD   dwDistPointNameChoice;
union {
CERT_ALT_NAME_INFO      FullName;       
} DUMMYUNIONNAME;
} CRL_DIST_POINT_NAME, *PCRL_DIST_POINT_NAME;
typedef struct _CRL_DIST_POINT {
CRL_DIST_POINT_NAME     DistPointName;      
CRYPT_BIT_BLOB          ReasonFlags;        
CERT_ALT_NAME_INFO      CRLIssuer;          
} CRL_DIST_POINT, *PCRL_DIST_POINT;
typedef struct _CRL_DIST_POINTS_INFO {
DWORD                   cDistPoint;
PCRL_DIST_POINT         rgDistPoint;
} CRL_DIST_POINTS_INFO, *PCRL_DIST_POINTS_INFO;
typedef struct _CROSS_CERT_DIST_POINTS_INFO {
DWORD                   dwSyncDeltaTime;
DWORD                   cDistPoint;
PCERT_ALT_NAME_INFO     rgDistPoint;
} CROSS_CERT_DIST_POINTS_INFO, *PCROSS_CERT_DIST_POINTS_INFO;
typedef struct _CERT_PAIR {
CERT_BLOB    Forward;        
CERT_BLOB    Reverse;        
} CERT_PAIR, *PCERT_PAIR;
typedef struct _CRL_ISSUING_DIST_POINT {
CRL_DIST_POINT_NAME     DistPointName;              
BOOL                    fOnlyContainsUserCerts;
BOOL                    fOnlyContainsCACerts;
CRYPT_BIT_BLOB          OnlySomeReasonFlags;        
BOOL                    fIndirectCRL;
} CRL_ISSUING_DIST_POINT, *PCRL_ISSUING_DIST_POINT;
typedef struct _CERT_GENERAL_SUBTREE {
CERT_ALT_NAME_ENTRY     Base;
DWORD                   dwMinimum;
BOOL                    fMaximum;
DWORD                   dwMaximum;
} CERT_GENERAL_SUBTREE, *PCERT_GENERAL_SUBTREE;
typedef struct _CERT_NAME_CONSTRAINTS_INFO {
DWORD                   cPermittedSubtree;
PCERT_GENERAL_SUBTREE   rgPermittedSubtree;
DWORD                   cExcludedSubtree;
PCERT_GENERAL_SUBTREE   rgExcludedSubtree;
} CERT_NAME_CONSTRAINTS_INFO, *PCERT_NAME_CONSTRAINTS_INFO;
typedef struct _CERT_DSS_PARAMETERS {
CRYPT_UINT_BLOB     p;
CRYPT_UINT_BLOB     q;
CRYPT_UINT_BLOB     g;
} CERT_DSS_PARAMETERS, *PCERT_DSS_PARAMETERS;
typedef struct _CERT_DH_PARAMETERS {
CRYPT_UINT_BLOB     p;
CRYPT_UINT_BLOB     g;
} CERT_DH_PARAMETERS, *PCERT_DH_PARAMETERS;
typedef struct _CERT_ECC_SIGNATURE {
CRYPT_UINT_BLOB     r;
CRYPT_UINT_BLOB     s;
} CERT_ECC_SIGNATURE, *PCERT_ECC_SIGNATURE;
typedef struct _CERT_X942_DH_VALIDATION_PARAMS {
CRYPT_BIT_BLOB      seed;
DWORD               pgenCounter;
} CERT_X942_DH_VALIDATION_PARAMS, *PCERT_X942_DH_VALIDATION_PARAMS;
typedef struct _CERT_X942_DH_PARAMETERS {
CRYPT_UINT_BLOB     p;          
CRYPT_UINT_BLOB     g;          
CRYPT_UINT_BLOB     q;          
CRYPT_UINT_BLOB     j;          
PCERT_X942_DH_VALIDATION_PARAMS pValidationParams;  
} CERT_X942_DH_PARAMETERS, *PCERT_X942_DH_PARAMETERS;
typedef struct _CRYPT_X942_OTHER_INFO {
LPSTR               pszContentEncryptionObjId;
BYTE                rgbCounter[4];
BYTE                rgbKeyLength[4];
CRYPT_DATA_BLOB     PubInfo;    
} CRYPT_X942_OTHER_INFO, *PCRYPT_X942_OTHER_INFO;
typedef struct _CRYPT_ECC_CMS_SHARED_INFO {
CRYPT_ALGORITHM_IDENTIFIER  Algorithm;
CRYPT_DATA_BLOB             EntityUInfo;    
BYTE                        rgbSuppPubInfo[4];
} CRYPT_ECC_CMS_SHARED_INFO, *PCRYPT_ECC_CMS_SHARED_INFO;
typedef struct _CRYPT_RC2_CBC_PARAMETERS {
DWORD               dwVersion;
BOOL                fIV;            
BYTE                rgbIV[8];
} CRYPT_RC2_CBC_PARAMETERS, *PCRYPT_RC2_CBC_PARAMETERS;
typedef struct _CRYPT_SMIME_CAPABILITY {
LPSTR               pszObjId;
CRYPT_OBJID_BLOB    Parameters;
} CRYPT_SMIME_CAPABILITY, *PCRYPT_SMIME_CAPABILITY;
typedef struct _CRYPT_SMIME_CAPABILITIES {
DWORD                   cCapability;
PCRYPT_SMIME_CAPABILITY rgCapability;
} CRYPT_SMIME_CAPABILITIES, *PCRYPT_SMIME_CAPABILITIES;
typedef struct _CERT_QC_STATEMENT {
LPSTR               pszStatementId;     
CRYPT_OBJID_BLOB    StatementInfo;      
} CERT_QC_STATEMENT, *PCERT_QC_STATEMENT;
typedef struct _CERT_QC_STATEMENTS_EXT_INFO {
DWORD                   cStatement;
PCERT_QC_STATEMENT      rgStatement;
} CERT_QC_STATEMENTS_EXT_INFO, *PCERT_QC_STATEMENTS_EXT_INFO;
typedef struct _CRYPT_MASK_GEN_ALGORITHM {
LPSTR                       pszObjId;
CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
} CRYPT_MASK_GEN_ALGORITHM, *PCRYPT_MASK_GEN_ALGORITHM;
typedef struct _CRYPT_RSA_SSA_PSS_PARAMETERS {
CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
CRYPT_MASK_GEN_ALGORITHM    MaskGenAlgorithm;
DWORD                       dwSaltLength;
DWORD                       dwTrailerField;
} CRYPT_RSA_SSA_PSS_PARAMETERS, *PCRYPT_RSA_SSA_PSS_PARAMETERS;
typedef struct _CRYPT_PSOURCE_ALGORITHM {
LPSTR                       pszObjId;
CRYPT_DATA_BLOB             EncodingParameters;
} CRYPT_PSOURCE_ALGORITHM, *PCRYPT_PSOURCE_ALGORITHM;
typedef struct _CRYPT_RSAES_OAEP_PARAMETERS {
CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
CRYPT_MASK_GEN_ALGORITHM    MaskGenAlgorithm;
CRYPT_PSOURCE_ALGORITHM     PSourceAlgorithm;
} CRYPT_RSAES_OAEP_PARAMETERS, *PCRYPT_RSAES_OAEP_PARAMETERS;
typedef struct _CMC_TAGGED_ATTRIBUTE {
DWORD               dwBodyPartID;
CRYPT_ATTRIBUTE     Attribute;
} CMC_TAGGED_ATTRIBUTE, *PCMC_TAGGED_ATTRIBUTE;
typedef struct _CMC_TAGGED_CERT_REQUEST {
DWORD               dwBodyPartID;
CRYPT_DER_BLOB      SignedCertRequest;
} CMC_TAGGED_CERT_REQUEST, *PCMC_TAGGED_CERT_REQUEST;
typedef struct _CMC_TAGGED_REQUEST {
DWORD               dwTaggedRequestChoice;
union {
PCMC_TAGGED_CERT_REQUEST   pTaggedCertRequest;
} DUMMYUNIONNAME;
} CMC_TAGGED_REQUEST, *PCMC_TAGGED_REQUEST;
typedef struct _CMC_TAGGED_CONTENT_INFO {
DWORD               dwBodyPartID;
CRYPT_DER_BLOB      EncodedContentInfo;
} CMC_TAGGED_CONTENT_INFO, *PCMC_TAGGED_CONTENT_INFO;
typedef struct _CMC_TAGGED_OTHER_MSG {
DWORD               dwBodyPartID;
LPSTR               pszObjId;
CRYPT_OBJID_BLOB    Value;
} CMC_TAGGED_OTHER_MSG, *PCMC_TAGGED_OTHER_MSG;
typedef struct _CMC_DATA_INFO {
DWORD                       cTaggedAttribute;
PCMC_TAGGED_ATTRIBUTE       rgTaggedAttribute;
DWORD                       cTaggedRequest;
PCMC_TAGGED_REQUEST         rgTaggedRequest;
DWORD                       cTaggedContentInfo;
PCMC_TAGGED_CONTENT_INFO    rgTaggedContentInfo;
DWORD                       cTaggedOtherMsg;
PCMC_TAGGED_OTHER_MSG       rgTaggedOtherMsg;
} CMC_DATA_INFO, *PCMC_DATA_INFO;
typedef struct _CMC_RESPONSE_INFO {
DWORD                       cTaggedAttribute;
PCMC_TAGGED_ATTRIBUTE       rgTaggedAttribute;
DWORD                       cTaggedContentInfo;
PCMC_TAGGED_CONTENT_INFO    rgTaggedContentInfo;
DWORD                       cTaggedOtherMsg;
PCMC_TAGGED_OTHER_MSG       rgTaggedOtherMsg;
} CMC_RESPONSE_INFO, *PCMC_RESPONSE_INFO;
typedef struct _CMC_PEND_INFO {
CRYPT_DATA_BLOB             PendToken;
FILETIME                    PendTime;
} CMC_PEND_INFO, *PCMC_PEND_INFO;
typedef struct _CMC_STATUS_INFO {
DWORD                       dwStatus;
DWORD                       cBodyList;
DWORD                       *rgdwBodyList;
LPWSTR                      pwszStatusString;   
DWORD                       dwOtherInfoChoice;
union  {
DWORD                       dwFailInfo;
PCMC_PEND_INFO              pPendInfo;
} DUMMYUNIONNAME;
} CMC_STATUS_INFO, *PCMC_STATUS_INFO;
typedef struct _CMC_ADD_EXTENSIONS_INFO {
DWORD                       dwCmcDataReference;
DWORD                       cCertReference;
DWORD                       *rgdwCertReference;
DWORD                       cExtension;
PCERT_EXTENSION             rgExtension;
} CMC_ADD_EXTENSIONS_INFO, *PCMC_ADD_EXTENSIONS_INFO;
typedef struct _CMC_ADD_ATTRIBUTES_INFO {
DWORD                       dwCmcDataReference;
DWORD                       cCertReference;
DWORD                       *rgdwCertReference;
DWORD                       cAttribute;
PCRYPT_ATTRIBUTE            rgAttribute;
} CMC_ADD_ATTRIBUTES_INFO, *PCMC_ADD_ATTRIBUTES_INFO;
typedef struct _CERT_TEMPLATE_EXT {
LPSTR               pszObjId;
DWORD               dwMajorVersion;
BOOL                fMinorVersion;      
DWORD               dwMinorVersion;
} CERT_TEMPLATE_EXT, *PCERT_TEMPLATE_EXT;
typedef struct _CERT_HASHED_URL {
CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
CRYPT_HASH_BLOB             Hash;
LPWSTR                      pwszUrl;    
} CERT_HASHED_URL, *PCERT_HASHED_URL;
typedef struct _CERT_LOGOTYPE_DETAILS {
LPWSTR                      pwszMimeType;   
DWORD                       cHashedUrl;
PCERT_HASHED_URL            rgHashedUrl;
} CERT_LOGOTYPE_DETAILS, *PCERT_LOGOTYPE_DETAILS;
typedef struct _CERT_LOGOTYPE_REFERENCE {
DWORD                       cHashedUrl;
PCERT_HASHED_URL            rgHashedUrl;
} CERT_LOGOTYPE_REFERENCE, *PCERT_LOGOTYPE_REFERENCE;
typedef struct _CERT_LOGOTYPE_IMAGE_INFO {
DWORD                       dwLogotypeImageInfoChoice;
DWORD                       dwFileSize;     
DWORD                       dwXSize;        
DWORD                       dwYSize;        
DWORD                       dwLogotypeImageResolutionChoice;
union {
DWORD                       dwNumBits;      
DWORD                       dwTableSize;    
} DUMMYUNIONNAME;
LPWSTR                      pwszLanguage;   
} CERT_LOGOTYPE_IMAGE_INFO, *PCERT_LOGOTYPE_IMAGE_INFO;
typedef struct _CERT_LOGOTYPE_IMAGE {
CERT_LOGOTYPE_DETAILS       LogotypeDetails;
PCERT_LOGOTYPE_IMAGE_INFO   pLogotypeImageInfo; 
} CERT_LOGOTYPE_IMAGE, *PCERT_LOGOTYPE_IMAGE;
typedef struct _CERT_LOGOTYPE_AUDIO_INFO {
DWORD                       dwFileSize;     
DWORD                       dwPlayTime;     
DWORD                       dwChannels;     
DWORD                       dwSampleRate;   
LPWSTR                      pwszLanguage;   
} CERT_LOGOTYPE_AUDIO_INFO, *PCERT_LOGOTYPE_AUDIO_INFO;
typedef struct _CERT_LOGOTYPE_AUDIO {
CERT_LOGOTYPE_DETAILS       LogotypeDetails;
PCERT_LOGOTYPE_AUDIO_INFO   pLogotypeAudioInfo; 
} CERT_LOGOTYPE_AUDIO, *PCERT_LOGOTYPE_AUDIO;
typedef struct _CERT_LOGOTYPE_DATA {
DWORD                       cLogotypeImage;
PCERT_LOGOTYPE_IMAGE        rgLogotypeImage;
DWORD                       cLogotypeAudio;
PCERT_LOGOTYPE_AUDIO        rgLogotypeAudio;
} CERT_LOGOTYPE_DATA, *PCERT_LOGOTYPE_DATA;
typedef struct _CERT_LOGOTYPE_INFO {
DWORD                       dwLogotypeInfoChoice;
union {
PCERT_LOGOTYPE_DATA         pLogotypeDirectInfo;
PCERT_LOGOTYPE_REFERENCE    pLogotypeIndirectInfo;
} DUMMYUNIONNAME;
} CERT_LOGOTYPE_INFO, *PCERT_LOGOTYPE_INFO;
typedef struct _CERT_OTHER_LOGOTYPE_INFO {
LPSTR                       pszObjId;
CERT_LOGOTYPE_INFO          LogotypeInfo;
} CERT_OTHER_LOGOTYPE_INFO, *PCERT_OTHER_LOGOTYPE_INFO;
typedef struct _CERT_LOGOTYPE_EXT_INFO {
DWORD                       cCommunityLogo;
PCERT_LOGOTYPE_INFO         rgCommunityLogo;
PCERT_LOGOTYPE_INFO         pIssuerLogo;        
PCERT_LOGOTYPE_INFO         pSubjectLogo;       
DWORD                       cOtherLogo;
PCERT_OTHER_LOGOTYPE_INFO   rgOtherLogo;
} CERT_LOGOTYPE_EXT_INFO, *PCERT_LOGOTYPE_EXT_INFO;
typedef struct _CERT_BIOMETRIC_DATA {
DWORD                       dwTypeOfBiometricDataChoice;
union {
DWORD                       dwPredefined;
LPSTR                       pszObjId;
} DUMMYUNIONNAME;
CERT_HASHED_URL             HashedUrl;      
} CERT_BIOMETRIC_DATA, *PCERT_BIOMETRIC_DATA;
typedef struct _CERT_BIOMETRIC_EXT_INFO {
DWORD                       cBiometricData;
PCERT_BIOMETRIC_DATA        rgBiometricData;
} CERT_BIOMETRIC_EXT_INFO, *PCERT_BIOMETRIC_EXT_INFO;
typedef struct _OCSP_SIGNATURE_INFO {
CRYPT_ALGORITHM_IDENTIFIER  SignatureAlgorithm;
CRYPT_BIT_BLOB              Signature;
DWORD                       cCertEncoded;
PCERT_BLOB                  rgCertEncoded;
} OCSP_SIGNATURE_INFO, *POCSP_SIGNATURE_INFO;
typedef struct _OCSP_SIGNED_REQUEST_INFO {
CRYPT_DER_BLOB              ToBeSigned;             
POCSP_SIGNATURE_INFO        pOptionalSignatureInfo; 
} OCSP_SIGNED_REQUEST_INFO, *POCSP_SIGNED_REQUEST_INFO;
typedef struct _OCSP_CERT_ID {
CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;  
CRYPT_HASH_BLOB             IssuerNameHash; 
CRYPT_HASH_BLOB             IssuerKeyHash;  
CRYPT_INTEGER_BLOB          SerialNumber;
} OCSP_CERT_ID, *POCSP_CERT_ID;
typedef struct _OCSP_REQUEST_ENTRY {
OCSP_CERT_ID                CertId;
DWORD                       cExtension;
PCERT_EXTENSION             rgExtension;
} OCSP_REQUEST_ENTRY, *POCSP_REQUEST_ENTRY;
typedef struct _OCSP_REQUEST_INFO {
DWORD                       dwVersion;
PCERT_ALT_NAME_ENTRY        pRequestorName;     
DWORD                       cRequestEntry;
POCSP_REQUEST_ENTRY         rgRequestEntry;
DWORD                       cExtension;
PCERT_EXTENSION             rgExtension;
} OCSP_REQUEST_INFO, *POCSP_REQUEST_INFO;
typedef struct _OCSP_RESPONSE_INFO {
DWORD                       dwStatus;
LPSTR                       pszObjId;   
CRYPT_OBJID_BLOB            Value;      
} OCSP_RESPONSE_INFO, *POCSP_RESPONSE_INFO;
typedef struct _OCSP_BASIC_SIGNED_RESPONSE_INFO {
CRYPT_DER_BLOB              ToBeSigned;     
OCSP_SIGNATURE_INFO         SignatureInfo;
} OCSP_BASIC_SIGNED_RESPONSE_INFO, *POCSP_BASIC_SIGNED_RESPONSE_INFO;
typedef struct _OCSP_BASIC_REVOKED_INFO {
FILETIME                    RevocationDate;
DWORD                       dwCrlReasonCode;
} OCSP_BASIC_REVOKED_INFO, *POCSP_BASIC_REVOKED_INFO;
typedef struct _OCSP_BASIC_RESPONSE_ENTRY {
OCSP_CERT_ID                CertId;
DWORD                       dwCertStatus;
union {
POCSP_BASIC_REVOKED_INFO    pRevokedInfo;
} DUMMYUNIONNAME;
FILETIME                    ThisUpdate;
FILETIME                    NextUpdate; 
DWORD                       cExtension;
PCERT_EXTENSION             rgExtension;
} OCSP_BASIC_RESPONSE_ENTRY, *POCSP_BASIC_RESPONSE_ENTRY;
typedef struct _OCSP_BASIC_RESPONSE_INFO {
DWORD                       dwVersion;
DWORD                       dwResponderIdChoice;
union {
CERT_NAME_BLOB              ByNameResponderId;
CRYPT_HASH_BLOB              ByKeyResponderId;
} DUMMYUNIONNAME;
FILETIME                    ProducedAt;
DWORD                       cResponseEntry;
POCSP_BASIC_RESPONSE_ENTRY  rgResponseEntry;
DWORD                       cExtension;
PCERT_EXTENSION             rgExtension;
} OCSP_BASIC_RESPONSE_INFO, *POCSP_BASIC_RESPONSE_INFO;
typedef struct _CERT_SUPPORTED_ALGORITHM_INFO {
CRYPT_ALGORITHM_IDENTIFIER  Algorithm;
CRYPT_BIT_BLOB              IntendedKeyUsage;       
CERT_POLICIES_INFO          IntendedCertPolicies;   
} CERT_SUPPORTED_ALGORITHM_INFO, *PCERT_SUPPORTED_ALGORITHM_INFO;
typedef struct _CERT_TPM_SPECIFICATION_INFO {
LPWSTR                      pwszFamily;             
DWORD                       dwLevel;
DWORD                       dwRevision;
} CERT_TPM_SPECIFICATION_INFO, *PCERT_TPM_SPECIFICATION_INFO;
typedef void *HCRYPTOIDFUNCSET;
typedef void *HCRYPTOIDFUNCADDR;
typedef struct _CRYPT_OID_FUNC_ENTRY {
LPCSTR  pszOID;
void    *pvFuncAddr;
} CRYPT_OID_FUNC_ENTRY, *PCRYPT_OID_FUNC_ENTRY;
__stdcall
CryptInstallOIDFunctionAddress(
HMODULE hModule,         
DWORD dwEncodingType,
LPCSTR pszFuncName,
DWORD cFuncEntry,
const CRYPT_OID_FUNC_ENTRY rgFuncEntry[],
DWORD dwFlags
HCRYPTOIDFUNCSET
__stdcall
CryptInitOIDFunctionSet(
LPCSTR pszFuncName,
DWORD dwFlags
__stdcall
CryptGetOIDFunctionAddress(
HCRYPTOIDFUNCSET hFuncSet,
DWORD dwEncodingType,
LPCSTR pszOID,
DWORD dwFlags,
void **ppvFuncAddr,
HCRYPTOIDFUNCADDR *phFuncAddr
__stdcall
CryptGetDefaultOIDDllList(
HCRYPTOIDFUNCSET hFuncSet,
DWORD dwEncodingType,
WCHAR *pwszDllList,
DWORD *pcchDllList
__stdcall
CryptGetDefaultOIDFunctionAddress(
HCRYPTOIDFUNCSET hFuncSet,
DWORD dwEncodingType,
LPCWSTR pwszDll,
DWORD dwFlags,
void **ppvFuncAddr,
HCRYPTOIDFUNCADDR *phFuncAddr
__stdcall
CryptFreeOIDFunctionAddress(
HCRYPTOIDFUNCADDR hFuncAddr,
DWORD dwFlags
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
__stdcall
CryptRegisterOIDFunction(
DWORD dwEncodingType,
LPCSTR pszFuncName,
LPCSTR pszOID,
LPCWSTR pwszDll,
LPCSTR pszOverrideFuncName
__stdcall
CryptUnregisterOIDFunction(
DWORD dwEncodingType,
LPCSTR pszFuncName,
LPCSTR pszOID
__stdcall
CryptRegisterDefaultOIDFunction(
DWORD dwEncodingType,
LPCSTR pszFuncName,
DWORD dwIndex,
LPCWSTR pwszDll
__stdcall
CryptUnregisterDefaultOIDFunction(
DWORD dwEncodingType,
LPCSTR pszFuncName,
LPCWSTR pwszDll
__stdcall
CryptSetOIDFunctionValue(
DWORD dwEncodingType,
LPCSTR pszFuncName,
LPCSTR pszOID,
LPCWSTR pwszValueName,
DWORD dwValueType,
const BYTE *pbValueData,
DWORD cbValueData
#pragma endregion
#pragma region Application Family or OneCore or Games Family
__stdcall
CryptGetOIDFunctionValue(
DWORD dwEncodingType,
LPCSTR pszFuncName,
LPCSTR pszOID,
LPCWSTR pwszValueName,
DWORD *pdwValueType,
BYTE *pbValueData,
DWORD *pcbValueData
typedef BOOL (__stdcall *PFN_CRYPT_ENUM_OID_FUNC)(
DWORD dwEncodingType,
LPCSTR pszFuncName,
LPCSTR pszOID,
DWORD cValue,
const DWORD rgdwValueType[],
LPCWSTR const rgpwszValueName[],
const BYTE * const rgpbValueData[],
const DWORD rgcbValueData[],
void *pvArg
__stdcall
CryptEnumOIDFunction(
DWORD dwEncodingType,
LPCSTR pszFuncName,
LPCSTR pszOID,
DWORD dwFlags,
void *pvArg,
PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc
typedef struct _CRYPT_OID_INFO {
DWORD           cbSize;
LPCSTR          pszOID;
LPCWSTR         pwszName;
DWORD           dwGroupId;
union {
DWORD       dwValue;
ALG_ID      Algid;
DWORD       dwLength;
} DUMMYUNIONNAME;
CRYPT_DATA_BLOB ExtraInfo;
} CRYPT_OID_INFO, *PCRYPT_OID_INFO;
typedef const CRYPT_OID_INFO CCRYPT_OID_INFO, *PCCRYPT_OID_INFO;
PCCRYPT_OID_INFO
__stdcall
CryptFindOIDInfo(
DWORD dwKeyType,
void *pvKey,
DWORD dwGroupId
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
__stdcall
CryptRegisterOIDInfo(
PCCRYPT_OID_INFO pInfo,
DWORD dwFlags
__stdcall
CryptUnregisterOIDInfo(
PCCRYPT_OID_INFO pInfo
#pragma endregion
#pragma region Application Family or OneCore or Games Family
typedef BOOL (__stdcall *PFN_CRYPT_ENUM_OID_INFO)(
PCCRYPT_OID_INFO pInfo,
void *pvArg
__stdcall
CryptEnumOIDInfo(
DWORD dwGroupId,
DWORD dwFlags,
void *pvArg,
PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo
LPCWSTR
__stdcall
CryptFindLocalizedName(
LPCWSTR pwszCryptName
typedef struct _CERT_STRONG_SIGN_SERIALIZED_INFO {
DWORD                   dwFlags;
LPWSTR                  pwszCNGSignHashAlgids;
LPWSTR                  pwszCNGPubKeyMinBitLengths; 
} CERT_STRONG_SIGN_SERIALIZED_INFO, *PCERT_STRONG_SIGN_SERIALIZED_INFO;
typedef struct _CERT_STRONG_SIGN_PARA {
DWORD                   cbSize;
DWORD                   dwInfoChoice;
union  {
void                                *pvInfo;
PCERT_STRONG_SIGN_SERIALIZED_INFO   pSerializedInfo;
LPSTR                               pszOID;
} DUMMYUNIONNAME;
} CERT_STRONG_SIGN_PARA, *PCERT_STRONG_SIGN_PARA;
typedef const CERT_STRONG_SIGN_PARA *PCCERT_STRONG_SIGN_PARA;
typedef void *HCRYPTMSG;
typedef struct _CERT_ISSUER_SERIAL_NUMBER {
CERT_NAME_BLOB      Issuer;
CRYPT_INTEGER_BLOB  SerialNumber;
} CERT_ISSUER_SERIAL_NUMBER, *PCERT_ISSUER_SERIAL_NUMBER;
typedef struct _CERT_ID {
DWORD   dwIdChoice;
union {
CERT_ISSUER_SERIAL_NUMBER   IssuerSerialNumber;
CRYPT_HASH_BLOB             KeyId;
CRYPT_HASH_BLOB             HashId;
} DUMMYUNIONNAME;
} CERT_ID, *PCERT_ID;
typedef struct _CMSG_SIGNER_ENCODE_INFO {
DWORD                       cbSize;
PCERT_INFO                  pCertInfo;
union {
HCRYPTPROV                  hCryptProv;
NCRYPT_KEY_HANDLE           hNCryptKey;
} DUMMYUNIONNAME;
DWORD                       dwKeySpec;
CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
void                        *pvHashAuxInfo;
DWORD                       cAuthAttr;
PCRYPT_ATTRIBUTE            rgAuthAttr;
DWORD                       cUnauthAttr;
PCRYPT_ATTRIBUTE            rgUnauthAttr;
} CMSG_SIGNER_ENCODE_INFO, *PCMSG_SIGNER_ENCODE_INFO;
typedef struct _CMSG_SIGNED_ENCODE_INFO {
DWORD                       cbSize;
DWORD                       cSigners;
PCMSG_SIGNER_ENCODE_INFO    rgSigners;
DWORD                       cCertEncoded;
PCERT_BLOB                  rgCertEncoded;
DWORD                       cCrlEncoded;
PCRL_BLOB                   rgCrlEncoded;
} CMSG_SIGNED_ENCODE_INFO, *PCMSG_SIGNED_ENCODE_INFO;
typedef struct _CMSG_RECIPIENT_ENCODE_INFO CMSG_RECIPIENT_ENCODE_INFO,
*PCMSG_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_ENVELOPED_ENCODE_INFO {
DWORD                       cbSize;
HCRYPTPROV_LEGACY           hCryptProv;
CRYPT_ALGORITHM_IDENTIFIER  ContentEncryptionAlgorithm;
void                        *pvEncryptionAuxInfo;
DWORD                       cRecipients;
PCERT_INFO                  *rgpRecipients;
} CMSG_ENVELOPED_ENCODE_INFO, *PCMSG_ENVELOPED_ENCODE_INFO;
typedef struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO {
DWORD                       cbSize;
CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
void                        *pvKeyEncryptionAuxInfo;
HCRYPTPROV_LEGACY           hCryptProv;
CRYPT_BIT_BLOB              RecipientPublicKey;
CERT_ID                     RecipientId;
} CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO, *PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO {
DWORD                       cbSize;
CRYPT_BIT_BLOB              RecipientPublicKey;
CERT_ID                     RecipientId;
FILETIME                    Date;
PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO,
*PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
typedef struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO {
DWORD                       cbSize;
CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
void                        *pvKeyEncryptionAuxInfo;
CRYPT_ALGORITHM_IDENTIFIER  KeyWrapAlgorithm;
void                        *pvKeyWrapAuxInfo;
HCRYPTPROV_LEGACY           hCryptProv;
DWORD                       dwKeySpec;
DWORD                       dwKeyChoice;
union {
PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm;
PCERT_ID                    pSenderId;
} DUMMYUNIONNAME;
CRYPT_DATA_BLOB             UserKeyingMaterial;     
DWORD                                       cRecipientEncryptedKeys;
PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO   *rgpRecipientEncryptedKeys;
} CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO, *PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO {
DWORD                       cbSize;
CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
void                        *pvKeyEncryptionAuxInfo;
HCRYPTPROV                  hCryptProv;
DWORD                       dwKeyChoice;
union {
HCRYPTKEY                   hKeyEncryptionKey;
void                        *pvKeyEncryptionKey;
} DUMMYUNIONNAME;
CRYPT_DATA_BLOB             KeyId;
FILETIME                    Date;
PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO, *PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
struct _CMSG_RECIPIENT_ENCODE_INFO {
DWORD   dwRecipientChoice;
union {
PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO   pKeyTrans;
PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO   pKeyAgree;
PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO   pMailList;
} DUMMYUNIONNAME;
typedef struct _CMSG_RC2_AUX_INFO {
DWORD                       cbSize;
DWORD                       dwBitLen;
} CMSG_RC2_AUX_INFO, *PCMSG_RC2_AUX_INFO;
typedef struct _CMSG_SP3_COMPATIBLE_AUX_INFO {
DWORD                       cbSize;
DWORD                       dwFlags;
} CMSG_SP3_COMPATIBLE_AUX_INFO, *PCMSG_SP3_COMPATIBLE_AUX_INFO;
typedef struct _CMSG_RC4_AUX_INFO {
DWORD                       cbSize;
DWORD                       dwBitLen;
} CMSG_RC4_AUX_INFO, *PCMSG_RC4_AUX_INFO;
typedef struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO {
DWORD                       cbSize;
CMSG_SIGNED_ENCODE_INFO     SignedInfo;
CMSG_ENVELOPED_ENCODE_INFO  EnvelopedInfo;
} CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO, *PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
typedef struct _CMSG_HASHED_ENCODE_INFO {
DWORD                       cbSize;
HCRYPTPROV_LEGACY           hCryptProv;
CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
void                        *pvHashAuxInfo;
} CMSG_HASHED_ENCODE_INFO, *PCMSG_HASHED_ENCODE_INFO;
typedef struct _CMSG_ENCRYPTED_ENCODE_INFO {
DWORD                       cbSize;
CRYPT_ALGORITHM_IDENTIFIER  ContentEncryptionAlgorithm;
void                        *pvEncryptionAuxInfo;
} CMSG_ENCRYPTED_ENCODE_INFO, *PCMSG_ENCRYPTED_ENCODE_INFO;
typedef BOOL (__stdcall *PFN_CMSG_STREAM_OUTPUT)(
const void *pvArg,
BYTE *pbData,
DWORD cbData,
BOOL fFinal
typedef struct _CMSG_STREAM_INFO {
DWORD                   cbContent;
PFN_CMSG_STREAM_OUTPUT  pfnStreamOutput;
void                    *pvArg;
} CMSG_STREAM_INFO, *PCMSG_STREAM_INFO;
HCRYPTMSG
__stdcall
CryptMsgOpenToEncode(
DWORD dwMsgEncodingType,
DWORD dwFlags,
DWORD dwMsgType,
void const *pvMsgEncodeInfo,
LPSTR pszInnerContentObjID,
PCMSG_STREAM_INFO pStreamInfo
DWORD
__stdcall
CryptMsgCalculateEncodedLength(
DWORD dwMsgEncodingType,
DWORD dwFlags,
DWORD dwMsgType,
void const *pvMsgEncodeInfo,
LPSTR pszInnerContentObjID,
DWORD cbData
HCRYPTMSG
__stdcall
CryptMsgOpenToDecode(
DWORD dwMsgEncodingType,
DWORD dwFlags,
DWORD dwMsgType,
HCRYPTPROV_LEGACY hCryptProv,
PCERT_INFO pRecipientInfo,
PCMSG_STREAM_INFO pStreamInfo
HCRYPTMSG
__stdcall
CryptMsgDuplicate(
HCRYPTMSG hCryptMsg
__stdcall
CryptMsgClose(
HCRYPTMSG hCryptMsg
__stdcall
CryptMsgUpdate(
HCRYPTMSG hCryptMsg,
const BYTE *pbData,
DWORD cbData,
BOOL fFinal
__stdcall
CryptMsgGetParam(
HCRYPTMSG hCryptMsg,
DWORD dwParamType,
DWORD dwIndex,
void *pvData,
DWORD *pcbData
typedef struct _CMSG_SIGNER_INFO {
DWORD                       dwVersion;
CERT_NAME_BLOB              Issuer;
CRYPT_INTEGER_BLOB          SerialNumber;
CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
CRYPT_ALGORITHM_IDENTIFIER  HashEncryptionAlgorithm;
CRYPT_DATA_BLOB             EncryptedHash;
CRYPT_ATTRIBUTES            AuthAttrs;
CRYPT_ATTRIBUTES            UnauthAttrs;
} CMSG_SIGNER_INFO, *PCMSG_SIGNER_INFO;
typedef struct _CMSG_CMS_SIGNER_INFO {
DWORD                       dwVersion;
CERT_ID                     SignerId;
CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
CRYPT_ALGORITHM_IDENTIFIER  HashEncryptionAlgorithm;
CRYPT_DATA_BLOB             EncryptedHash;
CRYPT_ATTRIBUTES            AuthAttrs;
CRYPT_ATTRIBUTES            UnauthAttrs;
} CMSG_CMS_SIGNER_INFO, *PCMSG_CMS_SIGNER_INFO;
typedef CRYPT_ATTRIBUTES CMSG_ATTR;
typedef CRYPT_ATTRIBUTES *PCMSG_ATTR;
typedef struct _CMSG_KEY_TRANS_RECIPIENT_INFO {
DWORD                       dwVersion;
CERT_ID                     RecipientId;
CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
CRYPT_DATA_BLOB             EncryptedKey;
} CMSG_KEY_TRANS_RECIPIENT_INFO, *PCMSG_KEY_TRANS_RECIPIENT_INFO;
typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO {
CERT_ID                     RecipientId;
CRYPT_DATA_BLOB             EncryptedKey;
FILETIME                    Date;
PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_RECIPIENT_ENCRYPTED_KEY_INFO, *PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
typedef struct _CMSG_KEY_AGREE_RECIPIENT_INFO {
DWORD                       dwVersion;
DWORD                       dwOriginatorChoice;
union {
CERT_ID                     OriginatorCertId;
CERT_PUBLIC_KEY_INFO        OriginatorPublicKeyInfo;
} DUMMYUNIONNAME;
CRYPT_DATA_BLOB             UserKeyingMaterial;
CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
DWORD                                cRecipientEncryptedKeys;
PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO   *rgpRecipientEncryptedKeys;
} CMSG_KEY_AGREE_RECIPIENT_INFO, *PCMSG_KEY_AGREE_RECIPIENT_INFO;
typedef struct _CMSG_MAIL_LIST_RECIPIENT_INFO {
DWORD                       dwVersion;
CRYPT_DATA_BLOB             KeyId;
CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
CRYPT_DATA_BLOB             EncryptedKey;
FILETIME                    Date;
PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_MAIL_LIST_RECIPIENT_INFO, *PCMSG_MAIL_LIST_RECIPIENT_INFO;
typedef struct _CMSG_CMS_RECIPIENT_INFO {
DWORD   dwRecipientChoice;
union {
PCMSG_KEY_TRANS_RECIPIENT_INFO   pKeyTrans;
PCMSG_KEY_AGREE_RECIPIENT_INFO   pKeyAgree;
PCMSG_MAIL_LIST_RECIPIENT_INFO   pMailList;
} DUMMYUNIONNAME;
} CMSG_CMS_RECIPIENT_INFO, *PCMSG_CMS_RECIPIENT_INFO;
__stdcall
CryptMsgControl(
HCRYPTMSG hCryptMsg,
DWORD dwFlags,
DWORD dwCtrlType,
void const *pvCtrlPara
typedef struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA {
DWORD               cbSize;
HCRYPTPROV_LEGACY   hCryptProv;
DWORD               dwSignerIndex;
DWORD               dwSignerType;
void                *pvSigner;
} CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA, *PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
typedef struct _CMSG_CTRL_DECRYPT_PARA {
DWORD       cbSize;
union {
HCRYPTPROV                  hCryptProv;
NCRYPT_KEY_HANDLE           hNCryptKey;
} DUMMYUNIONNAME;
DWORD       dwKeySpec;
DWORD       dwRecipientIndex;
} CMSG_CTRL_DECRYPT_PARA, *PCMSG_CTRL_DECRYPT_PARA;
typedef struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA {
DWORD                           cbSize;
union {
HCRYPTPROV                  hCryptProv;
NCRYPT_KEY_HANDLE           hNCryptKey;
} DUMMYUNIONNAME;
DWORD                           dwKeySpec;
PCMSG_KEY_TRANS_RECIPIENT_INFO  pKeyTrans;
DWORD                           dwRecipientIndex;
} CMSG_CTRL_KEY_TRANS_DECRYPT_PARA, *PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
typedef struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA {
DWORD                           cbSize;
union {
HCRYPTPROV                  hCryptProv;
NCRYPT_KEY_HANDLE           hNCryptKey;
} DUMMYUNIONNAME;
DWORD                           dwKeySpec;
PCMSG_KEY_AGREE_RECIPIENT_INFO  pKeyAgree;
DWORD                           dwRecipientIndex;
DWORD                           dwRecipientEncryptedKeyIndex;
CRYPT_BIT_BLOB                  OriginatorPublicKey;
} CMSG_CTRL_KEY_AGREE_DECRYPT_PARA, *PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
typedef struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA {
DWORD                           cbSize;
HCRYPTPROV                      hCryptProv;
PCMSG_MAIL_LIST_RECIPIENT_INFO  pMailList;
DWORD                           dwRecipientIndex;
DWORD                           dwKeyChoice;
union {
HCRYPTKEY                       hKeyEncryptionKey;
void                            *pvKeyEncryptionKey;
} DUMMYUNIONNAME;
} CMSG_CTRL_MAIL_LIST_DECRYPT_PARA, *PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
typedef struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA {
DWORD               cbSize;
DWORD               dwSignerIndex;
CRYPT_DATA_BLOB     blob;
} CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA, *PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
typedef struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA {
DWORD               cbSize;
DWORD               dwSignerIndex;
DWORD               dwUnauthAttrIndex;
} CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA, *PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
__stdcall
CryptMsgVerifyCountersignatureEncoded(
HCRYPTPROV_LEGACY hCryptProv,
DWORD dwEncodingType,
PBYTE pbSignerInfo,
DWORD cbSignerInfo,
PBYTE pbSignerInfoCountersignature,
DWORD cbSignerInfoCountersignature,
PCERT_INFO pciCountersigner
__stdcall
CryptMsgVerifyCountersignatureEncodedEx(
HCRYPTPROV_LEGACY hCryptProv,
DWORD dwEncodingType,
PBYTE pbSignerInfo,
DWORD cbSignerInfo,
PBYTE pbSignerInfoCountersignature,
DWORD cbSignerInfoCountersignature,
DWORD dwSignerType,
void *pvSigner,
DWORD dwFlags,
void *pvExtra
__stdcall
CryptMsgCountersign(
HCRYPTMSG hCryptMsg,
DWORD dwIndex,
DWORD cCountersigners,
PCMSG_SIGNER_ENCODE_INFO rgCountersigners
__stdcall
CryptMsgCountersignEncoded(
DWORD dwEncodingType,
PBYTE pbSignerInfo,
DWORD cbSignerInfo,
DWORD cCountersigners,
PCMSG_SIGNER_ENCODE_INFO rgCountersigners,
PBYTE pbCountersignature,
PDWORD pcbCountersignature
typedef void * (__stdcall *PFN_CMSG_ALLOC) (
size_t cb
typedef void (__stdcall *PFN_CMSG_FREE)(
void *pv
typedef   BOOL (__stdcall *PFN_CMSG_GEN_ENCRYPT_KEY) (
HCRYPTPROV *phCryptProv,
PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt,
PVOID pvEncryptAuxInfo,
PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
PFN_CMSG_ALLOC pfnAlloc,
HCRYPTKEY *phEncryptKey,
PBYTE *ppbEncryptParameters,
PDWORD pcbEncryptParameters
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_ENCRYPT_KEY) (
HCRYPTPROV hCryptProv,
HCRYPTKEY hEncryptKey,
PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
PBYTE pbData,
PDWORD pcbData
typedef BOOL (__stdcall *PFN_CMSG_IMPORT_ENCRYPT_KEY) (
HCRYPTPROV hCryptProv,
DWORD dwKeySpec,
PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt,
PCRYPT_ALGORITHM_IDENTIFIER paiPubKey,
PBYTE pbEncodedKey,
DWORD cbEncodedKey,
HCRYPTKEY *phEncryptKey
typedef struct _CMSG_CONTENT_ENCRYPT_INFO {
DWORD                       cbSize;
HCRYPTPROV_LEGACY           hCryptProv;
CRYPT_ALGORITHM_IDENTIFIER  ContentEncryptionAlgorithm;
void                        *pvEncryptionAuxInfo;
DWORD                       cRecipients;
PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients;
PFN_CMSG_ALLOC              pfnAlloc;
PFN_CMSG_FREE               pfnFree;
DWORD                       dwEncryptFlags;
union {
HCRYPTKEY                   hContentEncryptKey;
BCRYPT_KEY_HANDLE           hCNGContentEncryptKey;
} DUMMYUNIONNAME;
DWORD                       dwFlags;
BOOL                        fCNG;
BYTE                        *pbCNGContentEncryptKeyObject;
BYTE                        *pbContentEncryptKey;
DWORD                       cbContentEncryptKey;
} CMSG_CONTENT_ENCRYPT_INFO, *PCMSG_CONTENT_ENCRYPT_INFO;
typedef BOOL (__stdcall *PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY) (
PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
DWORD dwFlags,
void *pvReserved
typedef struct _CMSG_KEY_TRANS_ENCRYPT_INFO {
DWORD                       cbSize;
DWORD                       dwRecipientIndex;
CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
CRYPT_DATA_BLOB             EncryptedKey;
DWORD                       dwFlags;
} CMSG_KEY_TRANS_ENCRYPT_INFO, *PCMSG_KEY_TRANS_ENCRYPT_INFO;
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_KEY_TRANS) (
PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTransEncodeInfo,
PCMSG_KEY_TRANS_ENCRYPT_INFO pKeyTransEncryptInfo,
DWORD dwFlags,
void *pvReserved
typedef struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO {
DWORD                       cbSize;
CRYPT_DATA_BLOB             EncryptedKey;
} CMSG_KEY_AGREE_KEY_ENCRYPT_INFO, *PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO;
typedef struct _CMSG_KEY_AGREE_ENCRYPT_INFO {
DWORD                       cbSize;
DWORD                       dwRecipientIndex;
CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
CRYPT_DATA_BLOB             UserKeyingMaterial;
DWORD                       dwOriginatorChoice;
union {
CERT_ID                     OriginatorCertId;
CERT_PUBLIC_KEY_INFO        OriginatorPublicKeyInfo;
} DUMMYUNIONNAME;
DWORD                       cKeyAgreeKeyEncryptInfo;
PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO *rgpKeyAgreeKeyEncryptInfo;
DWORD                       dwFlags;
} CMSG_KEY_AGREE_ENCRYPT_INFO, *PCMSG_KEY_AGREE_ENCRYPT_INFO;
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_KEY_AGREE) (
PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgreeEncodeInfo,
PCMSG_KEY_AGREE_ENCRYPT_INFO pKeyAgreeEncryptInfo,
DWORD dwFlags,
void *pvReserved
typedef struct _CMSG_MAIL_LIST_ENCRYPT_INFO {
DWORD                       cbSize;
DWORD                       dwRecipientIndex;
CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
CRYPT_DATA_BLOB             EncryptedKey;
DWORD                       dwFlags;
} CMSG_MAIL_LIST_ENCRYPT_INFO, *PCMSG_MAIL_LIST_ENCRYPT_INFO;
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_MAIL_LIST) (
PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailListEncodeInfo,
PCMSG_MAIL_LIST_ENCRYPT_INFO pMailListEncryptInfo,
DWORD dwFlags,
void *pvReserved
typedef BOOL (__stdcall *PFN_CMSG_IMPORT_KEY_TRANS) (
PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara,
DWORD dwFlags,
void *pvReserved,
HCRYPTKEY *phContentEncryptKey
typedef BOOL (__stdcall *PFN_CMSG_IMPORT_KEY_AGREE) (
PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara,
DWORD dwFlags,
void *pvReserved,
HCRYPTKEY *phContentEncryptKey
typedef BOOL (__stdcall *PFN_CMSG_IMPORT_MAIL_LIST) (
PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA pMailListDecryptPara,
DWORD dwFlags,
void *pvReserved,
HCRYPTKEY *phContentEncryptKey
typedef struct _CMSG_CNG_CONTENT_DECRYPT_INFO {
DWORD                       cbSize;
CRYPT_ALGORITHM_IDENTIFIER  ContentEncryptionAlgorithm;
PFN_CMSG_ALLOC              pfnAlloc;
PFN_CMSG_FREE               pfnFree;
NCRYPT_KEY_HANDLE           hNCryptKey;
BYTE                        *pbContentEncryptKey;
DWORD                       cbContentEncryptKey;
BCRYPT_KEY_HANDLE           hCNGContentEncryptKey;
BYTE                        *pbCNGContentEncryptKeyObject;
} CMSG_CNG_CONTENT_DECRYPT_INFO, *PCMSG_CNG_CONTENT_DECRYPT_INFO;
typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_KEY_TRANS) (
PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara,
DWORD dwFlags,
void *pvReserved
typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_KEY_AGREE) (
PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara,
DWORD dwFlags,
void *pvReserved
typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY) (
PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
DWORD dwFlags,
void *pvReserved
typedef void *HCERTSTORE;
typedef struct _CERT_CONTEXT {
DWORD                   dwCertEncodingType;
BYTE                    *pbCertEncoded;
DWORD                   cbCertEncoded;
PCERT_INFO              pCertInfo;
HCERTSTORE              hCertStore;
} CERT_CONTEXT, *PCERT_CONTEXT;
typedef const CERT_CONTEXT *PCCERT_CONTEXT;
typedef struct _CRL_CONTEXT {
DWORD                   dwCertEncodingType;
BYTE                    *pbCrlEncoded;
DWORD                   cbCrlEncoded;
PCRL_INFO               pCrlInfo;
HCERTSTORE              hCertStore;
} CRL_CONTEXT, *PCRL_CONTEXT;
typedef const CRL_CONTEXT *PCCRL_CONTEXT;
typedef struct _CTL_CONTEXT {
DWORD                   dwMsgAndCertEncodingType;
BYTE                    *pbCtlEncoded;
DWORD                   cbCtlEncoded;
PCTL_INFO               pCtlInfo;
HCERTSTORE              hCertStore;
HCRYPTMSG               hCryptMsg;
BYTE                    *pbCtlContent;
DWORD                   cbCtlContent;
} CTL_CONTEXT, *PCTL_CONTEXT;
typedef const CTL_CONTEXT *PCCTL_CONTEXT;
typedef enum CertKeyType 
KeyTypeOther             = 0,
KeyTypeVirtualSmartCard  = 1,
KeyTypePhysicalSmartCard = 2,
KeyTypePassport          = 3,
KeyTypePassportRemote    = 4,
KeyTypePassportSmartCard = 5,
KeyTypeHardware          = 6,
KeyTypeSoftware          = 7,
KeyTypeSelfSigned        = 8,
} CertKeyType;
typedef struct _CRYPT_KEY_PROV_PARAM {
DWORD           dwParam;
BYTE            *pbData;
DWORD           cbData;
DWORD           dwFlags;
} CRYPT_KEY_PROV_PARAM, *PCRYPT_KEY_PROV_PARAM;
typedef struct _CRYPT_KEY_PROV_INFO {
LPWSTR                  pwszContainerName;
LPWSTR                  pwszProvName;
DWORD                   dwProvType;
DWORD                   dwFlags;
DWORD                   cProvParam;
PCRYPT_KEY_PROV_PARAM   rgProvParam;
DWORD                   dwKeySpec;
} CRYPT_KEY_PROV_INFO, *PCRYPT_KEY_PROV_INFO;
typedef struct _CERT_KEY_CONTEXT {
DWORD           cbSize;           
union {
HCRYPTPROV          hCryptProv;
NCRYPT_KEY_HANDLE   hNCryptKey;
} DUMMYUNIONNAME;
DWORD           dwKeySpec;
} CERT_KEY_CONTEXT, *PCERT_KEY_CONTEXT;
typedef struct _ROOT_INFO_LUID {
DWORD LowPart;
LONG HighPart;
} ROOT_INFO_LUID, *PROOT_INFO_LUID;
typedef struct _CRYPT_SMART_CARD_ROOT_INFO {
BYTE                rgbCardID [16];
ROOT_INFO_LUID      luid;
} CRYPT_SMART_CARD_ROOT_INFO, *PCRYPT_SMART_CARD_ROOT_INFO;
typedef struct _CERT_SYSTEM_STORE_RELOCATE_PARA {
union {
HKEY                hKeyBase;
void                *pvBase;
} DUMMYUNIONNAME;
union {
void                *pvSystemStore;
LPCSTR              pszSystemStore;
LPCWSTR             pwszSystemStore;
} DUMMYUNIONNAME2;
} CERT_SYSTEM_STORE_RELOCATE_PARA, *PCERT_SYSTEM_STORE_RELOCATE_PARA;
typedef struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA {
HKEY                hKeyBase;
LPWSTR              pwszRegPath;
} CERT_REGISTRY_STORE_CLIENT_GPT_PARA, *PCERT_REGISTRY_STORE_CLIENT_GPT_PARA;
typedef struct _CERT_REGISTRY_STORE_ROAMING_PARA {
HKEY                hKey;
LPWSTR              pwszStoreDirectory;
} CERT_REGISTRY_STORE_ROAMING_PARA, *PCERT_REGISTRY_STORE_ROAMING_PARA;
typedef struct _CERT_LDAP_STORE_OPENED_PARA {
void        *pvLdapSessionHandle;   
LPCWSTR     pwszLdapUrl;
} CERT_LDAP_STORE_OPENED_PARA, *PCERT_LDAP_STORE_OPENED_PARA;
HCERTSTORE
__stdcall
CertOpenStore(
LPCSTR lpszStoreProvider,
DWORD dwEncodingType,
HCRYPTPROV_LEGACY hCryptProv,
DWORD dwFlags,
const void *pvPara
typedef void *HCERTSTOREPROV;
typedef struct _CERT_STORE_PROV_INFO {
DWORD               cbSize;
DWORD               cStoreProvFunc;
void                **rgpvStoreProvFunc;
HCERTSTOREPROV      hStoreProv;
DWORD               dwStoreProvFlags;
HCRYPTOIDFUNCADDR   hStoreProvFuncAddr2;
} CERT_STORE_PROV_INFO, *PCERT_STORE_PROV_INFO;
typedef BOOL (__stdcall *PFN_CERT_DLL_OPEN_STORE_PROV_FUNC)(
LPCSTR lpszStoreProvider,
DWORD dwEncodingType,
HCRYPTPROV_LEGACY hCryptProv,
DWORD dwFlags,
const void *pvPara,
HCERTSTORE hCertStore,
PCERT_STORE_PROV_INFO pStoreProvInfo
typedef void (__stdcall *PFN_CERT_STORE_PROV_CLOSE)(
HCERTSTOREPROV hStoreProv,
DWORD dwFlags
typedef   BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CERT)(
HCERTSTOREPROV hStoreProv,
PCCERT_CONTEXT pStoreCertContext,
DWORD dwFlags,
PCCERT_CONTEXT *ppProvCertContext
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CERT)(
HCERTSTOREPROV hStoreProv,
PCCERT_CONTEXT pCertContext,
DWORD dwFlags
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CERT)(
HCERTSTOREPROV hStoreProv,
PCCERT_CONTEXT pCertContext,
DWORD dwFlags
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CERT_PROPERTY)(
HCERTSTOREPROV hStoreProv,
PCCERT_CONTEXT pCertContext,
DWORD dwPropId,
DWORD dwFlags,
const void *pvData
typedef   BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CRL)(
HCERTSTOREPROV hStoreProv,
PCCRL_CONTEXT pStoreCrlContext,
DWORD dwFlags,
PCCRL_CONTEXT *ppProvCrlContext
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CRL)(
HCERTSTOREPROV hStoreProv,
PCCRL_CONTEXT pCrlContext,
DWORD dwFlags
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CRL)(
HCERTSTOREPROV hStoreProv,
PCCRL_CONTEXT pCrlContext,
DWORD dwFlags
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CRL_PROPERTY)(
HCERTSTOREPROV hStoreProv,
PCCRL_CONTEXT pCrlContext,
DWORD dwPropId,
DWORD dwFlags,
const void *pvData
typedef   BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CTL)(
HCERTSTOREPROV hStoreProv,
PCCTL_CONTEXT pStoreCtlContext,
DWORD dwFlags,
PCCTL_CONTEXT *ppProvCtlContext
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CTL)(
HCERTSTOREPROV hStoreProv,
PCCTL_CONTEXT pCtlContext,
DWORD dwFlags
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CTL)(
HCERTSTOREPROV hStoreProv,
PCCTL_CONTEXT pCtlContext,
DWORD dwFlags
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CTL_PROPERTY)(
HCERTSTOREPROV hStoreProv,
PCCTL_CONTEXT pCtlContext,
DWORD dwPropId,
DWORD dwFlags,
const void *pvData
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_CONTROL)(
HCERTSTOREPROV hStoreProv,
DWORD dwFlags,
DWORD dwCtrlType,
void const *pvCtrlPara
typedef struct _CERT_STORE_PROV_FIND_INFO {
DWORD               cbSize;
DWORD               dwMsgAndCertEncodingType;
DWORD               dwFindFlags;
DWORD               dwFindType;
const void          *pvFindPara;
} CERT_STORE_PROV_FIND_INFO, *PCERT_STORE_PROV_FIND_INFO;
typedef const CERT_STORE_PROV_FIND_INFO CCERT_STORE_PROV_FIND_INFO,
*PCCERT_STORE_PROV_FIND_INFO;
typedef   BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CERT)(
HCERTSTOREPROV hStoreProv,
PCCERT_STORE_PROV_FIND_INFO pFindInfo,
PCCERT_CONTEXT pPrevCertContext,
DWORD dwFlags,
void **ppvStoreProvFindInfo,
PCCERT_CONTEXT *ppProvCertContext
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CERT)(
HCERTSTOREPROV hStoreProv,
PCCERT_CONTEXT pCertContext,
void *pvStoreProvFindInfo,
DWORD dwFlags
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CERT_PROPERTY)(
HCERTSTOREPROV hStoreProv,
PCCERT_CONTEXT pCertContext,
DWORD dwPropId,
DWORD dwFlags,
void *pvData,
DWORD *pcbData
typedef   BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CRL)(
HCERTSTOREPROV hStoreProv,
PCCERT_STORE_PROV_FIND_INFO pFindInfo,
PCCRL_CONTEXT pPrevCrlContext,
DWORD dwFlags,
void **ppvStoreProvFindInfo,
PCCRL_CONTEXT *ppProvCrlContext
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CRL)(
HCERTSTOREPROV hStoreProv,
PCCRL_CONTEXT pCrlContext,
void *pvStoreProvFindInfo,
DWORD dwFlags
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CRL_PROPERTY)(
HCERTSTOREPROV hStoreProv,
PCCRL_CONTEXT pCrlContext,
DWORD dwPropId,
DWORD dwFlags,
void *pvData,
DWORD *pcbData
typedef   BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CTL)(
HCERTSTOREPROV hStoreProv,
PCCERT_STORE_PROV_FIND_INFO pFindInfo,
PCCTL_CONTEXT pPrevCtlContext,
DWORD dwFlags,
void **ppvStoreProvFindInfo,
PCCTL_CONTEXT *ppProvCtlContext
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CTL)(
HCERTSTOREPROV hStoreProv,
PCCTL_CONTEXT pCtlContext,
void *pvStoreProvFindInfo,
DWORD dwFlags
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CTL_PROPERTY)(
HCERTSTOREPROV hStoreProv,
PCCTL_CONTEXT pCtlContext,
DWORD dwPropId,
DWORD dwFlags,
void *pvData,
DWORD *pcbData
HCERTSTORE
__stdcall
CertDuplicateStore(
HCERTSTORE hCertStore
__stdcall
CertSaveStore(
HCERTSTORE hCertStore,
DWORD dwEncodingType,
DWORD dwSaveAs,
DWORD dwSaveTo,
void *pvSaveToPara,
DWORD dwFlags
__stdcall
CertCloseStore(
HCERTSTORE hCertStore,
DWORD dwFlags
PCCERT_CONTEXT
__stdcall
CertGetSubjectCertificateFromStore(
HCERTSTORE hCertStore,
DWORD dwCertEncodingType,
PCERT_INFO pCertId           
PCCERT_CONTEXT
__stdcall
CertEnumCertificatesInStore(
HCERTSTORE hCertStore,
PCCERT_CONTEXT pPrevCertContext
PCCERT_CONTEXT
__stdcall
CertFindCertificateInStore(
HCERTSTORE hCertStore,
DWORD dwCertEncodingType,
DWORD dwFindFlags,
DWORD dwFindType,
const void *pvFindPara,
PCCERT_CONTEXT pPrevCertContext
PCCERT_CONTEXT
__stdcall
CertGetIssuerCertificateFromStore(
HCERTSTORE hCertStore,
PCCERT_CONTEXT pSubjectContext,
PCCERT_CONTEXT pPrevIssuerContext,
DWORD *pdwFlags
__stdcall
CertVerifySubjectCertificateContext(
PCCERT_CONTEXT pSubject,
PCCERT_CONTEXT pIssuer,
DWORD *pdwFlags
PCCERT_CONTEXT
__stdcall
CertDuplicateCertificateContext(
PCCERT_CONTEXT pCertContext
PCCERT_CONTEXT
__stdcall
CertCreateCertificateContext(
DWORD dwCertEncodingType,
const BYTE *pbCertEncoded,
DWORD cbCertEncoded
__stdcall
CertFreeCertificateContext(
PCCERT_CONTEXT pCertContext
__stdcall
CertSetCertificateContextProperty(
PCCERT_CONTEXT pCertContext,
DWORD dwPropId,
DWORD dwFlags,
const void *pvData
__stdcall
CertGetCertificateContextProperty(
PCCERT_CONTEXT pCertContext,
DWORD dwPropId,
void *pvData,
DWORD *pcbData
DWORD
__stdcall
CertEnumCertificateContextProperties(
PCCERT_CONTEXT pCertContext,
DWORD dwPropId
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
__stdcall
CertCreateCTLEntryFromCertificateContextProperties(
PCCERT_CONTEXT pCertContext,
DWORD cOptAttr,
PCRYPT_ATTRIBUTE rgOptAttr,
DWORD dwFlags,
void *pvReserved,
PCTL_ENTRY pCtlEntry,
DWORD *pcbCtlEntry
__stdcall
CertSetCertificateContextPropertiesFromCTLEntry(
PCCERT_CONTEXT pCertContext,
PCTL_ENTRY pCtlEntry,
DWORD dwFlags
#pragma endregion
#pragma region Application Family or OneCore or Games Family
PCCRL_CONTEXT
__stdcall
CertGetCRLFromStore(
HCERTSTORE hCertStore,
PCCERT_CONTEXT pIssuerContext,
PCCRL_CONTEXT pPrevCrlContext,
DWORD *pdwFlags
PCCRL_CONTEXT
__stdcall
CertEnumCRLsInStore(
HCERTSTORE hCertStore,
PCCRL_CONTEXT pPrevCrlContext
PCCRL_CONTEXT
__stdcall
CertFindCRLInStore(
HCERTSTORE hCertStore,
DWORD dwCertEncodingType,
DWORD dwFindFlags,
DWORD dwFindType,
const void *pvFindPara,
PCCRL_CONTEXT pPrevCrlContext
typedef struct _CRL_FIND_ISSUED_FOR_PARA {
PCCERT_CONTEXT              pSubjectCert;
PCCERT_CONTEXT              pIssuerCert;
} CRL_FIND_ISSUED_FOR_PARA, *PCRL_FIND_ISSUED_FOR_PARA;
PCCRL_CONTEXT
__stdcall
CertDuplicateCRLContext(
PCCRL_CONTEXT pCrlContext
PCCRL_CONTEXT
__stdcall
CertCreateCRLContext(
DWORD dwCertEncodingType,
const BYTE *pbCrlEncoded,
DWORD cbCrlEncoded
__stdcall
CertFreeCRLContext(
PCCRL_CONTEXT pCrlContext
__stdcall
CertSetCRLContextProperty(
PCCRL_CONTEXT pCrlContext,
DWORD dwPropId,
DWORD dwFlags,
const void *pvData
__stdcall
CertGetCRLContextProperty(
PCCRL_CONTEXT pCrlContext,
DWORD dwPropId,
void *pvData,
DWORD *pcbData
DWORD
__stdcall
CertEnumCRLContextProperties(
PCCRL_CONTEXT pCrlContext,
DWORD dwPropId
__stdcall
CertFindCertificateInCRL(
PCCERT_CONTEXT pCert,
PCCRL_CONTEXT pCrlContext,
DWORD dwFlags,
void *pvReserved,
PCRL_ENTRY *ppCrlEntry
__stdcall
CertIsValidCRLForCertificate(
PCCERT_CONTEXT pCert,
PCCRL_CONTEXT pCrl,
DWORD dwFlags,
void *pvReserved
__stdcall
CertAddEncodedCertificateToStore(
HCERTSTORE hCertStore,
DWORD dwCertEncodingType,
const BYTE *pbCertEncoded,
DWORD cbCertEncoded,
DWORD dwAddDisposition,
PCCERT_CONTEXT *ppCertContext
__stdcall
CertAddCertificateContextToStore(
HCERTSTORE hCertStore,
PCCERT_CONTEXT pCertContext,
DWORD dwAddDisposition,
PCCERT_CONTEXT *ppStoreContext
__stdcall
CertAddSerializedElementToStore(
HCERTSTORE hCertStore,
const BYTE *pbElement,
DWORD cbElement,
DWORD dwAddDisposition,
DWORD dwFlags,
DWORD dwContextTypeFlags,
DWORD *pdwContextType,
const void **ppvContext
__stdcall
CertDeleteCertificateFromStore(
PCCERT_CONTEXT pCertContext
__stdcall
CertAddEncodedCRLToStore(
HCERTSTORE hCertStore,
DWORD dwCertEncodingType,
const BYTE *pbCrlEncoded,
DWORD cbCrlEncoded,
DWORD dwAddDisposition,
PCCRL_CONTEXT *ppCrlContext
__stdcall
CertAddCRLContextToStore(
HCERTSTORE hCertStore,
PCCRL_CONTEXT pCrlContext,
DWORD dwAddDisposition,
PCCRL_CONTEXT *ppStoreContext
__stdcall
CertDeleteCRLFromStore(
PCCRL_CONTEXT pCrlContext
__stdcall
CertSerializeCertificateStoreElement(
PCCERT_CONTEXT pCertContext,
DWORD dwFlags,
BYTE *pbElement,
DWORD *pcbElement
__stdcall
CertSerializeCRLStoreElement(
PCCRL_CONTEXT pCrlContext,
DWORD dwFlags,
BYTE *pbElement,
DWORD *pcbElement
PCCTL_CONTEXT
__stdcall
CertDuplicateCTLContext(
PCCTL_CONTEXT pCtlContext
PCCTL_CONTEXT
__stdcall
CertCreateCTLContext(
DWORD dwMsgAndCertEncodingType,
const BYTE *pbCtlEncoded,
DWORD cbCtlEncoded
__stdcall
CertFreeCTLContext(
PCCTL_CONTEXT pCtlContext
__stdcall
CertSetCTLContextProperty(
PCCTL_CONTEXT pCtlContext,
DWORD dwPropId,
DWORD dwFlags,
const void *pvData
__stdcall
CertGetCTLContextProperty(
PCCTL_CONTEXT pCtlContext,
DWORD dwPropId,
void *pvData,
DWORD *pcbData
DWORD
__stdcall
CertEnumCTLContextProperties(
PCCTL_CONTEXT pCtlContext,
DWORD dwPropId
PCCTL_CONTEXT
__stdcall
CertEnumCTLsInStore(
HCERTSTORE hCertStore,
PCCTL_CONTEXT pPrevCtlContext
PCTL_ENTRY
__stdcall
CertFindSubjectInCTL(
DWORD dwEncodingType,
DWORD dwSubjectType,
void *pvSubject,
PCCTL_CONTEXT pCtlContext,
DWORD dwFlags
typedef struct _CTL_ANY_SUBJECT_INFO {
CRYPT_ALGORITHM_IDENTIFIER  SubjectAlgorithm;
CRYPT_DATA_BLOB             SubjectIdentifier;
} CTL_ANY_SUBJECT_INFO, *PCTL_ANY_SUBJECT_INFO;
PCCTL_CONTEXT
__stdcall
CertFindCTLInStore(
HCERTSTORE hCertStore,
DWORD dwMsgAndCertEncodingType,
DWORD dwFindFlags,
DWORD dwFindType,
const void *pvFindPara,
PCCTL_CONTEXT pPrevCtlContext
typedef struct _CTL_FIND_USAGE_PARA {
DWORD               cbSize;
CTL_USAGE           SubjectUsage;   
CRYPT_DATA_BLOB     ListIdentifier; 
PCERT_INFO          pSigner;        
} CTL_FIND_USAGE_PARA, *PCTL_FIND_USAGE_PARA;
typedef struct _CTL_FIND_SUBJECT_PARA {
DWORD                   cbSize;
PCTL_FIND_USAGE_PARA    pUsagePara; 
DWORD                   dwSubjectType;
void                    *pvSubject;
} CTL_FIND_SUBJECT_PARA, *PCTL_FIND_SUBJECT_PARA;
__stdcall
CertAddEncodedCTLToStore(
HCERTSTORE hCertStore,
DWORD dwMsgAndCertEncodingType,
const BYTE *pbCtlEncoded,
DWORD cbCtlEncoded,
DWORD dwAddDisposition,
PCCTL_CONTEXT *ppCtlContext
__stdcall
CertAddCTLContextToStore(
HCERTSTORE hCertStore,
PCCTL_CONTEXT pCtlContext,
DWORD dwAddDisposition,
PCCTL_CONTEXT *ppStoreContext
__stdcall
CertSerializeCTLStoreElement(
PCCTL_CONTEXT pCtlContext,
DWORD dwFlags,
BYTE *pbElement,
DWORD *pcbElement
__stdcall
CertDeleteCTLFromStore(
PCCTL_CONTEXT pCtlContext
__stdcall
CertAddCertificateLinkToStore(
HCERTSTORE hCertStore,
PCCERT_CONTEXT pCertContext,
DWORD dwAddDisposition,
PCCERT_CONTEXT *ppStoreContext
__stdcall
CertAddCRLLinkToStore(
HCERTSTORE hCertStore,
PCCRL_CONTEXT pCrlContext,
DWORD dwAddDisposition,
PCCRL_CONTEXT *ppStoreContext
__stdcall
CertAddCTLLinkToStore(
HCERTSTORE hCertStore,
PCCTL_CONTEXT pCtlContext,
DWORD dwAddDisposition,
PCCTL_CONTEXT *ppStoreContext
__stdcall
CertAddStoreToCollection(
HCERTSTORE hCollectionStore,
HCERTSTORE hSiblingStore,
DWORD dwUpdateFlags,
DWORD dwPriority
__stdcall
CertRemoveStoreFromCollection(
HCERTSTORE hCollectionStore,
HCERTSTORE hSiblingStore
__stdcall
CertControlStore(
HCERTSTORE hCertStore,
DWORD dwFlags,
DWORD dwCtrlType,
void const *pvCtrlPara
__stdcall
CertSetStoreProperty(
HCERTSTORE hCertStore,
DWORD dwPropId,
DWORD dwFlags,
const void *pvData
__stdcall
CertGetStoreProperty(
HCERTSTORE hCertStore,
DWORD dwPropId,
void *pvData,
DWORD *pcbData
typedef BOOL (__stdcall *PFN_CERT_CREATE_CONTEXT_SORT_FUNC)(
DWORD cbTotalEncoded,
DWORD cbRemainEncoded,
DWORD cEntry,
void *pvSort
typedef struct _CERT_CREATE_CONTEXT_PARA {
DWORD                               cbSize;
PFN_CRYPT_FREE                      pfnFree;    
void                                *pvFree;    
PFN_CERT_CREATE_CONTEXT_SORT_FUNC   pfnSort;    
void                                *pvSort;    
} CERT_CREATE_CONTEXT_PARA, *PCERT_CREATE_CONTEXT_PARA;
const void *
__stdcall
CertCreateContext(
DWORD dwContextType,
DWORD dwEncodingType,
const BYTE *pbEncoded,
DWORD cbEncoded,
DWORD dwFlags,
PCERT_CREATE_CONTEXT_PARA pCreatePara
typedef struct _CERT_SYSTEM_STORE_INFO {
DWORD   cbSize;
} CERT_SYSTEM_STORE_INFO, *PCERT_SYSTEM_STORE_INFO;
typedef struct _CERT_PHYSICAL_STORE_INFO {
DWORD               cbSize;
LPSTR               pszOpenStoreProvider;   
DWORD               dwOpenEncodingType;     
DWORD               dwOpenFlags;            
CRYPT_DATA_BLOB     OpenParameters;         
DWORD               dwFlags;                
DWORD               dwPriority;             
} CERT_PHYSICAL_STORE_INFO, *PCERT_PHYSICAL_STORE_INFO;
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
__stdcall
CertRegisterSystemStore(
const void *pvSystemStore,
DWORD dwFlags,
PCERT_SYSTEM_STORE_INFO pStoreInfo,
void *pvReserved
__stdcall
CertRegisterPhysicalStore(
const void *pvSystemStore,
DWORD dwFlags,
LPCWSTR pwszStoreName,
PCERT_PHYSICAL_STORE_INFO pStoreInfo,
void *pvReserved
__stdcall
CertUnregisterSystemStore(
const void *pvSystemStore,
DWORD dwFlags
__stdcall
CertUnregisterPhysicalStore(
const void *pvSystemStore,
DWORD dwFlags,
LPCWSTR pwszStoreName
#pragma endregion
#pragma region Application Family or OneCore or Games Family
typedef BOOL (__stdcall *PFN_CERT_ENUM_SYSTEM_STORE_LOCATION)(
LPCWSTR pwszStoreLocation,
DWORD dwFlags,
void *pvReserved,
void *pvArg
typedef BOOL (__stdcall *PFN_CERT_ENUM_SYSTEM_STORE)(
const void *pvSystemStore,
DWORD dwFlags,
PCERT_SYSTEM_STORE_INFO pStoreInfo,
void *pvReserved,
void *pvArg
typedef BOOL (__stdcall *PFN_CERT_ENUM_PHYSICAL_STORE)(
const void *pvSystemStore,
DWORD dwFlags,
LPCWSTR pwszStoreName,
PCERT_PHYSICAL_STORE_INFO pStoreInfo,
void *pvReserved,
void *pvArg
__stdcall
CertEnumSystemStoreLocation(
DWORD dwFlags,
void *pvArg,
PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum
__stdcall
CertEnumSystemStore(
DWORD dwFlags,
void *pvSystemStoreLocationPara,
void *pvArg,
PFN_CERT_ENUM_SYSTEM_STORE pfnEnum
__stdcall
CertEnumPhysicalStore(
const void *pvSystemStore,
DWORD dwFlags,
void *pvArg,
PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum
__stdcall
CertGetEnhancedKeyUsage(
PCCERT_CONTEXT pCertContext,
DWORD dwFlags,
PCERT_ENHKEY_USAGE pUsage,
DWORD *pcbUsage
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
__stdcall
CertSetEnhancedKeyUsage(
PCCERT_CONTEXT pCertContext,
PCERT_ENHKEY_USAGE pUsage
__stdcall
CertAddEnhancedKeyUsageIdentifier(
PCCERT_CONTEXT pCertContext,
LPCSTR pszUsageIdentifier
__stdcall
CertRemoveEnhancedKeyUsageIdentifier(
PCCERT_CONTEXT pCertContext,
LPCSTR pszUsageIdentifier
#pragma endregion
#pragma region Application Family or OneCore or Games Family
__stdcall
CertGetValidUsages(
DWORD cCerts,
PCCERT_CONTEXT *rghCerts,
int *cNumOIDs,
LPSTR *rghOIDs,
DWORD *pcbOIDs);
__stdcall
CryptMsgGetAndVerifySigner(
HCRYPTMSG hCryptMsg,
DWORD cSignerStore,
HCERTSTORE *rghSignerStore,
DWORD dwFlags,
PCCERT_CONTEXT *ppSigner,
DWORD *pdwSignerIndex
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
__stdcall
CryptMsgSignCTL(
DWORD dwMsgEncodingType,
BYTE *pbCtlContent,
DWORD cbCtlContent,
PCMSG_SIGNED_ENCODE_INFO pSignInfo,
DWORD dwFlags,
BYTE *pbEncoded,
DWORD *pcbEncoded
__stdcall
CryptMsgEncodeAndSignCTL(
DWORD dwMsgEncodingType,
PCTL_INFO pCtlInfo,
PCMSG_SIGNED_ENCODE_INFO pSignInfo,
DWORD dwFlags,
BYTE *pbEncoded,
DWORD *pcbEncoded
__stdcall
CertFindSubjectInSortedCTL(
PCRYPT_DATA_BLOB pSubjectIdentifier,
PCCTL_CONTEXT pCtlContext,
DWORD dwFlags,
void *pvReserved,
PCRYPT_DER_BLOB pEncodedAttributes
__stdcall
CertEnumSubjectInSortedCTL(
PCCTL_CONTEXT pCtlContext,
void **ppvNextSubject,
PCRYPT_DER_BLOB pSubjectIdentifier,
PCRYPT_DER_BLOB pEncodedAttributes
#pragma endregion
#pragma region Application Family or OneCore or Games Family
typedef struct _CTL_VERIFY_USAGE_PARA {
DWORD                   cbSize;
CRYPT_DATA_BLOB         ListIdentifier;     
DWORD                   cCtlStore;
HCERTSTORE              *rghCtlStore;       
DWORD                   cSignerStore;
HCERTSTORE              *rghSignerStore;    
} CTL_VERIFY_USAGE_PARA, *PCTL_VERIFY_USAGE_PARA;
typedef struct _CTL_VERIFY_USAGE_STATUS {
DWORD                   cbSize;
DWORD                   dwError;
DWORD                   dwFlags;
PCCTL_CONTEXT           *ppCtl;             
DWORD                   dwCtlEntryIndex;
PCCERT_CONTEXT          *ppSigner;          
DWORD                   dwSignerIndex;
} CTL_VERIFY_USAGE_STATUS, *PCTL_VERIFY_USAGE_STATUS;
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
__stdcall
CertVerifyCTLUsage(
DWORD dwEncodingType,
DWORD dwSubjectType,
void *pvSubject,
PCTL_USAGE pSubjectUsage,
DWORD dwFlags,
PCTL_VERIFY_USAGE_PARA pVerifyUsagePara,
PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus
#pragma endregion
#pragma region Application Family or OneCore or Games Family
typedef struct _CERT_REVOCATION_CRL_INFO {
DWORD                   cbSize;
PCCRL_CONTEXT           pBaseCrlContext;
PCCRL_CONTEXT           pDeltaCrlContext;
PCRL_ENTRY              pCrlEntry;
BOOL                    fDeltaCrlEntry; 
} CERT_REVOCATION_CRL_INFO, *PCERT_REVOCATION_CRL_INFO;
typedef struct _CERT_REVOCATION_CHAIN_PARA
CERT_REVOCATION_CHAIN_PARA,
*PCERT_REVOCATION_CHAIN_PARA;
typedef struct _CERT_REVOCATION_PARA {
DWORD                       cbSize;
PCCERT_CONTEXT              pIssuerCert;
DWORD                       cCertStore;
HCERTSTORE                  *rgCertStore;
HCERTSTORE                  hCrlStore;
LPFILETIME                  pftTimeToUse;
} CERT_REVOCATION_PARA, *PCERT_REVOCATION_PARA;
typedef struct _CERT_REVOCATION_STATUS {
DWORD                   cbSize;
DWORD                   dwIndex;
DWORD                   dwError;
DWORD                   dwReason;
BOOL                    fHasFreshnessTime;
DWORD                   dwFreshnessTime;    
} CERT_REVOCATION_STATUS, *PCERT_REVOCATION_STATUS;
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
__stdcall
CertVerifyRevocation(
DWORD dwEncodingType,
DWORD dwRevType,
DWORD cContext,
PVOID rgpvContext[],
DWORD dwFlags,
PCERT_REVOCATION_PARA pRevPara,
PCERT_REVOCATION_STATUS pRevStatus
#pragma endregion
#pragma region Application Family or OneCore or Games Family
__stdcall
CertCompareIntegerBlob(
PCRYPT_INTEGER_BLOB pInt1,
PCRYPT_INTEGER_BLOB pInt2
__stdcall
CertCompareCertificate(
DWORD dwCertEncodingType,
PCERT_INFO pCertId1,
PCERT_INFO pCertId2
__stdcall
CertCompareCertificateName(
DWORD dwCertEncodingType,
PCERT_NAME_BLOB pCertName1,
PCERT_NAME_BLOB pCertName2
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
__stdcall
CertIsRDNAttrsInCertificateName(
DWORD dwCertEncodingType,
DWORD dwFlags,
PCERT_NAME_BLOB pCertName,
PCERT_RDN pRDN
__stdcall
CertComparePublicKeyInfo(
DWORD dwCertEncodingType,
PCERT_PUBLIC_KEY_INFO pPublicKey1,
PCERT_PUBLIC_KEY_INFO pPublicKey2
#pragma endregion
#pragma region Application Family or OneCore or Games Family
DWORD
__stdcall
CertGetPublicKeyLength(
DWORD dwCertEncodingType,
PCERT_PUBLIC_KEY_INFO pPublicKey
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
__stdcall
CryptVerifyCertificateSignature(
HCRYPTPROV_LEGACY hCryptProv,
DWORD dwCertEncodingType,
const BYTE *pbEncoded,
DWORD cbEncoded,
PCERT_PUBLIC_KEY_INFO pPublicKey
__stdcall
CryptVerifyCertificateSignatureEx(
HCRYPTPROV_LEGACY hCryptProv,
DWORD dwCertEncodingType,
DWORD dwSubjectType,
void *pvSubject,
DWORD dwIssuerType,
void *pvIssuer,
DWORD dwFlags,
void *pvExtra
#pragma endregion
#pragma region Application Family or OneCore or Games Family
typedef struct _CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO {
CRYPT_DATA_BLOB CertSignHashCNGAlgPropData;
CRYPT_DATA_BLOB CertIssuerPubKeyBitLengthPropData;
} CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO,
*PCRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO;
typedef struct _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO {
DWORD   cCNGHashAlgid;
PCWSTR  *rgpwszCNGHashAlgid;
DWORD   dwWeakIndex;
} CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO,
*PCRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO;
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
__stdcall
CertIsStrongHashToSign(
PCCERT_STRONG_SIGN_PARA pStrongSignPara,
LPCWSTR pwszCNGHashAlgid,
PCCERT_CONTEXT pSigningCert
__stdcall
CryptHashToBeSigned(
HCRYPTPROV_LEGACY hCryptProv,
DWORD dwCertEncodingType,
const BYTE *pbEncoded,
DWORD cbEncoded,
BYTE *pbComputedHash,
DWORD *pcbComputedHash
__stdcall
CryptHashCertificate(
HCRYPTPROV_LEGACY hCryptProv,
ALG_ID Algid,
DWORD dwFlags,
const BYTE *pbEncoded,
DWORD cbEncoded,
BYTE *pbComputedHash,
DWORD *pcbComputedHash
#pragma endregion
#pragma region Application Family or OneCore or Games Family
__stdcall
CryptHashCertificate2(
LPCWSTR pwszCNGHashAlgid,
DWORD dwFlags,
void *pvReserved,
const BYTE *pbEncoded,
DWORD cbEncoded,
BYTE *pbComputedHash,
DWORD *pcbComputedHash
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
__stdcall
CryptSignCertificate(
HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
DWORD dwKeySpec,       
DWORD dwCertEncodingType,
const BYTE *pbEncodedToBeSigned,
DWORD cbEncodedToBeSigned,
PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
const void *pvHashAuxInfo,
BYTE *pbSignature,
DWORD *pcbSignature
__stdcall
CryptSignAndEncodeCertificate(
HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
DWORD dwKeySpec,       
DWORD dwCertEncodingType,
LPCSTR lpszStructType,       
const void *pvStructInfo,
PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
const void *pvHashAuxInfo,
BYTE *pbEncoded,
DWORD *pcbEncoded
#pragma endregion
#pragma region Application Family or OneCore or Games Family
typedef BOOL (__stdcall *PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC)(
DWORD dwCertEncodingType,
PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
void **ppvDecodedSignPara, 
LPWSTR *ppwszCNGHashAlgid      
typedef BOOL (__stdcall *PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC)(
NCRYPT_KEY_HANDLE hKey,
DWORD dwCertEncodingType,
PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
void *pvDecodedSignPara,
LPCWSTR pwszCNGPubKeyAlgid,    
LPCWSTR pwszCNGHashAlgid,
BYTE *pbComputedHash,
DWORD cbComputedHash,
BYTE *pbSignature,
DWORD *pcbSignature
typedef BOOL (__stdcall *PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC)(
DWORD dwCertEncodingType,
PCERT_PUBLIC_KEY_INFO pPubKeyInfo,
PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
void *pvDecodedSignPara,
LPCWSTR pwszCNGPubKeyAlgid,    
LPCWSTR pwszCNGHashAlgid,
BYTE *pbComputedHash,
DWORD cbComputedHash,
BYTE *pbSignature,
DWORD cbSignature
__stdcall
CertVerifyTimeValidity(
LPFILETIME pTimeToVerify,
PCERT_INFO pCertInfo
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
__stdcall
CertVerifyCRLTimeValidity(
LPFILETIME pTimeToVerify,
PCRL_INFO pCrlInfo
__stdcall
CertVerifyValidityNesting(
PCERT_INFO pSubjectInfo,
PCERT_INFO pIssuerInfo
__stdcall
CertVerifyCRLRevocation(
DWORD dwCertEncodingType,
PCERT_INFO pCertId,          
DWORD cCrlInfo,
PCRL_INFO rgpCrlInfo[]
LPCSTR
__stdcall
CertAlgIdToOID(
DWORD dwAlgId
DWORD
__stdcall
CertOIDToAlgId(
LPCSTR pszObjId
#pragma endregion
#pragma region Application Family or OneCore or Games Family
PCERT_EXTENSION
__stdcall
CertFindExtension(
LPCSTR pszObjId,
DWORD cExtensions,
CERT_EXTENSION rgExtensions[]
PCRYPT_ATTRIBUTE
__stdcall
CertFindAttribute(
LPCSTR pszObjId,
DWORD cAttr,
CRYPT_ATTRIBUTE rgAttr[]
PCERT_RDN_ATTR
__stdcall
CertFindRDNAttr(
LPCSTR pszObjId,
PCERT_NAME_INFO pName
__stdcall
CertGetIntendedKeyUsage(
DWORD dwCertEncodingType,
PCERT_INFO pCertInfo,
BYTE *pbKeyUsage,
DWORD cbKeyUsage
typedef void *HCRYPTDEFAULTCONTEXT;
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
__stdcall
CryptInstallDefaultContext(
HCRYPTPROV hCryptProv,
DWORD dwDefaultType,
const void *pvDefaultPara,
DWORD dwFlags,
void *pvReserved,
HCRYPTDEFAULTCONTEXT *phDefaultContext
typedef struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA {
DWORD               cOID;
LPSTR               *rgpszOID;
} CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA, *PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
__stdcall
CryptUninstallDefaultContext(
HCRYPTDEFAULTCONTEXT hDefaultContext,
DWORD dwFlags,
void *pvReserved
__stdcall
CryptExportPublicKeyInfo(
HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
DWORD dwKeySpec,       
DWORD dwCertEncodingType,
PCERT_PUBLIC_KEY_INFO pInfo,
DWORD *pcbInfo
__stdcall
CryptExportPublicKeyInfoEx(
HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
DWORD dwKeySpec,       
DWORD dwCertEncodingType,
LPSTR pszPublicKeyObjId,
DWORD dwFlags,
void *pvAuxInfo,
PCERT_PUBLIC_KEY_INFO pInfo,
DWORD *pcbInfo
typedef BOOL (__stdcall *PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC) (
NCRYPT_KEY_HANDLE hNCryptKey,
DWORD dwCertEncodingType,
LPSTR pszPublicKeyObjId,
DWORD dwFlags,
void *pvAuxInfo,
PCERT_PUBLIC_KEY_INFO pInfo,
DWORD *pcbInfo
__stdcall
CryptExportPublicKeyInfoFromBCryptKeyHandle(
BCRYPT_KEY_HANDLE hBCryptKey,
DWORD dwCertEncodingType,
LPSTR pszPublicKeyObjId,
DWORD dwFlags,
void *pvAuxInfo,
PCERT_PUBLIC_KEY_INFO pInfo,
DWORD *pcbInfo
typedef BOOL (__stdcall *PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC) (
BCRYPT_KEY_HANDLE hBCryptKey,
DWORD dwCertEncodingType,
LPSTR pszPublicKeyObjId,
DWORD dwFlags,
void *pvAuxInfo,
PCERT_PUBLIC_KEY_INFO pInfo,
DWORD *pcbInfo
__stdcall
CryptImportPublicKeyInfo(
HCRYPTPROV hCryptProv,
DWORD dwCertEncodingType,
PCERT_PUBLIC_KEY_INFO pInfo,
HCRYPTKEY *phKey
__stdcall
CryptImportPublicKeyInfoEx(
HCRYPTPROV hCryptProv,
DWORD dwCertEncodingType,
PCERT_PUBLIC_KEY_INFO pInfo,
ALG_ID aiKeyAlg,
DWORD dwFlags,
void *pvAuxInfo,
HCRYPTKEY *phKey
#pragma endregion
#pragma region Application Family or OneCore or Games Family
__stdcall
CryptImportPublicKeyInfoEx2(
DWORD dwCertEncodingType,
PCERT_PUBLIC_KEY_INFO pInfo,
DWORD dwFlags,
void *pvAuxInfo,
BCRYPT_KEY_HANDLE *phKey
typedef BOOL (__stdcall *PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC) (
DWORD dwCertEncodingType,
PCERT_PUBLIC_KEY_INFO pInfo,
DWORD dwFlags,
void *pvAuxInfo,
BCRYPT_KEY_HANDLE *phKey
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
#pragma endregion
#pragma region Application Family or OneCore or Games Family
__stdcall
CryptAcquireCertificatePrivateKey(
PCCERT_CONTEXT pCert,
DWORD dwFlags,
void *pvParameters,
HCRYPTPROV_OR_NCRYPT_KEY_HANDLE *phCryptProvOrNCryptKey,
DWORD *pdwKeySpec,
BOOL *pfCallerFreeProvOrNCryptKey
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
__stdcall
CryptFindCertificateKeyProvInfo(
PCCERT_CONTEXT pCert,
DWORD dwFlags,
void *pvReserved
typedef BOOL (__stdcall *PFN_IMPORT_PRIV_KEY_FUNC) (
HCRYPTPROV hCryptProv,                     
CRYPT_PRIVATE_KEY_INFO* pPrivateKeyInfo,   
DWORD dwFlags,                             
void* pvAuxInfo                        
__stdcall
CryptImportPKCS8(
CRYPT_PKCS8_IMPORT_PARAMS sPrivateKeyAndParams,    
DWORD dwFlags,                                     
HCRYPTPROV *phCryptProv,                      
void* pvAuxInfo                                
typedef BOOL (__stdcall *PFN_EXPORT_PRIV_KEY_FUNC) (
HCRYPTPROV hCryptProv,         
DWORD dwKeySpec,               
LPSTR pszPrivateKeyObjId,      
DWORD dwFlags,                 
void* pvAuxInfo,           
CRYPT_PRIVATE_KEY_INFO* pPrivateKeyInfo,  
DWORD* pcbPrivateKeyInfo    
__stdcall
CryptExportPKCS8(
HCRYPTPROV hCryptProv,                                     
DWORD dwKeySpec,                                           
LPSTR pszPrivateKeyObjId,                                  
DWORD dwFlags,                                             
void* pvAuxInfo,                                       
BYTE* pbPrivateKeyBlob,   
DWORD *pcbPrivateKeyBlob                                
#pragma endregion
#pragma region Desktop or Games Family
__stdcall
CryptExportPKCS8Ex(
CRYPT_PKCS8_EXPORT_PARAMS* psExportParams,                 
DWORD dwFlags,                                             
void* pvAuxInfo,                                       
BYTE* pbPrivateKeyBlob,   
DWORD* pcbPrivateKeyBlob                                
#pragma endregion
#pragma region Application Family or OneCore or Games Family
__stdcall
CryptHashPublicKeyInfo(
HCRYPTPROV_LEGACY hCryptProv,
ALG_ID Algid,
DWORD dwFlags,
DWORD dwCertEncodingType,
PCERT_PUBLIC_KEY_INFO pInfo,
BYTE *pbComputedHash,
DWORD *pcbComputedHash
DWORD
__stdcall
CertRDNValueToStrA(
DWORD dwValueType,
PCERT_RDN_VALUE_BLOB pValue,
LPSTR psz,
DWORD csz
DWORD
__stdcall
CertRDNValueToStrW(
DWORD dwValueType,
PCERT_RDN_VALUE_BLOB pValue,
LPWSTR psz,
DWORD csz
DWORD
__stdcall
CertNameToStrA(
DWORD dwCertEncodingType,
PCERT_NAME_BLOB pName,
DWORD dwStrType,
LPSTR psz,
DWORD csz
DWORD
__stdcall
CertNameToStrW(
DWORD dwCertEncodingType,
PCERT_NAME_BLOB pName,
DWORD dwStrType,
LPWSTR psz,
DWORD csz
__stdcall
CertStrToNameA(
DWORD dwCertEncodingType,
LPCSTR pszX500,
DWORD dwStrType,
void *pvReserved,
BYTE *pbEncoded,
DWORD *pcbEncoded,
LPCSTR *ppszError
__stdcall
CertStrToNameW(
DWORD dwCertEncodingType,
LPCWSTR pszX500,
DWORD dwStrType,
void *pvReserved,
BYTE *pbEncoded,
DWORD *pcbEncoded,
LPCWSTR *ppszError
DWORD
__stdcall
CertGetNameStringA(
PCCERT_CONTEXT pCertContext,
DWORD dwType,
DWORD dwFlags,
void *pvTypePara,
LPSTR pszNameString,
DWORD cchNameString
DWORD
__stdcall
CertGetNameStringW(
PCCERT_CONTEXT pCertContext,
DWORD dwType,
DWORD dwFlags,
void *pvTypePara,
LPWSTR pszNameString,
DWORD cchNameString
typedef PCCERT_CONTEXT (__stdcall *PFN_CRYPT_GET_SIGNER_CERTIFICATE)(
void *pvGetArg,
DWORD dwCertEncodingType,
PCERT_INFO pSignerId,    
HCERTSTORE hMsgCertStore
typedef struct _CRYPT_SIGN_MESSAGE_PARA {
DWORD                       cbSize;
DWORD                       dwMsgEncodingType;
PCCERT_CONTEXT              pSigningCert;
CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
void                        *pvHashAuxInfo;
DWORD                       cMsgCert;
PCCERT_CONTEXT              *rgpMsgCert;
DWORD                       cMsgCrl;
PCCRL_CONTEXT               *rgpMsgCrl;
DWORD                       cAuthAttr;
PCRYPT_ATTRIBUTE            rgAuthAttr;
DWORD                       cUnauthAttr;
PCRYPT_ATTRIBUTE            rgUnauthAttr;
DWORD                       dwFlags;
DWORD                       dwInnerContentType;
} CRYPT_SIGN_MESSAGE_PARA, *PCRYPT_SIGN_MESSAGE_PARA;
typedef struct _CRYPT_VERIFY_MESSAGE_PARA {
DWORD                               cbSize;
DWORD                               dwMsgAndCertEncodingType;
HCRYPTPROV_LEGACY                   hCryptProv;
PFN_CRYPT_GET_SIGNER_CERTIFICATE    pfnGetSignerCertificate;
void                                *pvGetArg;
} CRYPT_VERIFY_MESSAGE_PARA, *PCRYPT_VERIFY_MESSAGE_PARA;
typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA {
DWORD                       cbSize;
DWORD                       dwMsgEncodingType;
HCRYPTPROV_LEGACY           hCryptProv;
CRYPT_ALGORITHM_IDENTIFIER  ContentEncryptionAlgorithm;
void                        *pvEncryptionAuxInfo;
DWORD                       dwFlags;
DWORD                       dwInnerContentType;
} CRYPT_ENCRYPT_MESSAGE_PARA, *PCRYPT_ENCRYPT_MESSAGE_PARA;
typedef struct _CRYPT_DECRYPT_MESSAGE_PARA {
DWORD                   cbSize;
DWORD                   dwMsgAndCertEncodingType;
DWORD                   cCertStore;
HCERTSTORE              *rghCertStore;
} CRYPT_DECRYPT_MESSAGE_PARA, *PCRYPT_DECRYPT_MESSAGE_PARA;
typedef struct _CRYPT_HASH_MESSAGE_PARA {
DWORD                       cbSize;
DWORD                       dwMsgEncodingType;
HCRYPTPROV_LEGACY           hCryptProv;
CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
void                        *pvHashAuxInfo;
} CRYPT_HASH_MESSAGE_PARA, *PCRYPT_HASH_MESSAGE_PARA;
typedef struct _CRYPT_KEY_SIGN_MESSAGE_PARA {
DWORD                       cbSize;
DWORD                       dwMsgAndCertEncodingType;
union {
HCRYPTPROV                  hCryptProv;
NCRYPT_KEY_HANDLE           hNCryptKey;
} DUMMYUNIONNAME;
DWORD                       dwKeySpec;
CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
void                        *pvHashAuxInfo;
CRYPT_ALGORITHM_IDENTIFIER  PubKeyAlgorithm;
} CRYPT_KEY_SIGN_MESSAGE_PARA, *PCRYPT_KEY_SIGN_MESSAGE_PARA;
typedef struct _CRYPT_KEY_VERIFY_MESSAGE_PARA {
DWORD                   cbSize;
DWORD                   dwMsgEncodingType;
HCRYPTPROV_LEGACY       hCryptProv;
} CRYPT_KEY_VERIFY_MESSAGE_PARA, *PCRYPT_KEY_VERIFY_MESSAGE_PARA;
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
__stdcall
CryptSignMessage(
PCRYPT_SIGN_MESSAGE_PARA pSignPara,
BOOL fDetachedSignature,
DWORD cToBeSigned,
const BYTE *rgpbToBeSigned[],
DWORD rgcbToBeSigned[],
BYTE *pbSignedBlob,
DWORD *pcbSignedBlob
__stdcall
CryptVerifyMessageSignature(
PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
DWORD dwSignerIndex,
const BYTE *pbSignedBlob,
DWORD cbSignedBlob,
BYTE *pbDecoded,
DWORD *pcbDecoded,
PCCERT_CONTEXT *ppSignerCert
__stdcall
CryptGetMessageSignerCount(
DWORD dwMsgEncodingType,
const BYTE *pbSignedBlob,
DWORD cbSignedBlob
HCERTSTORE
__stdcall
CryptGetMessageCertificates(
DWORD dwMsgAndCertEncodingType,
HCRYPTPROV_LEGACY hCryptProv,           
DWORD dwFlags,                   
const BYTE *pbSignedBlob,
DWORD cbSignedBlob
__stdcall
CryptVerifyDetachedMessageSignature(
PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
DWORD dwSignerIndex,
const BYTE *pbDetachedSignBlob,
DWORD cbDetachedSignBlob,
DWORD cToBeSigned,
const BYTE *rgpbToBeSigned[],
DWORD rgcbToBeSigned[],
PCCERT_CONTEXT *ppSignerCert
__stdcall
CryptEncryptMessage(
PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,
DWORD cRecipientCert,
PCCERT_CONTEXT rgpRecipientCert[],
const BYTE *pbToBeEncrypted,
DWORD cbToBeEncrypted,
BYTE *pbEncryptedBlob,
DWORD *pcbEncryptedBlob
__stdcall
CryptDecryptMessage(
PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
const BYTE *pbEncryptedBlob,
DWORD cbEncryptedBlob,
BYTE *pbDecrypted,
DWORD *pcbDecrypted,
PCCERT_CONTEXT *ppXchgCert
__stdcall
CryptSignAndEncryptMessage(
PCRYPT_SIGN_MESSAGE_PARA pSignPara,
PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,
DWORD cRecipientCert,
PCCERT_CONTEXT rgpRecipientCert[],
const BYTE *pbToBeSignedAndEncrypted,
DWORD cbToBeSignedAndEncrypted,
BYTE *pbSignedAndEncryptedBlob,
DWORD *pcbSignedAndEncryptedBlob
__stdcall
CryptDecryptAndVerifyMessageSignature(
PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
DWORD dwSignerIndex,
const BYTE *pbEncryptedBlob,
DWORD cbEncryptedBlob,
BYTE *pbDecrypted,
DWORD *pcbDecrypted,
PCCERT_CONTEXT *ppXchgCert,
PCCERT_CONTEXT *ppSignerCert
__stdcall
CryptDecodeMessage(
DWORD dwMsgTypeFlags,
PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
DWORD dwSignerIndex,
const BYTE *pbEncodedBlob,
DWORD cbEncodedBlob,
DWORD dwPrevInnerContentType,
DWORD *pdwMsgType,
DWORD *pdwInnerContentType,
BYTE *pbDecoded,
DWORD *pcbDecoded,
PCCERT_CONTEXT *ppXchgCert,
PCCERT_CONTEXT *ppSignerCert
__stdcall
CryptHashMessage(
PCRYPT_HASH_MESSAGE_PARA pHashPara,
BOOL fDetachedHash,
DWORD cToBeHashed,
const BYTE *rgpbToBeHashed[],
DWORD rgcbToBeHashed[],
BYTE *pbHashedBlob,
DWORD *pcbHashedBlob,
BYTE *pbComputedHash,
DWORD *pcbComputedHash
__stdcall
CryptVerifyMessageHash(
PCRYPT_HASH_MESSAGE_PARA pHashPara,
BYTE *pbHashedBlob,
DWORD cbHashedBlob,
BYTE *pbToBeHashed,
DWORD *pcbToBeHashed,
BYTE *pbComputedHash,
DWORD *pcbComputedHash
__stdcall
CryptVerifyDetachedMessageHash(
PCRYPT_HASH_MESSAGE_PARA pHashPara,
BYTE *pbDetachedHashBlob,
DWORD cbDetachedHashBlob,
DWORD cToBeHashed,
const BYTE *rgpbToBeHashed[],
DWORD rgcbToBeHashed[],
BYTE *pbComputedHash,
DWORD *pcbComputedHash
__stdcall
CryptSignMessageWithKey(
PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara,
const BYTE *pbToBeSigned,
DWORD cbToBeSigned,
BYTE *pbSignedBlob,
DWORD *pcbSignedBlob
__stdcall
CryptVerifyMessageSignatureWithKey(
PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara,
PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
const BYTE *pbSignedBlob,
DWORD cbSignedBlob,
BYTE *pbDecoded,
DWORD *pcbDecoded
#pragma endregion
#pragma region Application Family or Wintrust Package or Games Family
HCERTSTORE
__stdcall
CertOpenSystemStoreA(
HCRYPTPROV_LEGACY      hProv,
LPCSTR            szSubsystemProtocol
HCERTSTORE
__stdcall
CertOpenSystemStoreW(
HCRYPTPROV_LEGACY      hProv,
LPCWSTR            szSubsystemProtocol
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
__stdcall
CertAddEncodedCertificateToSystemStoreA(
LPCSTR            szCertStoreName,
const BYTE *    pbCertEncoded,
DWORD           cbCertEncoded
__stdcall
CertAddEncodedCertificateToSystemStoreW(
LPCWSTR            szCertStoreName,
const BYTE *    pbCertEncoded,
DWORD           cbCertEncoded
#pragma endregion
#pragma region Desktop Family or Wintrust Package or Games Family
typedef struct _CERT_CHAIN {
DWORD                   cCerts;     
PCERT_BLOB              certs;      
CRYPT_KEY_PROV_INFO     keyLocatorInfo; 
} CERT_CHAIN, *PCERT_CHAIN;
HRESULT
__stdcall
FindCertsByIssuer(
PCERT_CHAIN pCertChains,
DWORD *pcbCertChains,
DWORD *pcCertChains,        
BYTE* pbEncodedIssuerName,   
DWORD cbEncodedIssuerName,   
LPCWSTR pwszPurpose,     
DWORD dwKeySpec              
#pragma endregion
#pragma region Application Family or OneCore or Games Family
__stdcall
CryptQueryObject(
DWORD                    dwObjectType,
const void               *pvObject,
DWORD                    dwExpectedContentTypeFlags,
DWORD                    dwExpectedFormatTypeFlags,
DWORD                    dwFlags,
DWORD               *pdwMsgAndCertEncodingType,
DWORD               *pdwContentType,
DWORD               *pdwFormatType,
HCERTSTORE          *phCertStore,
HCRYPTMSG           *phMsg,
const void **ppvContext
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
LPVOID
__stdcall
CryptMemAlloc (
ULONG cbSize
LPVOID
__stdcall
CryptMemRealloc (
LPVOID pv,
ULONG cbSize
__stdcall
CryptMemFree (
LPVOID pv
typedef HANDLE HCRYPTASYNC, *PHCRYPTASYNC;
typedef VOID (__stdcall *PFN_CRYPT_ASYNC_PARAM_FREE_FUNC) (
LPSTR pszParamOid,
LPVOID pvParam
__stdcall
CryptCreateAsyncHandle (
DWORD dwFlags,
PHCRYPTASYNC phAsync
__stdcall
CryptSetAsyncParam (
HCRYPTASYNC hAsync,
LPSTR pszParamOid,
LPVOID pvParam,
PFN_CRYPT_ASYNC_PARAM_FREE_FUNC pfnFree
__stdcall
CryptGetAsyncParam (
HCRYPTASYNC hAsync,
LPSTR pszParamOid,
LPVOID* ppvParam,
PFN_CRYPT_ASYNC_PARAM_FREE_FUNC* ppfnFree
__stdcall
CryptCloseAsyncHandle (
HCRYPTASYNC hAsync
#pragma endregion
#pragma region Application Family or OneCore or Games Family
typedef struct _CRYPT_BLOB_ARRAY {
DWORD            cBlob;
PCRYPT_DATA_BLOB rgBlob;
} CRYPT_BLOB_ARRAY, *PCRYPT_BLOB_ARRAY;
typedef struct _CRYPT_CREDENTIALS {
DWORD  cbSize;
LPCSTR pszCredentialsOid;
LPVOID pvCredentials;
} CRYPT_CREDENTIALS, *PCRYPT_CREDENTIALS;
typedef struct _CRYPT_PASSWORD_CREDENTIALSA {
DWORD   cbSize;
LPSTR   pszUsername;
LPSTR   pszPassword;
} CRYPT_PASSWORD_CREDENTIALSA, *PCRYPT_PASSWORD_CREDENTIALSA;
typedef struct _CRYPT_PASSWORD_CREDENTIALSW {
DWORD   cbSize;
LPWSTR  pszUsername;
LPWSTR  pszPassword;
} CRYPT_PASSWORD_CREDENTIALSW, *PCRYPT_PASSWORD_CREDENTIALSW;
typedef CRYPT_PASSWORD_CREDENTIALSA CRYPT_PASSWORD_CREDENTIALS;
typedef PCRYPT_PASSWORD_CREDENTIALSA PCRYPT_PASSWORD_CREDENTIALS;
typedef VOID (__stdcall *PFN_FREE_ENCODED_OBJECT_FUNC) (
LPCSTR pszObjectOid,
PCRYPT_BLOB_ARRAY pObject,
LPVOID pvFreeContext
typedef struct _CRYPTNET_URL_CACHE_PRE_FETCH_INFO {
DWORD           cbSize;
DWORD           dwObjectType;
DWORD           dwError;
DWORD           dwReserved;
FILETIME        ThisUpdateTime;
FILETIME        NextUpdateTime;
FILETIME        PublishTime;    
} CRYPTNET_URL_CACHE_PRE_FETCH_INFO, *PCRYPTNET_URL_CACHE_PRE_FETCH_INFO;
typedef struct _CRYPTNET_URL_CACHE_FLUSH_INFO {
DWORD           cbSize;
DWORD           dwExemptSeconds;
FILETIME        ExpireTime;
} CRYPTNET_URL_CACHE_FLUSH_INFO, *PCRYPTNET_URL_CACHE_FLUSH_INFO;
typedef struct _CRYPTNET_URL_CACHE_RESPONSE_INFO {
DWORD           cbSize;
WORD            wResponseType;
WORD            wResponseFlags;
FILETIME        LastModifiedTime;
DWORD           dwMaxAge;
LPCWSTR         pwszETag;
DWORD           dwProxyId;
} CRYPTNET_URL_CACHE_RESPONSE_INFO, *PCRYPTNET_URL_CACHE_RESPONSE_INFO;
typedef struct _CRYPT_RETRIEVE_AUX_INFO {
DWORD                               cbSize;
FILETIME                            *pLastSyncTime;
DWORD                               dwMaxUrlRetrievalByteCount;
PCRYPTNET_URL_CACHE_PRE_FETCH_INFO  pPreFetchInfo;
PCRYPTNET_URL_CACHE_FLUSH_INFO      pFlushInfo;
PCRYPTNET_URL_CACHE_RESPONSE_INFO   *ppResponseInfo;
LPWSTR                              pwszCacheFileNamePrefix;
LPFILETIME                          pftCacheResync;
BOOL                                fProxyCacheRetrieval;
DWORD                               dwHttpStatusCode;
LPWSTR                              *ppwszErrorResponseHeaders;
PCRYPT_DATA_BLOB                    *ppErrorContentBlob;
} CRYPT_RETRIEVE_AUX_INFO, *PCRYPT_RETRIEVE_AUX_INFO;
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
__stdcall
CryptRetrieveObjectByUrlA (
LPCSTR pszUrl,
LPCSTR pszObjectOid,
DWORD dwRetrievalFlags,
DWORD dwTimeout,                     
LPVOID* ppvObject,
HCRYPTASYNC hAsyncRetrieve,
PCRYPT_CREDENTIALS pCredentials,
LPVOID pvVerify,
PCRYPT_RETRIEVE_AUX_INFO pAuxInfo
__stdcall
CryptRetrieveObjectByUrlW (
LPCWSTR pszUrl,
LPCSTR pszObjectOid,
DWORD dwRetrievalFlags,
DWORD dwTimeout,                     
LPVOID* ppvObject,
HCRYPTASYNC hAsyncRetrieve,
PCRYPT_CREDENTIALS pCredentials,
LPVOID pvVerify,
PCRYPT_RETRIEVE_AUX_INFO pAuxInfo
typedef BOOL (__stdcall *PFN_CRYPT_CANCEL_RETRIEVAL)(
DWORD dwFlags,
void  *pvArg
__stdcall
CryptInstallCancelRetrieval(
PFN_CRYPT_CANCEL_RETRIEVAL pfnCancel,
const void *pvArg,
DWORD dwFlags,
void *pvReserved
__stdcall
CryptUninstallCancelRetrieval(
DWORD dwFlags,
void *pvReserved
#pragma endregion
#pragma region Desktop or Games Family
__stdcall
CryptCancelAsyncRetrieval (
HCRYPTASYNC hAsyncRetrieval
typedef VOID (__stdcall *PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC) (
LPVOID pvCompletion,
DWORD dwCompletionCode,
LPCSTR pszUrl,
LPSTR pszObjectOid,
LPVOID pvObject
typedef struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION {
PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC pfnCompletion;
LPVOID pvCompletion;
} CRYPT_ASYNC_RETRIEVAL_COMPLETION, *PCRYPT_ASYNC_RETRIEVAL_COMPLETION;
typedef BOOL (__stdcall *PFN_CANCEL_ASYNC_RETRIEVAL_FUNC) (
HCRYPTASYNC hAsyncRetrieve
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
typedef struct _CRYPT_URL_ARRAY {
DWORD   cUrl;
LPWSTR* rgwszUrl;
} CRYPT_URL_ARRAY, *PCRYPT_URL_ARRAY;
typedef struct _CRYPT_URL_INFO {
DWORD   cbSize;
DWORD   dwSyncDeltaTime;
DWORD   cGroup;
DWORD   *rgcGroupEntry;
} CRYPT_URL_INFO, *PCRYPT_URL_INFO;
__stdcall
CryptGetObjectUrl (
LPCSTR pszUrlOid,
LPVOID pvPara,
DWORD dwFlags,
PCRYPT_URL_ARRAY pUrlArray,
DWORD* pcbUrlArray,
PCRYPT_URL_INFO pUrlInfo,
DWORD* pcbUrlInfo,
LPVOID pvReserved
typedef struct _CERT_CRL_CONTEXT_PAIR {
PCCERT_CONTEXT          pCertContext;
PCCRL_CONTEXT           pCrlContext;
} CERT_CRL_CONTEXT_PAIR, *PCERT_CRL_CONTEXT_PAIR;
typedef const CERT_CRL_CONTEXT_PAIR *PCCERT_CRL_CONTEXT_PAIR;
#pragma endregion
#pragma region Desktop or Games Family
typedef struct _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO {
DWORD                       cbSize;
int                         iDeltaCrlIndicator;
LPFILETIME                  pftCacheResync;
LPFILETIME                  pLastSyncTime;
LPFILETIME                  pMaxAgeTime;
PCERT_REVOCATION_CHAIN_PARA pChainPara;
PCRYPT_INTEGER_BLOB pDeltaCrlIndicator;
} CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO,
*PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO;
__stdcall
CryptGetTimeValidObject (
LPCSTR pszTimeValidOid,
LPVOID pvPara,
PCCERT_CONTEXT pIssuer,
LPFILETIME pftValidFor,
DWORD dwFlags,
DWORD dwTimeout,                         
LPVOID* ppvObject,
PCRYPT_CREDENTIALS pCredentials,
PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO pExtraInfo
__stdcall
CryptFlushTimeValidObject (
LPCSTR pszFlushTimeValidOid,
LPVOID pvPara,
PCCERT_CONTEXT pIssuer,
DWORD dwFlags,
LPVOID pvReserved
#pragma endregion
#pragma region Application Family or OneCore or Games Family
PCCERT_CONTEXT
__stdcall
CertCreateSelfSignCertificate(
HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
PCERT_NAME_BLOB             pSubjectIssuerBlob,
DWORD                       dwFlags,
PCRYPT_KEY_PROV_INFO        pKeyProvInfo,
PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
PSYSTEMTIME                 pStartTime,
PSYSTEMTIME                 pEndTime,
PCERT_EXTENSIONS            pExtensions
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
__stdcall
CryptGetKeyIdentifierProperty(
const CRYPT_HASH_BLOB *pKeyIdentifier,
DWORD dwPropId,
DWORD dwFlags,
LPCWSTR pwszComputerName,
void *pvReserved,
void *pvData,
DWORD *pcbData
__stdcall
CryptSetKeyIdentifierProperty(
const CRYPT_HASH_BLOB *pKeyIdentifier,
DWORD dwPropId,
DWORD dwFlags,
LPCWSTR pwszComputerName,
void *pvReserved,
const void *pvData
typedef BOOL (__stdcall *PFN_CRYPT_ENUM_KEYID_PROP)(
const CRYPT_HASH_BLOB *pKeyIdentifier,
DWORD dwFlags,
void *pvReserved,
void *pvArg,
DWORD cProp,
DWORD *rgdwPropId,
void **rgpvData,
DWORD *rgcbData
__stdcall
CryptEnumKeyIdentifierProperties(
const CRYPT_HASH_BLOB *pKeyIdentifier,
DWORD dwPropId,
DWORD dwFlags,
LPCWSTR pwszComputerName,
void *pvReserved,
void *pvArg,
PFN_CRYPT_ENUM_KEYID_PROP pfnEnum
__stdcall
CryptCreateKeyIdentifierFromCSP(
DWORD dwCertEncodingType,
LPCSTR pszPubKeyOID,
const PUBLICKEYSTRUC *pPubKeyStruc,
DWORD cbPubKeyStruc,
DWORD dwFlags,
void *pvReserved,
BYTE *pbHash,
DWORD *pcbHash
#pragma endregion
#pragma region Application Family or OneCore or Games Family
typedef HANDLE HCERTCHAINENGINE;
typedef struct _CERT_CHAIN_ENGINE_CONFIG {
DWORD       cbSize;
HCERTSTORE  hRestrictedRoot;
HCERTSTORE  hRestrictedTrust;
HCERTSTORE  hRestrictedOther;
DWORD       cAdditionalStore;
HCERTSTORE* rghAdditionalStore;
DWORD       dwFlags;
DWORD       dwUrlRetrievalTimeout;      
DWORD       MaximumCachedCertificates;
DWORD       CycleDetectionModulus;
HCERTSTORE  hExclusiveRoot;
HCERTSTORE  hExclusiveTrustedPeople;
DWORD       dwExclusiveFlags;
} CERT_CHAIN_ENGINE_CONFIG, *PCERT_CHAIN_ENGINE_CONFIG;
__stdcall
CertCreateCertificateChainEngine (
PCERT_CHAIN_ENGINE_CONFIG pConfig,
HCERTCHAINENGINE* phChainEngine
__stdcall
CertFreeCertificateChainEngine (
HCERTCHAINENGINE hChainEngine
__stdcall
CertResyncCertificateChainEngine (
HCERTCHAINENGINE hChainEngine
typedef struct _CERT_TRUST_STATUS {
DWORD dwErrorStatus;
DWORD dwInfoStatus;
} CERT_TRUST_STATUS, *PCERT_TRUST_STATUS;
typedef struct _CERT_REVOCATION_INFO {
DWORD                       cbSize;
DWORD                       dwRevocationResult;
LPCSTR                      pszRevocationOid;
LPVOID                      pvOidSpecificInfo;
BOOL                        fHasFreshnessTime;
DWORD                       dwFreshnessTime;    
PCERT_REVOCATION_CRL_INFO   pCrlInfo;
} CERT_REVOCATION_INFO, *PCERT_REVOCATION_INFO;
typedef struct _CERT_TRUST_LIST_INFO {
DWORD         cbSize;
PCTL_ENTRY    pCtlEntry;
PCCTL_CONTEXT pCtlContext;
} CERT_TRUST_LIST_INFO, *PCERT_TRUST_LIST_INFO;
typedef struct _CERT_CHAIN_ELEMENT {
DWORD                 cbSize;
PCCERT_CONTEXT        pCertContext;
CERT_TRUST_STATUS     TrustStatus;
PCERT_REVOCATION_INFO pRevocationInfo;
PCERT_ENHKEY_USAGE    pIssuanceUsage;       
PCERT_ENHKEY_USAGE    pApplicationUsage;    
LPCWSTR               pwszExtendedErrorInfo;    
} CERT_CHAIN_ELEMENT, *PCERT_CHAIN_ELEMENT;
typedef const CERT_CHAIN_ELEMENT* PCCERT_CHAIN_ELEMENT;
typedef struct _CERT_SIMPLE_CHAIN {
DWORD                 cbSize;
CERT_TRUST_STATUS     TrustStatus;
DWORD                 cElement;
PCERT_CHAIN_ELEMENT*  rgpElement;
PCERT_TRUST_LIST_INFO pTrustListInfo;
BOOL                   fHasRevocationFreshnessTime;
DWORD                  dwRevocationFreshnessTime;    
} CERT_SIMPLE_CHAIN, *PCERT_SIMPLE_CHAIN;
typedef const CERT_SIMPLE_CHAIN* PCCERT_SIMPLE_CHAIN;
typedef struct _CERT_CHAIN_CONTEXT CERT_CHAIN_CONTEXT, *PCERT_CHAIN_CONTEXT;
typedef const CERT_CHAIN_CONTEXT *PCCERT_CHAIN_CONTEXT;
struct _CERT_CHAIN_CONTEXT {
DWORD                   cbSize;
CERT_TRUST_STATUS       TrustStatus;
DWORD                   cChain;
PCERT_SIMPLE_CHAIN*     rgpChain;
DWORD                   cLowerQualityChainContext;
PCCERT_CHAIN_CONTEXT*   rgpLowerQualityChainContext;
BOOL                    fHasRevocationFreshnessTime;
DWORD                   dwRevocationFreshnessTime;    
DWORD                   dwCreateFlags;
GUID                    ChainId;
typedef struct _CERT_USAGE_MATCH {
DWORD             dwType;
CERT_ENHKEY_USAGE Usage;
} CERT_USAGE_MATCH, *PCERT_USAGE_MATCH;
typedef struct _CTL_USAGE_MATCH {
DWORD     dwType;
CTL_USAGE Usage;
} CTL_USAGE_MATCH, *PCTL_USAGE_MATCH;
typedef struct _CERT_CHAIN_PARA {
DWORD            cbSize;
CERT_USAGE_MATCH RequestedUsage;
} CERT_CHAIN_PARA, *PCERT_CHAIN_PARA;
__stdcall
CertGetCertificateChain (
HCERTCHAINENGINE hChainEngine,
PCCERT_CONTEXT pCertContext,
LPFILETIME pTime,
HCERTSTORE hAdditionalStore,
PCERT_CHAIN_PARA pChainPara,
DWORD dwFlags,
LPVOID pvReserved,
PCCERT_CHAIN_CONTEXT* ppChainContext
__stdcall
CertFreeCertificateChain (
PCCERT_CHAIN_CONTEXT pChainContext
PCCERT_CHAIN_CONTEXT
__stdcall
CertDuplicateCertificateChain (
PCCERT_CHAIN_CONTEXT pChainContext
struct _CERT_REVOCATION_CHAIN_PARA {
DWORD                       cbSize;
HCERTCHAINENGINE            hChainEngine;
HCERTSTORE                  hAdditionalStore;
DWORD                       dwChainFlags;
DWORD                       dwUrlRetrievalTimeout;     
LPFILETIME                  pftCurrentTime;
LPFILETIME                  pftCacheResync;
DWORD                       cbMaxUrlRetrievalByteCount;
typedef struct _CRL_REVOCATION_INFO {
PCRL_ENTRY           pCrlEntry;
PCCRL_CONTEXT        pCrlContext;
PCCERT_CHAIN_CONTEXT pCrlIssuerChain;
} CRL_REVOCATION_INFO, *PCRL_REVOCATION_INFO;
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
PCCERT_CHAIN_CONTEXT
__stdcall
CertFindChainInStore(
HCERTSTORE hCertStore,
DWORD dwCertEncodingType,
DWORD dwFindFlags,
DWORD dwFindType,
const void *pvFindPara,
PCCERT_CHAIN_CONTEXT pPrevChainContext
#pragma endregion
#pragma region Application Family or OneCore or Games Family
typedef BOOL (__stdcall *PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK)(
PCCERT_CONTEXT pCert,
void *pvFindArg
typedef struct _CERT_CHAIN_FIND_BY_ISSUER_PARA {
DWORD                                   cbSize;
LPCSTR                                  pszUsageIdentifier;
DWORD                                   dwKeySpec;
DWORD                                   dwAcquirePrivateKeyFlags;
DWORD                                   cIssuer;
CERT_NAME_BLOB                          *rgIssuer;
PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFindCallback;
void                                    *pvFindArg;
} CERT_CHAIN_FIND_ISSUER_PARA, *PCERT_CHAIN_FIND_ISSUER_PARA,
CERT_CHAIN_FIND_BY_ISSUER_PARA, *PCERT_CHAIN_FIND_BY_ISSUER_PARA;
typedef struct _CERT_CHAIN_POLICY_PARA {
DWORD                   cbSize;
DWORD                   dwFlags;
void                    *pvExtraPolicyPara;     
} CERT_CHAIN_POLICY_PARA, *PCERT_CHAIN_POLICY_PARA;
typedef struct _CERT_CHAIN_POLICY_STATUS {
DWORD                   cbSize;
DWORD                   dwError;
LONG                    lChainIndex;
LONG                    lElementIndex;
void                    *pvExtraPolicyStatus;   
} CERT_CHAIN_POLICY_STATUS, *PCERT_CHAIN_POLICY_STATUS;
__stdcall
CertVerifyCertificateChainPolicy(
LPCSTR pszPolicyOID,
PCCERT_CHAIN_CONTEXT pChainContext,
PCERT_CHAIN_POLICY_PARA pPolicyPara,
PCERT_CHAIN_POLICY_STATUS pPolicyStatus
typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA {
DWORD               cbSize;
DWORD               dwRegPolicySettings;
PCMSG_SIGNER_INFO   pSignerInfo;                
} AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA,
*PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS {
DWORD               cbSize;
BOOL                fCommercial;        
} AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS,
*PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
typedef struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA {
DWORD               cbSize;
DWORD               dwRegPolicySettings;
BOOL                fCommercial;
} AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA,
*PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _HTTPSPolicyCallbackData
union {
DWORD           cbStruct;       
DWORD           cbSize;         
} DUMMYUNIONNAME;
DWORD           dwAuthType;
DWORD           fdwChecks;
WCHAR           *pwszServerName; 
} HTTPSPolicyCallbackData, *PHTTPSPolicyCallbackData,
SSL_EXTRA_CERT_CHAIN_POLICY_PARA, *PSSL_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _EV_EXTRA_CERT_CHAIN_POLICY_PARA {
DWORD               cbSize;
DWORD               dwRootProgramQualifierFlags;
} EV_EXTRA_CERT_CHAIN_POLICY_PARA,
*PEV_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _EV_EXTRA_CERT_CHAIN_POLICY_STATUS {
DWORD   cbSize;
DWORD   dwQualifiers;
DWORD   dwIssuanceUsageIndex;
} EV_EXTRA_CERT_CHAIN_POLICY_STATUS, *PEV_EXTRA_CERT_CHAIN_POLICY_STATUS;
typedef struct _SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS {
DWORD   cbSize;
DWORD   dwErrorLevel;
DWORD   dwErrorCategory;
DWORD   dwReserved;
WCHAR   wszErrorText[256];  
} SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS, *PSSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS;
typedef struct _SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA {
DWORD               cbSize;
DWORD               dwReserved;
LPWSTR              pwszServerName;
LPSTR               rgpszHpkpValue[2];
} SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA,
*PSSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA {
DWORD   cbSize;
DWORD   dwReserved;
PCWSTR  pwszServerName;
} SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA, *PSSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS {
DWORD   cbSize;
LONG    lError;
WCHAR   wszErrorText[512];  
} SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS, *PSSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS;
__stdcall
CryptStringToBinaryA(
LPCSTR pszString,
DWORD cchString,
DWORD dwFlags,
BYTE *pbBinary,
DWORD  *pcbBinary,
DWORD *pdwSkip,
DWORD *pdwFlags
__stdcall
CryptStringToBinaryW(
LPCWSTR pszString,
DWORD cchString,
DWORD dwFlags,
BYTE *pbBinary,
DWORD  *pcbBinary,
DWORD *pdwSkip,
DWORD *pdwFlags
__stdcall
CryptBinaryToStringA(
const BYTE *pbBinary,
DWORD cbBinary,
DWORD dwFlags,
LPSTR pszString,
DWORD *pcchString
__stdcall
CryptBinaryToStringW(
const BYTE *pbBinary,
DWORD cbBinary,
DWORD dwFlags,
LPWSTR pszString,
DWORD *pcchString
typedef struct _CRYPT_PKCS12_PBE_PARAMS
int                 iIterations;        
ULONG               cbSalt;             
CRYPT_PKCS12_PBE_PARAMS;
HCERTSTORE
__stdcall
PFXImportCertStore(
CRYPT_DATA_BLOB* pPFX,
LPCWSTR szPassword,
DWORD   dwFlags);
__stdcall
PFXIsPFXBlob(
CRYPT_DATA_BLOB* pPFX);
__stdcall
PFXVerifyPassword(
CRYPT_DATA_BLOB* pPFX,
LPCWSTR szPassword,
DWORD dwFlags);
__stdcall
PFXExportCertStoreEx(
HCERTSTORE hStore,
CRYPT_DATA_BLOB* pPFX,
LPCWSTR szPassword,
void* pvPara,
DWORD dwFlags);
typedef struct _PKCS12_PBES2_EXPORT_PARAMS 
DWORD dwSize;            
PVOID hNcryptDescriptor;
LPWSTR pwszPbes2Alg; 
} PKCS12_PBES2_EXPORT_PARAMS, *PPKCS12_PBES2_EXPORT_PARAMS; 
__stdcall
PFXExportCertStore(
HCERTSTORE hStore,
CRYPT_DATA_BLOB* pPFX,
LPCWSTR szPassword,
DWORD dwFlags);
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
typedef VOID *HCERT_SERVER_OCSP_RESPONSE;
typedef struct _CERT_SERVER_OCSP_RESPONSE_CONTEXT
CERT_SERVER_OCSP_RESPONSE_CONTEXT,
*PCERT_SERVER_OCSP_RESPONSE_CONTEXT;
typedef const CERT_SERVER_OCSP_RESPONSE_CONTEXT
*PCCERT_SERVER_OCSP_RESPONSE_CONTEXT;
struct _CERT_SERVER_OCSP_RESPONSE_CONTEXT {
DWORD       cbSize;
BYTE        *pbEncodedOcspResponse;
DWORD       cbEncodedOcspResponse;
typedef VOID (__stdcall *PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK)(
PCCERT_CHAIN_CONTEXT pChainContext,
PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext,
PCCRL_CONTEXT pNewCrlContext,
PCCRL_CONTEXT pPrevCrlContext,
PVOID pvArg,
DWORD dwWriteOcspFileError
typedef struct _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA {
DWORD                                           cbSize;
DWORD                                           dwFlags;
DWORD                                           *pcbUsedSize;
PWSTR                                           pwszOcspDirectory;
PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK   pfnUpdateCallback;
PVOID                                           pvUpdateCallbackArg;
} CERT_SERVER_OCSP_RESPONSE_OPEN_PARA, *PCERT_SERVER_OCSP_RESPONSE_OPEN_PARA;
HCERT_SERVER_OCSP_RESPONSE
__stdcall
CertOpenServerOcspResponse(
PCCERT_CHAIN_CONTEXT pChainContext,
DWORD dwFlags,
PCERT_SERVER_OCSP_RESPONSE_OPEN_PARA pOpenPara
__stdcall
CertAddRefServerOcspResponse(
HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse
__stdcall
CertCloseServerOcspResponse(
HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse,
DWORD dwFlags
PCCERT_SERVER_OCSP_RESPONSE_CONTEXT
__stdcall
CertGetServerOcspResponseContext(
HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse,
DWORD dwFlags,
LPVOID pvReserved
__stdcall
CertAddRefServerOcspResponseContext(
PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext
__stdcall
CertFreeServerOcspResponseContext(
PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext
__stdcall
CertRetrieveLogoOrBiometricInfo(
PCCERT_CONTEXT pCertContext,
LPCSTR lpszLogoOrBiometricType,
DWORD dwRetrievalFlags,
DWORD dwTimeout,                             
DWORD dwFlags,
void *pvReserved,
BYTE **ppbData,      
DWORD *pcbData,
LPWSTR *ppwszMimeType         
#pragma endregion
#pragma region Application Family or OneCore or Games Family
typedef struct _CERT_SELECT_CHAIN_PARA
HCERTCHAINENGINE    hChainEngine;
PFILETIME           pTime;
HCERTSTORE          hAdditionalStore;
PCERT_CHAIN_PARA    pChainPara;
DWORD               dwFlags;
CERT_SELECT_CHAIN_PARA, *PCERT_SELECT_CHAIN_PARA;
typedef const CERT_SELECT_CHAIN_PARA*    PCCERT_SELECT_CHAIN_PARA;
typedef struct _CERT_SELECT_CRITERIA
DWORD                           dwType;
DWORD                           cPara;
void**    ppPara;
CERT_SELECT_CRITERIA, *PCERT_SELECT_CRITERIA;
typedef const CERT_SELECT_CRITERIA*     PCCERT_SELECT_CRITERIA;
__stdcall
CertSelectCertificateChains(
LPCGUID pSelectionContext,
DWORD dwFlags,
PCCERT_SELECT_CHAIN_PARA pChainParameters,
DWORD cCriteria,
PCCERT_SELECT_CRITERIA rgpCriteria,
HCERTSTORE hStore,
PDWORD pcSelection,
PCCERT_CHAIN_CONTEXT** pprgpSelection
__stdcall
CertFreeCertificateChainList(
PCCERT_CHAIN_CONTEXT* prgpSelection
typedef struct _CRYPT_TIMESTAMP_REQUEST
DWORD                       dwVersion;              
CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
CRYPT_DER_BLOB              HashedMessage;
LPSTR                       pszTSAPolicyId;         
CRYPT_INTEGER_BLOB          Nonce;                  
BOOL                        fCertReq;               
DWORD                       cExtension;
PCERT_EXTENSION             rgExtension;            
} CRYPT_TIMESTAMP_REQUEST, *PCRYPT_TIMESTAMP_REQUEST;
typedef struct _CRYPT_TIMESTAMP_RESPONSE
DWORD                       dwStatus;
DWORD                       cFreeText;              
LPWSTR*                     rgFreeText;
CRYPT_BIT_BLOB              FailureInfo;            
CRYPT_DER_BLOB              ContentInfo;            
} CRYPT_TIMESTAMP_RESPONSE, *PCRYPT_TIMESTAMP_RESPONSE;
typedef struct _CRYPT_TIMESTAMP_ACCURACY
DWORD                       dwSeconds;                  
DWORD                       dwMillis;                   
DWORD                       dwMicros;                   
} CRYPT_TIMESTAMP_ACCURACY, *PCRYPT_TIMESTAMP_ACCURACY;
typedef struct _CRYPT_TIMESTAMP_INFO
DWORD                       dwVersion;                  
LPSTR                       pszTSAPolicyId;
CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
CRYPT_DER_BLOB              HashedMessage;
CRYPT_INTEGER_BLOB          SerialNumber;
FILETIME                    ftTime;
PCRYPT_TIMESTAMP_ACCURACY   pvAccuracy;                 
BOOL                        fOrdering;                  
CRYPT_DER_BLOB              Nonce;                      
CRYPT_DER_BLOB              Tsa;                        
DWORD                       cExtension;
PCERT_EXTENSION             rgExtension;                
} CRYPT_TIMESTAMP_INFO, *PCRYPT_TIMESTAMP_INFO;
typedef struct _CRYPT_TIMESTAMP_CONTEXT
DWORD                       cbEncoded;
BYTE                        *pbEncoded;
PCRYPT_TIMESTAMP_INFO       pTimeStamp;
} CRYPT_TIMESTAMP_CONTEXT, *PCRYPT_TIMESTAMP_CONTEXT;
typedef struct _CRYPT_TIMESTAMP_PARA
LPCSTR                      pszTSAPolicyId;             
BOOL                        fRequestCerts;              
CRYPT_INTEGER_BLOB          Nonce;                      
DWORD                       cExtension;
PCERT_EXTENSION             rgExtension;                
} CRYPT_TIMESTAMP_PARA, *PCRYPT_TIMESTAMP_PARA;
__stdcall
CryptRetrieveTimeStamp(
LPCWSTR     wszUrl,
DWORD       dwRetrievalFlags,
DWORD       dwTimeout,
LPCSTR      pszHashId,
const CRYPT_TIMESTAMP_PARA *pPara,
const BYTE  *pbData,
DWORD       cbData,
PCRYPT_TIMESTAMP_CONTEXT *ppTsContext,
PCCERT_CONTEXT *ppTsSigner,
HCERTSTORE  *phStore
__stdcall
CryptVerifyTimeStampSignature (
const BYTE  *pbTSContentInfo,
DWORD       cbTSContentInfo,
const BYTE  *pbData,
DWORD 
    cbData,
HCERTSTORE  hAdditionalStore,
PCRYPT_TIMESTAMP_CONTEXT   *ppTsContext,
PCCERT_CONTEXT *ppTsSigner,
HCERTSTORE  *phStore
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
typedef BOOL (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH)(
LPVOID pContext,
PCERT_NAME_BLOB *rgIdentifierOrNameList,
DWORD dwIdentifierOrNameListCount); 
typedef BOOL (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET)(
LPVOID pPluginContext,
PCRYPT_DATA_BLOB pIdentifier,
DWORD dwNameType,
PCERT_NAME_BLOB pNameBlob,
PBYTE *ppbContent,
DWORD *pcbContent,
PCWSTR *ppwszPassword,
PCRYPT_DATA_BLOB *ppIdentifier);
typedef void (__stdcall * PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE)(
DWORD dwReason,
LPVOID pPluginContext);
typedef void (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD)(
LPVOID pPluginContext,
PCWSTR pwszPassword
typedef void (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE)(
LPVOID pPluginContext,
PBYTE pbData
typedef void (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER)(
LPVOID pPluginContext,
PCRYPT_DATA_BLOB pIdentifier);
typedef struct _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE
DWORD cbSize;
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET pfnGet;
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE pfnRelease;
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD pfnFreePassword;
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE pfnFree;
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER pfnFreeIdentifier;
} CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE, *PCRYPT_OBJECT_LOCATOR_PROVIDER_TABLE;
typedef BOOL (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE)(
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH pfnFlush,
LPVOID pContext,
DWORD *pdwExpectedObjectCount,
PCRYPT_OBJECT_LOCATOR_PROVIDER_TABLE *ppFuncTable,
void **ppPluginContext);
__stdcall
CertIsWeakHash(
DWORD dwHashUseType,
LPCWSTR pwszCNGHashAlgid,
DWORD dwChainFlags,
PCCERT_CHAIN_CONTEXT pSignerChainContext,
LPFILETIME pTimeStamp,
LPCWSTR pwszFileName
typedef  BOOL (__stdcall *PFN_CERT_IS_WEAK_HASH)(
DWORD dwHashUseType,
LPCWSTR pwszCNGHashAlgid,
DWORD dwChainFlags,
PCCERT_CHAIN_CONTEXT pSignerChainContext,
LPFILETIME pTimeStamp,
LPCWSTR pwszFileName
#pragma endregion
#pragma warning(pop)
#pragma region Desktop Family or OneCore or Games Family
#pragma once
#pragma region App Family or OneCore or Games Family
#pragma endregion
#pragma region App Family or OneCore or Games Family
typedef struct  _CRYPTPROTECT_PROMPTSTRUCT
DWORD cbSize;
DWORD dwPromptFlags;
HWND  hwndApp;
LPCWSTR szPrompt;
} CRYPTPROTECT_PROMPTSTRUCT, *PCRYPTPROTECT_PROMPTSTRUCT;
pragma endregion
#pragma region App Family or OneCore or Games Family
#pragma endregion
#pragma region App Family or OneCore or Games Family
__stdcall
CryptProtectData(
DATA_BLOB*      pDataIn,
LPCWSTR         szDataDescr,
DATA_BLOB*      pOptionalEntropy,
PVOID           pvReserved,
CRYPTPROTECT_PROMPTSTRUCT*  pPromptStruct,
DWORD           dwFlags,
DATA_BLOB*      pDataOut            
__stdcall
CryptUnprotectData(
DATA_BLOB*      pDataIn,             
LPWSTR*     ppszDataDescr,       
DATA_BLOB*      pOptionalEntropy,
PVOID           pvReserved,
CRYPTPROTECT_PROMPTSTRUCT*  pPromptStruct,
DWORD           dwFlags,
DATA_BLOB*      pDataOut
#pragma endregion
#pragma region Desktop Family
__stdcall
CryptProtectDataNoUI(
DATA_BLOB*      pDataIn,
LPCWSTR         szDataDescr,
DATA_BLOB*      pOptionalEntropy,
PVOID           pvReserved,
CRYPTPROTECT_PROMPTSTRUCT*  pPromptStruct,
DWORD           dwFlags,
const BYTE      *pbOptionalPassword,
DWORD           cbOptionalPassword,
DATA_BLOB*      pDataOut            
__stdcall
CryptUnprotectDataNoUI(
DATA_BLOB*      pDataIn,             
LPWSTR*     ppszDataDescr,       
DATA_BLOB*      pOptionalEntropy,
PVOID           pvReserved,
CRYPTPROTECT_PROMPTSTRUCT*  pPromptStruct,
DWORD           dwFlags,
const BYTE      *pbOptionalPassword,
DWORD           cbOptionalPassword,
DATA_BLOB*      pDataOut
#pragma endregion
#pragma region Desktop Family or OneCore or Games Family
__stdcall
CryptUpdateProtectedState(
PSID            pOldSid,
LPCWSTR         pwszOldPassword,
DWORD           dwFlags,
DWORD           *pdwSuccessCount,
DWORD           *pdwFailureCount);
#pragma endregion
#pragma region App Family or OneCore or Games Family
#pragma endregion
#pragma region App Family or OneCore or Games Family
__stdcall
CryptProtectMemory(
LPVOID          pDataIn,             
DWORD           cbDataIn,            
DWORD           dwFlags
__stdcall
CryptUnprotectMemory(
LPVOID          pDataIn,             
DWORD           cbDataIn,            
DWORD           dwFlags
#pragma endregion
#pragma endregion
typedef const BYTE *PCBYTE;
typedef struct _FVE_UEFI_VARIABLE_INFO { 
PBYTE UEFIVariableValue;          
ULONG UEFIVariableSizeBytes;     
} FVE_UEFI_VARIABLE_INFO, *PFVE_UEFI_VARIABLE_INFO;
typedef struct _FVE_TPM_PCR7_INFO { 
PFVE_UEFI_VARIABLE_INFO PlatformKeyVariableInfo;              
PFVE_UEFI_VARIABLE_INFO KekDatabaseVariableInfo;              
PFVE_UEFI_VARIABLE_INFO AllowedDatabaseVariableInfo;          
PFVE_UEFI_VARIABLE_INFO ForbiddenDatabaseVariableInfo;        
PBYTE                   OsLoaderAuthoritySignature;           
ULONG                   OsLoaderAuthoritySignatureSizeBytes;  
ULONG                   CountSeparatorEvents;                 
} FVE_TPM_PCR7_INFO, *PFVE_TPM_PCR7_INFO;
typedef struct _FVE_TPM_PCR4_INFO { 
WCHAR BootMgrFilePath[MAX_PATH];  
} FVE_TPM_PCR4_INFO, *PFVE_TPM_PCR4_INFO;
typedef struct _FVE_TPM_PROTECTOR_INFO { 
UINT32 TpmPcrIndex;                     
union {
PFVE_TPM_PCR7_INFO FveTpmPcr7Info; 
PFVE_TPM_PCR4_INFO FveTpmPcr4Info; 
} PredictiveSealInfo; 
} FVE_TPM_PROTECTOR_INFO, *PFVE_TPM_PROTECTOR_INFO;
typedef struct _FVE_TPM_STATE_ {
PVOID TpmContext;
ULONG FveTpmProtectorInfoCount;
PFVE_TPM_PROTECTOR_INFO FveTpmProtectorInfo;
} FVE_TPM_STATE, *PFVE_TPM_STATE;
typedef struct _FVE_TPM_INFO_ {
ULONG FveTpmInfoVersion;
PFVE_TPM_STATE TpmStateInfo;
} FVE_TPM_INFO, *PFVE_TPM_INFO;
typedef HRESULT (__stdcall *PFVE_TPM_API_CALLBACK)(
PVOID hContext,
UINT32 cbCmd,
PCBYTE pabCmd,
PUINT32 pcbResult,
PBYTE pabResult);
STDAPI
FveAddPredictiveTpmProtector(
PCWSTR FveVolumePath,
PFVE_TPM_INFO FveTpmInfo
STDAPI
FveSetupTpmCallback(
PFVE_TPM_API_CALLBACK TpmCallback,
UINT32 TpmVersion
typedef enum _FVE_DEVICE_TYPE {
FVE_DEVICE_UNKNOWN = -1,
FVE_DEVICE_UNSUPPORTED = 0,
FVE_DEVICE_VOLUME,
FVE_DEVICE_CSV_VOLUME,
FVE_DEVICE_MAX
} FVE_DEVICE_TYPE, *PFVE_DEVICE_TYPE;
typedef enum _FVE_INTERFACE_TYPE {
FVE_INTERFACE_UNKNOWN = -1,
FVE_INTERFACE_SEI = 0,
FVE_INTERFACE_SYS,
FVE_INTERFACE_HEI,
FVE_INTERFACE_MAX
} FVE_INTERFACE_TYPE, *PFVE_INTERFACE_TYPE;
typedef enum _FVE_HANDLE_TYPE {
FVE_HANDLE_UNKNOWN = -1,
FVE_HANDLE_FVE = 0,
FVE_HANDLE_NONFVE,
FVE_HANDLE_MAX
} FVE_HANDLE_TYPE, *PFVE_HANDLE_TYPE;
typedef enum _FVE_SCENARIO_TYPE {
FVE_SCENARIO_UNKNOWN  = -1,
FVE_SCENARIO_DEFAULT  = 0,
FVE_SCENARIO_KEY_ROLL = 1,
FVE_SCENARIO_BOOT_COMPONENT_UPDATE = 2,
FVE_SCENARIO_UNDEFINED_SKIP_CHECKS = 3
} FVE_SCENARIO_TYPE, *PFVE_SCENARIO_TYPE;
typedef struct _FVE_STATUS_V1 {
ULONG  StructureSize;
ULONG  StructureVersion;
ULONG  Flags;            
double ConvertedPercent; 
HRESULT LastConvertStatus; 
} FVE_STATUS_V1, *PFVE_STATUS_V1;
typedef const FVE_STATUS_V1 * PCFVE_STATUS_V1;
typedef struct _FVE_STATUS_V2 {
ULONG  StructureSize;
ULONG  StructureVersion;
USHORT FveVersion;
ULONG  Flags;            
double ConvertedPercent; 
HRESULT LastConvertStatus; 
} FVE_STATUS_V2, *PFVE_STATUS_V2;
typedef const FVE_STATUS_V2 * PCFVE_STATUS_V2;
typedef struct _FVE_STATUS_V3 {
ULONG  StructureSize;
ULONG  StructureVersion;
USHORT FveVersion;
ULONG  Flags;            
double ConvertedPercent; 
HRESULT LastConvertStatus; 
LONGLONG VolArriveTime;  
} FVE_STATUS_V3, *PFVE_STATUS_V3;
typedef const FVE_STATUS_V3 * PCFVE_STATUS_V3;
typedef struct _FVE_STATUS_V4 {
ULONG  StructureSize;
ULONG  StructureVersion;
USHORT FveVersion;
ULONG  Flags;            
double ConvertedPercent; 
HRESULT LastConvertStatus; 
LONGLONG VolArriveTime;  
double WipedPercent;     
ULONG WipeState;         
ULONG WipeCount;         
ULONGLONG ExtendedFlags; 
} FVE_STATUS_V4, *PFVE_STATUS_V4;
typedef const FVE_STATUS_V4 * PCFVE_STATUS_V4;
#pragma warning(push)
#pragma warning(disable:4201)   
#pragma warning(disable:4214)   
typedef struct _FVE_STATUS_V5 {
ULONG  StructureSize;
ULONG  StructureVersion;
USHORT FveVersion;
ULONG  Flags;            
double ConvertedPercent; 
HRESULT LastConvertStatus; 
LONGLONG VolArriveTime;  
double WipedPercent;     
ULONG WipeState;         
ULONG WipeCount;         
ULONGLONG ExtendedFlags; 
ULONGLONG WimBootHashedSizeRequired;    
ULONGLONG WimBootHashedSizeActual;  
union {
ULONGLONG ExtendedFlags2;
struct {
BOOLEAN WimBootVolume : 1;  
BOOLEAN WimBootHashCompleted : 1;   
} FVE_STATUS_V5, *PFVE_STATUS_V5;
typedef const FVE_STATUS_V5 * PCFVE_STATUS_V5;
#pragma warning(pop)
#pragma warning(push)
#pragma warning(disable:4201)   
#pragma warning(disable:4214)   
typedef struct _FVE_STATUS_V6 {
ULONG  StructureSize;
ULONG  StructureVersion;
USHORT FveVersion;
ULONG  Flags;            
double ConvertedPercent; 
HRESULT LastConvertStatus; 
LONGLONG VolArriveTime;  
double WipedPercent;     
ULONG WipeState;         
ULONG WipeCount;         
ULONGLONG ExtendedFlags; 
ULONGLONG WimBootHashedSizeRequired;    
ULONGLONG WimBootHashedSizeActual;  
union {
ULONGLONG ExtendedFlags2;
struct {
BOOLEAN WimBootVolume : 1;  
BOOLEAN WimBootHashCompleted : 1;   
BOOLEAN IceIsUsedForFve : 1;    
BOOLEAN IsEfiEsp : 1;           
BOOLEAN IsRecovery : 1;         
BOOLEAN WcosDePolicy : 1;       
BOOLEAN WcosOsData : 1;         
BOOLEAN WcosPreInstalled : 1;   
BOOLEAN WcosUserData : 1;       
BOOLEAN WcosMainOs : 1;         
BOOLEAN WcosEfiEsp : 1;         
BOOLEAN WcosBsp : 1;            
ULONG WcosOsMainProtectLevel;
ULONG WcosOsDataProtectLevel;
ULONG WcosPreInstalledProtectLevel;
ULONG WcosUserDataProtectLevel;
} FVE_STATUS_V6, *PFVE_STATUS_V6;
typedef const FVE_STATUS_V6 * PCFVE_STATUS_V6;
#pragma warning(pop)
#pragma warning(push)
#pragma warning(disable:4201)   
#pragma warning(disable:4214)   
typedef struct _FVE_STATUS_V7 {
ULONG  StructureSize;
ULONG  StructureVersion;
USHORT FveVersion;
ULONG  Flags;            
double ConvertedPercent; 
HRESULT LastConvertStatus; 
LONGLONG VolArriveTime;  
double WipedPercent;     
ULONG WipeState;         
ULONG WipeCount;         
ULONGLONG ExtendedFlags; 
ULONGLONG WimBootHashedSizeRequired;    
ULONGLONG WimBootHashedSizeActual;  
union {
ULONGLONG ExtendedFlags2;
struct {
BOOLEAN WimBootVolume : 1;  
BOOLEAN WimBootHashCompleted : 1;   
BOOLEAN IceIsUsedForFve : 1;    
BOOLEAN IsEfiEsp : 1;           
BOOLEAN IsRecovery : 1;         
BOOLEAN WcosDePolicy : 1;       
BOOLEAN WcosOsData : 1;         
BOOLEAN WcosPreInstalled : 1;   
BOOLEAN WcosUserData : 1;       
BOOLEAN WcosMainOs : 1;         
BOOLEAN WcosEfiEsp : 1;         
BOOLEAN WcosBsp : 1;            
BOOLEAN WcosWsp : 1;            
ULONG WcosOsMainProtectLevel;
ULONG WcosOsDataProtectLevel;
ULONG WcosPreInstalledProtectLevel;
ULONG WcosUserDataProtectLevel;
ULONG WcosBspProtectLevel;
ULONG WcosWspProtectLevel;
} FVE_STATUS_V7, *PFVE_STATUS_V7;
typedef const FVE_STATUS_V7 * PCFVE_STATUS_V7;
#pragma warning(pop)
#pragma warning(push)
#pragma warning(disable:4201)   
#pragma warning(disable:4214)   
typedef struct _FVE_STATUS_V8 {
ULONG  StructureSize;
ULONG  StructureVersion;
USHORT FveVersion;
ULONG  Flags;            
double ConvertedPercent; 
HRESULT LastConvertStatus; 
LONGLONG VolArriveTime;  
double WipedPercent;     
ULONG WipeState;         
ULONG WipeCount;         
ULONGLONG ExtendedFlags; 
ULONGLONG WimBootHashedSizeRequired;    
ULONGLONG WimBootHashedSizeActual;  
union {
ULONGLONG ExtendedFlags2;
struct {
BOOLEAN WimBootVolume : 1;  
BOOLEAN WimBootHashCompleted : 1;   
BOOLEAN IceIsUsedForFve : 1;    
BOOLEAN IsEfiEsp : 1;           
BOOLEAN IsRecovery : 1;         
BOOLEAN WcosDePolicy : 1;       
BOOLEAN WcosOsData : 1;         
BOOLEAN WcosPreInstalled : 1;   
BOOLEAN WcosUserData : 1;       
BOOLEAN WcosMainOs : 1;         
BOOLEAN WcosEfiEsp : 1;         
BOOLEAN WcosBsp : 1;            
BOOLEAN WcosWsp : 1;            
BOOLEAN WcosDpp : 1;            
ULONG WcosOsMainProtectLevel;
ULONG WcosOsDataProtectLevel;
ULONG WcosPreInstalledProtectLevel;
ULONG WcosUserDataProtectLevel;
ULONG WcosBspProtectLevel;
ULONG WcosWspProtectLevel;
ULONG WcosDppProtectLevel;
} FVE_STATUS_V8, *PFVE_STATUS_V8;
typedef const FVE_STATUS_V8 * PCFVE_STATUS_V8;
#pragma warning(pop)
#pragma warning(push)
#pragma warning(disable:4201)   
#pragma warning(disable:4214)   
typedef struct _FVE_STATUS_V9 {
ULONG  StructureSize;
ULONG  StructureVersion;
USHORT FveVersion;
ULONG  Flags;            
double ConvertedPercent; 
HRESULT LastConvertStatus; 
LONGLONG VolArriveTime;  
double WipedPercent;     
ULONG WipeState;         
ULONG WipeCount;         
ULONGLONG ExtendedFlags; 
ULONGLONG WimBootHashedSizeRequired;    
ULONGLONG WimBootHashedSizeActual;  
union {
ULONGLONG ExtendedFlags2;
struct {
BOOLEAN WimBootVolume : 1;  
BOOLEAN WimBootHashCompleted : 1;   
BOOLEAN IceIsUsedForFve : 1;    
BOOLEAN IsEfiEsp : 1;           
BOOLEAN IsRecovery : 1;         
BOOLEAN WcosDePolicy : 1;       
BOOLEAN WcosOsData : 1;         
BOOLEAN WcosPreInstalled : 1;   
BOOLEAN WcosUserData : 1;       
BOOLEAN WcosMainOs : 1;         
BOOLEAN WcosEfiEsp : 1;         
BOOLEAN WcosBsp : 1;            
BOOLEAN WcosWsp : 1;            
BOOLEAN WcosDpp : 1;            
BOOLEAN WcosServicingMetadata : 1;
BOOLEAN WcosServicingFiles : 1; 
BOOLEAN WcosServicingReserve : 1;
BOOLEAN IsOnRdvPolicyExclusionList : 1;
ULONG WcosOsMainProtectLevel;
ULONG WcosOsDataProtectLevel;
ULONG WcosPreInstalledProtectLevel;
ULONG WcosUserDataProtectLevel;
ULONG WcosBspProtectLevel;
ULONG WcosWspProtectLevel;
ULONG WcosDppProtectLevel;
ULONG WcosServicingMetadataProtectLevel;
ULONG WcosServicingFilesProtectLevel;
ULONG WcosServicingReserveProtectLevel;
} FVE_STATUS_V9, *PFVE_STATUS_V9;
typedef const FVE_STATUS_V9 * PCFVE_STATUS_V9;
typedef enum _FVE_WIPING_STATE {
FVE_WIPING_STATE_UNSPECIFIED = 0,
FVE_WIPING_STATE_INACTIVE = 1,   
FVE_WIPING_STATE_PENDING = 2,    
FVE_WIPING_STATE_STOPPED = 3,    
FVE_WIPING_STATE_INPROGRESS = 4, 
} FVE_WIPING_STATE, *PFVE_WIPING_STATE;
typedef struct _FVE_TPM_CAPS {
ULONG  StructureSize;
ULONG  StructureVersion;
HRESULT TpmStatus;    
ULONG  Flags;         
} FVE_TPM_CAPS, *PFVE_TPM_CAPS;
typedef const FVE_TPM_CAPS * PCFVE_TPM_CAPS;
typedef struct _FVE_TPM_CAPS_TPM_PRESENCE {
ULONG StructureSize;
ULONG StructureVersion;
HRESULT NotUsed;
ULONG NotUsed2;
BOOL TpmPresent;
} FVE_TPM_CAPS_TPM_PRESENCE, *PFVE_TPM_CAPS_TPM_PRESENCE;
typedef const FVE_TPM_CAPS_TPM_PRESENCE * PCFVE_TPM_CAPS_TPM_PRESENCE;
typedef struct _FVE_AUTH_RECOVERY_PASSWORD {
USHORT Block[(8)];
} FVE_AUTH_RECOVERY_PASSWORD, *PFVE_AUTH_RECOVERY_PASSWORD;
typedef const FVE_AUTH_RECOVERY_PASSWORD * PCFVE_AUTH_RECOVERY_PASSWORD;
typedef struct _FVE_AUTH_PIN {
BYTE HashedPin[32];
} FVE_AUTH_PIN, *PFVE_AUTH_PIN;
typedef const FVE_AUTH_PIN * PCFVE_AUTH_PIN;
typedef struct _FVE_AUTH_TPM {
ULONG PcrBitmap;
} FVE_AUTH_TPM, *PFVE_AUTH_TPM;
typedef const FVE_AUTH_TPM * PCFVE_AUTH_TPM;
typedef struct _FVE_AUTH_PREDICTED_TPM_INFO {
PFVE_TPM_STATE FveTpmState;
} FVE_AUTH_PREDICTED_TPM_INFO, *PFVE_AUTH_PREDICTED_TPM_INFO;
typedef const FVE_AUTH_PREDICTED_TPM_INFO * PCFVE_AUTH_PREDICTED_TPM_INFO;
typedef struct _FVE_AUTH_EXTERNAL_KEY {
BYTE Key[32];
} FVE_AUTH_EXTERNAL_KEY, *PFVE_AUTH_EXTERNAL_KEY;
typedef const FVE_AUTH_EXTERNAL_KEY * PCFVE_AUTH_EXTERNAL_KEY;
typedef struct _FVE_AUTH_PUBLIC_KEY {
BCRYPT_KEY_HANDLE Handle;
ULONG BlobSize;
PBYTE Blob;         
} FVE_AUTH_PUBLIC_KEY, *PFVE_AUTH_PUBLIC_KEY;
typedef const FVE_AUTH_PUBLIC_KEY * PCFVE_AUTH_PUBLIC_KEY;
typedef struct _FVE_AUTH_PRIVATE_KEY {
NCRYPT_KEY_HANDLE KspKeyHandle;
HCRYPTPROV CspProviderHandle;
HCRYPTKEY CspKeyHandle;
DWORD KeySpec;
} FVE_AUTH_PRIVATE_KEY, *PFVE_AUTH_PRIVATE_KEY;
typedef const FVE_AUTH_PRIVATE_KEY * PCFVE_AUTH_PRIVATE_KEY;
typedef struct _FVE_AUTH_INFO_PUBLIC_KEY {
ULONG ExportedPublicKeySize;
ULONG ExportedPublicKeyOffset;
ULONG BlobSize;
ULONG BlobOffset;
} FVE_AUTH_INFO_PUBLIC_KEY, *PFVE_AUTH_INFO_PUBLIC_KEY;
typedef const FVE_AUTH_INFO_PUBLIC_KEY * PCFVE_AUTH_INFO_PUBLIC_KEY;
typedef struct _FVE_AUTH_PASSPHRASE {
WCHAR ClearPassPhrase[256 + 1];
BYTE HashedPassPhrase[32];
BYTE Salt[16];
} FVE_AUTH_PASSPHRASE, *PFVE_AUTH_PASSPHRASE;
typedef const FVE_AUTH_PASSPHRASE * PCFVE_AUTH_PASSPHRASE;
typedef struct _FVE_AUTH_INFO_CLEAR_KEY {
UCHAR Count;
} FVE_AUTH_INFO_CLEAR_KEY, *PFVE_AUTH_INFO_CLEAR_KEY;
typedef struct _FVE_AUTH_DPAPI_NG {
USHORT DpapiNgFlags;        
USHORT DescriptorLength;
WCHAR DpapiNgDescriptor[ANYSIZE_ARRAY];
} FVE_AUTH_DPAPI_NG, *PFVE_AUTH_DPAPI_NG;
typedef const FVE_AUTH_DPAPI_NG *PCFVE_AUTH_DPAPI_NG;
typedef struct _FVE_AUTH_NETWORK_SERVER_INFO {
WCHAR LocalIPAddress[65];
ULONG ServerIPAddressesCount;
ULONG ServerIPAddressesSize; 
WCHAR ServerIPAddresses[ANYSIZE_ARRAY][65];
} FVE_AUTH_NETWORK_SERVER_INFO, *PFVE_AUTH_NETWORK_SERVER_INFO;
typedef const FVE_AUTH_NETWORK_SERVER_INFO * PCFVE_AUTH_NETWORK_SERVER_INFO;
typedef struct _FVE_AUTH_ELEMENT {
ULONG StructureSize;     
ULONG StructureVersion;  
ULONG ElementFlags;
ULONG ElementType;
union {
BYTE Nothing[1];
FVE_AUTH_RECOVERY_PASSWORD RecoveryPassword;
FVE_AUTH_PIN Pin;
FVE_AUTH_TPM Tpm;
FVE_AUTH_EXTERNAL_KEY ExternalKey;
FVE_AUTH_PUBLIC_KEY PublicKey;
FVE_AUTH_PRIVATE_KEY PrivateKey;
FVE_AUTH_INFO_PUBLIC_KEY PublicKeyInfo;
FVE_AUTH_PASSPHRASE PassPhrase;
FVE_AUTH_INFO_CLEAR_KEY ClearKeyInfo;
FVE_AUTH_DPAPI_NG DpapiNgInfo;
FVE_AUTH_NETWORK_SERVER_INFO NetworkServerInfo;
FVE_AUTH_PREDICTED_TPM_INFO PredictedTpmInfo;
} Data;
} FVE_AUTH_ELEMENT, *PFVE_AUTH_ELEMENT;
typedef const FVE_AUTH_ELEMENT *PCFVE_AUTH_ELEMENT;
typedef struct _FVE_AUTH_INFORMATION {
ULONG StructureSize;
ULONG StructureVersion;
ULONG AuthFlags;
ULONG ElementsCount;
PFVE_AUTH_ELEMENT * Elements;
PCWSTR Description;
FILETIME CreationTime;
GUID Identifier;
} FVE_AUTH_INFORMATION, *PFVE_AUTH_INFORMATION;
typedef const FVE_AUTH_INFORMATION *PCFVE_AUTH_INFORMATION;
typedef struct _ADA_GP_OPTIONS {
BOOL BackupEnabled;
BOOL BackupKeyPackage;
BOOL BackupRequired;
} ADA_GP_OPTIONS, *PADA_GP_OPTIONS;
typedef enum _FVE_PROTECTOR_TYPE {
FveKeyProtTypeUnknown = 0,
FveKeyProtTypeTpm,
FveKeyProtTypeKey,
FveKeyProtTypePassword,
FveKeyProtTypeTpmAndPin,
FveKeyProtTypeTpmAndKey,
FveKeyProtTypeTpmAndPinAndKey,
FveKeyProtTypeCertificate,
FveKeyProtTypePassPhrase,
FveKeyProtTypeTpmAndCertificate,
FveKeyProtTypeDpapiNg,
} FVE_PROTECTOR_TYPE, *PFVE_PROTECTOR_TYPE;
FORCEINLINE
FveIsTpmProtectorType(
FVE_PROTECTOR_TYPE ProtectorType
return ProtectorType == FveKeyProtTypeTpm ||
ProtectorType == FveKeyProtTypeTpmAndPin ||
ProtectorType == FveKeyProtTypeTpmAndKey ||
ProtectorType == FveKeyProtTypeTpmAndPinAndKey ||
ProtectorType == FveKeyProtTypeTpmAndCertificate;
NTSYSAPI
HRESULT
NTAPI
FveOpenVolumeW(
PCWSTR VolumeName,
BOOL bNeedWriteAccess,
HANDLE * phVolume
NTSYSAPI
HRESULT
NTAPI
FveOpenVolumeExW(
PCWSTR VolumeName,
ULONG NameFlags,
BOOL bNeedWriteAccess,
FVE_INTERFACE_TYPE IfcType,
ULONG HandleFlags,
HANDLE * phVolume
NTSYSAPI
HRESULT
NTAPI
FveOpenVolumeByHandle(
HANDLE Handle,
FVE_HANDLE_TYPE HandleType,
BOOL bNeedWriteAccess,
FVE_INTERFACE_TYPE IfcType,
ULONG HandleFlags,
HANDLE * phVolume
NTSYSAPI
HRESULT
NTAPI
FveCloseHandle(
HANDLE FveHandle
NTSYSAPI
HRESULT
NTAPI
FveCloseVolume(
HANDLE FveVolumeHandle
HRESULT
NTAPI
FveApplyGroupPolicy(
HANDLE FveVolumeHandle
NTSYSAPI
HRESULT
NTAPI
FveCommitChanges(
HANDLE FveVolumeHandle
NTSYSAPI
HRESULT
NTAPI
FveDiscardChanges(
HANDLE FveVolumeHandle
NTSYSAPI
HRESULT
NTAPI
FveGetStatus(
HANDLE FveVolumeHandle,
PFVE_STATUS_V9 Status
NTSYSAPI
HRESULT
NTAPI
FveGetStatusW(
PCWSTR VolumeName,
PFVE_STATUS_V9 Status
NTSYSAPI
HRESULT
NTAPI
FveGetUserFlags(
HANDLE FveVolumeHandle,
PULONG UserFlags
NTSYSAPI
HRESULT
NTAPI
FveSetUserFlags(
HANDLE FveVolumeHandle,
ULONG UserFlags
NTSYSAPI
HRESULT
NTAPI
FveClearUserFlags(
HANDLE FveVolumeHandle,
ULONG UserFlags
NTSYSAPI
HRESULT
NTAPI
FveGetAuthMethodGuids(
HANDLE FveVolumeHandle,
LPGUID AuthMethodGuids,
UINT MaxNumGuids,
PUINT NumGuids
NTSYSAPI
HRESULT
NTAPI
FveGetAuthMethodInformation(
HANDLE FveVolumeHandle,
PFVE_AUTH_INFORMATION Information,
SIZE_T BufferSize,
SIZE_T * RequiredSize
NTSYSAPI
HRESULT
NTAPI
FveProtectorTypeToFlags(
FVE_PROTECTOR_TYPE ProtectorType,
PULONG TypeFlags
NTSYSAPI
HRESULT
NTAPI
FveFlagsToProtectorType(
ULONG TypeFlags,
PFVE_PROTECTOR_TYPE ProtectorType
NTSYSAPI
HRESULT
NTAPI
FveDeleteAuthMethod(
HANDLE FveVolumeHandle,
LPCGUID AuthMethodGuid
NTSYSAPI
HRESULT
NTAPI
FveAddAuthMethodInformation(
HANDLE FveVolumeHandle,
PCFVE_AUTH_INFORMATION Information,
LPGUID AuthMethodGuid
NTSYSAPI
HRESULT
NTAPI
FveUpdatePinW (
HANDLE hFveVolume,
LPCWSTR NewPin,
LPCGUID ProtectorGuid
NTSYSAPI
HRESULT
NTAPI
FveValidateExistingPinW(
HANDLE hFveVolume,
PCWSTR ExistingPin,
PBOOL ExistingPinValidates,
LPGUID GUIDProtector
NTSYSAPI
HRESULT
NTAPI
FveValidateExistingPassphraseW(
HANDLE hFveVolume,
PCWSTR ExistingPassphrase,
PBOOL ExistingPassphraseValidates,
LPGUID ProtectorGuid
NTSYSAPI
HRESULT
NTAPI
FveEraseDrive(
HANDLE FveVolumeHandle,
BOOL ForceDismount
NTSYSAPI
HRESULT
NTAPI
FveUpgradeVolume(
HANDLE FveVolumeHandle
NTSYSAPI
HRESULT
NTAPI
FveEraseDriveExW(
PCWSTR   VolumeName,
BOOL     ForceDismount
NTSYSAPI
HRESULT
NTAPI
FveUnlockVolume(
HANDLE FveVolumeHandle,
PCFVE_AUTH_INFORMATION Information
HRESULT
NTAPI
FveUnlockVolumeWithAccessMode(
HANDLE hFveVolume,
PCFVE_AUTH_INFORMATION Information,
PBOOL ReadOnly
NTSYSAPI
HRESULT
NTAPI
FveAttemptAutoUnlock(
HANDLE FveVolumeHandle
NTSYSAPI
HRESULT
NTAPI
FveLockVolume(
HANDLE FveVolumeHandle,
BOOLEAN ForceDismount
NTSYSAPI
HRESULT
NTAPI
FveCheckBootFileW(
PCWSTR   Path
NTSYSAPI
HRESULT
NTAPI
FveGetIdentity(
HANDLE FveVolumeHandle,
LPGUID IdentityGuid
NTSYSAPI
HRESULT
NTAPI
FveGetRecoveryPasswordBackupInformation(
HANDLE FveVolumeHandle,
LPCGUID ProtectorGuid,
PUSHORT BackupInfoTypeMask
NTSYSAPI
HRESULT
NTAPI
FveSetRecoveryPasswordBackupInformation(
HANDLE FveVolumeHandle,
LPCGUID ProtectorGuid,
USHORT BackupInfoType,
USHORT SetFlags,
USHORT ClearFlags,
PBOOLEAN DatasetWasUpdated
NTSYSAPI
HRESULT
NTAPI
FveSelectBestRecoveryPasswordByBackupInformation (
HANDLE FveVolumeHandle,
LPGUID ProtectorGuid
NTSYSAPI
HRESULT
NTAPI
FveAuthElementToRecoveryPasswordW(
PCFVE_AUTH_ELEMENT AuthElement,
PWSTR Passphrase,
SIZE_T PassphraseLength
NTSYSAPI
HRESULT
NTAPI
FveAuthElementFromPinW(
PCWSTR Pin,
PFVE_AUTH_ELEMENT AuthElement
NTSYSAPI
HRESULT
NTAPI
FveAuthElementFromPassPhraseW(
PCWSTR PassPhrase,
PFVE_AUTH_ELEMENT AuthElement
NTSYSAPI
HRESULT
NTAPI
FveAuthElementFromRecoveryPasswordW(
PCWSTR Passphrase,
PFVE_AUTH_ELEMENT AuthElement
NTSYSAPI
HRESULT
NTAPI
FveIsRecoveryPasswordGroupValidW(
PCWSTR PassphraseGroup,
BOOLEAN * IsValid
NTSYSAPI
HRESULT
NTAPI
FveIsRecoveryPasswordValidW(
PCWSTR Passphrase,
BOOLEAN * IsValid
NTSYSAPI
HRESULT
NTAPI
FveIsPassphraseCompatibleW(
PCWSTR Passphrase,
BOOL *IsCompatible
NTSYSAPI
HRESULT
NTAPI
FveAuthElementReadExternalKeyW(
PCWSTR KeyFullFilePath,
PFVE_AUTH_INFORMATION Information,
SIZE_T BufferSize,
SIZE_T * RequiredSize
NTSYSAPI
HRESULT
NTAPI
FveAuthElementWriteExternalKeyW(
PCWSTR KeyFullFilePath,
PCFVE_AUTH_INFORMATION Information
NTSYSAPI
HRESULT
NTAPI
FveAuthElementWriteExternalKeyExW(
GUID *FveIdentity,
PCWSTR KeyFullFilePath,
PCFVE_AUTH_INFORMATION Information
NTSYSAPI
HRESULT
NTAPI
FveAuthElementGetKeyFileNameW(
PCFVE_AUTH_INFORMATION Information,
PWSTR KeyFileName,
SIZE_T BufferLength
NTSYSAPI
HRESULT
NTAPI
FveInitVolumeEx(
HANDLE hFveVolume,
PCWSTR pcwszDiscoveryVolumeType,
ULONG InitializationFlags
NTSYSAPI
HRESULT
NTAPI
FveInitVolume(
HANDLE FveVolumeHandle,
PCWSTR DiscoveryVolumeType
NTSYSAPI
HRESULT
NTAPI
FveInitializeDeviceEncryption(
NTSYSAPI
HRESULT
NTAPI
FveInitializeDeviceEncryption2(
HANDLE FveVolumeHandle,
ULONG DEInitializationFlags
typedef struct _FVE_DE_SUPPORT {
ULONG StructureSize;
ULONG StructureVersion;
ULONG QueryFlags;
HRESULT SupportStatus;
ULONG SupportFlags;
} FVE_DE_SUPPORT, *PFVE_DE_SUPPORT;
typedef const FVE_DE_SUPPORT * PCFVE_DE_SUPPORT;
NTSYSAPI
HRESULT
NTAPI
FveQueryDeviceEncryptionSupport(
PFVE_DE_SUPPORT DeviceEncryptionSupport
NTSYSAPI
HRESULT
NTAPI
FveRevertVolume(
HANDLE FveVolumeHandle
NTSYSAPI
HRESULT
NTAPI
FveKeyManagement(
HANDLE FveVolumeHandle,
ULONG FlagsIn,
PULONG FlagsOut
NTSYSAPI
HRESULT
NTAPI
FveConversionDecrypt(
HANDLE FveVolumeHandle
NTSYSAPI
HRESULT
NTAPI
FveConversionDecryptEx(
HANDLE FveVolumeHandle,
ULONG ConversionFlags
NTSYSAPI
HRESULT
NTAPI
FveConversionEncrypt(
HANDLE FveVolumeHandle
NTSYSAPI
HRESULT
NTAPI
FveConversionEncryptEx(
HANDLE FveVolumeHandle,
ULONG ConversionFlags
NTSYSAPI
HRESULT
NTAPI
FveConversionEncryptPendingReboot(
HANDLE FveVolumeHandle
NTSYSAPI
HRESULT
NTAPI
FveConversionEncryptPendingRebootEx(
HANDLE FveVolumeHandle,
ULONG ConversionFlags
NTSYSAPI
HRESULT
NTAPI
FveConversionStop(
HANDLE FveVolumeHandle
HRESULT
NTAPI
FveConversionStopEx(
HANDLE FveVolumeHandle,
BOOLEAN AutoStartOnReinsertion
NTSYSAPI
HRESULT
NTAPI
FveConversionPause(
HANDLE FveVolumeHandle
NTSYSAPI
HRESULT
NTAPI
FveConversionResume(
HANDLE FveVolumeHandle
NTSYSAPI
HRESULT
NTAPI
FveIsVolumeEncryptable(
HANDLE FveVolumeHandle
NTSYSAPI
HRESULT
NTAPI
FveGetFveMethod(
HANDLE FveVolumeHandle,
PINT FveMethod
NTSYSAPI
HRESULT
NTAPI
FveGetFveMethodEDrv(
HANDLE FveVolumeHandle,
PINT FveMethod,
LPWSTR
SelfEncryptionDriveEncryptionMethod);
NTSYSAPI
HRESULT
NTAPI
FveGetFveMethodEx(
HANDLE hFveVolume,
PINT FveMethod,
LPWSTR eDriveMethod,
PULONG FveMethodFlags
NTSYSAPI
HRESULT
NTAPI
FveSetFveMethod(
HANDLE FveVolumeHandle,
INT FveMethod
NTSYSAPI
HRESULT
NTAPI
FveCheckTpmCapability(
PFVE_TPM_CAPS Capability
NTSYSAPI
HRESULT
NTAPI
FveBindDataVolume(
HANDLE FveVolumeHandle,
LPCGUID AuthMethodGUID
NTSYSAPI
HRESULT
NTAPI
FveUnbindDataVolume(
HANDLE FveVolumeHandle
NTSYSAPI
HRESULT
NTAPI
FveIsBoundDataVolume(
HANDLE FveVolumeHandle,
PBOOL IsAutoUnlockEnabled,
LPGUID UnlockGUID
NTSYSAPI
HRESULT
NTAPI
FveIsBoundDataVolumeToOSVolume(
HANDLE FveVolumeHandle,
PBOOL IsAutoUnlockEnabled,
LPGUID UnlockGUID
NTSYSAPI
HRESULT
NTAPI
FveIsAnyDataVolumeBoundToOSVolume(
HANDLE FveVolumeHandle,
PULONG Count
NTSYSAPI
HRESULT
NTAPI
FveUnbindAllDataVolumeFromOSVolume(
HANDLE FveVolumeHandle
NTSYSAPI
HRESULT
NTAPI
FveSetDescriptionW(
HANDLE FveVolumeHandle,
PCWSTR VolumeDescription
NTSYSAPI
HRESULT
NTAPI
FveGetDescriptionW(
HANDLE FveVolumeHandle,
PWSTR VolumeDescription,
SIZE_T BufferLength,
SIZE_T * RequiredSize
NTSYSAPI
HRESULT
NTAPI
FveSetIdentificationFieldW(
HANDLE FveVolumeHandle,
PCWSTR IdentificationField
NTSYSAPI
HRESULT
NTAPI
FveGetIdentificationFieldW(
HANDLE FveVolumeHandle,
PWSTR IdentificationField,
SIZE_T BufferLength,
SIZE_T * RequiredSize
NTSYSAPI
HRESULT
NTAPI
FveSetAllowKeyExport(
BOOL Allow
NTSYSAPI
HRESULT
NTAPI
FveGetAllowKeyExport(
BOOL *Allow
NTSYSAPI
HRESULT
NTAPI
FveSetFipsAllowDisabled(
BOOL Allow
NTSYSAPI
HRESULT
NTAPI
FveGetFipsAllowDisabled(
BOOL *Allow
NTSYSAPI
HRESULT
NTAPI
FveIsHardwareReadyForConversion(
NTSYSAPI
HRESULT
NTAPI
FveGetKeyPackage(
HANDLE FveVolumeHandle,
LPCGUID Identifier,
PUCHAR Buffer,
SIZE_T BufferSize,
SIZE_T * DataSize
NTSYSAPI
HRESULT
NTAPI
FveEnableRawAccessW(
PCWSTR VolumeName,
BOOL Enabled
NTSYSAPI
HRESULT
NTAPI
FveEnableRawAccess(
HANDLE FveVolumeHandle,
BOOL Enabled
NTSYSAPI
HRESULT
NTAPI
FveEnableRawAccessEx(
HANDLE FveVolumeHandle,
BOOL Enabled,
BOOL ForceDismount
NTSYSAPI
HRESULT
NTAPI
FveBackupRecoveryInformationToAD(
HANDLE FveVolumeHandle,
LPCGUID AuthMethodGUID
NTSYSAPI
HRESULT
NTAPI
FveBackupRecoveryInformationToADEx(
HANDLE hFveVolume,
LPCGUID AuthMethodGUID,
ULONG FveBackupFlags
NTSYSAPI
HRESULT
NTAPI
FveCheckADRecoveryInfoBackupPolicy(
HANDLE hFveVolume,
ADA_GP_OPTIONS * ADPolicy
NTSYSAPI
HRESULT
NTAPI
FveCheckADRecoveryInfoBackupPolicyEx(
ADA_GP_OPTIONS * ADPolicyOs,
ADA_GP_OPTIONS * ADPolicyFdv,
ADA_GP_OPTIONS * ADPolicyRdv
NTSYSAPI
HRESULT
NTAPI
FveGetDataSet(
HANDLE FveVolumeHandle,
PUCHAR DataSetBuffer,
SIZE_T DataSetBufferSize,
SIZE_T * ActualDataSetBufferSize
NTSYSAPI
HRESULT
NTAPI
FveIsHybridVolume(
HANDLE FveVolumeHandle,
PBOOL IsHybrid
NTSYSAPI
HRESULT
NTAPI
FveIsHybridVolumeW(
PCWSTR VolumeName,
PBOOL IsHybrid
NTSYSAPI
HRESULT
NTAPI
FveNeedsDiscoveryVolumeUpdate(
HANDLE FveVolumeHandle,
PBOOL NeedsUpdate
NTSYSAPI
HRESULT
NTAPI
FveServiceDiscoveryVolume(
HANDLE FveVolumeHandle
NTSYSAPI
HRESULT
NTAPI
FveNotifyVolumeAfterFormat(
HANDLE FveVolumeHandle
NTSYSAPI
HRESULT
NTAPI
FveSaveRecoveryPasswordBackupFlag(
HANDLE FveVolumeHandle,
LPCGUID pRecoveryPasswordGuid,
PCFVE_AUTH_ELEMENT pRecoveryPassword
NTSYSAPI
HRESULT
NTAPI
FveDraCertPresentInRegistry(
PBOOL ptCertPresent
NTSYSAPI
HRESULT
NTAPI
FveSysOpenVolumeW(
PCWSTR VolumeName,
HANDLE * phFveSys
NTSYSAPI
HRESULT
NTAPI
FveSysCloseVolume(
HANDLE FveSys
NTSYSAPI
HRESULT
NTAPI
FveSysGetUserFlags(
HANDLE FveSysHandle,
PULONG UserFlags
NTSYSAPI
HRESULT
NTAPI
FveSysSetUserFlags(
HANDLE FveSysHandle,
ULONG UserFlags
NTSYSAPI
HRESULT
NTAPI
FveSysClearUserFlags(
HANDLE FveSysHandle,
ULONG UserFlags
typedef enum _FVE_QUERY_TYPE {
FVE_QUERY_UNKNOWN = 0,
FVE_QUERY_UNSUPPORTED,
FVE_QUERY_VOLUMES,
FVE_QUERY_CSV_VOLUMES,
FVE_QUERY_DE_NOT_INITIALIZED,
FVE_QUERY_WCOS_SECURITY_INFO,
FVE_QUERY_BOOT_INTEGRITY_INFO,
FVE_QUERY_MAX
} FVE_QUERY_TYPE, *PFVE_QUERY_TYPE;
typedef struct _FVE_WCOS_SEQURITY_INFO_REQUEST {
USHORT Version;
USHORT Size;
ULONG CompletionWaitTime;
UCHAR WaitFor100PercentCompletion;
UCHAR DisableConversionThrottle;
UCHAR Reserved1;
UCHAR Reserved2;
} FVE_WCOS_SEQURITY_INFO_REQUEST, *PFVE_WCOS_SEQURITY_INFO_REQUEST;
typedef struct _FVE_WCOS_SEQURITY_INFO_RESPONSE {
USHORT Version;
USHORT Size;
UCHAR Secure;
UCHAR SecureBootBinding;
UCHAR ProvisioningStarted;
UCHAR ProvisioningComplete;
ULONGLONG EncryptionRequiredMask;
ULONGLONG EncryptionEnabledMask;
ULONGLONG EncryptionCompleteMask;
ULONGLONG ProtectionArmedMask;
ULONGLONG RecoveryPasswordAbsentMask;
ULONGLONG ReadOnlyRequiredMask;
ULONGLONG ReadOnlyEnabledMask;
} FVE_WCOS_SEQURITY_INFO_RESPONSE, *PFVE_WCOS_SEQURITY_INFO_RESPONSE;
#pragma warning(push)
#pragma warning(disable:4201)   
#pragma warning(disable:4214)   
typedef struct _FVE_BOOT_INTEGRITY_INFO {
USHORT Version;
USHORT Size;
union {
ULONGLONG BootIntegrityFlags;
struct {
BOOLEAN TpmEnabled : 1;
BOOLEAN UefiPlatform : 1;
BOOLEAN UefiSecureBootEnabled : 1;
BOOLEAN Pcr7IsUsable : 1;
BOOLEAN Pcr7SbHashPresent : 1;
BOOLEAN Pcr7SbcpHashPresent : 1;
BOOLEAN PiTestsigningOrDebuggingAllowed : 1;
BOOLEAN BootDebuggingBootmgrSet : 1;
BOOLEAN BootDebuggingWinloadSet : 1;
BOOLEAN KernelDebuggingWinloadSet : 1;
BOOLEAN HvDebuggingWinloadSet : 1;
BOOLEAN TestsigningWinloadSet : 1;
BOOLEAN FlightsigningWinloadSet : 1;
BOOLEAN TestsigningBootmgrSet : 1;
BOOLEAN FlightsigningBootmgrSet : 1;
HRESULT hrTpm;
HRESULT hrSecureBoot;
HRESULT hrPcr7SbHash;
HRESULT hrPcr7Check;
HRESULT hrSbcp;
HRESULT hrBcd;
} FVE_BOOT_INTEGRITY_INFO, *PFVE_BOOT_INTEGRITY_INFO;
#pragma warning(pop)
NTSYSAPI
HRESULT
NTAPI
FveQuery(
FVE_QUERY_TYPE FveQueryType,
PBYTE InputBuffer,
ULONG InputSize,
PBYTE OutputBuffer,
ULONG *OutputSize
typedef enum _FVE_CONTROL_TYPE {
FVE_CONTROL_UNKNOWN = 0,
FVE_CONTROL_PROTECT_WITH_EK,
FVE_CONTROL_MAX
} FVE_CONTROL_TYPE, *PFVE_CONTROL_TYPE;
#pragma warning(push)
#pragma warning(disable:4201)   
#pragma warning(disable:4214)   
typedef struct _FVE_CTL_PROTECT_WITH_EK_REQUEST {
USHORT Version;
USHORT Size;
union {
ULONG RequestFlags;
struct {
BOOLEAN UseWatermark : 1;
BOOLEAN UsedSpaceOnly : 1;
BOOLEAN WaitForCompletion : 1;
BOOLEAN WcosScenario : 1;
BOOLEAN ProtectedDestination : 1;
BOOLEAN EnableAutoUnlock : 1;
INT FveMethod;
USHORT EkAukFlags;
WCHAR VolumeName[MAX_PATH];
WCHAR EkDestName[MAX_PATH];
} FVE_CTL_PROTECT_WITH_EK_REQUEST, *PFVE_CTL_PROTECT_WITH_EK_REQUEST;
typedef struct _FVE_CTL_PROTECT_WITH_EK_RESPONSE {
USHORT Version;
USHORT Size;
union {
ULONG ResponseFlags;
struct {
BOOLEAN AlreadyInitialized : 1;
BOOLEAN AlreadyHasEk : 1;
BOOLEAN AlreadyHasAutoUnlockEnabled : 1;
INT FveMethod;
ULONG FveMethodFlags;
WCHAR EkFileName[MAX_PATH];
} FVE_CTL_PROTECT_WITH_EK_RESPONSE, *PFVE_CTL_PROTECT_WITH_EK_RESPONSE;
#pragma warning(pop)
NTSYSAPI
HRESULT
NTAPI
FveControl(
FVE_CONTROL_TYPE FveControlType,
PBYTE InputBuffer,
ULONG InputSize,
PBYTE OutputBuffer,
ULONG *OutputSize
HRESULT
NTAPI
FveApplyNkpCertChanges(
HANDLE FveVolumeHandle
HRESULT
NTAPI
FveGenerateNkpSessionKeys(
HANDLE FveVolumeHandle
HRESULT
NTAPI
FveGenerateNbp(
HANDLE FveVolumeHandle,
DWORD CertThumbprintSize,
BYTE* CertThumbprint
HRESULT
NTAPI
FveRegenerateNbpSessionKey(
HANDLE FveVolumeHandle
HRESULT
NTAPI
FveCanStandardUsersChangePin(
PBOOL ptStandardUsersCanChangePin
HRESULT
NTAPI
FveCanStandardUsersChangePassphraseByProxy(
HANDLE FveVolumeHandle,
PBOOL ptStandardUsersCanChangePassphraseByProxy
HRESULT
NTAPI
FveCheckPassphrasePolicy(
HANDLE FveVolumeHandle,
PCWSTR Passphrase
HRESULT
NTAPI
FveDecrementClearKeyCounter(
HANDLE FveVolumeHandle
HRESULT
NTAPI
FveGetClearKeyCounter(
HANDLE FveVolumeHandle,
PULONG ClearKeyCounter
NTSYSAPI
HRESULT
NTAPI
FveAddAuthMethodSid(
HANDLE FveVolumeHandle,
PCWSTR FriendlyName,
PSID Sid,
USHORT Flags,
LPGUID AuthMethodGuid
NTSYSAPI
HRESULT
NTAPI
FveGetAuthMethodSid(
HANDLE FveVolumeHandle,
PSID Sid,
LPGUID AuthMethodGuidArray,
PULONG AuthMethodCount
NTSYSAPI
HRESULT
NTAPI
FveUnlockVolumeAuthMethodSid(
HANDLE FveVolumeHandle,
LPCGUID AuthMethodGuid
NTSYSAPI
HRESULT
NTAPI
FveGetAuthMethodSidInformation(
HANDLE FveVolumeHandle,
LPCGUID AuthMethodGuid,
PUSHORT Flags,
PSID Sid,
PULONG SidBufferSize
typedef struct _FVE_FIND_DATA_V1 {
ULONG FveFindVersion;
FVE_DEVICE_TYPE DevType;
} FVE_FIND_DATA_V1, *PFVE_FIND_DATA_V1;
NTSYSAPI
HRESULT
NTAPI
FveFindFirstVolume(
PHANDLE FveFindHandle,
PFVE_FIND_DATA_V1 FindData
NTSYSAPI
HRESULT
NTAPI
FveFindNextVolume(
HANDLE FveFindHandle,
PFVE_FIND_DATA_V1 FindData
NTSYSAPI
HRESULT
NTAPI
FveGetVolumeNameW(
HANDLE FveHandle,
PULONG VolumeNameBufferCchLen,
LPWSTR VolumeName
HRESULT
NTAPI
FveUpdateBandIdBcd(
HANDLE FveVolumeHandle
HRESULT
NTAPI
FveLogRecoveryReason(
HANDLE FveVolumeHandle,
DWORD RecoveryReason,
PCWSTR ApplicationPath,
DWORD ChangedBcd
HRESULT
NTAPI
FveIsSchemaExtInstalled(
PBOOL SchemExtInstalled
typedef
enum _FVE_SECUREBOOT_BINDING_STATE {
FVE_SECUREBOOT_BINDING_UNKNOWN = -1,
FVE_SECUREBOOT_BINDING_NOT_POSSIBLE = 0,
FVE_SECUREBOOT_BINDING_DISABLED_BY_POLICY,
FVE_SECUREBOOT_BINDING_POSSIBLE,
FVE_SECUREBOOT_BINDING_BOUND
} FVE_SECUREBOOT_BINDING_STATE, *PFVE_SECUREBOOT_BINDING_STATE;
HRESULT
NTAPI
FveGetSecureBootBindingState(
PFVE_SECUREBOOT_BINDING_STATE SecureBootBindingState
HRESULT
NTAPI
FveIsDeviceLockable(
HANDLE hFveVolume
HRESULT
NTAPI
FveLockDevice(
HANDLE hFveVolume
HRESULT
NTAPI
FveIsDeviceLockedOut(
HANDLE hFveVolume,
BOOL *IsDeviceLocked
HRESULT
NTAPI
FveValidateDeviceLockoutState(
HANDLE hFveVolume
HRESULT
NTAPI
FveGetDeviceLockoutData(
HANDLE hFveVolume,
PBYTE PerUserData,
ULONG *PerUserSize
HRESULT
NTAPI
FveUpdateDeviceLockoutState(
HANDLE hFveVolume,
PBYTE PerUserData,
ULONG PerUserSize
HRESULT
NTAPI
FveUpdateDeviceLockoutStateEx(
HANDLE hFveVolume,
PBYTE PerUserData,
ULONG PerUserSize,
ULONG Flags
HRESULT
NTAPI
FveDisableDeviceLockoutState(
HANDLE hFveVolume
HRESULT
NTAPI
FveRecalculateOffsetsAndMoveMetadata(
HANDLE hFveVolume
HRESULT
NTAPI
FveDeleteDeviceEncryptionOptOutForVolumeW(
PCWSTR VolumePath
NTSYSAPI
HRESULT
NTAPI
FveGetExternalKeyBlob(
PBYTE* Buffer,
DWORD* BufferSize
NTSYSAPI
HRESULT
NTAPI
FveEscrowEncryptedRecoveryKeyForRetailUnlock(
PBYTE Buffer,
DWORD BufferSize
HRESULT
NTAPI
FvepCanPinExceptionPolicyBeApplied(
PBOOL Result
NTSYSAPI
HRESULT
NTAPI
FveCanPinExceptionPolicyBeApplied(
PBOOL Result
NTSYSAPI
HRESULT
NTAPI
FveResetTpmDictionaryAttackParameters(
NTSYSAPI
HRESULT
NTAPI
FveCommitChangesEx(
HANDLE FveVolumeHandle,
FVE_SCENARIO_TYPE FveScenario
</stylesheets>
<Element
resid = "main"
layout = "borderlayout()"
accessible = "true">
<Element
id = "atom(mainpanel)"
layout = "borderlayout()"
accessible = "false"
layoutpos = "top"
padding = "rect(28rp,11rp,11rp,11rp)">
<Element
id = "atom(pinchangepanel)"
layout = "borderlayout()"
accessible = "false"
layoutpos = "top">
<Element
id = "atom(changepindialogtitle)"
content = "resstr(4201)"
contentalign = "wrapleft"
accessible = "true"
accrole = "text"
accdesc = "Change PIN Dialog Title"
accname = "resstr(4201)"
background = "ARGB(0, 0, 0, 0)"
layoutpos = "top"
margin = "rect(0rp,0rp,0rp,11rp)"
font = "gtf(TaskDialogStyle, 2, 0)"
foreground = "gtc(TaskDialogStyle, 2, 0, 3803)"/>
<Element
id = "atom(pinconstraintstext)"
content = "do not localize"
contentalign = "wrapleft"
accessible = "true"
accrole = "text"
accdesc = "PIN Constraints Text"
background = "ARGB(0, 0, 0, 0)"
layoutpos = "top"
margin = "rect(0rp,0rp,0rp,11rp)"/>
<Element
id = "atom(pinerrortextpanel)"
layout = "borderlayout()"
layoutpos = "none"
accessible = "false"
margin = "rect(0rp,0rp,0rp,11rp)"
width = "420rp">
<Element
id ="atom(pinwarningicon)"
content = "icon(84,sysmetric(49),sysmetric(50),library(imageres.dll))"
accessible = "true"
accrole = "graphic"
accdesc = "Warning Icon"
background = "ARGB(0, 0, 0, 0)"
layoutpos = "left"/>
<Element
id = "atom(pinstatustexterroricon)"
content = "icon(98,sysmetric(49),sysmetric(50),library(imageres.dll))"
accessible = "true"
accrole = "graphic"
accname="Error!"
accDesc="Error icon."
accdesc = "Error Icon"
background = "ARGB(0, 0, 0, 0)"
layoutpos = "left"/>
<Element
id ="atom(pinstatustext)"
content = ""
accessible = "true"
accrole = "text"
accdesc = "Status Text"
background = "ARGB(0, 0, 0, 0)"
layoutpos = "left"
margin = "rect(7rp,0rp,0rp,0rp)"
contentalign = "wrapleft"/>
</Element>
<Element
layout = "rowlayout(1)"
layoutpos = "top"
accessible = "false"
margin = "rect(0rp,0rp,0rp,11rp)">
<Element
content = "resstr(4202)"
accessible = "true"
accrole = "statictext"
accdesc = "Enter Existing PIN Label"
accname = "resstr(4202)"
background = "ARGB(0, 0, 0, 0)"
layoutpos = "left"
minsize = "size(150rp, 0rp)"
height = "23rp"
shortcut = "auto"
margin = "rect(0rp,0rp,0rp,0rp)"/>
<PassphraseEdit
id = "atom(existingpinedit)"
width = "200rp"
height = "23rp"
passwordcharacter = "9679"
content = "_"
multiline = "false"
maxlength = "20"
themedborder = "true"
accessible = "true"
accrole = "text"
accdesc = "Enter Existing PIN Edit Field"
accname = "resstr(4202)"
active = "mouse|keyboard"
layoutpos = "left"
absorbsshortcut = "true"
margin = "rect(0rp,0rp,0rp,0rp)"/>
</Element>
<Element
layout = "rowlayout(1)"
layoutpos = "top"
accessible = "false"
margin = "rect(0rp,0rp,0rp,11rp)">
<Element
content = "resstr(4203)"
accessible = "true"
accrole = "statictext"
accdesc = "Enter New PIN Label"
accname = "resstr(4203)"
background = "ARGB(0, 0, 0, 0)"
layoutpos = "left"
minsize = "size(150rp, 0rp)"
height = "23rp"
shortcut = "auto"
margin = "rect(0rp,0rp,0rp,0rp)"/>
<PassphraseEdit
id = "atom(newpinedit)"
width = "200rp"
height = "23rp"
passwordcharacter = "9679"
content = "_"
multiline = "false"
maxlength = "20"
themedborder = "true"
accessible = "true"
accrole = "text"
accdesc = "Enter New PIN Edit Field"
accname = "resstr(4203)"
active = "mouse|keyboard"
layoutpos = "left"
shortcut = "auto"
absorbsshortcut = "true"
margin = "rect(0rp,0rp,0rp,0rp)"/>
</Element>
<Element
layout = "rowlayout(1)"
layoutpos = "top"
accessible = "false"
margin = "rect(0rp,0rp,0rp,11rp)">
<Element
content = "resstr(4204)"
accessible = "true"
accrole = "statictext"
accdesc = "Enter New PIN Confirm Label"
accname = "resstr(4204)"
background = "ARGB(0, 0, 0, 0)"
layoutpos = "left"
minsize = "size(150rp, 0rp)"
height = "23rp"
shortcut = "auto"
margin = "rect(0rp,0rp,0rp,0rp)"/>
<PassphraseEdit
id = "atom(newpinconfirmedit)"
width = "200rp"
height = "23rp"
passwordcharacter = "9679"
content = "_"
multiline = "false"
maxlength = "20"
themedborder = "true"
accessible = "true"
accrole = "text"
accdesc = "Enter New PIN Confirm Edit Field"
accname = "resstr(4204)"
active = "mouse|keyboard"
layoutpos = "left"
shortcut = "auto"
absorbsshortcut = "true"
margin = "rect(0rp,0rp,0rp,0rp)"/>
</Element>
</Element>
<Element
id = "atom(passphrasechangepanel)"
layout = "borderlayout()"
accessible = "false"
layoutpos = "none">
<Element
id = "atom(changepassphrasedialogtitle)"
content = "resstr(4214)"
contentalign = "wrapleft"
accessible = "true"
accrole = "text"
accname = "resstr(4214)"
accdesc = "Change Password Dialog Title"
background = "ARGB(0, 0, 0, 0)"
layoutpos = "top"
margin = "rect(0rp,0rp,0rp,11rp)"
font = "gtf(TaskDialogStyle, 2, 0)"
foreground = "gtc(TaskDialogStyle, 2, 0, 3803)"/>
<Element
id = "atom(changepassphrasenonosdialogtitle)"
content = "resstr(4223)"
contentalign = "wrapleft"
accessible = "true"
accrole = "text"
accdesc = "Change Password For Non-OS Dialog Title"
accname = "resstr(4223)"
background = "ARGB(0, 0, 0, 0)"
layoutpos = "none"
margin = "rect(0rp,0rp,0rp,11rp)"
font = "gtf(TaskDialogStyle, 2, 0)"
foreground = "gtc(TaskDialogStyle, 2, 0, 3803)"/>
<Element
id = "atom(passphraseconstraintstext)"
content = "do not localize"
width = "400rp"
contentalign = "wrapleft"
accessible = "true"
accrole = "text"
accdesc = "Password Constraints Text"
background = "ARGB(0, 0, 0, 0)"
layoutpos = "top"
margin = "rect(0rp,0rp,0rp,11rp)"/>
<Element
id = "atom(errortextpanel)"
layout = "borderlayout()"
layoutpos = "none"
accessible = "false"
margin = "rect(0rp,0rp,0rp,11rp)"
width = "420rp">
<Element
id ="atom(asciiwarningicon)"
content = "icon(84,sysmetric(49),sysmetric(50),library(imageres.dll))"
accessible = "true"
accrole = "graphic"
accdesc = "ASCII Warning Icon"
background = "ARGB(0, 0, 0, 0)"
layoutpos = "left"/>
<Element
id = "atom(statustexterroricon)"
content = "icon(98,sysmetric(49),sysmetric(50),library(imageres.dll))"
accessible = "true"
accrole = "graphic"
accdesc = "Error Icon"
background = "ARGB(0, 0, 0, 0)"
layoutpos = "left"/>
<Element
id ="atom(statustext)"
content = "resstr(IDS_DIALOG_ASCII_WARNING)"
accessible = "true"
accrole = "text"
accdesc = "Status Text"
background = "ARGB(0, 0, 0, 0)"
layoutpos = "left"
margin = "rect(7rp,0rp,0rp,0rp)"
contentalign = "wrapleft"/>
</Element>
<Element
layout = "rowlayout(2)"
layoutpos = "top"
accessible = "false"
margin = "rect(0rp,0rp,0rp,11rp)">
<Element
content = "resstr(4215)"
accessible = "true"
accrole = "statictext"
accdesc = "Enter Existing Password Label"
accname = "resstr(4215)"
background = "ARGB(0, 0, 0, 0)"
layoutpos = "left"
minsize = "size(150rp, 0rp)"
height = "23rp"
shortcut = "auto"
margin = "rect(0rp,0rp,0rp,0rp)"/>
<PassphraseEdit
id = "atom(existingpassphraseedit)"
width = "200rp"
height = "23rp"
passwordcharacter = "9679"
content = "_"
multiline = "false"
maxlength = "256"
themedborder = "true"
accessible = "true"
accrole = "text"
accdesc = "Enter Existing Password Edit Field"
accname = "resstr(4215)"
active = "mouse|keyboard"
layoutpos = "left"
absorbsshortcut = "true"
margin = "rect(0rp,0rp,0rp,0rp)"/>
</Element>
<Element
layout = "rowlayout(2)"
layoutpos = "top"
accessible = "false"
margin = "rect(0rp,0rp,0rp,11rp)">
<Element
content = "resstr(4216)"
accessible = "true"
accrole = "statictext"
accdesc = "Enter New Password Label"
accname = "resstr(4216)"
background = "ARGB(0, 0, 0, 0)"
layoutpos = "left"
minsize = "size(150rp, 0rp)"
height = "23rp"
shortcut = "auto"
margin = "rect(0rp,0rp,0rp,0rp)"/>
<PassphraseEdit
id = "atom(newpassphraseedit)"
width = "200rp"
height = "23rp"
passwordcharacter = "9679"
content = "_"
multiline = "false"
maxlength = "256"
themedborder = "true"
accessible = "true"
accrole = "text"
accdesc = "Enter New Password Edit Field"
accname = "resstr(4216)"
active = "mouse|keyboard"
layoutpos = "left"
shortcut = "auto"
absorbsshortcut = "true"
margin = "rect(0rp,0rp,0rp,0rp)"/>
</Element>
<Element
layout = "rowlayout(2)"
layoutpos = "top"
accessible = "false"
margin = "rect(0rp,0rp,0rp,11rp)">
<Element
content = "resstr(4217)"
accessible = "true"
accrole = "statictext"
accdesc = "Enter New Password Confirm Label"
accname = "resstr(4217)"
background = "ARGB(0, 0, 0, 0)"
layoutpos = "left"
minsize = "size(150rp, 0rp)"
height = "23rp"
shortcut = "auto"
margin = "rect(0rp,0rp,0rp,0rp)"/>
<PassphraseEdit
id = "atom(newpassphraseconfirmedit)"
width = "200rp"
height = "23rp"
passwordcharacter = "9679"
content = "_"
multiline = "false"
maxlength = "256"
themedborder = "true"
accessible = "true"
accrole = "text"
accdesc = "Enter New Password Confirm Edit Field"
accname = "resstr(4217)"
active = "mouse|keyboard"
layoutpos = "left"
shortcut = "auto"
absorbsshortcut = "true"
margin = "rect(0rp,0rp,0rp,0rp)"/>
</Element>
<CCCheckbox
id = "atom(showpassphrasebox)"
layoutpos = "none"
contentalign = "wrapleft"
content = "resstr(4225)"
accname = "resstr(4225)"
accessible = "true"
margin = "rect(0rp,0rp,0rp,11rp)"/>
</Element>
<Element
layout = "borderlayout()"
layoutpos = "top"
accessible = "false"
margin = "rect(0rp,0rp,0rp,11rp)">
<Element
id = "atom(elevationicon)"
content = "icon(78,sysmetric(49),sysmetric(50),library(imageres.dll))"
accessible = "true"
accrole = "graphic"
accdesc = "Elevation Icon"
background = "ARGB(0, 0, 0, 0)"
layoutpos = "left"/>
<CCSysLink
id = "atom(managebitlockerlink)"
width = "400rp"
height = "20rp"
content = "resstr(4205)"
accessible = "true"
accrole = "link"
accname = "resstr(4205)"
accdesc = "Manage BitLocker Link"
shortcut = "auto"
layoutpos = "left"
contentalign = "wrapleft"
margin = "rect(7rp,0rp,0rp,0rp)"/>
<CCSysLink
id = "atom(managebitlockerpassphraselink)"
width = "400rp"
height = "20rp"
content = "resstr(4222)"
accessible = "true"
accrole = "link"
accname = "resstr(4222)"
accdesc = "Manage BitLocker Passphrase Link"
shortcut = "auto"
layoutpos = "none"
contentalign = "wrapleft"
margin = "rect(7rp,0rp,0rp,0rp)"/>
</Element>
<CCSysLink
id = "atom(passphrasehelplink)"
width = "400rp"
height = "20rp"
content = "resstr(4218)"
accessible = "true"
accrole = "link"
accname = "resstr(4218)"
accdesc = "Help Link"
shortcut = "auto"
layoutpos = "none"
contentalign = "wrapleft"
margin = "rect(0rp,0rp,0rp,11rp)"
padding = "rect(23rp,0rp,0rp,0rp)"/>
<Element
id = "atom(confirmationtextpanel)"
layout = "borderlayout()"
accessible = "false"
layoutpos = "none"
margin = "rect(0rp,0rp,0rp,0rp)">
<Element
content = "icon(81,sysmetric(49),sysmetric(50),library(imageres.dll))"
accessible = "true"
accrole = "graphic"
accdesc = "Info Icon"
background = "ARGB(0, 0, 0, 0)"
layoutpos = "left"
visible = "true"/>
<Element
width = "400rp"
height = "60rp"
content = "resstr(4210)"
accessible = "true"
accrole = "text"
accname = "resstr(4210)"
accdesc = "Confirmation Text"
background = "ARGB(0, 0, 0, 0)"
layoutpos = "left"
margin = "rect(7rp,0rp,0rp,11rp)"
contentalign = "wrapleft"/>
</Element>
<Element
id = "atom(passphraseconfirmationtextpanel)"
layout = "borderlayout()"
accessible = "false"
layoutpos = "none"
margin = "rect(0rp,0rp,0rp,0rp)">
<Element
content = "icon(81,sysmetric(49),sysmetric(50),library(imageres.dll))"
accessible = "true"
accrole = "graphic"
accdesc = "Info Icon"
background = "ARGB(0, 0, 0, 0)"
layoutpos = "left"
visible = "true"/>
<Element
width = "400rp"
height = "60rp"
content = "resstr(4220)"
accessible = "true"
accrole = "text"
accname = "resstr(4220)"
accdesc = "Password Confirmation Text"
background = "ARGB(0, 0, 0, 0)"
layoutpos = "left"
margin = "rect(7rp,0rp,0rp,11rp)"
contentalign = "wrapleft"/>
</Element>
</Element>
<Element
layout = "borderlayout()"
accessible = "false"
layoutpos = "bottom"
height = "45rp"
background = "menubar">
<Element
id = "atom(normalbuttonpanel)"
layout = "borderlayout()"
accessible = "false"
layoutpos = "right"
height = "45rp"
background = "ARGB(0, 0, 0, 0)">
<CCPushButton
id = "atom(changepinbutton)"
content = "resstr(4208)"
minsize = "size(75rp, 23rp)"
accessible = "true"
accrole = "pushbutton"
accname = "resstr(4208)"
accdesc = "Change PIN Button"
layoutpos = "left"
shortcut = "auto"
padding = "rect(0rp,11rp,7rp,11rp)"/>
<CCPushButton
id = "atom(changepassphrasebutton)"
content = "resstr(4219)"
minsize = "size(75rp, 23rp)"
accessible = "true"
accrole = "pushbutton"
accname = "resstr(4219)"
accdesc = "Change Password Button"
layoutpos = "none"
shortcut = "auto"
padding = "rect(0rp,11rp,7rp,11rp)"/>
<CCPushButton
id = "atom(cancelbutton)"
content = "resstr(4207)"
minsize = "size(75rp, 23rp)"
accessible = "true"
accrole = "pushbutton"
accname = "resstr(4207)"
accdesc = "Cancel Button"
layoutpos = "left"
shortcut = "auto"
padding = "rect(0rp,11rp,11rp,11rp)"/>
<CCPushButton
id = "atom(closebutton)"
content = "resstr(4213)"
minsize = "size(75rp, 23rp)"
accessible = "true"
accrole = "pushbutton"
accname = "resstr(4213)"
accdesc = "Close Button"
layoutpos = "none"
shortcut = "auto"
enabled = "false"
padding = "rect(0rp,11rp,11rp,11rp)"/>
</Element>
</Element>
</Element>
</duixml>
w337790
9;{{{x13w
w3yssyy
3379p
y{y{70
31wp{xx
xxs77w7
sss76
7w778
r6?@0
wg^@3
llWfN
+3340
~Cjp~~
mrymD2B6BFGig6  
~jjo~
T_[M6544=L=J6
="1*155GQfI
hfgdheVah
aea696=64
WI =_===LP:
F47F- *47888M6(
~vljjr~
T-BGFGNQ
~vvqlCCo~
yojjoo
yoolor
~~o,X*)
BL1#y
B *_G
5##1+
68LT[WS*
G5[cV#
A.*,A
K`vvn
7@GCS^
WXW7GF=NBvNKK
XWn_W_7@Ij\R\`5+4/# 
XWXW_W_orr<ggJiB#:::F:
XXo[_[n
n<FJjmJ1#
 :# #
[W[_w
w<gjkld7:>8B=#
w_BjjHDE/1 
vXTKNB4
XXnnaaWNXX`nxxuR
nXPX`v
%h+_XWX+.%|XXN
d+vn`X,
 =~{%
 R``n
vnu`#*g
 @ggivi
1=@jFJBh
18@Z2
C@BB.>O
@BLRVV`.<XMMI32;9"
CS\Vgozzt.>7, 
CUhx~
J`ossh^QJ(&/Y"Ud W
LMMUUUbgiii0Y&g`#:
ury{{/W#ig 1
W&{u #
1"uq 
+%%%)
EEE@;7
//////3
DDD>5;
IDATx
Iq07Y
0FctN:
  Nb$X6
h6QEN
3h@JI
8# X_
~-i6XX
S'oz.
G QEf
NGlmm
`Ofd.
<7lnl
h69rh
}WZo'(
19y6e
ufjiY/
 dY/KiC
4e2MI
|:M-A
i\=A9
vUzSj
Y[[+w
h4Y\\d8
r*.,51c
<m*e/
(cjwA
1APz}
-e-42
a7A]XYae
IjP_)
>#.n#
;?WA~
PsHT$
'lrU]
I=*De
J+$9Jg
ht-)j
jK{}6]
!X*o-
u}u=S
h<askH
p]brT
rCG`\n
E1Yu`
x<a4I
2Is  
ml,nPh]
FGkE^(
)iZP(M
0)2d!lQK"d`
g&:2J
h$$qB
A0S)~
qKMKT`j
dP/&i0
Fv0HD
F1FDH
GDqL(
YZZbee
d2e:M9
$H-QE
B+VVVX\\
v[PYD
4MkFb
Oox6_8
=lNwOo
fFfFF
W,\.s
BRBeFf
RJVWW
2)TWi6
yF8{L
Y(t?E
)Q0'IF
$xD8x
v\%0i
2a\dt
RVV/^B
qq]]Eg
6I.SR
[7ortt
5:+k$
"0[+,M
j.5M\
Mi4Z<
~^6EQ
u]j5O{W6
\K(Ml
lL.m2
]Mwn6
2S5VY
0RJa<
8=9a8
qx4`2
z>g'G<
sqQ9T
GGGKX
kiXw%
$KcUs
=VV:4[m:
[X.8.
FcD4E85
h~F2;d48
$d$IY
)_ N-
#0L2a^
}eVXn#
7H&3lK
mOYk=C
j."t]
J@`@:QyS
iw8:z
36{1/_
riKc$*
,GkiE
X__/\
lmmqxxXPR[
Z8mVWW
<IZH)
$JmVWW
 P1r.m$
Y]]ekk
.\~)s
9::b8
zrT5h
W^aww
i4d8w
UsS)9;;
2(wEP
J-?e4
GjrNo
*j{hQ
zAYjbD
d(NNN
g1Op\
BJL\]
"L@"e
.[[[lom#
a0AZ>
:{{{<z
F#677
1'''L&
[W8??/
X[[ckk
lj5h6sj5
;wnstt
nqrrB
|!KJr5
Y[[c:
AJ.\vw
E%`U^s
sttT(
?"#**Y
IfggI
\.RoTp
0m8??O"
xDJk!
]N4r]
O3{h:
jt;mDID
dRGUe
r~uuU
4-j>1::
CCCLOMr
=MWB"V
vbuuU*
SVWWI
R+<`f<
P(0>>N
qln=j
fff8z
N'zMU%,
8S0~E
EBFDF
(r@2r]
Pe|Dar$
q@SU\
&kkkloo
8'_|%
`WWWY__'
.K+u&&
SSSLOM!H"
j4X^Z
{p`O`
a@Kvz
Y&''Q
P-oc&s
<M@q?
D"!MOO3=
k+TJ[
]4Ed(#
_>>55u:
`t4({5
k,/-S.
H&4DA
EU5\o
A:TU5,
t*M~` 
U?ZmC
`kk+b
'_dfz
BVTZV
>?666t
099I&#Q*
}8ZLQ
m:mo7
wvv8|
=bdd$j
Fi4,v
HB7'a
.Ef5<
X,F7cX
#FGGi4
DBcqq
wQU52
j6#rR
fggi4j
JUDQ 
lnnR.
3?Xeg
054]A
*l{5>>
eYA<C.
KBvYxs
ccct:
D4M9^
##I66
u]FGG
lFMCC
W_}u,
= 011
OOO+a
J#,WrlU<
9pydT
TBmeRZ
<<22b
(tX+a
zKHB 
X\\D$
~qgjj*z
#(-~g
C}:!0
45)H$
mmmhj
;y!|2
r9TUUa
baP/^
X,fMef
}^PZm
{wm_a
T-Jai
PMM-\.
z177W8|
rhnn.
TsMMM-
|hkc"
`GT<7
fttTz
Xl[%(
w&''O
:;;kP
uLLL(`5
5bSZE
&,X=D
`J)\.
\.LOO
GIDAT
7ctO5`pb5_og5`pe:j{(
]|s$Uk
zzz;rrr
GGG;edc
NMMGwtt
[[[=XXX
HHHt\\\2WWW
888m[[[$
]]]%WWW-O
\\\,]]]WVVV
WVVk][[
WWW0WWW
YYYEWWW
ZZZEccc
zrr`*
zrr`Q|
VS_VERSION_INFO
StringFileInfo
040904B0
CompanyName
Microsoft Corporation
FileDescription
BitLocker Drive Encryption: PIN Change Tool
FileVersion
10.0.22621.1 (WinBuild.160101.0800)
InternalName
bdechangepin.exe
LegalCopyright
 Microsoft Corporation. All rights reserved.
OriginalFilename
bdechangepin.exe
ProductName
Microsoft
 Windows
 Operating System
ProductVersion
10.0.22621.1
VarFileInfo
Translation
UIFILE
en-US
