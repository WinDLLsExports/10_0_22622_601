!This program cannot be run in DOS mode.
8Yf#|8
pRich|8
.text
`.rdata
@.data
.pdata
@.didat
.rsrc
@.reloc
qx]~g
qx]~g
D$(E3
L$XE3
D$(E3
R$fA;Z*
fA9Z*v$A
L$ SUVWH
L$hH+
f9,Cu
(_^][
\$ UVWAVAWH
t,D8=
L9{Hu
A_A^_^]
\$ UVWH
D$0H;
D$HE3
L$0E3
D$8E3
UVWAVAWH
L$0E3
L$0fD
A_A^_^]
D$@E3
x UAVAWH
T$0H+
A_A^]
t/HcL$$A
HcD$ H
UVWATAUAVAWH
~HL9V@t
H9/sRH
D$`E3
tBfE9
 A_A^A]A\_^]
x AVH
x AVH
uPH9i
T$8H!|$8
x AVH
l$ VWAVH
pa\P@?
L$`H3
pa\P@?
q0\Z-
UVWAVAWH
A_A^_^]
D$@H!|$8H!|$@D
\$ UVWATAUAVAWH
D9l$(|
D$,D8-!
t(D8-}
WAVAWH
A_A^_
qB^Xh
qB^Xh
WAVAWH
 A_A^_
WAVAWH
 A_A^_
WATAUAVAWH
o I!]
0A_A^A]A\_
WAVAWH
 A_A^_
WAVAWH
 A_A^_
WAVAWH
 A_A^_
WAVAWH
 A_A^_
WAVAWH
 A_A^_
x ATAVAWH
H!_xH
 A_A^A\
WAVAWH
 A_A^_
WATAUAVAWH
o I!]
0A_A^A]A\_
WAVAWH
 A_A^_
WAVAWH
 A_A^_
3SVu!
x ATAUAVAW
u5A92u
|$@A_A^A]A\
u%D9R
E|eu+
L/1u!
@USVWATAUAVAWH
L$hf99u
t(@8=X
A_A^A]A\_^[]
@USVWATAUAVAWH
D9l$(
t(D8-N
A_A^A]A\_^[]
(D$ H
L$0H3
WAVAWH
0A_A^_
qa\P@?
WAVAWH
 A_A^_
L$ SVWAVH
(A^_^[
D$(E3
UVWATAUAVAWH
A_A^A]A\_^]
qx]~g
qx]~g
L$0H+
D$(E3
\$ UVWAVAWH
L$HH3
PA_A^_^]
WAVAWH
 A_A^_
h UAVAWH
L$@I+
L$PH;
T$PL;
A_A^]
{ ATAVAWH
 A_A^A\
p WAVAWH
 A_A^_
WAVAWH
fD9?w
C9fD9?u0
 A_A^_
WATAUAVAWH
T$0E3
A_A^A]A\_
L$ UVWATAUAVAWH
pA_A^A]A\_^]
D97t<A
x UATAUAVAWH
C @8}Wu
A_A^A]A\]
UVWATAUAVAWH
D$HD+D$xH
D+D$xH
A_A^A]A\_^]
WAVAWH
}0H+}(H
0A_A^_
p AWH
VWAVH
~0u_H
D$@E3
 A^_^
WAVAWH
0A_A^_
WAVAWH
 A_A^_
@SUVWAVAWH
D$8E3
{8D8{@uXL9?u$E3
L$8H3
HA_A^_^][
VWAVH
0A^_^
t$ WH
H;K@H
D$@E3
|$ UATAUAVAWH
A_A^A]A\]
UVWATAUAVAWH
9]PtXH
PA_A^A]A\_^]
H!\$PH
@USVWH
@8u(u
H_^[]
@USWH
UAVAWH
@A_A^]
` UAVAWH
D8ewD
A_A^]
UWATAVAWH
A_A^A\_]
UVWATAUAVAWH
xND8m@t
PA_A^A]A\_^]
USVWATAUAVAWH
uZH9^ uTI
A_A^A]A\_^[]
UVWAVAWH
pA_A^_^]
x AVH
UVWATAUAVAWH
L9wpu
x;HcE
A_A^A]A\_^]
@USVWATAUAVAWH
\$`H9]
\$`H9]
H;D$Pu
H;D$Xt
A_A^A]A\_^[]
\$ UVWAVAWH
PA_A^_^]
@USVWATAVAWH
d$PL9e
d$PL9e
H;D$@u
H;D$Ht
A_A^A\_^[]
@USVWATAVAWH
H;D$pu
H;D$xt
A_A^A\_^[]
@USVWAVAWH
A_A^_^[]
qiTX.
@USVWATAUAVAWH
phY6j
L9|$`uKA
L$pE3
A_A^A]A\_^[]
@USVWATAUAVAWH
A_A^A]A\_^[]
qC^<<
@USVWATAVAWH
H;D$Xu
H;D$`t
A_A^A\_^[]
qjXZ"
@USVWATAVAWH
H;D$Xu
H;D$`t
A_A^A\_^[]
@USVWAVAWH
A_A^_^[]
|$ UH
@USVWATAUAVAWH
phY6j
D8l$x
p`^|N
L9l$pu2A
l$`M9
L9l$`u9I
A_A^A]A\_^[]
|$ UH
@USVWAVH
A^_^[]
@USVWATAUAVAWH
H;D$0u
H;D$8t
A_A^A]A\_^[]
@USVWAVAWH
xBL9}Ht<H
D9}8t
HA_A^_^[]
UVWATAUAVAWH
m@L9ix
L9m@uQH
L9m@t*I
0A_A^A]A\_^]
D$0H;
t$ WH
UVWATAUAVAWH
|$@M9
D9|$l
D8|$huWH
A_A^A]A\_^]
@USVWATAVAWH
v`E8&uFD8
A_A^A\_^[]
VWATAVAWH
L93t<I
H;/t(H
 A_A^A\_^
UATAUAVAWH
A8_`u
A_A^A]A\]
@USVWATAVAWH
d$@D8
D8cPuGH
A_A^A\_^[]
@USVWATAUAVAWH
A_A^A]A\_^[]
@USVWAVH
t$8E3
PA^_^[]
@USVWATAUAVAWH
fD9,Au
H;D$Xu
H;D$`t
A_A^A]A\_^[]
qsVtR
\$ UVWATAUAVAWH
L9|$@u
L$`E3
A_A^A]A\_^]
@SVWH
H;D$@u
H;D$Ht
L$PH3
@USVWATAUAVAWH
L$XE3
L$`E3
8\$QH
L$`E3
D8t$Ru
A_A^A]A\_^[]
@USVWATAUAVAWH
l$PL9m
l$PL9m
H;D$@u
H;D$Ht
A_A^A]A\_^[]
@USVWATAUAVAWH
E`D9(
xhD8l$xtaL
W4f/E
l$@E3
E`D9 
A_A^A]A\_^[]
@USVWATAUAVAWH
H9t$@u
p`^|N
phY6j
H9|$X
|$HI9
p`^|N
pcSv^
A_A^A]A\_^[]
UWAVH
@A^_]
@USVWATAUAVAWH
T$x8U
D9}HvlH
y:D8}
L9|$xtzD8}
A_A^A]A\_^[]
UATAUAVAWH
E8o`u'M
A_A^A]A\]
UVWAVAWH
A_A^_^]
@USVWATAVAWH
M9gxu
L9'ttH
D9eXH
A_A^A\_^[]
@USVWATAUAVAWH
8L9;u6
L$`E3
L$`E3
p2Ypn
A_A^A]A\_^[]
|$ UH
UATAUAVAWH
|$pL9}
|$pL9}
D9|$\
D9|$X
D;d$X
D;l$\
A_A^A]A\]
|$ UH
WAVAWH
|HA;o
 A_A^_
p AWH
}~Ru(
{ AVH
WAVAWH
|HA;o
 A_A^_
p AWH
UVWAVAWH
A_A^_^]
H!\$8H!\$@H
H!^(H
L$8H!^0H!^8H!^@I
x AVH
x AVH
phY6j
x AVH
t$ WH
D#L$0D
3D$8%x
qB^Xh
@USVWAVH
pA^_^[]
UATAUAVAWH
A_A^A]A\]
f9,^u
p AWH
f9<Bu
WAVAWH
A_A^_
p AWH
|$ AVH
x AVH
)D$0f
UVWATAUAVAWH
A9wPu!E
)D$0f
E;gHr
@A_A^A]A\_^]
UATAUAVAWH
GPD8m
(t$`L
A_A^A]A\]
t$ WAVAWH
0A_A^_
UVWATAUAVAWH
!t$0E3
9rPtJ
)D$@f
)D$@f
thI!>H
PA_A^A]A\_^]
WATAUAVAWH
0A_A^A]A\_
WAVAWH
A_A^_
f9<Au
f9<Au
WAVAWH
D;}(r
 A_A^_
UVWATAUAVAWH
9~(v3H
D;~(r
0A_A^A]A\_^]
t$ WATAUAVAWH
D;e(r
L$pE3
0A_A^A]A\_
t$ WAVAWH
0A_A^_
UVWATAUAVAWH
!t$pM
]HH!t$ H
A9u0t3H
A9u0tQ3
D$pA;
0A_A^A]A\_^]
VWATAVAWH
0A_A^A\_^
qB^Xh
x AVH
)D$0f
q[]6!
UVWATAUAVAWH
A9wPu!E
)D$0f
E;gHr
@A_A^A]A\_^]
UATAUAVAWH
GPD8m
(t$`L
A_A^A]A\]
qz_0%
UVWATAUAVAWH
!t$0E3
9rPtJ
)D$@f
)D$@f
thI!>H
PA_A^A]A\_^]
WATAUAVAWH
0A_A^A]A\_
p AWH
t$ WH
t$ WH
UATAUAVAWH
A_A^A]A\]
x AUAVAWH
oH;oHv
A_A^A]
VWAUAVAWH
(t$@L
A_A^A]_^
UATAUAVAWH
M0H9M
A_A^A]A\]
VWATAVAWH
~(D;~(v
0A_A^A\_^
VWATAVAWH
D;v(r
0A_A^A\_^
UATAUAVAWH
M0H9M
0A_A^A]A\]
x AUAVAWH
oH;oHv
A_A^A]
UATAUAVAWH
M0H9M
A_A^A]A\]
UATAUAVAWH
A_A^A]A\]
H9Z tCH
qk[t:
9OTt^
AL9AH
Bx9ATt
Ex9GTt6
UVWATAUAVAWH
d$pE3
D9'v1D
@x9FTtj
D9'v,
0A_A^A]A\_^]
t$ WH
Ex9GDtV
9NTt^
9OTt>
p AWH
9OTt?A
p AWH
9NTtlA
UVWAVAWH
0A_A^_^]
9O4t^
A,9A(
BX9A4t
EX9G4t6
UVWATAUAVAWH
~(D8n8tCI
D$X9F4tj
D9/v,
0A_A^A]A\_^]
qB^Xh
t$ WH
EX9G$tV
9N4t^
9O4t>
p AWH
9O4t?A
p AWH
9N4tlA
9OTt^
UVWATAUAVAWH
d$pE3
D9'v1D
@x9FTtj
D9'v,
0A_A^A]A\_^]
t$ WH
Ex9GDtV
9NTt^
p AWH
p[]6!
9OTt?A
p AWH
9NTtlA
UVWAVAWH
0A_A^_^]
USVWAVH
PA^_^[]
UVWATAWH
@A_A\_^]
x AVH
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WAVAWH
pk[t:
 A_A^_
x AVH
pz_0%
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WAVAWH
 A_A^_
x AVH
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
phY6j
::)NMu(
x AVH
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WAVAWH
 A_A^_
q VPb
p WAVAWH
 A_A^_
phY6j
9O4t^
q VPb
UVWATAUAVAWH
~(D8n8tCI
D$X9F4tj
D9/v,
0A_A^A]A\_^]
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
phY6j
9N4t^
p AWH
9O4t?A
p AWH
9N4tlA
t$ WH
EX9G$tV
UATAUAVAWH
M0H9M
0A_A^A]A\]
UVWATAUAVAWH
9~(v3H
D;~(r
0A_A^A]A\_^]
t$ WATAUAVAWH
D;e(r
L$pE3
0A_A^A]A\_
t$ WAVAWH
0A_A^_
UVWATAUAVAWH
!t$pM
]HH!t$ H
A9u0t3H
A9u0tQ3
D$pA;
0A_A^A]A\_^]
VWATAVAWH
0A_A^A\_^
VWATAVAWH
~(D;~(v
0A_A^A\_^
qB^Xh
t$ WH
CpH!:H
@USVWAVAWH
D9ugu
L95i}
|$(E3
A_A^_^[]
K0;D$p@
L$XH3
qYVP:
qB^Xh
t$ WH
qqPrJ
CpH!:H
@USVWAVAWH
D9ugu
|$(E3
A_A^_^[]
qYVP:
y0;D$`
L$8D9L$8t
L$0H3
L$@H3
q#Y0&
Y0;D$@
pYVP:
t$ WH
O H9w
qqPrJ
\$ UVWH
K0H9{
!|$(L
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
x AVH
t$ WATAUAVAWH
D;e(r
L$pE3
0A_A^A]A\_
qy]R?
t$ WAVAWH
0A_A^_
VWATAVAWH
0A_A^A\_^
p WAVAWH
 A_A^_
9O4t^
UVWATAUAVAWH
~(D8n8tCI
D$X9F4tj
D9/v,
0A_A^A]A\_^]
W4f/E
USVWAVH
0A^_^[]
UATAUAVAWH
A_A^A]A\]
VWATAVAWH
~(D;~(v
0A_A^A\_^
UVWATAWH
@A_A\_^]
UATAUAVAWH
A_A^A]A\]
@USVWAVH
pA^_^[]
t$ WH
f9,^u
9NTtN
p AWH
9OTt?A
p AWH
9NTt\A
t$ WH
Ex9GDtV
UVWATAUAVAWH
A9~Pu
A9~Hv)I
E;~Hr
0A_A^A]A\_^]
VWATAVAWH
H!|$x
D;}Hr
H!t$x
0A_A^A\_^
VWAUAVAWH
oH;oHv
@A_A^A]_^
t$ WATAUAVAWH
D;vHr
0A_A^A]A\_
t$ WAVAWH
0A_A^_
VWATAVAWH
0A_A^A\_^
WAVAWH
D;}Hr
 A_A^_
9OTtN
UVWATAUAVAWH
!t$pE3
]hH!t$`H
A9uPt H
ttA9uPt9A
D$hE;
D$hA;
 A_A^A]A\_^]
UVWATAUAVAWH
@x9FTtW
0A_A^A]A\_^]
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
WAVAWH
D;}(r
 A_A^_
9N4t^
UATAUAVAWH
M0H9M
0A_A^A]A\]
UVWATAUAVAWH
9~(v3H
D;~(r
0A_A^A]A\_^]
p AWH
9O4t?A
UVWATAUAVAWH
!t$pM
]HH!t$ H
A9u0t3H
A9u0tQ3
D$pA;
0A_A^A]A\_^]
p AWH
9N4tlA
t$ WH
EX9G$tV
WAVAWH
A_A^_
qhY6j
WAVAWH
D;}(r
 A_A^_
p WATAUAVAWH
d$pA!,$I
D$`D;
 A_A^A]A\_
x AVH
p WATAUAVAWH
d$pA!,$I
D$`D;
 A_A^A]A\_
9N4tN
p AWH
9O4t?A
p AWH
9N4t\A
t$ WH
EX9G$tV
UVWATAUAVAWH
A9~0u
A9~(v)I
E;~(r
0A_A^A]A\_^]
VWATAVAWH
H!|$x
D;}(r
H!t$x
0A_A^A\_^
VWAUAVAWH
o(;o(v
@A_A^A]_^
t$ WATAUAVAWH
D;v(r
0A_A^A]A\_
t$ WAVAWH
0A_A^_
VWATAVAWH
0A_A^A\_^
p WAVAWH
 A_A^_
WAVAWH
D;}(r
 A_A^_
9O4tN
UVWATAUAVAWH
!t$pE3
]HH!t$`H
A9u0t H
ttA9u0t9A
D$hE;
D$hA;
 A_A^A]A\_^]
UVWATAUAVAWH
~(D8n8t@H
l$pE3
EX9F4tZ
0A_A^A]A\_^]
WATAVH
 A^A\_
x AVH
VWAVH
 A^_^
u(H9W`tKH
UWATAVAWH
x4I9^Ht.H
0A_A^A\_]
UVWATAUAVAWH
 A_A^A]A\_^]
VWAVH
 A^_^
UVWAVAWH
 A_A^_^]
x AVH
x-A86t
AHA;@
AHA;@
AHA;@
qC\r4
t$ WH
\$8H9YX
WAVAWH
uhD+p
}`H9~`tCH
H9]PtMH
H9}XtRH
 A_A^_
t$ WAVAWH
 A_A^_
l$ VWAVH
8H!(H
H!l$@
 A^_^
UVWAVAWH
0A_A^_^]
WAVAWH
H;S(v
 A_A^_
uSH9C
UVWATAUAVAWH
)t$PE
(t$PH
`A_A^A]A\_^]
UVWATAUAVAWH
)t$@L
(t$@H
PA_A^A]A\_^]
qKPV!
VWAVH
p WAVAWH
 A_A^_
WAVAWH
 A_A^_
VWAVH
D$@H;
 A^_^
)D$0f
)D$0f
(D$ H
x AVH
UVWATAUAVAWH
0A_A^A]A\_^]
l$ VWAVH
8H!(H
H!l$@
 A^_^
H;Q0s
H!_@3
L$@9L$ t
WAVAWH
t:D9S u
 A_A^_
UVWAVAWH
)D$0H
@A_A^_^]
UWAVH
L$PE3
L$8tUH
L$@H3
t$ WAVAWH
|$ 0t
8D$!u"H
L$0H3
@A_A^_
(D$ H
L$0H3
(D$ H
L$0H3
WATAVH
 A^A\_
f9<Au
q#Y0&
Y0;D$@
pYVP:
t$ WH
O H9w
\$ UVWH
K0H9{
!|$(L
L$@H3
UVWATAUAVAWH
H;D$hu
H;D$pt
A_A^A]A\_^]
UVWATAUAVAWH
H;D$hu
H;D$pt
A_A^A]A\_^]
UVWATAUAVAWH
H;D$pu
H;D$xt
A_A^A]A\_^]
\$ UVWATAUAVAWH
A_A^A]A\_^]
@USVWATAUAVAWH
H!|$hH
L$hE3
pKY<_6
A_A^A]A\_^[]
\$ UVWATAUAVAWH
pQT|T
A_A^A]A\_^]
@USVWATAUAVAWH
H!|$`
H!|$hH
H!|$hH
A_A^A]A\_^[]
UVWATAUAVAWH
|$0E3
H;D$pu
H;D$xt
A_A^A]A\_^]
UVWATAUAVAWH
|$0E3
H;D$pu
H;D$xt
A_A^A]A\_^]
UVWATAUAVAWH
|$0E3
H;D$pu
H;D$xt
A_A^A]A\_^]
Xvc>}
@USVWATAUAVAWH
A_A^A]A\_^[]
\$ UVWATAUAVAWH
pS_:(?
H;D$pu
H;D$xt
A_A^A]A\_^]
\$ UVWATAUAVAWH
d$hH;D$xu
A_A^A]A\_^]
\$ UVWATAUAVAWH
d$hH;D$xu
A_A^A]A\_^]
UVWAVAWH
H;D$pu
H;D$xt
A_A^_^]
q2[6K.}
UVWATAUAVAWH
|$0E3
H;D$pu
H;D$xt
A_A^A]A\_^]
@USVWATAUAVAWH
pXUxg
H;D$pu
H;D$xt
A_A^A]A\_^[]
@USVWATAUAVAWH
H;D$pu
H;D$xt
A_A^A]A\_^[]
UWAVH
UWATAVAWH
T$0I9
A_A^A\_]
UWATAVAWH
T$0I9
A_A^A\_]
UWATAVAWH
T$0I9
A_A^A\_]
H9_`uJ3
H9_`u1
@USVWATAUAVAWH
A_A^A]A\_^[]
UVWATAUAVAWH
|$0E3
t"D8|$pu
A_A^A]A\_^]
x UAVAWH
T$0I9VXtPH
A_A^]
UWAVH
p[Up@
t$ UWATAVAWH
t"D8d$pu
d$0E3
t"D8d$pu
A_A^A\_]
VWAVH
@USVWATAVAWH
fD9$Au
t"D8d$pu
t"D8d$pu
A_A^A\_^[]
VWAVH
qaW:m
T$0E3
H;D$`u
H;D$ht
H;D$`u
H;D$ht
H;D$`u
H;D$ht
UWAVH
H;D$hu
H;D$pt
UWAVH
x AWH
h VWATH
0A\_^
UWAVH
PA^_]
VWAVH
UWAVH
PA^_]
VWAVH
|$ UH
UWAVH
@A^_]
UWATAVAWH
L;6tTH
L;6tTH
L;6tTH
L;6tTH
0A_A^A\_]
` UAVAWH
A_A^]
UVWAVAWH
@A_A^_^]
UVWATAWH
`A_A\_^]
JANu(
t$ WAVAWH
a9|$P
|$@~?
x1;|$P|
 A_A^_
WATAUAVAWH
 A_A^A]A\_
WATAUAVAWH
 A_A^A]A\_
WATAUAVAWH
 A_A^A]A\_
p#Y0&
p#Y0&
WAVAWH
D;u(r
 A_A^_
WATAUAVAWH
9~0u&H
D;F(r
 A_A^A]A\_
VWATAVAWH
0A_A^A\_^
t$ WAVAWH
0A_A^_
qb[\W
UVWATAUAVAWH
!t$pM
!t$ L
^HH!t$(L
A9v0tTH
D$xA;
A9v0t*3
0A_A^A]A\_^]
WAVAWH
0A_A^_
VWATAVAWH
o(;o(v
0A_A^A\_^
t$ WAVAWH
0A_A^_
9O4t?
t$ WATAUAVAWH
v(t~I
pb[\W
EX9F4
pb[\W
0A_A^A]A\_
t$ WH
EX9G$tV
9O4t?
p AWH
9O4t?A
p AWH
pb[\W
9N4tMA
q[Pxs.
\$ UVWH
\$ UH
qYVP:
@USVWAVAWH
D9ugu
L95)n
|$(E3
A_A^_^[]
CpH!:H
t$ WH
\$ UVWH
K0H9{
!|$(L
q#Y0&
Y0;D$@
pYVP:
\$ UVWH
\$ UH
qYVP:
@USVWAVAWH
D9ugu
|$(E3
A_A^_^[]
CpH!:H
t$ WH
\$ UVWH
K0H9{
!|$(L
q#Y0&
Y0;D$@
pYVP:
S8;D$8
UVWAVAWH
L!u0H
UHL!uH
pA_A^_^]
S8;D$8
L$0H;
L$0H;
p WATAUAVAWH
 A_A^A]A\_
p WATAUAVAWH
 A_A^A]A\_
qB^Xh
x ATAVAWH
 A_A^A\
x ATAVAWH
 A_A^A\
x AVH
qb[\W
x ATAVAWH
 A_A^A\
x ATAVAWH
 A_A^A\
VWAVH
 A^_^
VWATAVAWH
t$(E3
0A_A^A\_^
@SVWH
t$ UWATAVAWH
H;D$Pu
H;D$Xt
A_A^A\_]
@USVWATAVAWH
fD;u"t
D$`D8u
fD;u"t
\$@H;M
A_A^A\_^[]
qKY<_6
@USVWAVH
u!fD;u2t
D$`D8u
u!fD;u2t
A^_^[]
qQT|T
@USVWAVH
u!fD;u
D$HD8u
u!fD;u
A^_^[]
@USVWATAUAVAWH
u f;}
H9D$Xu#
u f;E
D$PL#
H;D$hu
H;D$pt
A_A^A]A\_^[]
@USVWH
u f;u2t
D$P@8u
u f;u2t
H;L$xu
\$ UVWH
@8t$pu!f;u
D$8@8t$pu!f;u
H;D$Xu
H;D$`t
qS_:(?
@USVWH
@8t$pu!f;u
D$8@8t$pu!f;u
H;D$`u
H;D$ht
|$ UH
\$ UVWH
@8t$pu!f;u
D$8@8t$pu!f;u
H;D$Xu
H;D$`t
@USVWAVH
u!fD;u
D$HD8u
u!fD;u
H;D$pu
H;D$xt
A^_^[]
\$ UVWATAUAVAWH
D9d$L
L$PHc
L$8A;
H;D$Xu
H;D$`t
A_A^A]A\_^]
@USVWAVH
u!fD;u2t
D$`D8u
u!fD;u2t
A^_^[]
@USVWAVH
u!fD;u
u!fD;u
H;D$pu
H;D$xt
A^_^[]
t$ UWATAVAWH
D8'u"H
fD;"t
D8'u"H
fD;"t
H;D$hu
H;D$pt
A_A^A\_]
x ATAUAVH
0A^A]A\
\$ UVWATAUAVAWH
L$xH;M
A_A^A]A\_^]
@USVWAVH
u!fD;u
u!fD;u
H;D$pu
H;D$xt
A^_^[]
t$ UWATAVAWH
D8#u"H
fD;"t
D8#u"H
fD;"t
d$`H;D$hu
H;D$pt
A_A^A\_]
qXUxg
@USVWATAVAWH
u!fD;e
u!fD;e
A_A^A\_^[]
UVWATAUAVAWH
D$`E3
L;6t$H
D8/u"H
fD;*t
l$hH;D$xu
A_A^A]A\_^]
@USVWATAVAWH
u!fD;e
u!fD;e
A_A^A\_^[]
UVWATAUAVAWH
D$(E3
L;6t$H
D8/u"H
fD;*t
l$hH;D$xu
A_A^A]A\_^]
WAVAWH
0A_A^_
x ATAVAWH
 A_A^A\
p AWH
WAVAWH
A_A^_
p AWH
p AWH
p AWH
p AWH
p AWH
p AWH
x ATAVAWH
A_A^A\
p#Y0&
x AVH
)D$0f
UVWATAUAVAWH
A9wPu!E
)D$0f
E;gHr
@A_A^A]A\_^]
UATAUAVAWH
GPD8m
(t$`L
A_A^A]A\]
Q6"7L
q:T|N
UVWATAUAVAWH
!t$0E3
9rPtJ
)D$@f
)D$@f
thI!>H
PA_A^A]A\_^]
WATAUAVAWH
0A_A^A]A\_
x AUAVAWH
oH;oHv
A_A^A]
UATAUAVAWH
M0H9M
A_A^A]A\]
9OTt^
UVWATAUAVAWH
d$pE3
p:T|N
D9'v1D
@x9FTtj
D9'v,
0A_A^A]A\_^]
t$ WH
Ex9GDtV
9NTt^
p AWH
9OTt?A
p AWH
p:T|N
9NTtlA
UVWAVAWH
0A_A^_^]
p#Y0&
@USVWAVH
 A^_^[]
\$ UH
qYVP:
\$ UVWH
\$ UH
qYVP:
@USVWAVAWH
D9ugu
|$(E3
A_A^_^[]
CpH!:H
t$ WH
\$ UVWH
K0H9{
!|$(L
q#Y0&
Y0;D$@
pYVP:
S8;D$8
S8;D$8
p WATAUAVAWH
 A_A^A]A\_
x ATAVAWH
 A_A^A\
x ATAVAWH
 A_A^A\
qB^Xh
:(QD)u(
@eFu!
uMD9R
u*D9J
x AVH
Q6"7L
q:T|N
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WAVAWH
 A_A^_
uBD9R
u-D9R
u'D9J
WATAUAVAWH
 A_A^A]A\_
WATAUAVAWH
 A_A^A]A\_
qjVv?&
pjVv?&
pjVv?&
8Y@u@H
H;wHtWH
H!_HH
H;wPtWH
H!_PH
H!_XH
p(Wx.
UWAVH
UVWATAUAVAWH
pA_A^A]A\_^]
@USVWAUAVAWH
pKPV!
A_A^A]_^[]
Kmku(
:sOg<u+
p#Y0&
p#Y0&
p#Y0&
l$ VWAVH
8H!(H
H!l$@
 A^_^
VWAVH
 A^_^
x AVH
VWAVH
 A^_^
l$ VWAVH
8H!(H
H!l$@
 A^_^
UVWATAUAVAWH
H!uX3
@A_A^A]A\_^]
UVWATAUAVAWH
H!t$pL
0A_A^A]A\_^]
qKPV!
VWAVH
WAVAWH
 A_A^_
UVWATAUAVAWH
0A_A^A]A\_^]
VWAVH
D$@H;
 A^_^
WAVAWH
 A_A^_
|$ AVH
kBiu!
uSH9K
t$ WAVAWH
 A_A^_
x AVH
x-A86t
VWAVH
 A^_^
UVWAVAWH
 A_A^_^]
UVWATAUAVAWH
 A_A^A]A\_^]
t$ WAVAWH
uHD+p
u@H9w@tCH
H9]0tPH
H9}8tUH
 A_A^_
A(A;@
A(A;@
A(A;@
t$ WH
\$8H9Y8
UWATAVAWH
x4I9^(t.H
0A_A^A\_]
u(H9W@tKH
WAVAWH
t:D9S
 A_A^_
@USVWH
8_^[]
\$ UH
qYVP:
@USVWH
MwH!u
!t$(L
CpH!:H
t$ WH
@USWH
K0H9{
H!}0H9=
!|$(L
t$ WH
O H9w
q#Y0&
Y0;D$@
pYVP:
q#Y0&
Y0;D$@
pYVP:
l$ WH
S8;D$8
WAVAWH
H;S(v
 A_A^_
H;Q0s
H!_@3
\$ UVWH
\$ UH
qYVP:
@USVWAVAWH
D9ugu
|$(E3
A_A^_^[]
CpH!:H
t$ WH
\$ UVWH
K0H9{
!|$(L
q#Y0&
Y0;D$@
pYVP:
x ATAVAWH
 A_A^A\
x ATAVAWH
 A_A^A\
S8;D$8
p WATAUAVAWH
 A_A^A]A\_
x ATAVAWH
 A_A^A\
UVWAVAWH
A_A^_^]
SUVWAVH
L$XH3
`A^_^][
@USVWAVH
pA^_^[]
UATAUAVAWH
A_A^A]A\]
UWAVH
t$ UWATAVAWH
H;D$xu
A_A^A\_]
psVtR
@USVWAVAWH
H9wxtCH
M;>t&I
H;L$8
H;D$8u
H;D$@t
A_A^_^[]
@USVWATAUAVAWH
t'D8m
A_A^A]A\_^[]
t"@8t$pu
t"@8t$pu
H;D$`u
H;D$ht
@USVWATAUAVAWH
t)D8e
t)D8e
t)D8e
A_A^A]A\_^[]
@USVWATAUAVAWH
t)D8e
t)D8e
t)D8e
A_A^A]A\_^[]
UVWAVAWH
t$8E3
A_A^_^]
UVWAVAWH
t$8E3
A_A^_^]
@USVWATAUAVAWH
A_A^A]A\_^[]
\$ UVWATAUAVAWH
t$D8m
t$D8m
l$`H;E
A_A^A]A\_^]
@USVWATAUAVAWH
t(D8e
d$hH;E
A_A^A]A\_^[]
\$ UVWATAUAVAWH
t$D8m
t$D8m
l$`H;E
A_A^A]A\_^]
@USVWATAUAVAWH
t)D8e
d$`H;E
A_A^A]A\_^[]
@USVWATAVAWH
t$D8}
t$D8}
t$D8}
A_A^A\_^[]
\$ UVWAVAWH
t$8E3
3L9t$hu,
A_A^_^]
\$ UVWATAUAVAWH
|$8E3
A_A^A]A\_^]
@USVWATAVAWH
t$D8}
t$D8}
t$D8}
A_A^A\_^[]
\$ UVWATAUAVAWH
H;D$hu
H;D$pt
A_A^A]A\_^]
t"@8t$pu
t"@8t$pu
H;D$`u
H;D$ht
@USVWATAUAVAWH
t(D8e
t$D8e
A_A^A]A\_^[]
\$ UVWATAUAVAWH
A_A^A]A\_^]
@USVWATAUAVAWH
A_A^A]A\_^[]
@USVWAUAVAWH
A_A^A]_^[]
UVWAVAWH
t$8E3
A_A^_^]
q:ZV<
@USVWATAVAWH
t$8E3
7L9t$xu#
A_A^A\_^[]
@USVWATAVAWH
t$8E3
7L9t$xu#
A_A^A\_^[]
\$ UVWATAUAVAWH
l$`H;D$hu
H;D$pt
A_A^A]A\_^]
@USVWATAUAVAWH
D$0E3
|$pH;E
A_A^A]A\_^[]
UVWAVAWH
H;D$pu
H;D$xt
A_A^_^]
\$ UVWAVAWH
t$8E3
3L9t$hu,
A_A^_^]
\$ UVWAVAWH
t$8E3
3L9t$hu,
A_A^_^]
UVWAVAWH
t$8E3
A_A^_^]
\$ UVWATAUAVAWH
t$D8m
t$D8m
l$`H;E
A_A^A]A\_^]
@USVWATAUAVAWH
D8d$`H
d$hH;D$pu
H;D$xt
A_A^A]A\_^[]
@USVWATAUAVAWH
t'@8}
d$xH;E
A_A^A]A\_^[]
\$ UVWATAUAVAWH
l$`H;D$hu
H;D$pt
A_A^A]A\_^]
\$ UVWATAUAVAWH
l$8E3
l$`H;D$hu
H;D$pt
A_A^A]A\_^]
UVWATAUAVAWH
|$8E3
A_A^A]A\_^]
\$ UVWAVAWH
t$8E3
3L9t$hu,
A_A^_^]
@USVWATAVAWH
t"D8d$pu
t"D8d$pu
d$8E3
t"D8d$pu
H;D$`u
H;D$ht
A_A^A\_^[]
\$ UVWATAUAVAWH
l$8E3
l$(E3
l$`H;D$hu
H;D$pt
A_A^A]A\_^]
@USVWATAVAWH
t"D8d$pu
t"D8d$pu
d$8E3
t"D8d$pu
H;D$`u
H;D$ht
A_A^A\_^[]
UATAWH
uPL9M@
A_A\]
UWAVH
(D$ H
@USVWAVH
0A^_^[]
UWAVH
qYVP:
@USVWAVAWH
D9ugu
|$(E3
A_A^_^[]
CpH!:H
t$ WH
\$ UVWH
K0H9{
!|$(L
q#Y0&
Y0;D$@
pYVP:
qYVP:
@USVWAVAWH
D9ugu
|$(E3
A_A^_^[]
CpH!:H
t$ WH
\$ UVWH
K0H9{
!|$(L
q#Y0&
Y0;D$@
pYVP:
qYVP:
@USVWAVAWH
D9ugu
|$(E3
A_A^_^[]
CpH!:H
t$ WH
\$ UVWH
K0H9{
!|$(L
q#Y0&
Y0;D$@
pYVP:
UVWATAUAVAWH
H L;x
D$`I;
 A_A^A]A\_^]
L$XH3
L$XH3
L$XH3
UVWATAUAVAWH
 A_A^A]A\_^]
p AWH
p AWH
p AWH
p AWH
WAVAWH
A_A^_
WAVAWH
A_A^_
WAVAWH
A_A^_
WAVAWH
A_A^_
WAVAWH
A_A^_
x ATAVAWH
A_A^A\
WAVAWH
A9>t*
0A_A^_
VWATAVAWH
s H;s
 A_A^A\_^
qB^Xh
|$ UH
pB^Xh
t$ WH
CpH!:H
@USVWAVAWH
D9ugu
|$(E3
A_A^_^[]
L$XH3
qYVP:
q#Y0&
Y0;D$@
pYVP:
\$ UVWH
K0H9{
!|$(L
t$ WH
CpH!:H
@USVWAVAWH
D9ugu
|$(E3
A_A^_^[]
L$XH3
qYVP:
q#Y0&
Y0;D$@
pYVP:
\$ UVWH
K0H9{
!|$(L
t$ WH
CpH!:H
@USVWAVAWH
D9ugu
|$(E3
A_A^_^[]
L$XH3
qYVP:
q#Y0&
Y0;D$@
pYVP:
\$ UVWH
K0H9{
!|$(L
t$ WH
CpH!:H
@USVWAVAWH
D9ugu
|$(E3
A_A^_^[]
L$XH3
qYVP:
q#Y0&
Y0;D$@
pYVP:
\$ UVWH
K0H9{
!|$(L
t$ WH
CpH!:H
@USVWAVAWH
D9ugu
|$(E3
A_A^_^[]
L$XH3
qYVP:
q#Y0&
Y0;D$@
pYVP:
\$ UVWH
K0H9{
!|$(L
t$ WH
CpH!:H
@USVWAVAWH
D9ugu
|$(E3
A_A^_^[]
L$XH3
qYVP:
q#Y0&
Y0;D$@
pYVP:
\$ UVWH
K0H9{
!|$(L
t$ WH
CpH!:H
@USVWAVAWH
D9ugu
|$(E3
A_A^_^[]
L$XH3
qYVP:
q#Y0&
Y0;D$@
pYVP:
\$ UVWH
K0H9{
!|$(L
t$ WH
CpH!:H
@USVWAVAWH
D9ugu
|$(E3
A_A^_^[]
L$XH3
qYVP:
t$ WH
CpH!:H
@USVWAVAWH
D9ugu
|$(E3
A_A^_^[]
L$XH3
qYVP:
q#Y0&
Y0;D$@
pYVP:
\$ UVWH
K0H9{
!|$(L
WATAVH
 A^A\_
t$ WH
CpH!:H
@USVWAVAWH
D9ugu
L95ik
|$(E3
A_A^_^[]
L$XH3
qYVP:
q#Y0&
Y0;D$@
pYVP:
\$ UVWH
K0H9{
!|$(L
q#Y0&
Y0;D$@
pYVP:
\$ UVWH
K0H9{
!|$(L
x AVH
q(Ur4
@USVWATAVAWH
A_A^A\_^[]
USVWAVH
`A^_^[]
UVWATAUAVAWH
D9ePt
@A_A^A]A\_^]
@USVWAVH
`A^_^[]
UWAVH
L90t#H
PA^_]
tvf97tqH
L$HH3
L$HH3
|$ UH
\$ UVWH
@SVWH
L$`H3
@SVWH
L$`H3
@USVWAVH
pA^_^[]
\$ UVWH
)t$pH
(t$pH
p1W2g
t$ UWAVH
t$xfD
D$@E3
L$8E3
L$@H9
@SVWH
p3QXI
L$HH3
@SVWH
L$HH3
@SVWH
L$HH3
@SVWH
L$PH3
@SVWH
L$HH3
@SVWH
L$HH3
UVWATAUAVAWH
0r$fA
TuIfA
PA_A^A]A\_^]
<F.uP
<vZuN
f9<FtE
SUVWATAUAVAWH
(A_A^A]A\_^][
@USWH
8\$@uKH
UWAVH
@A^_]
|$ UATAWH
D8d$@
fD9$Gu
fD9$pu
A_A\]
UAVAWH
fD9<xu
A_A^]
UWAVH
@USVWAVH
p[Up@
fD94Au
PA^_^[]
UVWAVAWH
pb]|s
A_A^_^]
UWAVH
p3_~4
L$XH3
UVWAVAWH
pSRX$7
L9>u]H
pSRX$7
pA_A^_^]
t$(E3
t$(E3
tPH9{
WATAUAVAWH
0A_A^A]A\_
x AVH
UVWATAUAVAWH
pQZ0}
D8e`u
A_A^A]A\_^]
L$XE3
L$`E3
pcU|;?
L$hE3
L$hE3
pBWvE
YZY>h
\$ UVWATAUAVAWH
A_A^A]A\_^]
s WAVAWH
fD9<Au
fD9<Ju
fD9<Ju
fD9<su
A_A^_
|$ UH
p8S\F/
x UATAUAVAWH
t$PD9l$@
D;t$@sBL
A_A^A]A\]
|$@Xu
|$BXu
f9\$DtXH
\$ UVWH
@UVWAVAWH
)t$pH
(t$pH
A_A^_^]
x UAVAWH
A_A^]
t$ UWATAVAWH
pa\:3
A_A^A\_]
pa\:3
L$ UWAVH
UVWATAUAVAWH
A_A^A]A\_^]
@USVWAVAWH
A_A^_^[]
t$ UWAVH
pQZ0}
VWAVH
D$XH9
H+D$`H
0A^_^
@USVWATAVAWH
H!}PH
9.u,H
L9uPt
@A_A^A\_^[]
f9,yu
@USVWATAVAWH
 A_A^A\_^[]
\$ UVWH
@8u u1
@USVWAVH
@A^_^[]
UVWATAUAVAWH
A_A^A]A\_^]
UWAVH
@USVWAUAVAWH
@A_A^A]_^[]
UATAUAVAWH
A_A^A]A\]
WATAUAVAWH
 A_A^A]A\_
f9,Zu
WAVAWH
L$0E3
fA9(t
@A_A^_
ATAVAWH
 A_A^A\
f93txM
H9Q@tCH
ChH9{ptCH
|$pH9{xtCH
H9sPtCH
H;.t&H
H;.t&H
\$ UVWATAUAVAWH
@8t$p
@8t$p
A_A^A]A\_^]
WAVAWH
D;}(r
 A_A^_
UVWATAUAVAWH
9~(v3H
D;~(r
0A_A^A]A\_^]
t$ WATAUAVAWH
D;e(r
L$pE3
0A_A^A]A\_
t$ WAVAWH
0A_A^_
UVWATAUAVAWH
!t$pM
]HH!t$ H
A9u0t3H
A9u0tQ3
D$pA;
0A_A^A]A\_^]
VWATAVAWH
0A_A^A\_^
p AWH
VWATAVAWH
~(D;~(v
0A_A^A\_^
UATAUAVAWH
M0H9M
0A_A^A]A\]
@USVWAVH
pA^_^[]
9O4t^
UVWATAUAVAWH
~(D8n8tCI
D$X9F4tj
D9/v,
0A_A^A]A\_^]
t$ WH
EX9G$tV
9N4t^
p AWH
9O4t?A
p AWH
9N4tlA
UATAUAVAWH
A_A^A]A\]
USVWATAUAVH
@A^A]A\_^[]
x AVH
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WAVAWH
 A_A^_
x AVH
@USVWATAVAWH
PA_A^A\_^[]
@USVWAVH
MHu1H
0A^_^[]
qpVzf.y
t$ WH
UVWATAUAVAWH
`A_A^A]A\_^]
4-Ru(
WAVAWH
D;}(r
 A_A^_
UVWATAUAVAWH
9~(v3H
D;~(r
0A_A^A]A\_^]
t$ WATAUAVAWH
D;e(r
L$pE3
0A_A^A]A\_
t$ WAVAWH
0A_A^_
UVWATAUAVAWH
!t$pM
]HH!t$ H
A9u0t3H
A9u0tQ3
D$pA;
0A_A^A]A\_^]
VWATAVAWH
0A_A^A\_^
WAVAWH
D;}(r
 A_A^_
UVWATAUAVAWH
9~(v3H
D;~(r
0A_A^A]A\_^]
t$ WATAUAVAWH
D;e(r
L$pE3
0A_A^A]A\_
t$ WAVAWH
0A_A^_
UVWATAUAVAWH
!t$pM
]HH!t$ H
A9u0t3H
A9u0tQ3
D$pA;
0A_A^A]A\_^]
VWATAVAWH
0A_A^A\_^
WAVAWH
D;}(r
 A_A^_
UVWATAUAVAWH
9~(v3H
D;~(r
0A_A^A]A\_^]
t$ WATAUAVAWH
D;e(r
L$pE3
0A_A^A]A\_
t$ WAVAWH
0A_A^_
UVWATAUAVAWH
!t$pM
]HH!t$ H
A9u0t3H
A9u0tQ3
D$pA;
0A_A^A]A\_^]
VWATAVAWH
0A_A^A\_^
UATAUAVAWH
A_A^A]A\]
E|@u(
4-Ru(
VWATAVAWH
~(D;~(v
0A_A^A\_^
UATAUAVAWH
M0H9M
0A_A^A]A\]
VWATAVAWH
~(D;~(v
0A_A^A\_^
UATAUAVAWH
M0H9M
0A_A^A]A\]
VWATAVAWH
~(D;~(v
0A_A^A\_^
UATAUAVAWH
M0H9M
0A_A^A]A\]
9O4t^
UVWATAUAVAWH
~(D8n8tCI
D$X9F4tj
D9/v,
0A_A^A]A\_^]
t$ WH
EX9G$tV
q[X\7
9N4t^
p AWH
9O4t?A
p AWH
9N4tlA
9O4t^
UVWATAUAVAWH
~(D8n8tCI
D$X9F4tj
D9/v,
0A_A^A]A\_^]
t$ WH
EX9G$tV
9N4t^
p AWH
9O4t?A
p AWH
9N4tlA
9O4t^
UVWATAUAVAWH
~(D8n8tCI
D$X9F4tj
D9/v,
0A_A^A]A\_^]
t$ WH
EX9G$tV
9N4t^
p AWH
9O4t?A
p AWH
9N4tlA
@USWAVAWH
0A_A^_[]
USVWATAUAVH
@A^A]A\_^[]
UVWATAWH
@A_A\_^]
UVWATAWH
@A_A\_^]
x AVH
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WAVAWH
 A_A^_
x AVH
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WAVAWH
 A_A^_
x AVH
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p[X\7
p WAVAWH
 A_A^_
:Uo~9u(
H9Q@tCH
CdH9{htCH
|$xH9{ptCH
H9sXtCH
H;.t&H
H!sx3
\$ UVWATAUAVAWH
fD9,Au
fD9,Au
D8l$p
A_A^A]A\_^]
p AWH
@USVWAVH
pA^_^[]
UATAUAVAWH
A_A^A]A\]
\$ UVWATAUAVAWH
D8m`t
pA_A^A]A\_^]
L95T9
T$(E3
@USVWATAUAVAWH
XA_A^A]A\_^[]
UVWATAUAVAWH
PA_A^A]A\_^]
UVWATAUAVAWH
`Lcu`H
`A_A^A]A\_^]
T$(E3
UVWATAUAVAWH
M9>u/
0A_A^A]A\_^]
f9,Au
UVWAVAWH
D9}Ht2H
tlH!]
@A_A^_^]
qBQpj
@USWH
@USWH
@USVWATAUAVAWH
H;3t&H
p(Ur4
M9.u$I
L9l$HtGH
|$`H;
A_A^A]A\_^[]
@UAVAWH
PA_A^]
@USVWAVH
pCUv,
pA^_^[]
x UATAUAVAWH
D$0E3
p[Up@
p+\>\
A_A^A]A\]
x UATAUAVAWH
t"@8|$Pu
A_A^A]A\]
pBQpj
OJZu(
p#Y0&
f9,^u
 LcI L
qBQpj
qBQpj
L$0E3
x AVH
t$ WAVAWH
H;.t&H
@A_A^_
\$ UVWATAUAVAWH
L9|$h
|$hH9
A_A^A]A\_^]
qKYtm7Y
qRWPy'\
VWAVH
0A^_^
x AVH
\$ UVWATAUAVAWH
p2Ypn
\$xD9m
A_A^A]A\_^]
UVWATAUAVAWH
 A_A^A]A\_^]
WAVAWH
D;}(r
 A_A^_
qjTT 
UVWATAUAVAWH
9~(v3H
D;~(r
0A_A^A]A\_^]
t$ WATAUAVAWH
D;e(r
L$pE3
0A_A^A]A\_
qA]P"
t$ WAVAWH
0A_A^_
UVWATAUAVAWH
!t$pM
]HH!t$ H
A9u0t3H
A9u0tQ3
D$pA;
0A_A^A]A\_^]
VWATAVAWH
0A_A^A\_^
WAVAWH
A9>t*
0A_A^_
VWATAVAWH
~(D;~(v
0A_A^A\_^
UATAUAVAWH
M0H9M
0A_A^A]A\]
9O4t^
UVWATAUAVAWH
~(D8n8tCI
D$X9F4tj
D9/v,
0A_A^A]A\_^]
t$ WH
EX9G$tV
9N4t^
p AWH
pjTT 
9O4t?A
p AWH
9N4tlA
VWAVH
 A^_^
x AVH
pA]P"
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WAVAWH
 A_A^_
t$HE3
\$ UVWATAUAVAWH
p[Up@
f9<pu
A_A^A]A\_^]
x UATAUAVAWH
l$`L9)tkH
L9l$`
D8l$pu1I
D8l$p
A_A^A]A\]
x ATAVAWH
H;.t&H
L9&u&3
p#Y0&
0A_A^A\
UVWAVAWH
0A_A^_^]
UVWATAUAVAWH
pcV<K
A_A^A]A\_^]
UVWATAUAVAWH
A_A^A]A\_^]
t$ UWAVH
0A^_]
U6S64
UVWATAVH
H!ugH
d$(E3
A^A\_^]
WAVAWH
D;}(r
(t$@L
A_A^_
SUVWATAUAVAWH
A9}0u=
A;](r
)D$@H
xA_A^A]A\_^][
UATAUAVAWH
E;~(r
T  H!}
A_A^A]A\]
t$ WAVAWH
0A_A^_
UVWATAUAVAWH
!l$ M
H!(H!h
^HH!l$(L
\$0!(
A9v0t H
D$ A;
(t$`L
(|$PI
A_A^A]A\_^]
VWATAVAWH
0A_A^A\_^
WAVAWH
 A_A^_
l$ VWAVH
8H!(H
H!l$@
 A^_^
VWAVH
(t$@L
(|$0I
VWAVH
 A^_^
l$ VWAVH
8H!(H
H!l$@
 A^_^
UVWATAUAVAWH
A_A^A]A\_^]
UVWATAUAVAWH
)D$0H
(D$0D
A_A^A]A\_^]
qKPV!
VWAVH
l$ VWAVH
8H!(H
H!l$@
 A^_^
VWAVH
 A^_^
VWAVH
 A^_^
l$ VWAVH
8H!(H
H!l$@
 A^_^
UVWATAUAVAWH
@A_A^A]A\_^]
VWAUAVAWH
H!|$`L
0A_A^A]_^
qKPV!
VWAVH
UVWATAUAVAWH
0A_A^A]A\_^]
VWAVH
D$@H;
 A^_^
WAVAWH
 A_A^_
UVWATAUAVAWH
0A_A^A]A\_^]
VWAVH
D$@H;
 A^_^
WAVAWH
 A_A^_
UVWAVAWH
PA_A^_^]
WAVAWH
 A_A^_
` UAVAWH
~(D;~(v
A_A^]
VWATAVAWH
)D$0H
A_A^A\_^
VWAVH
uSH9G
uSH9K
x AVH
9N4t]A
UVWAVAWH
w(twI
GX9G4
@A_A^_^]
92vSH
t$ WH
EX9G$tV
x AVH
9N4t]A
p AWH
)D$PI
9O4t?A
WAVAWH
D9>v<
0A_A^_
t$ WAVAWH
 A_A^_
x AVH
x-A86t
VWAVH
 A^_^
t$ WAVAWH
 A_A^_
x AVH
x-A86t
` UAVAWH
(t$PL
A_A^]
UVWAVAWH
 A_A^_^]
UVWATAUAVAWH
 A_A^A]A\_^]
UVWATAUAVAWH
 A_A^A]A\_^]
WAVAWH
uhD+p
}`H9~`tCH
H9]PtMH
H9}XtRH
 A_A^_
WAVAWH
uhD+p
}`H9~`tCH
H9]PtMH
H9}XtRH
 A_A^_
t$ WH
\$8H9YX
t$ WH
\$8H9YX
u(H9W`tKH
u(H9W`tKH
WAVAWH
t99K@u
 A_A^_
WAVAWH
 A_A^_
 LcI L
U6S64
WAVAWH
H;S(v
 A_A^_
H;Q0s
H!_@3
9\$0v3
;\$0r
L$0A;
k VWAVH
H;w0t)H
H!_0H
L$PH3
UWAVH
PA^_]
|$ UH
|$ UAVAWH
A_A^]
t$ UWAVH
0A^_]
UVWAVAWH
psVV%
pA_A^_^]
@USVWAVH
pA^_^[]
t$ UWATAVAWH
fD9$Au
pYT:d
A_A^A\_]
@USVWATAUAVAWH
A_A^A]A\_^[]
!\$(I
L$ USWH
H!\$@
D$HE3
!\$(H
WAVAWH
I;.t&I
0A_A^_
@USVWAVAWH
p+ZRi>h
p[Yxj
xA_A^_^[]
USVWAVH
pYWX6
A^_^[]
L$pH3
t$ UWATAVAWH
H9QPtCH
pB^Xh
0A_A^A\_]
@USVWATAVAWH
D8egH
D8ewH
p"X\O
A_A^A\_^[]
VWAVH
0A^_^
t$ WH
|$ UH
VWAVH
(D$0H
@A^_^
USVWAVAWH
XA_A^_^[]
x ATAVAWH
 A_A^A\
p#Y0&
p#Y0&
p#Y0&
p AWH
WAVAWH
A9>t*
0A_A^_
WAVAWH
A9>t*
0A_A^_
VWATAVAWH
s H;s
 A_A^A\_^
VWATAVAWH
s H;s
 A_A^A\_^
q#Y0&
Y0;D$@
pYVP:
q#Y0&
Y0;D$@
pYVP:
q#Y0&
Y0;D$@
pYVP:
x ATAVAWH
 A_A^A\
x ATAVAWH
 A_A^A\
x ATAVAWH
 A_A^A\
H9QPtCH
H9sHtCH
qb]:0.
@SUVWAVAWH
L$pH3
A_A^_^][
@SUVWAVH
D$@H+
A^_^][
L$`H3
|$ UAVAWH
A_A^]
x UATAUAVAWH
Rr#>I
A_A^A]A\]
L$ SVWH
L$ SH
VWAVH
D$ E3
H!t$(D
H!t$ L
PA^_^
fA9<Au
H!\$0H
H;.t&H
H;.t&H
H;.t&H
|$ UATAUAVAWH
pKYtm7Y
D8l$pt?I
A_A^A]A\]
WAVAWH
@A_A^_
t$ WH
CpH!:H
@USVWAVAWH
D9ugu
|$(E3
A_A^_^[]
L$XH3
qYVP:
q#Y0&
Y0;D$@
pYVP:
\$ UVWH
K0H9{
!|$(L
@USVWAVH
@A^_^[]
\$ UVWATAUAVAWH
D$8E3
L$hE3
fD94Au
L9>t+H
L$hE3
L$hE3
A_A^A]A\_^]
\$ UVWATAUAVAWH
D$8E3
fD9$Au
L9d$`u
L$`E3
L$XE3
L$XE3
A_A^A]A\_^]
\$ UVWATAUAVAWH
D$8E3
f94Au
A_A^A]A\_^]
t$ WAVAWH
t$@D;
|$@~>
 A_A^_
|$ UH
@USVWATAVAWH
A_A^A\_^[]
@USVWATAVAWH
D9d$Hu
A_A^A\_^[]
@USVWATAVAWH
fD9$Au
D9d$Hu
A_A^A\_^[]
UVWATAUAVAWH
D$8E3
pA_A^A]A\_^]
\$ UVWATAUAVAWH
\$0I9]
A_A^A]A\_^]
x UATAUAVAWH
,$M9/u=I
D9n,H
fD9,Au
A_A^A]A\]
UVWATAUAVAWH
@A_A^A]A\_^]
@USVWATAVAWH
`A_A^A\_^[]
UVWAVAWH
D9}8u
pA_A^_^]
UVWATAUAVAWH
D9eou1
A_A^A]A\_^]
UVWATAUAVAWH
fD9,Xu
L9oXu
A_A^A]A\_^]
t$ WAVAWH
t$@D;
|$@~>
 A_A^_
t$ WAVAWH
t$@D;
|$@~>
 A_A^_
UVWATAUAVAWH
@A_A^A]A\_^]
x AVH
)D$0f
UVWATAUAVAWH
A9wPu!E
)D$0f
E;gHr
@A_A^A]A\_^]
UATAUAVAWH
GPD8m
(t$`L
A_A^A]A\]
UVWATAUAVAWH
!t$0E3
9rPtJ
)D$@f
)D$@f
thI!>H
PA_A^A]A\_^]
qyVvu
WATAUAVAWH
0A_A^A]A\_
x AUAVAWH
oH;oHv
A_A^A]
UATAUAVAWH
M0H9M
A_A^A]A\]
qHUvS
9OTt^
UVWATAUAVAWH
d$pE3
D9'v1D
@x9FTtj
D9'v,
0A_A^A]A\_^]
t$ WH
Ex9GDtV
9NTt^
p AWH
9OTt?A
p AWH
9NTtlA
UVWAVAWH
0A_A^_^]
qyVvu
x AVH
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WAVAWH
pHUvS
 A_A^_
WAVAWH
0A_A^_
t$ WH
VWAVH
0A^_^
UWAVH
PA^_]
l$ VWAVH
8H!(H
H!l$@
 A^_^
VWAVH
 A^_^
VWAVH
 A^_^
l$ VWAVH
8H!(H
H!l$@
 A^_^
UVWATAUAVAWH
H!EXH
@A_A^A]A\_^]
UVWATAUAVAWH
0A_A^A]A\_^]
qKPV!
VWAVH
UVWATAUAVAWH
0A_A^A]A\_^]
WAVAWH
 A_A^_
VWAVH
 A^_^
uSH9K
t$ WAVAWH
 A_A^_
x AVH
x-A86t
p WAVAWH
8YMtg@
th9_HtcH
 A_A^_
UVWAVAWH
 A_A^_^]
UVWATAUAVAWH
 A_A^A]A\_^]
t$ WAVAWH
uHD+p
u@H9w@tCH
H9]0tPH
H9}8tUH
 A_A^_
t$ WH
\$8H9Y8
u(H9W@tKH
l$ WH
H;.t&H
x UATAUAVAWH
A_A^A]A\]
H!\$0H
H;.t&H
H;.t&H
x UATAUAVAWH
pKYtm7Y
D8l$`t?I
A_A^A]A\]
H!\$0H
H;.t&H
H;.t&H
UWATAVAWH
pKYtm7Y
d$xD8d$`tbH
9|$pu&
A_A^A\_]
WAVAWH
A_A^_
VWAVH
;t$@r
L$X@2
 A^_^
UAVAWH
H!}8H
M8@8}0
H!}8I
H!}8H
PA_A^]
USVWATAUAVAWH
D;}`s
D9uH}
hA_A^A]A\_^[]
UVWATAUAVAWH
E8~dH
E8~Ht)H
M9~XH
D8{8L
A_A^A]A\_^]
UAVAWH
@A_A^]
H;/t&H
p#Y0&
@USVWAVH
0A^_^[]
VWAVH
t$ WH
CpH!:H
@USVWAVAWH
D9ugu
|$(E3
A_A^_^[]
L$XH3
qYVP:
q#Y0&
Y0;D$@
pYVP:
\$ UVWH
K0H9{
!|$(L
H;.t&H
UWATAVAWH
D$8E3
A_A^A\_]
x AVH
H;.t&H
L;6t&H
x UATAUAVAWH
D$8E3
A_A^A]A\]
H;/t&H
p#Y0&
@USVWATAUAVAWH
8{u*f
xJ}u#H
pA]P"
A_A^A]A\_^[]
UWATAVAWH
A_A^A\_]
WAVAWH
@A_A^_
UAVAWH
f;A$u
f;A.u
0A_A^]
t$ WH
CpH!:H
@USVWAVAWH
D9ugu
|$(E3
A_A^_^[]
L$XH3
qYVP:
q#Y0&
Y0;D$@
pYVP:
\$ UVWH
K0H9{
!|$(L
x AVH
H;/t&H
L;7t&H
p#Y0&
@USVWAVH
0A^_^[]
UWATAVAWH
A_A^A\_]
t$ WH
CpH!:H
@USVWAVAWH
D9ugu
|$(E3
A_A^_^[]
L$XH3
qYVP:
q#Y0&
Y0;D$@
pYVP:
\$ UVWH
K0H9{
!|$(L
H;/t&H
H;/t&H
H;/t&H
p#Y0&
@USVWAVH
0A^_^[]
|$ UATAUAVAWH
pKYtm7Y
D8d$`t?I
GXD;x
@pD9h
@pD;h
t$xE3
A_A^A]A\]
t$ WH
CpH!:H
@USVWAVAWH
D9ugu
|$(E3
A_A^_^[]
L$XH3
qYVP:
q#Y0&
Y0;D$@
pYVP:
\$ UVWH
K0H9{
!|$(L
H;wPtWH
H!_PH
{ AVH
\$`H9
H;/t&H
H;/t&H
p#Y0&
s WAVAWH
A_A^_
WAVAWH
0A_A^_
WAVAWH
I;.t&I
H;.t&H
H;.t&H
0A_A^_
VWAVH
pC^<<
WAVAWH
I;.t&I
H;.t&H
H;.t&H
0A_A^_
VWAVH
pjXZ"
WAVAWH
I;.t&I
p#Y0&
0A_A^_
x UAVAWH
A_A^]
t$ WH
CpH!:H
@USVWAVAWH
D9ugu
|$(E3
A_A^_^[]
L$XH3
qYVP:
7f8u+
q#Y0&
Y0;D$@
pYVP:
\$ UVWH
K0H9{
!|$(L
WAVAWH
I;.t&I
0A_A^_
x UAVAWH
A_A^]
p AWH
@USVWAVH
pA^_^[]
UATAUAVAWH
A_A^A]A\]
\$xH9
H;.t&H
qBX0w
|$ UATAUAVAWH
A_A^A]A\]
WAVAWH
0A_A^_
@USVWAVH
pA^_^[]
UATAUAVAWH
A_A^A]A\]
WAVAWH
I;.t&I
0A_A^_
qBX0w
|$ UATAUAVAWH
H9|$xt"3
A_A^A]A\]
p AWH
WAVAWH
I;.t&I
0A_A^_
|$ UATAUAVAWH
|$hI9>
L$p@8|$`
\$hH9]
A_A^A]A\]
WAVAWH
@A_A^_
@USVWAVH
pA^_^[]
UATAUAVAWH
A_A^A]A\]
H;.t&H
qBX0w
@USVWATAUAVAWH
A_A^A]A\_^[]
p AWH
H;.t&H
|$ UATAUAVAWH
L$hI9>
H9|$h
@8|$`
\$xH9]
A_A^A]A\]
@USVWAVH
pA^_^[]
UATAUAVAWH
A_A^A]A\]
WAVAWH
I;.t&I
H;.t&H
0A_A^_
x UAVAWH
D9|$p
A_A^]
@USVWAVH
pA^_^[]
@USWH
UATAUAVAWH
A_A^A]A\]
H;+t&H
p#Y0&
WAVAWH
 A_A^_
p AWH
H;.t&H
H;.t&H
x UAVAWH
L9|$`tu
A_A^]
WAVAWH
 A_A^_
@USVWAVH
pA^_^[]
UATAUAVAWH
A_A^A]A\]
=i:u(
H;.t&H
H;.t&H
x UAVAWH
L9|$htu
A_A^]
@USVWAVH
pA^_^[]
UATAUAVAWH
A_A^A]A\]
x AVH
H;.t&H
L;6t&H
|$ UATAUAVAWH
piTX.
D9l$x
D;t$x
A_A^A]A\]
x AVH
@USVWAVH
pA^_^[]
UATAUAVAWH
A_A^A]A\]
\$`H9
H;.t&H
H;.t&H
H;.t&H
p#Y0&
UWATAVAWH
A_A^A\_]
UWAVH
p AWH
@USVWAVH
pA^_^[]
UATAUAVAWH
A_A^A]A\]
WAVAWH
L;7t&H
H;/t&H
\$pH9
p#Y0&
0A_A^_
UWAVH
WAVAWH
p#Y0&
0A_A^_
UWATAVAWH
A_A^A\_]
WAVAWH
0A_A^_
x UAVAWH
A_A^]
@USVWAVH
pA^_^[]
UATAUAVAWH
A_A^A]A\]
UVWATAUAVAWH
M;>t&I
pk[t:
`A_A^A]A\_^]
UWATAVAWH
A_A^A\_]
WAVAWH
I;.t&I
0A_A^_
UWATAVAWH
T$`E3
A_A^A\_]
\$`H9
H;+t&H
p#Y0&
UWATAVAWH
A_A^A\_]
L$`H3
WAVAWH
0A_A^_
@USVWAVH
pA^_^[]
UATAUAVAWH
A_A^A]A\]
WAVAWH
L;6t&H
H;.t&H
I;6t&I
p#Y0&
0A_A^_
UWATAVAWH
A_A^A\_]
WAVAWH
 A_A^_
VWAVH
D$`E3
:0t4D
fD;2t
D$`H;
L$`H3
pA^_^
L$PH3
@USVWAVAWH
xA_A^_^[]
USVWATAUAVAWH
L$PE3
fD9,xu
A_A^A]A\_^[]
UATAUAVAWH
A_A^A]A\]
t$ WH
t$ WH
L$XH3
qSZ:M
qxV|%
UATAUAVAWH
A_A^A]A\]
t$ WH
L$XH3
q9\xU
UATAUAVAWH
A_A^A]A\]
x AVH
qQ[to
q(Ur}
t$ WH
@USVWAVAWH
8A_A^_^[]
UVWATAUAVAWH
PA_A^A]A\_^]
WAVAWH
D;}(r
 A_A^_
UVWATAUAVAWH
9~(v3H
D;~(r
0A_A^A]A\_^]
t$ WATAUAVAWH
D;e(r
L$pE3
0A_A^A]A\_
t$ WAVAWH
0A_A^_
UVWATAUAVAWH
!t$pM
]HH!t$ H
A9u0t3H
A9u0tQ3
D$pA;
0A_A^A]A\_^]
VWATAVAWH
0A_A^A\_^
UATAUAVAWH
A_A^A]A\]
VWATAVAWH
~(D;~(v
0A_A^A\_^
UATAUAVAWH
M0H9M
0A_A^A]A\]
9O4t^
UVWATAUAVAWH
~(D8n8tCI
D$X9F4tj
D9/v,
0A_A^A]A\_^]
t$ WH
EX9G$tV
9N4t^
p AWH
9O4t?A
p AWH
9N4tlA
@USWH
UVWATAWH
@A_A\_^]
x AVH
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WAVAWH
 A_A^_
x AVH
H;7t&H
(t$0H
q+\>\
q[ZTo
L$@H3
L$@H3
UVWATAUAVAWH
pA_A^A]A\_^]
VWAVH
0A^_^
l$ VWAVH
8H!(H
H!l$@
 A^_^
UVWAVAWH
)D$0H
@A_A^_^]
VWAVH
 A^_^
l$ VWAVH
8H!(H
H!l$@
 A^_^
UVWATAUAVAWH
)t$PE
(t$PH
`A_A^A]A\_^]
UVWATAUAVAWH
)t$@L
(t$@H
PA_A^A]A\_^]
UVWATAUAVAWH
0A_A^A]A\_^]
WAVAWH
 A_A^_
)D$0f
x AVH
uSH9C
UVWAVAWH
0A_A^_^]
t$ WAVAWH
 A_A^_
x AVH
x-A86t
VWAVH
 A^_^
UVWATAUAVAWH
 A_A^A]A\_^]
WAVAWH
uhD+p
}`H9~`tCH
H9]PtMH
H9}XtRH
 A_A^_
t$ WH
\$8H9YX
u(H9W`tKH
WAVAWH
t99K u
 A_A^_
|$ AVH
L9APtCM
H9sXtCH
H!|$@H
q:Pt2
qcV<K
@USVWATAVAWH
MXL9&
A_A^A\_^[]
@USVWATAUAVAWH
A_A^A]A\_^[]
UWAVH
UWATAVAWH
fxt6H
D$8E3
\$(A9~(uiD
A_A^A\_]
WAVAWH
A_A^_
@USVWAVH
pA^_^[]
UATAUAVAWH
A_A^A]A\]
H;7t&H
8Y@u@H
8Y@u@H
x ATAVAWH
0A_A^A\
UVWATAUAVAWH
fD9,Hu
8{u)f
xJ}u"H
p`VTU
0A_A^A]A\_^]
8YXuBH
8YHuBH
8YHuBH
8YHuBH
l$ VWAVH
8H!(H
H!l$@
 A^_^
UVWAVAWH
)D$0H
@A_A^_^]
l$ VWAVH
8H!(H
H!l$@
 A^_^
UVWATAUAVAWH
)t$PE
(t$PH
`A_A^A]A\_^]
UVWATAUAVAWH
0A_A^A]A\_^]
WAVAWH
 A_A^_
)D$0f
x AVH
UVWAVAWH
0A_A^_^]
t$ WAVAWH
 A_A^_
x AVH
x-A86t
VWAVH
 A^_^
UVWATAUAVAWH
 A_A^A]A\_^]
WAVAWH
uhD+p
}`H9~`tCH
H9]PtMH
H9}XtRH
 A_A^_
t$ WH
\$8H9YX
u(H9W`tKH
` AUAVAWH
L9l$8t
@A_A^A]
@USVWAVH
p3QXI
p3QXI
p3QXI
p3QXI
A^_^[]
UVWATAUAVAWH
t$HE3
fF9<vu
D$HE3
A_A^A]A\_^]
H9l$Pu4
t$ WH
@USVWATAVAWH
D$@E3
D$ E3
fD9$Au
A_A^A\_^[]
@SUVWATAVAWH
A_A^A\_^][
@SUVWAVAWH
A_A^_^][
@SUVWAVH
D$ I!.
H!l$0H
A^_^][
@USVWATAUAVAWH
D$@E3
L$8E3
pa\:3
A_A^A]A\_^[]
@USVWATAUAVAWH
A_A^A]A\_^[]
\$ UVWATAUAVAWH
fD94{u
L$XH3
`A_A^A]A\_^]
p WATAUAVAWH
 A_A^A]A\_
@USVWATAUAVAWH
A_A^A]A\_^[]
9\$hv
!\$(H!\$ A
Lc|$@A
VWATAVAWH
 A_A^A\_^
UVWATAUAVAWH
A_A^A]A\_^]
t$ WATAUAVAWH
 A_A^A]A\_
VWAVH
fD90t
 A^_^
t$ WATAUAVAWH
 A_A^A]A\_
t$ WAVAWH
t$@D;
|$@~>
 A_A^_
WATAUAVAWH
0A_A^A]A\_
WAVAWH
H;/t&H
0A_A^_
8Y@u@H
8Y@u@H
qbUTf&
UVWATAUAVAWH
@A_A^A]A\_^]
qcUZj
WAVAWH
D;}(r
 A_A^_
UVWATAUAVAWH
9~(v3H
D;~(r
0A_A^A]A\_^]
t$ WATAUAVAWH
D;e(r
L$pE3
0A_A^A]A\_
t$ WAVAWH
0A_A^_
UVWATAUAVAWH
!t$pM
]HH!t$ H
A9u0t3H
A9u0tQ3
D$pA;
0A_A^A]A\_^]
VWATAVAWH
0A_A^A\_^
UATAUAVAWH
A_A^A]A\]
l$ VWAVH
8H!(H
H!l$@
 A^_^
qyX^o
UVWAVAWH
)D$0H
@A_A^_^]
l$ VWAVH
8H!(H
H!l$@
 A^_^
UVWATAUAVAWH
)t$PE
(t$PH
`A_A^A]A\_^]
pyX^o
UVWATAUAVAWH
0A_A^A]A\_^]
WAVAWH
 A_A^_
)D$0f
x AVH
VWATAVAWH
~(D;~(v
0A_A^A\_^
UATAUAVAWH
M0H9M
0A_A^A]A\]
9O4t^
UVWATAUAVAWH
~(D8n8tCI
D$X9F4tj
D9/v,
0A_A^A]A\_^]
t$ WH
EX9G$tV
9N4t^
p AWH
9O4t?A
p AWH
9N4tlA
UVWAVAWH
0A_A^_^]
t$ WAVAWH
 A_A^_
x AVH
x-A86t
VWAVH
 A^_^
UVWATAUAVAWH
 A_A^A]A\_^]
WAVAWH
uhD+p
}`H9~`tCH
H9]PtMH
H9}XtRH
 A_A^_
t$ WH
\$8H9YX
u(H9W`tKH
UVWATAWH
@A_A\_^]
x AVH
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WAVAWH
 A_A^_
t$ WAVAWH
phY6j
0A_A^_
UATAUAVAWH
phY6j
D8uHu1H
A_A^A]A\]
l$ VWAVH
8H!(H
H!l$@
 A^_^
UVWAVAWH
)D$0H
@A_A^_^]
l$ VWAVH
8H!(H
H!l$@
 A^_^
qy]~g
UVWATAUAVAWH
)t$PE
(t$PH
`A_A^A]A\_^]
l$ VWAVH
8H!(H
H!l$@
 A^_^
VWAVH
 A^_^
l$ VWAVH
8H!(H
H!l$@
 A^_^
UVWATAUAVAWH
0A_A^A]A\_^]
UVWATAUAVAWH
0A_A^A]A\_^]
WAVAWH
 A_A^_
UVWATAUAVAWH
0A_A^A]A\_^]
WAVAWH
 A_A^_
)D$0f
x AVH
WAVAWH
 A_A^_
uSH9C
UVWAVAWH
0A_A^_^]
t$ WAVAWH
 A_A^_
x AVH
x-A86t
VWAVH
D$@8AmtZ@2
 A^_^
t$ WAVAWH
 A_A^_
x AVH
x-A86t
VWAVH
 A^_^
UVWATAUAVAWH
 A_A^A]A\_^]
UVWATAUAVAWH
 A_A^A]A\_^]
WAVAWH
uhD+p
}`H9~`tCH
H9]PtMH
H9}XtRH
 A_A^_
WAVAWH
uhD+p
}`H9~`tCH
H9]PtMH
H9}XtRH
 A_A^_
t$ WH
\$8H9YX
t$ WH
\$8H9YX
u(H9W`tKH
u(H9W`tKH
q)X<I
@USVWAVH
H9QHtCH
H9~ptCH
@A^_^[]
t$ WH
qQPpf
\$ UVWH
(D$ H
WAVAWH
A9>t*
0A_A^_
VWATAVAWH
s H;s
 A_A^A\_^
|$ UH
pB^Xh
x AVH
WAVAWH
0A_A^_
qyVpv
UATAUAVAWH
A_A^A]A\]
x AVH
YpA'=
t$ WH
x AVH
H;7t&H
UATAUAVAWH
A_A^A]A\]
CX!C`H
8YQu@H
8YQuBH
8YAuBH
q`VTU
WATAUAVAWH
\$ E3
A_A^A]A\_
8YHu@H
H!\$PH
VWAVH
L$hH3
pA^_^
8Y8uBH
8Y8uBH
qB^Xh
UATAUAVAWH
A_A^A]A\]
UATAUAVAWH
A_A^A]A\]
x AUAVI
|$0A^A]
x AVH
tDH9sHt>H
H9_8tCH
t$ UWATAVAWH
A_A^A\_]
t$ UWAVH
T$XE3
D$`E3
VWAVH
0A^_^
\$ WH
h VWATAVAWH
0A_A^A\_^
SUVWAWH
D$ E3
@A__^][
UVWATAUAVAWH
fD9<yu
fE9<vu
D$ E3
A_A^A]A\_^]
UVWATAUAVAWH
fD9,Pu
fD9lE
fD9,Nu
0A_A^A]A\_^]
UATAUAVAWH
A_A^A]A\]
t$ WH
D$0E3
D$XE3
L$hH3
UATAUAVAWH
8E8t*H
D$0E3
D9m8tdH
A_A^A]A\]
UVWATAUAVAWH
pA_A^A]A\_^]
UAVAWH
A_A^]
UVWATAUAVAWH
`A_A^A]A\_^]
UATAUAVAWH
A_A^A]A\]
UVWATAUAVAWH
D$0E3
pA_A^A]A\_^]
@USVWATAVAWH
@A_A^A\_^[]
UVWATAUAVAWH
pkVvt
D8|$pu|
p+WV]
D8|$pu*
pjSt=
pjTxM
pBXr>
D!|$@I
L!|$8H
pjTxM
A_A^A]A\_^]
UWATAVAWH
fD9 t
fD9 t
A_A^A\_]
UATAUAVAWH
D8mPt*H
A_A^A]A\]
` UAVAWH
pjP|t
@A_A^]
` UAVAWH
@A_A^]
t$ UWATAVAWH
fD9$xu
A_A^A\_]
@USVWATAVAWH
fD9 t
PA_A^A\_^[]
t$HE3
D$ E3
|$ UH
UWAVH
UWAVH
UATAUAVAWH
A_A^A]A\]
UVWAVAWH
@A_A^_^]
\$ UVWAVAWH
@A_A^_^]
UVWATAUAVAWH
T$HE3
A_A^A]A\_^]
pHT<m
@USVWATAVAWH
E9&u'
`A_A^A\_^[]
UVWATAUAVAWH
D$(E3
D$(E3
|$(E3
A_A^A]A\_^]
UWATAUAVH
H9}PtIH
D$ 0u
A^A]A\_]
D$(E3
VWAVH
0A^_^
UATAUAVAWH
A_A^A]A\]
UATAUAVAWH
A_A^A]A\]
@USVWAVAWH
D9}8t-H
D9}8udH
D9}8u
D9}8u
HA_A^_^[]
t$ WH
D#L$0D
3D$8%x
WAVAWH
D;}(r
 A_A^_
UVWATAUAVAWH
9~(v3H
D;~(r
0A_A^A]A\_^]
t$ WATAUAVAWH
D;e(r
L$pE3
0A_A^A]A\_
t$ WAVAWH
0A_A^_
UVWATAUAVAWH
!t$pM
]HH!t$ H
A9u0t3H
A9u0tQ3
D$pA;
0A_A^A]A\_^]
q2Q<7
VWATAVAWH
0A_A^A\_^
VWATAVAWH
~(D;~(v
0A_A^A\_^
UATAUAVAWH
M0H9M
0A_A^A]A\]
9O4t^
UVWATAUAVAWH
~(D8n8tCI
D$X9F4tj
D9/v,
0A_A^A]A\_^]
t$ WH
EX9G$tV
9N4t^
p AWH
9O4t?A
p AWH
9N4tlA
USVWAVH
@A^_^[]
q2Q<7
x AVH
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WAVAWH
 A_A^_
H;3t%H
H;3t%H
p AWH
@SUVWATAUAVAW
A_A^A]A\_^][
|$ AVH
x AVH
x AVH
UVWATAUAVAW
D$PH;
A_A^A]A\_^]
H!Y A
L$XH3
x AVH
UVWATAUAVAWH
fG9,Hu
fG9,Hu
tufE9(t0fA
fG9,Hu
t2fE9(t,fA
fG9,Hu
A_A^A]A\_^]
8L$PH
fG9,Hu
fG9,Hu
x AVH
fA9,@u
@SUVWATAUAVAWH
D8o8t/H
fD9l$@t
fD9,Bu
|$0E3
tafD9.t[
A_A^A]A\_^][
|$ UATAUAVAWH
A_A^A]A\]
T$`E3
x UATAUAVAWH
D$ E3
t$(E3
L$xE3
A_A^A]A\]
@SUVWATAVAWH
A_A^A\_^][
UWAVH
L$PfD
{ ATAVAWH
0A_A^A\
WAVAWH
D$ E3
@A_A^_
WAVAWH
fD9|]
@A_A^_
WAVAWH
fD9<_u
@A_A^_
t$XE3
|$ AVH
t$ WATAUAVAWH
A_A^A]A\_
H!\$ E3
{ ATAVAWH
T$pE3
0A_A^A\
WAVAWH
0A_A^_
@USVWATAUAVAWH
D$XE3
D$(E3
D$XE3
T$hE3
L$PH!\$xH
D$XE3
T$xE3
L$XE3
D9|$`u
L$XE3
D9|$`u
A_A^A]A\_^[]
q0R^G'
ATAVAWH
p0R^G'
 A_A^A\
q:_0#
VWAVH
\$ E3
D$HE3
LcA<E3
HcQ<H
\$ UH
 H3E H3E
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
E(=csm
E8=csm
EH=csm
EX=csm
Eh=csm
Ex=csm
api-ms-win-core-winrt-error-l1-1-0.dll
api-ms-win-core-winrt-string-l1-1-0.dll
api-ms-win-shcore-taskpool-l1-1-0.dll
api-ms-win-shcore-stream-l1-1-0.dll
twinapi.appcore.dll
api-ms-win-core-com-l1-1-0.dll
RPCRT4.dll
api-ms-win-core-winrt-error-l1-1-1.dll
api-ms-win-core-winrt-l1-1-0.dll
api-ms-win-core-com-l1-1-1.dll
api-ms-win-security-sddl-l1-1-0.dll
Cabinet.dll
api-ms-win-shcore-stream-winrt-l1-1-0.dll
wevtapi.dll
Fext-ms-win-appmodel-state-ext-l1-2-0.dll
ext-ms-win-kernel32-package-l1-1-0.dll
CRYPTSP.dll
ext-ms-win-core-licensemanager-l1-1-0
ext-ms-win-core-licensemanager-l1-1-1
ext-ms-win-core-licensemanager-l1-1-2
ext-ms-win-core-licensemanager-l1-1-0.dll
ext-ms-win-core-licensemanager-l1-1-2.dll
ext-ms-win-devmgmt-policy-l1-1-0
ext-ms-win-devmgmt-policy-l1-1-1
ext-ms-win-devmgmt-policy-l1-1-2
ext-ms-win-devmgmt-policy-l1-1-3
ext-ms-win-devmgmt-policy-l1-1-0.dll
ext-ms-win-ntuser-keyboard-l1-3-0.dll
ext-ms-win-ntuser-keyboard-l1-1-0.dll
ext-ms-win-rtcore-ntuser-window-ext-l1-1-0.dll
ext-ms-win-session-usermgr-l1-1-0
ext-ms-win-session-usermgr-l1-2-0
ext-ms-win-session-usermgr-l1-1-0.dll
api-ms-win-eventing-legacy-l1-1-0.dll
api-ms-win-security-capability-l1-1-0.dll
api-ms-win-appmodel-runtime-l1-1-1.dll
api-ms-win-appmodel-runtime-l1-1-0.dll
iertutil.dll
WINHTTP.dll
webservices.dll
ntdll.dll
EtwEventRegister
EtwEventUnregister
EtwEventEnabled
EtwEventWrite
Windows.Services.Store.Internal.StoreContextServer
Windows.Services.Store.StoreAvailability
Windows.Foundation.Diagnostics.AsyncCausalityTracer
Windows.Security.Authentication.Web.Core.WebTokenRequest
Windows.Services.Store.Internal.StoreContentIdKeyIdResponse
Windows.Storage.Streams.DataReader
Windows.Services.Store.StoreImage
Windows.UI.Core.CoreWindow
Windows.Storage.Streams.RandomAccessStreamReference
Windows.ApplicationModel.Store.ProductLicense
Windows.Management.Deployment.PackageManager
Windows.System.UserProfile.GlobalizationPreferences
Windows.Services.Store.StoreSku
&OL0O
Windows.Security.Cryptography.CryptographicBuffer
Windows.ApplicationModel.Store.Preview.StoreConfiguration
Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager
Windows.Services.Store.StorePackageLicense
Windows.Foundation.Uri
Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties
Windows.ApplicationModel.Core.CoreApplication
Windows.Web.Http.HttpRequestMessage
Windows.ApplicationModel.AppService.AppServiceConnection
Windows.Services.Store.Internal.StoreContextCallerData
Windows.Web.Http.HttpMethod
Windows.Services.Store.StoreContext
Windows.ApplicationModel.Store.Preview.StorePreview
Windows.Security.Authentication.OnlineId.OnlineIdServiceTicketRequest
Windows.Data.Xml.Dom.XmlDocument
Windows.Services.Store.StoreSendRequestResult
,a$Cs
Windows.Services.Store.StoreAppLicense
Windows.Services.Store.StoreAcquireLicenseResult
Windows.Services.Store.StoreProductPagedQueryResult
Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo
Windows.Services.Store.StorePackageUpdateResult
Windows.Internal.Security.Authentication.Web.TokenBrokerInternal
Windows.UI.Popups.UICommand
Windows.Services.Store.StoreRateAndReviewResult
Windows.Globalization.NumberFormatting.CurrencyFormatter
Windows.Services.Store.Internal.StoreContentIdKeyIdItem
Windows.Services.Store.StoreQueueItemStatus
Windows.Services.Store.StoreQueueItem
Windows.ApplicationModel.Store.CurrentApp
Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager
Windows.ApplicationModel.Store.Preview.StoreHardwareManufacturerInfo
Windows.Services.Store.StoreCollectionData
Windows.Foundation.Collections.ValueSet
Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo
Windows.Networking.Connectivity.NetworkInformation
Windows.Data.Json.JsonValue
Windows.Web.Http.HttpStringContent
Windows.ApplicationModel.Store.PurchaseResults
Windows.ApplicationModel.Store.Internal.AuthenticationExtension
Uo~9@D
Windows.ApplicationModel.Store.ProductListing
Windows.Web.Http.Filters.HttpBaseProtocolFilter
Windows.Services.Store.StoreProductResult
Windows.Internal.Security.WebAuthentication.AuthenticationManager
3SVmn
Windows.ApplicationModel.Store.ListingInformation
Windows.ApplicationModel.Store.Internal.StoreCommerce
Windows.Data.Json.JsonObject
X~{TR
Windows.Services.Store.StoreSubscriptionInfo
Windows.Foundation.PropertyValue
Windows.Web.Http.HttpClient
Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper
Windows.Services.Store.StoreUninstallStorePackageResult
Windows.Services.Store.StoreQueueItemCompletedEventArgs
Windows.Services.Store.StorePurchaseProperties
Windows.ApplicationModel.Store.UnfulfilledConsumable
Windows.Services.Store.StorePackageInstallOptions
Windows.Services.Store.StoreVideo
Windows.Services.Store.StoreProductQueryResult
Windows.Data.Json.JsonArray
Windows.Services.Store.Internal.GetNextStoreProductOperation
Windows.Services.Store.StoreProduct
Windows.Services.Store.StoreLicense
Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults
Windows.Services.Store.StoreProductOptions
Windows.Services.Store.StorePackageUpdate
Windows.Services.Store.StorePrice
Windows.Services.Store.StorePurchaseResult
Windows.Services.Store.StoreConsumableResult
Windows.Services.Store.StoreRequestHelper
Windows.System.Internal.UserManager
(QD)Qj
Windows.ApplicationModel.Store.LicenseInformation
JTk_S/
Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions
Windows.Services.Store.StoreCanAcquireLicenseResult
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult
Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager
Exception
ReturnNt
ReturnHr
LogNt
LogHr
FailFast
%hs(%u)\%hs!%p: 
%hs!%p: 
(caller: %p) 
%hs(%d) tid(%x) %08X %ws
Msg:[%ws] 
CallContext:[%hs] 
[%hs(%hs)]
[%hs]
kernelbase.dll
RaiseFailFastException
onecore\internal\sdk\inc\wil\opensource\wil\resource.h
WilError_03
RtlNtStatusToDosErrorNoTeb
RtlDllShutdownInProgress
RtlDisownModuleHeapAllocation
WilFailureNotifyWatchers
Local\SM0:%lu:%lu:%hs
activatibleClassId
UNKWN
ERROR
 WARN
 info
     
Failed
Assert (%s): %s
LogSimpleMessage
onecoreuap\enduser\winstore\licensing\winrt\dllsrv\windows\log.cpp
%s%hs:%ws
(0x%08x)
[%hs]
%s%hs:%ws
[%hs]
%s%hs:%ws
(0x%08x)
%s%hs:%ws
(QD)Qj
&_*q<|
3SVmn
X~{TR
AsyncOperationCompletedHandler`1<String>
IAsyncOperation`1<String>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.ListingInformation>
IAsyncOperation`1<Windows.ApplicationModel.Store.ListingInformation>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.FulfillmentResult>
IAsyncOperation`1<Windows.ApplicationModel.Store.FulfillmentResult>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.PurchaseResults>
IAsyncOperation`1<Windows.ApplicationModel.Store.PurchaseResults>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
AsyncOperationCompletedHandler`1<Boolean>
IAsyncOperation`1<Boolean>
AsyncOperationCompletedHandler`1<Windows.UI.Popups.IUICommand>
IAsyncOperation`1<Windows.UI.Popups.IUICommand>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
AsyncOperationProgressHandler`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
AsyncOperationWithProgressCompletedHandler`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
IAsyncOperationWithProgress`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
Windows.ApplicationModel.Store.Internal.IMessageDialogHelper2.ShowDialogWithResultsAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.LoadListingInformationAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.GetAppReceiptAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.GetProductReceiptAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.GetAppPurchaseCampaignIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce2.GetCustomerPurchaseIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce2.GetCustomerCollectionsIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommercePreview.RequestProductPurchaseByProductIdAndSkuIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommercePreview.LoadAddOnProductInfosAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulator.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulator.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulator.LoadListingInformationAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.Internal.AuthenticationExtension.ShowChallengeForUserAsync
Windows.Services.Store.Internal.IStoreContextServer.GetAppAndOptionalStorePackageUpdatesAsync
Windows.Services.Store.Internal.IStoreContextServer.RequestDownloadStorePackageUpdatesAsync
Windows.Services.Store.Internal.IStoreContextServer.RequestDownloadAndInstallStorePackageUpdatesAsync
Windows.Services.Store.Internal.IStoreContextServer.RequestDownloadAndInstallStorePackagesAsync
Windows
X~{TR
IAsyncOperationWithProgress`2
AsyncOperationWithProgressCompletedHandler`2
AsyncOperationCompletedHandler`1
AsyncOperationProgressHandler`2
&_*q<|
 IAsyncAction
Foundation
IAsyncOperation`1
/Z*Px
/Z8@b
&_*q<|
X~{TR
/ZxqL
~/ZxqL
X~{TR
AsyncActionCompletedHandler
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
IAsyncOperation`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager.AddLicenseAsync
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager.GetSatisfactionInfosAsync
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager.RefreshLicensesAsync
/ZsOg<
/ZsOg<
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
AsyncOperationCompletedHandler`1<Windows.Storage.Streams.IRandomAccessStreamReference>
IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStreamReference>
AsyncOperationCompletedHandler`1<Windows.Security.Authentication.Web.Core.WebTokenRequestResult>
IAsyncOperation`1<Windows.Security.Authentication.Web.Core.WebTokenRequestResult>
Windows.ApplicationModel.Store.Preview.StorePreview.RequestProductPurchaseByProductIdAndSkuIdAsync
Windows.ApplicationModel.Store.Preview.StorePreview.LoadAddOnProductInfosAsync
Windows.ApplicationModel.Store.Preview.StoreConfiguration.FilterUnsupportedSystemFeaturesAsync
Windows.ApplicationModel.Store.Preview.StoreConfiguration.GetStoreLogDataAsync
Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper.RequestTokenWithUIElementHostingAsync
Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper.RequestTokenWithUIElementHostingAndWebAccountAsync
/Z-[E
1/Zfj
d/Zc1q
/ZhM{
/ZhM{
UY7i*
,a$Cs
<??YzU
Windows.ApplicationModel.Store.CurrentApp.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.CurrentApp.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.CurrentApp.LoadListingInformationAsync
Windows.ApplicationModel.Store.CurrentApp.GetAppReceiptAsync
Windows.ApplicationModel.Store.CurrentApp.GetProductReceiptAsync
Windows.ApplicationModel.Store.CurrentApp.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.CurrentApp.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.CurrentApp.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.CurrentApp.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.CurrentApp.GetAppPurchaseCampaignIdAsync
Windows.ApplicationModel.Store.CurrentApp.GetCustomerPurchaseIdAsync
Windows.ApplicationModel.Store.CurrentApp.GetCustomerCollectionsIdAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.LoadListingInformationAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetAppReceiptAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetProductReceiptAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.ReloadSimulatorAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetAppPurchaseCampaignIdAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetUnfulfilledConsumablesAsync
<??YzU
<??YzU
/ZeOC
/Z7i*
/ZW^6
/ZW^6
/ZeOC
/ZW^6
Ylp)d_
Fsq^V
&OL0O
e/X4V
Uo~9@D
!*WPq
iR{I<
q}X>N
I'ae#
4-RZKD[
AsyncOperationCompletedHandler`1<Windows.Services.Store.StorePurchaseResult>
IAsyncOperation`1<Windows.Services.Store.StorePurchaseResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductResult>
IAsyncOperation`1<Windows.Services.Store.StoreProductResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
IAsyncOperation`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductQueryResult>
IAsyncOperation`1<Windows.Services.Store.StoreProductQueryResult>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreUninstallStorePackageResult>
IAsyncOperation`1<Windows.Services.Store.StoreUninstallStorePackageResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreRateAndReviewResult>
IAsyncOperation`1<Windows.Services.Store.StoreRateAndReviewResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAppLicense>
IAsyncOperation`1<Windows.Services.Store.StoreAppLicense>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductPagedQueryResult>
IAsyncOperation`1<Windows.Services.Store.StoreProductPagedQueryResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreConsumableResult>
IAsyncOperation`1<Windows.Services.Store.StoreConsumableResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAcquireLicenseResult>
IAsyncOperation`1<Windows.Services.Store.StoreAcquireLicenseResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreSendRequestResult>
IAsyncOperation`1<Windows.Services.Store.StoreSendRequestResult>
Windows.Services.Store.StoreProductPagedQueryResult.GetNextAsync
Windows.Services.Store.StoreProduct.GetIsAnySkuInstalledAsync
Windows.Services.Store.StoreProduct.RequestPurchaseAsync
Windows.Services.Store.StoreProduct.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreSku.GetIsInstalledAsync
Windows.Services.Store.StoreSku.RequestPurchaseAsync
Windows.Services.Store.StoreSku.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreAvailability.RequestPurchaseAsync
Windows.Services.Store.StoreAvailability.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreRequestHelper.SendRequestAsync
Windows.Services.Store.StoreContext.GetCustomerPurchaseIdAsync
Windows.Services.Store.StoreContext.GetCustomerCollectionsIdAsync
Windows.Services.Store.StoreContext.GetAppLicenseAsync
Windows.Services.Store.StoreContext.GetStoreProductForCurrentAppAsync
Windows.Services.Store.StoreContext.GetStoreProductsAsync
Windows.Services.Store.StoreContext.GetAssociatedStoreProductsAsync
Windows.Services.Store.StoreContext.GetAssociatedStoreProductsWithPagingAsync
Windows.Services.Store.StoreContext.GetUserCollectionAsync
Windows.Services.Store.StoreContext.GetUserCollectionWithPagingAsync
Windows.Services.Store.StoreContext.ReportConsumableFulfillmentAsync
Windows.Services.Store.StoreContext.GetConsumableBalanceRemainingAsync
Windows.Services.Store.StoreContext.AcquireStoreLicenseForOptionalPackageAsync
Windows.Services.Store.StoreContext.RequestPurchaseAsync
Windows.Services.Store.StoreContext.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreContext.GetAppAndOptionalStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.RequestDownloadStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.RequestDownloadAndInstallStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.RequestDownloadAndInstallStorePackagesAsync
Windows.Services.Store.StoreContext.FindStoreProductForPackageAsync
Windows.Services.Store.StoreContext.TrySilentDownloadStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.TrySilentDownloadAndInstallStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.CanAcquireStoreLicenseForOptionalPackageAsync
Windows.Services.Store.StoreContext.CanAcquireStoreLicenseAsync
Windows.Services.Store.StoreContext.GetStoreProductsWithOptionsAsync
Windows.Services.Store.StoreContext.GetAssociatedStoreQueueItemsAsync
Windows.Services.Store.StoreContext.GetStoreQueueItemsAsync
Windows.Services.Store.StoreContext.RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync
Windows.Services.Store.StoreContext.DownloadAndInstallStorePackagesAsync
Windows.Services.Store.StoreContext.RequestUninstallStorePackageAsync
Windows.Services.Store.StoreContext.RequestUninstallStorePackageByStoreIdAsync
Windows.Services.Store.StoreContext.UninstallStorePackageAsync
Windows.Services.Store.StoreContext.UninstallStorePackageByStoreIdAsync
Windows.Services.Store.StoreContext.RequestRateAndReviewAppAsync
Windows.Services.Store.StoreContext.SetInstallOrderForAssociatedStoreQueueItemsAsync
Windows.Services.Store.StoreQueueItem.CancelInstallAsync
Windows.Services.Store.StoreQueueItem.PauseInstallAsync
Windows.Services.Store.StoreQueueItem.ResumeInstallAsync
%*%P%v%
-<-b-
!*WPq
4>4v4
4&5R5~5
6(6N6
!^ B!h!$
 R"x"
#6#\#
 8 ^ 
3B3h3
l$j'$
:.:T:z:
-&.L.~.
../Z/
/"0N0z0
0*1V1$
/ZUo~9@D
&OL0O
e/X4V
/ZW^6
/ZW^6
/ZsOg
_s/Z{I<
C3R/Z
-/Z3l
/Z{I<
P/Z/y<
!*WPq
/Z}7F
`/ZQl
/Z/y<
sW/Zl
q}X>N
Ylp)d_
/Z/y<
Uo~9@D
&OL0O
e/X4V
/ZsOg
+6+\+
6(8N8z8
q}X>N
Ylp)d_
FRtlQueryFeatureConfiguration
RtlRegisterFeatureConfigurationChangeNotification
RtlUnregisterFeatureConfigurationChangeNotification
RtlNotifyFeatureUsage
LogStagedFeatureUsage
NtQueryWnfStateData
NtUpdateWnfStateData
onecore\internal\sdk\inc\wil\Staging.h
WilStaging_02
previewStore
storeConfiguration
storeOptionalPackageInstallManagement
UnmanagedConsumable
Consumable
https://
entitlementId
expiration
packageIdentifier
packageType
SellableBy
addOnParent
__tag
string
number
object
array
goldenBeneficiary
beneficiaryArray
goldenBeneficiaryArray
Products
ChkHr(JsonParser::ParseJSONStringToObject( productJsonString, &results, getProductsByKindsResultsTable))
_ParseGetProductsByKinds
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storecontextserver.cpp
ChkHr(GetActivationFactory( NetworkingConnectivityNetworkInformation.Get(), &netInfoStatics))
_IsNetworkMetered
ChkHr(netInfoStatics->GetInternetConnectionProfile(&connectionProfile))
There is no connection profile
ChkHr(connectionProfile->GetConnectionCost(&cost))
ChkHr(cost->get_NetworkCostType(&costType))
ChkHr(cost->get_Roaming(&isRoaming))
ChkHr(pStorePackageUpdates->First(&updateIterator))
_AreAllDownloadsComplete
ChkHr(updateIterator->get_HasCurrent(&hasCurrent))
ChkHr(updateIterator->get_Current(&update))
ChkHr(update.As(&updatePrivate))
ChkHr(updatePrivate->get_StoreQueueItem(&storeQueueItem))
ChkHr(storeQueueItem->GetCurrentStatus(&installStatus))
ChkHr(installStatus->get_PackageInstallExtendedState(&extendedState))
ChkHr(updateIterator->MoveNext(&hasCurrent))
ChkHr(JsonHelpers::CreateJsonObject(&beneficiary))
_BuildBeneficiaryJSON
identityValue
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"identityValue", ::WindowsGetStringRawBuffer(token, nullptr)))
localTicketReference
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"localTicketReference", ::WindowsGetStringRawBuffer(accountId, nullptr)))
identityType
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"identityType", L"Msa"))
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"identityType", L"Aad"))
ChkHr(((HRESULT)0x803F610BL))
ChkHr(WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicket( 0, WinStoreAuth::AuthenticationEndpoint::OneStore, WinStoreAuth::PromptType::Silent, WinStoreAuth::AuthenticationInternal::UseXToken(), user.Get(), authTicket.GetAddressOf(), providerType, spPrimaryAccountTokenRequestResult.GetAddressOf()))
_BuildGoldenBeneficiaryJSON
ChkHr(_BuildBeneficiaryJSON(providerType, authTicket.Get(), DefaultWebAccountIdString.Get(), jsonBeneficiary))
ChkHr(ClientProcessUtils::GetSidForUser(user.Get(), userSid.GetAddressOf()))
_BuildBeneficiaryArrayJSON
ChkHr(JsonHelpers::CreateJsonObject(&userAuth))
ChkHr(JsonHelpers::CreateJsonArray(&authTokensArray))
ChkHr(JsonHelpers::SetNamedArray(userAuth, userSid.GetRawBuffer(nullptr), authTokensArray))
ChkHr(CoSwitchCallContext(nullptr, &pOldCtx))
ChkHr(CoSwitchCallContext(pOldCtx, &pTmpCtx))
ChkHr(hrGetAllAccounts)
ChkHr(_BuildBeneficiaryJSON( tickets[index].m_providerType, tickets[index].m_ticket.Get(), tickets[index].m_webAccountId.Get(), jsonBeneficiary))
ChkHr(JsonHelpers::AppendObject(authTokensArray, jsonBeneficiary))
ChkHr(userAuth->GetNamedArray(userSid.Get(), &jsonBeneficiaries))
ChkHr(JsonHelpers::CreateJsonArray(&jsonBeneficiaries))
_BuildGoldenBeneficiaryArrayJSON
ChkHr(_BuildGoldenBeneficiaryJSON(user, beneficiary))
ChkHr(JsonHelpers::AppendObject(jsonBeneficiaries, beneficiary))
ChkHr(jsonValue->get_ValueType(&valueType))
ChkHr(jsonValue->GetString(value.GetAddressOf()))
ChkHr(jsonValue->GetObjectW(&childObject))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductId", currentProductId.GetAddressOf()))
_ShouldFilterByRelationship
MarketProperties
ChkHr(JsonHelpers::GetNamedArray(product, L"MarketProperties", &marketProperties))
ChkHr(marketProperties->GetObjectAt(0, &marketProperty))
RelatedProducts
ChkHr(JsonHelpers::GetNamedArray(marketProperty, L"RelatedProducts", &relatedProducts))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(relatedProducts, &relatedProductsSize))
ChkHr(relatedProducts->GetObjectAt(relatedIndex, &relatedProduct))
RelationshipType
ChkHr(JsonHelpers::GetNamedString(relatedProduct, L"RelationshipType", type.GetAddressOf()))
RelatedProductId
ChkHr(JsonHelpers::GetNamedString(relatedProduct, L"RelatedProductId", relatedProductId.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(jsonBodyString.GetRawBuffer(nullptr), &jsonResult))
_FilterProductsJson
ChkHr(JsonHelpers::GetNamedArray(jsonResult, L"Products", &products))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(products, &productsSize))
ChkHr(products->GetObjectAt(static_cast<UINT32>(index), &product))
ChkHr(_ShouldFilterByRelationship(product, relationshipType, parentProductId, &remove))
ChkHr(JsonHelpers::RemoveAt(products, static_cast<UINT32>(index)))
ChkHr(JsonHelpers::Stringify(jsonResult, jsonBodyString.GetAddressOf()))
ChkHr(jsonInput.As(&jsonObjectIterable))
_ConstructRequestBody
ChkHr(jsonValue->GetArray(jsonArray.GetAddressOf()))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(jsonArray, &count))
ChkHr(jsonArray->GetObjectAt(i, jsonElement.GetAddressOf()))
ChkHr(_ConstructRequestBody(jsonElement, user, accountProviderType, promptType, hwnd, forceRetailSandbox, jsonParameters))
ChkAlloc(tag)
ChkHr(currentPair->get_Key(tag->destinationKey.GetAddressOf()))
isOptional
defaultValue
ChkHr(JsonParser::ParseJSONToObject( childObject, tag, responseTable))
ChkHr(_ConstructRequestBody(childObject, user, accountProviderType, promptType, hwnd, forceRetailSandbox, jsonParameters))
ChkHr(jsonSubstitutionList->destinationKey.CopyTo(jsonSubstitutionList->sourceKey.GetAddressOf()))
ChkHr(_BuildGoldenBeneficiaryJSON(user, jsonBeneficiary))
ChkHr(JsonHelpers::SetNamedObject(jsonParameters, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), jsonBeneficiary))
ChkHr(_BuildBeneficiaryArrayJSON(user, accountProviderType, promptType, hwnd, forceRetailSandbox, jsonBeneficiaries))
ChkHr(JsonHelpers::SetNamedArray(jsonParameters, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), jsonBeneficiaries))
ChkHr(_BuildGoldenBeneficiaryArrayJSON(user, jsonBeneficiaries))
ChkHr(jsonSubstitutionList->defaultValue->get_ValueType(&defaultValueType))
ChkHr(jsonSubstitutionList->defaultValue->Stringify(defaultValueString.GetAddressOf()))
Failed to find substitute value with key %s and no default value provided.
ChkHr(jsonInput->SetNamedValue(jsonSubstitutionList->destinationKey.Get(), jsonSubstitutionList->defaultValue.Get()))
ChkHr(substituteValue->GetArray(&substituteArray))
ChkHr(JsonHelpers::SetNamedArray(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteArray))
ChkHr(substituteValue->GetObjectW(&substituteObject))
ChkHr(JsonHelpers::SetNamedObject(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteObject))
ChkHr(substituteValue->GetNumber(&substituteNumber))
ChkHr(JsonHelpers::SetNamedNumber(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteNumber))
ChkHr(substituteValue->GetString(substituteString.GetAddressOf()))
ChkHr(JsonHelpers::SetNamedString(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteString.Get()))
Failed to substitute value with key %s because we were given an invalid type!
ChkHr(ClientProcessUtils::GetCallingAppPackage(user.Get(), &parentPackage))
_CheckOptionalPackageIsValid
ChkHr(((HRESULT)0x803F6101L))
ChkHr(parentPackage->get_Dependencies(&dependencies))
ChkHr(dependencies->get_Size(&size))
ChkHr(dependencies->GetAt(index, &package))
ChkHr(package.As(&package4))
ChkHr(package4->get_IsOptional(&isOptional))
ChkHr(package->get_Id(&optionalPackageId))
ChkHr(optionalPackageId->get_FullName(packageFullName.GetAddressOf()))
ChkHr(optionalPackageId->get_FamilyName(packageFamilyName.GetAddressOf()))
ChkBool(found, ((HRESULT)0x80070005L))
Found matching package for %s
ChkHr(ClientProcessUtils::CheckMultipleUserSupport(usedMultiUser))
Windows::Services::Store::Internal::StoreContextServer::Initialize
ChkHr(IAPUtils::IsCallingProcessAppContainer(&_isAppContainer))
ChkAlloc(_releaseLicenseTimer)
ChkHr(ClientProcessUtils::GetCallingAppPackageFullName(_packageFullName.GetAddressOf()))
ChkHr(ClientProcessUtils::IsCallerERA(&_isERA))
Developer
Enterprise
Store
System
ClientProcessUtils::GetCallingAppPackage(_user.Get(), package.GetAddressOf())
package.As(&package4)
package4->get_SignatureKind(&signatureKind)
SignatureKind: %hs
ChkHr(CoCreateInstance( __uuidof(ApplicationLicenseManager), nullptr, (CLSCTX_INPROC_SERVER|CLSCTX_LOCAL_SERVER|CLSCTX_REMOTE_SERVER), __uuidof(**(&spLicenseManager)), IID_PPV_ARGS_Helper(&spLicenseManager)))
ChkHr(AsAgile(spLicenseManager.Get(), &_spLicenseManager))
spLicenseInstance->GetContentInfo(IID_PPV_ARGS(&spAppContentInfo))
ChkHr(hrInfo)
ChkHr(spAppContentInfo->GetCatalogId(&productStoreId))
ChkHr(_productStoreId.Set(productStoreId))
ChkHr(((HRESULT) ((RtlQueryWnfStateData( &initialChangeStamp, WNF_LM_CONTENT_LICENSE_CHANGED, _WnfLicenseStateChangeCallback, nullptr, nullptr)) | 0x10000000)))
ChkHr(((HRESULT) ((RtlSubscribeWnfStateChangeNotification( &_wnfLicenseChanged, WNF_LM_CONTENT_LICENSE_CHANGED, initialChangeStamp, _WnfLicenseStateChangeCallback, context, nullptr, 0, 0x00000001UL)) | 0x10000000)))
false
StoreContextServer::Initialize: packageFullName = %s, productStoreId = %s, isLicensed = %s, isAppContainer = %s
ChkHr(_optionalPackageLicenseWatcher.Initialize())
ChkHr(MakeAndInitialize<StoreContextCallerData>(ppCallerData, appWindowHandle))
Windows::Services::Store::Internal::StoreContextServer::CaptureStoreContextCallerData
ChkAlloc(cv.Get())
Windows::Services::Store::Internal::StoreContextServer::SendStoreRequest
ChkHr(JsonHelpers::ParseToJsonObject(WindowsGetStringRawBuffer(jsonDataString, nullptr), jsonData.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( pCallerData, UriHelperV7::StoreEndpointExtensionUrls, requestKind, cv.Get(), jsonData.Get(), statusCode, jsonResponse))
ChkHr(_LoadLicenseJson(spLicenseInstance))
Windows::Services::Store::Internal::StoreContextServer::GetOfflineLicenses
ChkHr(_cachedLicenseJson.CopyTo(result))
Windows::Services::Store::Internal::StoreContextServer::GetProducts
ChkHr(GetProductsByKinds(productKinds, storeIds, nullptr, cv.Get(), CatalogRelationshipType::SellableBy, productJson))
Windows::Services::Store::Internal::StoreContextServer::GetProduct
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetParentProduct, cv.Get(), nullptr, nullptr, productJsonString.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(productJsonString.GetRawBuffer(nullptr), &productResult))
Product
ChkHr(JsonHelpers::GetNamedObject(productResult, L"Product", &product))
ChkHr(JsonHelpers::CreateJsonArray(&products))
ChkHr(JsonHelpers::CreateJsonObject(&newResults))
ChkHr(JsonHelpers::SetNamedArray(newResults.Get(), L"Products", products))
ChkHr(JsonHelpers::Stringify(newResults, productJsonString.GetAddressOf()))
ChkHr(Vector<HSTRING>::Make(&bigIds))
ChkHr(bigIds->Append(_productStoreId.Get()))
SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetUserCollectionForParentProduct, cv.Get(), nullptr, nullptr, collectionsJsonString.GetAddressOf())
ChkHr(IAPUtils::CombineProductsAndCollectionsJson( productJsonString.Get(), collectionsJsonString.Get(), productJson))
ChkHr(productJsonString.CopyTo(productJson))
ChkBool(_productStoreId.IsValid(), ((HRESULT)0x803F6107L))
Windows::Services::Store::Internal::StoreContextServer::GetUserCollection
ChkHr(MakeAndInitialize<GetNextUserCollection>( &currentOperation, this, _productStoreId.Get(), productKinds, nullptr, maxPageSize, _user.Get(), cv.GetAnsi(), nullptr))
ChkHr(currentOperation->GetNextAsync(productJson, nextOperation))
Windows::Services::Store::Internal::StoreContextServer::ConsumeConsumable
ChkHr(Vector<HSTRING>::Make(&productKinds))
ChkHr(productKinds->Append(UnmanagedConsumableKind.Get()))
ChkHr(productKinds->Append(ConsumableKind.Get()))
ChkHr(Vector<HSTRING>::Make(&productIds))
ChkHr(productIds->Append(productId))
ChkHr(GetProductsByKinds( productKinds.Get(), productIds.Get(), nullptr, cv.Get(), CatalogRelationshipType::AddOnParent, productJsonString.GetAddressOf()))
ChkHr(_ParseGetProductsByKinds(productJsonString.Get(), products.GetAddressOf()))
ChkHr(products->get_Size(&productCount))
ChkBool(productCount > 0, HRESULT_FROM_WIN32(1168L))
ChkHr(products->GetAt(0, spStoreProduct.GetAddressOf()))
ChkHr(spStoreProduct->get_ProductKind(productKind.GetAddressOf()))
ChkBool(productKind.IsValid(), HRESULT_FROM_WIN32(1168L))
ChkBool((quantity > 0), ((HRESULT)0x80070057L))
ChkHr(JsonHelpers::CreateJsonObject(&jsonCollectionsParameters))
consumableProductId
ChkHr(JsonHelpers::SetNamedString(jsonCollectionsParameters, L"consumableProductId", productId))
trackingId
ChkHr(JsonHelpers::SetNamedString(jsonCollectionsParameters, L"trackingId", HStringReference(szTrackingId).Get()))
ChkHr(WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicket( 0, WinStoreAuth::AuthenticationEndpoint::OneStore, WinStoreAuth::PromptType::Silent, WinStoreAuth::AuthenticationInternal::UseXToken(), _user.Get(), authTicket.GetAddressOf(), providerType, spPrimaryAccountTokenRequestResult.GetAddressOf()))
quantity
ChkHr(JsonHelpers::SetNamedNumber(jsonCollectionsParameters, L"quantity", quantity))
ChkHr(spStoreProduct->get_IsInUserCollection(&isInUserCollection))
ChkHr(JsonHelpers::CreateJsonObject(&jsonResultObject))
NewQuantity
ChkHr(JsonHelpers::SetNamedNumber(jsonResultObject, L"NewQuantity", isInUserCollection ? 1 : 0))
ChkHr(JsonHelpers::Stringify(jsonResultObject, jsonResult))
ChkHr(((HRESULT)0x803F6109L))
ChkHr(HRESULT_FROM_WIN32(1168L))
ChkHr(JsonHelpers::SetNamedNumber(jsonResultObject, L"NewQuantity", 0))
ChkHr((static_cast<HRESULT>(__hr)))
Windows::Services::Store::Internal::StoreContextServer::GetConsumableBalanceRemaining
ChkHr(JsonHelpers::CreateJsonObject(&jsonCatalogParameters))
ChkHr(StringHelpers::Join( productKinds.Get(), false, productKindsWithCommas.GetAddressOf()))
productIdsWithCommas
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"productIdsWithCommas", productId))
productKinds
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"productKinds", productKindsWithCommas.Get()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetProductsFromParent, cv.Get(), jsonCatalogParameters.Get(), nullptr, productJsonString.GetAddressOf()))
ChkHr(_FilterProductsJson(productJsonString, CatalogRelationshipType::AddOnParent, _productStoreId.Get()))
ChkHr(JsonHelpers::ParseToJsonObject(productJsonString.GetRawBuffer(nullptr), &spResults))
ChkHr(spResults->GetNamedArray(HStringReference(L"Products").Get(), &storeProductArray))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(storeProductArray, &productCount))
ChkHr(storeProductArray->GetObjectAt(0, storeProductJson.GetAddressOf()))
ChkHr(MakeAndInitialize<StoreProduct>(&spStoreProduct,  storeProductJson))
ChkBool(StringHelpers::AreEqualCaseInsensitive(productKind.Get(), ConsumableKind.Get()) || StringHelpers::AreEqualCaseInsensitive(productKind.Get(), UnmanagedConsumableKind.Get()), HRESULT_FROM_WIN32(1168L))
ChkHr(JsonHelpers::CreateJsonArray(&productSkuIds))
ChkHr(JsonHelpers::CreateJsonObject(&productSku))
productId
ChkHr(JsonHelpers::SetNamedString(productSku, L"productId", productId))
ChkHr(JsonHelpers::AppendObject(productSkuIds, productSku))
productSkuIds
ChkHr(JsonHelpers::SetNamedArray(jsonCollectionsParameters, L"productSkuIds", productSkuIds))
ChkHr(IAPUtils::BuildEntitlementFiltersJSON(jsonEntitlementFilters, productKinds.Get()))
entitlementFilters
ChkHr(JsonHelpers::SetNamedArray(jsonCollectionsParameters, L"entitlementFilters", jsonEntitlementFilters))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetUserCollectionForProducts, cv.Get(), jsonCollectionsParameters.Get(), nullptr, jsonResult))
ChkBool((_productStoreId.IsValid() || ClientProcessUtils::IsDataMartApplication()), ((HRESULT)0x803F6107L))
Windows::Services::Store::Internal::StoreContextServer::GetCustomerPurchaseId
ChkHr(JsonHelpers::CreateJsonObject(&jsonParameters))
serviceTicket
ChkHr(JsonHelpers::SetNamedString(jsonParameters, L"serviceTicket", serviceTicket))
publisherUserId
ChkHr(JsonHelpers::SetNamedString(jsonParameters, L"publisherUserId", publisherUserId))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetCustomerPurchaseId, cv.Get(), jsonParameters.Get(), nullptr, jsonResponseString.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(jsonResponseString.GetRawBuffer(nullptr), &jsonResponse))
ChkHr(JsonHelpers::GetNamedString(jsonResponse, L"key", result))
Windows::Services::Store::Internal::StoreContextServer::GetCustomerCollectionsId
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetCustomerCollectionsId, cv.Get(), jsonParameters.Get(), nullptr, jsonResponseString.GetAddressOf()))
Windows::Services::Store::Internal::StoreContextServer::GetAssociatedStoreProducts
ChkHr(MakeAndInitialize<GetNextAssociatedStoreProducts>( &currentOperation, this, _productStoreId.Get(), productKinds, 0, maxItems, true, _user.Get(), cv.GetAnsi(), nullptr ))
ChkHr(currentOperation->GetNextAsync(productJsonResponse, nextOperation))
{idType}
ChkArg(pLinkUri)
Windows::Services::Store::Internal::StoreContextServer::GetLinkUri
ChkHr(UriHelper::GetUri(UriHelper::LinkUriFormat, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), pLinkUri))
ChkArg(pValue)
Windows::Services::Store::Internal::StoreContextServer::IsStoreProductInstalled
ChkBool(!WindowsIsStringEmpty(storeId), ((HRESULT)0x80070057L))
ChkHr(IAPUtils::ParseStoreId( storeId, productId.GetAddressOf(), nullptr, nullptr))
ChkBool(!WindowsIsStringEmpty(productId.Get()), ((HRESULT)0x80070057L))
ChkHr(Vector<HSTRING>::Make(&spIds))
ChkHr(spIds->Append(productId.Get()))
ChkHr(GetProductsByKinds( nullptr, spIds.Get(), nullptr, cv.Get(), CatalogRelationshipType::SellableBy, hydrateResult.GetAddressOf()))
ChkHr(_ParseGetProductsByKinds(hydrateResult.Get(), products.GetAddressOf()))
ChkHr(spStoreProduct->get_HasDigitalDownload(&hasDigitalDownload))
ChkHr(GetContentIdKeyIdsForProductIds(spIds.Get(), cv.Get(), &response))
ChkHr(response->get_Items(&items))
ChkHr(items->get_Size(&size))
ChkBool(size == 1, ((HRESULT)0x803F6107L))
ChkHr(items->GetAt(0, item.GetAddressOf()))
ChkHr(ActivateInstance(RuntimeClassWindowsXboxSystemInternalDeploymentAvailablePackageProvider.Get(), &packageProvider))
ChkHr(item->get_ContentIds(&contentIds))
ChkHr(contentIds->get_Size(&size))
ChkHr(hrIter)
ChkHr(spStoreProduct.As(&storeProductPrivate))
ChkHr(storeProductPrivate->get_PackageFamilyName(packageFamilyName.GetAddressOf()))
ChkBool(packageFamilyName.IsValid(), ((HRESULT)0x803F6107L))
ChkHr(GetActivationFactory( StateRepositoryUserClassId.Get(), &spUserStatics))
ChkHr(ClientProcessUtils::GetSidForUser(_user.Get(), userSid.GetAddressOf()))
ChkHr(spUserStatics->GetByUserSid(userSid.Get(), &spUser))
ChkHr(GetActivationFactory( StateRepositoryPackageClassId.Get(), &spPackageStatics))
ChkHr(spPackageStatics->ExistsByUserAndPackageFamilyName( spUser.Get(), packageFamilyName.Get(), pValue))
ChkHr(spPackageStatics->ExistsByPackageFamilyName( packageFamilyName.Get(), pValue))
This function is not supported, all calls should now use StoreContextServer::GetAppAndOptionalStorePackageUpdates
Windows::Services::Store::Internal::StoreContextServer::GetAppAndOptionalStorePackageUpdatesAsync
This function is not supported, all calls should now use StoreContextServer::RequestDownloadStorePackageUpdates
Windows::Services::Store::Internal::StoreContextServer::RequestDownloadStorePackageUpdatesAsync
This function is not supported, all calls should now use StoreContextServer::RequestDownloadAndInstallStorePackageUpdatesAsync
Windows::Services::Store::Internal::StoreContextServer::RequestDownloadAndInstallStorePackageUpdatesAsync
ChkHr(ClientProcessUtils::GetCallingAppName(appName.GetAddressOf()))
Windows::Services::Store::Internal::StoreContextServer::RequestDownloadAndInstallStorePackagesAsync
ChkHr(MakeAndInitialize<MessageDialogHelper>(&messageDialogHelper, appName.Get(), (HWND)0 ))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, this, _packageFullName.Get(), pStoreIds, cv.GetAnsi(), messageDialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<BackgroundTaskOperation>(&operation, _user.Get(), jsonRequest, cv.GetHStringReference().Get()))
Windows::Services::Store::Internal::StoreContextServer::BackgroundPurchaseDialogTask
ChkHr(BlockOnCompletionAndGetResults(operation.Get(), jsonResponse))
Windows::Services::Store::Internal::StoreContextServer::_LicenseChanged
hrInfo
spAppContentInfo->GetCatalogId(&productStoreId)
_productStoreId.Set(productStoreId)
ActivateInstance(RuntimeClassAppInstallManager.Get(), &_appInstallManager)
Windows::Services::Store::Internal::StoreContextServer::_GetAppInstallManager
Windows::Services::Store::Internal::StoreContextServer::_GetStoreQueueItems
ChkBool(_productStoreId.IsValid(), ((HRESULT)0x803F6108L))
ChkHr(appInstallManager->get_AppInstallItems(&appInstallItems))
ChkHr(appInstallManager.As(&appInstallManagerInternal))
ChkHr(appInstallManagerInternal->GetAppInstallItemsForUser(_user.Get(), &appInstallItems))
ChkHr(AgileVector<HSTRING>::Make(&productIdsInAppInstallQueue))
ChkHr(appInstallItem->get_ProductId(appInstallItemProductId.GetAddressOf()))
ChkHr(productIdsInAppInstallQueue->Append(appInstallItemProductId.Get()))
ChkHr(IAPUtils::ParseStoreId(storeId.Get(), productId.GetAddressOf(), nullptr , nullptr ))
ChkHr(hrInnerIter)
ChkHr(AgileVector<StoreQueueItem*>::Make(&queuedItemResults))
ChkHr(productIdsInAppInstallQueue->get_Size(&size))
ChkHr(AgileVector<HSTRING>::Make(&foundProductIds))
ChkHr(GetProductsByKinds( nullptr, productIdsInAppInstallQueue.Get(), nullptr, cv.Get(), CatalogRelationshipType::SellableBy, hydrateResult.GetAddressOf()))
ChkHr(products.As(&productsIVector))
ChkHr(product->get_StoreId(productId.GetAddressOf()))
ChkHr(foundProductIds->Append(productId.Get()))
ChkHr(foundProductIds.As(&foundProductIdsIVector))
ChkHr(MakeAndInitialize<StoreQueueItem>(&storeQueueItem, appInstallItem.Get(), cv.GetAnsi()))
ChkHr(queuedItemResults->Append(storeQueueItem.Get()))
ChkHr(queuedItemResults->GetView(queuedItems))
Windows::Services::Store::Internal::StoreContextServer::_RequestPurchase
ChkHr(_RetrieveHWNDFromCallerData(pCallerData, &hwnd))
ChkHr(MakeAndInitialize<PurchaseOperation>( &purchaseOperation, _packageFullName.Get(), _productStoreId.Get(), storeId, storePurchaseProperties, overrideJsonRequest, _user.Get(), cv.GetHStringReference().Get(), hwnd, _hasPreviewCapability, invokedApi ))
ChkHr(BlockOnCompletionAndGetResults(purchaseOperation.Get(), jsonResponse))
ChkHr(_CheckOptionalPackageIsValid(optionalPackageName, _user))
Windows::Services::Store::Internal::StoreContextServer::AcquireStoreLicenseForOptionalPackage
ChkHr(ClientProcessUtils::GetCallerTokenFromComCall(&hToken))
ChkHr(ResultFromLastError())
ChkHr(ClientProcessUtils::GetSidForUser(_user.Get(), sidString.GetAddressOf()))
ChkHr(RpcHelpers::GetRpcHandle(&rpcHandle))
ChkHr(hr)
ChkHr(HRESULT_FROM_RPC(hr))
ChkHr(_optionalPackageLicenseWatcher.AddOptionalPackageToWatch(optionalPackageName, pOptionalPackageLicense))
ChkHr(ComposeLegacyXboxContentIdFromInstalledContentId(WindowsGetStringRawBuffer(packageIdentifier, nullptr), contentId.addressof()))
Windows::Services::Store::Internal::StoreContextServer::GetPreviewLicenseResultForPackage
ChkHr(((HRESULT)0x80004001L))
ChkHr(GetRequiredEkbFromContentId(contentId.get(), keyId.addressof()))
ChkHr(Vector<HSTRING>::Make(&contentIds))
ChkHr(contentIds->Append(packageIdentifier))
ChkHr(Vector<HSTRING>::Make(&keyIds))
ChkHr(keyIds->Append(HStringReference(keyId.get()).Get()))
ChkHr(contentIds->GetView(&contentIdsVectorView))
ChkHr(keyIds->GetView(&keyIdsVectorView))
ChkHr(licenseManager->GetSatisfactionInfos( contentIdsVectorView.Get(), keyIdsVectorView.Get(), &licenseSatisfactionResult))
ChkHr(_CheckOptionalPackageIsValid(packageIdentifier, _user))
ChkHr(GetContentId(WindowsGetStringRawBuffer(packageIdentifier, nullptr), CPT_UNIVERSAL_APP, &guidContentId))
ChkHr(GuidToStringWithoutBraces(&guidContentId, szGuid))
ChkHr(contentIds->Append(HStringReference(szGuid).Get()))
ChkHr(licenseManager->GetSatisfactionInfos( contentIdsVectorView.Get(), nullptr, &licenseSatisfactionResult))
ChkHr(licenseSatisfactionResult->get_ExtendedError(&extendedError))
ChkHr(extendedError)
ChkHr(licenseSatisfactionResult->get_LicenseSatisfactionInfos(&infos))
ChkHr(infos->get_Size(&sizeResult))
ChkBool(sizeResult == 1, ((HRESULT)0x803F6107L))
ChkHr(infos.As(&infosIterable))
ChkHr(infosIterable->First(&infosIterator))
ChkHr(infosIterator->get_HasCurrent(&hasCurrent))
ChkHr(infosIterator->get_Current(&keyValuePair))
ChkHr(keyValuePair->get_Value(&info))
ChkHr(info->get_IsSatisfied(&isSatisfied))
ChkHr(JsonHelpers::CreateJsonObject(&previewResultJson))
ChkHr(licenseSatisfactionResult.As(&licenseSatisfactionResultInternal))
licensableSku
ChkHr(JsonHelpers::SetNamedString(previewResultJson, L"licensableSku", licensableSku.Get()))
Preview license response did not have skuId. (CV:%hs)
ChkHr(((HRESULT)0x803F6108L))
licensableStatus
ChkHr(JsonHelpers::SetNamedNumber(previewResultJson, L"licensableStatus", licenseQueryStatus))
ChkHr(JsonHelpers::Stringify(previewResultJson, licenseSatisfactionResultJson))
ChkHr(IAPUtils::ParseStoreId( productStoreId, productId.GetAddressOf(), nullptr, nullptr))
Windows::Services::Store::Internal::StoreContextServer::GetPreviewLicenseResultForStoreId
ChkHr(productIds->Append(productId.Get()))
ChkHr(productIds.As(&productIdsIter))
ChkHr(GetContentIdKeyIdsForProductIds( productIdsIter.Get(), cv.Get(), &contentIdResponse))
ChkHr(contentIdResponse->get_Items(&items))
ChkHr(items->get_Size(&itemCount))
ChkBool(itemCount != 0, ((HRESULT)0x803F6107L))
ChkHr(items->GetAt(0, &contentIdKeyIdItem))
ChkHr(contentIdKeyIdItem->get_ContentIds(&contentIds))
ChkHr(contentIdKeyIdItem->get_KeyIds(&keyIds))
ChkHr(contentIds->get_Size(&sizeOfContentIds))
ChkHr(licenseManager->GetSatisfactionInfos( contentIds.Get(), keyIds.Get(), &licenseSatisfactionResult))
ChkBool(sizeResult > 0, ((HRESULT)0x803F6107L))
Preview license response did not have skuId. (CV = %hs)
There were items in the collection, however iterator is pointing at the end of the collection...
ChkHr(_optionalPackageLicenseWatcher.RemoveOptionalPackageToWatch(optionalPackageName))
Windows::Services::Store::Internal::StoreContextServer::ReleaseStoreLicenseForOptionalPackage
ChkHr(HRESULT_FROM_RPC(OptionalPackageRundownNotification( rpcHandle, appPfn.GetRawBuffer(nullptr), sessionId, sidString.GetRawBuffer(nullptr), WindowsGetStringRawBuffer(optionalPackageName, nullptr))))
ChkHr(_spLicenseManager.As(&appLicenseManager2))
Windows::Services::Store::Internal::StoreContextServer::GetProductForPackage
ChkHr(AllowImpersonation(appLicenseManager2.Get()))
ChkHr(appLicenseManager2->GetOfflineLicenseForInstalledPackage( WindowsGetStringRawBuffer(packageFullName, nullptr), AppContentType::AppType_Unknown, license.GetAddressOf()))
ChkHr(license->GetContentInfo(__uuidof(**(contentInfo.GetAddressOf())), IID_PPV_ARGS_Helper(contentInfo.GetAddressOf())))
ChkHr(contentInfo->GetCatalogId(&storeIdFromLicense))
ChkHr(Vector<HSTRING>::Make(&storeIds))
ChkHr(storeIds->Append(HStringReference(storeIdFromLicense).Get()))
ChkHr(GetProducts(productKinds, storeIds.Get(), cv.GetHStringReference().Get(), productJson))
ChkHr(VerifyCapability(StoreConfigurationCapability.Get()))
Windows::Services::Store::Internal::StoreContextServer::FocusOnWindow
ChkHr(ClientProcessUtils::GetCallingAppPackage(_user.Get(), spAppmodelPackage.GetAddressOf()))
Windows::Services::Store::Internal::StoreContextServer::GetAppAndOptionalStorePackageUpdates
ChkHr(Vector<Package*>::Make(&appmodelPackages))
ChkHr(appmodelPackages->Append(spAppmodelPackage.Get()))
ChkHr(spAppmodelPackage->get_Id(&packageId))
ChkHr(packageId->get_FamilyName(packageFamilyName.GetAddressOf()))
Adding calling package = %s for productId = %s
ChkHr(spAppmodelPackage->get_Dependencies(supplementalPackages.GetAddressOf()))
ChkHr(supplementalPackages->get_Size(&supplementalPackagesSize))
ChkHr(supplementalPackages->GetAt(i, supplement.GetAddressOf()))
ChkHr(supplement.As(&supplement4))
ChkHr(supplement4->get_IsOptional(&isOptional))
ChkHr(appmodelPackages->Append(supplement.Get()))
ChkHr(supplement->get_Id(packageId.ReleaseAndGetAddressOf()))
ChkHr(packageId->get_FamilyName(packageFamilyName.ReleaseAndGetAddressOf()))
Adding optional package = %s
ChkHr(((HRESULT)0x8000FFFFL))
ChkHr(appmodelPackages->GetView(appModelPackagesVV.GetAddressOf()))
ChkHr(appInstallManagerInternal->SearchForUpdatesWithPausedAddAsync( _user.Get(), appModelPackagesVV.Get(), true , cv.GetHStringReference().Get(), true, appInstallItemsOp.GetAddressOf()))
ChkHr(BlockOnCompletionAndGetResults(appInstallItemsOp.Get(), &appInstallItems))
ChkHr(AgileVector<StorePackageUpdate*>::Make(&updates))
ChkHr(appInstallItems->get_Size(&size))
ChkHr(appInstallItems->GetAt(index, &item))
ChkHr(item->get_PackageFamilyName(packageFamilyName.ReleaseAndGetAddressOf()))
ChkHr(appmodelPackages->get_Size(&packagesSize))
ChkHr(appmodelPackages->GetAt(packagesIndex, &package))
ChkHr(MakeAndInitialize<StoreQueueItem>(&storeQueueItem, item.Get(), cv.GetAnsi()))
ChkHr(MakeAndInitialize<StorePackageUpdate>(&storePackageUpdate, package.Get(), storeQueueItem.Get()))
ChkHr(updates->Append(storePackageUpdate.Get()))
Found update for package = %s
ChkHr(updates->GetView(queuedItems))
Windows::Services::Store::Internal::StoreContextServer::CanSilentlyDownloadStorePackageUpdates
ChkHr(appInstallManager->get_AutoUpdateSetting(&autoUpdates))
ChkHr(_IsNetworkMetered(&onMeteredNetwork))
ChkHr(CanSilentlyDownloadStorePackageUpdates(cv.GetHStringReference().Get(), &canSilentlyDownload))
Windows::Services::Store::Internal::StoreContextServer::DownloadStorePackageUpdates
Prompt required, but not possible, cancel - canSilentlyDownload = %s, install = %s
ChkHr(pMessageDialogHelper->ShowDialogWithResultsAsync( message, nullptr, messageDialogOperation.GetAddressOf()))
ChkHr(BlockOnCompletionAndGetResults(messageDialogOperation.Get(), &command))
User content required, cancel = %s, canSilentlyDownload = %s, install = %s
ChkHr(AgileVector<StoreQueueItem*>::Make(&queueItems))
ChkHr(queueItems->Append(storeQueueItem.Get()))
ChkHr(storeQueueItem->get_ProductId(productId.GetAddressOf()))
ChkHr(appInstallManager.As(&appInstallManager2))
ResumeWithFlags called for productId = %s, setFlags = %d, resetFlags = %d
ChkHr(queueItems->GetView(queuedItems))
Windows::Services::Store::Internal::StoreContextServer::GetProductsWithOptions
ChkHr(GetProductsByKinds(productKinds, storeIds, storeProductOptions, cv.Get(), CatalogRelationshipType::SellableBy, productJson))
Windows::Services::Store::Internal::StoreContextServer::DownloadStorePackages
ChkHr(IAPUtils::ParseStoreId( storeId.Get(), productId.GetAddressOf(), nullptr, nullptr))
ChkHr(Vector<HSTRING>::Make(&licensedProducts))
ChkHr(contentIds->get_Size(&contentIdsSize))
ChkHr(item->get_KeyIds(&keyIds))
ChkHr(item->get_ProductId(productId.GetAddressOf()))
ChkHr(licensedProducts->Append(productId.Get()))
ChkHr(hrInfosIter)
ChkHr(licensedProducts->get_Size(&size))
ChkHr(((HRESULT)0x80070005L))
ChkHr(messageDialogHelper->ShowDialogWithResultsAsync( onMeteredNetwork ? ((HRESULT)0x803F6206L) : ((HRESULT)0x803F6203L), nullptr, messageDialogOperation.GetAddressOf()))
User content required, cancel = %s
ChkHr(appInstallManager.As(&appInstallManager5))
ChkHr(licensedProducts.As(&products))
ChkHr(ActivateInstance(RuntimeClassAppInstallOptions.Get(), &appInstallOptions))
ChkHr(installOptions->get_AllowForcedAppRestart(&allowForcedAppRestart))
ChkHr(appInstallOptions->put_AllowForcedAppRestart(allowForcedAppRestart))
ChkHr(appInstallManager5->StartProductInstallWithOptionsForUserAsync( _user.Get(), productId.Get(), nullptr, nullptr, true, downloadOnAnyNetwork, cv.GetHStringReference().Get(), appInstallOptions.Get(), &asyncOp))
ChkHr(BlockOnCompletionAndGetResults(asyncOp.Get(), &installItemVector))
ChkHr(installItemVector->get_Size(&installVectorSize))
ChkHr(MakeAndInitialize<StoreQueueItem>(&queueItem, installItem.Get(), cv.GetAnsi()))
ChkHr(queueItems->Append(queueItem.Get()))
ChkHr(hrItemIter)
ChkHr(hrProductsIter)
Windows::Services::Store::Internal::StoreContextServer::UninstallStorePackage
ChkBool(productId.IsValid(), ((HRESULT)0x80070057L))
ChkHr(Vector<HSTRING>::Make(&ids))
ChkHr(ids->Append(productId.Get()))
ChkHr(GetProductsByKinds( nullptr, ids.Get(), nullptr, cv.Get(), CatalogRelationshipType::All, hydrateResult.GetAddressOf()))
ChkHr(products->get_Size(&productsLength))
ChkBool(productsLength > 0, HRESULT_FROM_WIN32(1168L))
ChkHr(GetContentIdKeyIdsForProductIds(ids.Get(), cv.Get(), &response))
ChkHr(contentId.CopyTo(packageFamilyNameToUninstall.GetAddressOf()))
ChkHr(storeProductPrivate->get_PackageFamilyName(packageFamilyNameToUninstall.GetAddressOf()))
ChkHr(packageFamilyNameToUninstall.Set(packageFamilyName))
ChkBool(packageFamilyNameToUninstall.IsValid(), ((HRESULT)0x803F6107L))
ChkHr(packageProvider->FindAvailablePackage(packageFamilyNameToUninstall.Get(), AvailablePackageIdentityType_ContentId, &package))
ChkHr(package.As(&package2))
ChkHr(package2->get_PackageFullName(packageFullNameToUninstall.GetAddressOf()))
ChkHr(GetActivationFactory(RuntimeClassWindowsXboxApplicationModelStateInternalStateHelperCache.Get(), cacheStatics.GetAddressOf()))
ChkHr(cacheStatics->GetPackageByFullName(packageFullNameToUninstall.Get(), internalPackage.GetAddressOf()))
ChkHr(internalPackage->get_DisplayName(displayName.GetAddressOf()))
ChkHr(CoCreateInstance(__uuidof(XboxDevelopmentPackageManager), nullptr, CLSCTX_LOCAL_SERVER, __uuidof(**(&packageManager)), IID_PPV_ARGS_Helper(&packageManager)))
ChkHr(packageManager->UninstallPackage(packageFullNameToUninstall.GetRawBuffer(nullptr)))
ChkHr(ActivateInstance(RuntimeClassWindowsManagementDeploymentPackageManager.Get(), &packageManager))
ChkHr(packageManager->FindPackagesByUserSecurityIdPackageFamilyName(userSid.Get(), packageFamilyNameToUninstall.Get(), packages.GetAddressOf()))
ChkHr(packages->First(&packagesIterator))
ChkHr(packagesIterator->get_HasCurrent(&hasCurrent))
ChkHr(packagesIterator->get_Current(&package))
ChkHr(package4->get_SignatureKind(&signatureKind))
ChkHr(package->get_Id(&packageId))
ChkHr(packageId->get_FullName(packageFullName.GetAddressOf()))
ChkHr(package4->get_IsOptional(&isOptionalPackage))
ChkHr(ClientProcessUtils::GetCallingAppPackage(_user.Get(), callingPackage.GetAddressOf()))
ChkHr(callingPackage->get_Dependencies(dependencies.GetAddressOf()))
ChkHr(dependencies.As(&dependenciesIteratable))
ChkHr(dependenciesIteratable->First(&dependenciesIterator))
ChkHr(dependenciesIterator->get_HasCurrent(&hasCurrentDependencies))
ChkHr(dependenciesIterator->get_Current(&dependentPackage))
ChkHr(dependentPackage.As(&dependentPackage4))
ChkHr(dependentPackage4->get_SignatureKind(&signatureKindDependent))
ChkHr(dependentPackage->get_Id(&dependentPackageId))
ChkHr(dependentPackageId->get_FullName(dependentPackageFullName.GetAddressOf()))
ChkHr(dependenciesIterator->MoveNext(&hasCurrentDependencies))
ChkHr(packageId->get_Name(packageName.GetAddressOf()))
ChkHr(packageManager->RemovePackageAsync(packageFullName.Get(), &deploymentOperation))
ChkHr(BlockOnCompletionAndGetResults(deploymentOperation.Get(), &deploymentResult))
ChkHr(deploymentResult->get_ExtendedErrorCode(&deploymentResultCode))
ChkHr(deploymentResultCode)
Trying to remove package %s that isn't related to the calling app
ChkHr(((HRESULT)0x803F610EL))
Trying to remove non-store package %s
ChkHr(((HRESULT)0x803F610DL))
ChkHr(packagesIterator->MoveNext(&hasCurrent))
Trying to remove package %s that isn't installed
ChkHr(((HRESULT)0x803F6103L))
Windows::Services::Store::Internal::StoreContextServer::SetInstallOrderForAssociatedStoreQueueItems
ChkHr(appInstallManager5->SetQueueOrder(cvIn, productIds))
ChkHr(dialogHelper->put_ContextString(packageDisplayName.Get()))
Windows::Services::Store::Internal::StoreContextServer::UserConsentedToUninstall
ChkHr(dialogHelper->ShowDialogWithResultsAsync( ((HRESULT)0x803F6209L), nullptr, messageDialogOperation.GetAddressOf()))
User consent required, cancel = %s
Unable to show consent dialog
ChkHr(UriHelperV7::GetIndexedEntry(slsUri, requestKind, entry.GetAddressOf()))
Windows::Services::Store::Internal::StoreContextServer::SendStoreRequestWithUris
URIBufferMaxSize
DoPost
AuthType
ForcePrompt
UsePromptSettings
BodyBufferMaxSize
InvokePurchaseFlow
UseBackgroundTask
AnonymousRequest
RequiresCapability
RequireAuthToken
RequireValidLicense
RefreshLicenses
ForceRetailSandbox
DoDelete
DoPut
DoHead
DoOptions
DoPatch
UserTokenTypes
BodyForcePrompt
BodyPromptSettings
OmitAuthTokenPrefix
UseAuthIfAvailable
SkipCapabilityCheckIfERA
FallbackToDeviceAuth
ChkHr(JsonParser::ParseJSONToObject( entry, &requestParams, responseTable))
ChkHr(VerifyCapability(requestParams.requiredCapability.Get()))
ChkHr(IAPUtils::GetMarket(market.GetAddressOf()))
ChkHr(IAPUtils::GetLanguagesString(languages.GetAddressOf()))
ChkHr(IAPUtils::GetLanguage(language.GetAddressOf()))
ChkHr(IAPUtils::GetDeviceIds(moid, oemid, scmid))
ChkHr(UriHelperV7::GetRawString(UriHelperV7::DeviceFamily, deviceFamily.GetAddressOf()))
ChkHr(JsonHelpers::CreateJsonObject(&jsonInternalParameters))
StoreId
ChkHr(JsonHelpers::GetNamedString(jsonParameters, L"StoreId", _parentStoreIdFromParam.GetAddressOf()))
parentProductId
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"parentProductId", _parentStoreIdFromParam.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"parentProductId", _productStoreId.GetRawBuffer(nullptr)))
market
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"market", market.GetRawBuffer(nullptr)))
languages
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"languages", languages.GetRawBuffer(nullptr)))
deviceMoid
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceMoid", moid.GetRawBuffer(nullptr)))
deviceOemid
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceOemid", oemid.GetRawBuffer(nullptr)))
deviceScmid
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceScmid", scmid.GetRawBuffer(nullptr)))
deviceFamily
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceFamily", deviceFamily.GetRawBuffer(nullptr)))
locale
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"locale", language.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"PFN", _packageFullName.GetRawBuffer(nullptr)))
ChkHr(IAPUtils::ConstructSlsUri(requestParams.uriToFormat.Get(), requestParams.cchUriMax, jsonInternalParameters, uri.GetAddressOf()))
AuthToken
ChkHr(JsonHelpers::GetNamedString(jsonParameters, L"AuthToken", authToken.GetAddressOf()))
ChkBool(pCallerData != nullptr, ((HRESULT)0x803F610BL))
ChkHr(WinStoreAuth::AuthenticationInternal::GetDeviceTicketWithBroker( true, authToken.GetAddressOf()))
ChkHr(hrGoldenTicket)
requestParams.authType == tickets[0].m_providerType
ChkHr(spWebTokenRequestResults->get_Size(&resultsCount))
ChkHr(spWebTokenRequestResults->GetAt(0, it.GetAddressOf()))
ChkHr(it.As(&spWebTokenRequestResult))
ChkBool(ticketCount == 1, ((HRESULT)0x803F6107L))
ChkHr(WinStoreAuth::AuthenticationInternal::PrefixTicketForMDollar((WinStoreAuth::AccountProviderType)requestParams.authType, authToken.Get(), strAuthTokenPrefixed.GetAddressOf()))
ChkHr(strAuthTokenPrefixed.CopyTo(authToken.ReleaseAndGetAddressOf()))
BodyTemplate
ChkHr(_ConstructRequestBody( jsonBody, _user, static_cast<WinStoreAuth::AccountProviderType>(requestParams.userTokenTypes), userAuthPromptType, hwnd, requestParams.forceRetailSandbox, jsonInternalParameters))
ChkHr(JsonHelpers::Stringify(entry, entryJson.GetAddressOf()))
Entry requires a Body Template: %s
ChkHr(((HRESULT)0x803F6107L))
Entry cannot have a Body Template: %s
ChkHr(JsonHelpers::Stringify(jsonBody.Get(), body.GetAddressOf()))
ChkBool(pCallerData != nullptr, HRESULT_FROM_WIN32(1400L))
ChkHr(_RequestPurchase( pCallerData, nullptr, nullptr, body.Get(), cv.GetHStringReference().Get(), InvokedApi_SendStoreRequest.Get(), jsonResponse))
ChkHr(BackgroundPurchaseDialogTask(body.Get(), cv.GetHStringReference().Get(), jsonResponse))
ChkHr(IAPUtils::CreateHttpClient(httpClient.GetAddressOf()))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader( authToken.Get(), false, httpClient.GetAddressOf()))
ChkHr(IAPUtils::CreateHttpClientWithAuthIfAvailable(_user.Get(), &httpClient, requestParams.forceRetailSandbox))
ChkHr(hrOperation)
This request kind (%d) is invalid or not supported on this release. Request Entry: %s
Windows::Services::Store::Internal::StoreContextServer::GetProductsByKinds
ChkHr(StringHelpers::Join( storeIds, false, storeIdsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join( productKinds, false, productKindsWithCommas.GetAddressOf()))
ChkHr(storeProductOptions->get_ActionFilters(&actionFilters))
ChkHr(actionFilters->get_Size(&filterSize))
ChkBool(filterSize < 2, ((HRESULT)0x80070057L))
ChkHr(actionFilters->GetAt(0, actionFilter.GetAddressOf()))
actionFilter
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"actionFilter", actionFilter.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"productIdsWithCommas", storeIdsWithCommas.Get()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, uriId, cv, jsonCatalogParameters.Get(), nullptr, productJsonString.GetAddressOf()))
ChkHr(_FilterProductsJson(productJsonString, relationshipFilter, _productStoreId.Get()))
ChkHr(JsonHelpers::CreateJsonArray(&jsonProductSkuIds))
ChkHr(JsonHelpers::SetNamedArray(jsonCollectionsParameters, L"productSkuIds", jsonProductSkuIds))
ChkHr(JsonHelpers::SetNamedString(productSku, L"productId", productId.Get()))
ChkHr(JsonHelpers::AppendObject(jsonProductSkuIds, productSku))
ChkHr(IAPUtils::BuildEntitlementFiltersJSON(jsonEntitlementFilters, productKinds))
SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetUserCollectionForProducts, cv, jsonCollectionsParameters.Get(), nullptr, collectionsJsonString.GetAddressOf())
ChkHr(JsonHelpers::CreateJsonObject(&request))
Windows::Services::Store::Internal::StoreContextServer::GetContentIdKeyIdsForProductIds
ChkHr(StringHelpers::Join(productIds, false, productIdsString.GetAddressOf()))
productIds
ChkHr(JsonHelpers::SetNamedString(request, L"productIds", productIdsString.Get()))
ChkHr(JsonHelpers::SetNamedString(request, L"AuthToken", HStringReference(L"").Get()))
ChkHr(JsonHelpers::Stringify(request, requestJson.GetAddressOf()))
ChkHr(SendStoreRequest( nullptr, _hasPreviewCapability ? 14 : 13, cv.GetHStringReference().Get(), requestJson.Get(), &status, responseJson.GetAddressOf()))
ChkHr(MakeAndInitialize<StoreContentIdKeyIdResponse>(response, responseJson.Get()))
ChkHr(IAPUtils::SetMaxDateTime(&expirationDate))
Windows::Services::Store::Internal::StoreContextServer::_LoadLicenseJson
ChkHr(IAPUtils::GetTimeSpanDifference(expirationDate, &trialTimeRemaining))
_ParseLicenseInstance( spLicenseInstance, isActive, isTrial, isTrialOwnedByThisUser, trialUniqueId.GetAddressOf(), isDiscLicense, expirationDate, trialTimeRemaining, package)
ChkHr(_MakeDefaultLicenseResponse(package))
isActive
ChkHr(JsonHelpers::SetNamedBool(package, L"isActive", !!isActive))
isTrial
ChkHr(JsonHelpers::SetNamedBool(package, L"isTrial", !!isTrial))
isTrialOwnedByThisUser
ChkHr(JsonHelpers::SetNamedBool(package, L"isTrialOwnedByThisUser", isTrialOwnedByThisUser))
trialUniqueId
ChkHr(JsonHelpers::SetNamedString(package, L"trialUniqueId", trialUniqueId.Get()))
isDiscLicense
ChkHr(JsonHelpers::SetNamedBool(package, L"isDiscLicense", isDiscLicense))
ChkHr(JsonHelpers::SetNamedDateTime(package, L"expiration", expirationDate))
trialTimeRemaining
ChkHr(JsonHelpers::SetNamedTimeSpan(package, L"trialTimeRemaining", trialTimeRemaining))
ChkHr(JsonHelpers::Stringify(package, _cachedLicenseJson.GetAddressOf()))
ChkBool(spLicenseInstance != nullptr, ((HRESULT)0x803F6107L))
Windows::Services::Store::Internal::StoreContextServer::_ParseLicenseInstance
ChkHr(spLicenseInstance->GetIsTrial(&isTrial))
ChkHr(spLicenseInstance->GetLicenseGrantReason(&grantReason))
ChkHr(spLicenseInstance->GetExpirationDateTime(&ftExpirationTime))
ChkHr(IAPUtils::SetDateTime(ftExpirationTime, &expirationDate))
spLicenseInstance->GetContentInfo(IID_PPV_ARGS(spApplicationContentInfo.GetAddressOf()))
ChkHr(spApplicationContentInfo->GetUserId(&lmUserId))
ChkHr(ULongLongToUInt(::wcslen(lmUserId), &lmUserIdLength))
FALSE
Lookup failed for user's ownership of the trial. isTrialOwnedByThisUser=%s
ChkHr(spApplicationContentInfo->GetEntitlementId(&entitlementId))
ChkHr(hstrEntitlementId.Set(entitlementId))
ChkHr(spApplicationContentInfo->GetTrialTimeRemaining(&ftTrialTimeRemaining))
ChkHr(IAPUtils::SetDateTime(ftTrialTimeRemaining, &dtTrialTimeRemaining))
ChkHr(IAPUtils::GetTimeSpanDifference(dtTrialTimeRemaining, &trialTimeRemaining))
ChkHr(spApplicationContentInfo->GetCustomPolicy(&customPolicyLengthInBytes, reinterpret_cast<BYTE**>(&customPolicyEncoded)))
ChkHr(ULongLongToUInt(::wcslen(customPolicyEncoded), &customPolicyLength))
ChkHr(customPolicyDecoded.Set(customPolicyEncoded))
ChkHr(StringHelpers::DecodeBase64( HStringReference(customPolicyEncoded.GetPtr(), customPolicyLength).Get(), customPolicyDecoded.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(customPolicyDecoded.GetRawBuffer(nullptr), &customPolicyObject))
packages
ChkHr(JsonHelpers::GetNamedArray(customPolicyObject, L"packages", &packages))
ChkHr(packages->GetObjectAt(0, &package))
skuId
ChkHr(JsonHelpers::GetNamedString(package, L"skuId", _skuId.GetAddressOf()))
version
ChkHr(JsonHelpers::GetNamedInteger(customPolicyObject, L"version", &version))
The license for the application is missing information needed to perform Store operations. If you side-loaded the application, uninstall the application and download it from the Store first to get the Store license associated with the application.
productAddOns
ChkHr(JsonHelpers::GetNamedArray(package, L"productAddOns", &productAddOns))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(productAddOns, &addOnSize))
ChkHr(productAddOns->GetObjectAt(i, &productAddOn))
ChkHr(JsonHelpers::GetNamedString(productAddOn, L"productId", addOnProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(productAddOn, L"skuId", addOnSkuId.GetAddressOf()))
ChkHr(spApplicationContentInfo->GetAddOnCount(&nCount))
ChkHr(spApplicationContentInfo->GetAddOnAtPosition(lProduct, spAppAddOn.GetAddressOf()))
ChkHr(spAppAddOn->GetCatalogId(&licenseAddOnCatalogId))
ChkHr(spAppAddOn->GetSKUId(&licenseAddOnSkuId))
ChkHr(spAppAddOn->GetExpireTime(&ftAddOnExpirationTime))
ChkHr(IAPUtils::SetDateTime(ftAddOnExpirationTime, &addOnExpirationTime))
ChkHr(JsonHelpers::SetNamedDateTime(productAddOn, L"expiration", addOnExpirationTime))
ChkHr(JsonHelpers::SetNamedBool(productAddOn, L"isActive", true))
ChkHr(JsonHelpers::CreateJsonObject(&package))
Windows::Services::Store::Internal::StoreContextServer::_MakeDefaultLicenseResponse
ChkHr(JsonHelpers::CreateJsonArray(&addOns))
ChkHr(JsonHelpers::SetNamedArray(package, L"productAddOns", addOns))
ChkHr(JsonHelpers::SetNamedString(package, L"productId", _productStoreId.Get()))
ChkHr(JsonHelpers::SetNamedString(package, L"skuId", _skuId.Get()))
spLicenseManager->RefreshLicenses(RefreshPolicy_NetworkStatusOnline)
Windows::Services::Store::Internal::StoreContextServer::_ForceRefreshLicensesProc
ChkHr(IAPUtils::ParseStoreId(data->storeIdToRefresh.Get(), productId.GetAddressOf(), nullptr, nullptr))
ChkHr(data->pThis->GetContentIdKeyIdsForProductIds(spIds.Get(), cv.Get(), &response))
ChkHr(items->GetAt(index, item.GetAddressOf()))
ChkHr(contentIds->get_Size(&contentIdSize))
ChkHr(contentIds->GetAt(contentIdIndex, contentId.GetAddressOf()))
ChkHr(spLicenseManager->EnsureLicenseForApplicationDeployment(contentId.GetRawBuffer(nullptr), nullptr , nullptr ))
ChkHr(pCallerData->QueryInterface(__uuidof(**(&spCallerDataPrivate)), IID_PPV_ARGS_Helper(&spCallerDataPrivate)))
Windows::Services::Store::Internal::StoreContextServer::_RetrieveHWNDFromCallerData
ChkHr(spCallerDataPrivate->GetAppWindowHandle(&appWindowHandle))
ChkHr(HRESULT_FROM_WIN32(1400L))
WaitForCompletion
onecore\internal\shell\inc\asyncoperationhelper.h
(((HRESULT)(hr)) < 0)
jsonValue->GetNumber(&result)
Windows::Services::Store::JsonParser::ParseInteger
Windows.Foundation.IAsyncOperationWithProgress`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreProduct>
Windows::Services::Store::JsonParser::ParseBoolean
jsonValue->GetBoolean(&value)
=AWindows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct HSTRING__ *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct HSTRING__ *>,0>::DoWorkStub
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreQueueItem>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Package>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Package>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StorePackageUpdate>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>
Windows::Services::Store::AsyncOperationWithProgressBase<struct Windows::Foundation::IAsyncOperationWithProgress<class Windows::Services::Store::StorePackageUpdateResult *,struct Windows::Services::Store::StorePackageUpdateStatus>,struct Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<class Windows::Services::Store::StorePackageUpdateResult *,struct Windows::Services::Store::StorePackageUpdateStatus>,struct Windows::Foundation::IAsyncOperationProgressHandler<class Windows::Services::Store::StorePackageUpdateResult *,struct Windows::Services::Store::StorePackageUpdateStatus>,0>::DoWorkStub
onecoreuap\enduser\winstore\licensing\winrt\lib\AsyncBaseWithProgress.h
Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.Internal.StoreContentIdKeyIdItem>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.Internal.StoreContentIdKeyIdItem>
jsonArray->GetObjectAt(i, jsonElement.GetAddressOf())
Vector<T*>::Make(vector.GetAddressOf())
_productId.CopyTo(value)
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::get_ProductId
_contentIds->GetView(value)
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::get_ContentIds
_keyIds->GetView(value)
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::get_KeyIds
jsonValue->GetString(string.GetAddressOf())
Windows::Services::Store::JsonParser::ParseString
ContentIds
KeyIds
Vector<HSTRING>::Make(vector.GetAddressOf())
E_NOT_SET
JsonHelpers::GetArraySizeFromJsonArray(jsonArray, &count)
vector->Append(text.Get())
jsonArray->GetStringAt(i, text.GetAddressOf())
Windows::Services::Store::JsonParser::ParseArrayToVectorOfHSTRING
ChkHr(JsonParser::ParseJSONToObject( json, this, itemTable))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\StoreContentIdKeyIdItem.h
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::RuntimeClassInitialize
MakeAndInitialize<T>(&image, DEBUG_PARSER_PARAMETERS_ARGS jsonElement)
vector->Append(image.Get())
Windows::Services::Store::JsonParser::ParseArrayToVector
ChkHr(JsonParser::ParseJSONStringToObject( jsonString, this, itemsTable))
Windows::Services::Store::Internal::StoreContentIdKeyIdResponse::RuntimeClassInitialize
Items
MYF{m{
0Yh"C
Oc7Wa
V:)NM
NvChkHr(ParseJSONToObject( jsonObject, pObj, entry.pChildren))
Json document is missing a required field.
ChkHr(hrEntry)
ChkHr(jsonValue->GetObjectW(jsonObject.GetAddressOf()))
ChkHr(jsonValue->get_ValueType(&type))
Failed to parse property '%s'
ChkHr(currentPair->get_Key(keyName.GetAddressOf()))
ChkHr(json.As(&jsonObjectIterable))
Windows::Services::Store::JsonParser::ParseJSONToObject
ChkHr(jsonObjectStatics->Parse(jsonString, &jsonObject))
ChkHr(ParseJSONToObject( jsonObject, pObj, table))
onecoreuap\enduser\winstore\licensing\winrt\lib\ParserJSON.h
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), &jsonObjectStatics))
Windows::Services::Store::JsonParser::ParseJSONStringToObject
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreQueueItem>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Package>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StorePackageUpdate>
onecoreuap\enduser\winstore\licensing\winrt\lib\AsyncBase.h
hModule != nullptr
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::RemoveOptionalPackageToWatch
ChkHr(_pOptionalPfnToCallbackMap->Remove(optionalPackageFullName))
ChkHr(_pOptionalPfnToCallbackMap->HasKey(optionalPackageFullName, &foundOptionalPackage))
ChkHr(_pOptionalPfnToCallbackMap->Insert(optionalPackageFullName, storePackageLicenseCallback, &replaced))
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::AddOptionalPackageToWatch
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.Internal.StoreContentIdKeyIdItem>
Windows::Services::Store::Internal::StoreContentIdKeyIdResponse::get_Items
_items->GetView(value)
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\StoreContentIdKeyIdResponse.h
%08lX-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X
Windows.Foundation.Collections.IVectorView`1<String>
Windows.Foundation.Collections.IVector`1<String>
Windows.Foundation.Collections.IIterator`1<String>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>
&_*q<|
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>
ChkHr((AgileHashMap<HSTRING, IStorePackageLicenseLostCallback*>::Make(&_pOptionalPfnToCallbackMap)))
ChkHr(((HRESULT) ((RtlQueryWnfStateData( &initialChangeStamp, WNF_LM_OPTIONAL_PACKAGE_SUSPEND_REQUIRED, OnEventCallback, nullptr , nullptr )) | 0x10000000)))
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::OnEventCallback
ChkHr(pThis->_pOptionalPfnToCallbackMap->Lookup(HStringReference(pData->OptionalPackageFullName).Get(), callback.GetAddressOf()))
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::Initialize
ChkHr(((HRESULT) ((RtlSubscribeWnfStateChangeNotification( &_subscription, WNF_LM_OPTIONAL_PACKAGE_SUSPEND_REQUIRED, initialChangeStamp, OnEventCallback, reinterpret_cast<PVOID>(this), nullptr , 0 , 0x00000004UL)) | 0x10000000)))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\StorePackageLicenseWnfWatcher.h
"z}!M
OChkHr(jsonObjectIterator->MoveNext(&hasCurrent))
ProductId
ChkHr(currentPair->get_Value(jsonValue.GetAddressOf()))
ChkHr(jsonObjectIterator->get_Current(&currentPair))
ChkHr(jsonObjectIterator->get_HasCurrent(&hasCurrent))
ChkHr(jsonObjectIterable->First(&jsonObjectIterator))
Windows.Xbox.ApplicationModel.State.Internal.StateHelperCache
Windows.Xbox.System.Internal.Deployment.AvailablePackageProvider
Windows.Foundation.AsyncOperationCompletedHandler`1<String>
Windows.Foundation.IAsyncOperation`1<String>
JGFYW
Windows.Internal.StateRepository.Package
Windows.Internal.StateRepository.User
 ChkAlloc(m_spStoreCommerceFactory)
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\currentappserver.cpp
Windows::ApplicationModel::Store::CurrentAppFactory::Initialize
get_LicenseInformation() invoked.
ClientProcessUtils::GetCallingAppPackageFullName(m_PFN.GetAddressOf())
ChkArg(ppAppLicense)
Windows::ApplicationModel::Store::CurrentAppFactory::get_LicenseInformation
ChkHr(GetStoreCommerce(&spStoreCommerce))
ChkHr(Initialize())
CurrentApp.LicenseInformation
ChkHr(spStoreCommerce->GetLicenseInformation(ppAppLicense))
Windows::ApplicationModel::Store::CurrentAppFactory::get_AppId
get_AppId() invoked.
ChkHr(spStoreCommerce->GetAppId(&m_appID))
ChkArg(pAppId)
get_LinkUri() invoked.
CurrentApp.AppId
ChkArg(ppLinkUri)
Windows::ApplicationModel::Store::CurrentAppFactory::get_LinkUri
ChkHr(IAPUtils::CreateUri(hstrLinkUri.Get(), ppLinkUri))
ChkHr(spStoreCommerce->GetLinkUri(hstrLinkUri.GetAddressOf()))
RequestAppPurchaseAsync(%s) invoked.
CurrentApp.LinkUri
includeReceipt
Windows::ApplicationModel::Store::CurrentAppFactory::RequestAppPurchaseAsync
ChkArg(ppRequestAppPurchaseOperation)
CurrentApp.RequestAppPurchaseAsync
ChkHr(spStoreCommerce->RequestAppPurchaseAsync( includeReceipt, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestAppPurchaseOperation))
ChkHr(MakeAndInitialize<MessageDialogHelper>(&spMessageDialogHelper, nullptr, hwnd))
Windows::ApplicationModel::Store::CurrentAppFactory::RequestProductPurchaseAsync
RequestProductPurchaseAsync(%s, %s) invoked.
CurrentApp.RequestProductPurchaseAsync
productId
ChkHr(spStoreCommerce->RequestProductPurchaseAsync(productId, includeReceipt, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestProductPurchaseOperation))
ChkArg(ppRequestProductPurchaseOperation)
Windows::ApplicationModel::Store::CurrentAppFactory::RequestProductPurchaseWithResultsAsync
RequestProductPurchaseWithResultsAsync(%s) invoked.
ChkArg(ppRequestProductPurchaseWithResultsOperation)
CurrentApp.RequestProductPurchaseWithResultsAsync
ChkHr(spStoreCommerceWithConsumables->RequestProductPurchaseWithResultsAsync( productId, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestProductPurchaseWithResultsOperation))
ChkHr(GetStoreCommerce(&spStoreCommerceWithConsumables))
Windows::ApplicationModel::Store::CurrentAppFactory::RequestProductPurchaseWithDisplayPropertiesAsync
RequestProductPurchaseWithDisplayPropertiesAsync(%s, %s) invoked.
CurrentApp.RequestProductPurchaseWithDisplayPropertiesAsync
devOfferId
LoadListingInformationAsync() invoked.
ChkHr(spStoreCommerceWithConsumables->RequestProductPurchaseWithDisplayPropertiesAsync( productId, devOfferId, displayProperties, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestProductPurchaseOperation))
CurrentApp.LoadListingInformationAsync
Windows::ApplicationModel::Store::CurrentAppFactory::LoadListingInformationAsync
ChkHr(spStoreCommerce->LoadListingInformationAsync(nullptr, nullptr, cv.GetHStringReference().Get(), ppLoadListingOperation))
ChkArg(ppLoadListingOperation)
Windows::ApplicationModel::Store::CurrentAppFactory::GetAppReceiptAsync
GetAppReceiptAsync() invoked.
ChkArg(getAppReceiptOperation)
CurrentApp.GetAppReceiptAsync
GetUnfulfilledConsumablesAsync() invoked.
ChkHr(spStoreCommerce->GetAppReceiptAsync(cv.GetHStringReference().Get(), getAppReceiptOperation))
CurrentApp.GetUnfulfilledConsumablesAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetUnfulfilledConsumablesAsync
ChkHr(spStoreCommerceWithConsumables->GetUnfulfilledConsumablesAsync( cv.GetHStringReference().Get(), ppGetUnfulfilledConsumablesOperation))
ChkArg(ppGetUnfulfilledConsumablesOperation)
Windows::ApplicationModel::Store::CurrentAppFactory::ReportConsumableFulfillmentAsync
ReportConsumableFulfillmentAsync(%s, %s) invoked.
CurrentApp.ReportConsumableFulfillmentAsync
transactionId
ChkHr(spStoreCommerceWithConsumables->ReportConsumableFulfillmentAsync( productId, transactionId, cv.GetHStringReference().Get(), ppReportConsumableFulfillmentOperation))
ChkArg(ppReportConsumableFulfillmentOperation)
Windows::ApplicationModel::Store::CurrentAppFactory::GetProductReceiptAsync
GetProductReceiptAsync(%s) invoked.
ChkArg(getProductReceiptOperation)
CurrentApp.GetProductReceiptAsync
LoadListingInformationByProductIdsAsync() invoked.
ChkHr(spStoreCommerce->GetProductReceiptAsync(productId, cv.GetHStringReference().Get(), getProductReceiptOperation))
keywords
Windows::ApplicationModel::Store::CurrentAppFactory::LoadListingInformationByProductIdsAsync
ChkArg(productIds)
productIds
LoadListingInformationByKeywordsAsync() invoked.
ChkHr(spStoreCommerce->LoadListingInformationAsync( productIds, nullptr, cv.GetHStringReference().Get(), ppLoadListingOperation))
ChkArg(keywords)
Windows::ApplicationModel::Store::CurrentAppFactory::LoadListingInformationByKeywordsAsync
ReportProductFulfillment(%s) invoked.
ChkHr(spStoreCommerce->LoadListingInformationAsync( nullptr, keywords, cv.GetHStringReference().Get(), ppLoadListingOperation))
CurrentApp.ReportProductFulfillment
Windows::ApplicationModel::Store::CurrentAppFactory::ReportProductFulfillment
GetAppPurchaseCampaignIdAsync invoked.
ChkHr(spStoreCommerceWithConsumables->ReportConsumableFulfillmentSync(productId, cv.GetHStringReference().Get()))
CurrentApp.GetAppPurchaseCampaignIdAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetAppPurchaseCampaignIdAsync
ChkHr(spStoreCommerce->GetAppPurchaseCampaignIdAsync(cv.GetHStringReference().Get(), ppOperation))
ChkArg(ppOperation)
Windows::ApplicationModel::Store::CurrentAppFactory::GetCustomerPurchaseIdAsync
GetCustomerPurchaseIdAsync() invoked.
serviceTicket
publisherUserId
ChkArg(ppGetPurchaseIdOperation)
CurrentApp.GetCustomerPurchaseIdAsync
GetCustomerCollectionsIdAsync() invoked.
ChkHr(spStoreCommerce->GetCustomerPurchaseIdAsync( cv.GetHStringReference().Get(), serviceTicket, publisherUserId, ppGetPurchaseIdOperation))
CurrentApp.GetCustomerCollectionsIdAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetCustomerCollectionsIdAsync
ChkHr(spStoreCommerce->GetCustomerCollectionsIdAsync( cv.GetHStringReference().Get(), serviceTicket, publisherUserId, ppGetCollectionsIdOperation))
ChkArg(ppGetCollectionsIdOperation)
Windows::ApplicationModel::Store::CurrentAppFactory::GetAppWindowHandle
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_UI_Core_CoreWindow).Get(), &spCoreWindowStatic))
ChkHr(spCoreWindow.As(&spCoreWinInterop))
ChkHr(spCoreWindowStatic->GetForCurrentThread(&spCoreWindow))
ChkHr(m_spStoreCommerceFactory->CreateStoreCommerceServer(&spStoreCommerce))
ChkHr(spCoreWinInterop->get_WindowHandle(&hwnd))
ChkHr(spStoreCommerce->Initialize(cv.GetHStringReference().Get()))
Windows::ApplicationModel::Store::CurrentAppFactory::GetStoreCommerce
ChkHr(m_spStoreCommerce.As(spRef))
Windows::ApplicationModel::Store::CurrentAppFactory::GetRuntimeClassName
ChkHr(temp.Set(InternalGetRuntimeClassName()))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\CurrentAppServer.h
Oonecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewserver.cpp
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::Initialize
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::RequestProductPurchaseByProductIdAndSkuIdAsync
RequestProductPurchaseByProductIdAndSkuIdAsync(%s, %s) invoked.
StorePreview.RequestProductPurchaseByProductIdAndSkuIdAsync
skuId
ChkHr(MakeAndInitialize<MessageDialogHelper>(&spMessageDialogHelper, nullptr , hwnd))
ChkArg(ppRequestPurchaseBySkuIdOperation)
LoadAddOnProductInfosAsync() invoked.
ChkHr(spStoreCommerce->RequestProductPurchaseByProductIdAndSkuIdAsync( productId, skuId, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestPurchaseBySkuIdOperation))
StorePreview.LoadAddOnProductInfosAsync
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::LoadAddOnProductInfosAsync
ChkHr(spStoreCommerce->LoadAddOnProductInfosAsync(cv.GetHStringReference().Get(), ppLoadAddOnProductInfosOperation))
ChkArg(ppLoadAddOnProductInfosOperation)
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::GetStoreCommerce
!m_userObject || IsUMgrGetConstrainedUserTokenPresent()
onecore\internal\onecore\priv_sdk\inc\ConstrainedImpersonationUtil.h
ConstrainedImpersonateLoggedOnUser::GenerateImpersonationToken
ClientProcessUtils::GetCallingAppPackageFullName(_PFN.GetAddressOf())
storeAppInstallation
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storeconfigurationserver.cpp
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::StoreConfigurationServer
ChkHr(SetSystemConfigurationInternal(catalogHardwareManufacturerId, catalogStoreContentModifierId, systemConfigurationExpiration, catalogHardwareDescriptor))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetSystemConfiguration
ChkHr(SetMobileOperatorConfigurationInternal(mobileOperatorId, appDownloadLimitInMegabytes, updateDownloadLimitInMegabytes))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetMobileOperatorConfiguration
ChkHr(ClientProcessUtils::GetCallingAppPackageFamilyName(packageFamilyName.GetAddressOf()))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetStoreWebAccountId
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsStoreWebAccountId
ChkHr(SetStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), webAccountId))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::get_HardwareManufacturerInfo
ChkHr(IsStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), webAccountId, *value))
ChkHr(FilterUnsupportedFeaturesInternal(spPotentialSystemFeatures.Get(), resultsView))
ChkHr(GetHardwareManufacturerInfoInternal(value))
ChkHr(results.Set(resultsView.Get()))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync::<lambda_dac80fcf4f021b3300f78c8de702d2d0>::operator ()
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync
StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::get_PurchasePromptingPolicy
ChkHr(MakeAsyncOperation<CMarshaledInterfaceResult<IVectorView<StoreSystemFeature>>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), operation, TrustLevel::PartialTrust, [spThisKeepAlive, spPotentialSystemFeatures, cv](CMarshaledInterfaceResult<IVectorView<StoreSystemFeature>> & results) mutable -> HRESULT { HRESULT __hr = ((HRESULT)0L);; ComPtr<IVectorView<StoreSystemFeature>> resultsView; { { __hr = (FilterUnsupportedFeaturesInternal(spPotentialSystemFeatures.Get(), resultsView)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 230, __FSTREXP __FUNCTION__  , "ChkHr(FilterUnsupportedFeaturesInternal(spPotentialSystemFeatures.Get(), resultsView))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (results.Set(resultsView.Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 230, __FSTREXP __FUNCTION__  , "ChkHr(results.Set(resultsView.Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit:; Telemetry::EndOperation("StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync", (static_cast<HRESULT>(__hr)), cv.GetAnsi(), spThisKeepAlive->_PFN.Get()); CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::put_PurchasePromptingPolicy
ChkHr(StoreConfigurationServer::GetPurchasePromptingPolicyInternal(nullptr , value))
ChkArg(value)
ChkHr(StoreConfigurationServer::PutPurchasePromptingPolicyInternal(nullptr , value))
ChkHr(StoreConfigurationServer::HasStoreWebAccountInternal(nullptr , *value))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::HasStoreWebAccount
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::HasStoreWebAccountForUser
ChkArg(user)
ChkHr(WSCollector::CollectStoreLog(options, resultsView))
ChkHr(StoreConfigurationServer::HasStoreWebAccountInternal(user, *value))
StoreConfigurationServer::GetStoreLogDataAsync
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreLogDataAsync::<lambda_531498f7dc6d27188bb30f8fe1d656b9>::operator ()
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreLogDataAsync
options
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetStoreWebAccountIdForUser
ChkHr(MakeAsyncOperation<CMarshaledInterfaceResult<Windows::Storage::Streams::IRandomAccessStreamReference>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), operation, TrustLevel::PartialTrust, [spThisKeepAlive, options, cv](CMarshaledInterfaceResult<Windows::Storage::Streams::IRandomAccessStreamReference>& results) mutable -> HRESULT { HRESULT __hr = ((HRESULT)0L);; ComPtr<Windows::Storage::Streams::IRandomAccessStreamReference> resultsView; { { __hr = (WSCollector::CollectStoreLog(options, resultsView)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 339, __FSTREXP __FUNCTION__  , "ChkHr(WSCollector::CollectStoreLog(options, resultsView))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (results.Set(resultsView.Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 339, __FSTREXP __FUNCTION__  , "ChkHr(results.Set(resultsView.Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit:; Telemetry::EndOperation("StoreConfigurationServer::GetStoreLogDataAsync", (static_cast<HRESULT>(__hr)), cv.GetAnsi(), spThisKeepAlive->_PFN.Get()); CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsStoreWebAccountIdForUser
ChkHr(SetStoreWebAccountIdInternal(user, packageFamilyName.Get(), webAccountId))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetPurchasePromptingPolicyForUser
ChkHr(IsStoreWebAccountIdInternal(user, packageFamilyName.Get(), webAccountId, *value))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetPurchasePromptingPolicyForUser
ChkHr(StoreConfigurationServer::GetPurchasePromptingPolicyInternal(user, value))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreWebAccountId
ChkHr(StoreConfigurationServer::PutPurchasePromptingPolicyInternal(user, value))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreWebAccountIdForUser
ChkHr(GetStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), pValue))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetEnterpriseStoreWebAccountId
ChkHr(GetStoreWebAccountIdInternal(user, packageFamilyName.Get(), pValue))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetEnterpriseStoreWebAccountIdForUser
ChkHr(SetEnterpriseStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), webAccountId))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetEnterpriseStoreWebAccountId
ChkHr(SetEnterpriseStoreWebAccountIdInternal(user, packageFamilyName.Get(), webAccountId))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetEnterpriseStoreWebAccountIdForUser
ChkHr(GetEnterpriseStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), pValue))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::ShouldRestrictToEnterpriseStoreOnly
ChkHr(GetEnterpriseStoreWebAccountIdInternal(user, packageFamilyName.Get(), pValue))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::ShouldRestrictToEnterpriseStoreOnlyForUser
ChkHr(ShouldRestrictToEnterpriseStoreOnlyInternal(nullptr , value))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsPinToDesktopSupported
ChkHr(ShouldRestrictToEnterpriseStoreOnlyInternal(user, value))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsPinToStartSupported
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsPinToTaskbarSupported
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::PinToDesktop
ChkHr(CoCreateInstance(__uuidof(InstallServiceUserBroker), nullptr, CLSCTX_INPROC_SERVER, __uuidof(**(&pinToHelper)), IID_PPV_ARGS_Helper(&pinToHelper)))
ChkHr(impersonator.Impersonate())
ChkHr(pinToHelper->PinToShell(WindowsGetStringRawBuffer(appPackageFamilyName, nullptr), 0x02000000u))
OEMID
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::PinToDesktopForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetSystemConfigurationInternal
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"OEMID", WindowsGetStringRawBuffer(catalogHardwareManufacturerId, nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"SCMID", WindowsGetStringRawBuffer(catalogStoreContentModifierId, nullptr)))
SCMID
OEMDiscoveryTTL
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"Hardware", WindowsGetStringRawBuffer(catalogHardwareDescriptor, nullptr)))
AppDownloadLimit
ChkHr(RegistryHelper::SetQwordValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"OEMDiscoveryTTL", systemConfigurationExpiration.UniversalTime))
ChkHr(RegistryHelper::SetQwordValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"AppDownloadLimit", actualAppDownloadLimit))
UpdateDownloadLimit
ChkHr(RegistryHelper::SetQwordValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"UpdateDownloadLimit", actualUpdateDownloadLimit))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetMobileOperatorConfigurationInternal
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"MOID", WindowsGetStringRawBuffer(mobileOperatorId, nullptr)))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetStoreWebAccountIdInternal
ChkHr(ConvertWebAccountIdFromAppToRealIdForUser(user, AccountProviderType::MSA, callingAppPfn, webAccountId, realId.GetAddressOf()))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000001) ), RegistryHelper::STORE_REGISTRY_PATH, L"PrimaryWebAccountId", realId.GetRawBuffer(nullptr)))
PrimaryWebAccountId
ChkHr(ConvertWebAccountIdFromRealIdToAppForUser(user, AccountProviderType::MSA, callingAppPfn, realId.Get(), pWebAccountId))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreWebAccountIdInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetEnterpriseStoreWebAccountIdInternal
ChkHr(ConvertWebAccountIdFromAppToRealIdForUser(user, AccountProviderType::AAD, callingAppPfn, webAccountId, realId.GetAddressOf()))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000001) ), RegistryHelper::STORE_CURRENTIDENTITY_REGISTRY_PATH, L"StoreAADAccountId", realId.GetRawBuffer(nullptr)))
StoreAADAccountId
ChkHr(ConvertWebAccountIdFromRealIdToAppForUser(user, AccountProviderType::AAD, callingAppPfn, realId.Get(), pWebAccountId))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetEnterpriseStoreWebAccountIdInternal
ApplicationManagement
RequirePrivateStoreOnly
ChkBool(provider == AccountProviderType::MSA, ((HRESULT)0x8000FFFFL))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsStoreWebAccountIdInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetHardwareManufacturerInfoInternal
ChkAlloc(spManufacturerInfo)
StoreContentModifier
ChkHr(spManufacturerInfo->put_HardwareManufacturerId(buffer.Get()))
SystemManufacturer
ChkHr(spManufacturerInfo->put_StoreContentModifierId(buffer.Get()))
SystemProductName
ChkHr(spManufacturerInfo->put_ManufacturerName(buffer.Get()))
ChkHr(BuildKnownFeatureAndGuidArrays(systemFeatures, guidArray, knownFeaturesArray))
ChkHr(spManufacturerInfo->put_ModelName(buffer.Get()))
ChkHr(AskWuWhichHardwareIsAvailable(guidArray, availableArray))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::FilterUnsupportedFeaturesInternal
ChkHr(supportedFeaturesVector->GetView(&resultsView))
ChkHr(Vector<StoreSystemFeature>::Make(&supportedFeaturesVector))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::PutPurchasePromptingPolicyInternal
ChkHr(value->get_Value(&dwValue))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::AskWuWhichHardwareIsAvailable
ChkHr(CoCreateInstance(CLSID_HardwareCapability, nullptr, (CLSCTX_INPROC_SERVER|CLSCTX_LOCAL_SERVER|CLSCTX_REMOTE_SERVER), __uuidof(**(&spHardwareCapability)), IID_PPV_ARGS_Helper(&spHardwareCapability)))
ChkBool(wuResults != nullptr, ((HRESULT)0x80004003L))
ChkHr(spHardwareCapability->EvaluateHardwareCapabilities( GUID_WinStoreServiceID, arraySize, rawGuidArray, &wuResults, &hrOnlineCheck))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::BuildKnownFeatureAndGuidArrays
ChkHr(systemFeatures->First(&spIterator))
ChkHr(spIterator->get_Current(&feature))
ChkHr(spIterator->get_HasCurrent(&hasCurrent))
ChkHr(spIterator->MoveNext(&hasCurrent))
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Storage.Streams.IRandomAccessStreamReference>
Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStreamReference>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>
Windows.Foundation.IReference`1<UInt32>
4es`O
Hardware
ChkHr(AgileVector<HSTRING>::Make(&_actionFilters))
onecoreuap\enduser\winstore\licensing\winrt\lib\storeproductoptions.cpp
Windows::Services::Store::StoreProductOptions::RuntimeClassInitialize
VerifyCapability
ChkHr(ClientProcessUtils::IsCallerERA(&isERA))
ChkHr(IAPUtils::IsCallingProcessAppContainer(&isAppContainer))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storecommerceserver.cpp
ChkHr(ClientProcessUtils::GetAppContentTypeForInstalledPackage(_packageFullName.Get(), &_appType))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::Initialize
ChkHr(InitializeIdsFromLicense())
ChkHr(LicenseInformationServer::CreateInstance( _packageFullName.Get(), _appType, cv.Get(), &_spLicenseInformationInternal))
packageFullName = %s, appType = %d, appId = %s, appCatalogId = %s
ChkHr(MakeAndInitialize<ProductIdCache>(&_spProductIdCache))
ChkHr(ClientProcessUtils::GetCallingAppWindowHandle(&hwndOwner))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestAppPurchaseAsync
ChkHr(spRequestAppPurchaseInfo.As(&spAsyncInfo))
ChkHr(MakeAndInitialize<RequestAppPurchaseOperationServer>( &spRequestAppPurchaseInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestAppPurchaseId), fIncludeReceipt, hwndOwner, pMessageDialogHelper ))
(((HRESULT)(spAsyncInfo->get_ErrorCode((&(__hr))))) >= 0)
(((HRESULT)(spAsyncInfo->get_Status(&status))) >= 0)
ChkHr(MakeAndInitialize<RequestProductPurchaseOperationServer>( &spRequestProductPurchaseInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, fIncludeReceipt, hwndOwner, pMessageDialogHelper ))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseAsync
ChkHr(MakeAndInitialize<RequestProductPurchaseWithResultsOperationServer>( &spRequestProductPurchaseWithResultsInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, hwndOwner, pMessageDialogHelper ))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseWithResultsAsync
ChkAlloc(spRequestProductPurchaseWithDisplayPropertiesInfo)
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseWithDisplayPropertiesAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::LoadListingInformationAsync
ChkHr(spRequestProductPurchaseWithDisplayPropertiesInfo->RuntimeClassInitialize( _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, hwndOwner, devOfferId, pDisplayProperties, pMessageDialogHelper ))
keywords
ChkHr(__winrt_hr__)
ChkArg(ppAppReceiptOperation)
ChkHr(hrCommerceOp)
ChkHr(MakeAndInitialize<ReceiptRetrievalOperationServer>( &spLoadAsyncInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_receiptRequestId) ))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppReceiptAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetProductReceiptAsync
ChkArg(ppProductReceiptOperation)
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetLinkUri
ChkHr(MakeAndInitialize<ProductReceiptRetrievalOperationServer>( &spLoadAsyncInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_receiptRequestId), productId ))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppId
ChkArg(appId)
ChkHr(_spLicenseInformationInternal.CopyTo(__uuidof(**(value)), IID_PPV_ARGS_Helper(value)))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetLicenseInformation
ChkHr(MakeAndInitialize<GetUnfulfilledConsumablesOperationServer>( &spCheckConsumables, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_receiptRequestId)))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetUnfulfilledConsumablesAsync
ChkHr(MakeAndInitialize<ReportConsumableFulfillmentOperationServer>( &spReportProdFulfillOp, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_fulfillRequestId), productId, transactionId ))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::ReportConsumableFulfillmentAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::ReportConsumableFulfillmentSync
ChkHr(CollectionsServiceProxyV6::GetUnfulfilledConsumables(GetAppCatalogId(cv.Get()), cv.Get(), items))
ChkHr(JsonHelpers::GetNamedString(item, L"inAppOfferToken", itemInAppOfferToken.GetAddressOf()))
inAppOfferToken
transactionId
ChkHr(JsonHelpers::GetNamedString(item, L"productId", itemProductId.GetAddressOf()))
ChkHr(CollectionsServiceProxyV6::ConsumeConsumable(itemProductId.Get(), itemTransactionId.Get(), cv.Get()))
ChkHr(JsonHelpers::GetNamedString(item, L"transactionId", itemTransactionId.GetAddressOf()))
ChkHr(MakeAndInitialize<RequestProductPurchaseBySkuIdOperationServer>( &spRequestPurchaseBySkuIdOperation, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, skuId, hasPreviewCapability, hwndOwner, pMessageDialogHelper ))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseByProductIdAndSkuIdAsync
ChkHr(MakeAsyncOperation<CMarshaledInterfaceResult<IVectorView<StorePreviewProductInfo*>>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), ppLoadAddOnProductInfosOperation, BaseTrust, [spThisKeepAlive, cv](CMarshaledInterfaceResult<IVectorView<StorePreviewProductInfo*>>& result) mutable { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); ComPtr<IVectorView<StorePreviewProductInfo*>> spProductInfos; HRESULT hrOperation = spThisKeepAlive->LoadAddOnProductInfos(cvExtend.Get(), &spProductInfos); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(spProductInfos.Get()); } Telemetry::EndOperation("StorePreview.LoadAddOnProductInfosAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get()); return hrOperation; }))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::LoadAddOnProductInfosAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppCatalogId
Going to catalog to find BigCatId: QueryCatalogForBigCatIdByPackageFullName
ChkHr(CatalogServiceProxyV6::QueryCatalogForBigCatIdByPackageFullNameAndType( _packageFullName.Get(), _appType, pCV, _appCatalogId.GetAddressOf()))
Going to catalog again to find BigCatId: QueryCatalogForBigCatIdByPackageFullNameAndType
ChkHr(_spLicenseInformationInternal->GetProductId(_appCatalogId.GetAddressOf()))
Catalog failure looking for BigCatId.
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::InitializeIdsFromLicense
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::LoadAddOnProductInfos
ChkArg(ppValue)
ChkHr(AgileVector<StorePreviewProductInfo*>::Make(&spProductInfosList))
ChkHr(StoreInfoBuilders::BuildStoreAppInfo( this, pCV, nullptr, &spStoreAppInfo))
  <empty list>
Add-On Product Infos (CV = %hs):
ChkHr(spProductInfo->Initialize( spStoreAppInfo->Locale, spStoreAppInfo->Market, spStoreAppInfo, pInAppOffer))
ChkAlloc(spProductInfo)
  %02u inAppOfferToken = %s, productId = %s, type = %u, price = %s, name = %s
ChkHr(spProductInfosList->Append(spProductInfo.Get()))
ChkHr(spProductInfosList->GetView(&spProductInfos))
  <missing list>
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppPurchaseCampaignIdAsync
ChkHr(CopyToNotNull(spProductInfos, ppValue))
ChkArg(getPurchaseIdOperation)
ChkHr(MakeAsyncOperation<CHSTRINGResult>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), ppOperation, BaseTrust, [spThisKeepAlive, cv](CHSTRINGResult& result) mutable -> HRESULT { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); HString campaignId; HRESULT hrOperation = CollectionsServiceProxyV6::GetCampaignId( spThisKeepAlive->GetAppCatalogId(cvExtend.Get()), cvExtend.Get(), campaignId.GetAddressOf()); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(campaignId.Get()); } Telemetry::EndOperation("CurrentApp.GetAppPurchaseCampaignIdAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get()); return hrOperation; }))
ChkHr(::WindowsDuplicateString(publisherUserId, &publisherUserIdCopy))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetCustomerPurchaseIdAsync
ChkHr(MakeAsyncOperation<CHSTRINGResult>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), getPurchaseIdOperation, BaseTrust, [spThisKeepAlive, serviceTicketCopy, publisherUserIdCopy, cv](CHSTRINGResult& result) mutable -> HRESULT { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); HString purchaseId; HRESULT hrOperation = CatalogServiceProxyV6::GetCustomerPurchaseId( serviceTicketCopy, publisherUserIdCopy, cvExtend.Get(), purchaseId.GetAddressOf()); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(purchaseId.Get()); } Telemetry::EndOperation("CurrentApp.GetCustomerPurchaseIdAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get(), "serviceTicket", serviceTicketCopy, "publisherUserId", publisherUserIdCopy); ::WindowsDeleteString(serviceTicketCopy); ::WindowsDeleteString(publisherUserIdCopy); return hrOperation; }))
ChkHr(::WindowsDuplicateString(serviceTicket, &serviceTicketCopy))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetCustomerCollectionsIdAsync
ChkArg(getCollectionsIdOperation)
ChkBool((nullptr != productId), ((HRESULT)0x803F6103L))
ChkHr(MakeAsyncOperation<CHSTRINGResult>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), getCollectionsIdOperation, BaseTrust, [spThisKeepAlive, serviceTicketCopy, publisherUserIdCopy, cv](CHSTRINGResult& result) mutable -> HRESULT { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); HString collectionsId; HRESULT hrOperation = CatalogServiceProxyV6::GetCustomerCollectionsId( serviceTicketCopy, publisherUserIdCopy, cvExtend.Get(), collectionsId.GetAddressOf()); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(collectionsId.Get()); } Telemetry::EndOperation("CurrentApp.GetCustomerCollectionsIdAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get(), "serviceTicket", serviceTicketCopy, "publisherUserId", publisherUserIdCopy); ::WindowsDeleteString(serviceTicketCopy); ::WindowsDeleteString(publisherUserIdCopy); return hrOperation; }))
ChkHr(WindowsCompareStringOrdinal(productId, _currentProductBeingPurchased.Get(), &comparisonResult))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetExclusiveLockForProduct
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>
onecoreuap\enduser\winstore\licensing\winrt\lib\storepackageinstalloptions.cpp
Windows::Services::Store::StorePackageInstallOptions::get_AllowForcedAppRestart
ChkHr(_hstrName.Set(hstrName))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productpurchasedisplaypropertiesserver.cpp
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::Initialize
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesFactory::CreateProductPurchaseDisplayProperties
ChkHr(spDisplayData->Initialize(hstrName))
ChkHr(spDisplayData->Initialize(nullptr))
ChkHr(((HRESULT)0x8007000EL))
_fInitialized
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesFactory::ActivateInstance
ChkHr(_hstrName.CopyTo(hstrValue))
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::get_Name
ChkHr(_hstrDescription.CopyTo(hstrValue))
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::get_Description
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::get_Image
ChkHr(_hstrName.Set(hstrValue))
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::put_Name
ChkHr(_hstrDescription.Set(hstrValue))
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::put_Description
ChkHr(IAPUtils::CreateUri(hstrUri.Get(), &_uriRuntimeClass))
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::put_Image
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>>
Windows.Foundation.Collections.IMap`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>
Windows.Foundation.Collections.IMapView`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
ChkHr(CoCreateInstance(__uuidof(ApplicationLicenseManager), nullptr, CLSCTX_LOCAL_SERVER, __uuidof(**(alm.GetAddressOf())), IID_PPV_ARGS_Helper(alm.GetAddressOf())))
storeLicenseManagement
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\winrtapi.cpp
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetALM
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::AddLicenseAsync::<lambda_a4dcb7190b92aac4ab81eeac41b6a14b>::operator ()
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_DataReader).Get(), &dataReaderFactory))
ChkHr(licenseReader->get_UnconsumedBufferLength(&licenseBufferLength))
ChkHr(dataReaderFactory->FromBuffer(licenseBuffer.Get(), licenseReader.GetAddressOf()))
ChkHr(licenseReader->ReadBytes(licenseBufferLength, licenseBuffer))
ChkAlloc(licenseBuffer)
ChkHr(alm->LoadLicenseWithBytes(AppType_UniversalApp, licenseBufferLength, licenseBuffer, L"", licenseInstance.GetAddressOf()))
ChkHr(GetALM(alm.GetAddressOf()))
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::AddLicenseAsync
ChkHr(VerifyCapability(StoreLicenseManagement.Get()))
ChkHr(spThis->GetSatisfactionInfos(contentIdsVectorView.Get(), keyIdsVectorView.Get(), licenseSatisfactionResult.GetAddressOf()))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<AddLicenseAsyncActionName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), Action, TrustLevel::BaseTrust, [licenseBuffer](CNoResult &) -> HRESULT { HRESULT __hr = ((HRESULT)0L);; { ComPtr<IDataReaderStatics> dataReaderFactory; { { __hr = (Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_DataReader).Get(), &dataReaderFactory)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_DataReader).Get(), &dataReaderFactory))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<IDataReader> licenseReader; { { __hr = (dataReaderFactory->FromBuffer(licenseBuffer.Get(), licenseReader.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(dataReaderFactory->FromBuffer(licenseBuffer.Get(), licenseReader.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; UINT32 licenseBufferLength; { { __hr = (licenseReader->get_UnconsumedBufferLength(&licenseBufferLength)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(licenseReader->get_UnconsumedBufferLength(&licenseBufferLength))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; SP_CPP_ARRAY<BYTE> licenseBuffer; licenseBuffer = new BYTE[licenseBufferLength]; { if (!(licenseBuffer)) { Windows::Foundation::Diagnostics::OriginateError(((HRESULT)0x8007000EL), nullptr); } { if (!(licenseBuffer)) { { __hr = (((HRESULT)0x8007000EL)); }; ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkAlloc(licenseBuffer)", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; }; { { __hr = (licenseReader->ReadBytes(licenseBufferLength, licenseBuffer)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(licenseReader->ReadBytes(licenseBufferLength, licenseBuffer))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<IApplicationLicenseManager3> alm; { { __hr = (GetALM(alm.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(GetALM(alm.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<ILicenseInstance> licenseInstance; { { __hr = (alm->LoadLicenseWithBytes(AppType_UniversalApp, licenseBufferLength, licenseBuffer, L"", licenseInstance.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(alm->LoadLicenseWithBytes(AppType_UniversalApp, licenseBufferLength, licenseBuffer, L\"\", licenseInstance.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; } goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(result.Set(licenseSatisfactionResult.Get()))
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetSatisfactionInfosAsync::<lambda_96802696d8bbe804f90b8c8f51cd7d02>::operator ()
ChkArg(ContentIdentifiers)
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetSatisfactionInfosAsync
ChkHr(spContentIdsIter->get_HasCurrent(&cHasCurrent))
ChkHr(ContentIdentifiers->First(&spContentIdsIter))
ChkHr(AgileVector<HSTRING>::Make(&contentIds))
ChkBool(!!cHasCurrent, ((HRESULT)0x80070057L))
ChkHr(contentIds->Append(contentId.Get()))
ChkHr(spContentIdsIter->get_Current(contentId.GetAddressOf()))
ChkHr(AgileVector<HSTRING>::Make(&keyIds))
ChkHr(spContentIdsIter->MoveNext(&cHasCurrent))
ChkHr(spKeyIdsIter->get_HasCurrent(&eHasCurrent))
ChkHr(KeyIdentifiers->First(&spKeyIdsIter))
ChkHr(keyIds->Append(keyId.Get()))
ChkHr(spKeyIdsIter->get_Current(keyId.GetAddressOf()))
ChkHr(((HRESULT)0x80070057L))
ChkHr(spKeyIdsIter->MoveNext(&eHasCurrent))
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::RefreshLicensesAsync::<lambda_9a692ce9984b8890efde9b4e51608606>::operator ()
ChkHr(hrOp)
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::RefreshLicensesAsync
ChkHr(alm->RefreshLicenses(refreshPolicy))
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetSatisfactionInfos
ChkHr(MakeAsyncAction<AsyncCausalityOptions<RefreshLicensesAsyncActionName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), Action, TrustLevel::BaseTrust, [refreshPolicy](CNoResult &) -> HRESULT { HRESULT __hr = ((HRESULT)0L);; ComPtr<IApplicationLicenseManager3> alm; { { __hr = (GetALM(alm.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 206, __FSTREXP __FUNCTION__  , "ChkHr(GetALM(alm.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (alm->RefreshLicenses(refreshPolicy)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 206, __FSTREXP __FUNCTION__  , "ChkHr(alm->RefreshLicenses(refreshPolicy))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(keyIds->get_Size(&keySize))
ChkHr(hrMake)
ChkHr(contentIds->GetAt(i, contentId.GetAddressOf()))
ChkHr(contentIds->get_Size(&contentSize))
No Sku Id could be obtained from the preview license response.
ChkHr(keyIds->GetAt(i, keyId.GetAddressOf()))
ChkHr(MakeAndInitialize<LicenseSatisfactionInfo>( &leinfo, license))
No contentInfo could be obtained from the preview license response.
ChkHr(licenseSatisfactionInfoForAll->Clear())
ChkHr(licenseSatisfactionInfoForAll->Insert(contentId.Get(), leinfo.Get(), &replaced))
ChkHr(MakeAndInitialize<LicenseSatisfactionResult>( result, licenseSatisfactionInfoReadOnlyForAll, hrOperation, skuId ? HStringReference(skuId).Get() : nullptr))
ChkHr(licenseSatisfactionInfoForAll->GetView(&licenseSatisfactionInfoReadOnlyForAll))
Windows.Foundation.IAsyncAction
Windows.ApplicationModel.Store.LicenseManagement.AddLicenseAsync
Windows.ApplicationModel.Store.LicenseManagement.RefreshLicensesAsync
ChkHr(request->get_ClientId(clientId.GetAddressOf()))
className
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\tokenbrokercomponentuilauncher.cpp
Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper::RequestTokenWithUIElementHostingAsync
ChkHr(request->get_Scope(scope.GetAddressOf()))
0xABBACAB
ChkHr(JsonParser::ParseJSONStringToObject( scope, &requestParams, responseTable))
windowTitle
ChkHr(::ActivateInstance(StoreContextServerClassId.Get(), storeContextServer.GetAddressOf()))
ChkBool(hwnd != 0, HRESULT_FROM_WIN32(1168L))
ChkHr(storeContextServer->FocusOnWindow((UINT64)hwnd))
ChkHr(storeContextServer->Initialize(false, nullptr))
ChkHr(componentLauncher->RequestTokenWithUIElementHostingAsync(request, uiElement, asyncInfo))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Security_Authentication_Web_Core_WebAuthenticationCoreManager).Get(), &componentLauncher))
ChkHr(componentLauncher->RequestTokenWithUIElementHostingAndWebAccountAsync(request, account, uiElement, asyncInfo))
Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper::RequestTokenWithUIElementHostingAndWebAccountAsync
ParseJSONStringToObject(DEBUG_PARSER_PARAMETERS_ARGS jsonString.Get(), pObj, table)
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreUninstallStorePackageResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreSendRequestResult>
Windows.Foundation.IAsyncOperation`1<Boolean>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreConsumableResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreProductQueryResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreAcquireLicenseResult>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
zWindows::Services::Store::StoreContextLicenseChangedCallback::RuntimeClassInitialize
ChkHr(AsWeak(pStoreContext, &_wrStoreContext))
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreUninstallStorePackageResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreUninstallStorePackageResult *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreUninstallStorePackageResult>
-Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StorePackageUpdate *> *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StorePackageUpdate *> *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<bool>,struct Windows::Foundation::IAsyncOperationCompletedHandler<bool>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Boolean>
!*WPq
$Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreCanAcquireLicenseResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreCanAcquireLicenseResult *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreAcquireLicenseResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreAcquireLicenseResult *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAcquireLicenseResult>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreConsumableResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreConsumableResult *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreConsumableResult>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreProductQueryResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreProductQueryResult *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductQueryResult>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreProductResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreProductResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreSendRequestResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreSendRequestResult *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreSendRequestResult>
onecoreuap\enduser\winstore\licensing\winrt\lib\StoreContext.h
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreProductPagedQueryResult>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreProductPagedQueryResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreProductPagedQueryResult *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductPagedQueryResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StorePurchaseResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreRateAndReviewResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreRateAndReviewResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StorePurchaseResult>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreProductResult>
Windows::Services::Store::StoreContextFactory::GetDefault() invoked. (CV:%hs)
This function must be called from a UI thread
onecoreuap\enduser\winstore\licensing\winrt\lib\storecontext.cpp
Windows::Services::Store::StoreContextFactory::GetDefault
ChkHr(ClientProcessUtils::GetCallingAppPackageFullName(packageFullName.GetAddressOf()))
ChkArg(ppStoreContext)
Windows::Services::Store::StoreContextFactory::GetForUser() invoked. (CV:%hs)
ChkHr(MakeAndInitialize<StoreContext>(ppStoreContext, cv.GetAnsi(), nullptr, packageFullName.Get()))
ChkArg(pUser)
Windows::Services::Store::StoreContextFactory::GetForUser
ChkHr(::ActivateInstance( StoreContextServerClassId.Get(), storeContextServer.GetAddressOf()))
ChkHr(MakeAndInitialize<StoreContext>(ppStoreContext, cv.GetAnsi(), pUser, packageFullName.Get()))
ChkHr(storeContextServer->SetUser(pUser))
Windows::Services::Store::StoreContext::CreateStoreContextServer
ChkHr(_packageFullName.Set(PFN))
ChkHr(storeContextServer->Initialize(pUser != nullptr, _spLicenseChangedCallback.Get()))
ChkHr(MakeAndInitialize<StoreContextLicenseChangedCallback>(&_spLicenseChangedCallback, this))
Windows::Services::Store::StoreContext::RuntimeClassInitialize
Windows::Services::Store::StoreContext::SendStoreRequestAsync(%u, %s) invoked. (CV:%hs)
ChkHr(CreateStoreContextServer(pUser, _spStoreContextServer))
ChkHr(JsonHelpers::ParseToJsonObject(WindowsGetStringRawBuffer(parametersAsJson, nullptr), &jsonObject))
Windows::Services::Store::StoreContext::SendStoreRequestAsync
Xtoken
UserId
Order
ChkHr(jsonObject->SetNamedValue(HStringReference(g_DoNotLogTheseValues[i]).Get(), nullptr))
onlineIdTicket
ChkHr(_spStoreContextServer->CaptureStoreContextCallerData(reinterpret_cast<UINT64>(hwnd), &callerData))
ChkHr(JsonHelpers::Stringify(jsonObject, cleansedParameterAsJson.GetAddressOf()))
parametersAsJson
ChkHr(MakeAndInitialize<StoreRequestOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), requestKind, parametersAsJson, _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::get_User() invoked. (CV:%hs)
requestKind
Windows::Services::Store::StoreContext::get_User
Windows::Services::Store::StoreContext::GetCustomerPurchaseIdAsync
Windows::Services::Store::StoreContext::GetCustomerPurchaseIdAsync(%s, %s) invoked. (CV:%hs)
ChkArg(serviceTicket)
ChkArg(publisherUserId)
Windows::Services::Store::StoreContext::GetCustomerCollectionsIdAsync(%s, %s) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetCustomerPurchaseIdOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), serviceTicket, publisherUserId, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetCustomerCollectionsIdOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), serviceTicket, publisherUserId, _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::GetCustomerCollectionsIdAsync
Windows::Services::Store::StoreContext::GetAppLicenseAsync
Windows::Services::Store::StoreContext::GetAppLicenseAsync() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetStoreProductForCurrentAppAsync() invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetOfflineLicensesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetStoreProductOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::GetStoreProductForCurrentAppAsync
Windows::Services::Store::StoreContext::GetStoreProductsAsync
Windows::Services::Store::StoreContext::GetStoreProductsAsync([%s, %s]) invoked. (CV:%hs)
productKinds
storeIds
ChkHr(IAPUtils::CheckProductKinds(productKinds))
ChkArg(storeIds)
ChkHr(hrJoin)
ChkHr(hrFamilies)
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsAsync([%s]) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<BulkHydrateOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, storeIds, nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAssociatedStoreProductsOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsAsync
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsWithPagingAsync
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsWithPagingAsync([%s], %u) invoked. (CV:%hs)
ChkBool(maxItemsToRetrieve > 0, ((HRESULT)0x80070057L))
maxItemsToRetrieve
Windows::Services::Store::StoreContext::GetUserCollectionAsync([%s]) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetAssociatedStoreProductsPagedOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, maxItemsToRetrieve, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetUserCollectionOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::GetUserCollectionAsync
Windows::Services::Store::StoreContext::GetUserCollectionWithPagingAsync
Windows::Services::Store::StoreContext::GetUserCollectionWithPagingAsync([%s], %u) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetUserCollectionPagedOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, maxItemsToRetrievePerPage, _InterlockedIncrement(&_asyncIds)))
maxItemsToRetrievePerPage
Windows::Services::Store::StoreContext::GetConsumableBalanceRemainingAsync
Windows::Services::Store::StoreContext::GetConsumableBalanceRemainingAsync(%s) invoked. (CV:%hs)
ChkArg(productStoreId)
productStoreId
Windows::Services::Store::StoreContext::AcquireStoreLicenseForOptionalPackageAsync invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetConsumableBalanceRemainingOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productStoreId, _InterlockedIncrement(&_asyncIds)))
ChkArg(pOptionalPackage)
Windows::Services::Store::StoreContext::AcquireStoreLicenseForOptionalPackageAsync
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseForOptionalPackageAsync invoked. (CV:%hs)
ChkHr(MakeAndInitialize<AcquireStoreLicenseForOptionalPackageOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), pOptionalPackage, _InterlockedIncrement(&_asyncIds)))
ChkHr(GetPackageFamilyNameFromPackage(pOptionalPackage, packageFamilyName))
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseForOptionalPackageAsync
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseAsync
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::add_OfflineLicensesChanged
Windows::Services::Store::StoreContext::add_OfflineLicensesChanged() invoked. (CV:%hs)
ChkArg(pHandler)
ChkArg(pToken)
Windows::Services::Store::StoreContext::remove_OfflineLicensesChanged(%llu) invoked. (CV:%hs)
ChkHr(_offlineLicensesChangedEvent.Add(pHandler, pToken))
ChkHr(_offlineLicensesChangedEvent.Remove(token))
Windows::Services::Store::StoreContext::remove_OfflineLicensesChanged
Windows::Services::Store::StoreContext::ReportConsumableFulfillmentAsync
Windows::Services::Store::StoreContext::ReportConsumableFulfillmentAsync(%s, %u, %s) invoked. (CV:%hs)
quantity
trackingId
Windows::Services::Store::StoreContext::RequestPurchaseAsync(%s) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<ReportConsumableOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productStoreId, quantity, trackingId, _InterlockedIncrement(&_asyncIds)))
storeId
Windows::Services::Store::StoreContext::RequestPurchaseAsync
Windows::Services::Store::StoreContext::RequestPurchaseWithPurchasePropertiesAsync(%s) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<RequestPurchaseOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), storeId, nullptr, nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<RequestPurchaseOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), storeId, storePurchaseProperties, nullptr, _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::RequestPurchaseWithPurchasePropertiesAsync
Windows::Services::Store::StoreContext::GetIsAnySkuInstalledAsync
Windows::Services::Store::StoreContext::GetIsAnySkuInstalledAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAppAndOptionalStorePackageUpdatesAsync invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetIsAnySkuInstalledOperation>( ppOperation, productStoreId, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAppAndSupplementalStorePackageUpdatesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::GetAppAndOptionalStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::RequestDownloadStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::RequestDownloadStorePackageUpdatesAsync invoked. (CV:%hs)
ChkHr(CreateMessageDialogHelper(hwnd, dialogHelper))
ChkArg(pStorePackageUpdates)
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackageUpdatesAsync invoked. (CV:%hs)
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, false, true, false, cv.GetAnsi(), dialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, true, true, false, cv.GetAnsi(), dialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesAsync
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::FindStoreProductForPackageAsync(%s) invoked. (CV:%hs)
ChkHr(_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync(cv, __FSTREXP __FUNCTION__  , pStoreIds, true , false , nullptr , ppOperation))
ChkHr(hrKinds)
Windows::Services::Store::StoreContext::FindStoreProductForPackageAsync
ChkHr(hrPackage)
ChkArg(package)
Windows::Services::Store::StoreContext::get_CanSilentlyDownloadStorePackageUpdates() invoked. (CV:%hs)
ChkHr(MakeAndInitialize<FindStoreProductForPackageOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, package, _InterlockedIncrement(&_asyncIds)))
ChkHr(storeContextServer->CanSilentlyDownloadStorePackageUpdates(cv.GetHStringReference().Get(), value))
Windows::Services::Store::StoreContext::get_CanSilentlyDownloadStorePackageUpdates
Windows::Services::Store::StoreContext::TrySilentDownloadStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::TrySilentDownloadStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::TrySilentDownloadAndInstallStorePackageUpdatesAsync invoked. (CV:%hs)
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, false, false, false, cv.GetAnsi(), nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, true, false, true, cv.GetAnsi(), nullptr, _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::TrySilentDownloadAndInstallStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::GetAssociatedStoreQueueItemsAsync
Windows::Services::Store::StoreContext::GetAssociatedStoreQueueItemsAsync invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetAssociatedStoreQueueItemsOperation>( operation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, nullptr, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkArg(operation)
Windows::Services::Store::StoreContext::GetStoreQueueItemsAsync
Windows::Services::Store::StoreContext::GetStoreQueueItemsAsync([%s]) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetStoreQueueItemsOperation>( operation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), storeIds, _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync([%s, %s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetStoreProductsWithOptionsAsync([%s, %s, %s]) invoked. (CV:%hs)
ChkHr(_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync(cv, __FSTREXP __FUNCTION__  , storeIds, true , false , storePackageInstallOptions, operation))
actionFilters
Windows::Services::Store::StoreContext::GetStoreProductsWithOptionsAsync
ChkHr(hrJoinStoreIds)
ChkBool(filterCount < 2, ((HRESULT)0x80070057L))
ChkHr(MakeAndInitialize<BulkHydrateOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, storeIds, storeProductOptions, _InterlockedIncrement(&_asyncIds)))
ChkHr(hrJoinActionFilters)
Windows::Services::Store::StoreContext::DownloadAndInstallStorePackagesAsync
Windows::Services::Store::StoreContext::DownloadAndInstallStorePackagesAsync([%s]) invoked. (CV:%hs)
(invalid)
ChkHr(_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync( cv, __FSTREXP __FUNCTION__  , storeIds, false, false, nullptr, operation))
Windows::Services::Store::StoreContext::RequestUninstallStorePackageAsync
Windows::Services::Store::StoreContext::RequestUninstallStorePackageAsync invoked by %s for %s. (CV:%hs)
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , 0, packageFamilyName.Get(), true , operation))
ChkHr(hrGetPackageFamilyName)
Windows::Services::Store::StoreContext::RequestRateAndReviewAppAsync
Windows::Services::Store::StoreContext::RequestRateAndReviewAppAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::SetInstallOrderForAssociatedStoreQueueItemsAsync invoked. (CV:%hs)
ChkHr(MakeAndInitialize<RequestStoreRateAndReviewOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkArg(items)
Windows::Services::Store::StoreContext::SetInstallOrderForAssociatedStoreQueueItemsAsync
Windows::Services::Store::StoreContext::RequestUninstallStorePackageByStoreIdAsync invoked by %s for %s. (CV:%hs)
ChkHr(MakeAndInitialize<GetAssociatedStoreQueueItemsOperation>( operation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, items, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , storeId, 0, true , operation))
Windows::Services::Store::StoreContext::RequestUninstallStorePackageByStoreIdAsync
Windows::Services::Store::StoreContext::UninstallStorePackageAsync
Windows::Services::Store::StoreContext::UninstallStorePackageAsync invoked by %s for %s. (CV:%hs)
Windows::Services::Store::StoreContext::UninstallStorePackageByStoreIdAsync invoked by %s for %s. (CV:%hs)
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , 0, packageFamilyName.Get(), false , operation))
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , storeId, 0, false , operation))
Windows::Services::Store::StoreContext::UninstallStorePackageByStoreIdAsync
Windows::Services::Store::StoreContext::UninstallStorePackageAsyncHelper
ChkArg(storeId || packageFamilyName)
ChkHr(MakeAndInitialize<UninstallStorePackageOperation>( operation, _packageFullName.Get(), function, storeId, packageFamilyName, shouldPrompt, dialogHelper.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
!(storeId && packageFamilyName)
Windows::Services::Store::StoreContext::GetAppWindowHandle
Windows::Services::Store::StoreContext::GetPackageFamilyNameFromPackage
ChkHr(coreWindowStatic->GetForCurrentThread(coreWindow.GetAddressOf()))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_UI_Core_CoreWindow).Get(), coreWindowStatic.GetAddressOf()))
ChkHr(coreApp->get_MainView(coreAppView.GetAddressOf()))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_ApplicationModel_Core_CoreApplication).Get(), coreApp.GetAddressOf()))
ChkHr(coreWindow.As(&coreWinInterop))
ChkHr(coreAppView->get_CoreWindow(coreWindow.GetAddressOf()))
ChkHr(items->get_Size(&count))
ChkHr(coreWinInterop->get_WindowHandle(&hwnd))
ChkHr(items->GetAt(i, inspectable.GetAddressOf()))
Windows::Services::Store::StoreContext::AssociateWithStoreContext
ChkHr(productPrivate->SetStoreContext(this))
ChkHr(inspectable.As(&productPrivate))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( operation, _packageFullName.Get(), pszOperationName, this, storeIds, storePackageInstallOptions, shouldPromptForConsent, totallySilent, cv.GetAnsi(), dialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StorePurchaseResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StorePurchaseResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreRateAndReviewResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreRateAndReviewResult *>,0>::DoWorkStub
_spStoreContextServer.As(&result)
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StoreQueueItem *> *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StoreQueueItem *> *>,0>::DoWorkStub
Windows::Services::Store::StoreContext::GetStoreContextServer
onecoreuap\enduser\winstore\licensing\winrt\lib\storerequesthelper.cpp
Windows::Services::Store::StoreRequestHelperFactory::SendRequestAsync
ChkHr(spStoreContext.As(&spStoreContextPrivate))
ChkArg(context)
ChkHr(spStoreContextPrivate->SendStoreRequestAsync( requestKind, parametersAsJson, ppOperation))
_name.Set(name)
onecoreuap\enduser\winstore\licensing\winrt\lib\purchasedisplayproperties.cpp
Windows::Services::Store::StorePurchaseProperties::RuntimeClassInitialize
Windows::Services::Store::StorePurchaseProperties::get_Name
::WindowsDuplicateString(_name.Get(), pValue)
Windows::Services::Store::StorePurchaseProperties::put_Name
_name.Set(value)
Windows::Services::Store::StorePurchaseProperties::get_ExtendedJsonData
::WindowsDuplicateString(_extendedJsonData.Get(), pValue)
Windows::Services::Store::StorePurchaseProperties::put_ExtendedJsonData
_extendedJsonData.Set(value)
Windows::Services::Store::StorePurchasePropertiesFactory::Create
ChkArg(ppData)
Windows::Services::Store::StorePurchasePropertiesFactory::ActivateInstance
ChkHr(MakeAndInitialize<StorePurchaseProperties>(ppData, name))
ChkHr(MakeAndInitialize<StorePurchaseProperties>(ppData, nullptr))
Windows.UI.Popups.MessageDialog
Windows.Internal.Shell.ModalExperience.ModalExperienceManager
Windows.Internal.Shell.ModalExperience.ModalExperienceOptions
StringHelpers::TrimEnds
length >= (count * 2)
ChkBool(length >= (count * 2), ((HRESULT)0x80070057L))
onecoreuap\enduser\winstore\licensing\winrt\lib\stringhelpers.cpp
ChkHr(::WindowsStringHasEmbeddedNull(inputString, &hasEmbeddedNull))
ChkHr(::WindowsSubstringWithSpecifiedLength( str, count, length - (count * 2), resultString))
ChkBool(!hasEmbeddedNull, ((HRESULT)0x80070057L))
StringHelpers::SplitString
ChkHr(outputs->Append(inputString))
ChkHr(AgileVector<HSTRING>::Make(&outputs))
ChkHr(outputs->Append(output.Get()))
ChkHr(WindowsSubstringWithSpecifiedLength(inputString, lastDelimeterIndex, delimeterIndex - lastDelimeterIndex, output.GetAddressOf()))
ChkHr(outputs->GetView(outputStrings))
ChkHr(WindowsSubstring(inputString, lastDelimeterIndex, output.GetAddressOf()))
StringHelpers::DecodeBase64
ChkHr(GetActivationFactory( CryptographicBufferRuntimeClassName.Get(), &cryptoFactory))
ChkHr(spHashBuffer->get_Length(&decodedBufferLength))
ChkHr(cryptoFactory->DecodeFromBase64String( encodedString, &spHashBuffer))
ChkHr(spBufferAsBytes->Buffer(reinterpret_cast<BYTE**>(&pDecodedBuffer)))
ChkHr(spHashBuffer.As(&spBufferAsBytes))
ChkHr(stringBuffer.Promote(result.GetAddressOf()))
ChkHr(stringBuffer.Preallocate(decodedBufferLength + 1, &pszDecodedString))
ChkHr(TrimString(result.Get(), resultString))
HStringBufferWrapper::Promote
ChkHr(WindowsPromoteStringBuffer(buffer, string))
onecoreuap\enduser\winstore\licensing\winrt\lib\StringHelpers.h
JsonHelpers::AppendObject
ChkHr(spValue.As(&spJsonValue))
ChkHr(spArray.As(&spJsonVector))
onecoreuap\enduser\winstore\licensing\winrt\lib\jsonhelpers.cpp
JsonHelpers::AppendString
ChkHr(spJsonVector->Append(spJsonValue.Get()))
ChkHr(spJsonValueStatics->CreateStringValue(HStringReference(pszValue).Get(), &spValue))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonValue).Get(), &spJsonValueStatics))
ChkHr(spJsonValueStatics->CreateStringValue(hValue, &spValue))
ChkHr(spJsonVector->Append(spValue.Get()))
ChkHr(pObject->SetNamedValue(HStringReference(pszName).Get(), spValue.Get()))
JsonHelpers::SetNamedString
JsonHelpers::SetNamedObject
ChkHr(pValue.As(&spJsonValue))
JsonHelpers::SetNamedArray
ChkHr(pObject->SetNamedValue(HStringReference(pszName).Get(), spJsonValue.Get()))
ChkHr(spJsonValueStatics->CreateBooleanValue(fValue, &spValue))
JsonHelpers::SetNamedBool
ChkHr(spJsonValueStatics->CreateNumberValue(fValue, &spValue))
JsonHelpers::SetNamedNumber
ChkHr(spJsonValueStatics->CreateNullValue(&spValue))
JsonHelpers::SetNamedNull
JsonHelpers::SetNamedDateTime
ChkHr(FileTimeToString(strTime, 200, UINT64_TO_FILETIME(value.UniversalTime)))
ChkHr(IAPUtils::TimeSpanToString(value, timeSpanString.GetAddressOf()))
ChkHr(spJsonValueStatics->CreateStringValue(HStringReference((const WCHAR*)strTime).Get(), &spValue))
ChkHr(spJsonValueStatics->CreateStringValue(timeSpanString.Get(), &spValue))
JsonHelpers::SetNamedTimeSpan
JsonHelpers::ParseToJsonObject
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), &spJsonStatics))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonArray).Get(), &spJsonArrayStatics))
ChkHr(spJsonStatics->Parse(HStringReference(pszJson).Get(), &spJsonObject))
ChkHr(spJsonArrayStatics->Parse(HStringReference(pszJson).Get(), &spJsonArray))
JsonHelpers::ParseToJsonArray
JsonHelpers::Stringify
ChkHr(spJsonObject.As(&spJsonValue))
ChkArg(spJsonArray)
ChkHr(spJsonValue->Stringify(hJsonString))
ChkHr(spJsonArray.As(&spJsonVector))
JsonHelpers::GetArraySizeFromJsonArray
JsonHelpers::GetNamedDateTime
ChkHr(GetNamedString(spJson, pszName, timeString.GetAddressOf()))
JsonHelpers::RemoveAt
ChkHr(StringToFileTime(timeString.GetRawBuffer(nullptr), &ft, 0))
ChkHr(spJsonVector->RemoveAt(index))
####-##-##T##:##:##S
##:##
%04u-%02u-%02u%s%02u:%02u:%02u%s
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\external\inc\eratitleinfo.h
pid != nullptr
CurrentEraTitleInfo::GetProxyAppPid
result != nullptr
onecoreuap\internal\base\inc\userawarecalleridentity.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\clientprocessutils.cpp
IsRpcServerCallOnLocalTransport
ChkHr(CurrentEraTitleInfo::GetAppId(pfnBuff, pfnLength))
GetCallingProcessPackageFullName
ChkHr(UserAwareCallerIdentity::GetCallingProcessPackageFullName(packageFullName))
ChkHr(GetERAPackageFullNameByAumid(pfnBuff, wil::out_param(callerPackageFullName)))
ChkHr(CurrentEraTitleInfo::GetProxyAppPid(&pid))
ClientProcessUtils::IsCallerERA
ClientProcessUtils::GetWindowHandle
ChkArg(pCoreWindow)
ChkHr(spCoreWinInterop->get_WindowHandle(phWndCurrent))
ChkArg(phWndCurrent)
ClientProcessUtils::GetCallingAppWindowHandle
ChkHr(CoGetCallerTID(&callerThreadId))
ChkWin32(Expr)
ChkHr(EnsureWindowFromCallingProcess(*phwndOwner))
ChkHr(CoreQueryApplicationService(processId, __uuidof(ICoreApplication), __uuidof(**(&spCoreAppPrivate)), IID_PPV_ARGS_Helper(&spCoreAppPrivate)))
ClientProcessUtils::GetCallingAppWindowHandleFromThreadId
ChkHr(GetWindowHandle(spCoreWindow.Get(), &hwnd))
ChkHr(spCoreAppPrivate->GetWindowFromThreadId(callerThreadId, &spCoreWindow))
ClientProcessUtils::GetCallingAppPackageFullName
ChkReturn(HRESULT_FROM_WIN32(1168L))
ChkHr(getProcessPackageResult)
ChkHr(bstr.Initialize(L"", 0))
ChkHr(packageFullName.Set(requestorFullName))
ChkHr(packageFullName.Set(bstr.Get()))
ClientProcessUtils::GetCallingAppPackageFamilyName
ChkHr(GetCallingAppPackageFullName(fullName.GetAddressOf()))
ChkHr(GetCallingAppPackageFullName(packageFullName.GetAddressOf()))
ChkHr(packageFamilyName.Set(requestorFamilyName))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Internal_StateRepository_Package).Get(), &spPackageStatics))
ClientProcessUtils::GetCallingAppName
ChkHr(package->GetDisplayNameLocalized(appName))
ChkHr(spPackageStatics->GetByPackageFullName(packageFullName.Get(), package.GetAddressOf()))
ChkHr(hrCallContext)
ClientProcessUtils::GetCallingAppSessionGuid
ChkHr(UserAwareCallerIdentity::GetCallingProcessUserContext(&userContextToken))
ChkHr(HRESULT_FROM_WIN32(RtlNtStatusToDosError(status)))
ChkHr(Windows::Foundation::GetActivationFactory(UserManagerClassId.Get(), &userMgr))
ClientProcessUtils::GetSidForUser
ChkHr(signInMgr->GetHandleForUser(user, &userContextToken))
ChkHr(userMgr.As(&signInMgr))
ChkHr(HRESULT_FROM_WIN32(error))
ChkHr(UMgrQueryUserToken(userContextToken, &userToken))
ChkHr(WindowsCreateString(sidString, (UINT32)wcslen(sidString), sid))
ChkAlloc(tokenUser)
ChkHr(package->get_PackageType(&packageType))
ClientProcessUtils::GetAppContentTypeForInstalledPackage
ChkHr(package->get_TargetDeviceFamily(&foreignKey))
ChkHr(hrGetPackage)
ChkHr(spTargetDeviceFamilyStatics->Get(foreignKey, &spTargetDeviceFamily))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Internal_StateRepository_TargetDeviceFamily).Get(), &spTargetDeviceFamilyStatics))
ChkHr(HRESULT_FROM_WIN32(50L))
ChkHr(spTargetDeviceFamily->get_Name(&targetPlatform))
ChkHr(CoGetCallContext(__uuidof(**(&spCallingProcessInfo)), IID_PPV_ARGS_Helper(&spCallingProcessInfo)))
ClientProcessUtils::EnsureWindowFromCallingProcess
ChkBool(callingProcessId == hwndProcessId, ((HRESULT)0x80070005L))
ChkHr(spCallingProcessInfo->OpenCallerProcessHandle((0x1000), &callingProcessHandle))
ChkHr(package->get_EffectiveSupportedUsers(&supportedUsers))
ClientProcessUtils::GetCallingAppSupportsMultipleUser
ClientProcessUtils::CheckMultipleUserSupport
ChkHr(IsCallerERA(&isERA))
ChkHr(Windows::Foundation::GetActivationFactory( Microsoft::WRL::Wrappers::HStringReference(RuntimeClass_Windows_Internal_Shell_ModalExperience_ModalExperienceManager).Get(), &memStatics))
ChkHr(GetCallingAppSupportsMultipleUser(&supportsMultipleUsers))
ChkHr(memStatics->GetModalExperienceManager(modalExperienceManager))
ClientProcessUtils::GetModalExperienceManager
ChkHr(ActivateInstance( HStringReference(RuntimeClass_Windows_Management_Deployment_PackageManager).Get(), &spPackageManager))
ClientProcessUtils::GetCallingAppPackage
ChkHr(GetSidForUser(user, sidString.GetAddressOf()))
ChkHr(spPackageManager->FindPackageByPackageFullName(fullName.Get(), ppPackage))
ClientProcessUtils::GetCallerTokenFromComCall
ChkHr(spPackageManager->FindPackageByUserSecurityIdPackageFullName(sidString.Get(), fullName.Get(), ppPackage))
S-1-15-2-778011547-1096124574-1799322564-3972718560-253206704-1472347756-15051174
onecore\internal\shell\inc\windowsinternalstring.h
Windows::Internal::NativeString<class Windows::Internal::CoTaskMemPolicy<unsigned short> >::_Initialize
_pszStringData == nullptr
::wcslen(_pszStringData) == _cchStringData
((_pszStringData == nullptr) && (_cchStringData == 0)) || ((_pszStringData == nullptr) && (_cchStringDataCapacity == s_cchUnknown)) || ((_pszStringData != nullptr) && (_cchStringData == ::wcslen(_pszStringData)))
Windows::Internal::NativeString<class Windows::Internal::CoTaskMemPolicy<unsigned short> >::_EnsureCapacity
(_cchStringData <= _cchStringDataCapacity) || (_cchStringDataCapacity == s_cchUnknown)
Windows::Internal::NativeString<class Windows::Internal::CoTaskMemPolicy<unsigned short> >::_EnsureCount
Windows.Internal.StateRepository.TargetDeviceFamily
application/json
OPTIONAL
GetHttpResponse
ChkHr(Windows::Foundation::GetActivationFactory( HStringReference(RuntimeClass_Windows_Foundation_Uri).Get(), &uriFactory))
ChkHr(uriFactory->CreateUri(hstrURL, &uri))
onecoreuap\enduser\winstore\licensing\winrt\lib\iaputils.cpp
ChkHr(headers.As(&headersMap))
ChkHr(pHttpClient->get_DefaultRequestHeaders(&headers))
ChkHr(headersMap->Insert(HStringReference(L"MS-CV").Get(), cv.GetHStringReference().Get(), &replaced))
MS-CV
ChkHr(pHttpClient->PostAsync(uri.Get(), pRequestContent, &requestOperation))
ChkHr(pHttpClient->GetAsync(uri.Get(), &requestOperation))
ChkHr(pHttpClient->PutAsync(uri.Get(), pRequestContent, &requestOperation))
ChkHr(pHttpClient->DeleteAsync(uri.Get(), &requestOperation))
ChkHr(methodStatics->get_Head(&method))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Web_Http_HttpMethod).Get(), &methodStatics))
ChkHr(methodStatics->get_Patch(&method))
ChkHr(methodStatics->get_Options(&method))
ChkHr(requestFactory->Create(method.Get(), uri.Get(), &message))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Web_Http_HttpRequestMessage).Get(), &requestFactory))
ChkHr(pHttpClient->SendRequestAsync(message.Get(), &requestOperation))
ChkHr(message->put_Content(pRequestContent))
ChkHr(responseMessage->get_Content(&responseContent))
ChkHr(BlockOnCompletionAndGetResults(requestOperation.Get(), &responseMessage))
ChkHr(BlockOnCompletionAndGetResults(readOperation.Get(), phstrContent))
ChkHr(responseContent->ReadAsStringAsync(&readOperation))
ChkHr(responseMessage->get_StatusCode(&httpStatusCode))
ChkHr(responseContent->TryComputeLength(&responseSizeBytes, &tryComputeLengthSucceeded))
ChkHr(JsonHelpers::Stringify(pRequest, requestJsonString.GetAddressOf()))
ChkHr(responseMessage->EnsureSuccessStatusCode(&responseSuccess))
ChkHr(Windows::Foundation::GetActivationFactory( HStringReference(RuntimeClass_Windows_Web_Http_HttpStringContent).Get(), &contentFactory))
_SendJsonToURLWithHttpClientForStringResponse
ChkHr(GetHttpResponse( pHttpClient, hstrURL, verb, pCV, requestContent.Get(), pStatusCode, hstrResponse))
ChkHr(contentFactory->CreateFromStringWithEncodingAndMediaType( requestJsonString.Get(), Windows::Storage::Streams::UnicodeEncoding::UnicodeEncoding_Utf8, JsonMediaType.Get(), &requestContent))
IAPUtils::GetDeviceContextId
ChkHr(UrlEscapeW(idValueUnescaped.GetRawBuffer(nullptr), pszIdValue, &cchIdValue, 0))
ChkHr(StringCchCopyW(pszIdValue, cchIdValue, L"Public"))
Public
IAPUtils::GetDeviceContextString
ChkHr(GetDeviceContextId(L"MOID", szEncodedMoId, (sizeof(szEncodedMoId)/sizeof(szEncodedMoId[0]))))
ChkHr(GetDeviceContextId(L"SCMID", szEncodedScmId, (sizeof(szEncodedScmId)/sizeof(szEncodedScmId[0]))))
ChkHr(GetDeviceContextId(L"OEMID", szEncodedOemId, (sizeof(szEncodedOemId)/sizeof(szEncodedOemId[0]))))
ChkAlloc(spszDestBuffer = new WCHAR[cchDestBuffer])
moId=%s&oemId=%s&scmId=%s
ChkHr(WindowsCreateString(spszDestBuffer, (UINT32)wcslen(spszDestBuffer), pDeviceContext))
ChkHr(StringCchPrintfW( spszDestBuffer, cchDestBuffer, pszFormat, szEncodedMoId, szEncodedOemId, szEncodedScmId ))
IAPUtils::GetLanguage
ChkHr(IAPUtils::GetLanguages(&spLanguages))
ChkHr(spLanguages->GetAt(0, pLanguage))
ChkHr(spLanguages->get_Size(&size))
IAPUtils::GetLanguages
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_System_UserProfile_GlobalizationPreferences).Get(), &spGlobalizationPreferences))
IAPUtils::GetLanguagesString
ChkHr(spGlobalizationPreferences->get_Languages(ppLanguages))
ChkHr(StringCchCatExW(pszLanguagesEnd, cchRemaining, L",", &pszLanguagesEnd, &cchRemaining, 0))
ChkHr(spLanguages->GetAt(i, language.GetAddressOf()))
ChkHr(StringCchCatExW(pszLanguagesEnd, cchRemaining, pszLanguage, &pszLanguagesEnd, &cchRemaining, 0))
ChkHr(IAPUtils::GetDeviceContextId(L"MOID", szEncodedMoId, (sizeof(szEncodedMoId)/sizeof(szEncodedMoId[0]))))
ChkHr(moId.Set(szEncodedMoId))
IAPUtils::GetDeviceIds
ChkHr(oemId.Set(szEncodedOemId))
ChkHr(IAPUtils::GetDeviceContextId(L"OEMID", szEncodedOemId, (sizeof(szEncodedOemId)/sizeof(szEncodedOemId[0]))))
ChkHr(scmId.Set(szEncodedScmId))
ChkHr(IAPUtils::GetDeviceContextId(L"SCMID", szEncodedScmId, (sizeof(szEncodedScmId)/sizeof(szEncodedScmId[0]))))
ChkAlloc(pwszUppercaseRegion)
IAPUtils::GetFormattedPrice
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Web_Http_HttpClient).Get(), &factory))
ChkHr(GetFormattedPriceUsingCurrencyFormatter( price, currencyCode, language.Get(), HStringReference((const WCHAR*)pwszUppercaseRegion).Get(), formattedPrice))
ChkHr(ActivateInstance(HStringReference(RuntimeClass_Windows_Web_Http_Filters_HttpBaseProtocolFilter).Get(), &filter))
IAPUtils::CreateHttpClient
ChkHr(filter2->put_MaxVersion(Windows::Web::Http::HttpVersion_Http11))
ChkHr(filter.As(&filter2))
ChkHr(httpClient->get_DefaultRequestHeaders(&headers))
ChkHr(factory->Create(filter.Get(), &httpClient))
WindowsStoreSDK
ChkHr(headers->get_UserAgent(&userAgent))
IAPUtils::CreateHttpClientWithAuthHeader
ChkHr(CreateHttpClient(&httpClient))
ChkHr(WindowsConcatString( HStringReference(L"WLID1.0=").Get(), ticket, formattedAuthToken.GetAddressOf()))
WLID1.0=
ChkHr(headers->TryAppendWithoutValidation( HStringReference(L"Authorization").Get(), formattedAuthToken.Get(), &succeeded))
Authorization
ChkHr(WinStoreAuth::AuthenticationInternal::PrefixTicketForMDollar(providerType, ticket.Get(), strPrefixAuthToken.GetAddressOf()))
ChkHr(headers->TryAppendWithoutValidation( HStringReference(L"Authorization").Get(), ticket, &succeeded))
ChkHr(strPrefixAuthToken.CopyTo(ticket.ReleaseAndGetAddressOf()))
IAPUtils::CreateHttpClientWithAuthIfAvailable
ChkHr(IAPUtils::CreateHttpClient(ppHttpClient))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader( ticket.Get(), false, ppHttpClient))
ChkHr(contentFactory->CreateFromStringWithEncodingAndMediaType( requestJsonString.Get(), Windows::Storage::Streams::UnicodeEncoding::UnicodeEncoding_Utf8, HStringReference(L"application/json").Get(), &requestContent))
IAPUtils::PostJsonToURLWithHttpClient
ChkHr(hrHttp)
ChkHr(jsonObjectStatics->Parse(responseJsonString.Get(), &responseJson))
IAPUtils::GetJsonFromURLWithHttpClient
ChkHr(GetStringFromURLWithHttpClient(pHttpClient, hstrURL, pCV, nullptr, jsonString.GetAddressOf()))
ChkHr(jsonObjectStatics->Parse(jsonString.Get(), &jsonObject))
IAPUtils::GetJsonFromURL
ChkArg(hstrUri)
ChkHr(GetJsonFromURLWithHttpClient(httpClient.Get(), hstrURL, pCV, ppJsonObject))
ChkArg(ppUri)
IAPUtils::CreateUri
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(L"Windows.Foundation.Uri").Get(), &activationFactory))
Windows.Foundation.Uri
ChkHr(SetMaxDateTime(pDateTime))
ChkHr(activationFactory.As(&uriFactory))
ChkHr(RoFileTimeToDateTime(fileTime, pDateTime))
IAPUtils::SetDateTime
IAPUtils::SetMaxDateTime
ChkHr(RoFileTimeToDateTime(ftMaxDateTime, pDateTime))
IAPUtils::GetTimeSpanDifference
ChkHr(SetMaxDateTime(&maxDateTime))
IAPUtils::ParseTimeSpan
ChkHr(::WindowsTrimStringStart(timeSpanString, Space.Get(), trimmedStart.GetAddressOf()))
ChkBool(*last == ':', ((HRESULT)0x80070057L))
ChkHr(::WindowsTrimStringEnd(trimmedStart.Get(), Space.Get(), trimmedString.GetAddressOf()))
ChkBool(last == pchEnd, ((HRESULT)0x80070057L))
ChkHr(StringCchPrintfW( buffer, (sizeof(*RtlpNumberOf(buffer))), L"%s%02d:%02d:%09.6f", isNegative ? L"-" : L"", hours, minutes, seconds))
%s%02d:%02d:%09.6f
%s%d.%02d:%02d:%09.6f
IAPUtils::TimeSpanToString
ChkHr(StringHelpers::SplitString(storeId, g_pszStoreIdSeparator, &storeIdComponents))
ChkHr(StringCchPrintfW( buffer, (sizeof(*RtlpNumberOf(buffer))), L"%s%d.%02d:%02d:%09.6f", isNegative ? L"-" : L"", static_cast<int>(days), hours, minutes, seconds))
ChkHr(storeIdComponents->get_Size(&size))
IAPUtils::ParseStoreId
ChkHr(storeIdComponents->GetAt(0, pProductId))
ChkBool(size <= 3, ((HRESULT)0x80070057L))
IAPUtils::CheckProductKinds
ChkArg(productKinds)
ChkHr(spIter->get_HasCurrent(&hasCurrent))
ChkHr(productKinds->First(&spIter))
ChkHr(spIter->get_Current(value.GetAddressOf()))
ChkBool(hasCurrent, ((HRESULT)0x80070057L))
ChkBool(colon == nullptr, ((HRESULT)0x80070057L))
ChkBool(asterisk == nullptr, ((HRESULT)0x80070057L))
IAPUtils::BuildStoreId
ChkHr(::WindowsDuplicateString(productId, storeId))
ChkHr(WindowsConcatString( productIdWithSeparator.Get(), skuId, productIdSkuId.GetAddressOf()))
ChkHr(WindowsConcatString( productId, StoreIdSeparator.Get(), productIdWithSeparator.GetAddressOf()))
ChkHr(WindowsConcatString( productIdSkuId.Get(), StoreIdSeparator.Get(), productIdSkuIdWithSeparator.GetAddressOf()))
ChkHr(::WindowsDuplicateString(productIdSkuId.Get(), storeId))
ChkHr(JsonHelpers::CreateJsonArray(&jsonEntitlementFilters))
ChkHr(WindowsConcatString( productIdSkuIdWithSeparator.Get(), availabilityId, storeId))
ChkHr(spIter->get_Current(productKind.GetAddressOf()))
IAPUtils::BuildEntitlementFiltersJSON
ChkHr(JsonHelpers::AppendString(jsonEntitlementFilters, entitlementFilter.Get()))
ChkHr(WindowsConcatString(EntitlementFilterPrefix.Get(), productKind.Get(), entitlementFilter.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(::WindowsGetStringRawBuffer(productsJson, nullptr), &productsResultObject))
ChkHr(spIter->MoveNext(&hasCurrent))
ChkHr(JsonHelpers::GetNamedArray(productsResultObject, L"Products", &productsArray))
IAPUtils::CombineProductsAndCollectionsJson
items
ChkHr(JsonHelpers::ParseToJsonObject(::WindowsGetStringRawBuffer(collectionsJson, nullptr), &collectionData))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(productsArray, &productSize))
ChkHr(JsonHelpers::GetNamedArray(collectionData, L"items", &collectionDataArray))
ChkHr(collectionDataArray->GetObjectAt(collectionIndex, &collectionItem))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(collectionDataArray, &collectionSize))
ChkHr(productsArray->GetObjectAt(productIndex, &product))
ChkHr(JsonHelpers::GetNamedString(collectionItem, L"productId", collectionProductId.GetAddressOf()))
DisplaySkuAvailabilities
ChkHr(JsonHelpers::GetNamedString(product, L"ProductId", productId.GetAddressOf()))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(skuAvailabilities, &skuAvailabilitySize))
ChkHr(JsonHelpers::GetNamedArray(product, L"DisplaySkuAvailabilities", &skuAvailabilities))
ChkHr(skuAvailabilities->GetObjectAt(skuAvailabilityIndex, &skuAvailability))
SkuId
ChkHr(JsonHelpers::GetNamedObject(skuAvailability, L"Sku", &sku))
ChkHr(JsonHelpers::GetNamedString(collectionItem, L"skuId", collectionSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(sku, L"SkuId", skuId.GetAddressOf()))
ChkHr(JsonHelpers::SetNamedObject(sku, L"CollectionData", collectionItem.Get()))
CollectionData
IAPUtils::IsCallingProcessAppContainer
JsonHelpers::Stringify(productsResultObject, pCombinedJson)
CoRevertToSelf()
ChkHr(hrImpersonate)
IAPUtils::ParseUriSubstitutionTag
ChkHr(StringHelpers::TrimEnds(inputTag, 1, rawInputTag.GetAddressOf()))
ChkHr(StringHelpers::SplitString(rawInputTag.Get(), L":", &tagComponents))
ChkBool(tagComponentsSize != 0, ((HRESULT)0x80070057L))
ChkHr(tagComponents->get_Size(&tagComponentsSize))
ChkHr(tagComponents->GetAt(0, outputKey))
ChkBool(tagComponentsSize <= 3, ((HRESULT)0x80070057L))
ChkHr(tagComponents->GetAt(2, outputMeta))
ChkHr(tagComponents->GetAt(1, outputName))
IAPUtils::ConstructSlsUri
ChkHr(outputBuffer.Preallocate(uriBufferMax, &pszDest))
ChkHr(GetActivationFactory(WindowsFoundationUri.Get(), &uriEscapeStatics))
ChkHr(StringCchCopyNExW(pszRemaining, cchRemaining, pszFormatCursor, pszOpenBrace - pszFormatCursor, &pszRemaining, &cchRemaining, 0))
ChkHr(ParseUriSubstitutionTag(tag.Get(), tagKey.GetAddressOf(), tagName.GetAddressOf(), tagMeta.GetAddressOf()))
ChkHr(tag.Set(pszOpenBrace, static_cast<UINT32>(pszCloseBrace - pszOpenBrace) + 1))
ChkHr(substituteValue->get_ValueType(&valueType))
Failed to find substitute value with key %s!
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, tagName.GetRawBuffer(nullptr), &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, seenQuestionMark ? L"&" : L"?", &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, L"=", &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, escapedData.GetRawBuffer(nullptr), &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(uriEscapeStatics->EscapeComponent(substituteString.Get(), escapedData.GetAddressOf()))
ChkHr(outputBuffer.Promote(output.GetAddressOf()))
ChkHr(StringCchCopyW(pszRemaining, cchRemaining, pszFormatCursor))
onecore\internal\shell\inc\AsyncOperationHelper.h
ChkHr(StringHelpers::TrimString(output.Get(), uriOutput))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getnextusercollection.cpp
Windows::Services::Store::Internal::GetNextUserCollection::RuntimeClassInitialize
ChkAlloc(_spCV)
ChkHr(_continuationToken.Set(continuationToken))
maxPageSize
Windows::Services::Store::Internal::GetNextUserCollection::GetNextAsync
continuationToken
ChkHr(JsonHelpers::SetNamedNumber(jsonCollectionsParameters, L"maxPageSize", _maxItems))
ChkHr(IAPUtils::BuildEntitlementFiltersJSON(jsonEntitlementFilters, _productKinds.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonCollectionsParameters, L"continuationToken", _continuationToken.Get()))
relatedProductId
ChkHr(JsonHelpers::CreateJsonObject(&includeRelationship))
relationshipType
ChkHr(JsonHelpers::SetNamedString(includeRelationship, L"relatedProductId", _productStoreId.Get()))
includeRelationship
ChkHr(JsonHelpers::SetNamedString(includeRelationship, L"relationshipType", SellableBy.Get()))
ChkHr(_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetUserCollectionForParentProductByFamily, _spCV, jsonCollectionsParameters.Get(), &statusCode, jsonCollectionsString.GetAddressOf()))
ChkHr(JsonHelpers::SetNamedObject(jsonCollectionsParameters, L"includeRelationship", includeRelationship))
ChkHr(_collectionData->First(&iter))
ChkHr(JsonParser::ParseJSONStringToObject( jsonCollectionsString, this, collectionQueryResultsTable))
ChkHr(iter->get_Current(&collectionData))
ChkHr(iter->get_HasCurrent(&hasCurrent))
ChkHr(collectionDataPrivate->get_ProductId(productId.GetAddressOf()))
ChkHr(collectionData.As(&collectionDataPrivate))
ChkHr(IAPUtils::BuildStoreId( productId.Get(), skuId.Get(), nullptr, storeId.GetAddressOf()))
ChkHr(collectionDataPrivate->get_SkuId(skuId.GetAddressOf()))
ChkHr(iter->MoveNext(&hasCurrent))
ChkHr(storeIds->Append(storeId.Get()))
ChkHr(StringHelpers::Join( storeIds.Get(), false, storeIdsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join( _productKinds.Get(), false, productKindsWithCommas.GetAddressOf()))
ChkHr(JsonHelpers::SetNamedString( jsonCatalogParameters.Get(), L"productIdsWithCommas", storeIdsWithCommas.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString( jsonCatalogParameters.Get(), L"productKinds", productKindsWithCommas.GetRawBuffer(nullptr)))
ChkHr(IAPUtils::CombineProductsAndCollectionsJson( jsonCatalogString.Get(), jsonCollectionsString.Get(), productJsonResponse))
ChkHr(_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetProductsNoParent, _spCV, jsonCatalogParameters.Get(), &statusCode, jsonCatalogString.GetAddressOf()))
ChkHr(MakeAndInitialize<GetNextUserCollection>( &nextOperation, _storeContextServer.Get(), _productStoreId.Get(), _productKinds.Get(), _continuationToken.Get(), _maxItems, _user.Get(), szCV, _httpClient.Get()))
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreCollectionData>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreCollectionData>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreCollectionData>
WindowsUpdate
MSIXVC
ProductTitle
AddOnKeyword
ProductDescription
InAppOfferToken
Images
Language
SearchTitles
Videos
ProductKind
PackageFamilyName
Properties
LocalizedProperties
Windows::Services::Store::StoreProduct::RuntimeClassInitialize
ChkHr(_jsonValue.SetReference(json))
ChkHr(Vector<HSTRING>::Make(&_keywords))
onecoreuap\enduser\winstore\licensing\winrt\lib\storeproduct.cpp
ChkHr(Vector<StoreVideo*>::Make(&_videos))
ChkHr(Vector<StoreImage*>::Make(&_images))
ChkHr(_SortSkus())
ChkHr(JsonParser::ParseJSONToObject( json, this, ProductTable))
Windows::Services::Store::StoreProduct::get_StoreId
::WindowsDuplicateString(_storeId.Get(), pValue)
Windows::Services::Store::StoreProduct::get_Language
::WindowsDuplicateString(_language.Get(), pValue)
Windows::Services::Store::StoreProduct::get_Title
::WindowsDuplicateString(_title.Get(), pValue)
Windows::Services::Store::StoreProduct::get_Description
::WindowsDuplicateString(_description.Get(), pValue)
Windows::Services::Store::StoreProduct::get_InAppOfferToken
::WindowsDuplicateString(_inAppOfferToken.Get(), pValue)
Windows::Services::Store::StoreProduct::get_ProductKind
::WindowsDuplicateString(_productKind.Get(), pValue)
ChkHr(_skus->get_Size(&size))
Windows::Services::Store::StoreProduct::get_HasDigitalDownload
ChkHr(sku.As(&skuPrivate))
ChkHr(_skus->GetAt(i, &sku))
_keywords->GetView(ppValue)
ChkHr(skuPrivate->get_FulfillmentType(fulfillmentType.GetAddressOf()))
_images->GetView(ppValue)
Windows::Services::Store::StoreProduct::get_Keywords
_videos->GetView(ppValue)
Windows::Services::Store::StoreProduct::get_Images
_skus->GetView(ppValue)
Windows::Services::Store::StoreProduct::get_Videos
Windows::Services::Store::StoreProduct::get_IsInUserCollection
Windows::Services::Store::StoreProduct::get_Skus
Windows::Services::Store::StoreProduct::get_Price
ChkHr(sku->get_IsInUserCollection(&isInCollection))
ChkHr(iter->get_Current(&sku))
ChkHr(_skus->First(&iter))
Windows::Services::Store::StoreProduct::get_LinkUri
ChkHr(sku->get_Price(ppValue))
ChkHr(get_StoreId(storeId.GetAddressOf()))
ChkBool(nullptr != _storeContext, ((HRESULT)0x803F6107L))
ChkHr(IAPUtils::CreateUri(uriString.Get(), ppValue))
ChkHr(storeContextServer->GetLinkUri(storeId.Get(), uriString.GetAddressOf()))
ChkHr(_storeContext->GetIsAnySkuInstalledAsync(storeId.Get(), ppOperation))
Windows::Services::Store::StoreProduct::GetIsAnySkuInstalledAsync
ChkHr(_storeContext->RequestPurchaseAsync(storeId.Get(), ppOperation))
Windows::Services::Store::StoreProduct::RequestPurchaseAsync
ChkArg(storePurchaseProperties)
Windows::Services::Store::StoreProduct::RequestPurchaseWithPurchasePropertiesAsync
::WindowsDuplicateString(_packageFamilyName.Get(), value)
ChkHr(_storeContext->RequestPurchaseWithPurchasePropertiesAsync(storeId.Get(), storePurchaseProperties, ppOperation))
ChkHr(_skus.As(&inspectableProducts))
Windows::Services::Store::StoreProduct::get_PackageFamilyName
ChkHr(_storeContext->AssociateWithStoreContext(inspectableProducts))
Windows::Services::Store::StoreProduct::SetStoreContext
Windows::Services::Store::StoreProduct::_SortSkus
ChkHr(Vector<StoreSku*>::Make(&sortedSkus))
ChkHr(currentSku.As(&currentSkuPrivate))
ChkHr(_skus->GetAt(index, &currentSku))
ChkHr(bestSku.As(&skuPrivate))
ChkHr(currentSkuPrivate->get_Rank(&currentRank))
ChkHr(sortedSkus->Append(bestSku.Get()))
ChkHr(skuPrivate->set_ProductId(_storeId.Get()))
ChkHr(_skus->RemoveAt(bestIndex))
SearchTitleString
SearchTitleType
Windows::Services::Store::JsonParser::ParseArrayOfOne
jsonValue->GetArray(jsonArray.GetAddressOf())
jsonArray->GetObjectAt(0, jsonElement.GetAddressOf())
JsonHelpers::GetArraySizeFromJsonArray(jsonArray, &len)
ParseJSONToObject(DEBUG_PARSER_PARAMETERS_ARGS jsonElement, pObj, table)
Fsq^V
4-RZKD[
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreSku>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreImage>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreSku>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreImage>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreVideo>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreVideo>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreImage>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreVideo>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreSku>
ChkArg(pResult)
ChkHr(JsonHelpers::Stringify(_jsonValue, _stringifiedValue.GetAddressOf()))
StringifiedJsonValue::GetStringifiedValue
onecoreuap\enduser\winstore\licensing\winrt\lib\StringifiedJsonValue.h
Windows::Services::Store::Internal::GetNextAssociatedStoreProducts::RuntimeClassInitialize
BigIds
Windows::Services::Store::Internal::GetNextAssociatedStoreProducts::GetNextAsync
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getnextstorelistingforassociatedproducts.cpp
ChkHr(Vector<HSTRING>::Make(&_bigIds))
skipCount
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters.Get(), L"skipCount", skipCountAsHString.GetRawBuffer(nullptr)))
itemCount
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters.Get(), L"itemCount", maxItemsAsHstring.GetRawBuffer(nullptr)))
HasMorePages
ChkHr(JsonParser::ParseJSONStringToObject( productJsonString, this, productQueryResultsTable))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters.Get(), L"productKinds", productKindsWithCommas.GetRawBuffer(nullptr)))
ChkHr(_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetProductsByFamilyFromParent, _spCV, jsonCatalogParameters.Get(), nullptr, productJsonString.GetAddressOf()))
ChkHr(spIter->get_Current(storeId.GetAddressOf()))
_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetUserCollectionForProducts, _spCV, jsonCollectionsParameters.Get(), nullptr, collectionsJsonString.GetAddressOf())
ChkHr(_bigIds->get_Size(&size))
ChkHr(_bigIds->First(&spIter))
ChkHr(MakeAndInitialize<GetNextAssociatedStoreProducts>( &nextOperation, _storeContextServer.Get(), _productStoreId.Get(), _productKinds.Get(), _skipCount + _maxItems, _maxItems, _hasMorePages, _user.Get(), szCV, _httpClient.Get()))
ChkHr(IAPUtils::CombineProductsAndCollectionsJson( productJsonString.Get(), collectionsJsonString.Get(), productJsonResponse))
ChkHr(productJsonString.CopyTo(productJsonResponse))
MDCollections
MDGetOneProductReceiptMobile
OneStoreAuthenticationDomain
MDGetAppReceiptsDesktop
MDGetAppReceiptsMobile
MDPurchase
DeviceFamily
LinkUriFormat
MDDisplayCatalog
ModalFlowSizes
JSON_RESPONSE
StoreEndpointExtensionUrls
InternalStoreEndpointExtensionUrls
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\urihelper.cpp
ChkHr(WindowsCreateString(pszResource, cch, jsonString))
ChkHr(((HRESULT)0x80004005L))
RetrieveJsonResponseFromResources
SLS failed to initialize correctly, falling back to built in values, this may cause problems.
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), &spJsonObjectStatics))
ChkArg(ppszUri)
UriHelperInternal::GetUriString
JSON_RESPONSE_ONE_STORE_CLIENT_DATA_URLS
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_ONE_STORE_CLIENT_DATA_URLS", onestoreClientData.GetAddressOf()))
ParseSLSJson
ChkHr(spJsonObjectStatics->Parse(HStringReference(pszJson).Get(), &spJsonObject))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_System_Profile_AnalyticsInfo).Get(), &spAnalyticsInfo))
ChkHr(spAnalyticsInfo->get_VersionInfo(&spVersionInfo))
UriHelperInternal::InitOnceCallback
ChkHr(ParseSLSJson(onestoreClientData.GetRawBuffer(nullptr), UriHelper::s_rghstrUris, UriHelper::s_rgpszUriNames, (sizeof(*RtlpNumberOf(UriHelper::s_rghstrUris))), true))
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_STORE_ENDPOINT_EXTENSION_URLS", UriHelperV7::s_rghstrUris[UriHelperV7::StoreEndpointExtensionUrls].GetAddressOf()))
JSON_RESPONSE_INTERNAL_STORE_ENDPOINT_EXTENSION_URLS
ChkHr(spVersionInfo->get_DeviceFamily(deviceFamily.GetAddressOf()))
JSON_RESPONSE_STORE_ENDPOINT_EXTENSION_URLS
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_MODAL_FLOW_SIZES", UriHelperV7::s_rghstrUris[UriHelperV7::ModalFlowSizes].GetAddressOf()))
ChkHr(CoCreateInstance(CLSID_SLSClient, nullptr, CLSCTX_INPROC_SERVER, __uuidof(**(&spSLSClient2)), IID_PPV_ARGS_Helper(&spSLSClient2)))
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_INTERNAL_STORE_ENDPOINT_EXTENSION_URLS", UriHelperV7::s_rghstrUris[UriHelperV7::InternalStoreEndpointExtensionUrls].GetAddressOf()))
JSON_RESPONSE_MODAL_FLOW_SIZES
ChkHr(ParseSLSJson(pszJson, UriHelper::s_rghstrUris, UriHelper::s_rgpszUriNames, (sizeof(*RtlpNumberOf(UriHelper::s_rghstrUris))), false))
ChkHr(ParseSLSJson(pszJson, UriHelperV7::s_rghstrUrisSLS, UriHelperV7::s_rgpszUriNames, (sizeof(*RtlpNumberOf(UriHelperV7::s_rghstrUrisSLS))), false))
//ServiceEnvironment/StoreSDK
ChkHr(spSLSClient2->GetSLSDataChunk(GUID_StoreFrontServiceID, 0, L"//ServiceEnvironment/StoreSDK", &pszJson, &lastModified))
ChkBool(pszCloseBrace != 0, ((HRESULT)0x80004005L))
FormatNameValuePairs
ChkBool(found, ((HRESULT)0x80070057L))
nameValuePairs || (cNameValuePairs == 0)
ChkHr(StringCchCopyExW(pszRemaining, cchRemaining, WindowsGetStringRawBuffer(nameValuePairs[i].value, nullptr), &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(UriHelperInternal::GetUriString(rghstrUris, index, &pszInitialUri))
ChkHr(stringBuffer.Preallocate(urlLength, &pszFinalUri))
UriHelperInternal::GetUriEx
cNameValuePairs >= 0
UriHelperInternal::GetUriWithPathAndParametersEx
ChkHr(UriHelperInternal::GetUriString(rghstrUris, index, &pszUriBase))
ChkHr(FormatNameValuePairs(pszFinalUri, urlLength, pszInitialUri, nameValuePairs, cNameValuePairs, encodeParameters))
ChkHr(StringHelpers::TrimString(result.Get(), hstrUri))
ChkHr(StringCchCopyExW(pszRemaining, cchRemaining, pszUriBase, &pszRemaining, &cchRemaining, 0))
((wcschr(pszUriBase, L'{')) == 0) && "On this overload, the uri base must be *clean*; no parameters allowed"
ChkHr(FormatNameValuePairs(pszRemaining, cchRemaining, pathFormat, nameValuePairs, cNameValuePairs, false))
ChkArg(uri < UriHelper::UriMax)
cchRemaining < urlLength && "We should have copied *something*"
ChkHr(StringCchCopyExW(pszRemaining, cchRemaining, L"/", &pszRemaining, &cchRemaining, 0))
ChkHr(UriHelperInternal::GetUriEx(s_rghstrUris, uri, nullptr, 0, false, hstrUri))
ChkHr(UriHelperInternal::GetUriEx(s_rghstrUris, uri, nameValuePairs, cNameValuePairs, false, hstrUri))
UriHelper::GetUri
ChkArg(uri >= 0)
ChkHr(UriHelperInternal::GetUriWithPathAndParametersEx(s_rghstrUris, uriBase, hstrPath, nullptr, 0, hstrUri))
UriHelper::GetUriWithPath
ChkHr(JsonHelpers::ParseToJsonArray(data.GetRawBuffer(nullptr), &spJsonUriArray))
UriHelperV7::GetIndexedEntry
UriHelper::GetUriWithPathAndParameters
ChkHr(UriHelperInternal::GetUriWithPathAndParametersEx( s_rghstrUris, uriBase, hstrPath, nameValuePairs, cNameValuePairs, hstrUri))
ChkHr(JsonHelpers::ParseToJsonArray(data.GetRawBuffer(nullptr), spJsonUriArray.ReleaseAndGetAddressOf()))
ChkBool(*entry != nullptr, HRESULT_FROM_WIN32(1168L))
ChkHr(_FindUriWithIndex(requestIndex, spJsonUriArray, entry))
ChkHr(_GetRawStringFromOS(uri, data.GetAddressOf()))
ChkHr(UriHelperInternal::GetUriString(s_rghstrUrisSLS, uri, &pszUri))
ChkHr(UriHelperInternal::GetUriString(s_rghstrUris, uri, &pszUri))
ChkArg(uri < UriHelperV7::UriMax)
UriHelperV7::GetRawString
UriHelperV7::_FindUriWithIndex
ChkHr(jsonUriArray->GetObjectAt(index, &object))
ChkHr(temp.Set(pszUri))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(jsonUriArray, &countUris))
UriHelperV7::_GetRawStringFromSLS
UriHelperV7::_GetRawStringFromOS
Index
Windows.System.Profile.AnalyticsInfo
SendStoreRequest
RequestPurchase
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchaseoperation.cpp
Microsoft.StorePurchaseApp_8wekyb3d8bbwe!App
Microsoft.StorePurchaseApp_8wekyb3d8bbwe
NotPurchased
purchaseStatus
ChkHr(JsonHelpers::CreateJsonObject(&_response))
Windows::Services::Store::PurchaseOperation::RuntimeClassInitialize
ChkHr(storeProductId.Set(storeId))
ChkHr(storePurchaseProperties->get_ExtendedJsonData(tmp.GetAddressOf()))
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"NotPurchased"))
ChkHr(_PFN.Set(PFN))
ChkHr(storePurchaseProperties->get_Name(tmp.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(tmp.GetRawBuffer(nullptr), _request.GetAddressOf()))
ChkHr(JsonHelpers::CreateJsonObject(&_request))
ChkHr(JsonHelpers::ParseToJsonObject(WindowsGetStringRawBuffer(overrideJsonRequest, nullptr), &_request))
ChkHr(JsonHelpers::SetNamedString(_request, L"Name", tmp.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"StoreId", storeProductId.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedBool(_request, L"HasPreviewCapability", hasPreviewCapability))
Version
!storeProductId.IsValid() && "Shouldn't be a storeId yet in this scenario"
HasPreviewCapability
ChkHr(JsonHelpers::SetNamedString(_request, L"InvokedApi", invokedApi))
ModalFlow
ChkHr(JsonHelpers::SetNamedString(_request, L"Version", hstrPurchaseAppAPIVersion.GetRawBuffer(nullptr)))
InvokedApi
Width
Height
ChkHr(UriHelperV7::GetRawString(UriHelperV7::ModalFlowSizes, modalFlowSizes.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(modalFlowSizes.GetRawBuffer(nullptr), modalFlowJsonData.GetAddressOf()))
ParentProductId
ChkHr(JsonHelpers::SetNamedString(_request, L"ParentProductId", WindowsGetStringRawBuffer(appProductId, nullptr)))
writeRatingsAndReview
Override ParentProductId
JsonHelpers::Stringify(_response, jsonResponse)
Windows::Services::Store::PurchaseOperation::GetResults
ChkHr(_FillTheRequestWithRequiredParameters())
ChkHr(StartOperation(1))
ChkHr(CoSwitchCallContext(nullptr, &oldCtx))
Windows::Services::Store::PurchaseOperation::_FillTheRequestWithRequiredParameters
ChkHr(pArgs->get_State(&state))
Windows::Services::Store::PurchaseOperation::_OnModalExperienceEvent
ChkHr(JsonHelpers::SetNamedString(_request, L"UserId", realId.GetRawBuffer(nullptr)))
ChkHr(IAPUtils::GetDeviceContextString(deviceContextString.GetAddressOf()))
ChkHr(GetPurchaseAppPfn(_user.Get(), purchaseAppPfn.GetAddressOf()))
ChkHr(WinStoreAuth::ConvertWebAccountIdFromRealIdToAppForUser(_user.Get(), authType, purchaseAppPfn.Get(), userId.Get(), realId.GetAddressOf()))
ChkHr(::ActivateInstance(StringReference(RuntimeClass_Windows_Internal_Shell_ModalExperience_ModalExperienceOptions).Get(), &modalExperienceOptions))
Windows::Services::Store::PurchaseOperation::_BuildModalExperienceOptions
DeviceContext
ChkHr(JsonHelpers::SetNamedString(_request, L"DeviceContext", deviceContextString.GetRawBuffer(nullptr)))
ChkHr(modalExperienceOptions->put_Centered(true))
ChkHr(modalExperienceOptions->put_ExperienceMinimumSize(size))
ChkHr(modalExperienceOptions->put_SuspendExemptionType(static_cast<UINT32>(PLM_TASKCOMPLETION_CATEGORY_FLAGS::PT_TC_NONE)))
ChkHr(modalExperienceOptions->put_ExperienceTitle((nameOverride == nullptr ? HStringReference(L" ").Get() : nameOverride.Get())))
ChkHr(modalExperienceOptions->put_AllowWin32Owner(true))
Windows::Services::Store::PurchaseOperation::_Purchase
ChkHr(modalExperienceOptions->put_ExperienceDefaultSize(size))
ChkHr(modalExperienceOptions->put_ExperienceMaximumSize(size))
ChkHr(_BuildModalExperienceOptions(modalExperienceOptions, _size))
ChkHr(JsonHelpers::Stringify(_request, jsonRequestString.GetAddressOf()))
ChkHr(JsonHelpers::SetNamedString(_request, L"CV", cv.GetUnicode()))
ChkHr(args->RuntimeClassInitialize( jsonRequestString.Get(), jsonIntialResponse.Get(), _size))
ChkHr(ClientProcessUtils::GetModalExperienceManager(&modalManager))
ChkHr(JsonHelpers::Stringify(_response, jsonIntialResponse.GetAddressOf()))
jsonRequest: %s
ChkHr(signInMgr->GetHandleForUser(_user.Get(), &userContextToken))
ChkHr(GetPurchaseAppUserModelId(_user.Get(), purchaseAppUserModelId.GetAddressOf()))
PurchaseMEM
ChkHr(hrModalAsUser)
modalManager->ShowForContractByAppID( purchaseAppUserModelId, StringReference(L"Windows.Launch").Get(), activatedEventArgs.Get(), modalExperienceOptions.Get(), reinterpret_cast<Windows::Internal::Shell::ViewManagerInterop::WindowInstanceId>(_hwnd), handler.Get(), &experienceToken)
args->SetMemInfo(experienceToken, modalManager)
Windows.Launch
modalManagerAsUser->ShowForContractByAppIDAsUser( purchaseAppUserModelId, StringReference(L"Windows.Launch").Get(), activatedEventArgs.Get(), modalExperienceOptions.Get(), reinterpret_cast<Windows::Internal::Shell::ViewManagerInterop::WindowInstanceId>(_hwnd), handler.Get(), userContextToken, &experienceToken)
jsonResponse: %s
ChkHr(JsonHelpers::ParseToJsonObject(jsonResponse.GetRawBuffer(nullptr), _response.GetAddressOf()))
ChkHr(args->get_ResultCode(&hr))
ChkHr(args->get_JsonResponse(jsonResponse.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(_request, jsonRequest.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(_response, jsonResponse.GetAddressOf()))
ChkHr(_request->SetNamedValue(HStringReference(g_DoNotLogTheseValues[i]).Get(), nullptr))
Windows::Services::Store::PurchaseOperation::_FirePurchaseTelemetry
Windows::Services::Store::PurchaseOperation::DoWork
NetworkError
AlreadyPurchased
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"AlreadyPurchased"))
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"ServerError"))
error
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"NetworkError"))
ServerError
ChkHr(JsonHelpers::SetNamedNumber(_response, L"error", hrPurchase))
ChkHr(pickle->SetBlanket( punk, 0xFFFFFFFFL, 0xffffffff, ( ( OLECHAR * )( INT_PTR )-1 ), 0, 4, nullptr, EOAC_DEFAULT))
ChkHr((MakeAndInitialize<LicenseInformationServer, LicenseInformationServer>(spLicenseInformationServerSingleton.GetAddressOf())))
Windows::ApplicationModel::Store::LicenseInformationServer::CreateInstance
AllowImpersonation
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\licenseinformationserver.cpp
ChkAlloc(m_timer)
Windows::ApplicationModel::Store::LicenseInformationServer::Initialize
ChkHr(spLicenseInformationServerSingleton->Initialize(lpszPackageFullName, eAppType, pCV))
ChkHr(CopyToNotNull(spLicenseInformationServerSingleton, value))
ChkHr(CoCreateInstance( __uuidof(ApplicationLicenseManager), nullptr, (CLSCTX_INPROC_SERVER|CLSCTX_LOCAL_SERVER|CLSCTX_REMOTE_SERVER), __uuidof(**(&m_spLicenseManager)), IID_PPV_ARGS_Helper(&m_spLicenseManager)))
ChkHr(AllowImpersonation(m_spLicenseManager.Get()))
ChkHr(Vector<UnfulfilledConsumable*>::Make(&m_spUnfulfilledList))
ChkHr(m_spPackageFullName.Set(packageFullName))
ChkHr(RefreshInternalState(true, pCV))
refreshConsumablesAsync
ChkHr(((HRESULT) ((RtlQueryWnfStateData( &initialChangeStamp, WNF_LM_CONTENT_LICENSE_CHANGED, WnfLicenseStateChangeCallback, nullptr, nullptr)) | 0x10000000)))
ChkHr(((HRESULT) ((RtlSubscribeWnfStateChangeNotification( &m_wnfLicenseChanged, WNF_LM_CONTENT_LICENSE_CHANGED, initialChangeStamp, WnfLicenseStateChangeCallback, context, nullptr, 0, 0x00000001UL)) | 0x10000000)))
ChkHr(spAppContentInfo->GetCatalogId(&bigCatId))
ChkHr(m_productId.Set(bigCatId))
Windows::ApplicationModel::Store::LicenseInformationServer::RefreshInternalState
ChkHr(spLicenseInstance->GetContentInfo(__uuidof(**(&spAppContentInfo)), IID_PPV_ARGS_Helper(&spAppContentInfo)))
ChkHr(spLicenseInstance->GetIsTrial(&m_bIsTrial))
ChkHr(IAPUtils::SetDateTime(ftExpirationTime, &m_dtExpiration))
ChkHr(spAppContentInfo->GetWindowsStoreAppId(&m_appId))
ChkHr(spLicenseInstance->GetIsActive(&m_bActive))
Timer expired, triggering state refresh
Windows::ApplicationModel::Store::LicenseInformationServer::_TimerCallback
RefreshInternalState with refreshConsumables %d, license IsActive %d, IsTrial %d
ChkHr(spProductLicenseMap->Initialize(spLicenseInstance.Get(), spUnfulfilledList.Get()))
ChkHr(GetUnfulfilledConsumablesOperationServer::GetUnfulfilledConsumablesSync( m_productId.Get(), pCV, nullptr, spUnfulfilledList.Get()))
Windows::ApplicationModel::Store::LicenseInformationServer::get_ProductLicenses
ChkHr(Vector<UnfulfilledConsumable*>::Make(&spUnfulfilledList))
Windows::ApplicationModel::Store::LicenseInformationServer::RefreshConsumables
Windows::ApplicationModel::Store::LicenseInformationServer::get_IsActive
Windows::ApplicationModel::Store::LicenseInformationServer::get_IsTrial
m_bInitialized
ChkHr(m_pProductLicenseMap.CopyTo(ppValue))
Windows::ApplicationModel::Store::LicenseInformationServer::add_LicenseChanged
ChkHr(m_evtLicenseStatusChangedEvent.Remove(iCookie))
Windows::ApplicationModel::Store::LicenseInformationServer::get_ExpirationDate
ChkHr(m_evtLicenseStatusChangedEvent.Add(pHandler, pCookie))
Windows::ApplicationModel::Store::LicenseInformationServer::CheckForChanges
ChkHr(m_evtLicenseStatusChangedEvent.InvokeAll())
Windows::ApplicationModel::Store::LicenseInformationServer::remove_LicenseChanged
ChkHr(RefreshInternalState(false, pCV))
License Info for app %s: (CV = %hs)
Windows::ApplicationModel::Store::LicenseInformationServer::DumpLicensesToDebugger
m_productId.CopyTo(productId)
Windows::ApplicationModel::Store::LicenseInformationServer::GetProductId
  IsActive: %hs, IsTrial: %hs, App type: %u, Listner count: %u
  ExpirationDateTime: %u/%u/%u %02u:%02u:%02u
false
  LicenseManager: %hs
  Ticks until next check: %u
VALID
not set
    %02u productId = %s, offerId = %s, productType = %u, skuId = %s, isTrial = %hs, catalogId = %s, expires %u/%u/%u
  UnfulfilledList: %hs
  LicenseInstance: %hs
    <empty list>
    %02u inAppOfferToken = %s, transId = %s, offerId = %s
Windows.Foundation.Collections.IMapView`2<String, Windows.ApplicationModel.Store.ProductLicense>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>
(PeOC
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>
FChkHr(HRESULT_FROM_RPC(RpcStringBindingComposeW(nullptr, reinterpret_cast<RPC_WSTR>(L"ncalrpc"), nullptr, nullptr, nullptr, &rpcStringBinding)))
RpcHelpers::GetRpcHandle
ncalrpc
ChkHr(HRESULT_FROM_WIN32(GetLastError()))
ChkHr(HRESULT_FROM_RPC(RpcBindingSetAuthInfoExW( rpcHandle, nullptr, 6, 10, 0, 0, reinterpret_cast<RPC_SECURITY_QOS *>(&qos))))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\rpchelpers.cpp
ChkHr(HRESULT_FROM_RPC(RpcBindingFromStringBindingW(rpcStringBinding, &rpcHandle)))
Windows::Services::Store::Internal::ConvertPUIDFromDecToHex
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\trialownership.cpp
Conversion to UINT64 failed: %s
https://login.microsoft.com
%016llX
Conversion to hex failed: %s
StoreContext.RequestDownloadAndInstallStorePackagesAsync
ChkHr(_Initialize( packageFullName, "StoreContext.RequestDownloadAndInstallStorePackagesAsync", storeIds, nullptr , nullptr , true , true , false , pszCV, pMessageDialogHelper, asyncId))
ChkHr(_Initialize( packageFullName, pszOperationName, storeIds, storePackageInstallOptions, nullptr , true , shouldPromptForConsent, totallySilent, pszCV, pMessageDialogHelper, asyncId))
ChkHr(_Initialize( packageFullName, pszOperationName, nullptr , nullptr , pStorePackageUpdates, install, shouldPromptForConsent, totallySilent, pszCV, pMessageDialogHelper, asyncId))
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\downloadandinstallstorepackagesoperation.cpp
ChkHr(AsyncBase::CheckValidStateForResultsCall())
ChkHr(MakeAndInitialize<StorePackageUpdateResult>( pStorePackageUpdateResult, _overallState, _updateStatuses.Get(), _queueItems.Get()))
ChkArg(pStorePackageUpdateResult)
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::GetResults
ChkHr(_storePackageUpdates.As(&updates))
ChkHr(_messageDialogHelper.As(&messageDialogHelper))
ChkHr(_storeIds.As(&storeIds))
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::DoWork
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Completed, true ))
ChkHr(storeContextServer->DownloadStorePackageUpdates( updates.Get(), cv.GetHStringReference().Get(), _install, _shouldPromptForConsent, messageDialogHelper.Get(), &_queueItems, &canceled))
ChkHr(storeContextServer->DownloadStorePackages( storeIds.Get(), _storePackageInstallOptions.Get(), cv.GetHStringReference().Get(), _shouldPromptForConsent, _totallySilent, messageDialogHelper.Get(), &_queueItems, &canceled))
ChkHr(updates->First(&updateIterator))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_OtherError, false ))
No products found
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Canceled, true ))
ChkHr(_queueItems->get_Size(&size))
Waiting for installs to complete
Installs to complete, continuing
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Pending, false ))
ChkHr(_AttachAllEventHandlers(_queueItems.Get()))
ChkHr(iterator->get_HasCurrent(&hasCurrent))
ChkHr(iterator->get_Current(&status))
ChkHr(StorePackageUpdateStatusVector::Make(&storePackageUpdateStatuses))
ChkHr(_updateStatusMap->First(&iterator))
ChkHr(iterator->MoveNext(&hasCurrent))
ChkHr(storePackageUpdateStatuses->GetView(&_updateStatuses))
ChkHr(status->get_Value(&updateStatus))
ChkHr(storePackageUpdateStatuses->Append(updateStatus))
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_Initialize
ChkHr(AsAgile(storeIds, &_storeIds))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Completed, false ))
ChkHr(_packageFullName.Set(packageFullName))
ChkArg(_messageDialogHelper)
ChkHr(EventTokenHashMap::Make(&_statusChangedTokenMap))
ChkHr(AsAgile(pStorePackageUpdates, &_storePackageUpdates))
ChkHr(AsAgile(pMessageDialogHelper, &_messageDialogHelper))
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_RefreshAllStatusesAndOverallState
ChkHr(items->GetAt(index, &item))
ChkHr(StorePackageUpdateStatusHashMap::Make(&_updateStatusMap))
ChkHr(StartOperation(asyncId))
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_RefreshStatus
ChkHr(item->GetCurrentStatus(installStatus.GetAddressOf()))
ChkHr(_RefreshStatus(item.Get(), raiseEvent))
ChkHr(item->get_PackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(installStatus->get_UpdateStatus(&newStatus))
Moving %s to final state: %d
ChkHr(installStatus->get_PackageInstallState(&queueState))
ChkHr(installStatus->get_PackageInstallExtendedState(&entendedQueueState))
ChkHr(_statusChangedTokenMap->get_Size(&size))
Status done, remaining installs: %d
ChkHr(_updateStatusMap->Insert(packageFamilyName.Get(), newStatus, &replaced))
ChkHr(_ClearEventHandler(item))
ChkHr(_statusChangedTokenMap->Insert(packageFamilyName.Get(), regToken, &replaced))
Attached event handler for item %s
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_AttachAllEventHandlers
ChkHr(item->add_StatusChanged( Microsoft::WRL::Callback<ITypedEventHandler<StoreQueueItem*, IInspectable*>>( this, &DownloadAndInstallStorePackagesOperation::_OnStoreQueueItemStatusChanged).Get(), &regToken))
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_ClearEventHandler
ChkHr(_statusChangedTokenMap->HasKey(packageFamilyName.Get(), &hasKey))
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_ClearAllEventHandlers
ChkHr(_ClearEventHandler(item.Get()))
ChkHr(item->remove_StatusChanged(regToken))
ChkHr(_statusChangedTokenMap->Remove(packageFamilyName.Get()))
Cleared event hander for item %s
ChkHr(_statusChangedTokenMap->Lookup(packageFamilyName.Get(), &regToken))
ChkHr(_RefreshStatus(item, true ))
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_OnStoreQueueItemStatusChanged
Got event for item with Package Family Name %s after the events were unregistered.
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.EventRegistrationToken>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StorePackageUpdateStatus>>
e/X4V
ChkHr(StringCaseInsensitiveEquals()(StorePackageUpdateLeft.PackageFamilyName, StorePackageUpdateRight.PackageFamilyName, fEquals))
StorePackageUpdateManagerUtils::StorePackageUpdateStatusEquals::operator ()
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.EventRegistrationToken>
onecoreuap\enduser\winstore\licensing\winrt\lib\StorePackageUpdateManagerUtils.h
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StorePackageUpdateStatus>>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IMapView`2<String, Windows.Foundation.EventRegistrationToken>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.EventRegistrationToken>>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IMap`2<String, Windows.Foundation.EventRegistrationToken>
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\messagedialoghelper.cpp
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_UI_Popups_MessageDialog).Get(), &_messageDialogFactory))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::ShowDialog
ChkHr(_messageDialogFactory->CreateWithTitle(content.Get(), title.Get(), &spMessageDialog))
ChkHr(_appName.Set(appName))
ChkHr(GetText(hr, cv, content.GetAddressOf(), title.GetAddressOf()))
ChkHr(AddCommands(hr, spMessageDialog.Get()))
ChkHr(spMessageDialog->ShowAsync(&spAsyncOperation))
ChkHr(spMessageDialog.As(&initWithWindow))
ChkHr(initWithWindow->Initialize(_hwnd))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::CheckDialogResults
ChkHr(pCommand->get_Id(&spPropertyValue))
ChkHr(BlockOnCompletion(spAsyncOperation.Get(), COWAIT_WAITALL))
ChkBool(pCommand != nullptr, ((HRESULT)0x80004004L))
ChkBool(commandId == OkCommandId, ((HRESULT)0x80004004L))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::ShowDialogWithResultsAsync
ChkBool(spPropertyValue != nullptr, ((HRESULT)0x80004004L))
ChkHr(spPropertyValue->GetInt32(&commandId))
ChkHr(IAPUtils::CreateUri(HStringReference(L"ms-windows-store://signin").Get(), &spUri))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::AddCommands::<lambda_15f12a2aa8815279ba62b0ed701eba1a>::operator ()
ChkHr(spMessageDialog->ShowAsync(ppMessageDialogOperation))
ms-windows-store://signin
ChkHr(pMessageDialog->get_Commands(&spCommands))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::AddCommands
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_System_Launcher).Get(), &spLauncherStatics))
ChkHr(spLauncherStatics->LaunchUriAsync(spUri.Get(), &spAsyncOperation))
ChkHr(CreateCommand( 1022, nullptr, &spCommand))
ChkHr(CreateCommandWithInt32Id( 2002, OkCommandId, nullptr, spCommand.GetAddressOf()))
ChkHr(CreateCommand( 1020, Microsoft::WRL::Callback<Windows::UI::Popups::IUICommandInvokedHandler>( [](Windows::UI::Popups::IUICommand *) -> HRESULT { HRESULT __hr = ((HRESULT)0L);; { ComPtr<IUriRuntimeClass> spUri; { { __hr = (IAPUtils::CreateUri(HStringReference(L"ms-windows-store://signin").Get(), &spUri)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\messagedialoghelper.cpp", 138, __FSTREXP __FUNCTION__  , "ChkHr(IAPUtils::CreateUri(HStringReference(L\"ms-windows-store://signin\").Get(), &spUri))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<ILauncherStatics> spLauncherStatics; { { __hr = (GetActivationFactory(StringReference(RuntimeClass_Windows_System_Launcher).Get(), &spLauncherStatics)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\messagedialoghelper.cpp", 138, __FSTREXP __FUNCTION__  , "ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_System_Launcher).Get(), &spLauncherStatics))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<IAsyncOperation<bool>> spAsyncOperation; { { __hr = (spLauncherStatics->LaunchUriAsync(spUri.Get(), &spAsyncOperation)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\messagedialoghelper.cpp", 138, __FSTREXP __FUNCTION__  , "ChkHr(spLauncherStatics->LaunchUriAsync(spUri.Get(), &spAsyncOperation))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; } goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }).Get(), &spCommand))
ChkHr(spCommands->Append(spCommand.Get()))
ChkHr(_contextString.CopyTo(value))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Foundation_PropertyValue).Get(), spPropValueFactory.GetAddressOf()))
ChkHr(CreateCommandWithInt32Id( 2003, DenyCommandId, nullptr, spCommand.GetAddressOf()))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::get_ContextString
ChkHr(spPropValueFactory->CreateInt32(id, &spPropertyValue))
ChkHr(spCommand->put_Id(spPropertyValue.Get()))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::CreateCommandWithInt32Id
ChkHr(CreateCommand( uLabelId, pHandler, spCommand.GetAddressOf()))
ChkHr(LoadFormattedString( uLabelId, nullptr, &pszContent))
ChkHr(spCommand->put_Label(HStringReference((const WCHAR*)pszContent).Get()))
ChkHr(Windows::Foundation::ActivateInstance( HStringReference(RuntimeClass_Windows_UI_Popups_UICommand).Get(), &spCommand))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::CreateCommand
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::GetAppName
ChkHr(spCoreAppPrivate->GetAppDisplayName(appName.GetAddressOf()))
ChkHr(spCommand->put_Invoked(pHandler))
ChkArg(pszBuffer)
ChkHr(spPackageStatics->FindByPackageFamilyNameAndPackageType( HStringReference(pkgFamilyName).Get(), PackageType_Main | PackageType_Xap, &spPackages))
ChkHr(spPackages->get_Size(&packageCount))
ChkHr(GetPackageFamilyNameFromToken(spProcessToken, &pkgFamilyNameSize, pkgFamilyName))
ChkHr(GetActivationFactory( HStringReference(RuntimeClass_Windows_Internal_StateRepository_Package).Get(), &spPackageStatics))
ChkHr(GetActivationFactory( HStringReference(RuntimeClass_Windows_Internal_StateRepository_PackageResourceResolver).Get(), &spPackageResolverStatics))
ChkHr(spPackageResolverStatics->Create(spPackage.Get(), &spPackageResolver))
ChkBool(packageCount > 0, ((HRESULT)0x80004005L))
ChkHr(spPackages->GetAt(0, &spPackage))
ChkHr(GetAppName(szArgument, (sizeof(*RtlpNumberOf(szArgument)))))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::GetText
ChkHr(spPackageResolver->GetDisplayNameLocalized(appName.GetAddressOf()))
ChkHr(hrCopy)
ChkHr(LoadFormattedString(uContentId, cv, &pszContent, &szArgument, &szArgument2))
ChkHr(LoadFormattedString( uTitleId, nullptr, &pszTitle, &szArgument))
ChkHr(StringCchPrintfW(szArgument, (sizeof(*RtlpNumberOf(szArgument))), L"0x%X", hr))
ChkBool(LoadStringW(g_hinst, uId, szUnformattedString, (sizeof(*RtlpNumberOf(szUnformattedString)))), HRESULT_FROM_WIN32(GetLastError()))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::LoadFormattedString
ChkHr(hstrContent.Set(pszContent))
ChkHr(hstrTitle.Set(pszTitle))
[CV:%2]
ChkHr(FormatStrings(L"%1\n[CV:%2]", ppszFormattedString, pszMessage, WindowsGetStringRawBuffer(cv, nullptr)))
Windows.Internal.StateRepository.PackageResourceResolver
Windows.System.Launcher
Windows::Services::Store::BackgroundTaskOperation::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\backgroundtaskoperation.cpp
ChkHr(_jsonRequest.Set(jsonRequest))
ChkHr(_jsonResponse.CopyTo(pValue))
ChkHr(JsonHelpers::ParseToJsonObject(_jsonRequest.GetRawBuffer(nullptr), jsonDataObj.GetAddressOf()))
ChkHr(_cv.Set(cv))
Windows::Services::Store::BackgroundTaskOperation::GetResults
ChkHr(JsonHelpers::GetNamedString(jsonDataObj, L"AppServiceName", appServiceName.GetAddressOf()))
ChkHr(JsonHelpers::SetNamedString(jsonDataObj, L"CV", _cv.GetRawBuffer(nullptr)))
Windows::Services::Store::BackgroundTaskOperation::DoWork
AppServiceName
ChkHr(pdConnection->put_PackageFamilyName(purchaseAppPfn.Get()))
ChkHr(pdConnection->OpenAsync(&openOperation))
ChkHr(ActivateInstance(AppServiceConnectionRef.Get(), &pdConnection))
ChkHr(pdConnection->put_AppServiceName(appServiceName.Get()))
ChkHr(((HRESULT)0x803F610CL))
ChkHr(ActivateInstance(ValueSetRef.Get(), &message))
ChkHr(BlockOnCompletionAndGetResults(openOperation.Get(), &status))
ChkHr(((HRESULT)0x80270254L))
ChkHr(BlockOnCompletionAndGetResults(sendMessageOperation.Get(), &response))
ChkHr(response->get_Status(&responseStatus))
ChkHr(ConvertJsonObjectToPropertySet(jsonDataObj, message))
ChkHr(pdConnection->SendMessageAsync(message.Get(), sendMessageOperation.GetAddressOf()))
ChkHr(JsonHelpers::SetNamedNumber(jsonOutput, L"AppServiceResponseStatus", responseStatus))
ChkHr(response->get_Message(&responseMessage))
ChkHr(JsonHelpers::CreateJsonObject(&jsonOutput))
AppServiceResponseStatus
ChkHr(propertySet.As(&propertySetMap))
Windows::Services::Store::BackgroundTaskOperation::ConvertJsonObjectToPropertySet
ChkHr(ConvertPropertySetToJsonObject(responseMessage, jsonOutput))
ChkHr(JsonHelpers::Stringify(jsonOutput, _jsonResponse.GetAddressOf()))
ChkHr(propertyValueFactory->CreateString(value.Get(), propValue.GetAddressOf()))
ChkHr(jsonValue->GetBoolean(&value))
ChkHr(GetActivationFactory(PropertyValueRef.Get(), &propertyValueFactory))
ChkHr(jsonValue->get_ValueType(&jsonType))
ChkHr(jsonValue->GetNumber(&value))
ChkHr(propertyValueFactory->CreateDouble(value, propValue.GetAddressOf()))
ChkHr(propertyValueFactory->CreateBoolean(value, propValue.GetAddressOf()))
ChkHr(propertyValueFactory->CreateEmpty(propValue.GetAddressOf()))
ChkHr(propertySetMap->Insert(keyName.Get(), propValue.Get(), &replaced))
ChkHr(propertySet.As(&propertySetIterable))
ChkHr(jsonValue->Stringify(value.GetAddressOf()))
ChkHr(HRESULT_FROM_WIN32(1630L))
ChkHr(propertySetIterator->get_HasCurrent(&hasCurrent))
ChkHr(propertySetIterator->get_Current(&currentPair))
Windows::Services::Store::BackgroundTaskOperation::ConvertPropertySetToJsonObject
ChkHr(propertySetIterable->First(&propertySetIterator))
ChkHr(propValue->get_Type(&type))
ChkHr(propValue->GetString(stringValue.GetAddressOf()))
ChkHr(currentPair->get_Value(value.GetAddressOf()))
ChkHr(value.As(&propValue))
ChkHr(JsonHelpers::SetNamedBool(json, keyName.GetRawBuffer(nullptr), boolValue))
ChkHr(propValue->GetDouble(&doubleValue))
ChkHr(JsonHelpers::SetNamedString(json, keyName.GetRawBuffer(nullptr), stringValue.GetRawBuffer(nullptr)))
ChkHr(propValue->GetBoolean(&boolValue))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), int16Value))
ChkHr(propValue->GetInt32(&int32Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), doubleValue))
ChkHr(propValue->GetInt16(&int16Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), static_cast<double>(int64Value)))
ChkHr(propValue->GetSingle(&floatValue))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), int32Value))
ChkHr(propValue->GetInt64(&int64Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), byteValue))
ChkHr(propValue->GetUInt16(&uint16Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), floatValue))
ChkHr(propValue->GetUInt8(&byteValue))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), uint32Value))
ChkHr(propValue->GetUInt64(&uint64Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), uint16Value))
ChkHr(propValue->GetUInt32(&uint32Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), static_cast<double>(uint64Value)))
ChkHr(propertySetIterator->MoveNext(&hasCurrent))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storequeueitem.cpp
_ConvertAppInstallState
ChkHr(((HRESULT)0x8000000BL))
_ConvertStoreQueueState
ChkHr(_appInstallItem->add_Completed(completedHandler.Get(), &_completedToken))
ChkHr(_appInstallItem->add_StatusChanged(statusChangedHandler.Get(), &_statusChangedToken))
ChkHr(wil::com_weak_query_nothrow(this, &weakThis))
Windows::Services::Store::StoreQueueItem::RuntimeClassInitialize
Windows::Services::Store::StoreQueueItem::get_PackageFamilyName
ChkHr(_appInstallItem->get_PackageFamilyName(value))
Windows::Services::Store::StoreQueueItem::get_ProductId
ChkHr(_appInstallItem->get_ProductId(value))
false && "AppInstallItem returned an unexpected InstallType!"
ChkHr(_appInstallItem->GetCurrentStatus(&appInstallStatus))
Windows::Services::Store::StoreQueueItem::get_InstallKind
ChkHr(_appInstallItem->get_InstallType(&installType))
ChkHr(appInstallStatus.As(&appInstallStatus3))
ChkHr(appInstallStatus3->get_IsStaged(&isStaged))
Windows::Services::Store::StoreQueueItem::GetCurrentStatus
ChkHr(appInstallStatus->get_InstallState(&appInstallState))
ChkHr(_ConvertAppInstallState(appInstallState, isStaged, isDownloaded, &state, &extendedState))
ChkHr(_ConvertStoreQueueState(extendedState, &packageStatus.PackageUpdateState))
ChkHr(appInstallStatus.As(&appInstallStatusInternal))
ChkHr(appInstallStatusInternal->get_IsDownloaded(&isDownloaded))
ChkHr(_appInstallItem->get_PackageFamilyName(packageFamilyName.GetAddressOf()))
Converted Store Queue State for Package %s - AppInstallState: %d and IsStaged: %s and IsDownloaded: %s to StoreQueueItemState: %d and StoreQueueItemExtendedState: %d
ChkHr(appInstallStatus->get_BytesDownloaded(&packageStatus.PackageBytesDownloaded))
ChkHr(appInstallStatus->get_DownloadSizeInBytes(&packageStatus.PackageDownloadSizeInBytes))
ChkHr(MakeAndInitialize<StoreQueueItemStatus>(&status, state, extendedState, packageStatus, errorCode))
ChkHr(status.CopyTo(result))
ChkHr(appInstallStatus->get_PercentComplete(&percentComplete))
ChkHr(appInstallStatus->get_ErrorCode(&errorCode))
ChkHr(_completedEvent.Remove(token))
Windows::Services::Store::StoreQueueItem::remove_Completed
ChkHr(_completedEvent.Add(handler, token))
Windows::Services::Store::StoreQueueItem::add_Completed
ChkHr(_statusChangedEvent.Remove(token))
Windows::Services::Store::StoreQueueItem::remove_StatusChanged
ChkHr(_statusChangedEvent.Add(handler, token))
Windows::Services::Store::StoreQueueItem::add_StatusChanged
ChkHr(appInstallItem2->CancelWithTelemetry(cv.GetHStringReference().Get()))
ChkArg(action)
ChkHr(spThis->_appInstallItem.As(&appInstallItem2))
Windows::Services::Store::StoreQueueItem::CancelInstallAsync::<lambda_d1736aba06d2550ef72516d3b949248d>::operator ()
Windows::Services::Store::StoreQueueItem::PauseInstallAsync::<lambda_3ae2be7c59700f088c71a2e974e099d7>::operator ()
ChkHr(appInstallItem2->PauseWithTelemetry(cv.GetHStringReference().Get()))
Windows::Services::Store::StoreQueueItem::CancelInstallAsync
ChkHr(MakeAsyncAction<AsyncCausalityOptions<CancelInstallAsyncOperationName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), action, TrustLevel::BaseTrust, [spThis](CNoResult &) -> HRESULT { CVHelperIncrementOnce cv(spThis->_cv); HRESULT __hr = ((HRESULT)0L);; ComPtr<IAppInstallItem2> appInstallItem2; { { __hr = (spThis->_appInstallItem.As(&appInstallItem2)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 392, __FSTREXP __FUNCTION__  , "ChkHr(spThis->_appInstallItem.As(&appInstallItem2))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (appInstallItem2->CancelWithTelemetry(cv.GetHStringReference().Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 392, __FSTREXP __FUNCTION__  , "ChkHr(appInstallItem2->CancelWithTelemetry(cv.GetHStringReference().Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
Windows::Services::Store::StoreQueueItem::ResumeInstallAsync::<lambda_6415c329af764cfa64f9adf4a6632101>::operator ()
ChkHr(appInstallItem2->RestartWithTelemetry(cv.GetHStringReference().Get()))
Windows::Services::Store::StoreQueueItem::PauseInstallAsync
ChkHr(MakeAsyncAction<AsyncCausalityOptions<PauseInstallAsyncOperationName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), action, TrustLevel::BaseTrust, [spThis](CNoResult &) -> HRESULT { CVHelperIncrementOnce cv(spThis->_cv); HRESULT __hr = ((HRESULT)0L);; ComPtr<IAppInstallItem2> appInstallItem2; { { __hr = (spThis->_appInstallItem.As(&appInstallItem2)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 417, __FSTREXP __FUNCTION__  , "ChkHr(spThis->_appInstallItem.As(&appInstallItem2))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (appInstallItem2->PauseWithTelemetry(cv.GetHStringReference().Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 417, __FSTREXP __FUNCTION__  , "ChkHr(appInstallItem2->PauseWithTelemetry(cv.GetHStringReference().Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(_appInstallItem.As(&item2))
Windows::Services::Store::StoreQueueItem::get_IsMandatory
Windows::Services::Store::StoreQueueItem::ResumeInstallAsync
ChkHr(MakeAsyncAction<AsyncCausalityOptions<ResumeInstallAsyncOperationName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), action, TrustLevel::BaseTrust, [spThis](CNoResult &) -> HRESULT { CVHelperIncrementOnce cv(spThis->_cv); HRESULT __hr = ((HRESULT)0L);; ComPtr<IAppInstallItem2> appInstallItem2; { { __hr = (spThis->_appInstallItem.As(&appInstallItem2)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 442, __FSTREXP __FUNCTION__  , "ChkHr(spThis->_appInstallItem.As(&appInstallItem2))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (appInstallItem2->RestartWithTelemetry(cv.GetHStringReference().Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 442, __FSTREXP __FUNCTION__  , "ChkHr(appInstallItem2->RestartWithTelemetry(cv.GetHStringReference().Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
Windows::Services::Store::StoreQueueItem::get_IsDownloaded
ChkHr(status.As(&statusInternal))
ChkHr(item2->get_Mandatory(value))
ChkHr(_appInstallItem->GetCurrentStatus(&status))
Windows::Services::Store::StoreQueueItem::_OnAppInstallItemStatusChanged
ChkHr(GetCurrentStatus(&status))
ChkHr(statusInternal->get_IsDownloaded(value))
ChkHr(_statusChangedEvent.InvokeAll(this, nullptr))
ChkHr(_completedEvent.InvokeAll(this, args.Get()))
Windows::Services::Store::StoreQueueItem::_OnAppInstallItemCompleted
ChkHr(MakeAndInitialize<StoreQueueItemCompletedEventArgs>(&args, status.Get()))
q}X>N
Windows.Services.Store.StoreQueueItem.ResumeInstallAsync
Windows.Services.Store.StoreQueueItem.PauseInstallAsync
Windows.Services.Store.StoreQueueItem.CancelInstallAsync
ChkHr(_storeQueueItem->get_IsMandatory(&_mandatory))
ChkArg(ppPackage)
Windows::Services::Store::StorePackageUpdate::get_Package
Windows::Services::Store::StorePackageUpdate::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepackageupdate.cpp
Windows::Services::Store::StorePackageUpdate::get_Mandatory
ChkArg(pMandatory)
%localappdata%\Packages\Microsoft.WindowsStore_8wekyb3d8bbwe\LocalState\store.etl
store.etl
C:\data\systemdata\etw\StoreOperational.etl
StoreOperational.etl
%windir%\SoftwareDistribution\ReportingEvents.log
ReportingEvents.log
Microsoft-Windows-AppXDeploymentServer-Operational.evtx
Microsoft-Windows-Store/Operational
\\?\T:\Windows\System32\Logfiles\WMI\RtBackup\StoreOperational.etl
Microsoft-Windows-AppXDeploymentServer/Operational
Microsoft-Windows-WindowsUpdateClient-Operational.evtx
Microsoft-Windows-TWinUI/Operational
Microsoft-Windows-Store-Operational.evtx
Microsoft-Windows-WindowsUpdateClient/Operational
registry_SIH.txt
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Dnscache\Parameters\DnsPolicyConfig
Microsoft-Windows-TWinUI-Operational.evtx
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\SIH
%localappdata%\Microsoft\Windows\WER\ReportQueue
%windir%\Logs\WindowsUpdate
registry_DNSPolicy.txt
%localappdata%\Microsoft\Windows\WER\ReportArchive
%windir%\Logs\dosvc
%windir%\ServiceProfiles\NetworkService\AppData\Local\Microsoft\Windows\DeliveryOptimization\logs
%windir%\Logs\SIH
gaming*.etl
%windir%\System32\LogFiles\WMI
*.etl
%windir%\System32\Config\SystemProfile\AppData\Local\packages\Microsoft.GamingServices_8wekyb3d8bbwe\LocalState
CABINET
\\?\S:\Deployment\DeliveryOptimization\Logs
WinStore
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\wscollector.cpp
QueryTrace for %s failed
FlushTrace for %s failed
FlushTraces
ChkHr(HRESULT_FROM_WIN32(erf.erfOper))
winstore
ChkHr(StringCchCopyA(szDestFileNameA, (sizeof(*RtlpNumberOf(szDestFileNameA))), pszDest))
AddFileToCab
GetTempPath2W failed
WSCollector::CollectStoreLog
report.wer
.report.wer.txt
%s export "%s" "%s" /y
Creating reg.exe process failed
PathAppendW failed
%WINDIR%\System32\reg.exe
ChkHr(CreateRandomAccessStreamOverStream(stream, BSOS_OPTIONS::BSOS_DEFAULT, __uuidof(**(&randAccStream)), IID_PPV_ARGS_Helper(&randAccStream)))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_RandomAccessStreamReference).Get(), &spStreamReferenceStatics))
GetExitCodeProcess failed
reg.exe process did not complete successfully. Exit Code: %d
ChkHr(spStreamReferenceStatics->CreateFromStream(randAccStream.Get(), result.GetAddressOf()))
Software\Microsoft\Windows\CurrentVersion\Store\Configuration
Software\Microsoft\Windows\CurrentVersion\Store\MultiVariantConfig
Software\Microsoft\Windows\CurrentVersion\Store
SYSTEM\CurrentControlSet\Control\SystemInformation
Software\Microsoft\Windows\CurrentVersion\Store\CurrentIdentity
Software\Policies\Microsoft\WindowsStore
onecoreuap\enduser\winstore\licensing\winrt\lib\registryhelper.cpp
ChkHr(HRESULT_FROM_WIN32(::RegOpenKeyExW(root, subKey, 0, ((((0x00020000L)) | (0x0001) | (0x0008) | (0x0010)) & (~(0x00100000L))), &hKey)))
RegistryHelper::GetStringValue
ChkHr(HRESULT_FROM_WIN32(::RegSetKeyValueW(root, subKey, valueName, ( 11ul ), &value, sizeof(value))))
RegistryHelper::SetQwordValue
ChkHr(outValue.Set(pszBuffer))
ChkHr(ULongMult(static_cast<DWORD>(wcslen(value)) + 1, sizeof(*value), &dwSize))
ChkHr(LocalAllocBytes(cbData, &pszBuffer))
ChkHr(HRESULT_FROM_WIN32(::RegGetValueW(hKey, nullptr, valueName, 0x00000002, nullptr, pszBuffer, &cbData)))
RegistryHelper::SetStringValue
ChkHr(HRESULT_FROM_WIN32(::RegSetKeyValueW(root, subKey, valueName, ( 1ul ), value, dwSize)))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storehardwaremanufacturerinfoserver.cpp
ChkHr(_hstrHardwareManufacturerId.CopyTo(value))
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_HardwareManufacturerId
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_ModelName
ChkHr(_hstrModelName.CopyTo(value))
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_StoreContentModifierId
ChkHr(_hstrStoreContentModifierId.CopyTo(value))
ChkHr(_hstrHardwareManufacturerId.Set(value))
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_HardwareManufacturerId
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_ManufacturerName
ChkHr(_hstrManufacturerName.CopyTo(value))
ChkHr(_hstrModelName.Set(value))
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_ModelName
ChkHr(_hstrStoreContentModifierId.Set(value))
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_StoreContentModifierId
ChkHr(_hstrManufacturerName.Set(value))
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_ManufacturerName
ChkHr(threadContext._PFN.Set(PFN))
ChkHr(threadContext._inAppOfferToken.Set(inAppOfferToken))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\PurchaseSTAHelper.h
ChkHr(threadContext.DoWork())
ChkHr(threadContext._nameOverride.Set(nameOverride))
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::RuntimeClassInitialize
CClientSTAHelper::ProductPurchaseViaInAppOfferTokenWithDisplayData
ChkHr(threadContext._devOfferId.Set(devOfferId))
ChkHr(_hstrDevOfferId.Set(devOfferId))
ChkHr(CoGetCallerTID(&_callerThreadId))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\requestproductpurchasewithdisplaypropertiesoperationserver.cpp
ChkHr(_hstrInAppOfferToken.Set(inAppOfferToken))
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::GetResults
ChkBool(spLicenseInfoServer != nullptr, ((HRESULT)0x803F6107L))
ChkHr(StartOperation(iAsyncId))
ChkArg(ppPurchaseResults)
ChkHr(_spDisplayProperties->get_Name(nameOverride.GetAddressOf()))
ChkHr(spLicenseInfoServer.As(&licenseInfo))
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::DoWork
ChkHr(nameOverride.Set(L""))
ChkAlloc(spPurchaseResults)
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::_CreatePurchaseResultsInformation
ChkHr(licenseInfo->get_IsTrial(&isTrial))
ChkHr(_CreatePurchaseResultsInformation( productPurchaseStatus, transactionId, receipt.Get(), &_spPurchaseResults))
ChkHr(spPurchaseResults->Initialize( productPurchaseStatus, transactionId, pszReceipt, _hstrDevOfferId.Get()))
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.PurchaseResults>
CWindows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::ApplicationModel::Store::PurchaseResults *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::ApplicationModel::Store::PurchaseResults *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.PurchaseResults>
pagingInfo
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\collectionsserviceproxy.cpp
CreateGetItemsRequest
ChkHr(JsonHelpers::GetNamedString(pagingInfo, L"continuationToken", ContinuationToken))
GetContinuationToken
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"identityType", L"msa"))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"identityValue", MsaTicket))
ChkHr(JsonHelpers::CreateJsonObject(&spBeneficiary))
ChkHr(JsonHelpers::AppendObject(spBeneficiaryArray, spBeneficiary))
ChkHr(JsonHelpers::CreateJsonObject(&spRequest))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"localTicketReference", L"0"))
ChkHr(JsonHelpers::CreateJsonArray(&spBeneficiaryArray))
expandSatisfyingItems
ChkHr(JsonHelpers::SetNamedBool(spRequest, L"expandSatisfyingItems", false))
beneficiaries
ChkHr(JsonHelpers::SetNamedArray(spRequest, L"beneficiaries", spBeneficiaryArray))
validityType
ChkHr(JsonHelpers::SetNamedString(spRequest, L"validityType", L"Valid"))
ChkHr(JsonHelpers::SetNamedString(spRequest, L"market", market.Get()))
Valid
ChkHr(StringCchCopyW(szQueryUri, (sizeof(*RtlpNumberOf(szQueryUri))), collectionsUriBase.GetRawBuffer(nullptr)))
v6.0/collections/query
ChkHr(UriHelper::GetUri(UriHelper::MDCollections, collectionsUriBase.GetAddressOf()))
CollectionsServiceProxyV6::GetCampaignId
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader(authTicket.Get(), false, &httpClient))
ChkHr(JsonHelpers::CreateJsonArray(&productTypes))
ChkHr(StringCchCatW(szQueryUri, (sizeof(*RtlpNumberOf(szQueryUri))), L"v6.0/collections/query"))
ChkHr(AuthenticationInternal::GetStorePrimaryAccountTicket( 0, AuthenticationEndpoint::OneStore, PromptType::Silent, false, nullptr, authTicket.GetAddressOf(), providerType, spWebTokenRequestResult.GetAddressOf()))
ChkHr(CreateGetItemsRequest(authTicket.GetRawBuffer(nullptr), &request))
productTypes
Application
ChkHr(JsonHelpers::AppendString(productTypes, L"Application"))
ChkHr(hrPost)
ChkHr(JsonHelpers::GetNamedArray(response, L"items", &items))
ChkHr(JsonHelpers::SetNamedArray(request, L"productTypes", productTypes))
ChkHr(JsonHelpers::SetNamedArray(request, L"productSkuIds", productSkuIds))
ChkHr(items->GetObjectAt(i, &item))
skuType
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(items, &count))
CollectionsServiceProxyV6::GetUnfulfilledConsumables
ChkHr(JsonHelpers::AppendString(productTypes, L"UnmanagedConsumable"))
ChkHr(JsonHelpers::GetNamedString(item, L"skuType", skuType.GetAddressOf()))
campaignId
ChkHr(((HRESULT)0x83750007L))
ChkHr(Items.Append(item))
ChkHr(JsonHelpers::SetNamedString(request, L"parentProductId", ParentProductId))
ChkHr(JsonHelpers::SetNamedString(request, L"continuationToken", continuationToken.Get()))
ChkHr(StringCchCatW(szQueryUri, (sizeof(*RtlpNumberOf(szQueryUri))), L"v6.0/collections/consume"))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"identityValue", authTicket.GetRawBuffer(nullptr)))
CollectionsServiceProxyV6::ConsumeConsumable
v6.0/collections/consume
ChkHr(JsonHelpers::SetNamedString(request, L"productId", catalogProductId))
ChkHr(JsonHelpers::SetNamedString(request, L"transactionId", transactionId))
beneficiary
ChkHr(JsonHelpers::SetNamedObject(request, L"beneficiary", spBeneficiary))
&platformDependencyName=Windows.WindowsPhone8x
&platformDependencyName=Windows.Universal
&platformDependencyName=Windows.Windows8x
{languages}
{market}
{productId}
{marketCode}
v6/products?rank=ProductSearchApps&market={market}&languages={languages}&addOnParent={productId}&fieldsTemplate=Full{platformDependencyNameParam}
v6/products?rank=PackageFamilyName&alternateId={productId}&market={marketCode}&languages={languages}&fieldsTemplate=Full
{platformDependencyNameParam}
v6/products/{productId}?market={marketCode}&languages={languages}&fieldsTemplate=Full
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader(ticket.Get(), true, ppHttpClient))
CSP6Internal::CreateCatalogHttpClient
v6/skus?rank=ContentId&alternateId={productId}&market={marketCode}&languages={languages}&fieldsTemplate=Full
neutral
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetProductDetailsPath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrUri.GetAddressOf()))
ChkHr(CSP6Internal::CreateCatalogHttpClient(&httpClient))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\catalogserviceproxy.cpp
CatalogServiceProxyV6::GetProduct
CatalogServiceProxyV6::QueryCatalogForBigCatIdByPackageFullNameAndType
ChkHr(HRESULT_FROM_WIN32(rc))
ChkHr(IAPUtils::GetJsonFromURLWithHttpClient(httpClient.Get(), hstrUri.Get(), pCV, spJsonObject.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedObject(spJsonObject, L"Product", ppJsonObject))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetSearchSkusByContentIdPath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrUri.GetAddressOf()))
ChkHr(IAPUtils::GetJsonFromURL(hstrUri.Get(), pCV, &jsonObject))
ChkHr(GetContentId(szPackageFamilyName, cpt, &guidContentId))
ChkHr(GuidToStringWithoutBraces(&guidContentId, szContentId))
TotalResultCount
ChkHr(JsonHelpers::GetNamedInteger(displayProductSearchResult, L"TotalResultCount", (int *)&count))
DisplaySkuSearchResult
ChkHr(JsonHelpers::GetNamedObject(jsonObject, L"DisplaySkuSearchResult", &displayProductSearchResult))
ChkHr(JsonHelpers::GetNamedString(firstProduct, L"ProductId", bigCatIdOut))
ChkHr(IAPUtils::GetMarket(hstrMarket.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedArray(displayProductSearchResult, L"Products", &products))
ChkHr(products->GetObjectAt(0, &firstProduct))
DisplayProductSearchResult
ChkHr(JsonHelpers::GetNamedObject(jsonObject, L"DisplayProductSearchResult", &displayProductSearchResult))
CatalogServiceProxyV6::QueryCatalogForBigCatIdByPackageFullName
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetSearchProductsByPackageFamilyNamePath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrUri.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPath( UriHelper::MDPurchase, HStringReference(L"v6.0/users/me/keys").Get(), purchaseKeysUri.GetAddressOf()))
CatalogServiceProxyV6::GetCustomerPurchaseId
ChkHr(JsonHelpers::GetNamedString(firstProduct, L"ProductId", bigCatId))
v6.0/users/me/keys
ChkHr(UriHelper::GetUriWithPath( UriHelper::MDCollections, HStringReference(L"v6.0/beneficiaries/me/keys").Get(), collectionKeysUri.GetAddressOf()))
CatalogServiceProxyV6::GetCustomerCollectionsId
ChkHr(GetB2BKey(purchaseKeysUri.Get(), serviceTicket, publisherUserId, pCV, purchaseId))
v6.0/beneficiaries/me/keys
CatalogServiceProxyV6::GetB2BKey
ChkHr(JsonHelpers::SetNamedString(request, L"serviceTicket", serviceTicket))
ChkHr(GetB2BKey(collectionKeysUri.Get(), serviceTicket, publisherUserId, pCV, collectionsId))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader(authTicket.Get(), true, &httpClient))
ChkBool(!_hstrUri.IsValid(), HRESULT_FROM_WIN32(1247L))
CatalogServiceProxyV6::AddOnsIterator::Initialize
ChkHr(JsonHelpers::SetNamedString(request, L"publisherUserId", publisherUserId))
ChkHr(JsonHelpers::GetNamedString(response, L"key", key))
CatalogServiceProxyV6::AddOnsIterator::GetNext
ChkHr(GetNextBatch())
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetSearchAddOnsPath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), _hstrUri.GetAddressOf()))
ChkBool(_hstrUri.IsValid(), HRESULT_FROM_WIN32(1003L))
ChkHr(CSP6Internal::CreateCatalogHttpClient(&_httpClient))
CatalogServiceProxyV6::AddOnsIterator::GetNextBatch
ChkHr(_currentBatch->GetObjectAt(_currentItemIndex, ppJsonIAP))
ChkHr(StringCchPrintfW( szNextUrl, (sizeof(*RtlpNumberOf(szNextUrl))), _runningCount == 0 ? L"%ws" : L"%ws&$skip=%u", _hstrUri.GetRawBuffer(nullptr), _runningCount))
ChkHr(IAPUtils::GetJsonFromURLWithHttpClient( _httpClient.Get(), HStringReference(szNextUrl).Get(), _spCV, &jsonIAPs))
%ws&$skip=%u
ChkHr(JsonHelpers::GetNamedArray(displayProductSearchResult, L"Products", &_currentBatch))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(_currentBatch, &_currentBatchCount))
ChkHr(JsonHelpers::GetNamedObject(jsonIAPs, L"DisplayProductSearchResult", &displayProductSearchResult))
ChkHr(JsonHelpers::GetNamedInteger(displayProductSearchResult, L"TotalResultCount", &totalResultCount))
OrderManagementData
ChkHr(JsonHelpers::GetNamedObject(spAvailability, L"OrderManagementData", &orderManagementData))
Price
ChkHr(JsonHelpers::GetNamedObject(orderManagementData, L"Price", &price))
GetPriceInfoFromAvailability
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\appinfo.cpp
CurrencySymbol
ListPrice
CurrencyCode
ChkHr(JsonHelpers::GetNamedString(price, L"CurrencyCode", &pricingInfo->CurrencyCode))
ChkHr(JsonHelpers::GetNamedValue(price, L"MSRP", &basePrice))
ChkHr(JsonHelpers::GetNamedValue(price, L"ListPrice", &listPrice))
ChkHr(listPrice->Stringify(&pricingInfo->Price))
ChkHr(JsonHelpers::GetNamedObject(spAvailability, L"Conditions", &conditions))
EndDate
ChkHr(basePrice->Stringify(&pricingInfo->BasePrice))
Conditions
ChkHr(JsonHelpers::GetNamedString(spJson, L"PreferredSkuId", preferredSkuId.GetAddressOf()))
GetPriceInfo
ChkHr(JsonHelpers::GetNamedDateTime(conditions, L"EndDate", &pricingInfo->SaleEndDate))
PreferredSkuId
ChkHr(displaySkuAvailabilities->GetObjectAt(iSku, &item))
Availabilities
ChkHr(JsonHelpers::GetNamedArray(spJson, L"DisplaySkuAvailabilities", &displaySkuAvailabilities))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(displaySkuAvailabilities, &count))
ChkHr(availabilities->GetObjectAt(iAvailability, &availability))
ChkHr(JsonHelpers::GetNamedString(availability, L"SkuId", skuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedArray(item, L"Availabilities", &availabilities))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(availabilities, &countAvailabilities))
ChkAlloc(spInAppSkuInfo)
BuildStoreInAppSkuInfo
ChkHr(GetPriceInfoFromAvailability(availability, pricingInfo))
Durable
ChkHr(JsonHelpers::GetNamedString(sku, L"SkuType", &spInAppSkuInfo->SkuType))
ChkHr(JsonHelpers::GetNamedArray(sku, L"LocalizedProperties", &skuLocalizedProperties))
ChkHr(JsonHelpers::GetNamedString(sku, L"SkuId", &spInAppSkuInfo->SkuId))
SkuType
SkuTitle
ChkHr(JsonHelpers::GetNamedString(skuFirstLocalizedProperties, L"SkuTitle", &spInAppSkuInfo->Title))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(skuLocalizedProperties, &count))
ChkHr(skuLocalizedProperties->GetObjectAt(0, &skuFirstLocalizedProperties))
ChkHr(JsonHelpers::GetNamedObject(sku, L"Properties", &skuProperties))
LicensingData
SkuDescription
ChkHr(JsonHelpers::GetNamedString(skuFirstLocalizedProperties, L"SkuDescription", &spInAppSkuInfo->Description))
CustomDeveloperData
ChkHr(JsonHelpers::GetNamedString(skuProperties, L"CustomDeveloperData", &spInAppSkuInfo->CustomDeveloperData))
ChkHr(JsonHelpers::GetNamedObject(skuProperties, L"LicensingData", &skuLicensingData))
ChkHr(JsonHelpers::GetNamedString(skuLicensingData, L"ProductId", &spInAppSkuInfo->ProductId))
ChkHr(GetPriceInfoFromAvailability(availability, &spInAppSkuInfo->PricingInfo))
ChkHr(JsonHelpers::GetNamedObject(availability, L"Properties", &availabilityProperties))
ChkHr(JsonHelpers::GetNamedArray(skuAvailability, L"Availabilities", &availabilities))
ChkHr(availabilities->GetObjectAt(0, &availability))
BuildStoreInAppInfo
AlternateIds
ExtendedData
ChkAlloc(spInAppOffer)
ChkHr(alternateIds->GetObjectAt(iId, &altId))
IdType
ChkHr(JsonHelpers::GetNamedArray(product, L"AlternateIds", &alternateIds))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(alternateIds, &count))
ChkHr(JsonHelpers::GetNamedString(altId, L"Value", &spInAppOffer->InAppOfferToken))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductId", &spInAppOffer->InAppProductId))
ChkHr(JsonHelpers::GetNamedString(altId, L"IdType", type.GetAddressOf()))
Value
ChkHr(JsonHelpers::GetNamedArray(product, L"LocalizedProperties", &localizedProperties))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(localizedProperties, &count))
ProductType
ChkHr(JsonHelpers::GetNamedString(product, L"ProductType", productType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductDescription", &spInAppOffer->Description))
ChkHr(JsonHelpers::GetNamedArray(properties, L"SearchTitles", &searchTitles))
ChkHr(localizedProperties->GetObjectAt(0, &properties))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductTitle", &spInAppOffer->Name))
ChkHr(JsonHelpers::GetNamedString(title, L"SearchTitleType", titleType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(title, L"SearchTitleString", searchTitleString.GetAddressOf()))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(searchTitles, &countTitles))
ChkHr(searchTitles->GetObjectAt(iTitle, &title))
ChkHr(images->GetObjectAt(iImage, &image))
ImagePurpose
ChkHr(JsonHelpers::GetNamedArray(properties, L"Images", &images))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(images, &countImages))
ChkHr(JsonHelpers::GetNamedString(image, L"Uri", &spInAppOffer->ImageUri))
ChkHr(JsonHelpers::GetNamedString(image, L"ImagePurpose", purpose.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedObject(firstSkuAvail, L"Sku", &firstSkuAvailSku))
ChkHr(JsonHelpers::GetNamedObject(firstSkuAvailSku, L"Properties", &firstSkuAvailSkuProperties))
ChkHr(JsonHelpers::GetNamedArray(product, L"DisplaySkuAvailabilities", &displaySkuAvailabilities))
ChkHr(displaySkuAvailabilities->GetObjectAt(0, &firstSkuAvail))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(displaySkuAvailabilities, &countSkuAvailabilities))
ChkAlloc(spInAppOffer->pInAppSkuList)
ChkHr(JsonHelpers::GetNamedString(firstSkuAvailSkuProperties, L"CustomDeveloperData", &spInAppOffer->ProductTag))
ChkHr(GetPriceInfo(product, &spInAppOffer->PricingInfo))
ChkHr(CatalogServiceProxyV6::GetProduct(pStoreCommerceServer->GetAppCatalogId(pCV), pCV, &product))
StoreInfoBuilders::BuildStoreAppInfo
ChkHr(displaySkuAvailabilities->GetObjectAt(iSkuAvailability, &skuAvailability))
ChkHr(BuildStoreInAppSkuInfo(skuAvailability.Get(), &spInAppSkuInformation))
ChkHr(temp.Set(wszAppId))
ChkHr(IAPUtils::GetMarket(temp.GetAddressOf()))
ChkAlloc(spStoreAppInfo)
ChkHr(GuidToStringWithoutBraces(&pStoreCommerceServer->GetAppId(), wszAppId))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductTitle", &spStoreAppInfo->Name))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(marketProperties, &count))
ChkHr(IAPUtils::GetLanguage(temp.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductDescription", &spStoreAppInfo->Description))
ChkHr(GetPriceInfo(product, &spStoreAppInfo->PricingInfo))
ChkHr(addOns.Initialize(pStoreCommerceServer, pCV))
MinimumUserAge
ChkHr(JsonHelpers::GetNamedInteger(marketProperty, L"MinimumUserAge", &rating))
ChkHr(addOns.GetNext(&jsonIAP))
ChkAlloc(spStoreAppInfo->pInAppOfferList)
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewproductinfoserver.cpp
ChkArg(pInAppInformation)
ChkArg(pAppInformation)
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::Initialize
ChkHr(_hstrProductType.Set(L"Consumable"))
Unknown
ChkHr(_hstrProductId.Set(pInAppInformation->InAppProductId))
ChkHr(_hstrProductType.Set(L"Durable"))
ChkHr(_hstrDescription.Set(pInAppInformation->Description))
ChkHr(AgileVector<StorePreviewSkuInfo*>::Make(&spSkuInfoList))
ChkHr(_hstrProductType.Set(L"Unknown"))
ChkHr(_hstrTitle.Set(pInAppInformation->Name))
ChkHr(spSkuInfoList->Append(spSkuInfo.Get()))
ChkHr(spSkuInfoList->GetView(&_spSkuInfoList))
ChkAlloc(spSkuInfo = Make<StorePreviewSkuInfoServer>())
ChkHr(spSkuInfo->Initialize( locale, market, pAppInformation, pInAppInformation, pInAppSku))
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_ProductType
ChkHr(_hstrProductType.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_ProductId
ChkHr(_hstrProductId.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_Description
ChkHr(_hstrDescription.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_Title
ChkHr(_hstrTitle.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_SkuInfoList
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo>
ProductIdCache::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productidcache.cpp
ChkHr(ProductIdHashMap::Make(&hashMap))
ProductIdCache::ProductIdFromInAppOfferToken
ChkHr(RefreshTableFromService(parentProductId, pCV))
ChkHr(hashMap.As(&_productIdTable))
ChkHr(ProductIdFromInAppOfferTokenTable(inAppOfferToken, productId))
ChkHr(_productIdTable->HasKey(inAppOfferToken, &hasKey))
ProductIdCache::ProductIdFromInAppOfferTokenTable
ChkHr(_productIdTable->Insert(inAppOfferToken, productId, &dontCare))
ProductIdCache::AddItem
ProductIdCache::RefreshTableFromService
ChkHr(JsonHelpers::GetNamedString(item, L"productId", productId.GetAddressOf()))
ChkReturn(_productIdTable->Lookup(inAppOfferToken, productId))
ChkHr(CollectionsServiceProxyV6::GetUnfulfilledConsumables(parentProductId, pCV, items))
ChkHr(JsonHelpers::GetNamedString(item, L"inAppOfferToken", inAppOfferToken.GetAddressOf()))
ChkHr(AddItem(inAppOfferToken.Get(), productId.Get()))
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
Windows.Foundation.Collections.IKeyValuePair`2<String, String>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
Windows.Foundation.Collections.IMapView`2<String, String>
Windows.Foundation.Collections.IMap`2<String, String>
CClientSTAHelper::AppPurchase
Windows::ApplicationModel::Store::RequestAppPurchaseOperationServer::GetResults
ChkHr(_hstrReceipt.CopyTo(pValue))
Windows::ApplicationModel::Store::RequestAppPurchaseOperationServer::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\apppurchaseoperationserver.cpp
CClientSTAHelper::ProductPurchaseViaInAppOfferToken
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productpurchaseoperationserver.cpp
Windows::ApplicationModel::Store::RequestProductPurchaseOperationServer::GetResults
Windows::ApplicationModel::Store::RequestProductPurchaseOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::RequestProductPurchaseOperationServer::DoWork
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\requestproductpurchasewithresultsoperationserver.cpp
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::GetResults
CClientSTAHelper::ProductPurchaseViaInAppOfferTokenWithResults
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::RuntimeClassInitialize
ChkHr(spPurchaseResults->Initialize(productPurchaseStatus, transactionId, pszReceipt, nullptr))
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::DoWork
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::_CreatePurchaseResultsInformation
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\loadlistingoperationserver.cpp
ChkHr(pStrings->First(spIter.GetAddressOf()))
ChkHr(AgileVector<HSTRING>::Make(&pVector))
UnpackHStringIIterable
ChkHr(pVector->Append(hstrCurrent.Get()))
ChkHr(spIter->MoveNext(&fHasCurrent))
ChkHr(spIter->get_HasCurrent(&fHasCurrent))
ChkHr(spIter->get_Current(hstrCurrent.GetAddressOf()))
FilterIAPs
ChkHr(inAppOfferTokens->GetAt(p, temp.GetAddressOf()))
ChkHr(pVector.As(&pIVector))
ChkHr(inAppOfferTokens->get_Size(&cInAppOfferTokens))
ChkHr(keywords->GetAt(k, filterKeyword.GetAddressOf()))
ChkHr(pInAppInfo->spKeywords->GetAt(i, inAppKeyword.GetAddressOf()))
ChkHr(keywords->get_Size(&cKeywords))
ChkHr(pInAppInfo->spKeywords->get_Size(&cInAppOfferListKeywords))
  AppId: %s, Name: %s
Listing Information (after filtering, CV = %hs):
DumpListingToDebugger
  Price: %s, Base Price: %s, Currency Symbol: %s, Currenty Code: %s
  IsOnSale: false
  Description: %s%hs
  IsUAP: %hs, Market: %s, Locale: %s, Age Rating: %u
    %02u offerToken = %s, productId = %s, name = %s, price = %s%s (%s), type = %u, isOnSale = %hs, tag = %s
      <no sku data>
  IsOnSale: TRUE, Sale End Date: %u/%u/%u %02u:%02u:%02u
  InAppOfferArray: %hs
CreateListingInformation
ChkHr(pKeywords->get_Size(&cKeywords))
      %02u skuType = %s, productId = %s, title = %s, customDeveloperData = %s, price = %s%s (%s), extendedData = %s, description = %s
ChkHr(StoreInfoBuilders::BuildStoreAppInfo( pStoreCommerceServer, pCV, hCancel, &spStoreAppInfo))
ChkHr(spListingInformation->Initialize(spStoreAppInfo))
Windows::ApplicationModel::Store::LoadListingOperationServer::RuntimeClassInitialize
ChkHr(pInAppOfferTokens->get_Size(&cInAppOfferTokens))
ChkAlloc(spListingInformation)
ChkHr(UnpackHStringIIterable(keywords, &_keywords))
ChkReturn(((HRESULT)0x80040002L))
ChkHr(UnpackHStringIIterable(inAppOfferTokens, &_inAppOfferTokens))
ChkReturn(((HRESULT)0x80040001L))
ChkHr(CreateListingInformation( _spStoreCommerceServer.Get(), cv.Get(), _hCancelEvent, _inAppOfferTokens.Get(), _keywords.Get(), &_spListingInformation))
Windows::ApplicationModel::Store::LoadListingOperationServer::DoWork
ChkArg(ppListingInformation)
Windows::ApplicationModel::Store::LoadListingOperationServer::GetResults
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.ListingInformation>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::ApplicationModel::Store::ListingInformation *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::ApplicationModel::Store::ListingInformation *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.ListingInformation>
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\receiptretrievaloperationserver.cpp
ChkArg(pReceipt)
Windows::ApplicationModel::Store::ReceiptRetrievalOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::ReceiptRetrievalOperationServer::DoWork
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), cv.Get(), IAPReceiptType_App, nullptr, authTicket.Get(), spWebTokenRequestResult.Get(), _receipt.GetAddressOf()))
Windows::ApplicationModel::Store::ReceiptRetrievalOperationServer::GetResults
ChkHr(CopyToNotNull(_receipt, pReceipt))
Windows::ApplicationModel::Store::ProductReceiptRetrievalOperationServer::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productreceiptretrievaloperationserver.cpp
ChkHr(_productId.Set(productId))
Windows::ApplicationModel::Store::ProductReceiptRetrievalOperationServer::DoWork
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), cv.Get(), IAPReceiptType_OneProduct, _productId.Get(), authTicket.Get(), spWebTokenRequestResult.Get(), _productReceipt.GetAddressOf()))
Windows::ApplicationModel::Store::ProductReceiptRetrievalOperationServer::GetResults
ChkHr(CopyToNotNull(_productReceipt, pReceipt))
ChkHr(Vector<UnfulfilledConsumable*>::Make(&_spUnfulfilledList))
ChkArg(pUnfulfilledList)
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getunfulfilledconsumablesoperationserver.cpp
ChkHr(CollectionsServiceProxyV6::GetUnfulfilledConsumables(bigCatId, pCV, items))
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::GetUnfulfilledConsumablesSync
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::GetResults
ChkHr(_spUnfulfilledList->GetView(pUnfulfilledList))
ChkHr(CMiscHelpers::StringToGuid(transactionIdString.GetRawBuffer(nullptr), &transactionId))
ChkHr(JsonHelpers::GetNamedString(item, L"productId", productIdString.GetAddressOf()))
Unfulfilled Consumables for %s (CV = %hs):
ChkHr(JsonHelpers::GetNamedString(item, L"transactionId", transactionIdString.GetAddressOf()))
ChkHr(pProductIdCache->AddItem(inAppOfferTokenString.Get(), productIdString.Get()))
ChkHr(_CreateUnfulfilledConsumable( inAppOfferTokenString.Get(), transactionId, offerIdString.Get(), &consumable))
ChkHr(JsonHelpers::GetNamedString(item, L"inAppOfferToken", inAppOfferTokenString.GetAddressOf()))
devOfferId
ChkHr(GetUnfulfilledConsumablesSync( _spStoreCommerceServer->GetAppCatalogId(cv.Get()), cv.Get(), _spStoreCommerceServer->GetProductIdCache(), _spUnfulfilledList.Get()))
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::DoWork
ChkHr(pUnfulfilledList->Append(consumable.Get()))
  %02u inAppOfferToken = %s, productId = %s, transId = %s, offerId = %s
ChkHr(spUnfulfilledConsumable->Initialize(pszProductId, transactionId, pszDevOfferId))
ChkAlloc(spUnfulfilledConsumable)
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::_CreateUnfulfilledConsumable
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct Windows::Foundation::Collections::IVectorView<class Windows::ApplicationModel::Store::UnfulfilledConsumable *> *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct Windows::Foundation::Collections::IVectorView<class Windows::ApplicationModel::Store::UnfulfilledConsumable *> *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
?ChkHr(_inAppOfferToken.Set(inAppOfferToken))
Windows::ApplicationModel::Store::ReportConsumableFulfillmentOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::ReportConsumableFulfillmentOperationServer::GetResults
ChkBool(pProductIdCache != nullptr, ((HRESULT)0x803F6107L))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\reportconsumablefulfillmentoperationserver.cpp
ChkArg(pFulfillmentResult)
Windows::ApplicationModel::Store::ReportConsumableFulfillmentOperationServer::DoWork
ChkHr(pProductIdCache->ProductIdFromInAppOfferToken( _inAppOfferToken.Get(), _spStoreCommerceServer->GetAppCatalogId(cv.Get()), cv.Get(), productId.GetAddressOf()))
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.FulfillmentResult>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<enum Windows::ApplicationModel::Store::FulfillmentResult>,struct Windows::Foundation::IAsyncOperationCompletedHandler<enum Windows::ApplicationModel::Store::FulfillmentResult>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.FulfillmentResult>
CClientSTAHelper::ProductPurchase
ChkHr(threadContext._inAppProductSkuId.Set(skuId))
ChkHr(threadContext._inAppProductId.Set(productId))
ChkHr(_hstrProductId.Set(productId))
ChkHr(_hstrSkuId.Set(skuId))
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\requestproductpurchasebyskuidoperationserver.cpp
ChkHr(StoreInfoBuilders::BuildStoreAppInfo( _spStoreCommerceServer.Get(), cv.Get(), 0, &spStoreAppInfo))
ChkHr(_CreatePurchaseResultsInformation( productPurchaseStatus, &_spPurchaseResults))
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::GetResults
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::DoWork
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::_CreatePurchaseResultsInformation
ChkHr(spPurchaseResults->Initialize(static_cast<StorePreviewProductPurchaseStatus>(productPurchaseStatus)))
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
ChkHr(_skuId.Set(skuId))
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::get_LicenseSatisfactionInfos
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\licensesatisfactionresult.cpp
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::get_SkuId
ChkHr(_skuId.CopyTo(pValue))
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::get_ExtendedError
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\licensesatisfactioninfo.cpp
ChkHr(License->GetLicenseGrantReason(&_grantReason))
ChkHr(License->GetIsTrial(&isTrial))
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::RuntimeClassInitialize
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByTrial
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByPass
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByDevice
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByOpenLicense
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_IsSatisfied
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByInstallMedia
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedBySignedInUser
ChkHr(_jsonData.Set(jsonData))
ChkArg(ppResults)
Windows::Services::Store::StoreRequestOperation::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\storerequestoperation.cpp
ChkHr(storeContextServer->SendStoreRequest( _storeContextCallerData.Get(), _requestKind, cv.GetHStringReference().Get(), _jsonData.Get(), &_statusCode, _jsonResponse.GetAddressOf()))
Windows::Services::Store::StoreRequestOperation::DoWork
Windows::Services::Store::StoreRequestOperation::GetResults
ChkHr(MakeAndInitialize<StoreSendRequestResult>( ppResults, _jsonResponse.Get(), _hresultOfOperation, _statusCode))
onecoreuap\enduser\winstore\licensing\winrt\lib\getcustomerpurchaseidoperation.cpp
ChkHr(_serviceTicket.Set(serviceTicket))
Windows::Services::Store::GetCustomerPurchaseIdOperation::RuntimeClassInitialize
Windows::Services::Store::GetCustomerPurchaseIdOperation::GetResults
ChkHr(::WindowsDuplicateString(_purchaseId.Get(), pCustomerPurchaseId))
ChkHr(_publisherUserId.Set(publisherUserId))
ChkArg(pCustomerPurchaseId)
ChkHr(storeContextServer->GetCustomerPurchaseId( _serviceTicket.Get(), _publisherUserId.Get(), cv.GetHStringReference().Get(), _purchaseId.GetAddressOf()))
Windows::Services::Store::GetCustomerPurchaseIdOperation::DoWork
Windows::Services::Store::GetCustomerCollectionsIdOperation::RuntimeClassInitialize
Windows::Services::Store::GetCustomerCollectionsIdOperation::GetResults
ChkHr(::WindowsDuplicateString(_collectionsId.Get(), pCustomerCollectionsId))
onecoreuap\enduser\winstore\licensing\winrt\lib\getcustomercollectionsidoperation.cpp
ChkArg(pCustomerCollectionsId)
ChkHr(storeContextServer->GetCustomerCollectionsId( _serviceTicket.Get(), _publisherUserId.Get(), cv.GetHStringReference().Get(), _collectionsId.GetAddressOf()))
Windows::Services::Store::GetCustomerCollectionsIdOperation::DoWork
Windows::Services::Store::GetOfflineLicensesOperation::GetResults
ChkHr(_spAppLicense.CopyTo(ppResults))
Windows::Services::Store::GetOfflineLicensesOperation::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\getofflinelicensesoperation.cpp
ChkHr(JsonHelpers::ParseToJsonObject(results.GetRawBuffer(nullptr), &spResults))
ChkHr(MakeAndInitialize<StoreAppLicense>(&_spAppLicense,  spResults))
ChkHr(storeContextServer->GetOfflineLicenses( cv.GetHStringReference().Get(), results.GetAddressOf()))
Windows::Services::Store::GetOfflineLicensesOperation::DoWork
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreAppLicense>
%eRWindows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreAppLicense *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreAppLicense *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAppLicense>
ChkArg(ppStoreProductResult)
Windows::Services::Store::GetStoreProductOperation::GetResults
Windows::Services::Store::GetStoreProductOperation::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorelistingoperation.cpp
Windows::Services::Store::GetStoreProductOperation::DoWork
ChkHr(JsonParser::ParseJSONStringToObject( productJson, this, queryResultsTable))
ChkHr(MakeAndInitialize<StoreProductResult>( ppStoreProductResult, _products, _hResultOfOperation))
ChkHr(spStoreContextServer->GetProduct( cv.GetHStringReference().Get(), productJson.GetAddressOf()))
ChkHr(_products.As(&inspectableProducts))
ChkHr(AsAgile(productKinds, &_productKinds))
Windows::Services::Store::BulkHydrateOperation::GetResults
ChkAlloc(_results)
Windows::Services::Store::BulkHydrateOperation::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\bulkhydrateoperation.cpp
Windows::Services::Store::BulkHydrateOperation::DoWork
ChkHr(storeContextServer->GetProductsWithOptions( productKinds.Get(), storeIds.Get(), _storeProductOptions.Get(), cv.GetHStringReference().Get(), productJsonString.GetAddressOf()))
ChkHr(_results.CopyTo(ppResults))
ChkHr(_productKinds.As(&productKinds))
ChkHr(JsonParser::ParseJSONStringToObject( productJsonString, this, queryResultsTable))
MakeAndInitialize<StoreProductQueryResult>( &_results, _products, productKinds.Get(), ChkGetHr())
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorelistingsforassociatedproductsoperation.cpp
Windows::Services::Store::GetAssociatedStoreProductsOperation::GetResults
Windows::Services::Store::GetAssociatedStoreProductsOperation::RuntimeClassInitialize
ChkHr(BlockOnCompletion(spPagedOperation.Get()))
ChkHr(spPagedOperation->GetResults( &hresult, &hasMoreResults, products, spNextQueryOperation))
Windows::Services::Store::GetAssociatedStoreProductsOperation::DoWork
ChkHr(MakeAndInitialize<GetAssociatedStoreProductsPagedOperation>( spPagedOperation.GetAddressOf(), _PFN.Get(), nullptr, _storeContext.Get(), cv.GetAnsi(), productKinds.Get(), -1, asyncId ))
ChkHr(hresult)
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorelistingsforassociatedproductspagedoperation.cpp
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::GetResults
ChkBool(_spNextQueryOperation == nullptr, ((HRESULT)0x8000FFFFL))
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::RuntimeClassInitialize
ChkBool(_spNextQueryOperation != nullptr, ((HRESULT)0x8000FFFFL))
ChkHr(_spNextQueryOperation->HasMorePages(hasMorePages))
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::DoWork
ChkHr(storeContextServer->GetAssociatedStoreProducts( productKinds.Get(), maxCountPerPage, cv.GetHStringReference().Get(), productJsonString.GetAddressOf(), &_spNextQueryOperation))
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::BeginWork
ChkBool(_storeContext == nullptr, ((HRESULT)0x8000FFFFL))
ChkHr(_products->get_Size(&countOfProducts))
ChkHr(_spNextQueryOperation->HasMorePages(&hasMorePages))
ChkHr(_spNextQueryOperation->GetNextAsync( productJsonString.GetAddressOf(), nextOp.GetAddressOf()))
MakeAndInitialize<StoreProductPagedQueryResult>( &_results, _products, productKinds.Get(), _maxCountPerPage, hasMorePages, _hresultOfOperation, _spNextQueryOperation)
Windows::Services::Store::GetUserCollectionOperation::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\getusercollectionoperation.cpp
ChkHr(_results.CopyTo(ppStoreProductQueryResult))
Windows::Services::Store::GetUserCollectionOperation::DoWork
ChkArg(ppStoreProductQueryResult)
Windows::Services::Store::GetUserCollectionOperation::GetResults
ChkHr(MakeAndInitialize<GetUserCollectionPagedOperation>( spPagedOperation.GetAddressOf(), _PFN.Get(), nullptr, _storeContext.Get(), _szCV, productKinds.Get(), -1, asyncId ))
onecoreuap\enduser\winstore\licensing\winrt\lib\getusercollectionpagedoperation.cpp
Windows::Services::Store::GetUserCollectionPagedOperation::GetResults
ChkBool(_spNextQueryOperation == nullptr, ((HRESULT)0x803F6107L))
Windows::Services::Store::GetUserCollectionPagedOperation::RuntimeClassInitialize
Windows::Services::Store::GetUserCollectionPagedOperation::DoWork
ChkHr(JsonParser::ParseJSONStringToObject( productJson, this, productQueryResultsTable))
MakeAndInitialize<StoreProductPagedQueryResult>( &_results, _products, productKinds.Get(), _maxPageSize, hasMorePages, _hresultOfOperation, _spNextQueryOperation)
ChkHr(storeContextServer->GetUserCollection( productKinds.Get(), maxCountPerPage, cv.GetHStringReference().Get(), productJson.GetAddressOf(), &_spNextQueryOperation))
ChkHr(_spNextQueryOperation->GetNextAsync( productJson.GetAddressOf(), nextOp.GetAddressOf()))
Windows::Services::Store::GetConsumableBalanceRemainingOperation::GetResults
ChkHr(MakeAndInitialize<StoreConsumableResult>( ppResults, GUID_NULL, _consumableStatus, _quantity, _hresultOfOperation ))
Windows::Services::Store::GetConsumableBalanceRemainingOperation::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\getconsumablebalanceremainingoperation.cpp
ChkHr(JsonParser::ParseJSONStringToObject( jsonString, this, queryResultsTable))
ChkHr(storeContextServer->GetConsumableBalanceRemaining( _productId.Get(), cv.GetHStringReference().Get(), jsonString.GetAddressOf()))
Windows::Services::Store::GetConsumableBalanceRemainingOperation::DoWork
Windows::Services::Store::AcquireStoreLicenseForOptionalPackageOperation::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\acquirestorelicenseforoptionalpackageoperation.cpp
ChkHr(MakeAndInitialize<StorePackageLicense>( &_pStorePackageLicense, _pOptionalPackage.Get(), _storeContext.Get() ))
Windows::Services::Store::AcquireStoreLicenseForOptionalPackageOperation::DoWork
Windows::Services::Store::AcquireStoreLicenseForOptionalPackageOperation::GetResults
ChkHr(MakeAndInitialize<StoreAcquireLicenseResult>( ppResults, _pStorePackageLicense.Get(), _hresultOfOperation ))
Windows::Services::Store::CanAcquireStoreLicenseForOptionalPackageOperation::RuntimeClassInitialize
Windows::Services::Store::CanAcquireStoreLicenseForOptionalPackageOperation::GetResults
ChkHr(MakeAndInitialize<StoreCanAcquireLicenseResult>( ppResults, _licenseQueryStatus, _licensableSku.Get(), _hresultOfOperation ))
onecoreuap\enduser\winstore\licensing\winrt\lib\canacquirestorelicenseforoptionalpackageoperation.cpp
ChkHr(_packageIdentifier.Set(packageIdentifier))
ChkHr(JsonParser::ParseJSONStringToObject( licenseSatisfactionResult, this, previewLicenseResultsTable))
ChkHr(storeContextServer->GetPreviewLicenseResultForPackage( _packageIdentifier.Get(), cv.GetHStringReference().Get(), licenseSatisfactionResult.GetAddressOf()))
Windows::Services::Store::CanAcquireStoreLicenseForOptionalPackageOperation::DoWork
Windows::Services::Store::CanAcquireStoreLicenseOperation::GetResults
ChkHr(_pStoreContextServer.As(&storeContextServer2))
Windows::Services::Store::CanAcquireStoreLicenseOperation::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\canacquirestorelicenseoperation.cpp
Windows::Services::Store::CanAcquireStoreLicenseOperation::DoWork
ChkHr(storeContextServer2->GetPreviewLicenseResultForStoreId( _productStoreId.Get(), cv.GetHStringReference().Get(), licenseSatisfactionResult.GetAddressOf()))
QuantityAvailable:
Windows::Services::Store::ReportConsumableOperation::RuntimeClassInitialize
InsufficientConsumeQuantity
ChkHr(MakeAndInitialize<StoreConsumableResult>( ppResults, _trackingId, _consumableStatus, _balanceRemaining, _hresultOfOperation ))
onecoreuap\enduser\winstore\licensing\winrt\lib\reportconsumableoperation.cpp
Windows::Services::Store::ReportConsumableOperation::GetResults
innererror
storeContextServer->ConsumeConsumable( _productId.Get(), _quantity, _trackingId, cv.GetHStringReference().Get(), jsonString.GetAddressOf())
Windows::Services::Store::ReportConsumableOperation::DoWork
ChkHr(StringHelpers::SplitString(data.Get(), L":", quantityParts.GetAddressOf()))
ChkHr(quantityParts->get_Size(&partsSize))
ChkHr(_data->get_Size(&dataSize))
ChkHr(_data->GetAt(index, data.GetAddressOf()))
ChkHr(quantityParts->GetAt(1, newQuantity.GetAddressOf()))
Windows::Services::Store::RequestPurchaseOperation::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\requestpurchaseoperation.cpp
ChkHr(MakeAndInitialize<StorePurchaseResult>(ppResults, _status, _hresultOfOperation))
ChkHr(_storeId.Set(storeId))
Windows::Services::Store::RequestPurchaseOperation::GetResults
ChkHr(storeContextServer->RequestPurchase( _storeContextCallerData.Get(), _storeId.Get(), _storePurchaseProperties.Get(), _jsonData.Get(), cv.GetHStringReference().Get(), _response.GetAddressOf()))
Windows::Services::Store::RequestPurchaseOperation::DoWork
ChkHr(_hresultOfOperation)
Succeeded
ChkHr(JsonParser::ParseJSONStringToObject( _response, this, purchaseResultsTable))
ChkHr(_ChangeStatusStringToEnumValue())
onecoreuap\enduser\winstore\licensing\winrt\lib\getisanyskuinstalledoperation.cpp
ChkArg(pResults)
Windows::Services::Store::GetIsAnySkuInstalledOperation::RuntimeClassInitialize
Windows::Services::Store::GetIsAnySkuInstalledOperation::DoWork
Windows::Services::Store::GetIsAnySkuInstalledOperation::GetResults
ChkHr(storeContextServer->IsStoreProductInstalled( _productStoreId.Get(), cv.GetHStringReference().Get(), &_isInstalled))
Windows::Services::Store::GetAppAndSupplementalStorePackageUpdatesOperation::RuntimeClassInitialize
Windows::Services::Store::GetAppAndSupplementalStorePackageUpdatesOperation::GetResults
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getappandsupplementalstorepackageupdatesoperation.cpp
ChkArg(ppUpdateList)
ChkHr(storeContextServer->GetAppAndOptionalStorePackageUpdates(cv.GetHStringReference().Get(), &queuedItems))
Windows::Services::Store::GetAppAndSupplementalStorePackageUpdatesOperation::DoWork
Windows::Services::Store::FindStoreProductForPackageOperation::GetResults
ChkHr(MakeAndInitialize<StoreProductResult>(ppResults, _products, _hresultOfOperation))
Windows::Services::Store::FindStoreProductForPackageOperation::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\findstoreproductforpackageoperation.cpp
ChkHr(storeContextServer->GetProductForPackage( productKinds.Get(), packageFullName.Get(), cv.GetHStringReference().Get(), productJson.GetAddressOf()))
Windows::Services::Store::FindStoreProductForPackageOperation::DoWork
ChkHr(_package->get_Id(packageId.GetAddressOf()))
ChkHr(_packageFamilyName.Set(packageFamilyName))
ChkHr(AgileVector<HSTRING>::Make(&_newOrder))
ChkHr(newOrder->First(&iter))
Windows::Services::Store::GetAssociatedStoreQueueItemsOperation::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\getassociatedstorequeueitemsoperation.cpp
ChkHr(StringHelpers::Join(_newOrder.Get(), false, productIdList.GetAddressOf()))
Attempting to set the install order to: %hs
ChkHr(iter->get_Current(&item))
ChkHr(_newOrder->Append(productId.Get()))
ChkHr(spStoreContextServer.As(&spStoreContextServer3))
ChkArg(result)
Windows::Services::Store::GetAssociatedStoreQueueItemsOperation::GetResults
ChkHr(spStoreContextServer->GetAssociatedStoreQueueItems( cv.GetHStringReference().Get(), &_queueItems))
Windows::Services::Store::GetAssociatedStoreQueueItemsOperation::DoWork
ChkHr(spStoreContextServer3->SetInstallOrderForAssociatedStoreQueueItems( cv.GetHStringReference().Get(), _newOrder.Get()))
Windows::Services::Store::GetStoreQueueItemsOperation::RuntimeClassInitialize
Windows::Services::Store::GetStoreQueueItemsOperation::DoWork
ChkHr(spStoreContextServer->GetStoreQueueItems( storeIds.Get(), cv.GetHStringReference().Get(), &_queueItems))
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorequeueitemsoperation.cpp
Windows::Services::Store::GetStoreQueueItemsOperation::GetResults
Windows::Services::Store::RequestStoreRateAndReviewOperation::GetResults
ChkHr(MakeAndInitialize<StoreRateAndReviewResult>( ppResults, _status, _jsonResponse.Get(), _wasUpdated, _hresultOfOperation))
Windows::Services::Store::RequestStoreRateAndReviewOperation::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\requeststorerateandreviewoperation.cpp
ChkHr(storeContextServer->SendStoreRequest( _storeContextCallerData.Get(), 16, cv.GetHStringReference().Get(), nullptr, &statusCode, _jsonResponse.GetAddressOf()))
Windows::Services::Store::RequestStoreRateAndReviewOperation::DoWork
updated
status
{"status": "aborted"}
ChkHr(_jsonResponse.Set(LR"({"status": "aborted"})"))
ChkHr(JsonParser::ParseJSONStringToObject( _jsonResponse, this, requestStoreRateAndReviewTable))
Request Rate and Review Operation failed to get any status due to a purchase app not install error.
networkError
Error
success
aborted
Windows::Services::Store::StoreUninstallStorePackageResult::get_Status
Windows::Services::Store::UninstallStorePackageOperation::RuntimeClassInitialize
Windows::Services::Store::StoreUninstallStorePackageResult::get_ExtendedError
onecoreuap\enduser\winstore\licensing\winrt\lib\storeuninstallstorepackageoperation.cpp
Windows::Services::Store::UninstallStorePackageOperation::GetResults
ChkHr(MakeAndInitialize<StoreUninstallStorePackageResult>( &result, _resultCode, _resultStatus ))
ChkHr(_packageFamilyNameToUninstall.Set(packageFamilyNameToUninstall))
ChkArg(results)
Windows::Services::Store::UninstallStorePackageOperation::DoWork
ChkHr(result.CopyTo(results))
ChkHr(storeContextServer->UninstallStorePackage( _storeId.Get(), _packageFamilyNameToUninstall.Get(), cv.GetHStringReference().Get(), _shouldPrompt, _dialogHelper.Get(), &_resultStatus ))
GetFormattedPriceUsingCurrencyFormatter
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\priceformat.cpp
ChkHr(GetFormattedPriceUsingCurrencyFormatter( dblPrice, currencyCode, locale, region, formattedPrice))
ChkHr(_GetCurrencyFormatter(currencyCode, userLocale.Get(), region, &spNumberFormatter))
ChkHr(spNumberFormatter->FormatDouble(price, formattedPrice))
ChkHr(userLocale.Set(locale))
ChkHr(userLocale.Set(szUserLocale))
IsTrial
CampaignId
StartDate
TrialTimeRemaining
DevOfferId
AcquiredDate
Windows::Services::Store::StoreCollectionData::get_IsTrial
::WindowsDuplicateString(_campaignId.Get(), pValue)
Windows::Services::Store::StoreCollectionData::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\storecollectiondata.cpp
Windows::Services::Store::StoreCollectionData::get_DeveloperOfferId
Windows::Services::Store::StoreCollectionData::get_AcquiredDate
Windows::Services::Store::StoreCollectionData::get_CampaignId
::WindowsDuplicateString(_devOfferId.Get(), pValue)
Windows::Services::Store::StoreCollectionData::get_TrialTimeRemaining
::WindowsDuplicateString(_productId.Get(), pValue)
Windows::Services::Store::StoreCollectionData::get_StartDate
Windows::Services::Store::StoreCollectionData::get_EndDate
Windows::Services::Store::StoreCollectionData::get_SkuId
Windows::Services::Store::StoreCollectionData::get_ProductId
::WindowsDuplicateString(_skuId.Get(), pValue)
jsonValue->GetString(timeString.GetAddressOf())
Windows::Services::Store::JsonParser::ParseDate
StringToFileTime(timeString.GetRawBuffer(nullptr), &ft, FALSE)
Caption
ChkHr(JsonParser::ParseJSONToObject( json, this, imageTable))
Windows::Services::Store::StoreImage::get_Uri
http:
Windows::Services::Store::StoreImage::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\storeimage.cpp
::WindowsDuplicateString(_Purpose.Get(), pValue)
ChkHr(WindowsConcatString(HStringReference(L"http:").Get(), _ImageUri.Get(), uri.GetAddressOf()))
ChkHr(IAPUtils::CreateUri(uri.Get(), &_spUri))
Windows::Services::Store::StoreImage::get_Height
::WindowsDuplicateString(_Caption.Get(), pValue)
Windows::Services::Store::StoreImage::get_ImagePurposeTag
Windows::Services::Store::StoreImage::get_Width
Windows::Services::Store::StoreImage::get_Caption
PreviewImage
ChkHr(JsonParser::ParseJSONToObject( json, this, videoTable))
VideoPurpose
Windows::Services::Store::StoreVideo::get_Uri
ChkHr(WindowsConcatString(HStringReference(L"http:").Get(), _VideoUri.Get(), uri.GetAddressOf()))
Windows::Services::Store::StoreVideo::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\storevideo.cpp
Windows::Services::Store::StoreVideo::get_Height
Windows::Services::Store::StoreVideo::get_Caption
Windows::Services::Store::StoreVideo::get_VideoPurposeTag
Windows::Services::Store::StoreVideo::get_Width
jsonValue->GetObject(jsonObject.GetAddressOf())
Windows::Services::Store::JsonParser::ParseComPtr
_spPreviewImage.CopyTo(ppValue)
Windows::Services::Store::StoreVideo::get_PreviewImage
MakeAndInitialize<T>(obj.GetAddressOf(), DEBUG_PARSER_PARAMETERS_ARGS jsonObject)
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreAvailability>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreAvailability>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreAvailability>
BundledSkus
RecurrencePolicy
FulfillmentType
SkuDisplayRank
ChkHr(Vector<HSTRING>::Make(&_bundledSkuIds))
ChkHr(JsonParser::ParseJSONToObject( json, this, DisplaySkuAvailabilitiesTable))
Windows::Services::Store::StoreSku::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\storesku.cpp
ChkHr(IAPUtils::BuildStoreId( _productId.Get(), _skuId.Get(), nullptr, _storeId.GetAddressOf()))
Windows::Services::Store::StoreSku::get_StoreId
ChkHr(_SortAvailabilities())
Windows::Services::Store::StoreSku::get_Title
Windows::Services::Store::StoreSku::get_Description
ChkHr(::WindowsDuplicateString(_storeId.Get(), pValue))
Windows::Services::Store::StoreSku::get_Language
Windows::Services::Store::StoreSku::get_CustomDeveloperData
Windows::Services::Store::StoreSku::get_Images
Windows::Services::Store::StoreSku::get_IsTrial
::WindowsDuplicateString(_customDeveloperData.Get(), pValue)
Windows::Services::Store::StoreSku::get_Availabilities
Windows::Services::Store::StoreSku::get_Price
Windows::Services::Store::StoreSku::get_Videos
_availabilities->GetView(ppValue)
ChkHr(availability->get_Price(ppValue))
Windows::Services::Store::StoreSku::get_IsSubscription
ChkHr(_availabilities->First(&iter))
ChkHr(iter->get_Current(&availability))
Windows::Services::Store::StoreSku::get_IsInUserCollection
Windows::Services::Store::StoreSku::get_BundledSkus
Windows::Services::Store::StoreSku::get_SubscriptionInfo
ChkHr(_subscriptionInfo.CopyTo(ppValue))
ChkHr(_collectionData.CopyTo(ppValue))
Windows::Services::Store::StoreSku::GetIsInstalledAsync
ChkHr(_bundledSkuIds->GetView(ppValue))
Windows::Services::Store::StoreSku::get_CollectionData
Windows::Services::Store::StoreSku::RequestPurchaseWithPurchasePropertiesAsync
ChkHr(_productId.Set(value))
ChkHr(_storeContext->GetIsAnySkuInstalledAsync(_storeId.Get(), ppOperation))
Windows::Services::Store::StoreSku::RequestPurchaseAsync
ChkHr(availabilityIter->get_HasCurrent(&hasCurrent))
ChkHr(availabilityIter->get_Current(&availability))
Windows::Services::Store::StoreSku::set_ProductId
ChkHr(_availabilities->First(&availabilityIter))
ChkHr(availabilityIter->MoveNext(&hasCurrent))
Windows::Services::Store::StoreSku::get_SkuId
ChkHr(availability.As(&availabilityPrivate))
ChkHr(availabilityPrivate->set_ProductIdSkuId(_productId.Get(), _skuId.Get()))
ChkHr(_availabilities.As(&inspectableProducts))
Windows::Services::Store::StoreSku::SetStoreContext
::WindowsDuplicateString(_fulfillmentType.Get(), pValue)
Windows::Services::Store::StoreSku::get_FulfillmentType
ChkHr(_availabilities->get_Size(&size))
ChkHr(_availabilities->GetAt(index, &currentAvailability))
ChkHr(Vector<StoreAvailability*>::Make(&sortedAvailabilities))
Windows::Services::Store::StoreSku::_SortAvailabilities
ChkHr(sortedAvailabilities->Append(bestAvailability.Get()))
ChkHr(_availabilities->RemoveAt(bestIndex))
ChkHr(currentAvailability.As(&currentAvailabilityPrivate))
ChkHr(currentAvailabilityPrivate->get_Rank(&currentRank))
BigId
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchaseeventargsredstone.cpp
ChkHr(_response.Set(jsonInitialResponse))
ChkHr(_request.Set(jsonRequest))
Windows::Services::Store::PurchaseEventArgsRedstone::RuntimeClassInitialize
_response.CopyTo(json)
Windows::Services::Store::PurchaseEventArgsRedstone::get_JsonResponse
_request.CopyTo(json)
Windows::Services::Store::PurchaseEventArgsRedstone::get_JsonRequest
_modalManager != nullptr
_response.Set(json)
Windows::Services::Store::PurchaseEventArgsRedstone::put_JsonResponse
Windows::Services::Store::PurchaseEventArgsRedstone::SetSize
Windows::ApplicationModel::Store::CProductLicenseMap::Initialize
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productlicensemap.cpp
ChkHr(ProductLicenseHashMap::Make(&m_spHashMap))
ChkHr(spProductLicense->Initialize(spAppAddOn.Get()))
ChkHr(spAppAddOn->GetProductId(&pszProductId))
ChkHr(pLicenseInstance->GetIsActive(&isActive))
ChkAlloc(spProductLicense)
ChkHr(pUnfulfilledList->get_Size(&size))
ChkHr(pUnfulfilledList->GetAt(lProduct, spUnfulfilledConsumable.GetAddressOf()))
ChkHr(strProductId.Set(pszProductId))
ChkHr(m_spHashMap->Insert(strProductId.Get(), spProductLicense.Get(), &replaced))
ChkHr(m_spHashMap.As(&m_spIterable))
ChkHr(m_spHashMap->get_Size(pcItems))
ChkHr(spProductLicense->Initialize(spUnfulfilledConsumable.Get()))
ChkHr(spUnfulfilledConsumable->get_ProductId(strProductId.GetAddressOf()))
Windows::ApplicationModel::Store::CProductLicenseMap::HasKey
ChkAlloc(spNewProductLicense)
Windows::ApplicationModel::Store::CProductLicenseMap::get_Size
ChkHr(m_spHashMap->HasKey(hstrKey, pfHasKey))
ChkHr(m_spHashMap->GetView(&spHashView))
Windows::ApplicationModel::Store::CProductLicenseMap::Split
Windows::ApplicationModel::Store::CProductLicenseMap::Lookup
ChkHr(spNewProductLicense->InitializeInvalid(hstrKey))
Windows::ApplicationModel::Store::CProductLicenseMap::First
ChkHr(m_spHashMap->GetView(view))
ChkHr(spHashView->Split(firstPartition, secondPartition))
ChkHr(m_spIterable->First(ppIterator))
Windows::ApplicationModel::Store::CProductLicenseMap::GetView
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductLicense>>
<??YzU
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductLicense>>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductLicense>
Windows.Foundation.Collections.IMap`2<String, Windows.ApplicationModel.Store.ProductLicense>
onecoreuap\enduser\winstore\licensing\winrt\lib\storepackageupdateresult.cpp
ChkHr(queueItems->GetView(&_spQueueItems))
Windows::Services::Store::StorePackageUpdateResult::RuntimeClassInitialize
ChkArg(ppUpdateStatuses)
Windows::Services::Store::StorePackageUpdateResult::get_StorePackageUpdateStatuses
ChkArg(pUpdateState)
Windows::Services::Store::StorePackageUpdateResult::get_OverallState
Windows::Services::Store::StorePackageUpdateResult::get_StoreQueueItems
ChkArg(ppQueueItems)
Windows::Services::Store::StoreQueueItemStatus::get_PackageInstallState
Windows::Services::Store::StoreQueueItemStatus::get_UpdateStatus
ChkHr(StorePackageUpdateManagerUtils::StorePackageUpdateStatusLifetimeTraits::Construct(value, _status))
onecoreuap\enduser\winstore\licensing\winrt\lib\storequeueitemstatus.cpp
Windows::Services::Store::StoreQueueItemStatus::get_PackageInstallExtendedState
Windows::Services::Store::StoreQueueItemStatus::get_ExtendedError
Windows::Services::Store::StoreQueueItemCompletedEventArgs::get_Status
onecoreuap\enduser\winstore\licensing\winrt\lib\storequeueitemcompletedeventargs.cpp
UniversalStoreInApp
ChkHr(CatalogServiceProxyV6::GetProduct( _inAppProductId.Get(), _pCV, &spProduct))
{client}
ChkHr(addOns.Initialize(_spStoreCommerceServer.Get(), _pCV))
ChkHr(addOns.GetNext(&spProduct))
CClientSTAHelper::GetAddOnProduct
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchasestahelper.cpp
ChkHr(spAlternateIds->GetObjectAt(i, &spAlternateId))
ChkHr(JsonHelpers::GetNamedString(spAlternateId, L"IdType", alternateIdType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedArray(spProduct, L"AlternateIds", &spAlternateIds))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spAlternateIds, &alternateIdsSize))
Purchase
ChkHr(GetAddOnProduct(&spProduct))
ChkHr(JsonHelpers::GetNamedString(spAlternateId, L"Value", alternateIdValue.GetAddressOf()))
ChkBool((nullptr != *ppProduct), ((HRESULT)0x803F6102L))
ChkHr(pProductIdCache->AddItem( _inAppOfferToken.Get(), hstrProductId.Get()))
ChkHr(hstrProductId.Set(_spStoreCommerceServer->GetAppCatalogId(_pCV)))
CClientSTAHelper::GetBigCatIds
ChkHr(JsonHelpers::GetNamedString(spProduct, L"ProductId", hstrProductId.GetAddressOf()))
ChkHr(hstrPreferredSkuId.Set(_inAppProductSkuId.Get()))
ChkHr(JsonHelpers::GetNamedString(spProduct, L"PreferredSkuId", hstrPreferredSkuId.GetAddressOf()))
ChkHr((hrGetProduct == ((HRESULT)0x80190194L)) ? ((HRESULT)0x803F6101L) : hrGetProduct)
ChkHr(JsonHelpers::GetNamedString(spProduct, L"ProductType", hstrProductType.GetAddressOf()))
ChkHr(spDisplaySkuAvailabilities->GetObjectAt(i, &spDisplaySkuAvailability))
ChkHr(JsonHelpers::GetNamedObject(spDisplaySkuAvailability, L"Sku", &spSku))
ChkHr(JsonHelpers::GetNamedArray(spProduct, L"DisplaySkuAvailabilities", &spDisplaySkuAvailabilities))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spDisplaySkuAvailabilities, &displaySkuAvailabilitiesSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spAvailabilities, &availabilitiesSize))
ChkHr(spAvailabilities->GetObjectAt(j, &spAvailability))
ChkHr(JsonHelpers::GetNamedString(spSku, L"SkuId", hstrSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedArray(spDisplaySkuAvailability, L"Availabilities", &spAvailabilities))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spActions, &actionsSize))
ChkHr(spActions->GetStringAt(k, action.GetAddressOf()))
Actions
ChkHr(JsonHelpers::GetNamedArray(spAvailability, L"Actions", &spActions))
ChkBool(hstrProductId.IsValid() && hstrSkuId.IsValid() && hstrAvailabilityId.IsValid(), (_apiType == ClientApiType_AppPurchase) ? ((HRESULT)0x803F6101L) : ((HRESULT)0x803F6102L))
orderId
AvailabilityId
ChkHr(JsonHelpers::GetNamedString(spAvailability, L"AvailabilityId", hstrAvailabilityId.GetAddressOf()))
ChkHr(GetBigCatIds(productId.GetAddressOf(), skuId.GetAddressOf(), availabilityId.GetAddressOf(), productType.GetAddressOf()))
ChkHr(_spStoreCommerceServer->GetExclusiveLockForProduct(productId.Get(), &pendingPurchaseOperationForProduct))
CClientSTAHelper::DoWork
ChkHr(appProductId.Set(_spStoreCommerceServer->GetAppCatalogId(_pCV)))
ChkHr(JsonHelpers::SetNamedString(jsonTemp, L"DevOfferId", _devOfferId.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonTemp, L"StoreId", storeId.Get()))
ChkHr(IAPUtils::BuildStoreId(productId.Get(), skuId.Get(), availabilityId.Get(), storeId.GetAddressOf()))
ChkHr(JsonHelpers::CreateJsonObject(jsonTemp.GetAddressOf()))
ChkHr(MakeAndInitialize<StorePurchaseProperties>(&storePurchaseProperties, _nameOverride.Get()))
ChkHr(MakeAndInitialize<PurchaseOperation>( &purchaseOperation, _PFN.Get(), appProductId.Get(), storeId.Get(), storePurchaseProperties.Get(), overrideJsonRequest.Get(), nullptr, cv.GetHStringReference().Get(), _parentHwnd, _hasPreviewCapability, InvokedApi_RequestPurchase.Get() ))
ChkHr(JsonHelpers::Stringify(jsonTemp, overrideJsonRequest.GetAddressOf()))
ChkHr(storeId.Set(L""))
_transactionId.IsValid()
ChkHr(ChangeStatusStringToEnumValue())
ChkHr(BlockOnCompletionAndGetResults(purchaseOperation.Get(), jsonResponse.GetAddressOf()))
ChkHr(JsonParser::ParseJSONStringToObject( jsonResponse, this, purchaseResultsTable))
ChkHr(WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicket( 0, WinStoreAuth::AuthenticationEndpoint::OneStore, WinStoreAuth::PromptType::Silent, false, nullptr, authTicket.GetAddressOf(), providerType, spWebTokenRequestResult.GetAddressOf()))
authTicket.IsValid()
_purchaseStatus == ProductPurchaseStatus_NotPurchased
ChkHr(UuidFromStringW((PWCHAR)_transactionId.GetRawBuffer(nullptr), _pTransactionId))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), _pCV, IAPReceiptType_App, nullptr, authTicket.Get(), spWebTokenRequestResult.Get(), _pReceipt))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), _pCV, IAPReceiptType_OneProduct, _inAppOfferToken.Get(), authTicket.Get(), spWebTokenRequestResult.Get(), _pReceipt))
ChkHr(_hstrReceiptXml.Set(receiptXml))
ChkHr(_hstrOfferId.Set(offerId))
Windows::ApplicationModel::Store::PurchaseResultsServer::get_Status
Windows::ApplicationModel::Store::PurchaseResultsServer::Initialize
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchaseresultsserver.cpp
ChkArg(transactionId)
Windows::ApplicationModel::Store::PurchaseResultsServer::get_ReceiptXml
ChkArg(pProductPurchaseStatus)
Windows::ApplicationModel::Store::PurchaseResultsServer::get_TransactionId
ChkHr(_hstrOfferId.CopyTo(hstrOfferId))
ChkHr(_hstrReceiptXml.CopyTo(hstrReceiptXml))
Windows::ApplicationModel::Store::PurchaseResultsServer::get_OfferId
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::Initialize
ChkHr(_hstrSkuId.Set(pInAppSkuInformation->SkuId))
ChkHr(_hstrSkuType.Set(pInAppSkuInformation->SkuType))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewskuinfoserver.cpp
ChkArg(pInAppSkuInformation)
ChkHr(_hstrCurrencyCode.Set(pInAppSkuInformation->PricingInfo.CurrencyCode))
ChkHr(ReceiptHelpers::GetFormattedPrice( locale, market, &pInAppSkuInformation->PricingInfo, false , _hstrFormattedListPrice.GetAddressOf()))
ChkHr(_hstrTitle.Set(pInAppSkuInformation->Title))
ChkHr(_hstrDescription.Set(pInAppSkuInformation->Description))
ChkHr(_hstrSkuId.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_SkuType
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_ProductId
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_SkuId
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_Description
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_CustomDeveloperData
ChkHr(_hstrSkuType.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_Title
ChkHr(_hstrCurrencyCode.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_FormattedListPrice
ChkHr(_hstrCustomDeveloperData.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_CurrencyCode
ChkHr(_hstrExtendedData.CopyTo(pValue))
ChkHr(_hstrFormattedListPrice.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_ExtendedData
ChkArg(pAppInfo)
Windows::ApplicationModel::Store::ListingInformationServer::Initialize
ChkHr(_hstrCurrentMarket.Set(pAppInfo->Market))
ChkHr(_hstrLocale.Set(pAppInfo->Locale))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\listinginformationserver.cpp
ChkHr(CMiscHelpers::StringToGuid(WindowsGetStringRawBuffer(pAppInfo->Id, nullptr), &_id))
ChkHr(ReceiptHelpers::GetFormattedPrice(pAppInfo->Locale, pAppInfo->Market, &pAppInfo->PricingInfo, false , _hstrFormattedPrice.GetAddressOf()))
ChkHr((AgileHashMap<HSTRING, ProductListing*,StringUpperCaseHash, StringCaseInsensitiveEquals>::Make(&_spInAppOffers)))
ChkHr(_hstrName.Set(pAppInfo->Name))
ChkHr(_hstrDescription.Set(pAppInfo->Description))
ChkHr(spProductListing->Initialize(_hstrLocale.Get(), _hstrCurrentMarket.Get(), pAppInfo->IsUAP, pInAppOffer))
ChkHr(_spInAppOffers->Insert( pInAppOffer->InAppOfferToken, spProductListing.Get(), &replaced ))
ChkAlloc(_spInAppOffers)
ChkReturn(((HRESULT)0x8007000EL))
Windows::ApplicationModel::Store::ListingInformationServer::get_CurrentMarket
ChkHr(_hstrCurrentMarket.CopyTo(pValue))
ChkHr(ReceiptHelpers::GetFormattedPrice(pAppInfo->Locale, pAppInfo->Market, &pAppInfo->PricingInfo, true , _hstrFormattedBasePrice.GetAddressOf()))
ChkHr(_hstrCurrencyCode.Set(pAppInfo->PricingInfo.CurrencyCode))
ChkHr(_spInAppOffers->GetView(ppValue))
Windows::ApplicationModel::Store::ListingInformationServer::get_FormattedPrice
Windows::ApplicationModel::Store::ListingInformationServer::get_Description
Windows::ApplicationModel::Store::ListingInformationServer::get_ProductListings
ChkHr(_hstrName.CopyTo(pValue))
Windows::ApplicationModel::Store::ListingInformationServer::get_AgeRating
ChkHr(_hstrFormattedPrice.CopyTo(pValue))
Windows::ApplicationModel::Store::ListingInformationServer::get_Name
Windows::ApplicationModel::Store::ListingInformationServer::get_IsOnSale
Windows::ApplicationModel::Store::ListingInformationServer::get_CurrencyCode
Windows::ApplicationModel::Store::ListingInformationServer::get_FormattedBasePrice
Windows::ApplicationModel::Store::ListingInformationServer::get_SaleEndDate
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductListing>>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductListing>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductListing>>
Windows.Foundation.Collections.IMapView`2<String, Windows.ApplicationModel.Store.ProductListing>
Windows.Foundation.Collections.IMap`2<String, Windows.ApplicationModel.Store.ProductListing>
IAPReceiptType_App
ReceiptHelpers::LicenseParseReceiptResponse
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\receipthelpers.cpp
IAPReceiptType_OneProduct
ChkHr(::ParseReceiptResponse(pbResponse, cbResponse, &tmpReceiptData, &cbReceiptData))
ReceiptHelpers::GetPublisherId
ChkHr(spJsonObject->GetNamedArray(HStringReference(L"DisplaySkuAvailabilities").Get(), &jsonSKUAvailabilities))
ChkAlloc(spReceiptData)
ChkHr(CatalogServiceProxyV6::GetProduct(pStoreCommerceServer->GetAppCatalogId(pCV), pCV, &spJsonObject))
ChkHr(jsonSKUAvailability->GetNamedObject(HStringReference(L"Sku").Get(), &jsonSKU))
ChkHr(jsonSKU->GetNamedObject(HStringReference(L"Properties").Get(), &jsonProperties))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(jsonSKUAvailabilities, &cchSKUAvailablilities))
ChkHr(jsonSKUAvailabilities->GetObjectAt(0, &jsonSKUAvailability))
ChkHr(jsonLicensingData->GetNamedObject(HStringReference(L"LegacyWindowsPhoneLicensingData").Get(), &jsonLegacyWindowsPhoneLicensingData))
PublisherId
ChkHr(jsonProperties->GetNamedObject(HStringReference(L"LicensingData").Get(), &jsonLicensingData))
LegacyWindowsPhoneLicensingData
ChkHr(UriHelper::GetUri(UriHelper::MDGetAppReceiptsDesktop, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrServiceUri.GetAddressOf()))
ReceiptHelpers::FetchDesktopReceipt
ChkHr(jsonLegacyWindowsPhoneLicensingData->GetNamedString(HStringReference(L"PublisherId").Get(), strPublisherId.GetAddressOf()))
{receiptType}
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrRequestHeaders, L"MS-SiteName", WindowsGetStringRawBuffer(authDomain, nullptr)))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrRequestHeaders, L"MS-CV", cv.GetUnicode()))
ChkHr(CWSHttpHelper::AddTHAdditionalHeaders(arrRequestHeaders))
MS-SiteName
ChkHr(CMiscHelpers::ConvertTextBlob2WideChar(spbReceipt, cbReceipt, &shReceipt))
ChkHr(temp.Set(shReceipt))
ChkHr(hrRequest)
ChkHr(LicenseParseReceiptResponse(spbReceiptResponse, cbReceiptResponse, &spbReceipt, &cbReceipt))
ReceiptHelpers::GetReceiptCacheFolder
ChkHr(_GetPackageLocalAppDataPath(szPackageFamilyName, pszFolder, cchFolder))
ChkArg(cchFolder)
ReceiptHelpers::GetPackageLocalAppDataPath
ReceiptHelpers::GetReceiptCacheFileName
_WinStoreSDK_Receipt_Cache
ChkHr(PathCchAppendEx(pszFolder, cchFolder, L"_WinStoreSDK_Receipt_Cache", 0))
Microsoft Enhanced RSA and AES Cryptographic Provider
ChkHr(HRESULT_FROM_WIN32(122L))
%s-%s-%d-%s
ChkHr(StringCchPrintfW(szSeedName, (sizeof(*RtlpNumberOf(szSeedName))), L"%s-%s-%d-%s", WindowsGetStringRawBuffer(geoId, nullptr), WindowsGetStringRawBuffer(language, nullptr), static_cast<UINT32>(eReceiptType), WindowsGetStringRawBuffer(featureName, nullptr)))
ReceiptHelpers::GetPhoneReceiptFilepath
ChkHr(PathCchAddExtension(pszCacheFileName, cchCacheFileName, L".dat"))
ChkHr(PathCchAppendEx(pszCacheFilepath, cchCacheFilepath, szCacheFileName, 0))
ChkHr(GetPhoneReceiptFilepath(geoId, language, eReceiptType, featureName, packageFullName, szCacheFileFullPath, (sizeof(*RtlpNumberOf(szCacheFileFullPath)))))
ChkHr(GetReceiptCacheFolder(packageFullName, pszCacheFilepath, cchCacheFilepath))
ChkHr(GetReceiptCacheFileName(geoId, language, eReceiptType, featureName, szCacheFileName, (sizeof(*RtlpNumberOf(szCacheFileName)))))
ChkHr(LocalAllocBytes(cbReceipt, &pbReceipt))
ChkHr(WindowsCreateString(reinterpret_cast<PCWSTR>(pbReceipt), cbReceipt / 2, receipt))
ReceiptHelpers::CachePhoneReceiptForOffline
ReceiptHelpers::GetCachedPhoneReceipt
ChkHr(GetPublisherId(pStoreCommerceServer, pCV, hstrPublisherId.GetAddressOf()))
ReceiptHelpers::FetchPhoneReceipt
ReceiptHelpers::DeleteCachedPhoneReceipt
%04u-%02u-%02uT%02u:%02u:%02uZ
{lang}
ChkHr(IAPUtils::GetMarket(hstrGeoId.GetAddressOf()))
ChkHr(IAPUtils::GetLanguage(hstrLanguage.GetAddressOf()))
{requestTime}
{featureName}
{parentProductId}
{installedPublisherId}
ChkHr(IAPUtils::CreateHttpClient(&httpClient))
ChkHr(headers->TryAppendWithoutValidation(HStringReference(L"Authorization").Get(), authTicket, &b))
ChkHr(UriHelper::GetUri(UriHelper::MDGetOneProductReceiptMobile, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrServiceUri.GetAddressOf()))
ChkHr(UriHelper::GetUri(UriHelper::MDGetAppReceiptsMobile, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrServiceUri.GetAddressOf()))
ChkHr(GuidToStringWithoutBraces(&anid, szAnid))
X-WP-ANID
ChkHr(headers->Append(HStringReference(L"MS-SiteName").Get(), authDomain))
ChkHr(UuidCreate(&anid))
Cache-Control
ChkHr(headers->Append(HStringReference(L"Cache-Control").Get(), HStringReference(L"no-cache, max-age=0").Get()))
ChkHr(headers->Append(HStringReference(L"X-WP-ANID").Get(), HStringReference(szAnid).Get()))
no-cache, max-age=0
ChkHr(spXmlDocumentIO->LoadXml(hResponse.Get()))
Receipt
ChkHr(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Xml_Dom_XmlDocument).Get(), &spXMLResponse))
ChkHr(spXMLResponse.As(&spXmlDocumentIO))
ChkBool(uReceiptNodesLength > 0, HRESULT_FROM_WIN32(1168L))
ChkHr(spReceiptNodes->Item(0, &spReceiptNode))
ChkHr(spXMLResponse->GetElementsByTagName(HStringReference(L"Receipt").Get(), &spReceiptNodes))
ChkHr(spReceiptNodes->get_Length(&uReceiptNodesLength))
ChkBool(uReceiptNodeChildrenLength > 0, HRESULT_FROM_WIN32(1168L))
ChkHr(spReceiptNodeChildren->Item(0, &spReceiptContent))
ChkHr(spReceiptNode->get_ChildNodes(&spReceiptNodeChildren))
ChkHr(spReceiptNodeChildren->get_Length(&uReceiptNodeChildrenLength))
ChkHr(WindowsSubstringWithSpecifiedLength(hstrReceiptContent.Get(), 9, WindowsGetStringLen(hstrReceiptContent.Get()) - 12, receipt))
ChkHr(hrGetString)
ChkHr(spReceiptContent.As(&spXmlNodeSerializer))
ChkHr(spXmlNodeSerializer->GetXml(hstrReceiptContent.GetAddressOf()))
ChkHr(GuidToStringWithoutBraces(&pStoreCommerceServer->GetAppId(), szProductIdGuid))
ChkHr(UriHelper::GetUri(UriHelper::OneStoreAuthenticationDomain, hstrAuthDomain.GetAddressOf()))
eReceiptType
ReceiptHelpers::FetchReceipt
Receipt fetched: %hs
ChkBool(cchCurrency != 0, LR2HR(GetLastError()))
ChkHr(WindowsConcatString(HStringReference(L"WLID1.0=").Get(), authTicket, hstrAuthTicketWithPrefix.GetAddressOf()))
ChkHr(hrFetch)
ChkHr(temp.Set(spszFormattedPrice))
ChkHr(GetFormattedPriceUsingCurrencyFormatter( priceValue, pStorePricingInfo->CurrencyCode, locale, HStringReference(pwszUppercaseRegion).Get(), formattedPrice))
ReceiptHelpers::GetFormattedPrice
ChkAlloc(spszFormattedPrice)
ChkHr(HRESULT_FROM_WIN32(5L))
ChkHr(HRESULT_FROM_WIN32(1244L))
ChkHr(HRESULT_FROM_WIN32(15861L))
ChkHr(HRESULT_FROM_WIN32(15862L))
ChkReturn(hr)
WSErrorUtils::ConvertInternalErrorCodeToExternal
ChkHr(HRESULT_FROM_WIN32(13L))
ChkHr(((HRESULT)0x80190194L))
onecoreuap\enduser\Winstore\licensing\wsinc\WSErrorUtils.h
ChkArg(lpszURL)
ChkArg(authResponse)
ChkHr(httpRequest.Initialize (0))
ChkArg(ppbResponseData)
ChkArg(pcbResponseData)
ChkHr(httpRequest.UploadAndFetchResourceByUrl ( lpszURL, 0, 0, 1, 1 ))
ChkHr(httpRequest.SetAuthorizationHeader(authResponse))
ChkAlloc(spbResponseData)
ChkHr(((HRESULT) (((unsigned long)(1)<<31) | ((unsigned long)(25)<<16) | ((unsigned long)(httpRequest.GetRequestStatusCode()))) ))
CWSHttpHelper::FetchURL
ChkHr(GuidToStringWithoutBraces(&guidCorrelationId, wszCorrelationId))
ChkHr(CreateGuid(&guidCorrelationId))
ChkHr(GuidToStringWithoutBraces(&guidRequestId, wszRequestId))
MS-CorrelationId
ChkHr(CreateGuid(&guidRequestId))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrAdditionalHeaders, L"MS-CorrelationId", wszCorrelationId))
ChkHr(LocalAllocArray(cchBuffer, &pszBuffer))
%s:%s
ChkHr(StringCchPrintfW(pszBuffer, cchBuffer, L"%s:%s", header, value))
ChkHr(STRAPI_Create(pszBuffer, &dhStr))
CWSHttpHelper::AddTHAdditionalRequestHeader
ChkHr(arrAdditionalHeaders.Append(dhStr))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrAdditionalHeaders, L"MS-RequestId", wszRequestId))
CWSHttpHelper::AddTHAdditionalHeaders
MS-RequestId
onecoreuap\enduser\Winstore\licensing\wsinc\WSHttpHelper.h
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::Initialize
ChkHr(_hstrProductId.CopyTo(hstrProductId))
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::get_TransactionId
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\unfulfilledconsumableserver.cpp
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::get_ProductId
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::get_OfferId
ChkHr(_hstrOfferId.CopyTo(offerId))
Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResultsServer::get_ProductPurchaseStatus
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewpurchaseresultsserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\sendstorerequestresult.cpp
::WindowsDuplicateString(_response.Get(), value)
ChkHr(_response.Set(response))
Windows::Services::Store::StoreSendRequestResult::RuntimeClassInitialize
Windows::Services::Store::StoreSendRequestResult::get_HttpStatusCode
Windows::Services::Store::StoreSendRequestResult::get_Response
Windows::Services::Store::StoreSendRequestResult::get_ExtendedError
onecoreuap\enduser\winstore\licensing\winrt\lib\storeapplicense.cpp
ChkHr(JsonParser::ParseJSONToObject( json, this, AppLicenseTable))
Windows::Services::Store::StoreAppLicense::RuntimeClassInitialize
ChkHr(::WindowsDuplicateString(_skuStoreId.Get(), pValue))
Windows::Services::Store::StoreAppLicense::get_IsActive
ChkHr(IAPUtils::BuildStoreId( _productId.Get(), _skuId.Get(), nullptr, _skuStoreId.GetAddressOf()))
Windows::Services::Store::StoreAppLicense::get_SkuStoreId
Windows::Services::Store::StoreAppLicense::get_AddOnLicenses
ChkAlloc(hashMap)
Windows::Services::Store::StoreAppLicense::get_IsTrial
Windows::Services::Store::StoreAppLicense::get_ExpirationDate
ChkHr(license->get_SkuStoreId(skuStoreId.GetAddressOf()))
ChkHr(hashMap->Insert(skuStoreId.Get(), license.Get(), &replaced))
ChkHr(_addOnLicenses->get_Size(&count))
ChkHr(_addOnLicenses->GetAt(i, license.GetAddressOf()))
Windows::Services::Store::StoreAppLicense::get_TrialTimeRemaining
Windows::Services::Store::StoreAppLicense::get_IsTrialOwnedByThisUser
ChkHr(hashMap->GetView(&_addOnLicensesMap))
Windows::Services::Store::StoreAppLicense::get_IsDiscLicense
::WindowsDuplicateString(_trialUniqueId.Get(), pValue)
Windows::Services::Store::StoreAppLicense::get_TrialUniqueId
Windows::Services::Store::JsonParser::ParseTimeSpan
IAPUtils::ParseTimeSpan(timeString.Get(), &date)
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreLicense>>
AW+Gd
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreLicense>>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.StoreLicense>
Windows::Services::Store::StoreProductResult::get_Product
ChkHr(_products->get_Size(&count))
onecoreuap\enduser\winstore\licensing\winrt\lib\storeproductresult.cpp
Windows::Services::Store::StoreProductResult::get_ExtendedError
ChkHr(_products->GetAt(0, &_product))
ChkHr(StoreProductPagedQueryResult::BuildMap( products, productKinds, &_mapView))
_mapView.CopyTo(ppValue)
Windows::Services::Store::StoreProductQueryResult::get_Products
Windows::Services::Store::StoreProductQueryResult::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\storelistingqueryresult.cpp
Windows::Services::Store::StoreProductQueryResult::get_ExtendedError
Windows::Services::Store::StoreProductPagedQueryResult::RuntimeClassInitialize
Windows::Services::Store::StoreProductPagedQueryResult::get_Products
Windows::Services::Store::StoreProductPagedQueryResult::get_HasMoreResults
onecoreuap\enduser\winstore\licensing\winrt\lib\storelistingpagedqueryresult.cpp
ChkAlloc(spOperation)
ChkHr(spOperation->BeginWork(1))
Windows::Services::Store::StoreProductPagedQueryResult::get_ExtendedError
Windows::Services::Store::StoreProductPagedQueryResult::GetNextAsync
ChkHr(pkIter->get_HasCurrent(&hasCurrent))
ChkHr(pkIter->get_Current(requestedProductKind.GetAddressOf()))
Windows::Services::Store::StoreProductPagedQueryResult::BuildMap
ChkHr(productKinds->First(&pkIter))
ChkHr(products->get_Size(&count))
ChkHr(products->GetAt(i, product.GetAddressOf()))
ChkHr(productKindHashMap->Insert(requestedProductKind.Get(), true, &replaced))
ChkHr(pkIter->MoveNext(&hasCurrent))
ChkHr(product->get_StoreId(storeId.GetAddressOf()))
ChkHr(hashMap->Insert(storeId.Get(), product.Get(), &replaced))
ChkHr(product->get_ProductKind(actualProductKind.GetAddressOf()))
ChkHr(productKindHashMap->HasKey(actualProductKind.Get(), &found))
ChkHr(hashMap->GetView(ppMapView))
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, UInt8>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreProduct>>
Windows.Foundation.Collections.IKeyValuePair`2<String, UInt8>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreProduct>>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IMapView`2<String, UInt8>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, UInt8>>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IMap`2<String, UInt8>
ChkArg(status)
Windows::Services::Store::StoreConsumableResult::get_Status
Windows::Services::Store::StoreConsumableResult::get_TrackingId
ChkArg(balanceRemaining)
onecoreuap\enduser\winstore\licensing\winrt\lib\storeconsumableresult.cpp
ChkArg(trackingId)
Windows::Services::Store::StoreConsumableResult::get_BalanceRemaining
Windows::Services::Store::StoreConsumableResult::get_ExtendedError
_pPackageLicense.CopyTo(ppValue)
Windows::Services::Store::StoreAcquireLicenseResult::get_StorePackageLicense
onecoreuap\enduser\winstore\licensing\winrt\lib\storeacquirelicenseresult.cpp
Windows::Services::Store::StoreAcquireLicenseResult::get_ExtendedError
Windows::Services::Store::StorePackageLicense::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\storepackagelicense.cpp
ChkHr(_pPackage->get_Id(packageId.GetAddressOf()))
ChkHr(storeContextServer->AcquireStoreLicenseForOptionalPackage( optionalPfn.Get(), spStorePackageLicenseLostCallback.Get(), &_valid))
ReleaseLicense()
ChkHr(packageId->get_FullName(optionalPfn.GetAddressOf()))
ChkHr(MakeAndInitialize<StorePackageLicenseLostCallback>(&spStorePackageLicenseLostCallback, this))
Windows::Services::Store::StorePackageLicense::add_LicenseLost
_licenseLostEvent.Remove(token)
Windows::Services::Store::StorePackageLicense::~StorePackageLicense
_licenseLostEvent.Add(pHandler, pToken)
Windows::Services::Store::StorePackageLicense::get_Package
Windows::Services::Store::StorePackageLicense::get_IsValid
Windows::Services::Store::StorePackageLicense::remove_LicenseLost
_pPackage.CopyTo(ppPackage)
Windows::Services::Store::StorePackageLicense::ReleaseLicense
packageId->get_FullName(optionalPfn.GetAddressOf())
Windows::Services::Store::StorePackageLicense::Close
_pPackage->get_Id(packageId.GetAddressOf())
storeContextServer->ReleaseStoreLicenseForOptionalPackage(optionalPfn.Get())
Ylp)d_
Windows::Services::Store::StorePackageLicenseLostCallback::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\StorePackageLicense.h
ChkHr(AsWeak(pStorePackageLicense, &_wrStorePackageLicense))
onecoreuap\enduser\winstore\licensing\winrt\lib\storecanacquirelicenseresult.cpp
Windows::Services::Store::StoreCanAcquireLicenseResult::get_Status
ChkHr(_licensableSku.Set(licensableSku))
Windows::Services::Store::StoreCanAcquireLicenseResult::RuntimeClassInitialize
Windows::Services::Store::StoreCanAcquireLicenseResult::get_ExtendedError
Windows::Services::Store::StoreCanAcquireLicenseResult::get_LicensableSku
ChkHr(WindowsDuplicateString(_licensableSku.Get(), pValue))
onecoreuap\enduser\winstore\licensing\winrt\lib\storepurchaseresult.cpp
ChkArg(pHresult)
Windows::Services::Store::StorePurchaseResult::get_Status
Windows::Services::Store::StorePurchaseResult::get_ExtendedError
ChkHr(_extendedJsonData.Set(extendedJsonData))
Windows::Services::Store::StoreRateAndReviewResult::RuntimeClassInitialize
Windows::Services::Store::StoreRateAndReviewResult::get_ExtendedJsonData
ChkHr(::WindowsDuplicateString(_extendedJsonData.Get(), pValue))
onecoreuap\enduser\winstore\licensing\winrt\lib\storerateandreviewresult.cpp
Windows::Services::Store::StoreRateAndReviewResult::get_ExtendedError
Windows::Services::Store::StoreRateAndReviewResult::get_WasUpdated
Windows::Services::Store::StoreRateAndReviewResult::get_Status
Minute
UnitType
Month
HasTrial
Units
InitialDuration
Duration
Windows::Services::Store::StoreSubscriptionInfo::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\storesubscriptiondata.cpp
IsRecurring
ChkHr(JsonParser::ParseJSONToObject( json, this, RecurrenceTable))
Windows::Services::Store::StoreSubscriptionInfo::get_BillingPeriod
Windows::Services::Store::StoreSubscriptionInfo::get_BillingPeriodUnit
ChkHr(_ConvertDuration(_billingPeriodUnitType.Get(), _billingPeriod, &_billingPeriodUnit))
ChkHr(_ConvertDuration(_trialPeriodUnitType.Get(), _trialPeriod, &_trialPeriodUnit))
Windows::Services::Store::StoreSubscriptionInfo::get_TrialPeriodUnit
false && "Store service returned an unexpected enum!"
Windows::Services::Store::StoreSubscriptionInfo::get_HasTrialPeriod
Windows::Services::Store::StoreSubscriptionInfo::get_TrialPeriod
Windows::Services::Store::StoreSubscriptionInfo::_ConvertDuration
Store service returned an unexpected enum: %hs
DisplayRank
ChkHr(JsonParser::ParseJSONToObject( json, this, AvailabilityRootTable))
Windows::Services::Store::StoreAvailability::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\storeavailability.cpp
Windows::Services::Store::StoreAvailability::get_EndDate
ChkHr(_price.CopyTo(ppValue))
Windows::Services::Store::StoreAvailability::get_StoreId
ChkHr(IAPUtils::BuildStoreId( _productId.Get(), _skuId.Get(), _availabilityId.Get(), _storeId.GetAddressOf()))
Windows::Services::Store::StoreAvailability::RequestPurchaseWithPurchasePropertiesAsync
::WindowsDuplicateString(_availabilityId.Get(), pValue)
Windows::Services::Store::StoreAvailability::get_Price
Windows::Services::Store::StoreAvailability::RequestPurchaseAsync
Windows::Services::Store::StoreAvailability::get_AvailabilityId
Windows::Services::Store::StoreAvailability::set_ProductIdSkuId
Windows::ApplicationModel::Store::ProductLicenseServer::Initialize
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productlicenseserver.cpp
ChkHr(pAppAddOn->GetProductId(&pszProductId))
ChkHr(pAppAddOn->GetProductType(&m_eAddOnType))
ChkHr(IAPUtils::SetDateTime(ftExpireTime, &m_dtExpiration))
ChkHr(m_hstrProductId.Set(pszProductId))
ChkHr(pAppAddOn->GetExpireTime(&ftExpireTime))
ChkHr(m_hstrProductId.Set(featureId))
Windows::ApplicationModel::Store::ProductLicenseServer::InitializeInvalid
ChkHr(pUnfulfilledConsumable->get_ProductId(m_hstrProductId.GetAddressOf()))
ChkHr(IAPUtils::SetMaxDateTime(&m_dtExpiration))
Windows::ApplicationModel::Store::ProductLicenseServer::get_IsActive
Windows::ApplicationModel::Store::ProductLicenseServer::get_ExpirationDate
Windows::ApplicationModel::Store::ProductLicenseServer::get_ProductId
ChkHr(m_hstrProductId.CopyTo(pValue))
Windows::ApplicationModel::Store::ProductLicenseServer::get_IsConsumable
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productlistingserver.cpp
ChkHr(_hstrInAppOfferToken.Set(pInAppOffer->InAppOfferToken))
ChkArg(pInAppOffer)
Windows::ApplicationModel::Store::ProductListingServer::Initialize
ChkHr(_hstrDescription.Set(pInAppOffer->Description))
ChkHr(_hstrProductTag.Set(pInAppOffer->ProductTag))
ChkHr(_hstrName.Set(pInAppOffer->Name))
ChkHr(ReceiptHelpers::GetFormattedPrice(locale, market, &pInAppOffer->PricingInfo, false , _hstrFormattedPrice.GetAddressOf()))
ChkHr(pInAppOffer->spKeywords->get_Size(&cKeywords))
ChkHr(pInAppOffer->spKeywords->GetAt(i, keyword.GetAddressOf()))
ChkHr(_hstrImageUri.Set(pInAppOffer->ImageUri))
ChkHr(AgileVector<HSTRING>::Make(&_keywords))
ChkHr(_hstrCurrencyCode.Set(pInAppOffer->PricingInfo.CurrencyCode))
Windows::ApplicationModel::Store::ProductListingServer::get_ProductId
ChkHr(_keywords->Append(keyword.Get()))
ChkHr(ReceiptHelpers::GetFormattedPrice(locale, market, &pInAppOffer->PricingInfo, true , _hstrFormattedBasePrice.GetAddressOf()))
Windows::ApplicationModel::Store::ProductListingServer::get_Name
Windows::ApplicationModel::Store::ProductListingServer::get_ProductType
ChkHr(_hstrInAppOfferToken.CopyTo(pValue))
Windows::ApplicationModel::Store::ProductListingServer::get_FormattedPrice
ChkHr(_keywords->GetView(&spVectorView))
ChkHr(spVectorView.As(&spIterable))
Windows::ApplicationModel::Store::ProductListingServer::get_Description
Windows::ApplicationModel::Store::ProductListingServer::get_Keywords
Windows::ApplicationModel::Store::ProductListingServer::get_ImageUri
ChkHr(WindowsConcatString(HStringReference(L"http:").Get(), _hstrImageUri.Get(), uri.GetAddressOf()))
Windows::ApplicationModel::Store::ProductListingServer::get_Tag
ChkHr(_hstrProductTag.CopyTo(pValue))
Windows::ApplicationModel::Store::ProductListingServer::get_FormattedBasePrice
ChkHr(_hstrFormattedBasePrice.CopyTo(pValue))
ChkHr(IAPUtils::CreateUri(_hstrImageUri.Get(), &_spImageUri))
Windows::ApplicationModel::Store::ProductListingServer::get_CurrencyCode
Windows::ApplicationModel::Store::ProductListingServer::get_SaleEndDate
Windows::ApplicationModel::Store::ProductListingServer::get_IsOnSale
onecoreuap\enduser\winstore\licensing\winrt\lib\storelicense.cpp
ChkHr(JsonParser::ParseJSONToObject( json, this, LicenseTable))
ChkHr(IAPUtils::SetMaxDateTime(&_expirationDate))
Windows::Services::Store::StoreLicense::RuntimeClassInitialize
Windows::Services::Store::StoreLicense::get_InAppOfferToken
Windows::Services::Store::StoreLicense::get_ExpirationDate
Windows::Services::Store::StoreLicense::get_SkuStoreId
Windows::Services::Store::StoreLicense::get_IsActive
RecurrencePrice
ChkHr(JsonParser::ParseJSONToObject( json, this, OrderManagementDataTable))
ChkHr(IAPUtils::GetFormattedPrice(_basePrice, _currencyCode.Get(), _formattedBasePrice.GetAddressOf()))
ChkHr(IAPUtils::GetFormattedPrice(_listPrice, _currencyCode.Get(), _formattedPrice.GetAddressOf()))
Windows::Services::Store::StorePrice::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\storeprice.cpp
Windows::Services::Store::StorePrice::get_FormattedBasePrice
::WindowsDuplicateString(_formattedPrice.Get(), pValue)
ChkHr(IAPUtils::GetFormattedPrice(_recurrencePrice, _currencyCode.Get(), _formattedRecurrencePrice.GetAddressOf()))
::WindowsDuplicateString(_formattedBasePrice.Get(), pValue)
Windows::Services::Store::StorePrice::get_SaleEndDate
::WindowsDuplicateString(_currencyCode.Get(), pValue)
Windows::Services::Store::StorePrice::get_FormattedPrice
Windows::Services::Store::StorePrice::get_IsOnSale
Windows::Services::Store::StorePrice::get_FormattedRecurrencePrice
jsonValue->GetNumber(&valueAsDouble)
Windows::Services::Store::StorePrice::get_CurrencyCode
::WindowsDuplicateString(_formattedRecurrencePrice.Get(), pValue)
Windows::Services::Store::JsonParser::ParseDouble
?456789:;<=
 !"#$%&'()*+,-./0123
Windows.UpdateTask
Windows.AppService
Windows.BackgroundTasks
Windows.PreInstalledConfigTask
Windows.EmailDataProvider
Windows.UserDataTaskDataProvider
Windows.AppointmentDataProvider
Windows.ContactDataProvider
Windows.PosPaymentConnector
Windows.PrintSupportExtension
Windows.PrintWorkflowBackgroundTask
Windows.BarcodeScannerProvider
Windows.PrintSupportWorkflow
onecoreuap\shell\lib\activationevents\src\activatedeventargsbase.cpp
Windows.Search
Windows.ShareTarget
Windows.FileOpenPicker
Windows.FileSavePicker
Windows.File
Windows.Protocol
Windows.Device
Windows.PrintTaskSettings
Windows.CachedFileUpdater
Windows.ContactPicker
Windows.AppointmentsProvider.AddAppointment
Windows.AppointmentsProvider.ReplaceAppointment
Windows.Print3DWorkflow
Windows.CameraSettings
Windows.AppointmentsProvider.ShowAppointmentDetails
Windows.Contact.Call
Windows.AppointmentsProvider.RemoveAppointment
Windows.AppointmentsProvider.ShowTimeFrame
Windows.Contact.Post
Windows.Contact.VideoCall
Windows.Contact.Message
Windows.Contact.Map
Windows.RestrictedLaunch
windows.LockScreenCall
Windows.ContactsProvider.ShowContact
Windows.ContactsProvider.AddContact
Windows.ComponentUI
windows.lockScreen
Windows.VoiceCommand
Windows.WebAccountProvider
Windows.UserDataAccountsProvider
Windows.Internal.FilePickerExperience
Windows.DialProtocol
Windows.PersonalAssistant.Launch
Windows.LockScreenComponent
Windows.ContactPanel
Windows.AppUriHandler
Windows.PeoplePane
Windows.StartupTask
Windows.CommandLineLaunch
Windows.OopWebView
Windows.PrintWorkflowForegroundTask
Windows.BarcodeScannerPreviewProvider
Windows.PhoneCallActivation
onecore\shell\lib\calleridentity\calleridentity.cpp
win8xappx
Software\Microsoft\Windows\CurrentVersion\Store\ContentId
win32
wp8xappx
%s:%s:%s
https://login.windows.local
XboxUserId
{d6d5a677-0872-4ab0-9442-bb792fce85c5}
consumers
https://login.windows.net/common
S-1-15-2-1609473798-1231923017-684268153-4268514328-882773646-2760585773-1760938157
S-1-15-2-903380885-3144618533-3326689759-1293738580-1356288723-3824823557-3342340653
{268761a2-03f3-40df-8a8b-c3db24145b6b}
organizations
AlwaysPromptBeforePurchase
MBI_SSL
service::%s::%s
OneStoreAuthenticationPolicy
AADAuthority
x-xbl-contract-version:2
Accept:application/json
XboxLiveAuthenticationDomain
www.microsoft.com
AADResource
MOBillingAuthenticationDomain
mobilling.microsoft.com
user.auth.xboxlive.com
mbi_ssl
https://onestore.microsoft.com
WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicketForUri
onecoreuap\enduser\winstore\auth\lib\winstoreauth.cpp
https://purchase.mp.microsoft.com
//ServiceEnvironment/Authentication
WinStoreAuth::AuthenticationInternal::GetAllAccountTickets
WinStoreAuth::GetAccountTicketFromTokenBroker
WinStoreAuth::AuthenticationInternal::GetTicketForAccount
WinStoreAuth::GetAADFromRegistry
WinStoreAuth::GetAccountTicketsFromTokenBroker
Failed to get account from accounts vector
resource
authority
WinStoreAuth::AuthenticationInternal::GetDeviceTicketWithBroker
WinStoreAuth::AuthenticationInternal::GetXToken
WinStoreAuth::AuthenticationInternal::GetAllXTokens
WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountId
WinStoreAuth::AuthenticationInternal::PrefixTicketForMDollar
WinStoreAuth::AuthenticationInternal::ConvertWebAccountIdFromAppToRealIdInternal
WinStoreAuth::AuthenticationInternal::ConvertWebAccountIdFromRealIdToAppInternal
Bearer 
MSAHW1.0=
Software\Microsoft\XboxLive
Sandbox
WinStoreAuth::AuthenticationInternal::FetchStoreAccountIdFromRegistry
WinStoreAuth::AuthenticationInternal::FetchXboxLiveAccountId
WinStoreAuth::AuthenticationInternal::CreateAuthenticationManager
WinStoreAuth::AuthenticationInternal::CreateTokenBroker
RETAIL
WinStoreAuth::AuthenticationInternal::GetCurrentIUser
WinStoreAuth::AuthenticationInternal::FindAccount
WinStoreAuth::AuthenticationInternal::GetAllTokenBrokerAccounts
WinStoreAuth::AuthenticationInternal::CreateTokenBrokerInternal
WinStoreAuth::AuthenticationInternal::GetAccountProvider
Client_ShowSkipForceAuthentication
WinStoreAuth::AuthenticationInternal::CreateLegacyTicketRequest
WinStoreAuth::AuthenticationInternal::CreateGoldenAccountTokenRequest
WinStoreAuth::AuthenticationInternal::CreateTokenRequestHelper
Device
Account Ticket succesfully extracted. Ticket providerType: %ws web: %ws 
WinStoreAuth::AuthenticationInternal::ManagePropertiesFromTokenResponse
WinStoreAuth::AuthenticationInternal::ExtractTicketFromTokenResponse
WebTokenRequestStatus: UserInteractionRequired
HR: 0x%x
WAM HR: 0x%x
ResponseErrorMessage: %ws
WebTokenRequestStatus: ProviderError
HR: 0x%x
ResponseErrorMessage: %ws
SkipForceAuthentication
WinStoreAuth::AuthenticationInternal::ExtractTicketsFromTokenResult
WinStoreAuth::AuthenticationInternal::CaptureStorePrimaryAccountId
WinStoreAuth::AuthenticationInternal::CaptureStorePrimaryAccountTicket
WinStoreAuth::_SendTokenRequestAndGetTickets
WinStoreAuth::AuthenticationInternal::FindCachedStorePrimaryAccount
WinStoreAuth::AuthenticationInternal::ExtractProviderType
WinStoreAuth::AuthenticationInternal::CaptureGoldenAccountTicket
WinStoreAuth::AuthenticationInternal::ExtractAccountId
WinStoreAuth::SetProxyBlanket
WinStoreAuth::AuthenticationInternal::ExtractTicket
Windows.Foundation.Collections.IVectorView`1<Object>
Windows.Foundation.Collections.IIterator`1<Object>
Windows.Foundation.Collections.IVector`1<Object>
onecoreuap\enduser\winstore\auth\lib\winstoreauthstatics.cpp
WinStoreAuth::GetStorePrimaryAccountIdForUser
WinStoreAuth::ConvertWebAccountIdFromAppToRealIdForUser
WinStoreAuth::ConvertWebAccountIdFromRealIdToAppForUser
CHttpRequest::~CHttpRequest
_hRequest == 0
CHttpRequest::Initialize
CreateEvent failed
_pConnection == nullptr
onecoreuap\enduser\winstore\lib\httprequest.cpp
CHttpRequest::_WaitForLastAsyncCompletion
WaitForMultipleObjects returned %u
CHttpRequest::s_WinHttpCompletionCallback
dwContext != 0
cbStatus >= sizeof(DWORD)
Request 0x%08x failed, result %d
CHttpRequest::_WinHttpCompletionCallback
cbStatus >= sizeof(WINHTTP_ASYNC_RESULT)
CHttpRequest::_GetProxyInfoForUrl
pszServerName && pszUrl
_hRequest == hRequest
Canceling redirect for 0x%08x
Proxy list = %s, Proxy bypass = %s, Proxy access type = %i
http%s://%s/%s
ppszProxyList && ppszProxyByPass && pdwAccessType
CHttpRequest::_SendRequestWithRetry
CHttpRequest::_SetProxyForCurrentRequest
WinHttpSetOption failed
Server: %s, URL %s
_SetProxyForCurrentRequest(pszCurrProxy, pszProxyBypass, dwAccessType)
WinHttpSetStatusCallback failed
WinHttpOpenRequest failed
text/xml
CHttpRequest::_CreateConnectionAndSendRequest
Start callback failed
WinHttpSetOption(WINHTTP_ENABLE_SSL_REVOCATION failed
WinHttpSetOption(WINHTTP_OPTION_AUTOLOGON_POLICY) failed
WinHttpSetOption CONTEXT_VALUE failed
WinHttpReadData completion failed
CHttpRequest::_DownloadData
WinHttpReadData failed
_GetProxyInfoForUrl(pszServerName, pszUrl, fUseSecure, &pszProxyList, &pszProxyByPass, &dwAccessType)
WinHttpReceiveResponse failed
_ReceiveResponse failed
DataDownloaded callback failed
_AppendToDataBuffer failed
Machine
Failed to convert systemtime to filetime
CHttpRequest::_ReceiveResponse
_hRequest
_WaitForLastAsyncCompletion failed
WinHttpQueryHeaders failed, status code = %i
Request 0x%08x has machine %s and RID %s
CHttpRequest::AddRequestHeader
WinHttpAddRequestHeaders(%s) failed
CHttpRequest::UploadAndFetchResource
_CreateConnectionAndSendRequest(pszServerName, pszUrl, fUseSecure, fUsePut ? L"PUT" : L"POST", _GetStreamSize(pUploadDataStream), port, 0, fUseAuthentication)
CHttpRequest::UploadAndFetchResourceByUrl
pszFullUrl
Request to [%s] failed with connection error. Retrying %d more times
_DownloadData()
WinHttpCrackUrl failed
Response buffer overflow
CHttpRequest::AbortRequest
_hCancelInternal
CHttpRequest::_LocalAllocHeader
DWordAdd(dwNeeded, 1, &cbSizeToAlloc)
CHttpRequest::_AppendToDataBuffer
pszAuthorizationHeader
CHttpRequest response header: %s : %s
CHttpRequest::_AddDebugHeaderIfPresent
Added header %s
X-Windows-Store-Debugging-Id:%s
CHttpRequest::SetAuthorizationHeader
!_hInternet
CHttpConnection::_Initialize
!_pszServer
X-Windows-Store-Debugging-Id
Windows Store/1.0
CHttpSession::_Initialize
WinHttpConnect failed for %s:%d
CHttpConnection::Connect
DPA_SortedInsertPtr failed on handle 0x%08x for %s:%d
WinHttpOpen failed
WinHttpSetTimeouts failed
WinHttpSetOption WINHTTP_OPTION_REDIRECT_POLICY failed
CHttpConnectionCache::GetConnection
MicrosoftTelemetryAssertTriggeredUM
ntdll.dll
ReceiptBase64Encoded
Version
ReceiptResponse
ErrorCode
PurchaseOperation
__TlgCV__
Request
Response
HResultOfOperation
OutgoingServiceRequest
__TlgCV__
PartB_Ms.Qos.OutgoingServiceRequest
targetUri
latencyMs
protocolStatusCode
responseSizeBytes
succeeded
ErrorMessage
ErrorCode
ErrorLocation
LineNumber
ErrorMethod
Verbose
ErrorMessage
ErrorCode
ErrorLocation
LineNumber
ErrorMethod
Warning
ErrorMessage
ErrorCode
ErrorLocation
LineNumber
ErrorMethod
ApiInvoked
__TlgCV__
ErrorCode
Error
PartB_Ms.Telemetry.Error
ErrorMessage
ErrorCode
ErrorLocation
LineNumber
ErrorMethod
EndOperation
__TlgCV__
ErrorCode
BeginOperation
__TlgCV__
WinstoreAuth_SendTokenRequestAndGetTickets_Failure
WinstoreAuth_ProviderError
dwErrorCode != 0 ? HRESULT_FROM_WIN32(dwErrorCode) : ((HRESULT)0x80004005L)
WinstoreAuth_UserAuthRequired
HRESULT_FROM_WIN32(1317L)
WinstoreAuth_SLSFailure
GetLastError()
Microsoft.Windows.ApplicationModel.Store.Telemetry
Windows.ApplicationModel.Store.pdb
.orpc
.text
.text$di
.text$mn
.text$mn$00
.text$x
.text$yd
.rdata$brc
.rdata$T$brc
.idata$5
.00cfg
.CRT$XCA
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIAA
.CRT$XIZ
.CRT$XLA
.CRT$XLZ
.gehcont
.gfids
.giats
.rdata
.rdata$voltmd
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zzzdbg
.tls$
.tls$ZZZ
.xdata
minATL$__a
minATL$__m
minATL$__r
minATL$__z
.didat$2
.didat$3
.didat$4
.didat$6
.didat$7
.edata
.idata$2
.idata$3
.idata$4
.idata$6
.data$brc
.data
.pdata
.didat$5
.rsrc$01
.rsrc$02
RoOriginateError
RoOriginateErrorW
WindowsCreateString
WindowsGetStringRawBuffer
WindowsDeleteString
WindowsIsStringEmpty
WindowsStringHasEmbeddedNull
HSTRING_UserSize
HSTRING_UserMarshal
HSTRING_UserFree64
HSTRING_UserSize64
HSTRING_UserFree
HSTRING_UserMarshal64
HSTRING_UserUnmarshal
HSTRING_UserUnmarshal64
SHTaskPoolQueueTask
SHTaskPoolAllowThreadReuse
SHCreateMemStream
CoTaskMemAlloc
CoCreateInstance
CoCreateFreeThreadedMarshaler
UuidCreate
NdrDllGetClassObject
NdrDllCanUnloadNow
NdrOleFree
NdrOleAllocate
NdrStubForwardingFunction
CoGetApartmentType
CoWaitForMultipleHandles
RoReportFailedDelegate
RoGetMatchingRestrictedErrorInfo
RoTransformError
IsErrorPropagationEnabled
WindowsCreateStringReference
RoGetActivationFactory
SetRestrictedErrorInfo
CoSwitchCallContext
WindowsDuplicateString
WindowsCompareStringOrdinal
CoTaskMemFree
CoReleaseMarshalData
RoInitialize
RoUninitialize
CreateStreamOnHGlobal
CoMarshalInterface
GetRestrictedErrorInfo
RoGetAgileReference
RoActivateInstance
CoGetInterfaceAndReleaseStream
CoImpersonateClient
CoRevertToSelf
CoSetProxyBlanket
WindowsGetStringLen
WindowsDeleteStringBuffer
WindowsPreallocateStringBuffer
WindowsPromoteStringBuffer
WindowsSubstringWithSpecifiedLength
WindowsSubstring
I_RpcBindingInqLocalClientPID
CoGetMalloc
ConvertSidToStringSidW
RpcServerInqCallAttributesW
CoGetCallerTID
CoGetCallContext
CoTaskMemRealloc
WindowsConcatString
WindowsTrimStringStart
WindowsTrimStringEnd
RpcStringBindingComposeW
RpcBindingFromStringBindingW
RpcBindingSetAuthInfoExW
RpcStringFreeW
UuidFromStringW
StringFromGUID2
NdrClientCall3
IIDFromString
CreateRandomAccessStreamOverStream
EvtExportLog
OpenStateExplicit
GetStateFolder
CloseState
PackageFamilyNameFromFullName
GetPackageFullName
CryptAcquireContextW
CryptCreateHash
CryptHashData
CryptGetHashParam
CryptDestroyHash
CryptReleaseContext
ComposeLegacyXboxContentIdFromInstalledContentId
GetRequiredEkbFromContentId
GetERAPackageFullNameByAumid
GetPurchaseAppLaunchAumid
GetPurchaseAppPackageFamilyName
PolicyManager_GetPolicyInt
keybd_event
MapVirtualKeyW
SetForegroundWindow
GetForegroundWindow
FindWindowExW
GetWindowThreadProcessId
GetWindowTextW
UMgrGetConstrainedUserToken
UMgrOpenProcessTokenForQuery
UMgrOpenProcessHandleForAccess
UMgrQueryUserContext
UMgrQueryUserToken
QueryTraceW
FlushTraceW
CapabilityCheck
GetPackageFullNameFromToken
GetCurrentPackageFullName
GetPackageFamilyNameFromToken
PackageNameAndPublisherIdFromFamilyName
WinHttpCloseHandle
WinHttpGetDefaultProxyConfiguration
WinHttpGetIEProxyConfigForCurrentUser
WinHttpGetProxyForUrl
WinHttpSetOption
WinHttpSendRequest
WinHttpOpenRequest
WinHttpSetStatusCallback
WinHttpReadData
WinHttpReceiveResponse
WinHttpQueryHeaders
WinHttpAddRequestHeaders
WinHttpCrackUrl
WinHttpConnect
WinHttpOpen
WinHttpSetTimeouts
WsReadChars
WsFindAttribute
WsReadStartAttribute
WsReadEndAttribute
WsFreeError
WsFreeHeap
WsFreeReader
WsCreateError
WsCreateHeap
WsCreateReader
WsReadXmlBufferFromBytes
WsSetInputToBuffer
WsMoveReader
WsReadToStartElement
WsGetReaderPosition
WsReadBytes
WsReadStartElement
Windows.ApplicationModel.Store.dll
DllCanUnloadNow
DllGetActivationFactory
DllGetClassObject
_vsnwprintf
memcpy_s
_purecall
__C_specific_handler
??_V@YAXPEAX@Z
wcscpy_s
malloc
_XcptFilter
_amsg_exit
_initterm
_lock
_unlock
__dllonexit
_onexit
msvcrt.dll
__CxxFrameHandler3
_errno
realloc
EtwEventRegister
EtwEventUnregister
EtwEventSetInformation
RtlUnsubscribeWnfStateChangeNotification
EtwEventWriteTransfer
RtlCaptureContext
RtlLookupFunctionEntry
RtlVirtualUnwind
ntdll.dll
api-ms-win-core-kernel32-legacy-l1-1-0.dll
GetModuleHandleExW
GetProcAddress
FormatMessageW
GetCurrentThreadId
HeapAlloc
GetProcessHeap
HeapFree
GetModuleFileNameA
DebugBreak
GetModuleHandleW
GetLastError
IsDebuggerPresent
OutputDebugStringW
SetLastError
CloseHandle
ReleaseSemaphore
ReleaseMutex
WaitForSingleObjectEx
AcquireSRWLockExclusive
AcquireSRWLockShared
WaitForSingleObject
OpenSemaphoreW
DisableThreadLibraryCalls
InitializeSRWLock
ReleaseSRWLockExclusive
DecodePointer
GetCurrentProcessId
CreateMutexExW
InitOnceExecuteOnce
CreateSemaphoreExW
ReleaseSRWLockShared
EncodePointer
CompareStringW
MultiByteToWideChar
RaiseException
Sleep
UnhandledExceptionFilter
SetUnhandledExceptionFilter
GetCurrentProcess
TerminateProcess
QueryPerformanceCounter
GetSystemTimeAsFileTime
GetTickCount
EventActivityIdControl
SetThreadpoolTimer
CreateThreadpoolTimer
LeaveCriticalSection
EnterCriticalSection
DeleteCriticalSection
InitializeCriticalSectionEx
WaitForThreadpoolTimerCallbacks
CloseThreadpoolTimer
GetTokenInformation
SetEvent
FreeLibrary
CreateEventExW
OpenProcess
OpenProcessToken
ImpersonateLoggedOnUser
RevertToSelf
OpenThreadToken
GetCurrentThread
CompareStringOrdinal
EventWriteTransfer
FileTimeToSystemTime
SystemTimeToFileTime
LocalFree
OpenThread
GetProcessIdOfThread
GetProcessId
DuplicateTokenEx
GetUserGeoID
GetGeoInfoW
CompareFileTime
CheckTokenMembershipEx
FindResourceExW
LoadResource
SizeofResource
LockResource
FreeResource
GetTickCount64
CreateEventW
AllocateAndInitializeSid
FreeSid
LocalAlloc
LoadStringW
CreateFileA
ReadFile
WriteFile
SetFilePointer
DeleteFileA
GetTempPathA
GetTempFileNameA
GetFileInformationByHandle
FileTimeToLocalFileTime
ExpandEnvironmentStringsA
FindFirstFileExA
FindNextFileA
FindClose
FindFirstFileA
GetLocalTime
GetTempPath2W
DeleteFileW
ExpandEnvironmentStringsW
CreateProcessW
GetExitCodeProcess
RegGetValueW
RegSetKeyValueW
RegCloseKey
RegOpenKeyExW
RegDeleteKeyValueW
GetLocaleInfoEx
GetUserDefaultLocaleName
CreateDirectoryW
PathCchAppendEx
PathCchAddExtension
CreateFileW
GetFileSize
GetSystemTime
GetCurrencyFormatEx
GetVersionExA
GetLengthSid
CopySid
LCMapStringEx
RegOpenCurrentUser
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-core-localization-l1-2-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-util-l1-1-0.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-string-l1-1-0.dll
api-ms-win-core-processenvironment-l1-1-0.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-eventing-provider-l1-1-0.dll
api-ms-win-core-threadpool-l1-2-0.dll
api-ms-win-security-base-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
api-ms-win-core-timezone-l1-1-0.dll
api-ms-win-core-heap-l2-1-0.dll
api-ms-win-core-file-l1-1-0.dll
api-ms-win-security-base-l1-2-0.dll
api-ms-win-core-file-l1-2-2.dll
api-ms-win-core-file-l1-2-4.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-core-registry-l1-1-1.dll
api-ms-win-core-path-l1-1-0.dll
api-ms-win-core-localization-l2-1-0.dll
sprintf_s
wcstombs
strncpy_s
strtol
_set_errno
strrchr
strchr
memmove_s
mbstowcs_s
_wcsicmp
_itow_s
wcsstr
_wtol
_wcsdup
_wcsupr
_wcstoi64
wcstod
wcsrchr
wcschr
_wcstoui64
_snwprintf_s
_vsnprintf
wcstombs_s
wcstoul
_wtof
wcscspn
_wtoi
_callnewh
RtlUnsubscribeWnfNotificationWaitForCompletion
RtlQueryWnfStateData
RtlSubscribeWnfStateChangeNotification
RtlPublishWnfStateData
RtlGetDeviceFamilyInfoEnum
RtlIsStateSeparationEnabled
NtQueryWnfStateData
NtQueryInformationProcess
RtlNtStatusToDosError
RtlUpcaseUnicodeChar
UrlEscapeW
ResolveDelayLoadedAPI
DelayLoadFailureHook
api-ms-win-core-url-l1-1-0.dll
api-ms-win-core-delayload-l1-1-1.dll
api-ms-win-core-delayload-l1-1-0.dll
QueueUserWorkItem
FileTimeToDosDateTime
PathCombineA
PathRemoveFileSpecA
PathAppendA
PathAppendW
api-ms-win-core-threadpool-legacy-l1-1-0.dll
api-ms-win-core-shlwapi-legacy-l1-1-0.dll
GlobalFree
api-ms-win-core-heap-obsolete-l1-1-0.dll
InitializeCriticalSection
WaitForMultipleObjectsEx
ResetEvent
WakeAllConditionVariable
SleepConditionVariableSRW
GetModuleHandleExA
HeapReAlloc
ApiSetQueryApiSetPresence
api-ms-win-core-apiquery-l1-1-0.dll
floor
memcmp
memcpy
memmove
memset
strcmp
wcscmp
WEVT_TEMPLATE
JSON_RESPONSE(JSON_RESPONSE_ONE_STORE_CLIENT_DATA_URLS+JSON_RESPONSE_STORE_ENDPOINT_EXTENSION_URLS4JSON_RESPONSE_INTERNAL_STORE_ENDPOINT_EXTENSION_URLS
JSON_RESPONSE_MODAL_FLOW_SIZES
VS_VERSION_INFO
StringFileInfo
040904B0
CompanyName
Microsoft Corporation
FileDescription
Microsoft Store Runtime DLL
FileVersion
10.0.22621.580 (WinBuild.160101.0800)
InternalName
Microsoft Store Runtime DLL
LegalCopyright
 Microsoft Corporation. All rights reserved.
OriginalFilename
Windows.ApplicationModel.Store.dll
ProductName
Microsoft
 Windows
 Operating System
ProductVersion
10.0.22621.580
VarFileInfo
Translation
CHANh
Microsoft-Windows-Store/Operational
TEMPx
EventData
Message
Function
Error Code
Source
Line Number
Message
Function
Error Code
Source
Line Number
TEMPx
EventData
Message
Function
Error Code
Source
Line Number
Message
Function
Error Code
Source
Line Number
EventData
Process Name
Module Name
Build Name
Process Name
Module Name
Build Name
EventData
EventData
Message
Line Number
File Name
Member Name
Message
Line Number
File Name
Member Name
EventData
Message
Line Number
File Name
Function
Error Code
Message
Line Number
File Name
Function
Error Code
EventData
Message
Line Number
File Name
Function
Exception Details
Message
Line Number
File Name
Function
Exception Details
PRVA\
Windows-ApplicationModel-Store-SDK
OPCO 
win:Info
Error
Error
Warning
Warning
Verbose
Verbose
win:Error
win:Warning
win:Informational
win:Verbose
StorefrontClientErrorTask
StorefrontClientExceptionTask
StorefrontClientWarningTask
StorefrontClientInformationTask
StorefrontClientVerboseTask
ModuleLoaded
LogMessage
StorePurchaseAppMessage
StorefrontClient
Messages
StorePurchaseApp
    "MDCollections": "https://collections.mp.microsoft.com/",
    "MDGetAppReceiptsDesktop": "https://licensingwindows.mp.microsoft.com/Licensing/License/AcquireReceipt/6.2/0?productId={productId}&receiptType={receiptType}",
    "MDGetAppReceiptsMobile": "https://licensingphone.mp.microsoft.com/v9/purchases/appreceipts?os=8.10.12400.0&requestTime={requestTime}&cc={cc}&lang={lang}&parentProductId={parentProductId}&installedPublisherId={installedPublisherId}",
    "MDGetOneProductReceiptMobile": "https://licensingphone.mp.microsoft.com/v9/purchases/receipts?os=8.10.12400.0&requestTime={requestTime}&cc={cc}&lang={lang}&parentProductId={parentProductId}&featureName={featureName}&installedPublisherId={installedPublisherId}",
    "OneStoreAuthenticationDomain": "www.microsoft.com",
    "LinkUriFormat": "https://www.microsoft.com/store/{idType}/{id}",
    "MDDisplayCatalog": "https://displaycatalog.mp.microsoft.com/",
    "MDPurchase": "https://purchase.mp.microsoft.com"
    {
        "__COMMENT__": "#0 purchase StoreID with extended response",
        "Index": 0,
        "BodyBufferMaxSize": 300,
        "InvokePurchaseFlow": true,
        "RequiresCapability": "xboxXDK",
        "RequireValidLicense": false,
        "RefreshLicenses": true,
        "BodyTemplate": {
            "StoreId": {
                "__tag": true,
                "key": "StoreId",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#1 invoke background task",
        "Index": 1,
        "BodyBufferMaxSize": 300,
        "UseBackgroundTask": true,
        "AnonymousRequest": true,
        "RequiresCapability": "previewStore",
        "RequireValidLicense": false,
        "BodyTemplate": {
            "AppServiceName": {
                "__tag": true,
                "key": "AppServiceName",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#2 TVOD",
        "Index": 2,
        "BodyBufferMaxSize": 10000,
        "InvokePurchaseFlow": true,
        "RequireValidLicense": false,
        "BodyTemplate": {
            "Offer": {
                "__tag": true,
                "key": "Offer",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#3 purchase StoreID with force retail sandbox without license refresh",
        "Index": 3,
        "BodyBufferMaxSize": 300,
        "InvokePurchaseFlow": true,
        "RequireValidLicense": false,
        "ForceRetailSandbox": true,
        "BodyTemplate": {
            "StoreId": {
                "__tag": true,
                "key": "StoreId",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#4 Force license refresh for all online running licenses",
        "Index": 4,
        "AnonymousRequest": true,
        "RequiresCapability": "storeAppInstallation",
        "RequireValidLicense": false,
        "RefreshLicenses": true
    },
    {
        "__COMMENT__": "#5 Acquire a device license - RS2+ Only",
        "Index": 5,
        "URI": "https://purchase.mp.microsoft.com/v7.0/users/me/orders",
        "DoPost": true,
        "AuthType": 4,
        "BodyBufferMaxSize": 10000,
        "RequiresCapability": "storeAppInstallation",
        "RequireValidLicense": false,
        "RefreshLicenses": true,
        "BodyTemplate": {
            "clientContext": {
                "client": "UniversalStoreInApp",
                "deviceFamily": {
                    "__tag": true,
                    "key": "deviceFamily",
                    "type": "string"
                }
            },
            "language": {
                "__tag": true,
                "key": "locale",
                "type": "string"
            },
            "market": {
                "__tag": true,
                "key": "market",
                "type": "string"
            },
            "orderId": {
                "__tag": true,
                "key": "orderId",
                "type": "string"
            },
            "items": [
                {
                    "productId": {
                        "__tag": true,
                        "key": "productId",
                        "type": "string"
                    },
                    "skuId": {
                        "__tag": true,
                        "key": "skuId",
                        "type": "string"
                    },
                    "availabilityId": {
                        "__tag": true,
                        "key": "availabilityId",
                        "type": "string"
                    },
                    "quantity": "1",
                    "devOfferId": {
                        "__tag": true,
                        "key": "devOfferId",
                        "type": "string"
                    }
                }
            ],
            "orderState": "Purchased",
            "alwaysEnforceDoublePurchasePolicy": true
        }
    },
    {
        "__COMMENT__": "#6 Acquire a license token -  RS2+ Version",
        "Index": 6,
        "URI": "https://licensing.mp.microsoft.com/v8.0/licenseToken",
        "DoPost": true,
        "AuthType": 4,
        "BodyBufferMaxSize": 10000,
        "BodyTemplate": {
            "parentProductId": {
                "__tag": true,
                "key": "parentProductId",
                "type": "string"
            },
            "enforceSellableBy": true,
            "relatedProductIds": {
                "__tag": true,
                "key": "relatedProductIds",
                "type": "string"
            },
            "customDeveloperString": {
                "__tag": true,
                "key": "customDeveloperString",
                "type": "string"
            },
            "beneficiaries": {
                "__tag": true,
                "type": "beneficiaryArray"
            }
        },
        "UserTokenTypes": 3,
        "OmitAuthTokenPrefix": true
    },
    {
        "__COMMENT__": "#7 Device token based monetization apis - RS2+ Only",
        "Index": 7,
        "URI": "https://manage.devcenter.microsoft.com/v1.0/my/storeextension/device",
        "DoPost": true,
        "AuthType": 4,
        "BodyBufferMaxSize": 10000,
        "BodyTemplate": {
            "applicationId": {
                "__tag": true,
                "key": "parentProductId",
                "type": "string"
            },
            "market": {
                "__tag": true,
                "key": "market",
                "type": "string"
            },
            "locale": {
                "__tag": true,
                "key": "locale",
                "type": "string"
            },
            "deviceFamily": {
                "__tag": true,
                "key": "deviceFamily",
                "type": "string"
            },
            "deviceMoid": {
                "__tag": true,
                "key": "deviceMoid",
                "type": "string"
            },
            "deviceOemid": {
                "__tag": true,
                "key": "deviceOemid",
                "type": "string"
            },
            "deviceScmid": {
                "__tag": true,
                "key": "deviceScmid",
                "type": "string"
            },
            "type": {
                "__tag": true,
                "key": "type",
                "type": "string"
            },
            "parameters": {
                "__tag": true,
                "key": "parameters",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#8 Store User token based monetization apis",
        "Index": 8,
        "URI": "https://manage.devcenter.microsoft.com/v1.0/my/storeextension/user",
        "DoPost": true,
        "BodyBufferMaxSize": 10000,
        "BodyTemplate": {
            "applicationId": {
                "__tag": true,
                "key": "parentProductId",
                "type": "string"
            },
            "market": {
                "__tag": true,
                "key": "market",
                "type": "string"
            },
            "locale": {
                "__tag": true,
                "key": "locale",
                "type": "string"
            },
            "deviceFamily": {
                "__tag": true,
                "key": "deviceFamily",
                "type": "string"
            },
            "deviceMoid": {
                "__tag": true,
                "key": "deviceMoid",
                "type": "string"
            },
            "deviceOemid": {
                "__tag": true,
                "key": "deviceOemid",
                "type": "string"
            },
            "deviceScmid": {
                "__tag": true,
                "key": "deviceScmid",
                "type": "string"
            },
            "type": {
                "__tag": true,
                "key": "type",
                "type": "string"
            },
            "parameters": {
                "__tag": true,
                "key": "parameters",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#9 Lookup ProductId from PackageFamilyName",
        "Index": 9,
        "URI": "https://displaycatalog.mp.microsoft.com/v7.0/products/lookup{market:market}{languages:languages}{packageFamilyName:value}&fieldsTemplate=empty&alternateid=PackageFamilyName",
        "URIBufferMaxSize": 1024,
        "AnonymousRequest": true,
        "RequireValidLicense": false
    },
    {
        "__COMMENT__": "#10 StoreList Query",
        "Index": 10,
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/StoreList/{storeListId}{market:market}{languages:languages}{locale:locale}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{top:$top}{continuationToken:continuationToken}{storeListItemTypeFilter:storeListItemTypeFilter}{productKindFilter:productKindFilter}{categoryFilter:categoryFilter}{targetDeviceFamily:targetDeviceFamily}",
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#11 Search for products by query",
        "Index": 11,
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/sdk/search{market:market}{languages:languages}{locale:locale}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{top:$top}{continuationToken:continuationToken}{productKindFilter:productKindFilter}{categoryFilter:categoryFilter}{query:query}",
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#12 Given a set of product IDs, return the average ratings and counts",
        "Index": 12,
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/sdk/products/ratingsAverage{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{productIds:productIds}{displayMode:displayMode}",
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#13 ContentId/KeyId lookup by ProductId for ParentProduct",
        "Index": 13,
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/products/contentId{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{productIds:productIds}",
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#14 ContentId/KeyId lookup by ProductId NO ParentProduct",
        "Index": 14,
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/products/contentId{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{productIds:productIds}&parentProductId=",
        "RequiresCapability": "previewStore",
        "RequireValidLicense": false,
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#15 Invoke In App Redeem using Purchase Flow",
        "Index": 15,
        "BodyBufferMaxSize": 10000,
        "InvokePurchaseFlow": true,
        "AnonymousRequest": true,
        "RequireValidLicense": false,
        "BodyTemplate": {
            "ModalFlow": "redeem",
            "parentProductId": {
                "__tag": true,
                "key": "parentProductId",
                "type": "string"
            },
            "OptionalData": {
                "__tag": true,
                "key": "optionalData",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#16 Invoke In App Rating & Review using Purchase Flow",
        "Index": 16,
        "BodyBufferMaxSize": 10000,
        "InvokePurchaseFlow": true,
        "AnonymousRequest": true,
        "BodyTemplate": {
            "ModalFlow": "writeRatingsAndReview",
            "ParentProductId": {
                "__tag": true,
                "key": "parentProductId",
                "type": "string"
            },
            "PFN": {
                "__tag": true,
                "key": "PFN",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#17 StoreList Query with previewStore",
        "Index": 17,
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/StoreList/{storeListId}{market:market}{languages:languages}{locale:locale}{deviceFamily:deviceFamily}{top:$top}{continuationToken:continuationToken}{storeListItemTypeFilter:storeListItemTypeFilter}{productKindFilter:productKindFilter}{categoryFilter:categoryFilter}{targetDeviceFamily:targetDeviceFamily}&parentProductId=",
        "RequiresCapability": "previewStore",
        "RequireValidLicense": false,
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#18 Given a set of product IDs, return the average ratings and counts (previewStore)",
        "Index": 18,
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/sdk/products/ratingsAverage{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{productIds:productIds}{displayMode:displayMode}&parentProductId=",
        "RequiresCapability": "previewStore",
        "RequireValidLicense": false,
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#19 Ad SDK to get Mixer Ad data for Inline Purchase experience",
        "Index": 19,
        "URI": "https://adbroker.mp.dse.microsoft.com/v1/adbroker/srtb2",
        "DoPost": true,
        "BodyBufferMaxSize": 10000,
        "RequireValidLicense": false,
        "BodyTemplate": {
            "bidRequest": {
                "__tag": true,
                "key": "bidRequest",
                "type": "string"
            },
            "storeSdkAttributes": {
                "languages": {
                    "__tag": true,
                    "key": "languages",
                    "type": "string"
                },
                "market": {
                    "__tag": true,
                    "key": "market",
                    "type": "string"
                },
                "deviceMoId": {
                    "__tag": true,
                    "key": "deviceMoid",
                    "type": "string"
                },
                "deviceScmId": {
                    "__tag": true,
                    "key": "deviceScmid",
                    "type": "string"
                },
                "deviceOemId": {
                    "__tag": true,
                    "key": "deviceOemid",
                    "type": "string"
                },
                "deviceFamily": {
                    "__tag": true,
                    "key": "deviceFamily",
                    "type": "string"
                }
            }
        },
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#20 Get list of PTI devices for a user",
        "Index": 20,
        "URI": "https://pti.store.microsoft.com/v1/pti/devices{market:market}{languages:languages}{productId:productId}{skuId:skuId}",
        "RequiresCapability": "storeAppInstallation",
        "RequireValidLicense": false
    },
    {
        "__COMMENT__": "#21 Push product to device",
        "Index": 21,
        "URI": "https://pti.store.microsoft.com/v1/pti/push{market:market}",
        "DoPost": true,
        "RequiresCapability": "storeAppInstallation",
        "RequireValidLicense": false,
        "BodyTemplate": {
            "ProductId": {
                "__tag": true,
                "key": "ProductId",
                "type": "string"
            },
            "SkuId": {
                "__tag": true,
                "key": "SkuId",
                "type": "string"
            },
            "DeviceId": {
                "__tag": true,
                "key": "DeviceId",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#22 AAD token based monetization apis - RS4+ Only",
        "Index": 22,
        "URI": "https://manage.devcenter.microsoft.com/v1.0/my/storeextension/aad",
        "DoPost": true,
        "AuthType": 2,
        "BodyBufferMaxSize": 10000,
        "BodyTemplate": {
            "applicationId": {
                "__tag": true,
                "key": "parentProductId",
                "type": "string"
            },
            "market": {
                "__tag": true,
                "key": "market",
                "type": "string"
            },
            "locale": {
                "__tag": true,
                "key": "locale",
                "type": "string"
            },
            "deviceFamily": {
                "__tag": true,
                "key": "deviceFamily",
                "type": "string"
            },
            "deviceMoid": {
                "__tag": true,
                "key": "deviceMoid",
                "type": "string"
            },
            "deviceOemid": {
                "__tag": true,
                "key": "deviceOemid",
                "type": "string"
            },
            "deviceScmid": {
                "__tag": true,
                "key": "deviceScmid",
                "type": "string"
            },
            "type": {
                "__tag": true,
                "key": "type",
                "type": "string"
            },
            "parameters": {
                "__tag": true,
                "key": "parameters",
                "type": "string"
            }
        },
        "OmitAuthTokenPrefix": true
    },
    {
        "__COMMENT__": "#23 SFDS Suggestion Service - RS5+ Only",
        "Index": 23,
        "URI": "https://sfdataservice.microsoft.com/smartinstall/v1.0/suggestions/suggest",
        "DoPost": true,
        "AuthType": 1,
        "BodyBufferMaxSize": 20000,
        "RequiresCapability": "storeAppInstallation",
        "RequireValidLicense": false,
        "BodyTemplate": {
            "data": {
                "__tag": true,
                "key": "data",
                "type": "string"
            }
        },
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#24 Invoking PurchaseApp (SXH) for the Smart Install scenario - RS5+ Only",
        "Index": 24,
        "BodyBufferMaxSize": 10000,
        "InvokePurchaseFlow": true,
        "AnonymousRequest": true,
        "RequiresCapability": "storeAppInstallation",
        "RequireValidLicense": false,
        "BodyTemplate": {
            "ModalFlow": "smartInstall",
            "data": {
                "__tag": true,
                "key": "data",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "Get campaign ID for user or device (RS5+)",
        "Index": 25,
        "URI": "https://storeedgefd.dsx.mp.microsoft.com/v8.0/campaigns/cid{parentProductId:productId}",
        "FallbackToDeviceAuth": true
    },
    {
        "__COMMENT__": "Get campaign ID for device (RS4+)",
        "Index": 26,
        "URI": "https://storeedgefd.dsx.mp.microsoft.com/v8.0/campaigns/cid{parentProductId:productId}",
        "AuthType": 4
    },
    {
        "__COMMENT__": "Get Microsoft Accrued for user or device (RS5+)",
        "Index": 27,
        "URI": "https://storeedgefd.dsx.mp.microsoft.com/v8.0/campaigns/isMicrosoftAccrued{parentProductId:productId}",
        "FallbackToDeviceAuth": true
    },
    {
        "__COMMENT__": "Get Microsoft Accrued for device (RS4+)",
        "Index": 28,
        "URI": "https://storeedgefd.dsx.mp.microsoft.com/v8.0/campaigns/isMicrosoftAccrued{parentProductId:productId}",
        "AuthType": 4
    },
    {
        "__COMMENT__": "#29 - Digital attach redeem",
        "Index": 29,
        "BodyBufferMaxSize": 1024,
        "InvokePurchaseFlow": true,
        "RequireValidLicense": false,
        "BodyTemplate": {
          "StoreId": {
            "__tag": true,
            "key": "StoreId",
            "type": "string"
          },
          "isDigitalAttachment": true,
          "attachRecordId": {
            "__tag": true,
            "key": "attachRecordId",
            "type": "string"
          },
          "hostType": {
            "__tag": true,
            "key": "hostType",
            "type": "string"
          }
      }
    }
    {
        "__COMMENT__": "#0 - Get Parent Product",
        "Index": 0,
        "URI": "https://displaycatalog.mp.microsoft.com/v7.0/products/{parentProductId}{market:market}{languages:languages}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}&fieldsTemplate=StoreSDK",
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#1 - Get User Collection for Parent Product",
        "Index": 1,
        "URI": "https://collections.md.mp.microsoft.com/v7.0/collections/sdkQuery",
        "DoPost": true,
        "BodyTemplate": {
            "validityType": "Valid",
            "beneficiaries": {
                "__tag": true,
                "type": "goldenBeneficiaryArray"
            },
            "productSkuIds": [
                {
                    "productId": {
                        "__tag": true,
                        "key": "parentProductId",
                        "type": "string"
                    }
                }
            ]
        },
        "OmitAuthTokenPrefix": true
    },
    {
        "__COMMENT__": "#2 - Get User Collection for Products",
        "Index": 2,
        "URI": "https://collections.md.mp.microsoft.com/v7.0/collections/sdkQuery",
        "DoPost": true,
        "RequireValidLicense": false,
        "BodyTemplate": {
            "validityType": "Valid",
            "beneficiaries": {
                "__tag": true,
                "type": "goldenBeneficiaryArray"
            },
            "productSkuIds": {
                "__tag": true,
                "key": "productSkuIds",
                "type": "array",
                "isOptional": true
            },
            "entitlementFilters": {
                "__tag": true,
                "key": "entitlementFilters",
                "type": "array",
                "isOptional": true
            }
        },
        "OmitAuthTokenPrefix": true
    },
    {
        "__COMMENT__": "#3 - Get Products, No Parent (No license needed)",
        "Index": 3,
        "URI": "https://displaycatalog.mp.microsoft.com/v7/products{productIdsWithCommas:bigIds}{market:market}{languages:languages}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}{actionFilter:actionFilter:OPTIONAL}&fieldsTemplate=StoreSDK",
        "RequireValidLicense": false,
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#4 - Get Products From Parent (Must have a valid license)",
        "Index": 4,
        "URI": "https://displaycatalog.mp.microsoft.com/v7/products{productIdsWithCommas:bigIds}{market:market}{languages:languages}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}{actionFilter:actionFilter:OPTIONAL}&fieldsTemplate=StoreSDK",
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#5 - Get User Collection for Parent Product by Family",
        "Index": 5,
        "URI": "https://collections.md.mp.microsoft.com/v7.0/collections/sdkQuery",
        "DoPost": true,
        "BodyTemplate": {
            "validityType": "Valid",
            "beneficiaries": {
                "__tag": true,
                "type": "goldenBeneficiaryArray"
            },
            "maxPageSize": {
                "__tag": true,
                "key": "maxPageSize",
                "type": "number",
                "defaultValue": 25
            },
            "continuationToken": {
                "__tag": true,
                "key": "continuationToken",
                "type": "string",
                "isOptional": true
            },
            "includeRelationship": {
                "__tag": true,
                "key": "includeRelationship",
                "type": "object"
            },
            "entitlementFilters": {
                "__tag": true,
                "key": "entitlementFilters",
                "type": "array",
                "isOptional": true
            }
        },
        "OmitAuthTokenPrefix": true
    },
    {
        "__COMMENT__": "#6 - Consume Consumable",
        "Index": 6,
        "URI": "https://collections.md.mp.microsoft.com/v7.0/collections/consume",
        "DoPost": true,
        "BodyTemplate": {
            "beneficiary": {
                "__tag": true,
                "type": "goldenBeneficiary",
                "isOptional": true
            },
            "productId": {
                "__tag": true,
                "key": "consumableProductId",
                "type": "string"
            },
            "trackingId": {
                "__tag": true,
                "key": "trackingId",
                "type": "string"
            },
            "removeQuantity": {
                "__tag": true,
                "key": "quantity",
                "type": "number",
                "isOptional": true
            }
        },
        "OmitAuthTokenPrefix": true
    },
    {
        "__COMMENT__": "#7 - Get Customer Purchase Id",
        "Index": 7,
        "URI": "https://purchase.mp.microsoft.com/v7.0/users/me/keys",
        "DoPost": true,
        "BodyTemplate": {
            "serviceTicket": {
                "__tag": true,
                "key": "serviceTicket",
                "type": "string"
            },
            "publisherUserId": {
                "__tag": true,
                "key": "publisherUserId",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#8 - Get Customer Collections Id",
        "Index": 8,
        "URI": "https://collections.mp.microsoft.com/v7.0/beneficiaries/me/keys",
        "DoPost": true,
        "BodyTemplate": {
            "serviceTicket": {
                "__tag": true,
                "key": "serviceTicket",
                "type": "string"
            },
            "publisherUserId": {
                "__tag": true,
                "key": "publisherUserId",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#9 - Get Products by Family from Parent",
        "Index": 9,
        "URI": "https://displaycatalog.mp.microsoft.com/v7/products/lookup{parentProductId:value}{market:market}{languages:languages}{itemCount:$top}{skipCount:$skip}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}&fieldsTemplate=StoreSDK&actionFilter=Purchase&alternateId=SellableBy",
        "UseAuthIfAvailable": true
    }
    "writeRatingsAndReview": {
        "Width": 456,
        "Height": 384
    },
    "smartInstall": {
        "Width": 640,
        "Height": 560
    }
JSON_RESPONSE
WEVT_TEMPLATE
en-US
{p",L
<[^;l}I
ImIPv-
Ehd(]
G\2x6~2
)-?G5,
/!+jE
7 L-=
>`P5z
0~8NK
[#VLhh
OwW(V
S1B 0
AIY2:
<kCtO
# KH<
&sPx$
B?/2`&
T\ZCaa~P
maGucV
*Wp^1Y
NOWM|
>#&gxL
['yPo
L}5Hp-
dKuNt
qk5j7
,q=y#
!O;Db
3n{fMs/
8M80`
z"#<U
"Y'_Z
^w{&W
w:R?[
OOKQ7
;\^Sl
WrIE@
)e<kW
ig#8_
yF@#/)M{
oh\u6
E`]jz3
Mr@2%
GP&Nb
l-X|Zq
Jwb=[$
1Qkw^uO
 |oC1
K`|5J
Lmt5Rr
{y>Jc
dW1?VC
oeGb 
AW] n
9o`_E
%qx*s
!*]rO
gl\#&'.
$-Kuh
u1'b.G
r9C?,
Washington1
Redmond1
Microsoft Corporation1(0&
Microsoft Code Signing PCA 20100
220512204706Z
230511204706Z0t1
Washington1
Redmond1
Microsoft Corporation1
Microsoft Corporation0
/+I}j
:Z/0T
I0G1-0+
$Microsoft Ireland Operations Limited1
230865+4705630
O0M0K
Ehttp://crl.microsoft.com/pki/crl/products/MicCodSigPCA_2010-07-06.crl0Z
N0L0J
>http://www.microsoft.com/pki/certs/MicCodSigPCA_2010-07-06.crt0
uEA-)
Washington1
Redmond1
Microsoft Corporation1200
)Microsoft Root Certificate Authority 20100
100706204017Z
250706205017Z0~1
Washington1
Redmond1
Microsoft Corporation1(0&
Microsoft Code Signing PCA 20100
KnILk
O0M0K
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
N0L0J
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
1http://www.microsoft.com/PKI/docs/CPS/default.htm0@
Legal_Policy_Statement
% moa
#Vx"&6
7Z>@B1
Washington1
Redmond1
Microsoft Corporation1(0&
Microsoft Code Signing PCA 2010
,inmFMnjTKKPzkdih8VTJiYJiV6JhQ7dQDZ7sYIbvj14=0Z
"Microsoft Window
 http://www.microsoft.com/windows0
DeQ6[
20220805225206.392Z0
Washington1
Redmond1
Microsoft Corporation1)0'
 Microsoft Operations Puerto Rico1&0$
Thales TSS ESN:0A56-E329-4D4D1%0#
Microsoft Time-Stamp Service
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
220302185122Z
230511185122Z0
Washington1
Redmond1
Microsoft Corporation1)0'
 Microsoft Operations Puerto Rico1&0$
Thales TSS ESN:0A56-E329-4D4D1%0#
Microsoft Time-Stamp Service0
Io00Ck
!vr})
g{N+3
X0V0T
Nhttp://www.microsoft.com/pkiops/crl/Microsoft%20Time-Stamp%20PCA%202010(1).crl0l
`0^0\
Phttp://www.microsoft.com/pkiops/certs/Microsoft%20Time-Stamp%20PCA%202010(1).crt0
9omXZ
GvuIU
Washington1
Redmond1
Microsoft Corporation1200
)Microsoft Root Certificate Authority 20100
210930182225Z
300930183225Z0|1
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
q\Q17
&S|9a
!]_0t
U0S0Q
3http://www.microsoft.com/pkiops/Docs/Repository.htm0
O0M0K
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
N0L0J
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
>NGdx
fg:SM
xSu$W
as.,k{n?,
J>f;O
!TkjE
Washington1
Redmond1
Microsoft Corporation1)0'
 Microsoft Operations Puerto Rico1&0$
Thales TSS ESN:0A56-E329-4D4D1%0#
Microsoft Time-Stamp Service
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
20220805200405Z
20220806200405Z0w0=
1/0-0
1(0&0
g*N@G
WPvj,
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 2010
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 2010
