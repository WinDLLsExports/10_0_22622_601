!This program cannot be run in DOS mode.
.text
`.rsrc
@.reloc
*Bre1
+&*.s
v4.0.30319
#Strings
#GUID
#Blob
G8AP_}
:#;#<#=(>(?(@1A2
<>9__11_0
<get_IsSaveTransactionRequired>b__11_0
<>c__DisplayClass32_0
<>9__13_0
<get_IsLoadTransactionRequired>b__13_0
<>c__DisplayClass33_0
<GetEnumerator>b__25_0
<>9__5_0
<.ctor>b__5_0
<get_Keys>b__6_0
<>9__27_0
<GetInstanceOwners>b__27_0
<get_Values>b__8_0
<>9__69_0
<Free>b__69_0
<>9__0
<SelectSignaledEvents>b__0
<RemoveHandleFromEvents>b__0
param0
<>9__25_1
<GetEnumerator>b__25_1
<>9__6_1
<get_Keys>b__6_1
<>9__27_1
<GetInstanceOwners>b__27_1
<>9__8_1
<get_Values>b__8_1
IEnumerable`1
IEquatable`1
SignalGate`1
Queue`1
Stack`1
SynchronizedPool`1
Action`1
ICollection`1
ReadOnlyCollection`1
EqualityComparer`1
IEnumerator`1
HashSet`1
CompletedAsyncResult`1
InstancePersistenceEvent`1
IList`1
param1
get_Item1
Int32
Func`2
Tuple`2
ReadOnlyDictionaryInternal`2
Action`2
KeyValuePair`2
IDictionary`2
param2
get_Item2
Int64
<Module>
InternalSR
get_WAS
value__
get_InstanceData
set_InstanceData
instanceData
get_UninitializedCannotHaveData
GetObjectData
get_Metadata
set_Metadata
get_SerializedMetadata
set_SerializedMetadata
get_InstanceMetadata
set_InstanceMetadata
ReadInstanceMetadata
instanceMetadata
get_InstanceOwnerMetadata
set_InstanceOwnerMetadata
ReadInstanceOwnerMetadata
get_SerializableInstanceOwnerMetadata
set_SerializableInstanceOwnerMetadata
serializableInstanceOwnerMetadata
ownerMetadata
get_InstanceKeyMetadata
set_InstanceKeyMetadata
ReadInstanceKeyMetadata
associatedInstanceKeyMetadata
completedInstanceKeyMetadata
EmptyMetadata
emptyMetadata
metadata
mscorlib
InstanceCompleteSpecific
KeyCompleteSpecific
CannotAcquireLockSpecific
InstanceCollisionSpecific
KeyCollisionSpecific
InstanceOwnerSpecific
InstanceHandleConflictSpecific
InstanceLockLostSpecific
InstanceNotReadySpecific
KeyNotReadySpecific
System.Collections.Generic
ThrottleMetric
SetCheckSyncValidationFunc
WaitAsync
get_Id
set_Id
get_InstanceId
set_InstanceId
get_ConflictingInstanceId
set_ConflictingInstanceId
conflictingInstanceId
instanceId
get_CannotCreateContextWithNullId
get_InstanceOwnerId
set_InstanceOwnerId
instanceOwnerId
ownerId
EndLoad
EndOnLoad
BeginOnLoad
BeginLoad
isLoad
TracePayload
get_BindReclaimSucceeded
get_HandleFreed
ThrowIfNotLocked
Interlocked
get_IsSignaled
set_IsSignaled
get_AutomaticDisassociationEnabled
set_AutomaticDisassociationEnabled
automaticDisassociationEnabled
get_IsEtwProviderEnabled
Canceled
cancellationHandlerCalled
get_IsSignalled
OnBindReclaimed
onBindReclaimed
get_IsPotentiallyAbandoned
Prepared
get_InstanceRequired
get_IsLoadTransactionRequired
get_IsSaveTransactionRequired
get_OwnerRequired
commandProcessed
get_KeyNotAssociated
get_KeyAlreadyAssociated
get_KeyAlreadyUnassociated
InitialMetadataCannotBeDeleted
ThrowIfCompleted
get_InstanceOperationRequiresNotCompleted
get_KeyNotCompleted
get_KeyAlreadyCompleted
get_ExecuteMustBeNested
get_CancelRequested
set_CancelRequested
Committed
get_HandleFreedBeforeInitialized
ThrowIfUninitialized
get_InstanceOperationRequiresNotUninitialized
get_LoadOpFreeKeyRequiresAcceptUninitialized
get_LoadOpKeyMustBeValid
get_IsValid
set_IsValid
invalid
get_InstanceKeyRequiresValidGuid
<SerializableInstanceOwnerMetadata>k__BackingField
<InstanceId>k__BackingField
<ConflictingInstanceId>k__BackingField
<InstanceOwnerId>k__BackingField
<IsSignaled>k__BackingField
<CancelRequested>k__BackingField
<IsValid>k__BackingField
<CurrentCommand>k__BackingField
<IsBoundToInstance>k__BackingField
<InstanceHandle>k__BackingField
<ConflictingHandle>k__BackingField
<MarkerWaitHandle>k__BackingField
<Name>k__BackingField
<CommandName>k__BackingField
<Store>k__BackingField
<State>k__BackingField
<InstanceState>k__BackingField
<InstanceKeyState>k__BackingField
<IsComplete>k__BackingField
<Value>k__BackingField
<AcquirePending>k__BackingField
<OperationPending>k__BackingField
<NonConflicting>k__BackingField
<IsHandleDoomedByRollback>k__BackingField
<OwnerToken>k__BackingField
<IsViewFrozen>k__BackingField
<Version>k__BackingField
<InstanceVersion>k__BackingField
<HostTransaction>k__BackingField
<WaitForHostTransaction>k__BackingField
<IsHostTransaction>k__BackingField
<Reason>k__BackingField
<Owner>k__BackingField
<InstanceOwner>k__BackingField
<DefaultInstanceOwner>k__BackingField
<InstanceOwnerIds>k__BackingField
<Options>k__BackingField
<InstanceOwners>k__BackingField
<CurrentTransactionalAsyncResult>k__BackingField
<RootAsyncResult>k__BackingField
<LastAsyncResult>k__BackingField
<TooLateToEnlist>k__BackingField
<CurrentExecutionContext>k__BackingField
<View>k__BackingField
<InstanceView>k__BackingField
<InstanceDataConsistency>k__BackingField
<InstanceMetadataConsistency>k__BackingField
<InstanceOwnerMetadataConsistency>k__BackingField
<InstanceKeyMetadataConsistency>k__BackingField
<InstanceKeysConsistency>k__BackingField
<InstanceKey>k__BackingField
DoEndCommand
GenericInstanceCommand
InstancePersistenceCommand
OutsideTransactionalCommand
AfterCommand
get_CurrentCommand
set_CurrentCommand
executeCalledByCurrentCommand
ProviderDoesNotSupportCommand
EndTryCommand
OnTryCommand
BeginTryCommand
onTryCommand
command
TryCompleteBind
FinishBind
StartPotentialBind
CancelBind
inProgressBind
FaultBind
StartBind
SynchronizationKind
Unbind
InstanceBound
StringTraceRecord
Workflow45Namespace
workflow45Namespace
XNamespace
PersistenceMetadataNamespace
persistenceMetadataNamespace
get_ActivitiesCommandNamespace
activitiesCommandNamespace
WorkflowServiceNamespace
workflowServiceNamespace
baseNamespace
activationNamespace
variablesNamespace
endpointsNamespace
get_ActivitiesEventNamespace
activitiesEventNamespace
outputNamespace
WorkflowNamespace
workflowNamespace
get_Trace
EtwDiagnosticTrace
ExceptionTrace
get_Service
service
get_InstanceStoreBoundSameVersionTwice
LoadedInstance
CompletedInstance
PersistedInstance
BindInstance
CreateInstance
get_ValidateUnlockInstance
ThrowIfNoInstance
get_ContextMustBeBoundToInstance
get_IsBoundToInstance
set_IsBoundToInstance
get_AlreadyBoundToInstance
get_ContextAlreadyBoundToInstance
get_InProgressHandlesPerInstance
inProgressHandlesPerInstance
get_InstanceOperationRequiresInstance
instance
InstanceHandleReference
EnqueueReference
WeakReference
weakReference
CancelReference
CheckOldestReference
reference
InstancePersistence
source
get_TryCommandCannotExecuteSubCommandsAndReduce
GetHashCode
WriteEventErrorCode
EventResetMode
NotifyHandleFree
handleToFree
ToMessage
message
expectedStage
ArgumentOutOfRange
CompareExchange
Invoke
ICancelable
IEnumerable
IDisposable
get_InstanceHandle
set_InstanceHandle
OnFreeInstanceHandle
PrepareInstanceHandle
CreateInstanceHandle
initialInstanceHandle
OnNewInstanceHandle
instanceHandle
RuntimeTypeHandle
get_ConflictingHandle
set_ConflictingHandle
GetTypeFromHandle
AsyncWaitHandle
get_MarkerWaitHandle
set_MarkerWaitHandle
markerWaitHandle
waitHandle
handle
IsVolatile
EnlistVolatile
IPersistencePipelineModule
module
XName
get_Name
set_Name
SerializableInstanceOwnerMetadataName
ConflictingInstanceIdName
InstanceOwnerIdName
get_CommandName
set_CommandName
commandName
methodName
CommandNameName
SetScopeName
scopeName
get_SiteName
siteName
GetName
InstanceKeyName
RemainingTime
System.Runtime
CompleteOne
PersistencePipeline
pipeline
Clone
TransactionSignalScope
CreateTransactionScope
CompleteTransactionScope
transactionScope
OutsideInstanceExecutionScope
scope
get_InstanceType
instanceType
NullAssignedToValueType
IncorrectValueType
get_ActivationType
activationType
GetType
get_WorkflowHostType
workflowHostType
System.Transactions.IEnlistmentNotification.Prepare
OnPrepare
Where
System.Core
SRCore
RunLoopCore
get_Store
set_Store
QueriedInstanceStore
get_OwnerBelongsToWrongStore
get_ContextNotFromThisStore
store
get_Culture
set_Culture
resourceCulture
System.IDisposable.Dispose
PrepareForReuse
SignalGate
Validate
get_LastUpdate
lastUpdate
get_State
set_State
get_AsyncState
get_InstanceState
set_InstanceState
get_InvalidInstanceState
TransactionSignalState
finalState
newState
get_InstanceKeyState
set_InstanceKeyState
state
allowDelete
OnIOComplete
NotifyMarkerComplete
get_IsComplete
set_IsComplete
OnWaitComplete
waitComplete
complete
CompilerGeneratedAttribute
FriendAccessAllowedAttribute
GuidAttribute
ExternalResourceAttribute
UnverifiableCodeAttribute
NeutralResourcesLanguageAttribute
CacheAttribute
DebuggableAttribute
XamlVisibleAttribute
ComVisibleAttribute
AssemblyKeyFileAttribute
AssemblyTitleAttribute
ThrottleAttribute
SecurityNoteAttribute
QueueAttribute
SynchronizationPrimitiveAttribute
GuaranteeNonBlockingAttribute
NonThrowingAttribute
SecurityCriticalAttribute
KnownXamlExternalAttribute
AssemblyDelaySignAttribute
ExtensionAttribute
AssemblyFileVersionAttribute
AssemblyInformationalVersionAttribute
SatelliteContractVersionAttribute
SecurityPermissionAttribute
AssemblyDescriptionAttribute
InternalsVisibleToAttribute
DataMemberAttribute
EnumMemberAttribute
DefaultMemberAttribute
AssemblyDefaultAliasAttribute
SecurityRulesAttribute
FlagsAttribute
DefaultDllImportSearchPathsAttribute
CompilationRelaxationsAttribute
AllowPartiallyTrustedCallersAttribute
InheritThrowsAttribute
DataContractAttribute
SynchronizationObjectAttribute
AssemblyProductAttribute
AssemblyCopyrightAttribute
CLSCompliantAttribute
TimeoutAttribute
AssemblySignatureKeyAttribute
AssemblyCompanyAttribute
RuntimeCompatibilityAttribute
EndExecute
BeginExecute
EndOuterExecute
BeginOuterExecute
Dequeue
Enqueue
get_Value
set_Value
WroteInstanceMetadataValue
WroteInstanceOwnerMetadataValue
WroteInstanceKeyMetadataValue
AddValue
get_DeletedValue
get_IsDeletedValue
deletedValue
get_SerializedValue
set_SerializedValue
InstanceValue
MetadataCannotContainNullValue
TryGetValue
MaxValue
get_LoadedWriteOnlyValue
value
CheckSyncContinue
EndSave
EndOnSave
BeginOnSave
BeginSave
get_Active
ThrowIfNotActive
Remove
handleRef
ValidatePropertyBag
get_BindLockRequiresCommandFlag
System.Runtime.DurableInstancing
System.Threading
get_AcquirePending
set_AcquirePending
get_OperationPending
set_OperationPending
setOperationPending
get_CannotInvokeBindingFromNonBinding
get_QueryResultsBacking
GetString
BlocksUsing
get_NonConflicting
set_NonConflicting
set_OnCompleting
CancelWaiting
StartWaiting
existing
GetParameterTypeMismatch
Publish
get_RelativeServicePath
relativeServicePath
DllImportSearchPath
get_RelativeApplicationPath
relativeApplicationPath
get_VariablesPath
get_EndpointsPath
get_OutputPath
rolledBack
rollingBack
OnRollBack
AsyncCallback
ThunkCallback
timeoutCallback
callback
System.Transactions.IEnlistmentNotification.Rollback
pendingRollback
get_IsHandleDoomedByRollback
set_IsHandleDoomedByRollback
executionStack
EndBindReclaimedLock
BeginBindReclaimedLock
BindAcquiredLock
FinishBindLock
StartBindLock
get_AutomaticallyAcquiringLock
get_IsBoundToLock
get_ContextAlreadyBoundToLock
get_HandlesLock
get_InstanceOperationRequiresLock
get_ThisLock
thisLock
Unlock
Partial
Signal
get_CannotInvokeTransactionalFromNonTransactional
ThrowIfNotTransactional
IsOptional
get_IsTransactionEnlistmentOptional
IsFatal
AssertAndThrowFatal
Cancel
System.Collections.ObjectModel
set_IsolationLevel
TraceEventLevel
PrepareTransactionalCall
get_MustSetTransactionOnFirstCall
System.Runtime.DurableInstancing.dll
get_GenericInstanceCommandNull
ArgumentNull
BufferedOutputStream
get_Item
set_Item
ActionItem
System
get_DoNotCompleteTryCommandWithPendingReclaim
FinishReclaim
CancelReclaim
StartReclaim
ownerKeysToScan
ownerKeysIndexToScan
TimeSpan
get_LockToken
get_InvalidLockToken
lockToken
get_OwnerToken
set_OwnerToken
get_IsViewFrozen
set_IsViewFrozen
DisassociateInstanceKeysExtension
get_Version
set_Version
get_InstanceVersion
set_InstanceVersion
instanceVersion
needFreedNotification
ISinglePhaseNotification
IEnlistmentNotification
get_WorkflowApplication
workflowApplication
Location
CheckSyncValidation
get_RequestReplyCorrelation
requestReplyCorrelation
get_TransactionInformation
FinishOperation
TimeoutOnOperation
System.Globalization
System.Runtime.Serialization
ThrottleAction
SetBeforePrepareAsyncCompletionAction
SecurityAction
get_Transaction
get_CannotReplaceTransaction
CommittableTransaction
ReconcileTransaction
RequireTransaction
freezeTransaction
DoAfterTransaction
DoWaitForTransaction
waitForTransaction
SetInteriorTransaction
interiorTransaction
get_HostTransaction
set_HostTransaction
OnHostTransaction
onHostTransaction
get_WaitForHostTransaction
set_WaitForHostTransaction
get_IsHostTransaction
set_IsHostTransaction
hostTransaction
myTransaction
transaction
System.Reflection
ValueCollection
queryResultsBackingCollection
KeyCollection
BeforePrepareAsyncCompletion
OnContinueAsyncCompletion
CacheAttrition
get_Exception
InstanceLockedException
OperationCanceledException
TransactionAbortedException
NotSupportedException
InstancePersistenceCommandException
get_SuspendException
suspendException
KeyNotFoundException
InstancePersistenceException
ArgumentOutOfRangeException
InstanceCompleteException
InstanceKeyCompleteException
CallbackException
get_BindReclaimedLockException
CreateBindReclaimedLockException
ArgumentNullException
InstanceCollisionException
InstanceKeyCollisionException
InvalidOperationException
get_AsyncTransactionException
innerException
InstanceOwnerException
ProcessException
TransactionInDoubtException
InstanceHandleConflictException
ArgumentException
InstanceLockLostException
TimeoutException
timeoutException
InstanceNotReadyException
InstanceKeyNotReadyException
CreateReadOnlyException
exception
currentExecution
handlesPendingResolution
InitiateLockResolution
get_TimedOutWaitingForLockResolution
get_Reason
set_Reason
get_SuspendReason
suspendReason
reason
Unknown
CompareTo
CopyTo
CultureInfo
SerializationInfo
MemberInfo
ReadOnlyMergeInto
NameCollisionOnMap
get_CommandExecutionCannotOverlap
RunLoop
SimpleCleanup
System.Xml.Linq
System.Linq
Clear
IFormatProvider
DiagnosticsEventProvider
EtwProvider
get_KeyProvider
keyProvider
get_ResourceManager
resourceManager
EventLogger
LockResolutionMarker
get_CancellationHandler
set_CancellationHandler
SetCancellationHandler
cancellationHandler
ExceptionHandler
IOThreadScheduler
IOThreadTimer
timeoutTimer
timer
get_Owner
set_Owner
BindOwner
get_InstanceOwner
set_InstanceOwner
BindInstanceOwner
get_IsBoundToInstanceOwner
get_DefaultInstanceOwner
set_DefaultInstanceOwner
get_MayBindLockCommandShouldValidateOwner
GetOrCreateOwner
CannotAcquireLockSpecificWithOwner
ThrowIfNoOwner
get_ContextMustBeBoundToOwner
get_AlreadyBoundToOwner
get_ContextAlreadyBoundToOwner
get_InstanceOperationRequiresOwner
owner
TypeHelper
ConcludeBindReclaimedLockHelper
InitiateBindReclaimedLockHelper
TransactionHelper
CommitHelper
GetOwnerEventHelper
TimeoutHelper
timeoutHelper
get_DefinitionIdentityFilter
definitionIdentityFilter
Enter
AsError
IEnumerator
System.Collections.IEnumerable.GetEnumerator
Activator
.ctor
.cctor
Monitor
System.Runtime.Diagnostics
System.Diagnostics
get_InstanceOwnerIds
set_InstanceOwnerIds
instanceOwnerIds
System.Runtime.InteropServices
System.Runtime.CompilerServices
System.Resources
System.Runtime.SRCore.resources
DebuggingModes
ResetCaches
get_MessageVersionForReplies
messageVersionForReplies
get_DefinitionIdentities
definitionIdentities
emptyProperties
get_BoundHandles
boundHandles
ResolveHandles
get_PendingHandles
pendingHandles
get_InProgressHandles
ProcessInProgressHandles
inProgressHandles
pendingModules
remainingModules
modules
eventNames
ActivationTypes
get_AccumulatedMetadataWrites
accumulatedMetadataWrites
get_AccumulatedOwnerMetadataWrites
accumulatedOwnerMetadataWrites
get_Values
SetLoadedValues
readWriteValues
PublishValues
initialValues
MapValues
CollectValues
writeOnlyValues
values
Strings
basis
get_Bookmarks
bookmarks
System.ServiceModel.Internals
Equals
get_StoreReportedConflictingLockTokens
Contains
System.Security.Permissions
System.Transactions
System.Collections
get_Options
set_Options
get_SerializedOptions
set_SerializedOptions
InstanceValueOptions
IDurableInstancingOptions
TransactionOptions
EnlistmentOptions
options
get_InstanceOwners
set_InstanceOwners
GetInstanceOwners
instanceOwners
owners
PartialTrustHelpers
success
get_WaitAlreadyInProgress
get_InstanceStoreQueryResults
set_InstanceStoreQueryResults
queryResults
get_Events
SelectSignaledEvents
persistenceEvents
RemoveHandleFromEvents
boundOwnerEvents
pendingOwnerEvents
EndWaitForEvents
BeginWaitForEvents
GetEvents
readyEvents
events
synchronous
get_Status
TransactionStatus
status
Throws
get_Keys
get_CompletedMustNotHaveAssociatedKeys
get_InstanceKeys
set_InstanceKeys
get_CannotCompleteWithKeys
emptyKeys
Concat
Format
System.Transactions.IEnlistmentNotification.InDoubt
ThrowIfTransactionAbortedOrInDoubt
inDoubt
get_ProviderObject
set_ProviderObject
providerObject
Select
NameCollisionOnCollect
SecurityRuleSet
idIsSet
providerObjectSet
get_Target
set_Target
right
OnCommitWait
onCommitWait
AfterCommitWait
System.Transactions.IEnlistmentNotification.Commit
EndCommit
System.Transactions.ISinglePhaseNotification.SinglePhaseCommit
OnCommit
BeginCommit
onCommit
transactionToCommit
needsCommit
get_Default
get_InstanceCompleteDefault
get_KeyCompleteDefault
get_CannotAcquireLockDefault
get_InstanceCollisionDefault
get_KeyCollisionDefault
FirstOrDefault
get_InstanceOwnerDefault
get_InstanceHandleConflictDefault
get_InstanceLockLostDefault
get_InstanceNotReadyDefault
get_KeyNotReadyDefault
IAsyncResult
IOAsyncResult
TransactedAsyncResult
CompletedAsyncResult
get_InvalidAsyncResult
ThrowInvalidAsyncResult
ExecuteAsyncResult
BindReclaimedLockAsyncResult
get_CurrentTransactionalAsyncResult
set_CurrentTransactionalAsyncResult
get_InvalidStateInAsyncResult
priorAsyncResult
WaitForEventsAsyncResult
get_RootAsyncResult
set_RootAsyncResult
get_LastAsyncResult
set_LastAsyncResult
AcquireContextAsyncResult
deferredTransactionalResult
waitResult
InstanceStoreQueryResult
InstanceLockQueryResult
InstanceOwnerQueryResult
EmptyQueryResult
queryResult
result
get_IsIOParticipant
Decrement
SinglePhaseEnlistment
singlePhaseEnlistment
pendingPreparingEnlistment
preparingEnlistment
enlistment
ThrowIfNegativeArgument
get_InvalidKeyArgument
parent
get_Current
BindEvent
InstancePersistenceEvent
persistenceEvent
InstanceNormalEvent
SignalEvent
AddHandleToEvent
PendHandleToEvent
BindOwnerEvent
ResetEvent
get_ControlEndpoint
controlEndpoint
get_Count
Abort
AssertAndFailFast
get_TooLateToEnlist
set_TooLateToEnlist
get_TransactionRolledBackNonHost
get_TransactionInDoubtNonHost
WaitForEventsTimedOut
timedOut
set_Timeout
OnTimeout
timeout
MoveNext
InstancePersistenceContext
OnAcquireContext
onAcquireContext
ReuseContext
StreamingContext
get_CreationContext
creationContext
transactionContext
EndAcquireExecutionContext
BeginAcquireExecutionContext
ReleaseExecutionContext
get_CurrentExecutionContext
set_CurrentExecutionContext
executionContext
get_UserContext
userContext
context
get_View
set_View
get_InstanceView
set_InstanceView
readWriteView
InstanceKeyView
readOnlyView
writeOnlyView
ValueDictionaryView
get_OnCancelRequestedThrew
get_OnFreeInstanceHandleThrew
get_PersistenceInitializerThrew
PersistencePipelineAbortThrew
get_Workflow
workflow
AssertAndThrow
get_ExtensionsCannotBeSetByIndex
arrayIndex
CouldNotResolveNamespacePrefix
ToArray
array
get_InstanceDataConsistency
set_InstanceDataConsistency
get_InstanceMetadataConsistency
set_InstanceMetadataConsistency
get_InstanceOwnerMetadataConsistency
set_InstanceOwnerMetadataConsistency
get_InstanceKeyMetadataConsistency
set_InstanceKeyMetadataConsistency
InstanceValueConsistency
get_InstanceKeysConsistency
set_InstanceKeysConsistency
EventReady
get_Key
get_InvalidKey
invalidKey
get_InstanceKey
set_InstanceKey
AssociatedInstanceKey
UnassociatedInstanceKey
CompletedInstanceKey
instanceKey
get_MetadataCannotContainNullKey
get_LoadOpAssociateKeysCannotContainLookupKey
ContainsKey
get_Assembly
MakeReadOnly
get_IsReadOnly
get_DictionaryIsReadOnly
IsWriteOnly
allowWriteOnly
writeOnly
KeyCollisionSpecificKeyOnly
get_CompletedSynchronously
ReadOnlyCopy
op_Equality
op_Inequality
System.Security
get_DefinitionIdentity
definitionIdentity
get_EventTraceActivity
eventTraceActivity
get_GuidCannotBeEmpty
ValidateProperty
property
InstanceType
ActivationType
urn:schemas-microsoft-com:System.Runtime.DurableInstancing/4.0/metadata
Collect called at the wrong time.
Map called at the wrong time.
Save called at the wrong time.
SetLoadedValues called at the wrong time.
Load called at the wrong time.
Publish called at the wrong time.
Check/SyncContinue cannot be called from within the PrepareTransactionalCall using block.
PrepareTransactionalCall should only be called as the object of non-nested using statements. If the Begin succeeds, Check/SyncContinue must be called before another PrepareTransactionalCall.
DefinitionIdentity
DefinitionIdentities
DefinitionIdentityFilter
WorkflowApplication
urn:schemas-microsoft-com:System.Activities/4.5/properties
WorkflowHostType
Status
Bookmarks
LastUpdate
Exception
Workflow
KeyProvider
urn:schemas-microsoft-com:System.Activities/4.0/properties
urn:schemas-microsoft-com:System.Activities/4.0/properties/variables
urn:schemas-microsoft-com:System.Activities/4.0/properties/output
ControlEndpoint
MessageVersionForReplies
RequestReplyCorrelation
SuspendReason
SiteName
SuspendException
RelativeApplicationPath
RelativeServicePath
CreationContext
Service
urn:schemas-microsoft-com:System.ServiceModel.Activities/4.0/properties
urn:schemas-microsoft-com:System.ServiceModel.Activities/4.0/properties/endpoints
System.Runtime.SRCore
PersistenceInitializerThrew
InvalidStateInAsyncResult
ExtensionsCannotBeSetByIndex
CannotCreateContextWithNullId
CannotReplaceTransaction
CommandExecutionCannotOverlap
CompletedMustNotHaveAssociatedKeys
ContextAlreadyBoundToInstance
ContextAlreadyBoundToLock
ContextAlreadyBoundToOwner
ContextMustBeBoundToInstance
ContextMustBeBoundToOwner
ContextNotFromThisStore
GenericInstanceCommandNull
HandleFreed
HandleFreedBeforeInitialized
InstanceOperationRequiresInstance
InstanceOperationRequiresLock
InstanceOperationRequiresNotCompleted
InstanceOperationRequiresNotUninitialized
InstanceOperationRequiresOwner
InvalidInstanceState
InvalidKeyArgument
InvalidLockToken
KeyAlreadyAssociated
KeyAlreadyCompleted
KeyAlreadyUnassociated
KeyNotAssociated
KeyNotCompleted
LoadedWriteOnlyValue
MetadataCannotContainNullKey
MustSetTransactionOnFirstCall
OnFreeInstanceHandleThrew
TransactionInDoubtNonHost
TransactionRolledBackNonHost
UninitializedCannotHaveData
CannotCompleteWithKeys
OnCancelRequestedThrew
AlreadyBoundToInstance
AlreadyBoundToOwner
InstanceRequired
LoadOpAssociateKeysCannotContainLookupKey
LoadOpFreeKeyRequiresAcceptUninitialized
LoadOpKeyMustBeValid
OwnerRequired
ValidateUnlockInstance
InstanceKeyRequiresValidGuid
AsyncTransactionException
ExecuteMustBeNested
TryCommandCannotExecuteSubCommandsAndReduce
CannotAcquireLockDefault
InstanceNotReadyDefault
KeyNotReadyDefault
KeyCollisionDefault
KeyCompleteDefault
InstanceCompleteDefault
InstanceCollisionDefault
InstanceLockLostDefault
InstanceOwnerDefault
InstanceHandleConflictDefault
BindLockRequiresCommandFlag
CannotInvokeBindingFromNonBinding
CannotInvokeTransactionalFromNonTransactional
DoNotCompleteTryCommandWithPendingReclaim
GuidCannotBeEmpty
InstanceStoreBoundSameVersionTwice
MayBindLockCommandShouldValidateOwner
StoreReportedConflictingLockTokens
TimedOutWaitingForLockResolution
BindReclaimedLockException
BindReclaimSucceeded
OwnerBelongsToWrongStore
WaitAlreadyInProgress
IncorrectValueType
NullAssignedToValueType
CouldNotResolveNamespacePrefix
GenericInstanceCommand
GetParameterTypeMismatch
InitialMetadataCannotBeDeleted
MetadataCannotContainNullValue
OutsideInstanceExecutionScope
OutsideTransactionalCommand
ProviderDoesNotSupportCommand
CannotAcquireLockSpecific
InstanceNotReadySpecific
KeyNotReadySpecific
KeyCollisionSpecific
NameCollisionOnCollect
NameCollisionOnMap
PersistencePipelineAbortThrew
KeyCollisionSpecificKeyOnly
KeyCompleteSpecific
InstanceCompleteSpecific
CannotAcquireLockSpecificWithOwner
InstanceCollisionSpecific
InstanceLockLostSpecific
InstanceOwnerSpecific
InstanceHandleConflictSpecific
WaitForEventsTimedOut
Handle already bound to a lock.
Negative instanceVersion passed to Bind.
This should only be reachable once per handle.
StartReclaim should only be reachable if the lock hasn't been bound.
Should only be able to set the version once per handle.
Incorrect version resulting from conflict resolution.
Null result returned from AcquireContextAsyncResult (synchronous).
value
instancePersistenceConflictingInstanceId
instancePersistenceInstanceKey
instancePersistenceInstanceOwnerId
instancePersistenceSerializableInstanceOwnerMetadata
InstanceStore lock state is not correct.
All cases covered above.
InitiateLockResolution already called.
InstanceStore lock state is not correct in InitiateLockResolution.
InstanceBound called after trying to bind the lock version, which alredy required an instance.
Called FinishBind prematurely.
InstanceStore lock state is not correct in CheckOldestReference.
urn:schemas-microsoft-com:System.Activities.Persistence/command
urn:schemas-microsoft-com:System.Activities.Persistence/event
instancePersistenceInstanceId
SetCancellationHandler
instanceOwnerId
lockToken
BindInstanceOwner
instanceId
BindInstance
persistenceEvent
BindEvent
instanceVersion
BindAcquiredLock
BindReclaimedLock
BeginBindReclaimedLock
CreateBindReclaimedLockException
PersistedInstance
state
CompletedInstance
ReadInstanceMetadata
WroteInstanceMetadataValue
AssociatedInstanceKey
CompletedInstanceKey
UnassociatedInstanceKey
ReadInstanceKeyMetadata
WroteInstanceKeyMetadataValue
ReadInstanceOwnerMetadata
WroteInstanceOwnerMetadataValue
queryResult
QueriedInstanceStore
command
Execute
BeginExecute
RequireTransaction called when transaction is frozen.
RequireTransaction called when no command is active.
Prior use not yet complete!
Can only reuse contexts with host transactions.
result
instancePersistenceCommandName
handle
owner
Setting Data on frozen View.
Setting Metadata on frozen View.
Setting OwnerMetadata on frozen View.
Setting Keys on frozen View.
Setting InstanceStoreQueryResults on frozen View.
BindOwner called on read-only InstanceView.
BindInstance called on read-only InstanceView.
BindLock called on read-only InstanceView.
StartBindLock called on read-only InstanceView.
FinishBindLock called on read-only InstanceView.
FinishBindLock called with mismatched instance version.
WindowsProcessActivationService
urn:schemas-microsoft-com:System.ServiceModel.Activation
PrepareAsyncCompletion should only be called once per PrepareTransactionalCall.
PrepareTransactionalCall should only be called in a using. Dispose called multiple times.
Prepare should have been called first and waited until after command processing.
Out-of-sync between InstanceExecutionContext and ExecutionAsyncResult.
urn:schemas-microsoft-com:System.Runtime.DurableInstancing/4.0/metadata
urn:schemas-microsoft-com:System.Activities/4.5/properties
urn:schemas-microsoft-com:System.Activities/4.0/properties
urn:schemas-microsoft-com:System.ServiceModel.Activities/4.0/properties
instancePersistenceConflictingInstanceId
instancePersistenceInstanceKey
instancePersistenceInstanceOwnerId
instancePersistenceSerializableInstanceOwnerMetadata
instancePersistenceInstanceId
instancePersistenceCommandName
urn:schemas-microsoft-com:System.ServiceModel.Activation
System.Security.Permissions.SecurityPermissionAttribute, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
Execution
System.Security.Permissions.SecurityPermissionAttribute, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
SkipVerification
$a9b8c4b5-b4a9-4800-8268-e8ec3b93d9ac
]System.Activities, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9
oSystem.Activities.DurableInstancing, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9
?System.ServiceModel, PublicKey=00000000000000000400000000000000
jSystem.ServiceModel.Activities, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9
jSystem.ServiceModel.Activation, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9
gSystem.ServiceModel.Routing, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9
dCDF.CIT.Scenarios.Common, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9
jMicrosoft.CDF.Test.Persistence, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9
HSystem.Runtime.Serialization, PublicKey=00000000000000000400000000000000
SkipVerificationInFullTrust
$System.Runtime.DurableInstancing.dll
Microsoft Corporation
Microsoft
 .NET Framework
 Microsoft Corporation.  All rights reserved.
4.8.9032.0
4.0.0.0
en-US
(f:\dd\tools\devdiv\35MSSharedLib1024.snk
@002400000c80000014010000060200000024000052534131000800000100010085aad0bef0688d1b994a0d78e1fd29fc24ac34ed3d3ac3fb9b3d0c48386ba834aa880035060a8848b2d8adf58e670ed20914be3681a891c9c8c01eef2ab22872547c39be00af0e6c72485d7cfd1a51df8947d36ceba9989106b58abe79e6a3e71a01ed6bdc867012883e0b1a4d35b1b5eeed6df21e401bb0c22f2246ccb69979dc9e61eef262832ed0f2064853725a75485fa8a3efb7e027319c86dec03dc3b1bca2b5081bab52a627b9917450dfad534799e1c7af58683bdfa135f1518ff1ea60e90d7b993a6c87fd3dd93408e35d1296f9a7f9a97c5db56c0f3cc25ad11e9777f94d138b3cea53b9a8331c2e6dcb8d2ea94e18bf1163ff112a22dbd92d429a
8913ef869646d14971df222c210018ab394cfe63f8eb9b4d894c0dda7368cfb69df15d049b347f8a8b9205cdcc3d6bd6690f0bd24b3da3179feb8c03f410703027c7844ff654997e38015dfc97222c15061af2a1d3fe91775b9dd4b8ede64d3d59816270a9520e393c8e60619b80d40fc1dc4f12b5aa0c2df20d02ea32960851
WrapNonExceptionThrows
Value(
MetadataT
EmitDefaultValue
ValueT
EmitDefaultValue
OptionsT
EmitDefaultValue
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADPa
jdb!Y
1!W"4
6f1J8
bP8aV
AlreadyBoundToInstance
AlreadyBoundToOwner
AsyncTransactionException
BindLockRequiresCommandFlag
BindReclaimSucceeded
BindReclaimedLockException
CannotAcquireLockDefault
CannotAcquireLockSpecific
CannotAcquireLockSpecificWithOwner
CannotCompleteWithKeys
CannotCreateContextWithNullId
CannotInvokeBindingFromNonBinding
CannotInvokeTransactionalFromNonTransactional
CannotReplaceTransaction
CommandExecutionCannotOverlap
CompletedMustNotHaveAssociatedKeys
ContextAlreadyBoundToInstance
ContextAlreadyBoundToLock
ContextAlreadyBoundToOwner
ContextMustBeBoundToInstance
ContextMustBeBoundToOwner
ContextNotFromThisStore
CouldNotResolveNamespacePrefix
DoNotCompleteTryCommandWithPendingReclaim
ExecuteMustBeNested
ExtensionsCannotBeSetByIndex
GenericInstanceCommand
GenericInstanceCommandNull
GetParameterTypeMismatch
GuidCannotBeEmpty
HandleFreed
HandleFreedBeforeInitialized
IncorrectValueType
InitialMetadataCannotBeDeleted
InstanceCollisionDefault
InstanceCollisionSpecific
InstanceCompleteDefault
InstanceCompleteSpecific
InstanceHandleConflictDefault
InstanceHandleConflictSpecific
InstanceKeyRequiresValidGuid
InstanceLockLostDefault
InstanceLockLostSpecific
InstanceNotReadyDefault
InstanceNotReadySpecific
InstanceOperationRequiresInstance
InstanceOperationRequiresLock
InstanceOperationRequiresNotCompleted
InstanceOperationRequiresNotUninitialized
InstanceOperationRequiresOwner
InstanceOwnerDefault
InstanceOwnerSpecific
InstanceRequired
InstanceStoreBoundSameVersionTwice
InvalidInstanceState
InvalidKeyArgument
InvalidLockToken
InvalidStateInAsyncResult
KeyAlreadyAssociated
KeyAlreadyCompleted
KeyAlreadyUnassociated
KeyCollisionDefault
KeyCollisionSpecific
KeyCollisionSpecificKeyOnly
KeyCompleteDefault
KeyCompleteSpecific
KeyNotAssociated
KeyNotCompleted
KeyNotReadyDefault
KeyNotReadySpecific
LoadOpAssociateKeysCannotContainLookupKey
LoadOpFreeKeyRequiresAcceptUninitialized
LoadOpKeyMustBeValid
LoadedWriteOnlyValue
MayBindLockCommandShouldValidateOwner
MetadataCannotContainNullKey
MetadataCannotContainNullValue
MustSetTransactionOnFirstCall
NameCollisionOnCollect
NameCollisionOnMap
NullAssignedToValueType
OnCancelRequestedThrew
OnFreeInstanceHandleThrew
OutsideInstanceExecutionScope
OutsideTransactionalCommand
OwnerBelongsToWrongStore
OwnerRequired
PersistenceInitializerThrew
PersistencePipelineAbortThrew
ProviderDoesNotSupportCommand
StoreReportedConflictingLockTokens
TimedOutWaitingForLockResolution
TransactionInDoubtNonHost
TransactionRolledBackNonHost
TryCommandCannotExecuteSubCommandsAndReduce
UninitializedCannotHaveData
ValidateUnlockInstance
WaitAlreadyInProgress
WaitForEventsTimedOut
The instance persistence system is unable to process an invalid InstancePersistenceCommand.  The command requires an unbound handle, but the InstanceHandle is already bound to an instance.
The instance persistence system is unable to process an invalid InstancePersistenceCommand.  The command requires an unbound handle, but the InstanceHandle is already bound to an instance owner.
jAn exception was thrown from a TransactionScope used to flow a transaction into an asynchronous operation.
The persistence provider implementation of InstanceStore in use is invalid. It called BindAcquiredLock, BindReclaimedLock, BeginBindReclaimedLock, or CreateBindReclaimedLockException at an invalid time. These methods may only be called while processing a command which may acquire a lock on an instance. Either switch to a valid persistence provider, or override the InstancePersistenceCommand implementation to return true from AutomaticallyAcquiringLock.
The persistence provider implementation of InstanceStore successfully canceled the command. An orphaned lock was reclaimed and the command canceled via InstancePersistenceContext.CreateBindReclaimedLockException.
This exception does not represent an error and should not be caught.  It can be thrown from a persistence provider implementation of InstanceStore.TryCommand, BeginTryCommand, or EndTryCommand to indicate that an attempt should be made to reclaim the lock at the version specified in the call to InstancePersistenceContext.CreateBindReclaimedLockException.
The execution of an InstancePersistenceCommand was interrupted because the instance is locked by a different instance owner. This error usually occurs because a different host has the instance loaded.
The execution of an InstancePersistenceCommand was interrupted because the instance '{0}' is locked by a different instance owner. This error usually occurs because a different host has the instance loaded.
The execution of an InstancePersistenceCommand was interrupted because the instance '{0}' is locked by a different instance owner. This error usually occurs because a different host has the instance loaded. The instance owner ID of the owner or host with a lock on the instance is '{1}'.
The persistence provider implementation of InstanceStore in use is invalid. It reported completing an instance with active keys associated to it. All keys associated to an instance must be completed before the instance can be completed.
pThe instanceId argument to InstanceStore.CreateInstanceHandle cannot specify an all-zero ID, such as Guid.Empty.
The persistence provider implementation of InstanceStore in use is invalid. It attempted to execute a potentially lock-acquiring command while processing a non-lock-acquiring command. This exception can occur when InstancePersistenceContext.Execute or InstancePersistenceContext.BeginExecute is called with a command that returns true from InstancePersistenceCommand.AutomaticallyAcquiringLock while processing a command which returns false. Either use a persistence provider which does not do so, or override AutomaticallyAcquiringLock on one of the commands to return the correct value.
The persistence provider implementation of InstanceStore in use is invalid. It attempted to execute transactional command while processing a non-transactional command. This exception can occur when InstancePersistenceContext.Execute or InstancePersistenceContext.BeginExecute is called with a command that returns false from InstancePersistenceCommand.IsTransactionEnlistmentOptional while processing a command which returns true. Either use a persistence provider which does not do so, or override IsTransactionEnlistmentOptional on one of the commands to return the correct value.
The ambient transaction (System.Transactions.Transaction.Current) doesn't match the transaction in use for this execution episode.  Only one transaction may be used throughout an entire execution episode.
Only one command at a time can be executed for a single InstanceHandle. Do not call the method Execute or BeginExecute on InstanceStore until the previous command executing for this InstanceHandle has completed.
The persistence provider implementation of InstanceStore in use is invalid. It reported loading an instance with InstanceState.Completed that has associated keys which are not completed.
The persistence provider implementation of InstanceStore in use is invalid. It called BindInstance to set the instance ID of an InstanceHandle which is already bound to an instance. An InstanceHandle may only be bound to a single instance over its lifetime.
The persistence provider implementation of InstanceStore in use is invalid. It called BindAcquiredLock to set the locked instance version of an InstanceHandle which is already bound to a lock. An InstanceHandle may only be bound to a single lock over its lifetime.
The persistence provider implementation of InstanceStore in use is invalid. It called BindOwner to set the owner of an InstanceHandle which is already bound to an owner. An InstanceHandle may only be bound to a single owner over its lifetime.
The persistence provider implementation of InstanceStore in use is invalid. It called BindAcquiredLock, BindReclaimedLock, BeginBindReclaimedLock, or CreateBindReclaimedLockException to bind the InstanceHandle to an instance lock version, but the InstanceHandle is not bound to an instance. An InstanceHandle must first be bound to an instance in order to bind it to a lock.
The persistence provider implementation of InstanceStore in use is invalid. It called BindAcquiredLock, BindReclaimedLock, BeginBindReclaimedLock, or CreateBindReclaimedLockException to bind the InstanceHandle to an instance lock version, but the InstanceHandle is not bound to an owner. An InstanceHandle must first be bound to an owner in order to bind it to a lock.
The handle argument to InstanceStore.Execute or InstanceStore.BeginExecute must have been created by a call to CreateInstanceHandle on the same InstanceStore instance.
)Could not resolve namespace prefix '{0}'.
The persistence provider implementation of InstanceStore in use is invalid. It completed processing a TryCommand request while an attempt to reclaim a lock was in progress. Use a persistence provider which does not return or throw from TryCommand, complete the IAsyncResult returned from BeginTryCommand before the IAsyncResult returned from BeginBindReclaimedLock is complete, or complete before throwing the exception returned from CreateBindReclaimedLockException.
The persistence provider implementation of InstanceStore is invalid. It attempted to execute multiple nested commands concurrently. Only one call to InstancePersistenceContext.Execute (or BeginExecute) may be issued at a time for each call to InstanceStore.TryCommand (or BeginTryCommand). This error indicates an invalid persistence provider implementation.
lThe extension collection does not support setting extensions by index. Please use the Add or Remove methods.
VThe execution of the InstancePersistenceCommand named {0} was interrupted by an error.
KThe execution of an InstancePersistenceCommand was interrupted by an error.
The parameter at index {0} requested from the InstancePersistenceAction named {1} was requested using an incorrect generic type argument. When calling GetParameter<T>, the type specified for T must match the documented type for the parameter.
%The argument must be a non-zero Guid.
dThe execution of InstancePersistenceCommands has been canceled because the InstanceHandle was freed.
kThe Free method on InstanceHandle may not be called while OnNewInstanceHandle is executing for that handle.
A value of the wrong type was retrieved from the instance store.  A value of type {0} was expected, but a value of type {1} was encountered instead.
The persistence value named {0} is being provided as an initial metadata value, so it must have a valid InstanceValue other than InstanceValue.DeletedValue.
The execution of an InstancePersistenceCommand was interrupted because the instance has already been persisted to the instance store.
The execution of an InstancePersistenceCommand was interrupted because the instance '{0}' has already been persisted to the instance store.
hThe execution of an InstancePersistenceCommand was interrupted because the instance is already complete.
nThe execution of an InstancePersistenceCommand was interrupted because the instance '{0}' is already complete.
The execution of an InstancePersistenceCommand was interrupted because another valid InstanceHandle holds a lock on the instance, indicating that a non-stale copy of the instance is already loaded. The loaded copy of the instance and its associated InstanceHandle should be used or unloaded.
The execution of an InstancePersistenceCommand was interrupted because another valid InstanceHandle holds a lock on instance '{0}', indicating that a non-stale copy of the instance is already loaded. The loaded copy of the instance and its associated InstanceHandle should be used or unloaded.
An InstanceKey cannot be created with an all-zero value, such as Guid.Empty. Use InstanceKey.InvalidKey to obtain an InstanceKey with an all-zero value.
The execution of an InstancePersistenceCommand was interrupted because the instance has become unlocked. This error indicates that the in-memory copy of the instance has become stale and should be discarded, along with the InstanceHandle.
The execution of an InstancePersistenceCommand was interrupted because the instance '{0}' has become unlocked. This error indicates that the in-memory copy of the instance has become stale and should be discarded, along with the InstanceHandle.
The execution of an InstancePersistenceCommand was interrupted because the instance has not yet been persisted to the instance store.
The execution of an InstancePersistenceCommand was interrupted because the instance '{0}' has not yet been persisted to the instance store.
The persistence provider implementation of InstanceStore in use is invalid. It reported performing an operation which requires an instance, but no instance is bound to the operation.
The persistence provider implementation of InstanceStore in use is invalid. It reported performing an operation which requires the lock on an instance to be held, but the lock is not held.
The persistence provider implementation of InstanceStore in use is invalid. It reported performing an operation which requires the instance to be in a state other than InstanceState.Completed, but the instance is in that state.
The persistence provider implementation of InstanceStore in use is invalid. It reported performing an operation which requires the instance to be in a state other than InstanceState.Uninitialized, but the instance is in that state.
The persistence provider implementation of InstanceStore in use is invalid. It reported performing an operation which requires an instance owner, but no owner is bound to the operation.
The execution of an InstancePersistenceCommand was interrupted because the instance owner registration has become invalid. This error indicates that the in-memory copy of all instances locked by this owner have become stale and should be discarded, along with the InstanceHandles. Typically, this error is best handled by restarting the host.
The execution of an InstancePersistenceCommand was interrupted because the instance owner registration for owner ID '{0}' has become invalid. This error indicates that the in-memory copy of all instances locked by this owner have become stale and should be discarded, along with the InstanceHandles. Typically, this error is best handled by restarting the host.
The instance persistence system is unable to process an invalid InstancePersistenceCommand. The command requires an instance, but no instance was bound to the InstanceHandle.
The persistence provider implementation of InstanceStore in use is invalid. It reported acquiring and committing the same version of a lock on the same instance twice. Each time a lock is acquired on an instance, the lock version must be incremented; or else zero should always be reported as the lock version. When a provider detects an attempt by an instance owner to lock an instance already locked by itself, the provider should call BindReclaimedLock, BeginBindReclaimedLock, or CreateBeginBindReclaimedLockException instead of BindAcquiredLock.
The persistence provider implementation of InstanceStore in use is invalid. It reported loading an instance with an invalid InstanceState value.
LAn invalid key of all zeroes, such as Guid.Empty, was passed as an argument.
The instanceVersion passed to InstancePersistenceContext.BindAcquiredLock must be zero if the persistence provider doesn't implement lock versioning, or greater than zero if it does.
?The async result state context, which was provided, in invalid.
The persistence provider implementation of InstanceStore in use is invalid. It reported associating a key to an instance which already had the key associated to it.
The persistence provider implementation of InstanceStore in use is invalid. It reported completing a key which was already completed.
The persistence provider implementation of InstanceStore in use is invalid. It reported disassociating a key which was associated to the present instance nor completed.
RThe execution of an InstancePersistenceCommand was interrupted by a key collision.
The execution of an InstancePersistenceCommand was interrupted by a key collision. The instance key with value '{1}' could not be associated to instance '{0}' because it is already associated to a different instance, '{2}'.
The execution of an InstancePersistenceCommand was interrupted by a key collision. The instance key with value '{0}' could not be associated to the instance because it is already associated to a different instance.
sThe execution of an InstancePersistenceCommand was interrupted because the instance key has already been completed.
yThe execution of an InstancePersistenceCommand was interrupted because the instance key '{0}' has already been completed.
The persistence provider implementation of InstanceStore in use is invalid. It reported completing or modifying a key which is not associated to the present instance.
The persistence provider implementation of InstanceStore in use is invalid. It reported disassociating a key which was not yet completed.
The execution of an InstancePersistenceCommand was interrupted because the instance key was not associated to an instance. This can occur because the instance or key has been cleaned up, or because the key is invalid. The key may be invalid if the message it was generated from was sent at the wrong time or contained incorrect correlation data.
The execution of an InstancePersistenceCommand was interrupted because the instance key '{0}' was not associated to an instance. This can occur because the instance or key has been cleaned up, or because the key is invalid. The key may be invalid if the message it was generated from was sent at the wrong time or contained incorrect correlation data.
If LoadWorkflowByInstanceKeyCommand.AssociateLookupKeyToInstanceId is not specified, the LookupInstanceKey must already be associated to an instance, or the LoadWorkflowByInstanceKeyCommand will fail. For this reason, it is invalid to also specify the LookupInstanceKey in the InstanceKeysToAssociate collection if AssociateLookupKeyToInstanceId isn't set.
If LoadByKeyOperation.InstanceIdForFreeKey is specified, AcceptUninitializedInstance must be set to true. If the key is free, it will be associated to an uninitialized instance with the instance ID provided.
mThe key used to look up an instance, LoadByKeyOperation.LookupKey, must not be all-zeros, such as Guid.Empty.
The persistence provider implementation of InstanceStore in use is invalid. It reported loading an InstanceValue with InstanceValueOptions.WriteOnly set. Write-only values should not be loaded.
An InstancePersistenceCommand which returns true from AutomaticallyAcquiringLock must also override Validate to throw an InvalidOperationException if the command is executed using an InstanceHandle not bound to an InstanceOwner.
}A null name was provided in a named collection (dictionary) of InstanceValues. Null is not a valid name for an InstanceValue.
A null value was provided in a named collection (dictionary) of InstanceValues. The name provided for the null value was {0}. Null is not a valid InstanceValue. To specify a null value, use an instance of InstanceValue with null data by passing null to the InstanceValue constructor. To indicate that a named value should be deleted, use InstanceValue.DeletedValue.
The persistence provider implementation of InstanceStore in use is invalid. An ambient transaction (System.Transactions.Transaction.Current) is set on the thread calling InstancePersistenceContext.Execute or InstancePersistenceContext.BeginExecute, but commands have already executed during this execution episode with no transaction set. An ambient transaction can only be set on the first call to Execute or BeginExecute (and only if no other transaction is already set for the episode).
A name collision was detected for the name '{0}' provided by a persistence participant of type '{1}'. A value provided by the participant's CollectValues implementation uses the same name as another value provided by this participant or a different persistence participant. Fix the participant to use a different name to avoid the collision, or remove the participant from the workflow's extensions collection.
A name collision was detected for the name '{0}' provided by a persistence participant of type '{1}'. A value provided by the participant's MapValues implementation uses the same name as another value provided by this participant or a different persistence participant.  ix the participant to use a different name to avoid the collision, or remove the participant from the workflow's extensions collection.
A value of the wrong type was retrieved from the instance store.  A value of type {0} was expected, but null was encountered instead.
The persistence provider implementation of InstanceStore in use is invalid. Its handler for cancel threw an exception. The handler was specified through the InstancePersistenceContext.SetCancellationHandler method.
The persistence provider implementation of InstanceStore in use is invalid. Its implementation of OnFreeInstanceHandle threw an exception.
The persistence provider implementation of InstanceStore in use is invalid. The {0} method can only be called during the processing of a command. Do not attempt to preserve an instance of InstancePersistenceContext for later use. The InstancePersistenceContext provided to TryCommand and BeginTryCommand can only be used during the processing of that command.
The persistence provider implementation of InstanceStore in use is invalid. It called the method {0} on InstancePersistenceContext, which requires transactional consistency, as part of performing a command that should not require transactional consistency. This can result in data corruption. This error indicates an invalid persistence provider implementation.
An incorrect InstanceOwner was provided. The InstanceOwner provided to an InstanceStore method must belong to the InstanceStore. Only use an InstanceOwner object with the InstanceStore that created it.
The instance persistence system is unable to process an invalid InstancePersistenceCommand. The command requires an instance owner, but no owner was bound to the InstanceHandle.
An IPersistenceContextInitializer implementation threw an exception. A durable service instance, such as a WorkflowServiceInstance, could not be loaded or created. The InnerException property contains the original exception.
The Abort implementation of a persistence participant of type '{0}' threw an exception. Exceptions should not be thrown from Abort implementations.
The persistence provider implementation of InstanceStore doesn't support the command named {0}. Either choose a different provider, or ensure that this persistence command isn't attempted.
The persistence provider implementation of InstanceStore in use is invalid. It called BindInstanceOwner twice with the same instanceOwnerId value but different lockToken values. Use a persistence provider which always uses the same lockToken for a single instance owner.
The persistence provider was unable to reclaim the lock within the timeout provided. This may indicate a deadlock in the pattern of commands simultaneously being executed on different InstanceHandles owned by the same InstanceOwner. This can be alleviated by using multiple InstanceOwners or by ensuring that InstancePersistenceCommand.AutomaticallyAcquiringLock returns false for commands which do not potentially acquire a lock the instance.
Although no ambient transaction was present when InstanceStore.Execute or BeginExecute was invoked, an internal transaction was used in the processing of the command. The internal transaction entered the InDoubt state.
Although no ambient transaction was present when InstanceStore.Execute or BeginExecute was invoked, an internal transaction was used in the processing of the command. The internal transaction was aborted.
The persistence provider implementation of InstanceStore in use is invalid. It returned false from TryCommand (or EndTryCommand) after executing a nested command using InstancePersistenceContext.Execute (or BeginExecute). If a persistence provider understands and acts upon a command, it must return true.
The persistence provider implementation of InstanceStore in use is invalid. It reported loading an instance with InstanceState.Uninitialized that contained instance data. Uninitialized instances may not contain instance data.
The instance persistence system is unable to process an invalid InstancePersistenceCommand. The command requires the UnlockInstance property to be set to be true if CompleteInstance property is set to true.
An InstanceHandle can have at most one outstanding WaitForEvents or BeginWaitForEvents operation in progress at a time. A second operation was attempted. Only call WaitForEvents / BeginWaitForEvents once the previous operation has completed.
A WaitForEvents or BeginWaitForEvents operation timed out after {0}. The time allotted to this operation may have been a portion of a longer timeout.
System.Runtime.DurableInstancing.pdb
_CorDllMain
mscoree.dll
PROFILE_DATA
$#I#L!v##
System.Collections.Generic
System.Xml.Linq
System.Runtime
System
System.Collections.ObjectModel
System.Linq
IEnumerable`1
KeyValuePair`2
XName
ICollection`1
IDictionary`2
IReadOnlyCollection`1
IReadOnlyDictionary`2
Dictionary`2
Entry
AsyncResult
Stack`1
IEnumerator`1
List`1
Enumerator
ReadOnlyDictionaryInternal`2
Collection`1
ReadOnlyCollection`1
Enumerator
IEquatable`1
Queue`1
HashSet`1
EqualityComparer`1
GenericEqualityComparer`1
IEqualityComparer`1
ObjectEqualityComparer`1
Func`2
Enumerable
WeakReference
 WhereSelectEnumerableIterator`2
Iterator`1
WhereEnumerableIterator`1
Buffer`1
ValueCollection
<OfTypeIterator>d__aa`1
Tuple`2
IList`1
IReadOnlyList`1
Select
Where
ToArray
OfType
OfTypeIterator
FirstOrDefault
VS_VERSION_INFO
StringFileInfo
040904B0
CompanyName
Microsoft Corporation
FileDescription
System.Runtime.DurableInstancing.dll
FileVersion
4.8.9032.0 built by: NET481REL1
InternalName
System.Runtime.DurableInstancing.dll
LegalCopyright
 Microsoft Corporation.  All rights reserved.
OriginalFilename
System.Runtime.DurableInstancing.dll
ProductName
Microsoft
 .NET Framework
ProductVersion
4.8.9032.0
Comments
Flavor=Retail
PrivateBuild
DDBLD344D
VarFileInfo
Translation
PADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGX
Washington1
Redmond1
Microsoft Corporation1(0&
Microsoft Code Signing PCA 20100
210902182557Z
220901182557Z0t1
Washington1
Redmond1
Microsoft Corporation1
Microsoft Corporation0
%X3+b
vW`79
Microsoft Corporation1
230865+4673970
O0M0K
Ehttp://crl.microsoft.com/pki/crl/products/MicCodSigPCA_2010-07-06.crl0Z
N0L0J
>http://www.microsoft.com/pki/certs/MicCodSigPCA_2010-07-06.crt0
<Mo5M
%~$v"
Washington1
Redmond1
Microsoft Corporation1200
)Microsoft Root Certificate Authority 20100
100706204017Z
250706205017Z0~1
Washington1
Redmond1
Microsoft Corporation1(0&
Microsoft Code Signing PCA 20100
KnILk
O0M0K
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
N0L0J
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
1http://www.microsoft.com/PKI/docs/CPS/default.htm0@
Legal_Policy_Statement
% moa
#Vx"&6
7Z>@B1
Washington1
Redmond1
Microsoft Corporation1(0&
Microsoft Code Signing PCA 2010
Microsof
http://www.microsoft.com0
20220408230413.334Z0
Washington1
Redmond1
Microsoft Corporation1-0+
$Microsoft Ireland Operations Limited1&0$
Thales TSS ESN:3BD4-4B80-69C31%0#
Microsoft Time-Stamp Service
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
211028192741Z
230126192741Z0
Washington1
Redmond1
Microsoft Corporation1-0+
$Microsoft Ireland Operations Limited1&0$
Thales TSS ESN:3BD4-4B80-69C31%0#
Microsoft Time-Stamp Service0
F'HKX
X0V0T
Nhttp://www.microsoft.com/pkiops/crl/Microsoft%20Time-Stamp%20PCA%202010(1).crl0l
`0^0\
Phttp://www.microsoft.com/pkiops/certs/Microsoft%20Time-Stamp%20PCA%202010(1).crt0
iYB8+
.|m}-
O!~qCQ
Washington1
Redmond1
Microsoft Corporation1200
)Microsoft Root Certificate Authority 20100
210930182225Z
300930183225Z0|1
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
q\Q17
&S|9a
!]_0t
U0S0Q
3http://www.microsoft.com/pkiops/Docs/Repository.htm0
O0M0K
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
N0L0J
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
>NGdx
fg:SM
xSu$W
as.,k{n?,
J>f;O
!TkjE
Washington1
Redmond1
Microsoft Corporation1-0+
$Microsoft Ireland Operations Limited1&0$
Thales TSS ESN:3BD4-4B80-69C31%0#
Microsoft Time-Stamp Service
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
20220409050846Z
20220410050846Z0t0:
1,0*0
1(0&0
1Z Z|
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 2010
 fwG1
PWUln
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 2010
04^Xd
J)jj/
x+ss-
Washington1
Redmond1
Microsoft Corporation1(0&
Microsoft Code Signing PCA 20110
210902183301Z
220901183301Z0t1
Washington1
Redmond1
Microsoft Corporation1
Microsoft Corporation0
Microsoft Corporation1
230217+4673160
M0K0I
Chttp://www.microsoft.com/pkiops/crl/MicCodSigPCA2011_2011-07-08.crl0a
U0S0Q
Ehttp://www.microsoft.com/pkiops/certs/MicCodSigPCA2011_2011-07-08.crt0
3 X^}gR=G
Washington1
Redmond1
Microsoft Corporation1200
)Microsoft Root Certificate Authority 20110
110708205909Z
260708210909Z0~1
Washington1
Redmond1
Microsoft Corporation1(0&
Microsoft Code Signing PCA 20110
S0Q0O
Ihttp://crl.microsoft.com/pki/crl/products/MicRooCerAut2011_2011_03_22.crl0^
R0P0N
Bhttp://www.microsoft.com/pki/certs/MicRooCerAut2011_2011_03_22.crt0
3http://www.microsoft.com/pkiops/docs/primarycps.htm0@
Legal_policy_statement
e_.,>
D=xz#
*?*kXIc
QEX82q'
WqVNHE
Washington1
Redmond1
Microsoft Corporation1(0&
Microsoft Code Signing PCA 2011
Microsof
http://www.microsoft.com0
?ofqy
20220408230414.817Z0
Washington1
Redmond1
Microsoft Corporation1-0+
$Microsoft Ireland Operations Limited1&0$
Thales TSS ESN:2AD4-4B92-FA011%0#
Microsoft Time-Stamp Service
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
211028192739Z
230126192739Z0
Washington1
Redmond1
Microsoft Corporation1-0+
$Microsoft Ireland Operations Limited1&0$
Thales TSS ESN:2AD4-4B92-FA011%0#
Microsoft Time-Stamp Service0
6z$WD
IsK6*
L8zp0
X0V0T
Nhttp://www.microsoft.com/pkiops/crl/Microsoft%20Time-Stamp%20PCA%202010(1).crl0l
`0^0\
Phttp://www.microsoft.com/pkiops/certs/Microsoft%20Time-Stamp%20PCA%202010(1).crt0
vFfl|
n{(aM0
"c}FK
^?H4"
g;^z 
Washington1
Redmond1
Microsoft Corporation1200
)Microsoft Root Certificate Authority 20100
210930182225Z
300930183225Z0|1
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
q\Q17
&S|9a
!]_0t
U0S0Q
3http://www.microsoft.com/pkiops/Docs/Repository.htm0
O0M0K
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
N0L0J
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
>NGdx
fg:SM
xSu$W
as.,k{n?,
J>f;O
!TkjE
Washington1
Redmond1
Microsoft Corporation1-0+
$Microsoft Ireland Operations Limited1&0$
Thales TSS ESN:2AD4-4B92-FA011%0#
Microsoft Time-Stamp Service
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
20220409004052Z
20220410004052Z0t0:
1,0*0
1(0&0
84p:c
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 2010
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 2010
3Pdi--
bQ@X?
)r"!t
yM:aj
