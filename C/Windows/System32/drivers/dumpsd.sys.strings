!This program cannot be run in DOS mode.
.text
h.rdata
H.data
.pdata
H.idata
HPAGE
`fothk
`.edata
@INIT
bGFIDS
B.rsrc
B.reloc
D$ SDdtA
D$ SDdtH
!t$H@85
D$HE3
x ATAVAWH
tDD8%
0A_A^A\
D$(E3
D$(E3
x ATAVAWH
&!CHL
oTrEE
tEL9g0t?
@A_A^A\
WATAUAVAWH
0A_A^A]A\_
x ATAVAWH
 A_A^A\
WAVAWH
 A_A^_
@SUVWATAUAVAWH
ITCAA
D9wP|
HcC<M
ITCAA
ITCAA
D$HHcC<H
>7u$E3
D8wXt
D9wP|
HcC<M
ITCAA
D9wP}f
8A_A^A]A\_^][
x ATAVAWH
A_A^A\
L$ E3
L$`H3
p WATAUAVAWH
usD9 usD8
d$8E3
A_A^A]A\_
x AVH
TCRCD
@SUVWAVH
L$0H3
@A^_^][
UVWATAUAVAWH
@8pEu
@8pEu
@8hFu
@8iFr
A8iFu
@8iEu
t$xE3
SdAiH
@8hFu
D9wH}
0A_A^A]A\_^]
D$ fD
UVWATAUAVAWH
D9V8u8
SSAPLc
`A_A^A]A\_^]
SUVWATAUAVH
wHrEH
wHrEH
wHrEH
@A^A]A\_^][
|$ AVH
x AVH
D8C$u
t$ WATAUAVAWH
9x8t]
 NUTH
|$8E3
9~8tJH
 DABH
L$PH3
A_A^A]A\_
\$ UVWATAUAVAWH
D!d$ 
A_A^A]A\_^]
t$ WATAUAVAWH
@@9x u
@8xED
@8hEu
D8XEuxD
u+D8k$t%A
D8pFs
@@9x u
D9l$ht
0A_A^A]A\_
WATAUAVAWH
@wJfD9
0A_A^A]A\_
p WATAUAVAWH
D8m$t
A_A^A]A\_
x AVH
VWAVH
@A^_^
UVWAVAWH
D8T$pt`D8
 A_A^_^]
x ATAVAWH
 A_A^A\
f9H<u+D9
u"fA;
p WAVAWH
 A_A^_
@8iEu 
@8iEu
f9A<u
f9A<u
CHD8QEu
@8iEu
t$ UWATAVAWH
L+A H
A_A^A\_]
WAVAWH
 A_A^_
L$PH3
L$ UH
L$ UH
L$ UH
t#H9A
x AVH
UVWATAUAVAWH
DMCAHcO8D
9G t.E8
D8`EA
u%D8hFu
 DMCA
 DMCA
D8X$u39J
u.D8_Qu(3
D9h u
ueE8hFu_M
 DMCH
H!t$ H
 DMCA
D9o4uK3
D9o4u
8&uuI
D9o4u
pA_A^A]A\_^]
\$ UVWATAUAVAWH
D8o$tW
eRrEL
POTSL
D9o8t
D8m@u
D8mHt
PA_A^A]A\_^]
L$@E3
eRcAH
eRdID
UVWATAUAVAWH
eRsPD
pA_A^A]A\_^]
x AVH
WAVAWH
D$ E3
G@;GDv
CHD9p
`H98t
A_A^_
x ATAVAWH
SdAiA
SdAiH
AeiCD
_DSMH
SdAiH
SdAiH
@A_A^A\
SdAiH
SdAiH
L$PE3
?AeoBu
SdAiH
UVWATAUAVAWH
9~8tUH
9x8t#
 NUTA
|$8E3
L$PH3
`A_A^A]A\_^]
x AVH
@SUVWH
L$@H3
X_^][
H WATAUAVAWH
A_A^A]A\_
l$ VWAVH
@8k$u
H+J H
@8k$t
l$ E3
x AWH
VWATAVAWH
D8c$usL
A_A^A\_^
p WATAVH
@A^A\_
UATAUAVAWH
8K$u{8
A_A^A]A\]
x AVH
WATAVH
0A^A\_
@SUVWH
L$@H3
X_^][
L$ UVWATAUAVAWH
@A_A^A]A\_^]
WATAVH
0A^A\_
{ ATAVAWH
D$ E3
@A_A^A\
ATAVAWH
|$ E3
 ICQH
CIFID
9{8u%H
A_A^A\
D$HD3
D$@D3
D$(fD
D$0fD
D$(fD
WAVAWH
|$@E3
A_A^_
|$(fD
WAVAWH
u"@8hFu
A_A^_
WAVAWH
D8PEA
RHESf
P(D8xED
D8PEE
D8PEu
A_A^_
WAVAWH
l$@E3
t$(fD
A_A^_
WATAUAVAWH
l$(fD
l$0fD
l$(fD
\$0fD
l$(fD
A_A^A]A\_
x AVH
t$@E3
t$@E3
t$@E3
t$@E3
t$@E3
t$@E3
t$HE3
x ATAVAWH
A_A^A\
p WAVAWH
rPCQD
t$@E3
A_A^_
\$@E3
\$@E3
VWAVH
rPCQD
WAVAWH
0A_A^_
x AVH
WAVAWH
t$H9_
SdAcH
@A_A^_
t$ WATAUAVAWH
HcO<M
D9o<u
D$0E3
d$ E3
E8f8t$H
SdAcI
A_A^A]A\_
h VWAUAVAWH
u$D9o@v
r'D9o@u%I
D9o@v
D9o@u
D9o@D
ujHcG<
ITCAD
D9o<u
@8hEuD
A_A^A]_^
x AVH
LcG<L
 RDIH
LcG<L
 RDIH
SdCaH
B28A2uT
B4f9A4uJ
B68A6uB
BD9AD
Bnf9Anu0H
Cl8Glu
Ct9Gtt
VWAVH
WATAVH
0A^A\_
UVWATAUAVAWH
|$HE3
pA_A^A]A\_^]
x AVH
Q@D9r
t$0fD
t$(fD
t$0fD
t$(fD
t$HE3
t$0fD
t$(fD
\$ UVWATAUAVAWH
SdMpH
D8s$u{H
D8[$u
\$0fD
\$(fD
qipHH
QipHH
t$(fD
YipHH
D8[$tWL
SdMpH
uoD9F`u
5u+E;
T$@E3
SdMpH
A_A^A]A\_^]
B@<5u9
m<4uO
C&L+Kh3
-fffffff
fffffff
fffffff
fffffff
.fffffff
fffffff
fffffff
fffff
AQAPRQPH
(D$ H
0XYZAXAY
ffffff
fffff
fffff
DUMP open.
Dump READ action=%d, offset=0x%I64x, mdl=%p, length=0x%x
Dump WRITE action=%d, offset=0x%I64x, mdl=%p, length=0x%x
Write cache flushed.
Powering down dump device.
DUMP finish.
TIMEOUT failure offset 0x%I64x try %d.
wp  %p _SdDumpBusWorker enter
wp  %p cur evts=0x%08x; req evts=0x%08x; delay=%d; retries=%d
wp  %p err evts: 0x%x, cur evts=0x%08x
wp  %p Events have fired: cur evts=0x%08x, req evts=0x%08x
wp  %p Go waiting infinitely for events: req evts=0x%08x
wp  %p Go waiting for events: req evts=0x%08x, retries=%d
wp  %p Missing: req evts=0x%x, cur evts=0x%08x
wp  %p Go delay: delay=%d
wp  %p Unhandled error: error status: %08x
wp  %p start - func %s phase %d
wp  %p Events cleared: evts=0x%x
wp  %p invalid state switch(%d)!
wp  %p STATE SWITCH %d => %d
wp  %p STATE SWITCH error=>normal
wp  %p end - func %s; phase %d; status=0x%x
wp  %p _SdDumpBusWorker exit processing
wp  %p Worker %s - COMPLETE 0x%08x
wp  %p _SdDumpReadWriteRequestSync enter
WRITE failure offset 0x%I64x try %d status 0x%x.
READ failure offset 0x%I64x try %d status 0x%x.
DUMPSD will retry.
wp  %p _SdDumpReadWriteRequestSync exit %x
wp  %p _SdDumpReadWriteRequestAsync enter
wp  %p _SdDumpReadWriteRequestAsync exit %x
RESET activation.
RESET activation stage %d
Data bus using 8-bit: %d
RESET activation stage phase 2 %d
SDDUMP RESET activation FAILED tries left %d
RESET activation failed tries left %d status 0x%x.
DUMPSD: 
SDBUS_EVENT_CARD_CHANGE
SDBUS_EVENT_CARD_RESPONSE
SDBUS_EVENT_CARD_RW_END
SDBUS_EVENT_BUFFER_EMPTY
SDBUS_EVENT_BUFFER_FULL
SDBUS_EVENT_DMA_COMPLETE
SDBUS_EVENT_CARD_INTERRUPT
SDBUS_EVENT_TUNING
SDBUS_EVENT_ERROR
SDBUS_EVENT_SG_LIST
SDBUS_EVENT_DMA_RESOURCES_ALLOCATED
SDBUS_EVENT_DMA_TRANSFER_CANCELLED
SDBUS_EVENT_CLOCK_STABLE
SDBUS_EVENT_SIGNALING_VOLTAGE_STABLE
SDBUS_EVENT_VCORE_STABLE
SDBUS_EVENT_SYSTEM_DMA_COMPLETE
SDBUS_EVENT_HPI
SDBUS_EVENT_PSTATE_CHANGED
SDBUS_EVENT_DAT0_ASSERT_COMPLETE
SDWP_UNSPECIFIED
SDWP_STOP_SOCKET
SDWP_SOCKET_RESET
SDWP_POWER_ON
SDWP_POWER_ON_AND_VERIFY
SDWP_POWER_OFF
SDWP_ACTIVATE_SOCKET
SDWP_GET_SOCKET_CARDDATA
SDWP_ENUMERATE_DEVICES
SDWP_READ_DEVICE_CONFIG
SDWP_DETECT_FRENQUENCY
SDWP_DETECT_BUS_WIDTH
SDWP_INITIALIZE_CARD
SDWP_INITIALIZE_CARD_AND_VERIFY
SDWP_SELECT_CARD
SDWP_DESELECT_CARD
SDWP_START_FUNCTION
SDWP_STOP_FUNCTION
SDWP_BASIC_COMMAND
SDWP_DATA_COMMAND
SDWP_ERASE_COMMAND
SDWP_QUERY_CARD_INTERRUPTS
SDWP_GET_BUS_CLOCK
SDWP_SET_BUS_CLOCK
SDWP_INIT_BUS_CLOCK
SDWP_REFLECT_BUS_CLOCK
SDWP_ENABLE_BUS_CLOCK
SDWP_DISABLE_BUS_CLOCK
SDWP_GET_BUS_WIDTH
SDWP_SET_BUS_WIDTH
SDWP_REFLECT_BUS_WIDTH
SDWP_DETECT_HIGH_SPEED
SDWP_REFLECT_HIGH_SPEED
SDWP_REFLECT_HS400
SDWP_RETUNE_HS400
SDWP_ENABLE_FUNCTION_INT
SDWP_DISABLE_FUNCTION_INT
SDWP_GET_FUNCTION_INT
SDWP_REFLECT_FUNCTION_INT
SDWP_GET_FUNCTION_BLOCKLEN
SDWP_SET_FUNCTION_BLOCKLEN
SDWP_REFLECT_FUNCTION_BLOCKLEN
SDWP_GET_FN0_BLOCKLEN
SDWP_SET_FN0_BLOCKLEN
SDWP_REFLECT_FN0_BLOCKLEN
SDWP_GET_BUS_INTERFACE_CONTROL
SDWP_SET_BUS_INTERFACE_CONTROL
SDWP_SDIO_RESET
SDWP_MMC_SLEEP
SDWP_MMC_WAKE
SDWP_MMC_SOFT_RESET
SDWP_MMC_SET_WRITE_GROUP_DEF
SDWP_MMC_CHECK_WRITE_CACHE
SDWP_MMC_ENABLE_WRITE_CACHE
SDWP_MMC_FLUSH_WRITE_CACHE
SDWP_NOP
WORKER_IDLE
WORKER_PACKET_PENDING
WORKER_IN_PROCESS
WORKER_WAITING_FOR_TIMER
WORKER_WAITING_INFINITE
WORKER_POLLING
WORKER_WAITING_FOR_PSTATE
SCS_NO_CARD
SCS_CARD_DETECTED
SCS_CARD_ENUMERATED
SDBUS_ERROR_CMD_TIMEOUT
SDBUS_ERROR_CMD_CRC_ERROR
SDBUS_ERROR_CMD_END_BIT_ERROR
SDBUS_ERROR_CMD_INDEX_ERROR
SDBUS_ERROR_DATA_TIMEOUT
SDBUS_ERROR_DATA_CRC_ERROR
SDBUS_ERROR_DATA_END_BIT_ERROR
SDBUS_ERROR_BUS_POWER_ERROR
SDBUS_ERROR_ACMD12_ERROR
SDBUS_ERROR_ADMA_ERROR
SDBUS_ERROR_TUNING_ERROR
SDBUS_ERROR_ACMD12_NOT_EXECUTED
SDBUS_ERROR_ACMD12_RESPONSE_TIMEOUT
SDBUS_ERROR_ACMD12_RESPONSE_CRC_ERROR
SDBUS_ERROR_ACMD12_END_BIT_ERROR
SDBUS_ERROR_ACMD12_INDEX_ERROR
SDBUS_ERROR_ACMD12_CWODAT_NOT_EXECUTED
SDBUS_ERROR_SYSTEM_DMA_ERROR
SDBUS_GENERIC_IO_ERROR
SDBUS_ERROR_UNKNOWN
** UNKNOWN **
%05x: %02x
%05x: %02x %02x
%05x: %02x %02x %02x
%05x: %02x %02x %02x %02x
%05x: %02x %02x %02x %02x %02x
%05x: %02x %02x %02x %02x %02x %02x
%05x: %02x %02x %02x %02x %02x %02x %02x
%05x: %02x %02x %02x %02x %02x %02x %02x %02x
%05x: %02x %02x %02x %02x %02x %02x %02x %02x- ...
, RdyForData
, AppCmd
ready
ident
SD_RESP           prevState=%s%s%s
SD_RESP CMD%d <== none
SD_RESP CMD%d <== R1 Card Status = 0x%08x
SD_RESP CMD%d <== R2 0x%08x 0x%08x 0x%08x 0x%08x
SD_RESP CMD%d <== R3 Mem OCR 0x%08x
PowerUpBusy
state=ready
SD_RESP           %d.%dV - %d.%dV, %s
SD_RESP CMD%d <== R4 Io OCR 0x%08x
 RANGE ERR
 FUNC NUM ERR
 GEN ERR
 CMD ERR
 CRC ERR
SD_RESP CMD%d <== R5 0x%08x state=%d%s%s%s%s%s
SD_RESP CMD%d <== R6 RCA+Status 0x%08x
    %s
SdbusStartDevice: Host Register Base at %p, size %x
sdhc - SdhcInitializeController
sdhc - SdhcInitializeSocket
sdhc - SdhcInitializeSocket: Global value 0x%x
sdhc - controller version=%d
sdhc - Support DMA
sdhc - Support ADMA2
sdhc - Support 64 bit bus
sdhc - Support 8 bit bus width
sdhc - Support high speed
sdhc - Support SDR50
sdhc - Support SDR104
sdhc - Support DDR50
sdhc - Use tuning for SDR50
socket %p - needs software retuning
sdhc - HACKFLAG LIE Support 1.8v (low voltage)
sdhc - HACKFLAG LIE Support 3.0v
sdhc - HACKFLAG LIE Support 3.3v
sdhc - Support 1.8v (low voltage)
sdhc - Support 3.0v
sdhc - Support 3.3v
CompatType: %d; _DSM Query: 0x%02X
_DSM High Speed Capabilities: 0x%02X
SdhcInitializeSocketDma: can't handle > 4GB dma physical addresses!
sdhc - DB DMA: physical=0x%08x, DBDMA physical=0x%08x, DBDMA length=0x%08x
SdhcInitializeSocketDma - Invalid DmaBufferSize: %d
sdhc - SdhcInitializeCard
sdhc - SdhcInitializeFunction(%d)
sdhc - Power off
sdhc - set voltage: reg=%x
sdhc - failed to set voltage: reg=%x
sdhc - set voltage retried %d times before success
sdhc - enable bus power: reg=%x
sdhc - failed to enable bus power: reg=%x
sdhc - power stable
sdhc - SdhcResetHost - reset issued type %d
sdhc - clock is stable, enable clock
sdhc - wait for clock to be enabled
sdhc - turning off clock
sdhc - skt %p SdhcSetClock - target=%d, base=%d, actual=%d, divisor=%d, register value=0x%x
sdhc - wait for clock to be stable
sdhc - clock ready
skt %p: Start retuning procedure
skt %p: Retuning timed out, stop retuning procedure
skt %p SetEventMask:  new=%08x, changed=%08x
skt %p SDHOST: Clean error status
skt %p SDHOST: hwErrorStatus = %08x
skt %p SDHOST: Auto Cmd12 Error Status = %08x
skt %p SDHOST: ADMA Error Status = %08x
sdhc - skt %p SEND: Cmd%d (0x%04x) arg = 0x%08x
skt %p pio transfer: complete one block of data
SDHC[%p] SdhcPrepareSystemDmaTransfer: Unable to initialize DMA transfer context
SDHC[%p] SdhcDmaCompletionRoutine
SDHC[%p] SdhcStartSystemDmaTransfer: ConfigureAdapterChannel failed: %08X
SDHC[%p] SdhcStartSystemDmaTransfer: MapTransferEx failed: %08X
skt %p: Optimal Tap Tuning Success! TAP_VAL: %d, Phase: %d
skt %p: Tuning Success! TAP_VAL: %3d, Phase: %d, Frequency: %6dkHz, Voltage: %4dmV
skt %p: Tuning Failure! TAP_VAL: %3d, Phase: %d, Frequency: %6dkHz, Voltage: %4dmV
fdo %p SdbusFxComponentActive
fdo  %p SdbusFxComponentIdle
ExecuteWorkSynchronous: %s
wp  %p SdbusWorkerQueuePacket enter: irp %p engine state=%s
wp  %p PushEvent entered: engine state=%s, pending evts=0x%08x, new evts=0x%08x
we %p unexpected evts occurred: evts=0x%08x, err evts=0x%08x
SendCmdAsync ph(%d): CMD%d
skt %p SD_SEND ACMD%d ==> arg=%08x, rt=%d
skt  %p SD_SEND CMD%d ==> arg=%08x, rt=%d
ErrorRecoveryWorker: err evts=0x%08x
ErrorRecoveryWorker: Sending CMD12
socket  %p SdbusWorkerSetRetuningTimer 0x%08x
Hpi triggered state cleared
fdoext %p P-state change: current = %u, requested = %u, active percent = %u%%, active time = %ums, sample duration = %ums
fdoext %p P-state completed: P-state = %u
SdbusWait: wait %d
SdbusWait: STALL %d
#(-27<FP
QC_SDHC[%p] - PlResetHost
QC_SDHC[%p] - PlSetPower voltage profile=0%x
QC_SDHC[%p] - PlInitializeCard)
QC_SDHC[%p] - PlInitializeFunction
QC_SDHC[%p] PlSetClock(enable=%d, Freq=%d khz)
QC_SDHC[%p] PlSetClock(Freq=%d Khz -> HCLK_CTL=%8.8x, CLK_MD=%8.8x, CLK_NS=%8.8x)
QC_SDHC[%p] - PlSetBusWidth(wide=%d)
QC_SDHC[%p] - PlSetBusWidthExplicit(width=%d)
           *----------------- [%p] -------------------*
           MCI_POWER=0x%x MCI_CLK=0x%x MCI_ARGUMENT=0x%x
           MCI_CMD=0x%x MCI_RESPONSE_CMD=0x%x MCI_RESPONSE0=0x%x
           MCI_RESPONSE1=0x%x MCI_RESPONSE2=0x%x MCI_RESPONSE3=0x%x
           MCI_DATA_TIMER=0x%x MCI_DATA_LENGTH=0x%x MCI_DATA_CONTROL=0x%x
           MCI_STATUS=0x%x MCI_INTERRUPT0=0x%x MCI_INTERRUPT1=0x%x
          *------------------------------------------*
QC_SDHC[%p] PlReadDataPort (buff=%p, len=%d)
ERROR: length must be a multiple of 4 bytes
PlReadDataPort - ERROR! Stop Reading Data Error! Status(0x%x)
QC_SDHC[%p] PlWriteDataPort (buff=%p, len=%d)
PlWriteDataPort - ERROR! Stop Writing Data Error! Status(0x%x)
QC_SDHC[%p - PlSetHighSpeed(set=%d)
QC_SDHC[%p] - PlInitializeSocket
QC_SDHC[%p] PlQueryTransferMode = %d
QC_SDHC[%p] - PlDetectCardInSocket
QC_SDHC[%p] - PlIsWriteProtected
QC_SDHC[%p] ClearStatusFlags could not clear status flags in %lld usec (%8.8x)
QC_SDHC[%p] ClearStatusFlags cleared in %lld usec
QC_SDHC[%p] SendCommand CMD%2d (Argument 0x%x)
QC_SDHC[%p] PlGetResponse CMD%2d (type 0x%x, len=%d)
Write
Unspecified
QC_SDHC[%p] PlInitializeTransfer: DIR=%s METHOD=%d, BLOCKS=%d x %d
QC_SDHC[%p] PlInitializeTransfer: transfer size must be multiple of 4
QC_SDHC[%p] PlDmaCompletionRoutine
QC_SDHC[%p] PlPrepareTransfer: phase %d
QC_SDHC[%p] PlPrepareTransfer: Unable to initialize DMA transfer context
QC_SDHC[%p] PlStartTransfer: phase %d
QC_SDHC[%p] PlStartTransfer: MapTransferEx failed: %08X
QC_SDHC[%p] PlDisableAllHostControllerInterrupts
QC_SDHC[%p] PlSetEventMask(new=%8.8x, changed=%8.8x)
QC_SDHC[%p] PlSetEventMask: ignored in crash dump mode
QC_SDHC PlSetEventMask(hwmask=%8.8x)
QC_SDHC[%p] PlGetPendingEvents(HW mask changed for CMD%d, new=%8.8x)
QC_SDHC[%p] PlGetPendingEvents(ReadDmaCounter 0x%x)
QC_SDHC[%p] PlGetPendingEvents(hw=%8.8x -> sw=%8.8x)
QC_SDHC[%p] PlAcknowledgeEvent(sw=%8.8x -> hw=%8.8x)
Pl180StartDevice: Host Register Base at %p, size %x
PL180_SDHC[%p] - Pl180ResetHost
PL180_SDHC[%p] - Pl180SetPower voltage profile=0%x
PL180_SDHC[%p] - Pl180InitializeCard)
PL180_SDHC[%p] - Pl180InitializeFunction
PL180_SDHC[%p] Pl180SetClock(enable=%d, Freq=%d khz)
PL180_SDHC[%p] - Pl180SetBusWidth(wide=%d)
QC_SDHC[%p] - Pl180SetBusWidthExplicit(width=%d)
           MCI_STATUS=0x%x MCI_INTERRUPT0=0x%x MCI_INTERRUPT1=0x%x MCI_FIFO_COUNT=0x%x
PL180_SDHC[%p - Pl180SetHighSpeed(set=%d)
PL180_SDHC[%p] - Pl180InitializeSocket
PL180_SDHC[%p] Pl180QueryTransferMode = %d
PL180_SDHC[%p] - Pl180DetectCardInSocket
PL180_SDHC[%p] - Pl180IsWriteProtected
PL180_SDHC[%p] Pl180ClearStatusFlags could not clear status flags in %lld usec (%8.8x)
PL180_SDHC[%p] Pl180ClearStatusFlags cleared in %lld usec
PL180_SDHC[%p] Pl180SendCommand CMD%2d (Argument 0x%x)
PL180_SDHC[%p] Pl180SendCommand CMD%2d (Argument 0x%x) to start SD CARD not supported
PL180_SDHC[%p] Pl180GetResponse CMD%2d (type 0x%x, len=%d)
PL180_SDHC[%p] PlReadDataPort (buff=%p, len=%d)
Pl180ReadDataPort - ERROR! Stop Reading Data Error! Status(0x%x)
PL180_SDHC[%p] Pl180WriteDataPort (buff=%p, len=%d)
Pl180WriteDataPort - ERROR! Stop Writing Data Error! Status(0x%x)
Pl180WriteDataPort - ERROR! We did overrun the FIFO! FifoCount left(0x%x)
PL180_SDHC[%p] Pl180InitializeTransfer: DIR=%s METHOD=%d, BLOCKS=%d x %d
PL180_SDHC[%p] Pl180InitializeTransfer: transfer size must be multiple of 4
PL180_SDHC[%p] Pl180PrepareTransfer phase %d
DMA not supported
PL180_SDHC[%p] Pl180StartTransfer phase %d
PL180_SDHC[%p] Pl180DisableAllHostControllerInterrupts
PL180_SDHC[%p] Pl180SetEventMask(new=%8.8x, changed=%8.8x)
PL180_SDHC[%p] Pl180SetEventMask: ignored in crash dump mode
PL180_SDHC Pl180SetEventMask(hwmask=%8.8x)
PL180_SDHC[%p] Pl180GetPendingEvents(HW mask changed for CMD%d, new=%8.8x)
PL180_SDHC[%p] DMA not supported)
PL180_SDHC[%p] Pl180GetPendingEvents(hw=%8.8x -> sw=%8.8x)
PL180_SDHC[%p] Pl180AcknowledgeEvent(sw=%8.8x -> hw=%8.8x)
QueryCardInterrupts: skt %p pending_ints=%x, reg_cb=%x, cb_in_service=%x
QueryCardInterrupts: pdo %p int still in service
QueryCardInterrupts: CallBack: pdo=%p context=%p
wp  %p skt %p SocketResetWorker entered, type %d
Host DeviceID %04x.%04x.%02x
wp  %p skt %p SocketReset complete
wp  %p skt %p SetPowerWorker entered
wp  %p skt %p SetPowerWorker: parameter=0x%08x
wp  %p skt %p Socket now %s
wp  %p SetBusClock Entered
wp  %p returning current clock frequency at %dKHz
wp  %p Will set clock frequency at %dKHz enable %d
wp  %p bus clock set, freq=%d
wp  %p skt %p InitializeCardWorker: ICW_START
wp  %p io card reset error handler!
wp  %p mem card reset error handler!
wp  %p ICW_SEND_CMD8 - send CMD8
wp  %p CMD8 succeeded. It is a 2.0 card
wp  %p ICW_CMD8_ERROR error handler!
wp  %p SDIO is disabled on this controller
wp  %p INIT_IO - send CMD5
wp  %p CMD5 Response: #func=%d, ioOCR=%08x
wp  %p card returns IO_READY
wp  %p IO init TIMEOUT
wp  %p IO init FAILURE
wp  %p INIT_SD_MEM
wp  %p card returns memory OCR: ocr=0x%08x, volt prof=0x%08x
wp  %p INIT_SD_MEM - start setting operation condition
wp  %p card is High Capacity Card: %d
wp  %p enumerate MEM card fails
wp  %p INIT_SD_MEM - retry after delay
wp  %p INIT_SD_MEM error handler!
wp  %p SD Combo card failed to initilize memory function!
wp  %p INIT_MMC_MEM
wp  %p mmc OCR: volt range=0x%08x, volt prof=0x%08x
wp  %p INIT_MMC_MEM - send CMD1
wp  %p MMC card returns initialized
wp  %p enumerate MMC card fails
wp  %p INIT_MMC_MEM - retry sequence after delay
wp  %p INIT_MMC_MEM - send CMD1 for low voltage
wp  %p INIT_MMC_MEM error handler!
wp  %p InitializeCard COMPLETE, rca=0x%08x
wp  %p InitializeCard ABORT!
wp  %p SelectCard Entered
wp  %p DeselectCard Entered
wp  %p Select/Deselect Handle Command Timeout
wp  %p Select/Deselect Card Complete
wp  %p skt %p StartFunctionWorker: func type=%d
wp  %p skt %p SdbusStartFunctionWorker enabled power off notifications
skt %p IO enable TIMEOUT
wp  %p skt %p SdbusStartFunctionWorker succeeded: enabled func=0x%08x
wp  %p skt %p SdbusStartFunctionWorker sent power off notification
wp  %p skt %p StopFunctionWorker succeeded
wp  %p skt %p IntEnableWorker entered
wp  %p skt %p IntEnableWorker: workstat=0x%08x, cur mask=0x%08x, tar=0x%08x
wp  %p skt %p update workstat: 0x%08x
wp  %p skt %p enable card interrupt event
wp  %p skt %p disable card interrupt event
wp  %p FunctionBlockLength enter
wp  %p Error: trying to set the block size to 0
wp  %p Error: the new block size is larger than the controller's cap
wp  %p Error: the new block size is larger than the card's cap
wp  %p Error: memory block size should always be 512
wp  %p SetFunctionBlockLen(sdio) = %d
wp  %p SetFunctionBlockLen(mem) = %d
wp  %p skt %p BusWidthWorker entered
wp  %p Error: cannot set bus width if card is locked
wp  %p Error: the card does not support wide bus
wp  %p Set wide bus for memory function. bus width=%d
wp  %p Disable pull-up resistor for memory card
wp  %p Disable pull-up resistor error!
wp  %p Current CCCR_BUS_CONTROL vale:%x
wp  %p Set wide bus for sdio function. bus width=%d, new BC=%x
wp  %p SetBusWidth Complete
wp  %p SdbusBusWidthWorker: UHS-I Read SCR Error!
wp  %p HighSpeedDetection entered
wp  %p High Speed is not supported: MMC card
wp  %p High Speed is not supported: disabled (forced)
wp  %p Card is locked, switching to high speed is illegal
wp  %p MMC High Speed is not supported: disabled (forced)
wp  %p HighSpeedDetection Complete: support=%d, enabled=%d
wp  %p HighSpeedDetection Failed
wp  %p SdbusHighSpeedWorker entered
wp  %p card locked, cannot switch to high speed
wp  %p SDIO SetHighSpeed init
wp  %p SetHighSpeed Failed
wp  %p Force to set high speed
wp  %p SetHighSpeed succeeded
wp  %p SetHighSpeed failed
wp  %p SdbusHS400Worker entered
wp %p SdbusHS400Worker Status Error %x
wp %p HS200 -> High speed bus clock set, freq=%d
wp  %p DDR50 -> HS400 bus clock set, freq=%d
wp  %p SdbusHS400Worker completed
wp  %p Set HS400 failed
wp  %p SdbusHS400RetuningWorker completed
wp  %p SDIO Reset Initiated
wp  %p SDIO Reset Complete
wp  %p SDIO Reset Failed
wp  %p MMC Wake Initiated
wp  %p MMC Wake Complete
wp  %p MMC Wake Failed
wp  %p MMC Sleep Initiated
wp  %p MMC Sleep Complete
wp  %p MMC Sleep Failed
wp  %p SdbusArmWakeInterrupt Entered
wp  %p soft reset MMC card fails
wp  %p MSR_CMD1_LOOP_RESPONSE - retry sequence after delay
wp  %p SdbusMmcSoftResetWorker COMPLETE, rca=0x%08x
wp  %p MmcSoftReset ABORT!
skt %p ActivateSocket START type(%d)
skt %p ActivateSocketWorker error exit, status=%X
skt %p ActivateSocket delaying(%d) for VERIFY_CARD_STATE
FALSE
skt %p cardInSocket=%s
pdo %p ActivateSocket RequestFunctionStart, activecount=%d
pdo %p ActivateSocket RequestFunctionStop, activecount=%d
skt %p activateSocketWorker switch to: %s
skt %p activateSocketWorker card state: %s
skt %p ActivateSocketComplete: status=0x%X
skt %p ActivateSocketComplete: verify socket failed and will retry: retry=%d
skt %p ActivateSocketComplete: start PDO failed and will retry: retry=%d, pdo=%p, type=%d
Will attempt to power off (%x)
Failed (%x) to build power off work packet for %p
Socket %p powered off
Failed (%x) to power off socket %p
wp  %p GetDeviceConfig Entered
------------------------CID----------------------
ManufacturerId=%02x OEMId=%04x Rev=%02x PSN=%08x
ProductName=%s
ManufacturerDate=%02d/%04d
-------------------------------------------------
------------------------CSD----------------------
max trans rate=0x%x
classes=0x%x
device cap=%I64u
max block len=%d
wp  %p SDIO card sdio spec revision=%x
wp  %p SDIO card support high speed=%x
wp  %p SDIO card support async interrupt=%x
wp  %p SDIO card capabilities=%x
wp  %p SDIO Process COMMON tuple chain: CCCR cisPtr=%.06x
wp  %p SDIO fn(%d) IoDeviceInterface=%x
wp  %p SDIO Process FUNCTION(%d) Tuple Chain: cisPtr=%.06x
wp  %p CardData is already in socket - known card
wp  %p New CardData - invalidating old card data
wp  %p func(%d) didn't provide block size limit, uses 64 by default
wp  %p INVALID cisPtr=%.06x
CIS %.06x code=%.02x - END OF CHAIN
wp  %p ProcessTuplePacket returns 0x%08x
wp  %p ProcessTupleChain COMPLETE %08x
CIS %.06x code=%.02x link=%.02x
CISTPL_MANFID invalid link %x
CISTPL_MANFID fn(%d) code=%x, inf=%x
CISTPL_VERS_1 MfgText longer than Link
CISTPL_VERS_1 MfgText longer than MAX_MANFID_LENGTH
CISTPL_VERS_1 ProductText longer than Link
CISTPL_VERS_1 MfgText longer than MAX_IDENT_LENGTH
CISTPL_VERS_1 fn(%d) %s %s
CISTPL_FUNCID invalid link %x
CISTPL_FUNCID invalid id %x
CISTPL_FUNCE TPLFE_TYPE(%x) does not match for function 0
CISTPL_FUNCE link %x not big enough for function 0
CISTPL_FUNCE (0) blksize %04x transpeed %02x
CISTPL_FUNCE TPLFE_TYPE(%x) does not match for function %d
CISTPL_FUNCE link %x not big enough for function %d
CISTPL_FUNCE (%d) FuncInfo %02x blksize %04x PSN %08x
wp  %p SdbusDetectBusWidthWorker: card is locked, unable to read SCR
wp  %p SdbusDetectBusWidthWorker: sdio card caps %x
wp  %p hackflag disables 8-bit bus!
wp  %p SdbusDetectBusWidthWorker: non-MMC 4.x memory card
wp  %p SdbusDetectBusWidthWorker: BUSTEST 8 Error!
wp  %p SdbusDetectBusWidthWorker: BUSTEST 4 Error!
wp  %p SdbusDetectBusWidthWorker: Read SCR Error!
wp  %p SD spec version=%d, support wide bus=%d, enable wide bus=%d
wp  %p sdio card: max norm freq=%d, max high freq=%d
wp  %p max norm freq=%d
wp  %p high speed and UHS are not enabled. max high freq=%d
wp  %p max high freq=%d, cur fre=%d
wp  %p Read CSD Error!
wp  %p cur fre=%d
wp  %p BasicCommand START
wp  %p BasicCommand COMPLETE
wp  %p BasicCommand: deselect command timed out
wp  %p BasicCommand: select command timed out
wp  %p ======== SdbusDataCommandWorker: begin I/O ========
wp  %p DataTransfer zero length!
wp  %p   Overall transfer info: length=%d
address=0x%08x
wp  %p Can't map memory. Switch to low memory mode
wp  %p transfer length is not correct
wp  %p  GetScatterGatherList failed, transitioning to low memory mode 0x%x
wp  %p  enter low mem mode
wp  %p  Mapping address failed in low mem mode
wp  %p  next tran: len=%d
addr=0x%05x
bcnt=%d
bsz=%d
tm=%d
mbcnt=%d
Hpi Query EXT_CSD
Hpi do not query EXT_CSD
wp  %p DataCommandWorker COMPLETE, Info=0x%x
Hpi EXT_CSD received: correct sector count %d
wp  %p DataCommandWorker card status reported card lock state is %x
wp %p DataCommandWorker CardStatus Reported Error %x
wp  %p DataCommandWorker TIMEOUT on card in transfer state %x
wp  %p DataCommandWorker I/O error(0x%08x)! Info=0x%x
wp  %p ValidateDeviceCommand - invalid pdo state!
wp  %p ValidateDeviceCommand - cmd blocked!
tl                   SDBus_BatchedIOError: UnloggedErrorCount:%llu
SDBus_BatchedIOError
ElapsedTime100ns
UnloggedErrorCount
CorrelationId
SDBus_IOError
Status
ErrorStates
TransferDirection
TransferType
CmdLength
CompatType
HostRevision
CorrelationId
SDBus_Activation
Status
LastError
FunctionType
CompatType
HostRevision
CorrelationId
SDBus_WorkingStatus
HighSpeedEnabled
SDR104Enabled
SDR50Enabled
DDR50Enabled
Signaling1_8VEnabled
HS200Enabled
HS400Enabled
WideBusEnabled
Wide8BitBusEnabled
PresetValueEnabled
PowerOffNotificationEnabled
CorrelationId
SDBus_SocketCapabilities
SupportHighSpeed
SupportDma
SupportAdma2
Support64Bus
Support8BitBus
SupportSDR50
SupportSDR104
SupportDDR50
SupportHS200
SupportHS400
UseTuningForSDR50
NeedsSoftwareRetuner
SupportDriverTypeA
SupportDriverTypeB
SupportDriverTypeC
SupportDriverTypeD
SupportCurrentLimit200
SupportCurrentLimit400
SupportCurrentLimit600
SupportCurrentLimit800
SupportAutoCmd23
RetuningTimerCount100ns
VoltageProfile
ADMADescriptorSize
MaxBlockSize
MaxBlcokCount
BaseClockFrequency
AlignmentRequirement
SpecVersion
DsmFunctionsSupported
CorrelationId
SDBus_CardDetails_SDIO
SupportHighCapacity
SupportHighSpeed
SupportSDR104
SupportSDR50
SupportDDR50
SupportHS200
SupportHS400
Support1_8VSignaling
SupportDriverTypeA
SupportDriverTypeB
SupportDriverTypeC
SupportDriverTypeD
SupportCurrentLimit200
SupportCurrentLimit400
SupportCurrentLimit600
SupportCurrentLimit800
SupportDriverType0
SupportDriverType1
SupportDriverType2
SupportDriverType3
SupportWideBus
Support8BitBus
CardIsLocked
CardIsWriteProtected
NumIoFunctions
MemFunction
VoltageProfile
MaxNormalFrequency
MaxHighFrequency
SpecVersion
CardCapabilities
MaxDataTransferRate
IoDeviceInterface
HasManfid
MfgId
MfgInfo
MaxBlockLength
SerialNumber
FunctionInfo
MfgText
ProductText
CorrelationId
SDBus_CardDetails_Mem
SupportHighCapacity
SupportHighSpeed
SupportSDR104
SupportSDR50
SupportDDR50
SupportHS200
SupportHS400
Support1_8VSignaling
SupportDriverTypeA
SupportDriverTypeB
SupportDriverTypeC
SupportDriverTypeD
SupportCurrentLimit200
SupportCurrentLimit400
SupportCurrentLimit600
SupportCurrentLimit800
SupportDriverType0
SupportDriverType1
SupportDriverType2
SupportDriverType3
SupportWideBus
Support8BitBus
CardIsLocked
CardIsWriteProtected
NumIoFunctions
MemFunction
VoltageProfile
MaxNormalFrequency
MaxHighFrequency
SpecVersion
ManufacturerId
OemId
Revision
ManufactureYear
ManufactureMonth
ProductName
SerialNumber
CommandClasses
DeviceCapacity
MaxBlockLength
MaxDataTransferRate
CardBga
SupportAutoCmd23
PowerOffLongTimeout
HighCapacityEraseSize
HighCapacityWriteProtectSize
HighCapacityWriteGroupSupported
CorrelationId
SDBus_CardPerformance
correlationId
compatType
hostRevision
manufacturerId
productId
systemUptime_s
version
totalIoCount
maxDeviceQueueCount
maxOutstandingCount
maxReadWriteLatency_ms
type1LatencyBucket0Count
type1LatencyBucket1Count
type1LatencyBucket2Count
type1LatencyBucket3Count
type1LatencyBucket4Count
type1LatencyBucket5Count
bucketType1IoType
bucketType1IoSize
bucketType1IoLatency
timeSinceLastSentMS
ioCountArray
JIoWriteBytes
IoWriteCount
IoReadBytes
IoReadCount
IoOtherBytes
IoOtherCount
Microsoft.Windows.Storage.SDBus
RSDSl8
dumpsd.pdb
.text
.text$mn
.text$mn$00
.text$mn$21
.rdata$brc
.rdata
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zzzdbg
.xdata
.data$brc
.data
.pdata
.idata$5
.00cfg
.idata$2
.idata$3
.idata$4
.idata$6
fogrp
.edata
.gfids
.rsrc$01
.rsrc$02
RtlQueryFeatureConfigurationChangeStamp
RtlQueryFeatureConfiguration
RtlRegisterFeatureConfigurationChangeNotification
RtlUnregisterFeatureConfigurationChangeNotification
PoSetHiberRange
KeInitializeSpinLock
KeBugCheckEx
vDbgPrintExWithPrefix
ntoskrnl.exe
HalDmaAllocateCrashDumpRegistersEx
HalDmaFreeCrashDumpRegistersEx
KeQueryPerformanceCounter
KeStallExecutionProcessor
HAL.dll
vDbgPrintEx
strstr
DbgPrintEx
EtwWriteTransfer
MmMapIoSpaceEx
MmUnmapIoSpace
MmGetPhysicalAddress
PoFxPowerControl
KeQueryTimeIncrement
KeAcquireInStackQueuedSpinLockAtDpcLevel
KeReleaseInStackQueuedSpinLockFromDpcLevel
KeAcquireSpinLockAtDpcLevel
KeReleaseSpinLockFromDpcLevel
RtlInitializeBitMap
RtlSetAllBits
RtlClearAllBits
RtlClearBit
RtlSetBit
PoFxActivateComponent
PoFxIdleComponent
ExAllocateFromLookasideListEx
ExFreePoolWithTag
ExFreeToLookasideListEx
KeInitializeEvent
KeWaitForSingleObject
KeSetEvent
KfRaiseIrql
KeLowerIrql
KeInsertQueueDpc
KeCancelTimer
KeSetTimer
KeQueryInterruptTimePrecise
KeClearEvent
IoQueueWorkItemEx
KeSetCoalescableTimer
PoFxSetComponentLatency
PoFxSetComponentResidency
KeGetCurrentIrql
IofCallDriver
ExAllocatePool2
IoBuildDeviceIoControlRequest
IoTryQueueWorkItem
MmBuildMdlForNonPagedPool
KeSynchronizeExecution
IoInvalidateDeviceRelations
RtlCompareMemory
MmMapLockedPagesSpecifyCache
IoBuildPartialMdl
MmMapLockedPagesWithReservedMapping
MmUnmapLockedPages
MmUnmapReservedMapping
D$(H!D$(H
3L$ H
L$@H3
dumpsd.sys
DumpPreInitialize
DumpUninitialize
H!D$(H!D$ H
D$88C
L$@H3
WEVT_TEMPLATE
VS_VERSION_INFO
StringFileInfo
000004B0
CompanyName
Microsoft Corporation
FileDescription
SD Crashdump Port Driver
FileVersion
10.0.22621.1 (WinBuild.160101.0800)
InternalName
dumpsd.sys
LegalCopyright
 Microsoft Corporation. All rights reserved.
OriginalFilename
dumpsd.sys
ProductName
Microsoft
 Windows
 Operating System
ProductVersion
10.0.22621.1
VarFileInfo
Translation
Interrupt handling
eMMC specific processing
SDIO specific processing
SD specific processing
Sdbus P-state frequency scaling
SD bus errors
SD bus DPC
SD bus request
Start
Information
Interrupt
Callback Routine
Retune
 Error
HPI IO
P-State Request
P-State Completion
Command Issued
Command Completed
HPI CMD Issued
HPI CMD Accepted
HPI Worker Process
P-State Utilization
SdbusWorkerDpc
SdbusRequest
Interrupt detected in ISR.%nSD Host Physical Address: %1%nEvents (masked): %2
Entering callback routine.%nSD Host Physical Address: %1
Exiting callback routine.%nSD Host Physical Address: %1
Retuning Sequence detected.%nSD Host Physical Address: %1%nRetuning Count: %2
Error in bus transfer.%nSD Host Physical Address: %1%nError Code: %2%nError Count: %3
Hpi IO detected.%nSD Host Physical Address: %1%nHpi Count: %2
P-State change requested.%nPoFx Device Handle: %1%nP-State Requested: %2%nP-State Request Count: %3
P-State change requested.%nPoFx Device Handle: %1%nP-State Completed: %2%nP-State Completion Count: %3
Command issued.%nSD Host Physical Address: %1%nCommand: %2%nArgument: %3%nSize: %4
Command completed.%nSD Host Physical Address: %1%nCommand: %2%nArgument: %3%nSize: %4
Hpi CMD sent to the hardware. IRP %1
Hpi CMD was accepted by the hardware. IRP %1
Hpi CMD worker started. IRP %1
Hpi CMD worker exited. IRP %1 Reason: %2
P-State change requested.%nPoFx Device Handle: %1%nP-State Active Percentage: %2%nP-State Active Duration: %3%nP-State Sample Duration: %4%nP-State Current Frequency: %5%nP-State Requested Frequency: %6
SdbusWorkerDpcEnter: SD Host Physical Address: %1 Irp: %2 Workpacket Function: %3 CurrentState: %4 FunctionPhase: %5
SdbusWorkerDpcExit: SD Host Physical Address: %1 Irp: %2 Workpacket Function: %3 CurrentState: %4 FunctionPhase: %5
SdbusRequestStart: SD Host Physical Address: %1 Irp: %2 Cmd: %3 Arg: %4 Status: %5
SdbusRequestComplete: SD Host Physical Address: %1 Irp: %2 Cmd: %3 Arg %4 Status %5
Scheduled callback routine.%nSD Host Physical Address: %1
Interrupt DPC scheduled.
Interrupt DPC entered.
Interrupt DPC exited.
CRIMd(
WEVT@(
Microsoft-Windows-Sdbus/Analytic
Microsoft-Windows-Sdbus/Debug
TTBL`
TEMP`
EventData
SDHostPhysicalAddress
EventMask
SDHostPhysicalAddress
EventMask
TEMPP
EventData
EventData
SDHostPhysicalAddress
SDHostPhysicalAddress
TEMPh
EventData
SDHostPhysicalAddress
RetuneCount
SDHostPhysicalAddress
RetuneCount
EventData
SDHostPhysicalAddress
ErrorCode
ErrorCount
SDHostPhysicalAddress
ErrorCode
ErrorCount
TEMPd
EventData
SDHostPhysicalAddress
HpiIoCount
SDHostPhysicalAddress
HpiIoCount
EventData
EventData
TEMP(
9Xr&M
EventData
HpiExitReason
HpiExitReason
EventData
PoFx Device Handle
PStateRequested
PStateRequestCount
PoFx Device Handle
PStateRequested
PStateRequestCount
EventData
PoFx Device Handle
PStateCompleted
PStateCompletionCount
PoFx Device Handle
PStateCompleted
PStateCompletionCount
TEMP$
EventData
SDHostPhysicalAddress
Command
Argument
SDHostPhysicalAddress
Command
Argument
TEMP$
EventData
SDHostPhysicalAddress
Command
Argument
SDHostPhysicalAddress
Command
Argument
EventData
PoFx Device Handle
PStateActivePercent
PStateActiveDuration
PStateSampleDuration
PStateCurrentFrequency
PStateRequestedFrequency
PoFx Device Handle
PStateActivePercent
PStateActiveDuration
PStateSampleDuration
PStateCurrentFrequency
PStateRequestedFrequency
TEMP\
\Q-]T
EventData
SDHostPhysicalAddress
WorkPacket.WorkerProcFunction
WorkEngine.CurrentState
WorkEngine.FunctionPhase
SDHostPhysicalAddress
WorkPacket.WorkerProcFunction
WorkEngine.CurrentState
WorkEngine.FunctionPhase
EventData
SDHostPhysicalAddress
WorkEngine.Command
WorkEngine.Argument
Status
SDHostPhysicalAddress
WorkEngine.Command
WorkEngine.Argument
Status
PRVAD
Microsoft-Windows-Sdbus
OPCOx
win:Info
win:Start
win:Stop
LEVL@
win:Informational
Task.Interrupt
Task.CallbackRoutine
Task.Retune
Task.Error
Task.HpiIo
Task.PStateRequest
Task.PStateCompletion
Task.CommandIssued
Task.CommandCompleted
Task.HpiCmdIssue
Task.HpiCmdAccepted
Task.HpiCmdWorker
Task.PStateUtilization
Task.SdbusWorkerDpc
Task.SdbusRequest
Interrupt
Error
Request
WEVT_TEMPLATE
en-US
X*[&\
P+PlP
SLTrT
VS"\{_
Za[']D]
STSVU
U>Y<[
^K_n_
\-]-_
Washington1
Redmond1
Microsoft Corporation1.0,
%Microsoft Windows Production PCA 20110
210902182341Z
220901182341Z0p1
Washington1
Redmond1
Microsoft Corporation1
Microsoft Windows0
2y80T
I0G1-0+
$Microsoft Ireland Operations Limited1
229879+4675800
M0K0I
Chttp://www.microsoft.com/pkiops/crl/MicWinProPCA2011_2011-10-19.crl0a
U0S0Q
Ehttp://www.microsoft.com/pkiops/certs/MicWinProPCA2011_2011-10-19.crt0
Et,@8
Zof1G
WaNja
T^r|B
uOi@Y
Washington1
Redmond1
Microsoft Corporation1200
)Microsoft Root Certificate Authority 20100
111019184142Z
261019185142Z0
Washington1
Redmond1
Microsoft Corporation1.0,
%Microsoft Windows Production PCA 20110
O0M0K
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
N0L0J
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
TlP0X
R!s4Z
Washington1
Redmond1
Microsoft Corporation1.0,
%Microsoft Windows Production PCA 2011
,NayKqxF0VsAgYuTmwrK2A/6+FA0Q7THGlKnKfPM+JPI=0Z
"Microsoft Window
 http://www.microsoft.com/windows0
`X~}.
20220506222155.605Z0
Washington1
Redmond1
Microsoft Corporation1%0#
Microsoft America Operations1&0$
Thales TSS ESN:3E7A-E359-A25D1%0#
Microsoft Time-Stamp Service
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
211202190523Z
230228190523Z0
Washington1
Redmond1
Microsoft Corporation1%0#
Microsoft America Operations1&0$
Thales TSS ESN:3E7A-E359-A25D1%0#
Microsoft Time-Stamp Service0
jOBh9G
X0V0T
Nhttp://www.microsoft.com/pkiops/crl/Microsoft%20Time-Stamp%20PCA%202010(1).crl0l
`0^0\
Phttp://www.microsoft.com/pkiops/certs/Microsoft%20Time-Stamp%20PCA%202010(1).crt0
 *EQts
>UoML7V
z 1Y"B
rPttLx
M9&jp[
Washington1
Redmond1
Microsoft Corporation1200
)Microsoft Root Certificate Authority 20100
210930182225Z
300930183225Z0|1
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
q\Q17
&S|9a
!]_0t
U0S0Q
3http://www.microsoft.com/pkiops/Docs/Repository.htm0
O0M0K
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
N0L0J
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
>NGdx
fg:SM
xSu$W
as.,k{n?,
J>f;O
!TkjE
Washington1
Redmond1
Microsoft Corporation1%0#
Microsoft America Operations1&0$
Thales TSS ESN:3E7A-E359-A25D1%0#
Microsoft Time-Stamp Service
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
20220506184635Z
20220507184635Z0w0=
1/0-0
1(0&0
MBCBV
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 2010
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 2010
u>tE&
Vr0K8<
