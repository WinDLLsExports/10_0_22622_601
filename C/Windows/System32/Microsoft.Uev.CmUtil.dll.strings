!This program cannot be run in DOS mode.
.text
`.rsrc
@.reloc
*v ~,@j )UU
X )UU
o )UU
X )UU
X )UU
1 )UU
X )UU
X )UU
Q )UU
X )UU
X )UU
X )UU
1 )UU
X )UU
v4.0.30319
#Strings
#GUID
#Blob
d--%I
B)-%<
T)-%<
f -%I
:--%I
<>9__10_0
<IncrementDigestVersion>b__10_0
<>9__20_0
<UpdateSettingDisplayName>b__20_0
<>9__11_0
<SaveResources>b__11_0
<>c__DisplayClass11_0
<>9__21_0
<UpdateSettingDescription>b__21_0
<>9__12_0
<SetSupportedPlatforms>b__12_0
<>9__22_0
<GetScript>b__22_0
<>9__13_0
<SetDetectionScript>b__13_0
<>9__23_0
<ReplaceScript>b__23_0
<>9__14_0
<GetRulesElement>b__14_0
<>9__15_0
<GetRuleElement>b__15_0
<>9__35_0
<LoadDigest>b__35_0
<>9__16_0
<SetComplianceRule>b__16_0
<>9__6_0
<CreateBaseline>b__6_0
<>9__17_0
<GetRootComplexSettingElement>b__17_0
<>9__7_0
<GetDigestAuthoringScopeId>b__7_0
<>c__DisplayClass7_0
<>9__18_0
<GetSimpleSettingElement>b__18_0
<>9__38_0
<CreateOrUpdateCi>b__38_0
<>9__8_0
<GetDigestLogicalName>b__8_0
<CreateOrUpdateBaseline>b__8_0
<>9__19_0
<GetTemplateValue>b__19_0
<>9__9_0
<GetDigestVersion>b__9_0
<UpdateBaseline>b__0
get_<>h__TransparentIdentifier0
<>9__10_1
<IncrementDigestVersion>b__10_1
<>9__11_1
<SaveResources>b__11_1
<>9__12_1
<SetSupportedPlatforms>b__12_1
<>9__22_1
<GetScript>b__22_1
<>9__13_1
<SetDetectionScript>b__13_1
<>9__14_1
<GetRulesElement>b__14_1
<>9__15_1
<GetRuleElement>b__15_1
<>9__35_1
<LoadDigest>b__35_1
<>9__16_1
<SetComplianceRule>b__16_1
<>9__17_1
<GetRootComplexSettingElement>b__17_1
<>9__7_1
<GetDigestAuthoringScopeId>b__7_1
<UpdateBaseline>b__7_1
<>9__8_1
<GetDigestLogicalName>b__8_1
<CreateOrUpdateBaseline>b__8_1
<>9__9_1
<GetDigestVersion>b__9_1
<>f__AnonymousType0`1
<>f__AnonymousType11`1
<>f__AnonymousType1`1
IEnumerable`1
PSDataCollection`1
PSMemberInfoCollection`1
EqualityComparer`1
IEnumerator`1
HashSet`1
IList`1
get_<>h__TransparentIdentifier1
Microsoft.Uev.UevCmUtil.UevScripts.GetBaselineItemFromCm.ps1
Microsoft.Uev.UevCmUtil.UevScripts.GetItemFromCm.ps1
Microsoft.Uev.UevCmUtil.UevScripts.RegistryPolicyRemediationBoolean.ps1
Microsoft.Uev.UevCmUtil.UevScripts.RegistryPolicyDiscoveryBoolean.ps1
Microsoft.Uev.UevCmUtil.UevScripts.RegisterTemplateRemediation.ps1
Microsoft.Uev.UevCmUtil.UevScripts.UnregisterTemplateRemediation.ps1
Microsoft.Uev.UevCmUtil.UevScripts.ServiceStateRemediation.ps1
Microsoft.Uev.UevCmUtil.UevScripts.Win8AppRemediation.ps1
Microsoft.Uev.UevCmUtil.UevScripts.RegistryPolicyRemediation.ps1
Microsoft.Uev.UevCmUtil.UevScripts.Detection.ps1
Microsoft.Uev.UevCmUtil.UevScripts.RegisterTemplateDiscovery.ps1
Microsoft.Uev.UevCmUtil.UevScripts.UnregisterTemplateDiscovery.ps1
Microsoft.Uev.UevCmUtil.UevScripts.ServiceStateDiscovery.ps1
Microsoft.Uev.UevCmUtil.UevScripts.PackageExceededMaxSizeDiscovery.ps1
Microsoft.Uev.UevCmUtil.UevScripts.Win8AppDiscovery.ps1
Microsoft.Uev.UevCmUtil.UevScripts.RegistryPolicyDiscovery.ps1
ToInt32
<>9__11_2
<SaveResources>b__11_2
<>9__12_2
<SetSupportedPlatforms>b__12_2
<>9__13_2
<SetDetectionScript>b__13_2
<>9__14_2
<GetRulesElement>b__14_2
<>9__15_2
<GetRuleElement>b__15_2
<>9__35_2
<LoadDigest>b__35_2
<>9__17_2
<GetRootComplexSettingElement>b__17_2
<>9__9_2
<GetDigestVersion>b__9_2
<>f__AnonymousType10`2
<>f__AnonymousType2`2
<>f__AnonymousType3`2
<>f__AnonymousType4`2
<>f__AnonymousType5`2
<>f__AnonymousType6`2
<>f__AnonymousType7`2
<>f__AnonymousType8`2
<>f__AnonymousType9`2
Func`2
Action`2
KeyValuePair`2
IDictionary`2
<>h__TransparentIdentifier2
<>9__11_3
<SaveResources>b__11_3
<>9__12_3
<SetSupportedPlatforms>b__12_3
<>9__13_3
<SetDetectionScript>b__13_3
<>9__15_3
<GetRuleElement>b__15_3
<>9__35_3
<LoadDigest>b__35_3
Func`3
<>9__15_4
<GetRuleElement>b__15_4
<SaveResources>b__4
<>9__15_5
<GetRuleElement>b__15_5
SHA256
<>9__15_6
<GetRuleElement>b__15_6
get_UTF8
<Module>
get_CI_ERROR_WRITING_CAB
get_ERROR_SET_SCRIPT_FAILED
get_SF_UNIMPLEMENTED_SCRIPT_TYPE_REQUESTED
get_CI_ERROR_AUTHORING_SCOPE_ID_NOT_FOUND
get_CI_ERROR_LOGICAL_NAME_NOT_FOUND
get_TC_ERROR_TEMPLATE_NOT_FOUND
get_CI_ERROR_CONFIGURATION_ITEM_NOT_FOUND
get_BI_ERROR_CAB_DIRECTORY_NOT_FOUND
get_BI_ERROR_CM_SERVICE_NOT_AVAILABLE
get_ERROR_EMPTY_SCRIPT_FILE
get_ERROR_NULL_CAB_FILE_NAME
get_TEXT_SETTING_RULE_NAME
get_BI_TEXT_DEFAULT_BASELINE_NAME
get_CI_TEXT_CONFIGURATION_ITEM_NAME
get_TEXT_DEFAULT_POLICY_NAME
get_ERROR_SCRIPT_INVALID_SCRIPT_TYPE
get_ERROR_SCRIPT_MISSING_SCRIPT_TYPE
get_SC_INVALID_SCRIPT_PURPOSE
get_TC_ERROR_LOADING_TEMPLATE
get_CI_TEXT_REGISTER_UEV_TEMPLATE
get_CI_TEXT_UNREGISTER_UEV_TEMPALTE
get_ERROR_INVALID_NULL_SETTING
get_ASCII
get_ERROR_NULL_REQUIRED_PARAM
get_CI_ERROR_DETECTION_MISSING_TEMPLATE_VERSION
get_ERROR_SCRIPT_MISSING_TEMPLATE_VERSION
get_ERROR_SCRIPT_MISSING_VERSION
get_CI_ERROR_DETECTION_MISSING_SCRIPT_VERSION
get_SC_DETECTION_SCRIPT_MISSING_ACTION
get_ERROR_SCRIPT_MISSING_ACTION
get_CI_ERROR_DETECTION_MISSING_SCRIPT_ACTION
get_TEXT_SETTING_RULE_DESCRIPTION
get_BI_TEXT_DEFAULT_BASELINE_DESCRIPTION
get_CI_TEXT_UNREGISTER_SETTING_DESCRIPTION
get_CI_TEXT_REGISTER_SETTING_DESCRIPTION
get_CI_TEXT_CONFIGURATION_ITEM_DESCRIPTION
get_TEXT_DEFAULT_POLICY_DESCRIPTION
System.IO
get_CI_ERROR_CHECKING_CM_SERVER
get_TC_ERROR_MISSING_TEMPLATE_ELEMENT
get_ERROR_MISSING_SETTING_ELEMENT
get_ERROR_MISSING_DIGEST_VERSION_ELEMENT
get_ERROR_NULL_SETTINGS_ELEMENT
get_ERROR_INVALID_PROGRAM_ARGMENT
get_ERROR_FAILED_TO_LOAD_SCRIPT
get_ERROR_FAILED_TO_FIND_SCRIPT
get_ERROR_NULL_DETECTION_SCRIPT
get_ERROR_NULL_DIGEST
get_ERROR_NULL_CONFIGURATION_ITEMS_LIST
value__
GetTemplateSchema
Microsoft.Uev.UevCmUtil.UevScripts.ResourcesData
Microsoft.ConfigurationManagement.AdminConsole.Common.Cab
WriteCab
mscorlib
get_Sc
System.Collections.Generic
get_Id
get_AuthoringScopeId
get_DigestAuthoringScopeId
set_DigestAuthoringScopeId
GetDigestAuthoringScopeId
get_TemplateId
NewGuid
<<>h__TransparentIdentifier0>i__Field
<<>h__TransparentIdentifier1>i__Field
<Sc>i__Field
<Id>i__Field
<AuthoringScopeId>i__Field
<reference>i__Field
<Rule>i__Field
<xRule>i__Field
<LogicalName>i__Field
<TemplateValue>i__Field
<Setting>i__Field
<operatingSystemExpression>i__Field
<xExpression>i__Field
<application>i__Field
<platformApplicabilityCondition>i__Field
<scriptDiscoveryInfo>i__Field
<Attr>i__Field
<xOperands>i__Field
<Text>i__Field
<DigestAuthoringScopeId>k__BackingField
<ValidationMethod>k__BackingField
<SiteCode>k__BackingField
<DigestXmlFileName>k__BackingField
<DigestResxFileName>k__BackingField
<RuleName>k__BackingField
<SettingName>k__BackingField
<CiName>k__BackingField
<SettingLogicalName>k__BackingField
<DigestLogicalName>k__BackingField
<RemediationScriptName>k__BackingField
<DiscoveryScriptName>k__BackingField
<UevTemplate>k__BackingField
<UevTemplatePath>k__BackingField
<RegistrationAction>k__BackingField
<RuleDescription>k__BackingField
<SettingDescription>k__BackingField
<CiDescription>k__BackingField
<IsPerUser>k__BackingField
<SubstitutionParams>k__BackingField
<ConfigurationItems>k__BackingField
<Xmlns>k__BackingField
<RemediationScript>k__BackingField
<DetectionScript>k__BackingField
<DiscoveryScript>k__BackingField
<Digest>k__BackingField
ReadToEnd
Append
get_ValidationMethod
set_ValidationMethod
validationMethod
GetCurrentMethod
ErrorRecord
Microsoft.Uev.UevCmUtil.UevScripts.UevAgentConfiguration.xsd
Microsoft.Uev.UevCmUtil.UevScripts.Rules.xsd
Microsoft.Uev.UevCmUtil.UevScripts.DcmDigest.xsd
Replace
XNamespace
applicationReference
get_reference
GetFileContentFromResource
get_SiteCode
set_SiteCode
siteCode
GetHashCode
XNode
get_Message
message
Invoke
GetEnvironmentVariable
Enumerable
IDisposable
RuntimeTypeHandle
GetTypeFromHandle
get_Rule
SetComplianceRule
get_xRule
XName
get_Name
get_NamespaceName
cabFileName
get_DigestXmlFileName
set_DigestXmlFileName
scriptFileName
get_DigestResxFileName
set_DigestResxFileName
fileName
get_RuleName
set_RuleName
ruleName
baselineName
get_TemplateName
get_SettingName
set_SettingName
settingName
argName
get_CiName
set_CiName
get_LogicalName
get_SettingLogicalName
set_SettingLogicalName
settingLogicalName
GetSettingsLogicalName
get_DigestLogicalName
set_DigestLogicalName
GetDigestLogicalName
resxFileFullName
elementName
get_RemediationScriptName
set_RemediationScriptName
remediationScriptName
get_DiscoveryScriptName
set_DiscoveryScriptName
discoveryScriptName
UpdateSettingDisplayName
SettingsDisplayName
displayName
policyName
scriptBodyName
Combine
CreateOrUpdateBaseline
CreateBaseline
isBaseline
ScriptType
Compare
Where
System.Core
get_Culture
set_Culture
resourceCulture
get_InvariantCulture
get_CurrentCulture
MethodBase
ConfigurationItemBase
ScriptPurpose
purpose
Dispose
Parse
Create
Aggregate
get_UevTemplate
set_UevTemplate
DebuggerBrowsableState
EditorBrowsableState
XAttribute
CompilerGeneratedAttribute
GuidAttribute
GeneratedCodeAttribute
DebuggerNonUserCodeAttribute
NeutralResourcesLanguageAttribute
DebuggableAttribute
DebuggerBrowsableAttribute
EditorBrowsableAttribute
ComVisibleAttribute
AssemblyTrademarkAttribute
TargetFrameworkAttribute
DebuggerHiddenAttribute
AssemblyConfigurationAttribute
AssemblyDescriptionAttribute
InternalsVisibleToAttribute
CompilationRelaxationsAttribute
AssemblyProductAttribute
AssemblyCopyrightAttribute
CLSCompliantAttribute
AssemblyCompanyAttribute
RuntimeCompatibilityAttribute
get_Value
set_Value
get_TemplateValue
GetTemplateValue
SetValue
value
IndexOf
DescendantsAndSelf
AddAfterSelf
Encoding
System.Runtime.Versioning
ToString
GetString
Substring
get_Setting
SetSimpleSetting
simpleSetting
setting
IsMatch
ComputeHash
GetHash
get_UevTemplatePath
set_UevTemplatePath
uevTemplatePath
cabFullPath
GetFullPath
fullPath
GetTempPath
get_Length
ReplaceWith
CreateOrUpdateCi
CreateCi
System.Collections.ObjectModel
System.ComponentModel
Microsoft.Uev.CabUtil
Microsoft.Uev.CmUtil
Microsoft.Uev.UevCmUtil
Microsoft.Uev.CmUtil.dll
PowerShell
System.Xml
get_Xml
GetManifestResourceStream
BaselineItem
ConfigurationItem
PolicyItem
System
HashAlgorithm
resourceMan
get_TemplateFileNameWithoutExtension
GetFileNameWithoutExtension
get_TemplateVersion
GetUevTemplateVersion
GetRemediationScriptVersion
GetScriptVersion
GetDiscoveryScriptScriptVersion
GetDigestVersion
IncrementDigestVersion
get_operatingSystemExpression
get_xExpression
get_application
RegisterRemediation
UnregisterRemediation
PolicyRemediation
System.Management.Automation
annotation
System.Globalization
System.Runtime.Serialization
get_RegistrationAction
set_RegistrationAction
registrationAction
ConfigurationAction
GetRemediationScriptAction
GetScriptAction
GetDiscoveryScriptAction
System.Reflection
Detection
op_Addition
get_platformApplicabilityCondition
FileNotFoundException
DirectoryNotFoundException
UevTemplateException
CmCmdLineArgException
CmUtilException
ArgumentNullException
XmlException
CmException
InvalidOperationException
innerException
CmScriptException
CmDigestException
get_RuleDescription
set_RuleDescription
ruleDescription
baselineDescription
get_SettingDescription
set_SettingDescription
UpdateSettingDescription
settingDescription
get_CiDescription
set_CiDescription
SettingsDescription
policyDescription
description
StringComparison
CultureInfo
SerializationInfo
PSMemberInfo
CabinetInfo
get_scriptDiscoveryInfo
DirectoryInfo
PSPropertyInfo
System.Xml.Linq
System.Linq
<<>h__TransparentIdentifier0>j__TPar
<<>h__TransparentIdentifier1>j__TPar
<Sc>j__TPar
<Id>j__TPar
<AuthoringScopeId>j__TPar
<reference>j__TPar
<Rule>j__TPar
<xRule>j__TPar
<LogicalName>j__TPar
<TemplateValue>j__TPar
<Setting>j__TPar
<operatingSystemExpression>j__TPar
<xExpression>j__TPar
<application>j__TPar
<platformApplicabilityCondition>j__TPar
<scriptDiscoveryInfo>j__TPar
<Attr>j__TPar
<xOperands>j__TPar
<Text>j__TPar
StreamReader
TextReader
IFormatProvider
StringBuilder
get_ExportFolder
outputFolder
get_ResourceManager
System.CodeDom.Compiler
XContainer
UevTemplateContainer
uevTemplateContainer
ScriptContainer
get_IsPerUser
set_IsPerUser
isPerUser
StreamWriter
TextWriter
Register
Unregister
get_Error
IEnumerator
GetEnumerator
.ctor
.cctor
get_Attr
ResourceNs
RuleNs
DesiredConfigurationNs
System.Diagnostics
ruleOperands
get_xOperands
System.Runtime.InteropServices
System.Runtime.CompilerServices
System.Resources
SaveResources
Microsoft.Uev.UevCmUtil.Properties.Resources.resources
DebuggingModes
Microsoft.Uev.UevCmUtil.Properties
get_Properties
CompressFiles
rules
Attributes
GetBytes
complexSettings
settings
Equals
get_Streams
PSDataStreams
get_SubstitutionParams
set_SubstitutionParams
requiredItems
get_ConfigurationItems
set_ConfigurationItems
configurationItems
items
SetSupportedPlatforms
get_Xmlns
set_Xmlns
System.Text.RegularExpressions
System.Collections
SaveOptions
RegexOptions
Helpers
Descendants
Elements
Exists
Concat
Format
PSObject
XObject
Select
op_Implicit
get_Default
FirstOrDefault
Result
XElement
GetRuleElement
uevTemplateElement
GetSimpleSettingElement
GetRootComplexSettingElement
rootComplexSettingElement
applicationElement
GetRulesElement
scriptElement
Environment
get_Parent
get_Current
current
get_XmlContent
uevTemplateXmlContent
ScriptContent
scriptContent
get_DigestContent
content
get_Count
Except
AddScript
ReplaceScript
CreateScript
get_RemediationScript
set_RemediationScript
remediationScript
get_DetectionScript
set_DetectionScript
SetDetectionScript
detectionScript
GetScript
get_DiscoveryScript
set_DiscoveryScript
discoveryScript
script
Convert
get_Digest
set_Digest
LoadDigest
baselineDigest
SaveDigest
digest
ToList
First
MoveNext
System.Text
get_Text
scriptText
StreamingContext
context
Regex
ToArray
discoveryScriptBody
scriptBody
get_Key
System.Security.Cryptography
get_Assembly
GetExecutingAssembly
SelectMany
RegisterDiscovery
UnregisterDiscovery
PolicyDiscovery
ScriptFactory
CreateDirectory
op_Equality
op_Inequality
IsNullOrEmpty
{{ LogicalName = {0} }}
{{ AuthoringScopeId = {0} }}
{{ Text = {0}, Id = {1} }}
{{ platformApplicabilityCondition = {0}, operatingSystemExpression = {1} }}
{{ application = {0}, scriptDiscoveryInfo = {1} }}
{{ Sc = {0}, Attr = {1} }}
{{ reference = {0}, xOperands = {1} }}
{{ <>h__TransparentIdentifier0 = {0}, xExpression = {1} }}
{{ <>h__TransparentIdentifier1 = {0}, xRule = {1} }}
{{ Text = {0}, Rule = {1} }}
{{ LogicalName = {0}, Setting = {1} }}
{{ TemplateValue = {0} }}
setting
uevTemplateContainer
%%UEVTEMPLATEID%%
%%UEVTEMPLATEVERSION%%
%%UEVTEMPLATESCHEMA%%
%%UEVTEMPLATE%%
%%PROPOSED_VERSION%%
%%FORCE%%
# Script Version: (?<version>[0-9]*)
${version}
Script Action: (?<action>[a-z]*)
${action}
Script Type: (?<type>[a-z]*)
${type}
PowerShell
JScript
VBScript
# UE-V Template Version: (?<version>-?[0-9a-fA-F]*)
siteCode
configurationItems
CI_UevTemplateBaseline.xml
CI_UevTemplateBaseline.en-US.resx
cabFileName
RequiredItems
ApplicationReference
AuthoringScopeId
LogicalName
ScriptSetting_d0a57337-66f3-40c6-a082-bdf2ac0d0ea2
CI_{0}.xml
CI_{0}.en-US.regx
outputFolder
{0}.cab
DiscoveryScriptBody
RemediationScriptBody
# Script Action: (?<action>[a-z]*)
Microsoft.Uev.UevCmUtil.UevScripts.{0}
UEVWorkingFolder
Application
Annotation
ResourcesData
space
preserve
value
Operands
RuleExpression
RuleId
Windows/All_x64_Windows_7_Client
Windows/All_x86_Windows_7_Client
Windows/x64_Windows_7_Client
Windows/x64_Windows_7_SP1
Windows/x86_Windows_7_Client
Windows/x86_Windows_7_SP1
Windows/All_x64_Windows_Server_2008_R2
Windows/x64_Windows_Server_2008_R2
Windows/x64_Windows_Server_2008_R2_CORE
Windows/x64_Windows_Server_2008_R2_SP1
Windows/x64_Windows_Server_2008_R2_SP1_Core
Windows/All_x64_Windows_8_Client
Windows/All_x86_Windows_8_Client
Windows/All_x64_Windows_Server_8
PlatformApplicabilityCondition
Rules
Settings
SettingReference
Rule_{0}
Severity
NonCompliantWhenSettingIsNotFound
false
DisplayName
ResourceId
ID-{0}
Description
Expression
Operator
Equals
DataType
Int64
SettingLogicalName
SettingSourceType
Script
Method
Value
Changeable
ConstantValue
RootComplexSetting
SimpleSetting
ScriptDiscoverySource
Is64Bit
IsPerUser
ScriptType
http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/07/10/DesiredConfiguration
http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/06/14/Rules
http://www.w3.org/XML/1998/namespace
SMS_ADMIN_UI_PATH
GetItemFromCm.ps1
GetBaselineItemFromCm.ps1
%%CiName%%
%%CiDescription%%
%%SiteCode%%
ScriptSetting_
settings
UevAgentConfig_{0}.xml
UevAgentConfig_{0}.en-US.regx
Detection.ps1
RegisterTemplateDiscovery.ps1
UnregisterTemplateDiscovery.ps1
RegisterTemplateRemediation.ps1
UnregisterTemplateRemediation.ps1
Version
http://schemas.microsoft.com
SettingsLocationTemplate
Microsoft.Uev.UevCmUtil.Properties.Resources
BI_ERROR_CAB_DIRECTORY_NOT_FOUND
BI_ERROR_CM_SERVICE_NOT_AVAILABLE
BI_TEXT_DEFAULT_BASELINE_DESCRIPTION
BI_TEXT_DEFAULT_BASELINE_NAME
CI_ERROR_AUTHORING_SCOPE_ID_NOT_FOUND
CI_ERROR_CHECKING_CM_SERVER
CI_ERROR_CONFIGURATION_ITEM_NOT_FOUND
CI_ERROR_DETECTION_MISSING_SCRIPT_ACTION
CI_ERROR_DETECTION_MISSING_SCRIPT_VERSION
CI_ERROR_DETECTION_MISSING_TEMPLATE_VERSION
CI_ERROR_LOGICAL_NAME_NOT_FOUND
CI_ERROR_WRITING_CAB
CI_TEXT_CONFIGURATION_ITEM_DESCRIPTION
CI_TEXT_CONFIGURATION_ITEM_NAME
CI_TEXT_REGISTER_SETTING_DESCRIPTION
CI_TEXT_REGISTER_UEV_TEMPLATE
CI_TEXT_UNREGISTER_SETTING_DESCRIPTION
CI_TEXT_UNREGISTER_UEV_TEMPALTE
ERROR_EMPTY_SCRIPT_FILE
ERROR_FAILED_TO_FIND_SCRIPT
ERROR_FAILED_TO_LOAD_SCRIPT
ERROR_INVALID_NULL_SETTING
ERROR_INVALID_PROGRAM_ARGMENT
ERROR_MISSING_DIGEST_VERSION_ELEMENT
ERROR_MISSING_SETTING_ELEMENT
ERROR_NULL_CAB_FILE_NAME
ERROR_NULL_CONFIGURATION_ITEMS_LIST
ERROR_NULL_DETECTION_SCRIPT
ERROR_NULL_DIGEST
ERROR_NULL_REQUIRED_PARAM
ERROR_NULL_SETTINGS_ELEMENT
ERROR_SCRIPT_INVALID_SCRIPT_TYPE
ERROR_SCRIPT_MISSING_ACTION
ERROR_SCRIPT_MISSING_SCRIPT_TYPE
ERROR_SCRIPT_MISSING_TEMPLATE_VERSION
ERROR_SCRIPT_MISSING_VERSION
ERROR_SET_SCRIPT_FAILED
SC_DETECTION_SCRIPT_MISSING_ACTION
SC_INVALID_SCRIPT_PURPOSE
SF_UNIMPLEMENTED_SCRIPT_TYPE_REQUESTED
TC_ERROR_LOADING_TEMPLATE
TC_ERROR_MISSING_TEMPLATE_ELEMENT
TC_ERROR_TEMPLATE_NOT_FOUND
TEXT_DEFAULT_POLICY_DESCRIPTION
TEXT_DEFAULT_POLICY_NAME
TEXT_SETTING_RULE_DESCRIPTION
TEXT_SETTING_RULE_NAME
OperatingSystemExpression
ScriptDiscoveryInfo
DesiredConfigurationDigest
SDMPackageXML
WrapNonExceptionThrows
en-US
UevCmUtil.uev.ut
$9b864d5a-ed47-4849-a791-799aee0b5fe4
*Microsoft (R) Windows (R) Operating System
9Copyright (c) Microsoft Corporation. All rights reserved.
Microsoft Corporation
.NETFramework,Version=v4.5
FrameworkDisplayName
3System.Resources.Tools.StronglyTypedResourceBuilder
4.0.0.0
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
PADPADP,U<
9zr\|}n
BI_ERROR_CAB_DIRECTORY_NOT_FOUND
BI_ERROR_CM_SERVICE_NOT_AVAILABLE
BI_TEXT_DEFAULT_BASELINE_DESCRIPTIONk
BI_TEXT_DEFAULT_BASELINE_NAME
CI_ERROR_AUTHORING_SCOPE_ID_NOT_FOUND
CI_ERROR_CHECKING_CM_SERVER
CI_ERROR_CONFIGURATION_ITEM_NOT_FOUND
CI_ERROR_DETECTION_MISSING_SCRIPT_ACTION
CI_ERROR_DETECTION_MISSING_SCRIPT_VERSION
CI_ERROR_DETECTION_MISSING_TEMPLATE_VERSION
CI_ERROR_LOGICAL_NAME_NOT_FOUND
CI_ERROR_WRITING_CAB
CI_TEXT_CONFIGURATION_ITEM_DESCRIPTION
CI_TEXT_CONFIGURATION_ITEM_NAME
CI_TEXT_REGISTER_SETTING_DESCRIPTION
CI_TEXT_REGISTER_UEV_TEMPLATE
CI_TEXT_UNREGISTER_SETTING_DESCRIPTION
CI_TEXT_UNREGISTER_UEV_TEMPALTE
ERROR_EMPTY_SCRIPT_FILE
ERROR_FAILED_TO_FIND_SCRIPT
ERROR_FAILED_TO_LOAD_SCRIPT
ERROR_INVALID_NULL_SETTING
ERROR_INVALID_PROGRAM_ARGMENT
ERROR_MISSING_DIGEST_VERSION_ELEMENT
ERROR_MISSING_SETTING_ELEMENT
ERROR_NULL_CAB_FILE_NAME
ERROR_NULL_CONFIGURATION_ITEMS_LIST
ERROR_NULL_DETECTION_SCRIPT
ERROR_NULL_DIGEST
ERROR_NULL_REQUIRED_PARAM
ERROR_NULL_SETTINGS_ELEMENT
ERROR_SCRIPT_INVALID_SCRIPT_TYPE
ERROR_SCRIPT_MISSING_ACTION
ERROR_SCRIPT_MISSING_SCRIPT_TYPE
ERROR_SCRIPT_MISSING_TEMPLATE_VERSION
ERROR_SCRIPT_MISSING_VERSION
ERROR_SET_SCRIPT_FAILED
SC_DETECTION_SCRIPT_MISSING_ACTION
SC_INVALID_SCRIPT_PURPOSE
SF_UNIMPLEMENTED_SCRIPT_TYPE_REQUESTED
TC_ERROR_LOADING_TEMPLATE
TC_ERROR_MISSING_TEMPLATE_ELEMENT
TC_ERROR_TEMPLATE_NOT_FOUND
TEXT_DEFAULT_POLICY_DESCRIPTION
TEXT_DEFAULT_POLICY_NAME
TEXT_SETTING_RULE_DESCRIPTION
TEXT_SETTING_RULE_NAME
Error writing {0}: {1}
OSMS_ADMIN_UI_PATH environment variable not set. CM services are not accessible.
GA collection of UE-V templates that will be registered or deregistered.
#UE-V Template Distribution Baseline
=Could not find AuthoringScopeId for configuration item: {0}
<Error checking for UE-V template registration with CM: {0}
5Failed to find configuration item: {0} on site: {1}
hDetection script for UE-V template '{0}' is missing comment:: '# Script Action: <Register|Unregister>'
\Detection script for UE-V template '{0}' is missing comment: '# Script Version: <version>'
cDetection script for UE-V template '{0}' is missing comment: '# UE-V Template Version: <version>'
8Could not find LogicalName for configuration item: {0}
+Error writing configuration item CAB: {0}
BKeeps {0} UE-V template version and registration state up-to-date.
Maintain {0} UE-V Template
CChecks that the UE-V template for {0} is registered to version {1}.
Register UE-V template {0}
1If a UE-V template for {0} exists, unregister it.
Unregister UE-V template {0}
Script file is empty: {0}
Failed to find script in {0}.
Failed to load script: {0}
Invalid copy of null setting
Invalid argument: {0} : {1}
'Digest is missing the 'Version' element
FSet script failed because setting containing the script was not found.
!A valid CAB file name is required
+Failed to write CAB: No configuration items
!Detection script must not be null
%Configuration digest must not be null
A required paramter is null
!Settings element must not be null
nScript '{0}' has invalid script type. Valid values are 'PowerShell', 'JScript' or 'VBScript'. Script Type: {1}
0Script '{0}' is missing comment 'Script Action:'
.Script '{0}' is missing comment 'Script Type:'
EScript '{0}' is missing comment: '# UE-V Template Version: <version>'
1Script '{0}' is missing comment 'Script Version:'
;Set script failed because an existing script was not found.
MDetection script is missing comment: '# Script Action: <Register|Unregister>'
)ScriptFactory: Unsupported script purpose
?PowerShell script has invalid script type: '# Script Type: {0}'
+UevTemplate: Could not load template: {0}
2UE-V template is missing the template {0} element.
"Error opening UE-V template: {0}
=Applies desired configuration for the UE-V Application Agent.
UE-V Agent Policy
Validate template installation
UE-V template validation rule
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    Version 2.0
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    Example:
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.
    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns = "" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>
# Copyright (c) Microsoft Corporation. All rights reserved.
# Script Type: PowerShell
# Script Action: Detection
# Script Version: 2
# Detection script that checks to see if UEV is installed by looking for existence 
# of the UE-V version number in the registry. Application is considered to be 
# installed if this subroutine sends a "Installed" message to std out.
# Registry key: HKLM\\SOFTWARE\Microsoft\UEV\Agent\Version
function GetUevVersion
    try
    {
        $key = Get-Item -LiteralPath "HKLM:\SOFTWARE\Microsoft\UEV\Agent" -ErrorAction SilentlyContinue
        $version = $key.GetValue("Version", "0");
        if ($version.ToString().Length -ge 2)
        {
            $parts = $version.ToString().Split(".")
            $ver = $parts[0] + "." + $parts[1]
            return [float]$ver
        }
        return 2.0
    }
    catch
    {
        return 2.0
    }
$uevVersion = GetUevVersion
if ($uevVersion -ge 2.0)
    write-host 'Installed' 
# Copyright (c) Microsoft Corporation. All rights reserved.
# This script verifies that a template does not exist or exists as
# an older version before allowing remediation to install a newer version.
# Script Type: PowerShell
# Script Action: Register
# Script Version: 2
# UE-V Template Version: %%UEVTEMPLATEVERSION%%
Set-StrictMode -Version latest
$COMPLIANT_CODE = 1
$NOT_COMPLIANT_CODE = 0
$uevTemplateSchema = "%%UEVTEMPLATESCHEMA%%"
$proposedVersion = %%PROPOSED_VERSION%%
$result = $NOT_COMPLIANT_CODE
function IsSchemaSupported()
    # Lookup all UE-V template schemas supported by AppAgent. If the CM packaged
    # template is not supported by the agent, mark as compliant
    $appAgentConfig = Get-WmiObject -Namespace root\microsoft\uev Configuration
    $appAgentSchemas = $appAgentConfig.SupportedTemplateSchemaVersions
    $supportedSchema = $False
    foreach ($appAgentSchama in $appAgentSchemas)
    {
        if ($uevTemplateSchema -eq $appAgentSchama)
        {
            $supportedSchema = $True
            break;
        }
    }
    return $supportedSchema
function IsInstalledTemplateSchemaNewerThanProposed($installedTemplateId)
    # Returns true if the template that is currently installed has a template
    # schema greater than the template being distributed by remediation script
    try
    {
        $t = Invoke-WmiMethod -Namespace root\microsoft\uev -Class SettingsLocationTemplate -Name GetSchemaByTemplateId -ArgumentList %%UEVTEMPLATEID%%
        $installedTemplateSchema = $t.ReturnValue
        return [boolean]($uevTemplateSchema -lt $installedTemplateSchema)
    }
    catch
    {
        return [boolean]$False
    }
function IsCompliant
    if (!(IsSchemaSupported))
    {
        $result = $COMPLIANT_CODE
    }
    else
    {
        try
        {
            $templateObj = [wmi] 'root\Microsoft\UEV:SettingsLocationTemplate="%%UEVTEMPLATEID%%"'
            $template = $templateObj.GetContent().ReturnValue
            if (IsInstalledTemplateSchemaNewerThanProposed($templateObj.TemplateId))
            {
                # Do not install an older schema over a newer schema
                $result = $COMPLIANT_CODE
            }
            elseif ($templateObj.TemplateVersion -eq $proposedVersion)
            {
                $result = $COMPLIANT_CODE
            }
            elseif ($templateObj.TemplateVersion -lt $proposedVersion)
            {
                $result = $NOT_COMPLIANT_CODE
            }
            else 
            {
                $result = $COMPLIANT_CODE
            }
        }
        catch
        {
            $result = $NOT_COMPLIANT_CODE
        }
    }
    return $result
$result = IsCompliant;
Write-Output $result
# Copyright (c) Microsoft Corporation. All rights reserved.
# This script registers a template
# Script Type: PowerShell
# Script Action: Register
# Script Version: 2
# UE-V Template Version: %%UEVTEMPLATEVERSION%%
$uevTemplate = @"
%%UEVTEMPLATE%%
Set-StrictMode -Version latest
$COMPLIANT_CODE = 1
$NOT_COMPLIANT_CODE = 0
# Registers a UE-V template
function RegisterTemplate
    $complanceResult = $NOT_COMPLIANT_CODE
    try
    {
        $tempTemplateFile = [System.IO.Path]::GetTempFileName() | Rename-Item -NewName { $_ -replace 'tmp$', 'xml' } -PassThru
Out-File -InputObject $uevTemplate -Encoding utf8 -LiteralPath "$tempTemplateFile"
        Invoke-WmiMethod -Namespace root\Microsoft\UEV -Class SettingsLocationTemplate -Name Update -ArgumentList "$tempTemplateFile"
        $complanceResult = $COMPLIANT_CODE
    }
    catch
    {
        $complanceResult = $NOT_COMPLIANT_CODE
        Write-Host $error[0]
    }
    finally
    {
        Remove-Item -Path "$tempTemplateFile"
    }
    return $complanceResult
$result = RegisterTemplate
Write-Output $result
# Copyright (c) Microsoft Corporation. All rights reserved.
# This script checks to see if a template is installed so that it 
# can be unregistered
# Script Type: PowerShell
# Script Action: Unregister
# Script Version: 1
# UE-V Template Version: %%UEVTEMPLATEVERSION%%
Set-StrictMode -Version latest
Set-Variable -name COMPLIANT_CODE -value 1 -option constant
Set-Variable -name NOT_COMPLIANT_CODE -value 0 -option constant
$result = $NOT_COMPLIANT_CODE
    $templateObj = [wmi] 'root\Microsoft\UEV:SettingsLocationTemplate="%%UEVTEMPLATEID%%"'
    $template = $templateObj.GetContent().ReturnValue
    if ($template.Length -eq 0)
    {
        $result = $COMPLIANT_CODE
    }
catch
    $result = $COMPLIANT_CODE
Write-Output $result
# Copyright (c) Microsoft Corporation. All rights reserved.
# This script deregisters a template
# Script Type: PowerShell
# Script Action: Unregister
# Script Version: 1
# UE-V Template Version: %%UEVTEMPLATEVERSION%%
Set-StrictMode -Version latest
Set-Variable -name COMPLIANT_CODE -value 1 -option constant
Set-Variable -name NOT_COMPLIANT_CODE -value 0 -option constant
# Deregisters a UE-V template
function UnregisterTemplate
    $complanceResult = $NOT_COMPLIANT_CODE
    try
    {
        $templateObj = [wmi] 'root\Microsoft\UEV:SettingsLocationTemplate="%%UEVTEMPLATEID%%"'
        $templateObj.Unregister()
        $complanceResult = $COMPLIANT_CODE
    }
    catch
    {
        $complanceResult = $NOT_COMPLIANT_CODE
        Write-Host $error[0]
    }
    return $complanceResult
$result = UnregisterTemplate
Write-Output $result
# Copyright (c) Microsoft Corporation. All rights reserved.
# Scans the UE-V Operations event log to see if an event (id 4048) has 
# been logged. This event indicates that a package has exceeded its recommended max
# size. The scan searches for the event within the last 7 days.
# Event log searched
#   %SystemRoot%\System32\Winevt\Logs\Microsoft-User Experience Virtualization-App Agent%4Operational.evtx
function Get-EventCount($id)
    try
    {
        $obj = Get-WinEvent -FilterHashtable @{logname="Microsoft-User Experience Virtualization-App Agent/Operational";id=$id;starttime=((Get-Date).AddDays(-7))}
        if ($obj)
        {
            return $obj.count
        }
        else
        {
            return 0
        } 
    }
    catch
    {
        return 0
    }
$result = Get-EventCount(4048)
write-host $result
# Copyright (c) Microsoft Corporation. All rights reserved.
# Script Type: PowerShell
# Script Action: Remediation
# Script Version: 1
# Set or clear the UE-V %%SETTING_NAME%% in either the %%HIVE%% hive.
# Registry update locations:
#   %%HIVE%%\Software\Microsoft\UEV\Configuration\Agent\%%SETTING_NAME%%
Set-StrictMode -Version latest
Set-Variable -name SET -value "Set" -option constant
Set-Variable -name CLEAR -value "CLEAR" -option constant
Set-Variable -name UNMANAGED -value "UNMANAGED" -option constant
Set-Variable -name NO_ERROR -value 0 -option constant
Set-Variable -name UNSPECIFIED_ERROR -value 1 -option constant
Set-Variable -name REMEDIATION_FAILED -value 1 -option constant
Set-Variable -name HIVE -value %%HIVE%% 
Set-Variable -name NAMESPACE -value "root\Microsoft\UEV"
Set-Variable -name SETTING -value "%%SETTING_NAME%%"
Set-Variable -name DESIRED_VALUE -value "%%SETTING_VALUE%%"
Set-Variable -name DESIRED_STATE -value "%%DESIRED_STATE%%"
$result = $NO_ERROR
if ($HIVE -eq "HKLM")
    $currentHive = "ComputerConfiguration"
    $currentHive = "UserConfiguration"
if ($DESIRED_STATE -eq $SET)
    # Updates setting to desired value
    try
    {
        $config = Get-WmiObject -Namespace $NAMESPACE $currentHive
        $config.$SETTING = $DESIRED_VALUE
        [void]$config.Put()
    }
    catch
    {
        write-host "Failed to set UE-V %%SETTING_NAME%%: " + $_;
        $result = $REMEDIATION_FAILED
    }
elseif ($DESIRED_STATE -eq $CLEAR)
    # Removes setting
    try
    {
        $config = Get-WmiObject -Namespace $NAMESPACE $currentHive
        $config.$SETTING = $null
        [void]$config.Put()
    }
    catch
    {
        write-host "Failed to clear UE-V %%SETTING_NAME%%: " + $_;
        $result = $REMEDIATION_FAILED
    }
elseif ($DESIRED_STATE -eq $UNMANAGED)
    # This should never get called because the discovery script should prevent it
    $result = $UNSPECIFIED_ERROR
return $result
# Copyright (c) Microsoft Corporation. All rights reserved.
# Script Type: PowerShell
# Script Action: Discovery
# Script Version: 1
# Sets or clears the UE-V %%SETTING_NAME%% in the %%HIVE%% hive.
# Registry location:
#   %%HIVE%%\Software\Microsoft\UEV\Agent\Configuration\%%SETTING_NAME%%
Set-StrictMode -Version latest
Set-Variable -name SET -value "Set" -option constant
Set-Variable -name CLEAR -value "Clear" -option constant
Set-Variable -name UNMANAGED -value "UNMANAGED" -option constant
Set-Variable -name COMPLIANT_CODE -value 1 -option constant
Set-Variable -name NOT_COMPLIANT_CODE -value 0 -option constant
Set-Variable -name HIVE -value %%HIVE%% 
Set-Variable -name NAMESPACE -value "root\Microsoft\UEV"
Set-Variable -name SETTING -value "%%SETTING_NAME%%"
Set-Variable -name DESIRED_VALUE -value "%%SETTING_VALUE%%"
Set-Variable -name DESIRED_STATE -value "%%DESIRED_STATE%%"
$result = $NOT_COMPLIANT_CODE
if ($HIVE -eq "HKLM")
    $currentHive = "ComputerConfiguration"
    $currentHive = "UserConfiguration"
if ($DESIRED_STATE -eq $SET)
    # Compliant if setting exists and is equal to desired value
    try
    {
        $config = Get-WmiObject -Namespace $NAMESPACE $currentHive
        if ($config.$SETTING -eq $DESIRED_VALUE)
        {
            $result = $COMPLIANT_CODE
        }
        else
        {
            $result = $NOT_COMPLIANT_CODE
        }
    }
    catch
    {
        $result = $NOT_COMPLIANT_CODE
    }
elseif ($DESIRED_STATE -eq $CLEAR)
    # Compliant if setting does not exist
    try
    {
        $settingConfig = Get-WmiObject -Namespace 'root\microsoft\uev' -Query "select * from ConfigurationItem where SettingName = '%%SETTING_NAME%%'"
        $config = Get-WmiObject -Namespace $NAMESPACE $currentHive
        if (($settingConfig.SettingSource -eq 'Default') -or ($config.$SETTING -eq $null))
        {
            $result = $COMPLIANT_CODE
        }
        else
        {
            $result = $NOT_COMPLIANT_CODE
        }
    }
    catch
    {
        $result = $COMPLIANT_CODE
    }
elseif ($DESIRED_STATE -eq $UNMANAGED)
    $result = $COMPLIANT_CODE
Write-Output $result
# Copyright (c) Microsoft Corporation. All rights reserved.
# Script Type: PowerShell
# Script Action: Remediation
# Script Version: 1
# Set or clear the UE-V %%SETTING_NAME%% in either the %%HIVE%% hive.
# Registry update locations:
#   %%HIVE%%\Software\Microsoft\UEV\Configuration\Agent\%%SETTING_NAME%%
Set-StrictMode -Version latest
Set-Variable -name SET -value "Set" -option constant
Set-Variable -name CLEAR -value "CLEAR" -option constant
Set-Variable -name UNMANAGED -value "UNMANAGED" -option constant
Set-Variable -name NO_ERROR -value 0 -option constant
Set-Variable -name UNSPECIFIED_ERROR -value 1 -option constant
Set-Variable -name REMEDIATION_FAILED -value 1 -option constant
Set-Variable -name HIVE -value %%HIVE%% 
Set-Variable -name NAMESPACE -value "root\Microsoft\UEV"
Set-Variable -name SETTING -value "%%SETTING_NAME%%"
Set-Variable -name DESIRED_VALUE -value "%%SETTING_VALUE%%"
Set-Variable -name DESIRED_STATE -value "%%DESIRED_STATE%%"
$result = $NO_ERROR
if ($HIVE -eq "HKLM")
    $currentHive = "ComputerConfiguration"
    $currentHive = "UserConfiguration"
if ($DESIRED_STATE -eq $SET)
    # Updates setting to desired value
    try
    {
        $config = Get-WmiObject -Namespace $NAMESPACE $currentHive
        $config.$SETTING = ($DESIRED_VALUE -eq "true")
        [void]$config.Put()
    }
    catch
    {
        write-host "Failed to set UE-V %%SETTING_NAME%%: " + $_;
        $result = $REMEDIATION_FAILED
    }
elseif ($DESIRED_STATE -eq $CLEAR)
    # Removes setting
    try
    {
        $config = Get-WmiObject -Namespace $NAMESPACE $currentHive
        $config.$SETTING = $null
        [void]$config.Put()
    }
    catch
    {
        write-host "Failed to clear UE-V %%SETTING_NAME%%: " + $_;
        $result = $REMEDIATION_FAILED
    }
elseif ($DESIRED_STATE -eq $UNMANAGED)
    # This should never get called because the discovery script should prevent it
    $result = $UNSPECIFIED_ERROR
return $result
# Copyright (c) Microsoft Corporation. All rights reserved.
# Script Type: PowerShell
# Script Action: Discovery
# Script Version: 1
# Sets or clears the UE-V %%SETTING_NAME%% in the %%HIVE%% hive.
# Registry location:
#   %%HIVE%%\Software\Microsoft\UEV\Agent\Configuration\%%SETTING_NAME%%
Set-StrictMode -Version latest
Set-Variable -name SET -value "Set" -option constant
Set-Variable -name CLEAR -value "Clear" -option constant
Set-Variable -name UNMANAGED -value "UNMANAGED" -option constant
Set-Variable -name COMPLIANT_CODE -value 1 -option constant
Set-Variable -name NOT_COMPLIANT_CODE -value 0 -option constant
Set-Variable -name HIVE -value %%HIVE%% 
Set-Variable -name NAMESPACE -value "root\Microsoft\UEV"
Set-Variable -name SETTING -value "%%SETTING_NAME%%"
Set-Variable -name DESIRED_VALUE -value "%%SETTING_VALUE%%"
Set-Variable -name DESIRED_STATE -value "%%DESIRED_STATE%%"
$result = $NOT_COMPLIANT_CODE
if ($HIVE -eq "HKLM")
    $currentHive = "ComputerConfiguration"
    $currentHive = "UserConfiguration"
if ($DESIRED_STATE -eq $SET)
    # Compliant if setting exists and is equal to desired value
    try
    {
        $config = Get-WmiObject -Namespace $NAMESPACE $currentHive
        if ($config.$SETTING -eq ($DESIRED_VALUE -eq "true"))
        {
            $result = $COMPLIANT_CODE
        }
        else
        {
            $result = $NOT_COMPLIANT_CODE
        }
    }
    catch
    {
        $result = $NOT_COMPLIANT_CODE
    }
elseif ($DESIRED_STATE -eq $CLEAR)
    # Compliant if setting does not exist
    try
    {
        $settingConfig = Get-WmiObject -Namespace 'root\microsoft\uev' -Query "select * from ConfigurationItem where SettingName = '%%SETTING_NAME%%'"
        $config = Get-WmiObject -Namespace $NAMESPACE $currentHive
        if (($settingConfig.SettingSource -eq 'Default') -or ($config.$SETTING -eq $null))
        {
            $result = $COMPLIANT_CODE
        }
        else
        {
            $result = $NOT_COMPLIANT_CODE
        }
    }
    catch
    {
        $result = $COMPLIANT_CODE
    }
elseif ($DESIRED_STATE -eq $UNMANAGED)
    $result = $COMPLIANT_CODE
Write-Output $result
# Copyright (c) Microsoft Corporation. All rights reserved.
# Gets a configuration digest from the CM site server.  Returns an empty CI
# if one does not exist on the server.
Set-ExecutionPolicy -Force bypass
import-module (Join-Path (split-path -Path $env:SMS_ADMIN_UI_PATH -Parent) 'ConfigurationManager.psd1')
cd -Path %%SiteCode%%:
$ciName = '%%CiName%%'
$ciDescription = '%%CiDescription%%'
Get-CMConfigurationItem -Name $ciName -OutVariable ci
if ($ci.Capacity -eq 0)
    New-CMConfigurationItem -CreationType WindowsApplication -Description $ciDescription -Name $ciName
    Get-CMConfigurationItem -name $ciName -OutVariable ci
    Remove-CMConfigurationItem -Id $ci[0].CI_ID -Force
# Copyright (c) Microsoft Corporation. All rights reserved.
# Gets a baseline configuration digest from the CM site server.  Returns an empty baseline CI
# if one does not exist on the server.
Set-ExecutionPolicy -Force bypass
import-module (Join-Path (split-path -Path $env:SMS_ADMIN_UI_PATH -Parent) 'ConfigurationManager.psd1')
cd -Path %%SiteCode%%:
$baselineName = '%%CiName%%'
$baselineDescription = '%%CiDescription%%'
Get-CMBaselineXMLDefinition -Name $baselineName -OutVariable baselineXml
if ($baselineXml.Capacity -eq 0)
    New-CMBaseline -Description $baselineDescription -Name $baselineName
    Get-CMBaseline -name $baselineName -OutVariable baseline
    Get-CMBaselineXMLDefinition -name $baselineName -OutVariable baselineXml
    Remove-CMConfigurationItem -Id $baseline[0].CI_ID -Force
# Copyright (c) Microsoft Corporation. All rights reserved.
# Script Type: PowerShell
# Script Action: Discovery
# Script Version: 1
# Enables, disables or clears the UE-V Win8 sync setting for %%PACKAGE_FAMILY_NAME%% 
# in the %%USER_OR_MACHINE%% hive.
# Registry location:
#   %%HIVE%%\Software\Microsoft\UEV\Agent\Configuration\Windows8AppList\%%PACKAGE_FAMILY_NAME%%
Set-StrictMode -Version latest
Set-Variable -name ENABLED -value "Enabled" -option constant
Set-Variable -name CLEARED -value "Cleared" -option constant
Set-Variable -name DISABLED -value "Disabled" -option constant
Set-Variable -name COMPLIANT_CODE -value 1 -option constant
Set-Variable -name NOT_COMPLIANT_CODE -value 0 -option constant
Set-Variable -name SCRIPT_FAILURE -value 2 -option constant
Set-Variable -name NAMESPACE -value "root\Microsoft\UEV"
Set-Variable -name DESIRED_STATE -value "%%DESIRED_STATE%%"
Set-Variable -name PACKAGE_FAMILY_NAME -value "%%PACKAGE_FAMILY_NAME%%"
$result = $NOT_COMPLIANT_CODE
# This setting only applies to Windows 8 / Server 2012 and above
$osVersionInfo = [System.Environment]::OSVersion.Version[0] | select major, minor
$osVersion = $osVersionInfo.major + $osVersionInfo.Minor / 10
if ($osVersion -lt 6.2)
    return $COMPLIANT_CODE
# If the app is not installed, consider it compliant
$pkgInfo = Get-AppxPackage | Where-Object {$_.PackageFamilyName -eq $PACKAGE_FAMILY_NAME } | Measure-Object
if ($pkgInfo.Count -eq 0)
    return $COMPLIANT_CODE
    $config = Get-WmiObject -namespace $NAMESPACE -Query "select * from %%USER_OR_MACHINE%%ConfiguredWindows8App where PackageFamilyName='$PACKAGE_FAMILY_NAME'"
catch
    return $COMPLIANT_CODE
if ($DESIRED_STATE -eq $ENABLED)
    if (($config -ne $null) -and $config.Enabled)
    {
        $result = $COMPLIANT_CODE
    }
    else
    {
        $result = $NOT_COMPLIANT_CODE
    }
elseif ($DESIRED_STATE -eq $DISABLED)
    if (($config -ne $null) -and !$config.Enabled)
    {
        $result = $COMPLIANT_CODE
    }
    else
    {
        $result = $NOT_COMPLIANT_CODE
    }
elseif ($DESIRED_STATE -eq $CLEARED)
    if ($config -eq $null)
    {
        $result = $COMPLIANT_CODE
    }
    else
    {
        $result = $NOT_COMPLIANT_CODE
    }
Write-Output $result
# Copyright (c) Microsoft Corporation. All rights reserved.
# Script Type: PowerShell
# Script Action: Remediation
# Script Version: 1
# Sets Windows 8 app registration the UE-V %%PACKAGE_FAMILY_NAME%% in %%HIVE%% hive to '%%DESIRED_STATE%%'
# Registry update locations:
#   %%HIVE%%\Software\Microsoft\UEV\Agent\Configuration\Windows8AppList\%%PACKAGE_FAMILY_NAME%%
Set-StrictMode -Version latest
Set-Variable -name ENABLED -value "Enabled" -option constant
Set-Variable -name CLEARED -value "Cleared" -option constant
Set-Variable -name DISABLED -value "Disabled" -option constant
Set-Variable -name NO_ERROR -value 0 -option constant
Set-Variable -name UNSPECIFIED_ERROR -value 1 -option constant
Set-Variable -name REMEDIATION_FAILED -value 1 -option constant
Set-Variable -name NAMESPACE -value "root\Microsoft\UEV"
Set-Variable -name DESIRED_STATE -value "%%DESIRED_STATE%%"
Set-Variable -name PACKAGE_FAMILY_NAME -value "%%PACKAGE_FAMILY_NAME%%"
$result = $NO_ERROR
$op = "DisableApp"
if ($DESIRED_STATE -eq $ENABLED)
    $op = "EnableApp";
elseif ($DESIRED_STATE -eq $CLEARED)
    $op = "RemoveApp";
    Invoke-WmiMethod -Namespace $NAMESPACE -class %%USER_OR_MACHINE%%ConfiguredWindows8App -name $op -ArgumentList $PACKAGE_FAMILY_NAME
    $result = $NO_ERROR
catch
    write-host "Failed to set UE-V " + $PACKAGE_FAMILY_NAME + ": " + $_;
    $result = $REMEDIATION_FAILED
return $result
# Copyright (c) Microsoft Corporation. All rights reserved.
# This script starts or stops or pauses a service based on the desired state.
# valid status values are:
#  "Running", "Paused", "Starting", "Pausing", "Stopping", "Stopped"
# Script Type: PowerShell
# Script Version: 2
Set-StrictMode -Version latest
$serviceName = "%%SERVICE_NAME%%"
$desiredState = "%%DESIRED_STATE%%"
$NO_ERROR = 0
$REMEDIATION_FAILED = 1
$UNSPECIFIED_ERROR = 2
$result = $NO_ERROR
    if ($desiredState -eq "Running")
    {
        Start-Service -Name $serviceName
    }
    elseif ($desiredState -eq "Paused")
    {
        Suspend-Service -Name $serviceName
    }
    elseif ($desiredState -eq "Stopped")
    {
        Stop-Service -Name $serviceName
    }
    else
    {
        $result = $UNSPECIFIED_ERROR
    }
catch
    $result = $REMEDIATION_FAILED
return $result
# Copyright (c) Microsoft Corporation. All rights reserved.
# This script validates that a service state matches the desired state.
# valid status values are:
#  "Running", "Paused", "Starting", "Pausing", "Stopping", "Stopped"
# Script Type: PowerShell
# Script Action: Register
# Script Version: 1
Set-StrictMode -Version latest
$serviceName = "%%SERVICE_NAME%%"
$desiredState = "%%DESIRED_STATE%%"
$COMPLIANT_CODE = 1
$NOT_COMPLIANT_CODE = 0
$result = $NOT_COMPLIANT_CODE
    if ($desiredState -eq "Running")
    {
        $status = Get-Service -Name $serviceName
        if (($status.Status -eq "Running") -or ($status.Status -eq "Starting"))
        {
            $result = $COMPLIANT_CODE
        }
    }
    elseif ($desiredState -eq "Paused")
    {
        $status = Get-Service -Name $serviceName
        if (($status.Status -eq "Paused") -or ($status.Status -eq "Pausing"))
        {
            $result = $COMPLIANT_CODE
        }
    }
    elseif ($desiredState -eq "Stopped")
    {
        $status = Get-Service -Name $serviceName
        if (($status.Status -eq "Stopped") -or ($status.Status -eq "Stopping"))
        {
            $result = $COMPLIANT_CODE
        }
    }
catch
    $result = $NOT_COMPLIANT_CODE
return $result
<?xml version="1.0" encoding="utf-8" ?>
<xs:schema id="DcmDigest"
                  targetNamespace="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/07/10/DesiredConfiguration"
                  elementFormDefault="qualified"
                  xmlns:xs="http://www.w3.org/2001/XMLSchema"
                  xmlns:tns ="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/07/10/DesiredConfiguration"
                  xmlns:rules="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/06/14/Rules"
                  version="5">
  <!--  version 5 :
        Added following features -
        - Setting Reference
        - Rule outside setting definition
        - Simple Rule, Conditional Rule, DeploymentType Rule, OperatingSystemDiscovery Condition, PlatformApplicability Rule
        - Rules based on new expression schema - rules.xsd
        - Removal of unsued/invalid elements
    -->
  <!-- version 4 : 
        -   Changed the RuleTypeBase's OperandA datatype to xs:string to allow the specification of empty strings
        -   Modified the RootComplexSettingType and ComplexSetting type. Now only RootComplexSettingType can
            include ParentSimpleSettingReferences.
    -->
  <!-- version 3 : 
        -   Added extensionElements at various places in the schema
        -   Added MinVersion attribute
        -   Added AuthoringVersion attribute
        -   Added ExternalConfigurationItemReference for supporting partially described CIs
        -   Added ExternalXPathDiscoveryInfo into the OtherDiscoverySource for supporting partially described CIs
        -   Added ExternalRule into the SimpleSetting for supporting partially described CIs
        -   Added wildcard extensions to several places in the schema for future extensions
    -->
  <!--Note: It is a best-practice that instance documents conforming to this schema should include a 
        comment that references this schema's version attribute-->
  <!--Import other schemas -->
  <xs:import namespace="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/06/14/Rules"/>
  <!--Substitution group heads-->
  <xs:element name="ConfigurationItem" type="tns:ConfigurationItemType" abstract="true"/>
  <xs:element name="ConfigurationItemWithContents" type="tns:ConfigurationItemWithContentsType" abstract="true"/>
  <xs:element name="Part" type="tns:PartType" abstract="true"/>
  <xs:element name="DiscoverySource" type="tns:DiscoverySourceType" abstract="true"/>
  <xs:element name="OptimizationBase" type="tns:OptimizationBaseType" abstract="true" />
  <!--Elements-->
  <!--Configuration Item elements-->
  <xs:element name="Baseline" type="tns:BaselineType" substitutionGroup="tns:ConfigurationItem"/>
  <xs:element name="Application" type="tns:ApplicationType" substitutionGroup="tns:ConfigurationItemWithContents"/>
  <xs:element name="OperatingSystem" type="tns:OperatingSystemType" substitutionGroup="tns:ConfigurationItemWithContents"/>
  <xs:element name="BusinessPolicy" type="tns:BusinessPolicyType" substitutionGroup="tns:ConfigurationItemWithContents"/>
  <xs:element name="Platform" type="tns:PlatformConfigurationItemType" substitutionGroup="tns:ConfigurationItemWithContents"/>
  <xs:element name="SoftwareUpdate" type="tns:SoftwareUpdateType" substitutionGroup="tns:ConfigurationItem"/>
  <xs:element name="SettingsDefinition" type="tns:SettingsDefinitionType" substitutionGroup="tns:ConfigurationItem"/>
  <xs:element name="ConfigurationPolicy" type="tns:ConfigurationPolicyType" substitutionGroup="tns:ConfigurationItem"/>
  <xs:element name="SoftwareUpdateBundle" type="tns:SoftwareUpdateBundleType" substitutionGroup="tns:ConfigurationItem"/>
  <xs:element name="AuthorizationList" type="tns:AuthorizationListType" substitutionGroup="tns:ConfigurationItem"/>
  <xs:element name="Driver" type="tns:DriverType" substitutionGroup="tns:ConfigurationItem"/>
  <xs:element name="ApplicationPolicy" type="tns:ApplicationPolicyType" substitutionGroup="tns:ConfigurationItem"/>
  <xs:element name="OtherConfigurationItem" type="tns:OtherConfigurationItemType" substitutionGroup="tns:ConfigurationItem"/>
  <!--Global Configuration Items-->
  <xs:element name="GlobalSettings" type="tns:GlobalSettingsConfigurationItemType" substitutionGroup="tns:ConfigurationItemWithContents"/>
  <xs:element name="GlobalExpression" type="tns:GlobalExpressionConfigurationItemType" substitutionGroup="tns:ConfigurationItemWithContents"/>
  <!--Virtual Environment elements -->
  <xs:element name="VirtualEnvironment" type="tns:VirtualEnvironmentConfigurationItemType" substitutionGroup="tns:ConfigurationItemWithContents"/>
  <!--CI References, used by Baselines-->
  <xs:element name="BaseReference" type="rules:ConfigurationItemReferenceType"/>
  <xs:element name="BaselineReference" type="rules:ConfigurationItemReferenceType"/>
  <xs:element name="ApplicationReference" type="rules:ConfigurationItemReferenceType"/>
  <xs:element name="BusinessPolicyReference" type="rules:ConfigurationItemReferenceType"/>
  <xs:element name="SoftwareUpdateReference" type="rules:ConfigurationItemReferenceType"/>
  <xs:element name="SoftwareUpdateBundleReference" type="rules:ConfigurationItemReferenceType"/>
  <xs:element name="OperatingSystemReference" type="rules:ConfigurationItemReferenceType"/>
  <xs:element name="OtherConfigurationItemReference" type="tns:OtherConfigurationItemReferenceType"/>
  <xs:element name="ExternalConfigurationItemReference" type="tns:ExternalConfigurationItemReferenceType" />
  <!--Rule override types-->
  <xs:element name="RuleOverrideReference" type="tns:RuleOverrideReferenceType" />
  <xs:element name="RuleSeverityOverrideReference" type="tns:RuleSeverityOverrideReferenceType"/>
  <!--Part elements-->
  <xs:element name="RegistryKey" type="tns:RegistryKeyType" substitutionGroup="tns:Part"/>
  <xs:element name="RegistryKeyEx" type="tns:RegistryKeyType" substitutionGroup="tns:Part"/>
  <xs:element name="Folder" type="tns:FolderType" substitutionGroup="tns:Part"/>
  <xs:element name="File" type="tns:FileType" substitutionGroup="tns:Part"/>
  <xs:element name="Assembly" type="tns:AssemblyType" substitutionGroup="tns:Part"/>
  <xs:element name="MSI" type="tns:MSIType" substitutionGroup="tns:Part"/>
  <!--Access control-->
  <xs:element name="Permissions" type="tns:AccessControlListType"/>
  <xs:element name="SccmAceEntry" type="tns:SccmAceString"/>
  <!--Settings-->
  <xs:element name="RootComplexSetting" type="tns:RootComplexSettingType"/>
  <xs:element name="ComplexSetting" type="tns:ComplexSettingType"/>
  <xs:element name="SimpleSetting" type="tns:SimpleSettingType"/>
  <!--Discovery sources-->
  <xs:element name="RegistryDiscoverySource" type="tns:RegistryDiscoveryType" substitutionGroup="tns:DiscoverySource"/>
  <xs:element name="IISMetabaseDiscoverySource" type="tns:IISMetabaseDiscoveryType" substitutionGroup="tns:DiscoverySource"/>
  <xs:element name="SqlQueryDiscoverySource" type="tns:SqlQueryDiscoveryType" substitutionGroup="tns:DiscoverySource"/>
  <xs:element name="WqlQueryDiscoverySource" type="tns:WqlQueryDiscoveryType" substitutionGroup="tns:DiscoverySource"/>
  <xs:element name="ScriptDiscoverySource" type="tns:ScriptDiscoveryType" substitutionGroup="tns:DiscoverySource"/>
  <xs:element name="XPathDiscoverySource" type="tns:XPathDiscoveryType" substitutionGroup="tns:DiscoverySource"/>
  <xs:element name="ActiveDirectoryDiscoverySource" type="tns:ActiveDirectoryDiscoveryType" substitutionGroup="tns:DiscoverySource"/>
  <xs:element name="OtherDiscoverySource" type="tns:OtherDiscoveryType" substitutionGroup="tns:DiscoverySource"/>
  <xs:element name="UriDiscoverySource" type="tns:UriDiscoveryType" substitutionGroup="tns:DiscoverySource"/>
  <xs:element name="CIMDiscoverySource" type="tns:CIMDiscoverySource" substitutionGroup="tns:DiscoverySource"/>
  <xs:element name="ParameterizedDiscoverySource" type="tns:ParameterizedDiscoveryType" substitutionGroup="tns:DiscoverySource"/>
  <xs:element name="PlistKeyDiscoverySource" type="tns:PlistKeyDiscoveryType" substitutionGroup="tns:DiscoverySource"/>
  <xs:element name="MacDetectionDiscoverySource" type="tns:MacDetectionDiscoveryType" substitutionGroup="tns:DiscoverySource"/>
  <!-- Optimizations -->
  <xs:element name="BaselevelOptimization" type="tns:BaselevelOptimizationType" substitutionGroup="tns:OptimizationBase"/>
  <!--OperatingSystem Discovery information-->
  <xs:element name="OperatingSystemDiscoveryInfo" type="tns:OSInfoType"/>
  <!--The digest root element-->
  <xs:element name="DesiredConfigurationDigest" type="tns:DigestType"/>
  <!--Types-->
  <xs:simpleType name="FunctionalVersion">
    <xs:restriction base="xs:unsignedLong" />
  </xs:simpleType>
  <xs:simpleType name="AuthoringScopeId">
    <xs:restriction base="xs:Name">
      <!-- Provider and Object Model puts a limit on ModelName (AuthoringScope + LogicalName) to be upto 256 chars -->
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="LogicalName">
    <xs:restriction base="xs:ID">
      <!-- Provider and Object Model puts a limit on ModelName (AuthoringScope + LogicalName) to be upto 256 chars -->
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="DigestType">
    <xs:sequence>
      <xs:choice>
        <xs:element ref="tns:ConfigurationItem"/>
        <xs:element ref="tns:ConfigurationItemWithContents"/>
      </xs:choice>
      <xs:any minOccurs="0" maxOccurs="unbounded" namespace="##other" processContents="skip" />
    </xs:sequence>
    <!--The optional IsComplete attribute is used when the digest xml is embedded
            within an outer Sdm document. If present and true, it indicates that the
            surrounding Sdm is fully described by the digest and can be regnerated.
            If present and false, or missing, the surrounding Sdm contains additional
            information not captured by the digest.-->
    <xs:attribute name="IsComplete" type="xs:boolean" use="optional"/>
    <xs:attribute name="MinVersion" type="tns:FunctionalVersion" use="optional">
      <xs:annotation>
        <xs:documentation>
          The minimum version of the Configuration Manager processor required to process the instance document
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="AuthoringVersion" type="tns:FunctionalVersion" use="optional">
      <xs:annotation>
        <xs:documentation>
          The version of the Configuration Manager processor that the instance was authored against
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ConfigurationItemOverrideReferenceType" abstract="true">
    <xs:attribute name="AuthoringScopeId" type="xs:Name" use="required"/>
    <xs:attribute name="LogicalName" type="xs:Name" use="required"/>
    <xs:attribute name="Version" type="xs:unsignedInt" use="optional"/>
  </xs:complexType>
  <xs:complexType name="RuleOverrideReferenceType">
    <xs:complexContent>
      <xs:extension base="tns:ConfigurationItemOverrideReferenceType">
        <xs:attribute name="RuleLogicalName" type="xs:Name" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="RuleSeverityOverrideReferenceType">
    <xs:complexContent>
      <xs:extension base="tns:RuleOverrideReferenceType">
        <xs:attribute name="Severity" type="rules:RuleSeverityType" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="OtherConfigurationItemReferenceType">
    <xs:complexContent>
      <xs:extension base="rules:ConfigurationItemReferenceType">
        <xs:attribute name="TemplateName" type="xs:Name" use="required"/>
        <xs:attribute name="TargetNamespace" type="xs:anyURI" use ="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ExternalConfigurationItemReferenceType">
    <xs:complexContent>
      <xs:extension base="tns:OtherConfigurationItemReferenceType">
        <xs:sequence>
          <xs:element name="BaseElement" type="xs:Name" />
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="FolderPropertyNames">
    <xs:restriction base="xs:string">
      <xs:enumeration value="DateCreated"/>
      <xs:enumeration value="DateModified"/>
      <xs:enumeration value="Attributes"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="FilePropertyNames">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Size"/>
      <xs:enumeration value="DateCreated"/>
      <xs:enumeration value="DateModified"/>
      <xs:enumeration value="Version"/>
      <xs:enumeration value="Company"/>
      <xs:enumeration value="ProductName"/>
      <xs:enumeration value="SHA1Hash"/>
      <xs:enumeration value="Attributes"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="AssemblyPropertyNames">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Culture"/>
      <xs:enumeration value="Version"/>
      <xs:enumeration value="PublicKeyToken"/>
      <xs:enumeration value="CacheType"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="ConfigurationItemType" abstract="true">
    <xs:sequence>
      <xs:element ref="rules:Annotation" />
      <!--CIs derived from the base Configuration Manager types will not explicitly specify a base-->
      <xs:choice minOccurs="0" maxOccurs="1">
        <xs:element ref="tns:BaseReference" />
        <xs:element ref="tns:ExternalConfigurationItemReference" />
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="AuthoringScopeId" type="tns:AuthoringScopeId" use="required"/>
    <xs:attribute name="LogicalName" type="tns:LogicalName" use="required"/>
    <xs:attribute name="Version" type="xs:unsignedInt" use="required"/>
  </xs:complexType>
  <xs:complexType name="SettingsDefinitionType">
    <xs:complexContent>
      <xs:extension base="tns:ConfigurationItemType">
        <xs:sequence>
          <xs:element name="Settings" type="tns:SettingsType" minOccurs="0" maxOccurs="1"/>
          <xs:element ref="rules:PlatformApplicabilityCondition" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SettingsType">
    <xs:sequence>
      <xs:element ref="tns:SimpleSetting" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ConfigurationPolicyType">
    <xs:complexContent>
      <xs:extension base="tns:ConfigurationItemType">
        <xs:sequence>
          <xs:element name="Rules" type="tns:RulesType" minOccurs="0" maxOccurs="1"/>
          <xs:element ref="rules:PlatformApplicabilityCondition" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ConfigurationItemWithContentsType" abstract="true">
    <xs:complexContent>
      <xs:extension base="tns:ConfigurationItemType">
        <xs:sequence>
          <xs:element name="Parts" minOccurs="0" maxOccurs="1">
            <xs:complexType>
              <xs:sequence>
                <xs:choice minOccurs="0" maxOccurs="1">
                  <xs:element name="SuppressionReferences">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:choice minOccurs="0" maxOccurs="unbounded">
                          <xs:element ref="tns:RuleOverrideReference"/>
                          <xs:element ref="tns:RuleSeverityOverrideReference"/>
                        </xs:choice>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:choice>
                <xs:element ref="tns:Part" minOccurs="0" maxOccurs="unbounded"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="Settings" minOccurs="0" maxOccurs="1">
            <xs:complexType>
              <xs:sequence>
                <xs:element ref="tns:RootComplexSetting"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="Rules" type="tns:RulesType" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="RulesType">
    <xs:sequence>
      <xs:element ref="rules:DCMRule" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="NonEmptyStringType">
    <xs:restriction base="xs:string">
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="NamespacePrefixType">
    <xs:restriction base="xs:string">
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="LdapPrefixType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[a-zA-Z0-9\-]+://"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DnNameType">
    <xs:restriction base="xs:string">
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="LdapFilterType">
    <xs:restriction base="xs:string">
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="XPathExpressionType">
    <xs:restriction base="xs:string">
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="WqlNamespaceType">
    <xs:restriction base="xs:string">
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>
  <!--Should prohibit a value that begins with the word "where"-->
  <xs:simpleType name="WqlWhereClauseType">
    <xs:restriction base="xs:string">
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="SqlInstanceNamePattern">
    <xs:restriction base="xs:string">
      <!--localhost or localhost\somename or localhost\*-->
      <xs:pattern value="localhost|localhost\\[\w$#_-]+|localhost\\\*"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="SqlQueryStringType">
    <xs:restriction base="xs:string">
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MetabasePathType">
    <xs:restriction base="xs:string">
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="RegistryKeyPathType">
    <xs:restriction base="xs:string">
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>
  <!--
        Allow for default registry value
    -->
  <xs:simpleType name="RegistryValueNameType">
    <xs:restriction base="xs:string">
      <xs:minLength value="0" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="RegistryNameFilterType">
    <xs:restriction base="xs:string">
      <xs:minLength value="0" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="AssemblyNameType">
    <xs:restriction base="xs:string">
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="FileFilterType">
    <xs:restriction base="xs:string">
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="FolderFilterType">
    <xs:restriction base="xs:string">
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DefinedPlatformsType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="I386"/>
      <xs:enumeration value="IA64"/>
      <xs:enumeration value="x64"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DefinedPlatformNamesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Win NT"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="PlatformMinVersionType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[1-9]\.[0-9]{2}\.[0-9]{4}\.[0-9]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="PlatformMaxVersionType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[1-9]\.[0-9]{2}\.[0-9]{4}\.[0-9]{1,4}" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="FilePathType">
    <xs:restriction base="xs:string">
      <xs:minLength value="2" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="FolderPathType">
    <xs:restriction base="xs:string">
      <xs:minLength value="3" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="PlatformApplicabilityQueryType">
    <xs:restriction base="xs:string">
      <xs:minLength value="20" />
    </xs:restriction>
  </xs:simpleType>
  <!--
    Logically, platform applicability is a boolean value determined as follows (pseudocode):
        [InstanceCountNotZero(Query1) AND InstanceCountNotZero(Query2)]
    If the Query elements are not present, applicablity is True.
    The attributes are UI hints only and should be ignored for discovery purposes.
    -->
  <xs:complexType name="PlatformApplicabilityConditionType">
    <xs:sequence>
      <xs:element name="Query1" type="tns:PlatformApplicabilityQueryType"/>
      <xs:element name="Query2" type="tns:PlatformApplicabilityQueryType"/>
      <xs:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="Platform" type="tns:DefinedPlatformsType" use="required"/>
    <xs:attribute name="Name" type="tns:DefinedPlatformNamesType" use="required"/>
    <xs:attribute name="MinVersion" type="tns:PlatformMinVersionType" use="required"/>
    <xs:attribute name="MaxVersion" type="tns:PlatformMaxVersionType" use="required"/>
    <xs:attribute name="DisplayName" type="tns:NonEmptyStringType" use="required"/>
  </xs:complexType>
  <xs:complexType name="PartType" abstract="true">
    <xs:sequence>
      <xs:element ref="rules:Annotation"/>
      <xs:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="LogicalName" type="tns:LogicalName" use="required"/>
  </xs:complexType>
  <xs:complexType name="DiscoverySourceType" abstract="true">
    <xs:sequence>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OptimizationBaseType" abstract="true">
    <xs:sequence>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MsiInfoType">
    <xs:sequence>
      <xs:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ProductCode" type="tns:NonEmptyStringType" use="required"/>
    <xs:attribute name="Version" type="tns:NonEmptyStringType" use="optional"/>
    <xs:attribute name="IsPerUser" type="xs:boolean" use="required"/>
  </xs:complexType>
  <xs:simpleType name="ScriptType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="VBScript"/>
      <xs:enumeration value="JScript"/>
      <xs:enumeration value="PowerShell"/>
      <xs:enumeration value="ShellScript"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="ScriptInfoType">
    <xs:sequence>
      <xs:element name="Script" type="tns:NonEmptyStringType" />
      <xs:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ScriptType" type="tns:ScriptType" use="required"/>
  </xs:complexType>
  <xs:complexType name="OSInfoType">
    <xs:sequence>
      <xs:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="MajorVersion" type="xs:unsignedInt" use="required"/>
    <xs:attribute name="MinorVersion" type="xs:unsignedInt" use="required"/>
    <xs:attribute name="BuildVersion" type="xs:unsignedInt" use="required"/>
    <xs:attribute name="ServicePackMajorVersion" type="xs:unsignedInt" use="optional"/>
    <xs:attribute name="ServicePackMinorVersion" type="xs:unsignedInt" use="optional"/>
  </xs:complexType>
  <xs:complexType name="SimpleSettingType">
    <xs:sequence>
      <xs:element ref="rules:Annotation"/>
      <xs:element ref="tns:DiscoverySource" />
      <xs:element name="Applicability" type="tns:SettingApplicabilityType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="Optimization" type="tns:OptimizationType" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
    <xs:attribute name="LogicalName" type="tns:LogicalName" use="required"/>
    <xs:attribute name="DataType" type="rules:DataTypeType" use="required"/>
    <xs:attribute name="ObjectType" type="xs:string" use="optional"/>
    <xs:attribute name="ApplicableAtUserLogon" type="xs:boolean" use="optional" />
  </xs:complexType>
  <xs:complexType name="SettingApplicabilityType">
    <xs:sequence>
      <xs:element ref="rules:ExpressionBase"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OptimizationType">
    <xs:sequence>
      <xs:element ref="tns:OptimizationBase"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="BaselevelOptimizationType">
    <xs:complexContent>
      <xs:extension base="tns:OptimizationBaseType">
        <xs:sequence>
          <xs:element ref="tns:CIMDiscoverySource" />
        </xs:sequence>
        <xs:attribute name="DataType" type="rules:DataTypeType" use="required"/>
        <xs:attribute name="ObjectType" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="RootComplexSettingType">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="tns:ComplexSetting" />
      <xs:element ref="tns:SimpleSetting"/>
      <xs:element ref="tns:RuleOverrideReference"/>
      <xs:element ref="tns:RuleSeverityOverrideReference"/>
    </xs:choice>
  </xs:complexType>
  <xs:complexType name="ComplexSettingType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="tns:ComplexSetting" />
        <xs:element ref="tns:SimpleSetting"/>
      </xs:choice>
      <xs:element ref="rules:Annotation" />
      <xs:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="LogicalName" type="tns:LogicalName" use="required"/>
  </xs:complexType>
  <xs:simpleType name="RegistryHiveType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="HKEY_CLASSES_ROOT"/>
      <xs:enumeration value="HKEY_CURRENT_CONFIG"/>
      <xs:enumeration value="HKEY_CURRENT_USER"/>
      <xs:enumeration value="HKEY_LOCAL_MACHINE"/>
      <xs:enumeration value="HKEY_USERS"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="SccmAceString">
    <xs:restriction base="xs:string">
      <xs:pattern value="\((A|D|OA|OD);[^;]*;((GA|GR|GW|GX|RC|SD|WD|WO|RP|WP|CC|DC|LC|SW|LO|DT|CR|KA|KR|KW|KX|FR|FW|FX|FA)+|(0x[0-9A-Fa-f]{1,8}));[^;]*;[^;]*;[^;]*\)"/>
      <!--
                Standard ACE SDDL String Format:
                ace_type;ace_flags;rights;object_guid;inherit_object_guid;account_sid
                In the SccmAceString, the following conventions apply:
                ace_type:   This will only allow for ALLOW and DENY type ACEs
                ace_flags:  Not used.
                rights:     The values used here are the entire set of possible string ACE rights
                            or a hexadecimal representation.
                object_guid:         Not used.
                inherit_object_guid: Not used.
                account_sid: This will either be one of the well-known SID strings or a non-resolved name.
                              Non-resolved names will be wrapped in curly braces {}. 
                              No pattern is used to enforce this though for now.
                -->
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="AccessControlListType">
    <xs:sequence>
      <xs:element ref="tns:SccmAceEntry" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="IsFullySpecified" type="xs:boolean" use="required"/>
  </xs:complexType>
  <!--CI Types-->
  <xs:complexType name="BaselineType">
    <xs:complexContent>
      <xs:extension base="tns:ConfigurationItemType">
        <xs:sequence>
          <xs:element name="RequiredItems">
            <xs:complexType>
              <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="tns:ApplicationReference"/>
                <xs:element ref="tns:BusinessPolicyReference"/>
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="ProhibitedItems">
            <xs:complexType>
              <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="tns:ApplicationReference"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="OptionalItems">
            <xs:complexType>
              <xs:sequence>
                <xs:element ref="tns:ApplicationReference" minOccurs="0" maxOccurs="unbounded"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="OperatingSystems">
            <xs:complexType>
              <xs:sequence>
                <xs:element ref="tns:OperatingSystemReference" minOccurs="0" maxOccurs="unbounded"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="SoftwareUpdates">
            <xs:complexType>
              <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="tns:SoftwareUpdateReference" />
                <xs:element ref="tns:SoftwareUpdateBundleReference" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="Baselines">
            <xs:complexType>
              <xs:sequence>
                <xs:element ref="tns:BaselineReference" minOccurs="0" maxOccurs="unbounded"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="OtherConfigurationItems">
            <xs:complexType>
              <xs:sequence>
                <xs:element ref="tns:OtherConfigurationItemReference" minOccurs="0" maxOccurs="unbounded"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ApplicationType">
    <xs:complexContent>
      <xs:extension base="tns:ConfigurationItemWithContentsType">
        <xs:sequence>
          <!--No PlatformApplicabilityCondition means applicable to all platforms-->
          <xs:element ref="rules:PlatformApplicabilityCondition" minOccurs="0" maxOccurs="1"/>
          <!--Either MSI or Script based discovery-->
          <xs:choice>
            <xs:element name="MsiDiscoveryInfo" type="tns:MsiInfoType"/>
            <xs:element name="ScriptDiscoveryInfo" type="tns:ScriptInfoType"/>
            <xs:element name="DeploymentTypeReference" type="rules:DeploymentTypeReferenceType"/>
          </xs:choice>
        </xs:sequence>
        <xs:attribute name="Is64Bit" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="OperatingSystemType">
    <xs:complexContent>
      <xs:extension base="tns:ConfigurationItemWithContentsType">
        <xs:sequence>
          <!--No PlatformApplicabilityCondition means applicable to all platforms-->
          <xs:element ref="rules:PlatformApplicabilityCondition" minOccurs="0" maxOccurs="1"/>
          <xs:choice>
            <xs:element ref="tns:OperatingSystemDiscoveryInfo"/>
            <xs:element ref="rules:OperatingSystemDiscoveryRule"/>
          </xs:choice>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="BusinessPolicyType">
    <xs:complexContent>
      <xs:extension base="tns:ConfigurationItemWithContentsType">
        <xs:sequence>
          <!--No PlatformApplicabilityCondition means applicable to all platforms-->
          <xs:element ref="rules:PlatformApplicabilityCondition" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SoftwareUpdateType">
    <xs:complexContent>
      <xs:extension base="tns:ConfigurationItemType">
        <xs:sequence>
          <xs:element ref="tns:ConfigurationMetadata" />
          <xs:element name="SupersededUpdates" minOccurs="0" maxOccurs="1">
            <xs:complexType>
              <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="tns:SoftwareUpdateReference" />
                <xs:element ref="tns:SoftwareUpdateBundleReference" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SoftwareUpdateBundleType">
    <xs:complexContent>
      <xs:extension base="tns:SoftwareUpdateType">
        <xs:sequence>
          <xs:element name="Updates">
            <xs:complexType>
              <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="tns:SoftwareUpdateReference" />
                <xs:element ref="tns:SoftwareUpdateBundleReference" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AuthorizationListType">
    <xs:complexContent>
      <xs:extension base="tns:ConfigurationItemType">
        <xs:sequence>
          <xs:element name="Updates">
            <xs:complexType>
              <xs:sequence>
                <xs:element ref="tns:SoftwareUpdateReference" minOccurs="0" maxOccurs="unbounded"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DriverType">
    <xs:complexContent>
      <xs:extension base="tns:ConfigurationItemType">
        <xs:sequence>
          <xs:element name="DriverIdentity" type="tns:DriverIdentityType"/>
          <xs:element name="ModelSections">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="ModelSection" type="tns:ModelSectionType" minOccurs="1" maxOccurs="unbounded"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="BootCriticalEntries" minOccurs="0" maxOccurs="1">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="BootCriticalEntry" type="tns:BootCriticalEntryType" minOccurs="0" maxOccurs="unbounded"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="PlatformApplicabilityConditions" >
            <!--No PlatformApplicabilityCondition means applicable to all platforms-->
            <xs:complexType>
              <xs:sequence>
                <xs:element name="PlatformApplicabilityCondition" type="tns:PlatformApplicabilityConditionType" minOccurs="0"  maxOccurs="unbounded"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <!--
                    Currently used by Software Updates and Driver Catalog for defining content
                    among other things.
                    -->
          <xs:element ref="tns:ConfigurationMetadata" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ApplicationPolicyType">
    <xs:complexContent>
      <xs:extension base="tns:ConfigurationItemType">
        <xs:sequence>
          <xs:element name="Application" type="rules:ConfigurationItemReferenceType"/>
          <xs:element name="ApplicationDeploymentRules" type="tns:ApplicationDeploymentRulesType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="OtherConfigurationItemType">
    <xs:complexContent>
      <xs:extension base="tns:ConfigurationItemType">
        <!--Empty extension-->
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- Gloabl Settings CI-->
  <xs:complexType name="GlobalSettingsConfigurationItemType">
    <xs:complexContent>
      <xs:extension base="tns:ConfigurationItemWithContentsType">
        <xs:sequence>
          <!--No PlatformApplicabilityCondition means applicable to all platforms-->
          <xs:element ref="rules:PlatformApplicabilityCondition" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--Global Expression CI-->
  <xs:complexType name="GlobalExpressionConfigurationItemType">
    <xs:complexContent>
      <xs:extension base="tns:ConfigurationItemWithContentsType">
        <xs:sequence>
          <!--No PlatformApplicabilityCondition means applicable to all platforms-->
          <xs:element ref="rules:PlatformApplicabilityCondition" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--Virtual Environment CI-->
  <xs:complexType name="VirtualEnvironmentConfigurationItemType">
    <xs:complexContent>
      <xs:extension base="tns:ConfigurationItemWithContentsType">
        <xs:sequence>
          <xs:element ref="rules:VirtualEnvironmentRule" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--Platform Configuration Item -->
  <xs:complexType name="PlatformConfigurationItemType">
    <xs:complexContent>
      <xs:extension base="tns:ConfigurationItemWithContentsType">
        <!--No specific schema for Platform Configuration Item-->
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--Part types-->
  <xs:complexType name="RegistryKeyType">
    <xs:complexContent>
      <xs:extension base="tns:PartType">
        <xs:sequence>
          <xs:element name="Key" type="tns:RegistryKeyPathType" />
          <xs:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
        <xs:attribute name="Hive" type="tns:RegistryHiveType" use="required"/>
        <xs:attribute name="Is64Bit" type="xs:boolean" use="required"/>
        <xs:attribute name="IsPerUser" type="xs:boolean" use="optional" />
        <xs:attribute name="ApplicableAtUserLogon" type="xs:boolean" use="optional" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="FolderType">
    <xs:complexContent>
      <xs:extension base="tns:PartType">
        <xs:sequence>
          <!--
                    Absolute path to the folder. Explicit UNC names
                    are not supported.
                    -->
          <xs:element name="Path" type="tns:FilePathType"/>
          <xs:element name="Filter" type="tns:FolderFilterType"/>
          <xs:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
        <xs:attribute name="Depth" type="tns:SearchDepthType" use="optional"/>
        <xs:attribute name="Is64Bit" type="xs:boolean" use="required"/>
        <xs:attribute name="IsPerUser" type="xs:boolean" use="optional" />
        <xs:attribute name="ApplicableAtUserLogon" type="xs:boolean" use="optional" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="FileType">
    <!--The same comments from the FolderType apply.-->
    <xs:complexContent>
      <xs:extension base="tns:PartType">
        <xs:sequence>
          <!--
                    Absolute path to the file. Explicit UNC names
                    are not supported.
                    -->
          <xs:element name="Path" type="tns:FilePathType"/>
          <xs:element name="Filter" type="tns:FileFilterType"/>
          <xs:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
        <xs:attribute name="Depth" type="tns:SearchDepthType" use="optional"/>
        <xs:attribute name="Is64Bit" type="xs:boolean" use="required"/>
        <xs:attribute name="IsPerUser" type="xs:boolean" use="optional" />
        <xs:attribute name="ApplicableAtUserLogon" type="xs:boolean" use="optional" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AssemblyType">
    <xs:complexContent>
      <xs:extension base="tns:PartType">
        <xs:sequence>
          <xs:element name="AssemblyName" type="tns:AssemblyNameType"/>
          <xs:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="MSIType">
    <xs:complexContent>
      <xs:extension base="tns:PartType">
        <xs:sequence>
          <xs:element name="ProductCode" type="xs:string" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="IsPerUser" type="xs:boolean" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--Discovery Source Types-->
  <!--
    Base:       Only the base container (typically specified via Path) is searched.
    OneLevel:   Only the first level of containers beneath the base container is searched,
                including the base container itself.
    Subtree:    The entire subtree of containers is searched.
    -->
  <xs:simpleType name="SearchDepthType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Base"/>
      <xs:enumeration value="OneLevel"/>
      <xs:enumeration value="Subtree"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="RegistryDiscoveryType">
    <xs:complexContent>
      <xs:extension base="tns:DiscoverySourceType">
        <xs:sequence>
          <xs:element name="Key" type="tns:RegistryKeyPathType"/>
          <xs:choice>
            <xs:element name="ValueName" type="tns:RegistryValueNameType"/>
            <xs:element name="ValuePattern" type="tns:RegistryNameFilterType" />
          </xs:choice>
        </xs:sequence>
        <xs:attribute name="Hive" type="tns:RegistryHiveType" use="required"/>
        <xs:attribute name="Depth" type="tns:SearchDepthType" use="optional"/>
        <xs:attribute name="Is64Bit" type="xs:boolean" use="required"/>
        <xs:attribute name="IsPerUser" type="xs:boolean" use="optional" />
        <xs:attribute name="CreateMissingPath" type="xs:boolean" use="optional" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="IISMetabaseDiscoveryType">
    <xs:complexContent>
      <xs:extension base="tns:DiscoverySourceType">
        <xs:sequence>
          <xs:element name="Path" type="tns:MetabasePathType"/>
          <xs:element name="PropertyID" type="xs:unsignedInt"/>
        </xs:sequence>
        <xs:attribute name="Depth" type="tns:SearchDepthType" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SqlQueryDiscoveryType">
    <xs:complexContent>
      <xs:extension base="tns:DiscoverySourceType">
        <xs:sequence>
          <xs:element name="Instance" type="tns:SqlInstanceNamePattern" minOccurs="0" maxOccurs="1"/>
          <xs:element name="Database" type="tns:NonEmptyStringType"/>
          <xs:element name="Query" type="tns:SqlQueryStringType"/>
          <xs:element name="ColumnName" type="tns:NonEmptyStringType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="WqlQueryDiscoveryType">
    <xs:complexContent>
      <xs:extension base="tns:DiscoverySourceType">
        <xs:sequence>
          <xs:element name="Namespace" type="tns:WqlNamespaceType" />
          <xs:element name="Class" type="tns:NonEmptyStringType"/>
          <xs:element name="Property" type="tns:NonEmptyStringType"/>
          <xs:element name="Where" type="tns:WqlWhereClauseType" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ScriptDefinitionType">
    <xs:simpleContent>
      <xs:extension base="tns:NonEmptyStringType">
        <xs:attribute name="ScriptType" type="tns:ScriptType" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="ScriptDiscoveryType">
    <xs:complexContent>
      <xs:extension base="tns:DiscoverySourceType">
        <xs:sequence>
          <xs:element name="DiscoveryScriptBody" type="tns:ScriptDefinitionType" />
          <xs:element name="RemediationScriptBody" type="tns:ScriptDefinitionType" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="IsPerUser" type="xs:boolean" use="optional"/>
        <xs:attribute name="Is64Bit" type="xs:boolean" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="XPathNamespaceDeclarationType">
    <xs:attribute name="Prefix" type="tns:NamespacePrefixType" use="required"/>
    <xs:attribute name="Namespace" type="xs:anyURI" use="required"/>
  </xs:complexType>
  <xs:element name="NamespaceDeclarations">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="NamespaceDeclaration" type="tns:XPathNamespaceDeclarationType" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="XPathExpression" type="tns:XPathExpressionType"/>
  <xs:complexType name="XPathDiscoveryType">
    <xs:complexContent>
      <xs:extension base="tns:DiscoverySourceType">
        <xs:sequence>
          <xs:element name="FilePath" type="tns:FilePathType"/>
          <xs:element name="Filter" type="tns:FileFilterType"/>
          <xs:element ref="tns:XPathExpression" />
          <xs:element ref="tns:NamespaceDeclarations" minOccurs="0" maxOccurs="1" />
        </xs:sequence>
        <xs:attribute name="Depth" type="tns:SearchDepthType" use="optional"/>
        <xs:attribute name="Is64Bit" type="xs:boolean" use="required"/>
        <xs:attribute name="IsPerUser" type="xs:boolean" use="optional" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ActiveDirectoryDiscoveryType">
    <xs:complexContent>
      <xs:extension base="tns:DiscoverySourceType">
        <xs:sequence>
          <xs:element name="LdapPrefix" type="tns:LdapPrefixType" />
          <xs:element name="DnName" type="tns:DnNameType"/>
          <xs:element name="Filter" type="tns:LdapFilterType"/>
          <xs:element name="Attribute" type="tns:NonEmptyStringType"/>
        </xs:sequence>
        <xs:attribute name="Depth" type="tns:SearchDepthType" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CIMDiscoverySource">
    <xs:complexContent>
      <xs:extension base="tns:DiscoverySourceType">
        <xs:choice>
          <xs:sequence>
            <xs:element ref="rules:CIMReference"/>
          </xs:sequence>
          <xs:sequence>
            <xs:element name="ConfigurationPointContext" type="xs:string" minOccurs="0" maxOccurs="1" nillable="true"/>
            <xs:element name="ConfigurationPoint" type="xs:string" minOccurs="1" maxOccurs="1" nillable="false"/>
          </xs:sequence>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="UriDiscoveryType">
    <xs:complexContent>
      <xs:extension base="tns:DiscoverySourceType">
        <xs:attribute name="Uri" type="xs:string" use="required"/>
        <xs:attribute name="IsNode" type="xs:boolean" use="optional" />
        <xs:attribute name="TypeOfUri" type="tns:OmaUriType" use="optional" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="PlistKeyDiscoveryType">
    <xs:complexContent>
      <xs:extension base="tns:DiscoverySourceType">
        <xs:attribute name="ApplicationID" type="tns:NonEmptyStringType" use="required"/>
        <xs:attribute name="KeyName" type="tns:NonEmptyStringType" use="required" />
        <xs:attribute name="IsPerUser" type="xs:boolean" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="MacDetectionType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Package"/>
      <xs:enumeration value="AppBundle"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="MacDetectionDiscoveryType">
    <xs:complexContent>
      <xs:extension base="tns:DiscoverySourceType">
        <xs:attribute name="DetectionId" type="tns:NonEmptyStringType" use="required"/>
        <xs:attribute name="DetectionType" type="tns:MacDetectionType" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ParameterizedDiscoveryType">
    <xs:complexContent>
      <xs:extension base="tns:DiscoverySourceType">
        <xs:sequence>
          <xs:element ref="rules:SettingReference" minOccurs="1" maxOccurs="1"/>
          <xs:element ref="rules:ConstantValueList" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="OmaUriType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="OmaUri" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="OtherDiscoveryType">
    <xs:complexContent>
      <xs:extension base="tns:DiscoverySourceType">
        <xs:choice minOccurs="0">
          <xs:element name="ExternalXPathDiscoveryInfo">
            <xs:complexType>
              <xs:sequence>
                <xs:element ref="tns:XPathExpression">
                  <xs:annotation>
                    <xs:documentation>
                      potentially namespace prefixed XPath expression
                    </xs:documentation>
                  </xs:annotation>
                </xs:element>
                <xs:element ref="tns:NamespaceDeclarations">
                  <xs:annotation>
                    <xs:documentation>
                      Additional namespaces and associated prefixes used in the XPath
                      expression above
                    </xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--
    The following definitions are used to support Driver Catalog driver definitions
    -->
  <xs:complexType name="DriverIdentityType">
    <xs:attribute name="Type" type="xs:string" use="required"/>
    <xs:attribute name="INFFile" type="xs:string" use="required"/>
    <xs:attribute name="Class" type="xs:string" use="required"/>
    <xs:attribute name="Provider" type="xs:string" use="required"/>
    <xs:attribute name="Date" type="xs:string" use="required"/>
    <xs:attribute name="Version" type="xs:string" use="required"/>
    <xs:attribute name="Signed" type="xs:boolean" use="required"/>
    <xs:attribute name="Signer" type="xs:string" use="optional"/>
  </xs:complexType>
  <xs:complexType name="ModelSectionType">
    <xs:sequence>
      <xs:element name="Model" type="tns:DriverModelType" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="ManufacturerId" type="xs:string" use="required"/>
    <xs:attribute name="ManufacturerName" type="xs:string" use="required"/>
    <xs:attribute name="TargetOSVersion" type="xs:string" use="required"/>
  </xs:complexType>
  <xs:complexType name="DriverModelType">
    <xs:sequence>
      <xs:element name="HwId" minOccurs="0" maxOccurs="unbounded">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:string">
              <xs:attribute name="Compatible" type="xs:boolean" use="optional" default="false" />
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="Name" type="xs:string" use="required"/>
    <xs:attribute name="Enabled" type="xs:boolean" use="required"/>
  </xs:complexType>
  <xs:complexType name="BootCriticalEntryType">
    <xs:sequence>
      <xs:element name="Description" type="xs:string"/>
    </xs:sequence>
    <xs:attribute name="HardwareComponent" type="xs:string" use="required"/>
    <xs:attribute name="ID" type="xs:string" use="required"/>
  </xs:complexType>
  <!--
    The following definitions are taken from the schema definiton previously used by
    Software Updates when generating the Sdm v2 packages. They are copied to this
    namespace as an initial step toward schema consolidation.
    -->
  <xs:element name="ConfigurationMetadata">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Provider" type="tns:Provider" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="Version" type="xs:string" use="optional" default="1.0" />
      <xs:attribute name="SmsUniqueIdentity" type="xs:string" use="optional" />
    </xs:complexType>
  </xs:element>
  <xs:simpleType name="FourPartVersion">
    <xs:restriction base="xs:string">
      <xs:pattern value="(0|[1-5][0-9]{0,4}|[7-9][0-9]{0,3}|6[0-4][0-9]{0,3}|6[6-9][0-9]{0,2}|65|65[0-4][0-9]{0,2}|65[6-9][0-9]?|655|655[0-2][0-9]?|655[4-9]|6553[0-5]?).(0|[1-5][0-9]{0,4}|[7-9][0-9]{0,3}|6[0-4][0-9]{0,3}|6[6-9][0-9]{0,2}|65|65[0-4][0-9]{0,2}|65[6-9][0-9]?|655|655[0-2][0-9]?|655[4-9]|6553[0-5]?).(0|[1-5][0-9]{0,4}|[7-9][0-9]{0,3}|6[0-4][0-9]{0,3}|6[6-9][0-9]{0,2}|65|65[0-4][0-9]{0,2}|65[6-9][0-9]?|655|655[0-2][0-9]?|655[4-9]|6553[0-5]?).(0|[1-5][0-9]{0,4}|[7-9][0-9]{0,3}|6[0-4][0-9]{0,3}|6[6-9][0-9]{0,2}|65|65[0-4][0-9]{0,2}|65[6-9][0-9]?|655|655[0-2][0-9]?|655[4-9]|6553[0-5]?)" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="FilePath">
    <xs:restriction base="xs:string" />
  </xs:simpleType>
  <xs:complexType name="File">
    <xs:attribute name="Name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the file on the system (including subfolders, relative to the component root).</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="Version" type="tns:FourPartVersion" use="optional">
      <xs:annotation>
        <xs:documentation>File version information</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="Hash" type="xs:hexBinary" use="optional">
      <xs:annotation>
        <xs:documentation>A hash of the file referred to by name. A hexadecimal string of length depending on the hash algorithm.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="HashAlgorithm" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>Algorithm used to create a hash of the file.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="Size" type="xs:unsignedLong" use="optional">
      <xs:annotation>
        <xs:documentation>The size of the files in bytes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="SourceURL" type="xs:anyURI" use="optional">
      <xs:annotation>
        <xs:documentation>Location (URL) of the file for download.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ImportPath" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>Import location, represented by a path (with file name), relative to import root.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="Signed" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>Specifies whether the content of the file has been signed.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Content">
    <xs:sequence>
      <xs:element name="FileContent" type="tns:File" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="ContentDescription" type="rules:LocalizableString" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
    <xs:attribute name="ContentId" type="xs:string" use="required" />
    <xs:attribute name="Version" type="xs:unsignedLong" use="optional"/>
    <xs:attribute name="HashAlgorithm" type="xs:string"  use="optional"/>
    <xs:attribute name="Hash" type="xs:hexBinary" use="optional" />
    <xs:attribute name="HashVersion" type="xs:unsignedLong" use="optional" />
  </xs:complexType>
  <xs:simpleType name="LanguageType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="VBScript" />
      <xs:enumeration value="JScript" />
      <xs:enumeration value="WindowsScript" />
      <xs:enumeration value="Wql" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ApplicabilityRuleType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Script" />
      <xs:enumeration value="Wql" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MethodType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Detect" />
      <xs:enumeration value="Install" />
      <xs:enumeration value="Remove" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="WQLQuery">
    <xs:sequence>
      <xs:element name="NameSpace" type="xs:string" />
      <xs:element name="Query" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ScriptQuery">
    <xs:sequence>
      <xs:element name="Language" type="tns:LanguageType" />
      <xs:element name="Definition" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Applicability">
    <xs:sequence>
      <xs:element name="Parameter" type="tns:PropertyBag" />
    </xs:sequence>
    <xs:attribute name="RuleType" type="tns:ApplicabilityRuleType" />
  </xs:complexType>
  <xs:complexType name="PropertyValue">
    <xs:attribute name="Name" type="xs:string" use="required" />
    <xs:attribute name="Value" type="xs:string" use="required" />
  </xs:complexType>
  <xs:complexType name="PropertyBag">
    <xs:choice minOccurs="1" maxOccurs="unbounded">
      <xs:element name="Property" type="tns:PropertyValue" />
    </xs:choice>
    <xs:attribute name="Name" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="StatusCode">
    <xs:choice minOccurs="1" maxOccurs="unbounded">
      <xs:element name="Code">
        <xs:complexType>
          <xs:attribute name="Value" type="xs:unsignedLong" use="required"/>
        </xs:complexType>
      </xs:element>
      <xs:element name="Range">
        <xs:complexType>
          <xs:attribute name="Start" type="xs:unsignedLong" use="required" />
          <xs:attribute name="End" type="xs:unsignedLong" use="required" />
        </xs:complexType>
      </xs:element>
    </xs:choice>
    <xs:attribute name="Type" type="xs:string" use="required" />
  </xs:complexType>
  <xs:complexType name="Operation">
    <xs:sequence>
      <xs:element name="Content" type="tns:Content" minOccurs="0" maxOccurs="1" />
      <xs:element name="Parameter" type="tns:PropertyBag" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="StatusCode" type="tns:StatusCode" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="Name" type="tns:MethodType" use="required" />
  </xs:complexType>
  <xs:complexType name="Provider">
    <xs:sequence>
      <xs:element name="Applicability" type="tns:Applicability" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Operation" type="tns:Operation" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="SourceType" type="xs:string" use="required" />
  </xs:complexType>
  <xs:complexType name="ApplicationDeploymentRulesType">
    <xs:sequence>
      <xs:element ref="rules:DeploymentTypeRule" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>
<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="RulesSchema" 
           targetNamespace="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/06/14/Rules"
           elementFormDefault="qualified"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:tns ="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/06/14/Rules" 
           version="1">
  <!-- All abstract types start here -->
  <!-- Rule Base -->  
  <xs:element name="RuleBase" type="tns:RuleBaseType" abstract="true"/>
  <xs:element name="RuleBaseWithIdAndSeverity" type="tns:RuleBaseWithIdAndSeverityType" abstract="true"/>
  <xs:element name="DCMRule" type="tns:RuleBaseWithIdAndSeverityType" substitutionGroup="tns:RuleBaseWithIdAndSeverity" abstract="true"/>
  <xs:complexType name="RuleBaseType">
    <xs:sequence>
      <xs:element ref="tns:Annotation" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RuleBaseWithIdAndSeverityType">
    <xs:sequence>
      <xs:element ref="tns:Annotation" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="id" type="xs:string" use="required"/>
    <xs:attribute name="Severity" type="tns:RuleSeverityType" use="required"/>
    <xs:attribute name="IsHidden" type="xs:boolean" use="optional"/>
    <xs:attribute name="NonCompliantWhenSettingIsNotFound" type="xs:boolean" use="optional" />
  </xs:complexType>
  <!-- ExpressionOrOperand Base-->
  <xs:element name="ExpressionOrOperandBase" type="tns:ExpressionOrOperandBaseType" abstract="true"/>
  <xs:complexType name="ExpressionOrOperandBaseType">
  </xs:complexType>
  <!-- Expression Base-->
  <xs:element name="ExpressionBase" type="tns:ExpressionBaseType" abstract="true" substitutionGroup="tns:ExpressionOrOperandBase"/>
  <xs:complexType name="ExpressionBaseType">
    <xs:complexContent>
      <xs:extension base="tns:ExpressionOrOperandBaseType">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- Operand Base-->
  <xs:element name="OperandBase" type="tns:OperandBaseType" abstract="true" substitutionGroup="tns:ExpressionOrOperandBase"/>
  <xs:complexType name="OperandBaseType">
    <xs:complexContent>
      <xs:extension base="tns:ExpressionOrOperandBaseType">
        <xs:attribute name="DataType" type="tns:DataTypeType" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- All abstract types end here -->
  <!-- All common types start here -->
  <!-- Annotation -->
  <xs:element name="Annotation">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="DisplayName" type="tns:LocalizableString"  />
        <xs:element name="Description" type="tns:LocalizableString" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="LocalizableString">
    <xs:attribute name="Text" type="xs:string" use="required" />
    <xs:attribute name="ResourceId" type="xs:ID" use="optional"/>
  </xs:complexType>
  <!-- CIReference -->
  <xs:complexType name="ConfigurationItemReferenceType">
    <xs:attribute name="AuthoringScopeId" type="xs:Name" use="required"/>
    <xs:attribute name="LogicalName" type="xs:Name" use="required"/>
    <xs:attribute name="Version" type="xs:unsignedInt" use="optional"/>
    <xs:attribute name="RequiresAllVersions" type="xs:boolean" use="optional"/>
  </xs:complexType>
  <!-- RuleSeverity -->
  <xs:simpleType name="RuleSeverityType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="None"/>
      <xs:enumeration value="Informational"/>
      <xs:enumeration value="Warning"/>
      <xs:enumeration value="Critical"/>
      <xs:enumeration value="CriticalWithEvent"/>
      <xs:enumeration value="Other"/>
    </xs:restriction>
  </xs:simpleType>
  <!-- Operator -->
  <xs:simpleType name="OperatorType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="And"/>
      <xs:enumeration value="Or"/>
      <xs:enumeration value="Equals"/>
      <xs:enumeration value="NotEquals"/>
      <xs:enumeration value="GreaterThan"/>
      <xs:enumeration value="LessThan"/>
      <xs:enumeration value="Between"/>
      <xs:enumeration value="GreaterEquals"/>
      <xs:enumeration value="LessEquals"/>
      <xs:enumeration value="BeginsWith"/>
      <xs:enumeration value="NotBeginsWith"/>
      <xs:enumeration value="EndsWith"/>
      <xs:enumeration value="NotEndsWith"/>
      <xs:enumeration value="Contains"/>
      <xs:enumeration value="NotContains"/>
      <xs:enumeration value="AllOf"/>
      <xs:enumeration value="OneOf"/>
      <xs:enumeration value="NoneOf"/>
      <xs:enumeration value="SetEquals"/>
      <!-- Add new operators here -->     
    </xs:restriction>
  </xs:simpleType>
  <!-- VirtualEnvironmentAndOperator -->
  <xs:simpleType name="VirtualEnvironmentAndOperatorType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="And"/>
      <!-- Add new operators here -->
    </xs:restriction>
  </xs:simpleType>
  <!-- VirtualEnvironmentOrOperator -->
  <xs:simpleType name="VirtualEnvironmentOrOperatorType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Or"/>
      <!-- Add new operators here -->
    </xs:restriction>
  </xs:simpleType>
  <!-- DataType -->
  <xs:simpleType name="DataTypeType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Boolean"/>
      <xs:enumeration value="DateTime"/>
      <xs:enumeration value="Double"/>
      <xs:enumeration value="Int64"/>
      <xs:enumeration value="String"/>
      <xs:enumeration value="Version"/>
      <xs:enumeration value="FileSystemAccessControl"/>
      <xs:enumeration value="RegistryAccessControl"/>
      <xs:enumeration value="FileSystemAttribute"/>
      <xs:enumeration value="Object"/>
      <!-- Add more scalar types here -->
      <xs:enumeration value="BooleanArray"/>
      <xs:enumeration value="DateTimeArray"/>
      <xs:enumeration value="DoubleArray"/>
      <xs:enumeration value="Int64Array"/>
      <xs:enumeration value="StringArray"/>
      <xs:enumeration value="VersionArray"/>
      <xs:enumeration value="FileSystemAccessControlArray"/>
      <xs:enumeration value="RegistryAccessControlArray"/>
      <xs:enumeration value="FileSystemAttributeArray"/>
      <xs:enumeration value="ObjectArray"/>
      <!-- Add more vector types here -->
    </xs:restriction>
  </xs:simpleType>
  <!-- SettingSourceTypes -->
  <xs:simpleType name="SettingSourceTypes">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Registry"/>
      <xs:enumeration value="RegistryEx"/>
      <xs:enumeration value="IisMetabase"/>
      <xs:enumeration value="SqlQuery"/>
      <xs:enumeration value="WqlQuery"/>
      <xs:enumeration value="Script"/>
      <xs:enumeration value="XPathQuery"/>
      <xs:enumeration value="ADQuery"/>
      <xs:enumeration value="Complex"/>
      <xs:enumeration value="File"/>
      <xs:enumeration value="Folder"/>
      <xs:enumeration value="RegistryKey"/>
      <xs:enumeration value="Assembly"/>
      <xs:enumeration value="Uri"/>      
      <xs:enumeration value="ParameterizedSetting"/>
      <xs:enumeration value="PlistKey"/>
      <xs:enumeration value="MacDetection"/>
      <xs:enumeration value="MSI"/>      
      <xs:enumeration value="CIM"/>
      <xs:enumeration value="Unknown"/>
    </xs:restriction>
  </xs:simpleType>
  <!-- All common types end here -->
  <!-- All non-abstract Rule types start here -->
  <xs:element name="Rule" type="tns:RuleType" substitutionGroup="tns:DCMRule"/>
  <xs:element name="ConditionalRule" type="tns:ConditionalRuleType"  substitutionGroup="tns:DCMRule"/>
  <xs:element name="DeploymentTypeRule" type="tns:DeploymentTypeRuleType" substitutionGroup="tns:RuleBaseWithIdAndSeverity"/>
  <xs:element name="VirtualEnvironmentRule" type="tns:VirtualEnvironmentRuleType" substitutionGroup="tns:DCMRule"/>
  <xs:element name="OperatingSystemDiscoveryRule" type="tns:OperatingSystemDiscoveryRuleType" substitutionGroup="tns:RuleBase"/>
  <xs:element name="PlatformApplicabilityCondition" type="tns:PlatformApplicabilityConditionType" substitutionGroup="tns:RuleBase"/>
  <!-- RuleType -->
  <xs:complexType name="RuleType">
    <xs:complexContent>
      <xs:extension base="tns:RuleBaseWithIdAndSeverityType">
        <xs:sequence>          
          <xs:element ref ="tns:ExpressionBase"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- ConditionalRuleType -->
  <xs:complexType name="ConditionalRuleType">
    <xs:complexContent>
      <xs:extension base="tns:RuleBaseWithIdAndSeverityType">
        <xs:sequence>          
          <xs:element name="Condition" type="tns:ConditionType"/>
          <xs:element name="Goal" type="tns:GoalType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ConditionType">
    <xs:sequence>
      <xs:element ref="tns:ExpressionBase"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="GoalType">
    <xs:sequence>
      <xs:element ref="tns:ExpressionBase"/>
    </xs:sequence>
  </xs:complexType>
  <!-- DeloymentTypeRuleType -->
  <xs:complexType name="DeploymentTypeRuleType">
    <xs:complexContent>
      <xs:extension base="tns:RuleBaseWithIdAndSeverityType">
        <xs:sequence>
          <xs:choice>
            <xs:element ref="tns:DeploymentTypeExpression"/>
            <xs:element ref="tns:DeploymentTypeIntentExpression"/>
          </xs:choice>          
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- VirtualEnvironmentRuleType -->
  <xs:complexType name="VirtualEnvironmentRuleType">
    <xs:complexContent>
      <xs:extension base="tns:RuleBaseWithIdAndSeverityType">
        <xs:sequence>
          <xs:choice>
            <xs:element ref="tns:VirtualEnvironmentExpression"/>
            <xs:element ref="tns:VirtualEnvironmentMemberExpression"/>
            <xs:element ref="tns:VirtualEnvironmentMemberIntentExpression"/>
          </xs:choice>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- OperatingSystemDiscoveryRuleType -->
  <xs:complexType name="OperatingSystemDiscoveryRuleType">
    <xs:complexContent>
      <xs:extension base="tns:RuleBaseType">
        <xs:sequence>
          <xs:element ref="tns:OperatingSystemExpression"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- PlatformApplicabiltyRuleType -->
  <xs:complexType name="PlatformApplicabilityConditionType">
    <xs:complexContent>
      <xs:extension base="tns:RuleBaseType">
        <xs:sequence>
          <xs:element ref="tns:OperatingSystemExpression"/>          
        </xs:sequence>                        
      </xs:extension>      
    </xs:complexContent>
  </xs:complexType>
  <!-- All non-abstract Rule types end here -->
  <!-- All non-abstract Expression types start here -->
  <xs:element name="Expression" type="tns:ExpressionType" substitutionGroup="tns:ExpressionBase"/>
  <xs:element name="RuleExpression" type="tns:RuleExpressionType" substitutionGroup="tns:ExpressionBase"/>
  <xs:element name="ConfigurationItemExpression" type="tns:ConfigurationItemExpressionType" substitutionGroup="tns:ExpressionBase"/>
  <xs:element name="GlobalExpression" type="tns:GlobalExpressionType" substitutionGroup="tns:ExpressionBase"/>
  <xs:element name="DeploymentTypeExpression" type="tns:DeploymentTypeExpressionType" substitutionGroup="tns:ExpressionBase"/>
  <xs:element name="DeploymentTypeIntentExpression" type="tns:DeploymentTypeIntentExpressionType" substitutionGroup="tns:ExpressionBase"/>
  <xs:element name="OperatingSystemExpression" type="tns:OperatingSystemExpressionType" substitutionGroup="tns:ExpressionBase"/>
  <xs:element name="VirtualEnvironmentExpression" type="tns:VirtualEnvironmentExpressionType" substitutionGroup="tns:ExpressionBase"/>
  <xs:element name="VirtualEnvironmentMemberExpression" type="tns:VirtualEnvironmentMemberExpressionType" substitutionGroup="tns:ExpressionBase"/>
  <xs:element name="VirtualEnvironmentMemberIntentExpression" type="tns:VirtualEnvironmentMemberIntentExpressionType" substitutionGroup="tns:ExpressionBase"/>
  <!-- Expression -->
  <xs:complexType name="ExpressionType">
    <xs:complexContent>
      <xs:extension base="tns:ExpressionBaseType">
        <xs:sequence>
          <xs:element name="Operator" type="tns:OperatorType"/>
          <xs:element name="Operands">
            <xs:complexType>
              <xs:sequence>
                <xs:element ref="tns:ExpressionOrOperandBase" minOccurs="1" maxOccurs="unbounded"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="IsGroup" type="xs:boolean" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- RuleExpression -->
  <xs:complexType name="RuleExpressionType">
    <xs:complexContent>
      <xs:extension base="tns:ExpressionBaseType">
        <xs:attribute name="RuleId" type="xs:string" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- ConfigurationItemExpression -->
  <xs:complexType name="ConfigurationItemExpressionType">
    <xs:complexContent>
      <xs:extension base="tns:ExpressionBaseType">
        <xs:attribute name="AuthoringScopeId" type="xs:Name" use="required"/>
        <xs:attribute name="LogicalName" type="xs:Name" use="required"/>
        <xs:attribute name="Version" type="xs:unsignedInt" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- GlobalExpression -->
  <xs:complexType name="GlobalExpressionType">
    <xs:complexContent>
      <xs:extension base="tns:ExpressionBaseType">
        <xs:attribute name="AuthoringScopeId" type="xs:Name" use="required"/>
        <xs:attribute name="LogicalName" type="xs:Name" use="required"/>
      </xs:extension>                    
    </xs:complexContent>
  </xs:complexType>
  <!-- DeploymentTypeExpression -->
  <xs:complexType name="DeploymentTypeExpressionType">
    <xs:complexContent>
      <xs:extension base="tns:ExpressionBaseType">
        <xs:sequence>
          <xs:element name="Operator" type="tns:OperatorType"/>
          <xs:element name="Operands">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="DeploymentTypeIntentExpression" type="tns:DeploymentTypeIntentExpressionType" minOccurs="1" maxOccurs="unbounded"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>          
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- DeploymentTypeIntentExpression -->
  <xs:complexType name="DeploymentTypeIntentExpressionType">
    <xs:complexContent>
      <xs:extension base="tns:ExpressionBaseType">
        <xs:sequence>
          <xs:element name="DeploymentTypeApplicationReference" type="tns:ConfigurationItemReferenceType"/>
          <xs:element name="DeploymentTypeReference" type="tns:DeploymentTypeReferenceType"/>
        </xs:sequence>
        <xs:attribute name="DesiredState" type="tns:DeploymentTypeDesiredStates" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DeploymentTypeReferenceType">
    <xs:complexContent>
      <xs:extension base="tns:ConfigurationItemReferenceType">
        <xs:attribute name="Changeable" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="DeploymentTypeDesiredStates">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Required"/>
      <xs:enumeration value="Prohibited"/>
    </xs:restriction>
  </xs:simpleType>
  <!-- VirtualEnvironmentExpression -->
  <xs:complexType name="VirtualEnvironmentExpressionType">
    <xs:complexContent>
      <xs:extension base="tns:ExpressionBaseType">
        <xs:sequence>
          <xs:element name="VirtualEnvironmentAndOperator" type="tns:VirtualEnvironmentAndOperatorType"/>
          <xs:element name="Operands">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="VirtualEnvironmentMemberExpression" type="tns:VirtualEnvironmentMemberExpressionType" minOccurs="1" maxOccurs="unbounded"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- VirtualEnvironmentMemberExpression -->
  <xs:complexType name="VirtualEnvironmentMemberExpressionType">
    <xs:complexContent>
      <xs:extension base="tns:ExpressionBaseType">
        <xs:sequence>
          <xs:element ref="tns:Annotation" minOccurs="0"/>
          <xs:element name="VirtualEnvironmentOrOperator" type="tns:VirtualEnvironmentOrOperatorType"/>
          <xs:element name="Operands">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="VirtualEnvironmentMemberIntentExpression" type="tns:VirtualEnvironmentMemberIntentExpressionType" minOccurs="1" maxOccurs="unbounded"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- VirtualEnvironmentMemberIntentExpression -->
  <xs:complexType name="VirtualEnvironmentMemberIntentExpressionType">
    <xs:complexContent>
      <xs:extension base="tns:ExpressionBaseType">
        <xs:sequence>
          <xs:element name="DeploymentTypeApplicationReference" type="tns:ConfigurationItemReferenceType"/>
          <xs:element name="DeploymentTypeReference" type="tns:DeploymentTypeReferenceType"/>
        </xs:sequence>
        <xs:attribute name="DesiredState" type="tns:VirtualEnvironmentMemberDesiredStates" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="VirtualEnvironmentMemberDesiredStates">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Required"/>
      <xs:enumeration value="Optional"/>
    </xs:restriction>
  </xs:simpleType>
  <!-- OperatingSystemExpression -->
  <xs:complexType name="OperatingSystemExpressionType">
    <xs:complexContent>
      <xs:extension base="tns:ExpressionBaseType">
        <xs:sequence>
          <xs:element name="Operator" type="tns:OperatorType"/>
          <xs:element name="Operands">
            <xs:complexType>
              <xs:sequence>
                <xs:element ref="tns:RuleExpression" minOccurs="1" maxOccurs="unbounded" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- All non-abstract Expression types end here -->
  <!-- All non-abstract Operand types start here -->
  <xs:element name="CIMReference" type="tns:CIMReferenceType" substitutionGroup="tns:OperandBase"/>
  <xs:element name="ConstantValue" type="tns:ConstantValueType" substitutionGroup="tns:OperandBase"/>
  <xs:element name="OUValue" type="tns:OUValueType" substitutionGroup="tns:ConstantValue"/>
  <xs:element name="ConstantObject" type="tns:ConstantObjectType" substitutionGroup="tns:OperandBase"/>
  <xs:element name="ConstantValueList" type="tns:ConstantValueListType" substitutionGroup="tns:OperandBase"/>
  <xs:element name="SettingReference" type="tns:SettingReferenceType" substitutionGroup="tns:OperandBase"/>
  <xs:element name="GlobalSettingReference" type="tns:GlobalSettingReferenceType" substitutionGroup="tns:OperandBase"/>  
  <!-- CIMReference -->
  <xs:complexType name="CIMReferenceType">
    <xs:complexContent>
      <xs:extension base="tns:OperandBaseType">
        <xs:attribute name="Namespace" type="xs:string" use="required"/>        
        <xs:attribute name="Class" type="xs:string" use="required"/>
        <xs:attribute name="IsSingleton" type="xs:boolean" use="optional" />
        <xs:attribute name="Property" type="xs:string" use="required"/>
        <xs:attribute name="PropertyAccessor" type="xs:string" use="optional"/>
        <xs:attribute name="IsPropertyAccessorArray" type="xs:boolean" use="optional" />
        <xs:attribute name="Where" type="xs:string" use="optional"/>
        <xs:attribute name="AllKeyPropertySpecified" type="xs:boolean" use="optional"/>
      </xs:extension>      
    </xs:complexContent>
  </xs:complexType>
  <!-- ConstantValue -->
  <xs:complexType name="ConstantValueType">
    <xs:complexContent>
      <xs:extension base="tns:OperandBaseType">
        <xs:attribute name="Value" type="xs:string" use="required"/>       
        <xs:attribute name="Name" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- OUValue -->
  <xs:complexType name="OUValueType">
    <xs:complexContent>
      <xs:extension base="tns:ConstantValueType">
        <xs:attribute name="IncludesSubOU" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- KeyProperty -->
  <xs:complexType name="KeyPropertyType">
    <xs:sequence>
    </xs:sequence>
    <xs:attribute name="Name" type="xs:string" use="required"/>
    <xs:attribute name="DataType" type="tns:DataTypeType" use="required"/>
    <xs:attribute name="Value" type="xs:string" use="required"/>
  </xs:complexType>
  <!-- ConstantObject -->
  <xs:complexType name="ConstantObjectType">
    <xs:complexContent>
      <xs:extension base="tns:OperandBaseType">
        <xs:sequence>
          <xs:element name="ObjectProperty" type="tns:KeyPropertyType" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="ObjectType" type="xs:string" use="required"/>        
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- ConstantValueList -->
  <xs:complexType name="ConstantValueListType">
    <xs:complexContent>
      <xs:extension base="tns:OperandBaseType">
        <xs:sequence>
          <xs:element ref="tns:ConstantValue" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- SettingReference -->
  <xs:complexType name="SettingReferenceType">
    <xs:complexContent>      
      <xs:extension base="tns:OperandBaseType">
        <xs:attribute name="AuthoringScopeId" type="xs:Name" use="required"/>
        <xs:attribute name="LogicalName" type="xs:Name" use="required"/>
        <xs:attribute name="Version" type="xs:unsignedInt" use="optional"/>
        <xs:attribute name="SettingLogicalName" type="xs:string" use="required"/>
        <xs:attribute name="SettingSourceType" type="tns:SettingSourceTypes" use="required"/>
        <xs:attribute name="Changeable" type="xs:boolean" use="required"/>
        <xs:attribute name="Method" type="tns:SettingMethodTypes" use="optional"/>
        <xs:attribute name="PropertyPath" type="xs:string" use="optional"/>
        <xs:attribute name="ObjectType" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="SettingMethodTypes">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Value"/>
      <xs:enumeration value="Count"/>
    </xs:restriction>
  </xs:simpleType>
  <!-- GlobalSettingReference -->
  <xs:complexType name="GlobalSettingReferenceType">
    <xs:complexContent>
      <xs:extension base="tns:OperandBaseType">
        <xs:attribute name="AuthoringScopeId" type="xs:Name" use="required"/>
        <xs:attribute name="LogicalName" type="xs:Name" use="required"/>
        <xs:attribute name="SettingLogicalName" type="xs:string" use="required"/>
        <xs:attribute name="SettingSourceType" type="tns:SettingSourceTypes" use="required"/>
        <xs:attribute name="Method" type="tns:SettingMethodTypes" use="optional"/>
        <xs:attribute name="PropertyPath" type="xs:string" use="optional"/>
        <xs:attribute name="ObjectType" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- All non-abstract Operand types end here -->
</xs:schema>
<?xml version="1.0" encoding="utf-8"?>
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" version="1">
    <xs:simpleType name="DesiredStateString">
        <xs:restriction base="xs:string">
            <xs:pattern value="Set|Clear|Unmanaged" />
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="ServiceStateString">
        <xs:restriction base="xs:string">
            <xs:pattern value="Running|Stopped|Paused" />
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="Windows8AppStateString">
        <xs:restriction base="xs:string">
            <xs:pattern value="Enabled|Disabled|Cleared" />
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="SyncProviderString">
        <xs:restriction base="xs:string">
            <xs:pattern value="None|SyncProvider" />
        </xs:restriction>
    </xs:simpleType>
    <xs:element name="UevAgentConfiguration">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="ComputerPolicy" maxOccurs="1" minOccurs="1">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="MaxPackageSizeInBytes" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:nonNegativeInteger">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="SettingsImportNotifyDelayInSeconds" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:nonNegativeInteger">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="SettingsImportNotifyEnabled" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:boolean">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="SettingsStoragePath" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:string">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="SettingsTemplateCatalogPath" maxOccurs="1" minOccurs="0">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:string">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="SyncEnabled" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:boolean">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="SyncMethod" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="SyncProviderString">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="SyncTimeoutInMilliseconds" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:nonNegativeInteger">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="DontSyncWindows8AppSettings" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:boolean">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="SyncUnlistedWindows8Apps" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:boolean">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="ContactITUrl" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:anyURI">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="ContactITDescription" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:string">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="TrayIconEnabled" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:boolean">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="FirstUseNotificationEnabled" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:boolean">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="WaitForSyncOnApplicationStart" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:boolean">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="WaitForSyncOnLogon" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:boolean">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="WaitForSyncTimeoutInMilliseconds" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:nonNegativeInteger">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="SyncOverMeteredNetwork" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:boolean">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="SyncOverMeteredNetworkWhenRoaming" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:boolean">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="SyncProviderPingEnabled" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:boolean">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="VdiCollectionName" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:string">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="CurrentComputerUserPolicy" maxOccurs="1" minOccurs="1">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="MaxPackageSizeInBytes" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:nonNegativeInteger">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="SettingsImportNotifyDelayInSeconds" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:nonNegativeInteger">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="SettingsImportNotifyEnabled" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:boolean">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="SettingsStoragePath" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:string">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="SyncEnabled" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:boolean">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="SyncMethod" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="SyncProviderString">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="SyncTimeoutInMilliseconds" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:nonNegativeInteger">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="DontSyncWindows8AppSettings" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:boolean">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="SyncUnlistedWindows8Apps" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:boolean">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="WaitForSyncOnApplicationStart" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:boolean">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="WaitForSyncOnLogon" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:boolean">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="WaitForSyncTimeoutInMilliseconds" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:nonNegativeInteger">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="SyncOverMeteredNetwork" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:boolean">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="SyncOverMeteredNetworkWhenRoaming" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:boolean">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="SyncProviderPingEnabled" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:boolean">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="VdiCollectionName" maxOccurs="1" minOccurs="1">
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="xs:string">
                                            <xs:attribute name="DesiredState" type="DesiredStateString" use="required" />
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Services" maxOccurs="unbounded" minOccurs="1">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="ServiceTask">
                                <xs:complexType>
                                    <xs:attribute name="ServiceName" type="xs:string" use="required" />
                                    <xs:attribute name="DesiredState" type="ServiceStateString" use="required"  />
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Windows8AppsComputerPolicy">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element maxOccurs="unbounded" name="Windows8App">
                                <xs:complexType>
                                    <xs:attribute name="PackageFamilyName" type="xs:string" use="required" />
                                    <xs:attribute name="DesiredState" type="Windows8AppStateString" use="required" />
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Windows8AppsCurrentComputerUserPolicy">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element maxOccurs="unbounded" name="Windows8App">
                                <xs:complexType>
                                    <xs:attribute name="PackageFamilyName" type="xs:string" use="required" />
                                    <xs:attribute name="DesiredState" type="Windows8AppStateString" use="required" />
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
</xs:schema>
Microsoft.Uev.CmUtil.pdb
_CorDllMain
mscoree.dll
VS_VERSION_INFO
VarFileInfo
Translation
StringFileInfo
000004b0
Comments
CompanyName
Microsoft Corporation
FileDescription
FileVersion
0.0.0.0
InternalName
Microsoft.Uev.CmUtil.dll
LegalCopyright
Copyright (c) Microsoft Corporation. All rights reserved.
LegalTrademarks
OriginalFilename
Microsoft.Uev.CmUtil.dll
ProductName
Microsoft (R) Windows (R) Operating System
ProductVersion
0.0.0.0
Assembly Version
0.0.0.0
