!This program cannot be run in DOS mode.
.text
`.rdata
@.data
.pdata
@.didat
.rsrc
@.reloc
qx]~g
qx]~g
VWAVH
 A^_^
@SUVWATAVAWH
pa\P@?
L$hH3
pA_A^A\_^][
|$ AVH
qa\P@?
q0R^G'
ATAVAWH
p0R^G'
 A_A^A\
q:_0#
VWAVH
\$ E3
D$HE3
LcA<E3
HcQ<H
\$ UH
 H3E H3E
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
oD$ f
oL$0f
oT$@f
o\$PH
\$ UVWATAUAVAWH
fD9)H
D9l$(|
D$,D8-
t(D8-
@USVWATAVAWH
fD9!H
D9d$(
t(D8%3
A_A^A\_^[]
UVWATAUAVAWH
ty@8=
t"@8=\
fA9>u
@A_A^A]A\_^]
SVWAVAWH
`A_A^_^[
WAVAWH
fD9<Ou
D9;}BH
A_A^_
\$ UVWATAUAVAWH
D9l$(|
t(D8-
\$ E3
WAVAWH
fD9<Ou
D9;}JH
A_A^_
9*v4H
L$pH3
qx]~g
qx]~g
x AVH
qBQpj
E(=csm
E8=csm
EH=csm
EX=csm
Eh=csm
Ex=csm
t<fA9(t6I
q*Z~:
|$ UH
x AVH
VWATAVAWH
fD9 t
D$0fD9 t
A_A^A\_^
WAVAWH
 A_A^_
\$ UVWAVAWH
t,D8=
L9{Hu
A_A^_^]
D$8E3
@SUVWH
D$0L;
D$@E3
K SVWH
f94Cu
|$ AVH
WATAUAVAWH
H9/sDH
 A_A^A]A\_
x AVH
H9;s!
x AVH
uPH9i
L$ SVWH
x UAVAWH
fD98t
D$PfD98t
HcD$4HcL$0H
A_A^]
SVWAVH
(A^_^[
VWAVH
0A^_^
q*Z~:
qB^Xh
UVWAVAWH
A_A^_^]
UVWAVAWH
A_A^_^]
UVWAVAWH
A_A^_^]
@SVWAVAWH
YHH;;t2H
CD$HI
CD$(H
CT$(H
A_A^_^[
|$ UH
SVWAVAWH
 A_A^_^[
WAVAWH
 A_A^_
x AVH
x AVH
x AVH
x ATAVAWL
|$8A_A^A\
qqQ<^
|$ AVH
D$PH9
H9D$Xu
t$`H;
x ATAUAVAWH
t$HE3
|$@A_A^A]A\
@USVWATAUAVAWH
D8i\u
A_A^A]A\_^[]
\$ WH
WAVAWH
0A_A^_
|$ AVH
|$ AVH
|$ AVH
XxI7i
tTf92tOI
VWAVH
 A^_^
WAVAWH
fD9<Bu
fD9<Zu
 A_A^_
qB^Xh
x AVH
|$ ATAVAWH
t&H9Qxu D;
A_A^A\
t$ WATAUAVAWH
D$hI;
0A_A^A]A\_
UVWATAUAVAWH
0A_A^A]A\_^]
x AVH
D$0H;
x ATAVAWH
 A_A^A\
D$hH;
L$0H+
VWATAVAWH
D$PH;
 A_A^A\_^
x ATH
H+L$8H
D$0H+
WATAUAVAWH
 A_A^A]A\_
H;]@u
l$(H;
x ATAVAWH
@A_A^A\
WAVAWH
0A_A^_
WAVAWH
D$ E3
D$`D9|$pu3H
A_A^_
|$ AVH
|$ ATAVAWH
0A_A^A\
H+;H9K
WAVAWH
0A_A^_
t$ WH
D$(E3
D$(E3
t$ UWAVH
f9<Bu
fA9<@u
fA9<@u
D$pE3
t$ UWAWH
fA9<@u
fA9<@u
fA9<@u
D$pE3
p WAVAWH
 A_A^_
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
p WATAUAVAWH
d$pA!4$I
L$`D;
 A_A^A]A\_
x AVH
(D$ H
L$0H3
VWATAVAWH
A_A^A\_^
SUVWAVH
0A^_^][
h VWAVH
xI;o(r
 A^_^
USVWAVAWH
GX9G4tl
hA_A^_^[]
L$ WH
9O4t=
UVWATAUAVAWH
A9_0t0H
D$xA;
tpE9w0t9A
0A_A^A]A\_^]
H!}(H
H!}(H
qB^Xh
qB^Xh
UVWATAUAVAWH
9s(v'H
0A_A^A]A\_^]
UVWAVAWH
L$`9L$Pu
 A_A^_^]
UWAVH
w(;w(v
PA^_]
9O4t>
UVWAVAWH
0A_A^_^]
WAVAWH
@A_A^_
L$PE3
UVWAVAWH
D;v(r
@A_A^_^]
UVWAVAWH
A_A^_^]
CHH+S@H
A,9A(
BX9A4t
L$0H3
SVWATAUAVAWH
L$HH;
D$@H;
\$XH+
H;L$Pu
H;L$Pu
t$@L+
L9d$@t#H
A_A^A]A\_^[
t$ UWATAVAWH
p[Up@
A_A^A\_]
|$ AVH
SWATAUAVAWH
pQZ0}
pjSt=
A_A^A]A\_[
@SUVWH
L$`H3
x_^][
@USVWATAUAVAWH
9~Pt6H
pjSt=
A_A^A]A\_^[]
@USVWAVAWH
xA_A^_^[]
L$PH3
UVWATAUAVAWH
QHL9"
fD9$Bu
A_A^A]A\_^]
qB^Xh
t$ WATAUAVAWH
D$hI;
0A_A^A]A\_
UVWATAUAVAWH
0A_A^A]A\_^]
x AVH
D$0H;
x ATAVAWH
 A_A^A\
D$hH;
L$0H+
VWATAVAWH
D$PH;
 A_A^A\_^
x ATH
H+L$8H
D$0H+
WATAUAVAWH
 A_A^A]A\_
H;]@u
l$(H;
WAVAWH
D$ E3
T$`D9|$d
A_A^_
|$ ATAVAWH
0A_A^A\
H+;H9K
t$ UWAVH
p*]05
x AVH
x AVH
x AVH
x AVH
x AVH
x AVH
x AVH
x AVH
x AVH
VWAVH
pa\P@?
0A^_^
t$ WH
t$ WH
t$ WH
qBQpj
qBQpj
qBQpj
WAVAWH
0A_A^_
qB^Xh
qB^Xh
pBQpj
WAVAWH
 A_A^_
q0\Z-
t$ UH
VWAVH
@A^_^
x ATAVAWH
fD9#t
 A_A^A\
|$ UH
f9,Zu
t$ UWATAVAWH
A_A^A\_]
\$ UVWATAUAVAWH
A_A^A]A\_^]
UVWATAUAVAWH
A_A^A]A\_^]
UVWATAUAVAWH
A_A^A]A\_^]
UVWATAUAVAWH
A_A^A]A\_^]
UVWAVAWH
pjSt=
fD98u
A_A^_^]
|$ UH
D$0E3
` UAVAWH
A_A^]
@SVWH
|$ UATAUAVAWH
A_A^A]A\]
F8@88t
USVWAVH
pjSt=
A^_^[]
@USVWATAVAWH
p![XT?
A_A^A\_^[]
USVWAVH
A^_^[]
@USVWATAUAVAWH
fD9l$0
L9&u8H
fD9l$0
A_A^A]A\_^[]
s WAVAWH
@A_A^_
t$ WH
UVWAVAWH
~0H+~(H
0A_A^_^]
\$ UVWATAUAVAWH
D9d$X
D;t$X
A_A^A]A\_^]
@USVWAVAWH
pjSt=
A_A^_^[]
@USVWATAUAVAWH
D;t$X
A_A^A]A\_^[]
\$ UVWATAUAVAWH
D9d$P
D;t$P
A_A^A]A\_^]
@USVWATAVAWH
A_A^A\_^[]
\$ UVWATAUAVAWH
pjSt=
A_A^A]A\_^]
\$ UVWATAUAVAWH
A_A^A]A\_^]
\$ UVWATAUAVAWH
A_A^A]A\_^]
UVWATAUAVAWH
t+H;3r&
A_A^A]A\_^]
t$ E3
fC94pu
\$ UVWATAUAVAWH
A_A^A]A\_^]
\$ UVWATAUAVAWH
A_A^A]A\_^]
@USVWATAVAWH
M?L9e
A_A^A\_^[]
@USVWATAUAVAWH
MGH9t$Hu
pjSt=
H9t$H
H9t$H
H9t$H
A_A^A]A\_^[]
@USVWATAUAVAWH
D9t$h
D;t$h
A_A^A]A\_^[]
L$XH3
@SUVWAVAWH
\$ fD
@u;L9;u$E3
L$8H3
HA_A^_^][
p WAVAWH
 A_A^_
t$ WH
x ATAVAWH
T$0L+
A_A^A\
|$ UATAUAVAWH
A_A^A]A\]
UVWAVAWH
H!t$XA
D$H!D$@
A_A^_^]
@USVWATAUAVAWH
pjSt=
pjSt=
A_A^A]A\_^[]
UVWATAUAVAWH
H;3r*
t@8]pu;I
`A_A^A]A\_^]
@USVWATAUAVAWH
L97t~H
pjSt=
A_A^A]A\_^[]
pjSt=
pjSt=
pjSt=
L$HH3
x AVH
rHfD97w
C9fD97u,
VWAVH
t$$fD
D$0D9r
@A^_^
t[fA9)tUH
D$`H+
D$(L+
VWAVH
 A^_^
t$ WH
UVWATAUAVAWH
I96u8H
A_A^A]A\_^]
{ ATAVAWH
 A_A^A\
f94Bu
D$(E3
h UAVAWH
L$@I+
L$PH;
T$PL;
A_A^]
UVWATAUAVAWH
D$ E3
fE94pu
A_A^A]A\_^]
L$HE3
fC94Hu
` UAVAWH
@A_A^]
x ATAVAWH
fD9$Bu
0A_A^A\
fD9$_u
x AVH
UWAVH
fD94xu
fB9<Ju
|$ UH
H99t$H
t$ UWAVH
t$ UATAUAVAWH
A_A^A]A\]
t$ UWAVH
pjSt=
pjSt=
x AVH
t,H9{Ht&H
UVWAVAWH
pz\:(
pz\:(
A_A^_^]
UVWAVAWH
psVV%
A_A^_^]
UVWATAUAVAWH
pjSt=
pjSt=
pjSt=
pYWX6
pjSt=
pjSt=
pjSt=
pjSt=
pjSt=
pjSt=
pYWX6
pjSt=
fHI9^Xt&H
\$pI9^Pt&H
D8l$J
A_A^A]A\_^]
UVWAVAWH
pjSt=
pjSt=
pjSt=
pYWX6
pjSt=
A_A^_^]
T$PH!|$HH
L$HH;
t$ UWAVH
H9{8t&H
t$ WH
t$ WATAVH
0A^A\_
api-ms-win-appmodel-runtime-l1-1-1.dll
RPCRT4.dll
api-ms-win-shcore-thread-l1-1-0.dll
urlmon.dll
dmiso8601utils.dll
Exception
ReturnNt
ReturnHr
LogNt
LogHr
FailFast
%hs(%u)\%hs!%p: 
%hs!%p: 
(caller: %p) 
%hs(%d) tid(%x) %08X %ws
Msg:[%ws] 
CallContext:[%hs] 
[%hs(%hs)]
[%hs]
kernelbase.dll
onecore\internal\sdk\inc\wil\opensource\wil\resource.h
WilError_03
ntdll.dll
WilFailureNotifyWatchers
generic
iostream
system
Windows.Foundation.PropertyValue
Windows.Internal.Notifications.WpnAppInfoProvider_UWP
Windows.Internal.Notifications.WpnAppInfoAggregator
Windows.Internal.Notifications.ToastActivator_Collection
Windows.Internal.Notifications.ToastActivator_AppLaunch
Windows.Internal.Notifications.ToastActivator_Protocol
Windows.Internal.Notifications.ToastActivator_Background
Windows.Internal.Notifications.ToastActivator_Foreground
Windows.Internal.Notifications.ToastActivatorSwitch
Windows.Internal.Notifications.WpnClient
bad conversion
JTk_S/
4\onecoreuap\base\diagnosis\platform\notifications\client\src\applaunchenforcer.cpp
onecoreuap\base\diagnosis\platform\notifications\client\src\cnotificationvalueset.cpp
onecoreuap\base\diagnosis\platform\notifications\client\src\ctoastactivatorswitch.cpp
onecoreuap\base\diagnosis\platform\notifications\client\src\ctoastactivator_foreground.cpp
Windows.ApplicationModel.Activation.Private.ApplicationActivation
Windows.ApplicationModel.Activation.ToastNotificationActivatedEventArgs
Windows.System.Internal.UserManager
onecoreuap\base\diagnosis\platform\notifications\client\src\ctoastactivator_applaunch.cpp
LaunchArgs
Software\Microsoft\Windows\CurrentVersion\PushNotifications\AppInfoProviders
onecoreuap\base\diagnosis\platform\notifications\client\src\cappinfoaggregator.cpp
%RtlUnregisterFeatureConfigurationChangeNotification
NtQueryWnfStateData
NtUpdateWnfStateData
onecore\internal\sdk\inc\wil\Staging.h
WilStaging_02
onecoreuap\base\diagnosis\platform\notifications\client\notificationparser\src\notificationparser.cpp
onecoreuap\base\diagnosis\platform\notifications\client\notificationparser\src\util.cpp
standard
white
black
Windows.Launch
onecoreuap\shell\lib\activationevents\src\activatedeventargsbase.cpp
ActivationKind
PreviousExecutionState
UserContext
SplashScreen
ActivationValueSetReference
IsForeground
IsHolographic
IsInitialized
AamActivationId
AamActivityId
CurrentlyShownApplicationViewId
MultiView:AamActivationId
IsApplicationMultiviewActivationPolicyEnabled
ntdll.dll
MicrosoftTelemetryAssertTriggeredUM
/Z,P4m
;]86L
file:///
ms-appdata:///
ms-appx:///
ToastActivationStop
PartA_PrivTags
AppUserModelId
ActivationType
ArgumentLength
InputCount
__TlgCV__
OperationResult
ToastActivationStart
PartA_PrivTags
AppUserModelId
ActivationType
__TlgCV__
FallbackError
PartA_PrivTags
wilResult
hresult
fileName
lineNumber
module
failureType
message
threadId
callContext
originatingContextId
originatingContextName
originatingContextMessage
currentContextId
currentContextName
currentContextMessage
failureId
failureCount
function
FallbackError
PartA_PrivTags
wilResult
hresult
fileName
lineNumber
module
failureType
message
threadId
callContext
originatingContextId
originatingContextName
originatingContextMessage
currentContextId
currentContextName
currentContextMessage
FeatureError
featureId
featureVersion
featureBaseVersion
featureStage
lineNumber
module
process
originFile
originLineNumber
originModule
originName
message
callerModule
callerReturnAddressOffset
originCallerModule
originCallerReturnAddressOffset
FeatureVariantUsage
featureId
featureVersion
featureBaseVersion
featureStage
enabled
variantKind
variant
addend
EnabledFeatureUsage
featureId
featureVersion
featureBaseVersion
featureStage
enabled
addend
FeatureUsage
featureId
featureVersion
featureBaseVersion
featureStage
enabled
addend
Microsoft.Windows.Notifications.WpnClientTelemetry
Microsoft.Windows.Wil.FeatureLogging
RaiseFailFastException
std::exception: %hs
RtlNtStatusToDosErrorNoTeb
RtlDllShutdownInProgress
RtlDisownModuleHeapAllocation
unknown error
iostream stream error
Local\SM0:%lu:%lu:%hs
invalid string position
string too long
Windows.Foundation.Uri
Windows.Foundation.Collections.ValueSet
onecoreuap\base\diagnosis\platform\notifications\client\src\adaptiveimage.cpp
Windows.Internal.Notifications.AdaptiveImage
Windows.Internal.Notifications.AdaptiveNotification
;]86L
Windows.ApplicationModel.AppInfo
onecoreuap\base\diagnosis\platform\notifications\client\src\adaptivenotification.cpp
title
subtitle
profile
AdaptiveCard
version
selectAction
Action.Submit
Action.OpenUrl
maxLines
images
style
altText
Windows.Data.Json.JsonValue
storeAppInstall
onecoreuap\base\diagnosis\platform\notifications\client\src\cwpnclient.cpp
onecoreuap\base\diagnosis\platform\notifications\client\src\Utilities.h
priority
Software\Microsoft\Windows\CurrentVersion\PushNotifications\ActivationPlugins
vector<T> too long
applaunch
legacytoastlaunch
background
foreground
protocol
ActivatableAboveLock
IsGroupActivation
TargetApplicationPackageFamilyName
decline
onecoreuap\base\diagnosis\platform\notifications\client\src\WpnClientTelemetry.h
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
Windows.Foundation.Collections.IIterator`1<String>
Windows.Foundation.Collections.IVectorView`1<String>
Windows.Foundation.Collections.IVector`1<String>
Windows.Internal.StateRepository.Application
3,\'M
onecoreuap\base\diagnosis\platform\notifications\client\src\ctoastactivator_background.cpp
(onecoreuap\base\diagnosis\platform\notifications\client\src\ctoastactivator_protocol.cpp
Windows.System.Launcher
Windows.System.LauncherOptions
Ionecoreuap\base\diagnosis\platform\notifications\client\src\ctoastactivator_collection.cpp
onecoreuap\base\diagnosis\platform\notifications\client\src\cappinfoprovider_uwp.cpp
activatibleClassId
~w-CY
RtlRegisterFeatureConfigurationChangeNotification
RtlNotifyFeatureUsage
ToastGeneric
badge
visual
activationType
launch
template
items
appLogoOverride
item-type
content
hint-maxLines
image
placement
person
circle
hint-crop
adaptive
toast
audio
actions
header
displayName
experienceType
bindings
group
progress
//binding[starts-with(@template, '%s')]
addImageQuery
baseUri
prefix
spritesheet-src
status
valueStringOverride
subgroups
subgroup
inputs
input
action
selection
selections
placeHolderContent
defaultInput
arguments
decline 
imageUri
TileSmall
TileMedium
TileLarge
TileWide
TileGeneric
displayTimestamp
%I64u
glyph://
https://
http://
ms-resource:
ms-lang=
ms-contrast=
ms-scale=
onecoreuap\base\diagnosis\platform\notifications\client\toastactivationplugin\src\toastactivationeventargs.cpp
Arguments
UserInput
onecoreuap\base\diagnosis\platform\notifications\client\toastactivationplugin\src\toastactivationplugin.cpp
Windows.BackgroundTasks
Windows.PreInstalledConfigTask
Windows.UpdateTask
Windows.AppService
Windows.AppointmentDataProvider
Windows.ContactDataProvider
Windows.EmailDataProvider
Windows.UserDataTaskDataProvider
Windows.PrintWorkflowBackgroundTask
Windows.BarcodeScannerProvider
Windows.PosPaymentConnector
Windows.PrintSupportExtension
Windows.PrintSupportWorkflow
Windows.Search
Windows.ShareTarget
Windows.File
Windows.Protocol
Windows.FileOpenPicker
Windows.FileSavePicker
Windows.CachedFileUpdater
Windows.ContactPicker
Windows.Device
Windows.PrintTaskSettings
Windows.Print3DWorkflow
Windows.CameraSettings
Windows.AppointmentsProvider.AddAppointment
Windows.AppointmentsProvider.ReplaceAppointment
Windows.AppointmentsProvider.RemoveAppointment
Windows.AppointmentsProvider.ShowTimeFrame
Windows.AppointmentsProvider.ShowAppointmentDetails
Windows.Contact.Call
Windows.Contact.Message
Windows.Contact.Map
Windows.Contact.Post
Windows.Contact.VideoCall
Windows.ContactsProvider.ShowContact
Windows.ContactsProvider.AddContact
Windows.RestrictedLaunch
windows.LockScreenCall
Windows.VoiceCommand
Windows.WebAccountProvider
Windows.ComponentUI
windows.lockScreen
Windows.DialProtocol
Windows.PersonalAssistant.Launch
Windows.UserDataAccountsProvider
Windows.Internal.FilePickerExperience
Windows.AppUriHandler
Windows.PeoplePane
Windows.LockScreenComponent
Windows.ContactPanel
Windows.OopWebView
Windows.PrintWorkflowForegroundTask
Windows.StartupTask
Windows.CommandLineLaunch
Windows.BarcodeScannerPreviewProvider
Windows.PhoneCallActivation
ViewSwitcher
RSDS>
WpnClient.pdb
.orpc
.text$di
.text$lp00wpnclient.dll!20_pri7
.text$mn
.text$mn$00
.text$np
.text$x
.text$yd
.text$zy
.text$zz
.rdata$brc
.rdata$00$brc
.rdata$T$brc
.rdata$zz$brc
.idata$5
.00cfg
.CRT$XCA
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIAA
.CRT$XIZ
.CRT$XLA
.CRT$XLZ
.gehcont
.gfids
.giats
.rdata
.rdata$00
.rdata$voltmd
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zz
.rdata$zzzdbg
.tls$
.tls$ZZZ
.xdata
.xdata$x
minATL$__a
minATL$__f
minATL$__m
minATL$__r
minATL$__z
.didat$2
.didat$3
.didat$4
.didat$6
.didat$7
.edata
.idata$2
.idata$3
.idata$4
.idata$6
.data$dk00$brc
.data$pr00$brc
.data$r$brc
.data$zz$brc
.data
.data$00
.data$dk00
.data$zz
.bss$00
.bss$dk00
.bss$pr00
.bss$zz
.pdata
.didat$5
.rsrc$01
.rsrc$02
FindPackagesByPackageFamily
UuidCreate
SHGetThreadRef
CoInternetCombineUrl
CreateUri
NdrDllGetClassObject
NdrDllCanUnloadNow
NdrOleFree
NdrOleAllocate
ISO8601StringToSystemTime
WpnClient.dll
DllCanUnloadNow
DllGetActivationFactory
DllGetClassObject
?_Xbad_alloc@std@@YAXXZ
?_Xout_of_range@std@@YAXPEBD@Z
?_Winerror_map@std@@YAPEBDH@Z
?_Xlength_error@std@@YAXPEBD@Z
?_Syserror_map@std@@YAPEBDH@Z
??0id@locale@std@@QEAA@_K@Z
??1?$codecvt@GDH@std@@MEAA@XZ
?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ
?_Init@locale@std@@CAPEAV_Locimp@12@_N@Z
?_Incref@facet@locale@std@@UEAAXXZ
??Bid@locale@std@@QEAA_KXZ
??0?$codecvt@GDH@std@@QEAA@_K@Z
?in@?$codecvt@GDH@std@@QEBAHAEAHPEBD1AEAPEBDPEAG3AEAPEAG@Z
?_New_Locimp@_Locimp@locale@std@@CAPEAV123@AEBV123@@Z
?_Addfac@_Locimp@locale@std@@AEAAXPEAVfacet@23@_K@Z
?id@?$codecvt@GDH@std@@2V0locale@2@A
?_Getcat@?$codecvt@GDH@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
??4?$_Yarn@D@std@@QEAAAEAV01@PEBD@Z
?_Orphan_all@_Container_base0@std@@QEAAXXZ
msvcp110_win.dll
__CxxFrameHandler4
_vsnwprintf
memcpy_s
??3@YAXPEAX@Z
_purecall
??1exception@@UEAA@XZ
??0exception@@QEAA@XZ
??0exception@@QEAA@AEBV0@@Z
_vsnprintf_s
_itow_s
?what@exception@@UEBAPEBDXZ
??0exception@@QEAA@AEBQEBD@Z
malloc
sprintf_s
??_V@YAXPEAX@Z
memmove_s
realloc
wcschr
_callnewh
_XcptFilter
_amsg_exit
_initterm
__C_specific_handler
msvcrt.dll
?terminate@@YAXXZ
_lock
_unlock
__dllonexit
_onexit
??1type_info@@UEAA@XZ
__CxxFrameHandler3
GetModuleFileNameA
CreateSemaphoreExW
HeapFree
SetLastError
ReleaseSemaphore
GetModuleHandleExW
WaitForSingleObject
GetCurrentThreadId
ReleaseMutex
FormatMessageW
GetLastError
OutputDebugStringW
WaitForSingleObjectEx
OpenSemaphoreW
CloseHandle
HeapAlloc
GetProcAddress
CreateMutexExW
GetCurrentProcessId
GetProcessHeap
GetModuleHandleW
DebugBreak
IsDebuggerPresent
WindowsDeleteString
WindowsDuplicateString
WindowsCreateString
WindowsGetStringRawBuffer
WindowsCreateStringReference
RaiseException
RoOriginateError
CoTaskMemAlloc
CoCreateFreeThreadedMarshaler
RoGetActivationFactory
RtlInitUnicodeString
RtlDeriveCapabilitySidsFromName
AppXGetPackageCapabilities
EqualSid
AppXFreeMemory
CoTaskMemFree
CoTaskMemRealloc
RegOpenKeyExW
RegQueryValueExW
RegQueryInfoKeyW
RegEnumKeyExW
RegCloseKey
RoActivateInstance
RoTransformError
CoGetApartmentType
InitializeSRWLock
AcquireSRWLockExclusive
AcquireSRWLockShared
ReleaseSRWLockExclusive
ReleaseSRWLockShared
SHTaskPoolQueueTask
EventUnregister
EventRegister
EventSetInformation
EventWriteTransfer
DeleteCriticalSection
InitializeCriticalSectionEx
GetTickCount64
LeaveCriticalSection
EnterCriticalSection
PathIsFileSpecW
PathFindFileNameW
CompareStringOrdinal
InitOnceBeginInitialize
InitOnceComplete
CoCreateInstance
RtlGetDeviceFamilyInfoEnum
RtlIsMultiUsersInSessionSku
WindowsIsStringEmpty
WindowsStringHasEmbeddedNull
DisableThreadLibraryCalls
DecodePointer
InitOnceExecuteOnce
EncodePointer
RoOriginateErrorW
Sleep
RtlCaptureContext
RtlLookupFunctionEntry
RtlVirtualUnwind
UnhandledExceptionFilter
SetUnhandledExceptionFilter
GetCurrentProcess
TerminateProcess
WakeAllConditionVariable
SleepConditionVariableSRW
QueryPerformanceCounter
GetSystemTimeAsFileTime
GetTickCount
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-localization-l1-2-0.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-winrt-string-l1-1-0.dll
api-ms-win-core-winrt-error-l1-1-0.dll
api-ms-win-core-com-l1-1-0.dll
api-ms-win-core-winrt-l1-1-0.dll
ntdll.dll
api-ms-win-appmodel-identity-l1-2-0.dll
api-ms-win-security-base-l1-1-0.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-shcore-taskpool-l1-1-0.dll
api-ms-win-eventing-provider-l1-1-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-shlwapi-legacy-l1-1-0.dll
api-ms-win-core-string-l1-1-0.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-util-l1-1-0.dll
api-ms-win-core-rtlsupport-l1-1-0.dll
api-ms-win-core-profile-l1-1-0.dll
combase.dll
wcstoul
_errno
_wcstoui64
swprintf_s
wcsrchr
_wcsicmp
wcscspn
HSTRING_UserSize
HSTRING_UserMarshal
HSTRING_UserFree64
HSTRING_UserSize64
HSTRING_UserFree
HSTRING_UserMarshal64
HSTRING_UserUnmarshal
HSTRING_UserUnmarshal64
SetThreadpoolTimer
CreateThreadpoolTimer
WindowsCompareStringOrdinal
QuirkIsEnabledForPackage
SystemTimeToFileTime
WaitForThreadpoolTimerCallbacks
CloseThreadpoolTimer
ExpandEnvironmentStringsW
MultiByteToWideChar
FindResourceExW
SizeofResource
LoadResource
LockResource
WindowsSubstringWithSpecifiedLength
GetModuleHandleExA
ResolveDelayLoadedAPI
DelayLoadFailureHook
OLEAUT32.dll
api-ms-win-core-threadpool-l1-2-0.dll
api-ms-win-core-quirks-l1-1-0.dll
api-ms-win-core-timezone-l1-1-0.dll
api-ms-win-core-processenvironment-l1-1-0.dll
api-ms-win-core-delayload-l1-1-1.dll
api-ms-win-core-delayload-l1-1-0.dll
_CxxThrowException
memcmp
memcpy
memmove
memset
wcscmp
.?AVbad_alloc@std@@
.?AVResultException@wil@@
.?AVexception@@
.?AVrange_error@std@@
.?AVruntime_error@std@@
VS_VERSION_INFO
StringFileInfo
040904B0
CompanyName
Microsoft Corporation
FileDescription
Windows Push Notifications Client
FileVersion
10.0.22621.1 (WinBuild.160101.0800)
InternalName
WpnClient
LegalCopyright
 Microsoft Corporation. All rights reserved.
OriginalFilename
WpnClient.dll
ProductName
Microsoft
 Windows
 Operating System
ProductVersion
10.0.22621.1
VarFileInfo
Translation
<?xml version='1.0' encoding='utf-8'?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
<xsd:simpleType name="brandingToken">
<xsd:restriction base="xsd:token">
<xsd:pattern value="[Nn][Oo][Nn][Ee]"></xsd:pattern>
<xsd:pattern value="[Ll][Oo][Gg][Oo]"></xsd:pattern>
<xsd:pattern value="[Nn][Aa][Mm][Ee]"></xsd:pattern>
<xsd:pattern value="[Nn][Aa][Mm][Ee][Aa][Nn][Dd][Ll][Oo][Gg][Oo]"></xsd:pattern>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="templateNamesUap">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="TileSmall"></xsd:enumeration>
<xsd:enumeration value="TileMedium"></xsd:enumeration>
<xsd:enumeration value="TileWide"></xsd:enumeration>
<xsd:enumeration value="TileTall"></xsd:enumeration>
<xsd:enumeration value="TileLarge"></xsd:enumeration>
<xsd:enumeration value="TileGeneric"></xsd:enumeration>
<xsd:enumeration value="ToastGeneric"></xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:complexType name="audioType">
<xsd:attribute name="src" type="xsd:string" use="optional"></xsd:attribute>
<xsd:attribute name="loop" type="xsd:boolean" use="optional"></xsd:attribute>
<xsd:attribute name="silent" type="xsd:string" use="optional"></xsd:attribute>
</xsd:complexType>
<xsd:complexType name="headerType">
<xsd:attribute name="id" type="xsd:string" use="required"></xsd:attribute>
<xsd:attribute name="title" type="xsd:string" use="required"></xsd:attribute>
<xsd:attribute name="arguments" type="xsd:string" use="required"></xsd:attribute>
<xsd:attribute name="activationType" type="xsd:string" use="optional"></xsd:attribute>
</xsd:complexType>
<xsd:simpleType name="inputTypes">
<xsd:restriction base="xsd:token">
<xsd:enumeration value="text"></xsd:enumeration>
<xsd:enumeration value="selection"></xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:complexType name="inputType">
<xsd:sequence minOccurs="0" maxOccurs="5">
<xsd:element ref="selection"></xsd:element>
</xsd:sequence>
<xsd:attribute name="id" type="xsd:string" use="required"></xsd:attribute>
<xsd:attribute name="type" type="inputTypes" use="required"></xsd:attribute>
<xsd:anyAttribute processContents="skip"></xsd:anyAttribute>
</xsd:complexType>
<xsd:complexType name="selectionType">
<xsd:attribute name="id" type="xsd:string" use="required"></xsd:attribute>
<xsd:attribute name="content" type="xsd:string" use="required"></xsd:attribute>
<xsd:anyAttribute processContents="skip"></xsd:anyAttribute>
</xsd:complexType>
<xsd:complexType name="actionType">
<xsd:attribute name="content" type="xsd:string" use="required"></xsd:attribute>
<xsd:attribute name="arguments" type="xsd:string" use="required"></xsd:attribute>
<xsd:attribute name="activationType" type="xsd:string" use="optional"></xsd:attribute>
<xsd:anyAttribute processContents="skip"></xsd:anyAttribute>
</xsd:complexType>
<xsd:complexType name="actionsType">
<xsd:sequence>
<xsd:element minOccurs="0" maxOccurs="5" ref="input"></xsd:element>
<xsd:element minOccurs="0" maxOccurs="5" ref="action"></xsd:element>
</xsd:sequence>
<xsd:anyAttribute processContents="skip"></xsd:anyAttribute>
</xsd:complexType>
<xsd:complexType name="textType">
<xsd:simpleContent>
<xsd:extension base="xsd:string">
<xsd:attribute name="id" use="optional" type="xsd:nonNegativeInteger"></xsd:attribute>
<xsd:anyAttribute processContents="skip"></xsd:anyAttribute>
</xsd:extension>
</xsd:simpleContent>
</xsd:complexType>
<xsd:complexType name="imageType">
<xsd:attribute name="id" use="optional" type="xsd:nonNegativeInteger"></xsd:attribute>
<xsd:attribute name="src" use="required" type="xsd:anyURI"></xsd:attribute>
<xsd:attribute name="addImageQuery" use="optional" type="xsd:boolean"></xsd:attribute>
<xsd:anyAttribute processContents="skip"></xsd:anyAttribute>
</xsd:complexType>
<xsd:complexType name="progressType">
<xsd:attribute name="title" use="optional" type="xsd:string"></xsd:attribute>
<xsd:attribute name="status" use="required" type="xsd:string"></xsd:attribute>
<xsd:attribute name="value" use="required" type="xsd:string"></xsd:attribute>
<xsd:attribute name="valueStringOverride" use="optional" type="xsd:string"></xsd:attribute>
<xsd:anyAttribute processContents="skip"></xsd:anyAttribute>
</xsd:complexType>
<xsd:complexType name="subgroupType">
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="text"></xsd:element>
<xsd:element ref="image"></xsd:element>
</xsd:choice>
<xsd:anyAttribute processContents="skip"></xsd:anyAttribute>
</xsd:complexType>
<xsd:complexType name="groupType">
<xsd:sequence>
<xsd:element minOccurs="1" maxOccurs="unbounded" ref="subgroup"></xsd:element>
</xsd:sequence>
<xsd:anyAttribute processContents="skip"></xsd:anyAttribute>
</xsd:complexType>
<xsd:complexType name="bindingType">
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="text"></xsd:element>
<xsd:element ref="image"></xsd:element>
<xsd:element ref="group"></xsd:element>
<xsd:element ref="progress"></xsd:element>
</xsd:choice>
<xsd:attribute name="template" use="required" type="xsd:string"></xsd:attribute>
<xsd:attribute name="baseUri" use="optional" type="xsd:anyURI"></xsd:attribute>
<xsd:attribute name="branding" use="optional" type="brandingToken"></xsd:attribute>
<xsd:attribute name="addImageQuery" use="optional" type="xsd:boolean"></xsd:attribute>
<xsd:anyAttribute processContents="skip"></xsd:anyAttribute>
</xsd:complexType>
<xsd:complexType name="visualType">
<xsd:sequence minOccurs="1" maxOccurs="unbounded">
<xsd:element ref="binding"></xsd:element>
</xsd:sequence>
<xsd:attribute name="version">
<xsd:simpleType>
<xsd:restriction base="xsd:nonNegativeInteger"></xsd:restriction>
</xsd:simpleType>
</xsd:attribute>
<xsd:attribute name="baseUri" use="optional" type="xsd:anyURI"></xsd:attribute>
<xsd:attribute name="branding" use="optional" type="brandingToken"></xsd:attribute>
<xsd:attribute name="addImageQuery" use="optional" type="xsd:boolean"></xsd:attribute>
<xsd:anyAttribute processContents="skip"></xsd:anyAttribute>
</xsd:complexType>
<xsd:complexType name="tileType">
<xsd:sequence minOccurs="1" maxOccurs="1">
<xsd:element ref="visual"></xsd:element>
</xsd:sequence>
<xsd:anyAttribute processContents="skip"></xsd:anyAttribute>
</xsd:complexType>
<xsd:complexType name="toastType">
<xsd:all>
<xsd:element minOccurs="1" maxOccurs="1" ref="visual"></xsd:element>
<xsd:element minOccurs="0" maxOccurs="1" ref="audio"></xsd:element>
<xsd:element minOccurs="0" maxOccurs="1" ref="actions"></xsd:element>
<xsd:element minOccurs="0" maxOccurs="1" ref="header"></xsd:element>
</xsd:all>
<xsd:attribute name="activationType" use="optional" type="xsd:string"></xsd:attribute>
<xsd:anyAttribute processContents="skip"></xsd:anyAttribute>
</xsd:complexType>
<xsd:complexType name="badgeType">
<xsd:attribute name="value" use="optional" type="xsd:string"></xsd:attribute>
<xsd:attribute name="ImageUri" use="optional" type="xsd:anyURI"></xsd:attribute>
<xsd:anyAttribute processContents="skip"></xsd:anyAttribute>
</xsd:complexType>
<xsd:element name="selection" type="selectionType"></xsd:element>
<xsd:element name="input" type="inputType"></xsd:element>
<xsd:element name="audio" type="audioType"></xsd:element>
<xsd:element name="header" type="headerType"></xsd:element>
<xsd:element name="actions" type="actionsType"></xsd:element>
<xsd:element name="action" type="actionType"></xsd:element>
<xsd:element name="text" type="textType"></xsd:element>
<xsd:element name="image" type="imageType"></xsd:element>
<xsd:element name="progress" type="progressType"></xsd:element>
<xsd:element name="subgroup" type="subgroupType"></xsd:element>
<xsd:element name="group" type="groupType"></xsd:element>
<xsd:element name="binding" type="bindingType"></xsd:element>
<xsd:element name="visual" type="visualType"></xsd:element>
<xsd:element name="tile" type="tileType"></xsd:element>
<xsd:element name="toast" type="toastType"></xsd:element>
<xsd:element name="badge" type="badgeType"></xsd:element>
</xsd:schema>
<?xml version='1.0' encoding='utf-8'?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:msxsl="urn:schemas-microsoft-com:xslt" exclude-result-prefixes="msxsl">
<xsl:output method="xml" indent="yes"></xsl:output>
<xsl:template match="@*">
<xsl:copy></xsl:copy>
</xsl:template>
<xsl:template name="CopyText">
<xsl:copy-of select="@*|text()"></xsl:copy-of>
</xsl:template>
<xsl:template name="CopyImage">
<xsl:copy-of select="@*"></xsl:copy-of>
</xsl:template>
<xsl:template name="CopyProgress">
<xsl:copy-of select="@*"></xsl:copy-of>
</xsl:template>
<xsl:template match="progress">
<xsl:copy>
<xsl:call-template name="CopyProgress"></xsl:call-template>
</xsl:copy>
</xsl:template>
<xsl:template match="text">
<xsl:copy>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:template>
<xsl:template match="image">
<xsl:copy>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:template>
<xsl:template match="group">
<xsl:copy>
<xsl:copy-of select="@*"></xsl:copy-of>
<xsl:apply-templates select="text|image|subgroup"></xsl:apply-templates>
</xsl:copy>
</xsl:template>
<xsl:template match="subgroup">
<xsl:copy>
<xsl:copy-of select="@*"></xsl:copy-of>
<xsl:apply-templates select="text|image"></xsl:apply-templates>
</xsl:copy>
</xsl:template>
<xsl:template match="actions">
<xsl:copy>
<xsl:copy-of select="@*"></xsl:copy-of>
<xsl:apply-templates select="action|input"></xsl:apply-templates>
</xsl:copy>
</xsl:template>
<xsl:template match="action">
<xsl:copy>
<xsl:copy-of select="@*"></xsl:copy-of>
</xsl:copy>
</xsl:template>
<xsl:template match="input">
<xsl:copy>
<xsl:copy-of select="@*"></xsl:copy-of>
<xsl:apply-templates select="selection"></xsl:apply-templates>
</xsl:copy>
</xsl:template>
<xsl:template match="selection">
<xsl:copy>
<xsl:copy-of select="@*"></xsl:copy-of>
</xsl:copy>
</xsl:template>
<xsl:template match="audio">
<xsl:copy>
<xsl:copy-of select="@*"></xsl:copy-of>
</xsl:copy>
</xsl:template>
<xsl:template match="header">
<xsl:copy>
<xsl:copy-of select="@*"></xsl:copy-of>
</xsl:copy>
</xsl:template>
<xsl:template match="toast">
<xsl:copy>
<xsl:if test="//commands[@scenario]">
<xsl:attribute name="scenario">
<xsl:value-of select="//commands/@scenario"></xsl:value-of>
</xsl:attribute>
</xsl:if>
<xsl:apply-templates select="@*|visual"></xsl:apply-templates>
<xsl:apply-templates select="audio"></xsl:apply-templates>
<xsl:apply-templates select="commands|actions"></xsl:apply-templates>
<xsl:apply-templates select="header"></xsl:apply-templates>
</xsl:copy>
</xsl:template>
<xsl:template match="visual">
<xsl:copy>
<xsl:apply-templates select="@*|binding"></xsl:apply-templates>
</xsl:copy>
</xsl:template>
<xsl:template match="binding">
<xsl:copy>
<xsl:copy-of select="@*"></xsl:copy-of>
<xsl:attribute name="hint-originalTemplate">
<xsl:value-of select="@template"></xsl:value-of>
</xsl:attribute>
<xsl:attribute name="template">ToastGeneric</xsl:attribute>
<xsl:apply-templates select="." mode="run2"></xsl:apply-templates>
</xsl:copy>
</xsl:template>
<xsl:template match="binding[@template=&apos;ToastGeneric&apos;]" mode="run2">
<xsl:apply-templates select="text|image|group|progress"></xsl:apply-templates>
</xsl:template>
<xsl:template match="binding[@template=&apos;ToastText01&apos;]" mode="run2">
<xsl:if test="not(../../@activationType)">
<xsl:attribute name="activationType">LegacyToastLaunch</xsl:attribute>
</xsl:if>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">3</xsl:attribute>
<xsl:copy-of select="@*|text()"></xsl:copy-of>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@placement=&apos;attribution&apos;]">
<xsl:copy>
<xsl:copy-of select="@*|text()"></xsl:copy-of>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;ToastText02&apos;]" mode="run2">
<xsl:if test="not(../../@activationType)">
<xsl:attribute name="activationType">LegacyToastLaunch</xsl:attribute>
</xsl:if>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:copy-of select="@*|text()"></xsl:copy-of>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=2]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">2</xsl:attribute>
<xsl:copy-of select="@*|text()"></xsl:copy-of>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@placement=&apos;attribution&apos;]">
<xsl:copy>
<xsl:copy-of select="@*|text()"></xsl:copy-of>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;ToastText03&apos;]" mode="run2">
<xsl:if test="not(../../@activationType)">
<xsl:attribute name="activationType">LegacyToastLaunch</xsl:attribute>
</xsl:if>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">2</xsl:attribute>
<xsl:copy-of select="@*|text()"></xsl:copy-of>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@placement=&apos;attribution&apos;]">
<xsl:copy>
<xsl:copy-of select="@*|text()"></xsl:copy-of>
</xsl:copy>
</xsl:for-each>
<xsl:apply-templates select="text[@id=2]"></xsl:apply-templates>
</xsl:template>
<xsl:template match="binding[@template=&apos;ToastText04&apos;]" mode="run2">
<xsl:if test="not(../../@activationType)">
<xsl:attribute name="activationType">LegacyToastLaunch</xsl:attribute>
</xsl:if>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:copy-of select="@*|text()"></xsl:copy-of>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@placement=&apos;attribution&apos;]">
<xsl:copy>
<xsl:copy-of select="@*|text()"></xsl:copy-of>
</xsl:copy>
</xsl:for-each>
<xsl:apply-templates select="text[@id=2 or @id=3]"></xsl:apply-templates>
</xsl:template>
<xsl:template match="binding[@template=&apos;ToastImageAndText01&apos;]" mode="run2">
<xsl:if test="not(../../@activationType)">
<xsl:attribute name="activationType">LegacyToastLaunch</xsl:attribute>
</xsl:if>
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:copy-of select="@*"></xsl:copy-of>
<xsl:attribute name="placement">appLogoOverride</xsl:attribute>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">3</xsl:attribute>
<xsl:copy-of select="@*|text()"></xsl:copy-of>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@placement=&apos;attribution&apos;]">
<xsl:copy>
<xsl:copy-of select="@*|text()"></xsl:copy-of>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;ToastImageAndText02&apos;]" mode="run2">
<xsl:if test="not(../../@activationType)">
<xsl:attribute name="activationType">LegacyToastLaunch</xsl:attribute>
</xsl:if>
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:copy-of select="@*"></xsl:copy-of>
<xsl:attribute name="placement">appLogoOverride</xsl:attribute>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:copy-of select="@*|text()"></xsl:copy-of>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=2]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">2</xsl:attribute>
<xsl:copy-of select="@*|text()"></xsl:copy-of>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@placement=&apos;attribution&apos;]">
<xsl:copy>
<xsl:copy-of select="@*|text()"></xsl:copy-of>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;ToastImageAndText03&apos;]" mode="run2">
<xsl:if test="not(../../@activationType)">
<xsl:attribute name="activationType">LegacyToastLaunch</xsl:attribute>
</xsl:if>
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:copy-of select="@*"></xsl:copy-of>
<xsl:attribute name="placement">appLogoOverride</xsl:attribute>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">2</xsl:attribute>
<xsl:copy-of select="@*|text()"></xsl:copy-of>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@placement=&apos;attribution&apos;]">
<xsl:copy>
<xsl:copy-of select="@*|text()"></xsl:copy-of>
</xsl:copy>
</xsl:for-each>
<xsl:apply-templates select="text[@id=2]"></xsl:apply-templates>
</xsl:template>
<xsl:template match="binding[@template=&apos;ToastImageAndText04&apos;]" mode="run2">
<xsl:if test="not(../../@activationType)">
<xsl:attribute name="activationType">LegacyToastLaunch</xsl:attribute>
</xsl:if>
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:copy-of select="@*"></xsl:copy-of>
<xsl:attribute name="placement">appLogoOverride</xsl:attribute>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:copy-of select="@*|text()"></xsl:copy-of>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@placement=&apos;attribution&apos;]">
<xsl:copy>
<xsl:copy-of select="@*|text()"></xsl:copy-of>
</xsl:copy>
</xsl:for-each>
<xsl:apply-templates select="text[@id=2 or @id=3]"></xsl:apply-templates>
</xsl:template>
<xsl:template match="commands">
<xsl:element name="actions">
<xsl:for-each select="command">
<xsl:choose>
<xsl:when test="@id=&apos;snooze&apos; or @id=&apos;dismiss&apos;">
<xsl:element name="action">
<xsl:attribute name="activationType">system</xsl:attribute>
<xsl:attribute name="hint-legacyCommandId">
<xsl:value-of select="@id"></xsl:value-of>
</xsl:attribute>
<xsl:attribute name="arguments">
<xsl:value-of select="@arguments"></xsl:value-of>
</xsl:attribute>
<xsl:attribute name="content"></xsl:attribute>
</xsl:element>
</xsl:when>
<xsl:when test="@id=&apos;video&apos; or @id=&apos;voice&apos;">
<xsl:element name="action">
<xsl:attribute name="activationType">LegacyToastLaunch</xsl:attribute>
<xsl:attribute name="hint-legacyCommandId">
<xsl:value-of select="@id"></xsl:value-of>
</xsl:attribute>
<xsl:attribute name="arguments">
<xsl:value-of select="@arguments"></xsl:value-of>
</xsl:attribute>
<xsl:attribute name="content"></xsl:attribute>
</xsl:element>
</xsl:when>
<xsl:when test="@id=&apos;decline&apos;">
<xsl:element name="action">
<xsl:attribute name="activationType">system</xsl:attribute>
<xsl:attribute name="hint-legacyCommandId">
<xsl:value-of select="@id"></xsl:value-of>
</xsl:attribute>
<xsl:attribute name="arguments">
<xsl:value-of select="@arguments"></xsl:value-of>
</xsl:attribute>
<xsl:attribute name="content"></xsl:attribute>
</xsl:element>
</xsl:when>
</xsl:choose>
</xsl:for-each>
</xsl:element>
</xsl:template>
</xsl:stylesheet>
<?xml version='1.0' encoding='utf-8'?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:msxsl="urn:schemas-microsoft-com:xslt" exclude-result-prefixes="msxsl">
<xsl:output method="xml" indent="yes"></xsl:output>
<xsl:template match="@*">
<xsl:copy></xsl:copy>
</xsl:template>
<xsl:template name="CopyText">
<xsl:copy-of select="@*|text()"></xsl:copy-of>
</xsl:template>
<xsl:template name="CopyImage">
<xsl:copy-of select="@*"></xsl:copy-of>
</xsl:template>
<xsl:template match="text">
<xsl:copy>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:template>
<xsl:template match="image">
<xsl:copy>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:template>
<xsl:template match="group">
<xsl:copy>
<xsl:copy-of select="@*"></xsl:copy-of>
<xsl:apply-templates select="text|image|subgroup"></xsl:apply-templates>
</xsl:copy>
</xsl:template>
<xsl:template match="subgroup">
<xsl:copy>
<xsl:copy-of select="@*"></xsl:copy-of>
<xsl:apply-templates select="text|image"></xsl:apply-templates>
</xsl:copy>
</xsl:template>
<xsl:template match="tile">
<xsl:copy>
<xsl:copy-of select="@*"></xsl:copy-of>
<xsl:apply-templates select="visual"></xsl:apply-templates>
</xsl:copy>
</xsl:template>
<xsl:template match="badge">
<xsl:copy>
<xsl:copy-of select="@*"></xsl:copy-of>
</xsl:copy>
</xsl:template>
<xsl:template match="visual">
<xsl:copy>
<xsl:call-template name="CopyImage"></xsl:call-template>
<xsl:apply-templates select="binding"></xsl:apply-templates>
</xsl:copy>
</xsl:template>
<xsl:template match="binding">
<xsl:copy>
<xsl:copy-of select="@*"></xsl:copy-of>
<xsl:attribute name="hint-originalTemplate">
<xsl:value-of select="@template"></xsl:value-of>
</xsl:attribute>
<xsl:apply-templates select="." mode="templateName"></xsl:apply-templates>
<xsl:apply-templates select="." mode="textAndImages"></xsl:apply-templates>
</xsl:copy>
</xsl:template>
<xsl:template match="binding[starts-with(@template,&apos;TileSmall&apos;) or starts-with(@template,&apos;TileMedium&apos;) or starts-with(@template,&apos;TileLarge&apos;) or starts-with(@template,&apos;TileTall&apos;)]" mode="templateName">
<xsl:apply-templates select="@template"></xsl:apply-templates>
</xsl:template>
<xsl:template match="binding[starts-with(@template, &apos;TileSquare&apos;)]" mode="templateName">
<xsl:attribute name="template">TileMedium</xsl:attribute>
</xsl:template>
<xsl:template match="binding[starts-with(@template, &apos;TileWide&apos;)]" mode="templateName">
<xsl:attribute name="template">TileWide</xsl:attribute>
</xsl:template>
<xsl:template match="binding[starts-with(@template, &apos;TileSquare70x70&apos;) or starts-with(@template, &apos;TileSquare71x71&apos;)]" mode="templateName">
<xsl:attribute name="template">TileSmall</xsl:attribute>
</xsl:template>
<xsl:template match="binding[starts-with(@template, &apos;TileSquare310x310&apos;)]" mode="templateName">
<xsl:attribute name="template">TileLarge</xsl:attribute>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWideImageCollection&apos; or @template=&apos;TileWide310x150ImageCollection&apos;]" mode="templateName">
<xsl:attribute name="template">TileWideThumbnailCollection</xsl:attribute>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310ImageCollection&apos;]" mode="templateName">
<xsl:attribute name="template">TileLargeThumbnailCollection</xsl:attribute>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150ImageAndText01&apos; or @template=&apos;TileWideImageAndText01&apos;]" mode="textAndImages">
<xsl:attribute name="hint-overlay">30</xsl:attribute>
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">background</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">2</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare150x150PeekImageAndText04&apos; or @template=&apos;TileSquarePeekImageAndText04&apos;]" mode="textAndImages">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">peek</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">4</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150Text08&apos; or @template=&apos;TileWideText08&apos;]" mode="textAndImages">
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=1]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=2]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=3]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=4]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=5]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=6]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=7]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=8]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=9]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=10]"></xsl:apply-templates>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150Text01&apos; or @template=&apos;TileWideText01&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">caption</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id&gt;=2 and @id&lt;=5]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310BlockAndText02&apos; or @template=&apos;TileSquareBlockAndText02&apos;]" mode="textAndImages">
<xsl:attribute name="hint-overlay">0</xsl:attribute>
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">background</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">headerNumeral</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=2 or @id=3]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:apply-templates select="text[@id=4 or @id=5]">
<xsl:sort select="@*" data-type="number"></xsl:sort>
</xsl:apply-templates>
<text></text>
<xsl:apply-templates select="text[@id=6 or @id=7]">
<xsl:sort select="@*" data-type="number"></xsl:sort>
</xsl:apply-templates>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150SmallImageAndText02&apos; or @template=&apos;TileWideSmallImageAndText02&apos;]" mode="textAndImages">
<group>
<subgroup hint-weight="25">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">caption</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id&gt;=2 and @id&lt;=5]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150BlockAndText01&apos; or @template=&apos;TileWideBlockAndText01&apos;]" mode="textAndImages">
<group>
<subgroup hint-weight="70">
<xsl:apply-templates select="text[@id&gt;=1 and @id&lt;=4]">
<xsl:sort select="@*" data-type="number"></xsl:sort>
</xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=5]">
<xsl:copy>
<xsl:attribute name="hint-style">headerNumeral</xsl:attribute>
<xsl:attribute name="hint-align">right</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=6]">
<xsl:copy>
<xsl:attribute name="hint-align">right</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150PeekImage03&apos; or @template=&apos;TileWidePeekImage03&apos;]" mode="textAndImages">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">peek</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310SmallImageAndText01&apos;]" mode="textAndImages">
<group>
<subgroup hint-weight="50">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup hint-weight="50"></subgroup>
</group>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=2]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">2</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<text></text>
<xsl:for-each select="text[@id=3]">
<xsl:copy>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150SmallImageAndText03&apos; or @template=&apos;TileWideSmallImageAndText03&apos;]" mode="textAndImages">
<group>
<subgroup hint-weight="30">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare150x150Image&apos; or @template=&apos;TileSquareImage&apos;]" mode="textAndImages">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">background</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150Image&apos; or @template=&apos;TileWideImage&apos;]" mode="textAndImages">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">background</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150ImageAndText02&apos; or @template=&apos;TileWideImageAndText02&apos;]" mode="textAndImages">
<xsl:attribute name="hint-overlay">30</xsl:attribute>
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">background</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:apply-templates select="text[@id=1 or @id=2]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
</xsl:apply-templates>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare150x150Text03&apos; or @template=&apos;TileSquareText03&apos;]" mode="textAndImages">
<xsl:apply-templates select="text[@id&gt;=1 and @id&lt;=4]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
</xsl:apply-templates>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150Text04&apos; or @template=&apos;TileWideText04&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare150x150Text01&apos; or @template=&apos;TileSquareText01&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">caption</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id&gt;=2 and @id&lt;=4]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare70x70Image&apos; or @template=&apos;TileSquare71x71Image&apos;]" mode="textAndImages">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">background</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare150x150PeekImageAndText01&apos; or @template=&apos;TileSquarePeekImageAndText01&apos;]" mode="textAndImages">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">peek</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">caption</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id&gt;=2 and @id&lt;=4]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150SmallImageAndText04&apos; or @template=&apos;TileWideSmallImageAndText04&apos;]" mode="textAndImages">
<group>
<subgroup hint-weight="30">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">caption</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=2]">
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150SmallImageAndText01&apos; or @template=&apos;TileWideSmallImageAndText01&apos;]" mode="textAndImages">
<group>
<subgroup hint-weight="30">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare150x150Text04&apos; or @template=&apos;TileSquareText04&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310SmallImagesAndTextList05&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<group>
<subgroup hint-weight="20">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=2 or @id=3]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
</xsl:apply-templates>
</subgroup>
</group>
<text></text>
<group>
<subgroup hint-weight="20">
<xsl:for-each select="image[@id=2]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=4 or @id=5]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
</xsl:apply-templates>
</subgroup>
</group>
<text></text>
<group>
<subgroup hint-weight="20">
<xsl:for-each select="image[@id=3]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=6 or @id=7]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
</xsl:apply-templates>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150PeekImage05&apos; or @template=&apos;TileWidePeekImage05&apos;]" mode="textAndImages">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">peek</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<group>
<subgroup hint-weight="30">
<xsl:for-each select="image[@id=2]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">caption</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=2]">
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare150x150PeekImageAndText02&apos; or @template=&apos;TileSquarePeekImageAndText02&apos;]" mode="textAndImages">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">peek</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">caption</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=2]">
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310SmallImagesAndTextList03&apos;]" mode="textAndImages">
<group>
<subgroup hint-weight="20">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=2]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">2</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
<text></text>
<group>
<subgroup hint-weight="20">
<xsl:for-each select="image[@id=2]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=3]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=4]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">2</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
<text></text>
<group>
<subgroup hint-weight="20">
<xsl:for-each select="image[@id=3]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=5]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=6]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">2</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310ImageAndText01&apos;]" mode="textAndImages">
<xsl:attribute name="hint-overlay">30</xsl:attribute>
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">background</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">2</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare150x150Text02&apos; or @template=&apos;TileSquareText02&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">caption</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=2]">
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310Image&apos;]" mode="textAndImages">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">background</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare150x150Block&apos; or @template=&apos;TileSquareBlock&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">headerNumeral</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:apply-templates select="text[@id=2]"></xsl:apply-templates>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310TextList01&apos;]" mode="textAndImages">
<group>
<subgroup>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:apply-templates select="text[@id=2 or @id=3]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
</xsl:apply-templates>
</subgroup>
</group>
<text></text>
<group>
<subgroup>
<xsl:for-each select="text[@id=4]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:apply-templates select="text[@id=5 or @id=6]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
</xsl:apply-templates>
</subgroup>
</group>
<text></text>
<group>
<subgroup>
<xsl:for-each select="text[@id=7]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:apply-templates select="text[@id=8 or @id=9]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
</xsl:apply-templates>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150PeekImage02&apos; or @template=&apos;TileWidePeekImage02&apos;]" mode="textAndImages">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">peek</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">caption</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id&gt;=2 and @id&lt;=5]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310BlockAndText01&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">2</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:apply-templates select="text[@id=2 or @id=3]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
</xsl:apply-templates>
<text></text>
<group>
<subgroup hint-weight="70">
<xsl:apply-templates select="text[@id=4 or @id=5]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
</xsl:apply-templates>
<text></text>
<xsl:apply-templates select="text[@id=6 or @id=7]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
</xsl:apply-templates>
</subgroup>
<subgroup hint-weight="30">
<xsl:for-each select="text[@id=8]">
<xsl:copy>
<xsl:attribute name="hint-style">headerNumeral</xsl:attribute>
<xsl:attribute name="hint-align">right</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=9]">
<xsl:copy>
<xsl:attribute name="hint-align">right</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare150x150PeekImageAndText03&apos; or @template=&apos;TileSquarePeekImageAndText03&apos;]" mode="textAndImages">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">peek</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:apply-templates select="text[@id&gt;=1 and @id&lt;=4]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
</xsl:apply-templates>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150ImageCollection&apos; or @template=&apos;TileWideImageCollection&apos; or @template=&apos;TileSquare310x310ImageCollection&apos;]" mode="textAndImages">
<xsl:apply-templates select="image[@id&gt;=1 and @id&lt;=5]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
</xsl:apply-templates>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150SmallImageAndText05&apos; or @template=&apos;TileWideSmallImageAndText05&apos;]" mode="textAndImages">
<group>
<subgroup hint-weight="85">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">caption</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=2]">
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150BlockAndText02&apos; or @template=&apos;TileWideBlockAndText02&apos;]" mode="textAndImages">
<group>
<subgroup hint-weight="70">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=2]">
<xsl:copy>
<xsl:attribute name="hint-style">headerNumeral</xsl:attribute>
<xsl:attribute name="hint-align">right</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=3]">
<xsl:copy>
<xsl:attribute name="hint-align">right</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150Text02&apos; or @template=&apos;TileWideText02&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">caption</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<group>
<subgroup>
<xsl:for-each select="text[@id=2]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=3]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
<group>
<subgroup>
<xsl:for-each select="text[@id=4]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=5]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
<group>
<subgroup>
<xsl:for-each select="text[@id=6]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=7]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
<group>
<subgroup>
<xsl:for-each select="text[@id=8]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=9]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150Text03&apos; or @template=&apos;TileWideText03&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">3</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150Text05&apos; or @template=&apos;TileWideText05&apos;]" mode="textAndImages">
<xsl:apply-templates select="text[@id&gt;=1 and @id&lt;=5]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
</xsl:apply-templates>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150Text06&apos; or @template=&apos;TileWideText06&apos;]" mode="textAndImages">
<group>
<subgroup>
<xsl:apply-templates select="text[@id=1]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=2]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=3]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=4]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=5]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=6]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=7]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=8]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=9]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=10]"></xsl:apply-templates>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150Text07&apos; or @template=&apos;TileWideText07&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">caption</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<group>
<subgroup hint-weight="25">
<xsl:for-each select="text[@id=2]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=3]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:for-each select="text[@id=4]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=5]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:for-each select="text[@id=6]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=7]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:for-each select="text[@id=8]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=9]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150Text09&apos; or @template=&apos;TileWideText09&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">caption</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=2]">
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150Text10&apos; or @template=&apos;TileWideText10&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">caption</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<group>
<subgroup hint-weight="10">
<xsl:for-each select="text[@id=2]">
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=3]">
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:for-each select="text[@id=4]">
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=5]">
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:for-each select="text[@id=6]">
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=7]">
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:for-each select="text[@id=8]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=9]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150Text11&apos; or @template=&apos;TileWideText11&apos;]" mode="textAndImages">
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=1]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=2]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=3]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=4]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=5]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=6]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=7]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=8]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=9]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=10]"></xsl:apply-templates>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150PeekImage01&apos; or @template=&apos;TileWidePeekImage01&apos;]" mode="textAndImages">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">peek</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">caption</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=2]">
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150PeekImage04&apos; or @template=&apos;TileWidePeekImage04&apos;]" mode="textAndImages">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">peek</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150PeekImage06&apos; or @template=&apos;TileWidePeekImage06&apos;]" mode="textAndImages">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">peek</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<group>
<subgroup hint-weight="30">
<xsl:for-each select="image[@id=2]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150PeekImageAndText01&apos; or @template=&apos;TileWidePeekImageAndText01&apos;]" mode="textAndImages">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">peek</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<group>
<subgroup hint-weight="10"></subgroup>
<subgroup>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup hint-weight="10"></subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150PeekImageAndText02&apos; or @template=&apos;TileWidePeekImageAndText02&apos;]" mode="textAndImages">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">peek</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<group>
<subgroup hint-weight="10"></subgroup>
<subgroup>
<xsl:apply-templates select="text[@id&gt;=1 and @id&lt;=4]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
</xsl:apply-templates>
</subgroup>
<subgroup hint-weight="10"></subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310Text01&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:apply-templates select="text[@id&gt;=2 and @id&lt;=10]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
</xsl:apply-templates>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310Text02&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=2]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=3]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=4]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=5]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=6]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=7]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=8]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=9]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=10]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=11]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=12]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=13]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=14]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=15]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=16]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=17]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=18]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=19]"></xsl:apply-templates>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310Text03&apos;]" mode="textAndImages">
<xsl:apply-templates select="text[@id&gt;=1 and @id&lt;=11]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
</xsl:apply-templates>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310Text04&apos;]" mode="textAndImages">
<group>
<subgroup>
<xsl:apply-templates select="text[@id=1]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=2]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=3]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=4]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=5]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=6]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=7]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=8]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=9]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=10]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=11]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=12]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=13]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=14]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=15]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=16]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=17]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=18]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=19]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=20]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup>
<xsl:apply-templates select="text[@id=21]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=22]"></xsl:apply-templates>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310Text05&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=2]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=3]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=4]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=5]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=6]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=7]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=8]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=9]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=10]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=11]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=12]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=13]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=14]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=15]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=16]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=17]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=18]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=19]"></xsl:apply-templates>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310Text06&apos;]" mode="textAndImages">
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=1]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=2]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=3]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=4]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=5]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=6]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=7]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=8]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=9]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=10]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=11]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=12]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=13]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=14]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=15]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=16]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=17]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=18]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=19]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=20]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="25">
<xsl:apply-templates select="text[@id=21]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=22]"></xsl:apply-templates>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310Text07&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=2]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=3]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=4]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=5]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=6]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=7]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=8]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=9]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=10]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=11]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=12]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=13]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=14]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=15]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=16]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=17]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=18]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=19]"></xsl:apply-templates>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310Text08&apos;]" mode="textAndImages">
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=1]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=2]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=3]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=4]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=5]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=6]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=7]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=8]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=9]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=10]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=11]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=12]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=13]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=14]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=15]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=16]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=17]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=18]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=19]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=20]"></xsl:apply-templates>
</subgroup>
</group>
<group>
<subgroup hint-weight="10">
<xsl:apply-templates select="text[@id=21]"></xsl:apply-templates>
</subgroup>
<subgroup>
<xsl:apply-templates select="text[@id=22]"></xsl:apply-templates>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310Text09&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">2</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<text hint-style="body"></text>
<xsl:for-each select="text[@id=2 or @id=3]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<text hint-style="body"></text>
<xsl:apply-templates select="text[@id=4 or @id=5]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
</xsl:apply-templates>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310TextList02&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">3</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<text></text>
<xsl:for-each select="text[@id=2]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">3</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<text></text>
<xsl:for-each select="text[@id=3]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">3</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310TextList03&apos;]" mode="textAndImages">
<group>
<subgroup>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=2]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">2</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
<text></text>
<group>
<subgroup>
<xsl:for-each select="text[@id=3]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=4]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">2</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
<text></text>
<group>
<subgroup>
<xsl:for-each select="text[@id=5]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=6]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">2</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310ImageAndText02&apos;]" mode="textAndImages">
<xsl:attribute name="hint-overlay">30</xsl:attribute>
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">background</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:apply-templates select="text[@id=1 or @id=2]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
</xsl:apply-templates>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310SmallImagesAndTextList01&apos;]" mode="textAndImages">
<group>
<subgroup hint-weight="20">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=2 or @id=3]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
<text></text>
<group>
<subgroup hint-weight="20">
<xsl:for-each select="image[@id=2]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=4]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:apply-templates select="text[@id=5 or @id=6]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
</xsl:apply-templates>
</subgroup>
</group>
<text></text>
<group>
<subgroup hint-weight="20">
<xsl:for-each select="image[@id=3]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=7]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=8 or @id=9]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310SmallImagesAndTextList02&apos;]" mode="textAndImages">
<group>
<subgroup hint-weight="20">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">3</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
<text></text>
<group>
<subgroup hint-weight="20">
<xsl:for-each select="image[@id=2]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=2]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">3</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
<text></text>
<group>
<subgroup hint-weight="20">
<xsl:for-each select="image[@id=3]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=3]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">3</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310SmallImagesAndTextList04&apos;]" mode="textAndImages">
<group>
<subgroup hint-weight="85">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=2]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">2</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
<text></text>
<group>
<subgroup hint-weight="85">
<xsl:for-each select="text[@id=3]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=4]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">2</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="image[@id=2]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
<text></text>
<group>
<subgroup hint-weight="85">
<xsl:for-each select="text[@id=5]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=6]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">2</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="image[@id=3]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare71x71IconWithBadge&apos;]" mode="textAndImages">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">icon</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare71x71_IconWithBadgeAndText&apos;]" mode="textAndImages">
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">icon</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:apply-templates select="text[@id=1]"></xsl:apply-templates>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare150x150IconWithBadge&apos;]" mode="textAndImages">
<xsl:if test="text[@id=1]">
<xsl:attribute name="displayName">
<xsl:value-of select="text[@id=1]/text()"></xsl:value-of>
</xsl:attribute>
</xsl:if>
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">icon</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150IconWithBadgeAndText&apos;]" mode="textAndImages">
<xsl:if test="text[@id=4]">
<xsl:attribute name="displayName">
<xsl:value-of select="text[@id=4]/text()"></xsl:value-of>
</xsl:attribute>
</xsl:if>
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">icon</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:apply-templates select="text[@id=2 or @id=3]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
</xsl:apply-templates>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310ImageAndTextOverlay01&apos;]" mode="textAndImages">
<xsl:attribute name="hint-overlay">30</xsl:attribute>
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">background</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">3</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310ImageAndTextOverlay02&apos;]" mode="textAndImages">
<xsl:attribute name="hint-overlay">30</xsl:attribute>
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">background</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">2</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<text></text>
<text></text>
<text></text>
<text></text>
<xsl:for-each select="text[@id=2]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">3</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310ImageAndTextOverlay03&apos;]" mode="textAndImages">
<xsl:attribute name="hint-overlay">30</xsl:attribute>
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">background</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">2</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<text></text>
<text></text>
<text></text>
<text></text>
<xsl:apply-templates select="text[@id&gt;=2 and @id&lt;=4]">
<xsl:sort select="@*" data-type="number"></xsl:sort>
</xsl:apply-templates>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150PeekImageCollection01&apos; or @template=&apos;TileWidePeekImageCollection01&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">caption</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=2]">
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150PeekImageCollection02&apos; or @template=&apos;TileWidePeekImageCollection02&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">caption</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id&gt;=2 and @id&lt;=5]">
<xsl:sort select="@id" data-type="number"></xsl:sort>
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150PeekImageCollection03&apos; or @template=&apos;TileWidePeekImageCollection03&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150PeekImageCollection04&apos; or @template=&apos;TileWidePeekImageCollection04&apos;]" mode="textAndImages">
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150PeekImageCollection05&apos; or @template=&apos;TileWidePeekImageCollection05&apos;]" mode="textAndImages">
<group>
<subgroup hint-weight="30">
<xsl:for-each select="image[@id=6]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">caption</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=2]">
<xsl:copy>
<xsl:attribute name="hint-style">captionSubtle</xsl:attribute>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileWide310x150PeekImageCollection06&apos; or @template=&apos;TileWidePeekImageCollection06&apos;]" mode="textAndImages">
<group>
<subgroup hint-weight="30">
<xsl:for-each select="image[@id=6]">
<xsl:copy>
<xsl:attribute name="placement">inline</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
<subgroup>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-style">body</xsl:attribute>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</subgroup>
</group>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310ImageCollectionAndText01&apos;]" mode="textAndImages">
<xsl:attribute name="hint-overlay">30</xsl:attribute>
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">background</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:for-each select="text[@id=1]">
<xsl:copy>
<xsl:attribute name="hint-wrap">true</xsl:attribute>
<xsl:attribute name="hint-maxLines">2</xsl:attribute>
<xsl:call-template name="CopyText"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare310x310ImageCollectionAndText02&apos;]" mode="textAndImages">
<xsl:attribute name="hint-overlay">30</xsl:attribute>
<xsl:for-each select="image[@id=1]">
<xsl:copy>
<xsl:attribute name="placement">background</xsl:attribute>
<xsl:call-template name="CopyImage"></xsl:call-template>
</xsl:copy>
</xsl:for-each>
<xsl:apply-templates select="text[@id&gt;=1 and @id&lt;= 2]">
<xsl:sort select="@*" data-type="number"></xsl:sort>
</xsl:apply-templates>
</xsl:template>
<xsl:template match="binding[@template=&apos;TileSquare150x150_Search&apos; or @template=&apos;TileWide310x150_Search&apos;]" mode="textAndImages">
<xsl:apply-templates select="image[@id=1 or @id=2]"></xsl:apply-templates>
<xsl:apply-templates select="text[@id&gt;=1 and @id&lt;= 11]"></xsl:apply-templates>
</xsl:template>
<xsl:template match="binding" mode="textAndImages">
<xsl:apply-templates select="text|image|group"></xsl:apply-templates>
</xsl:template>
</xsl:stylesheet>
