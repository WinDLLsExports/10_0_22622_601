!This program cannot be run in DOS mode.
.text
`.data
.idata
@.didat
.rsrc
@.reloc
api-ms-win-core-winrt-error-l1-1-0.dll
api-ms-win-core-winrt-string-l1-1-0.dll
api-ms-win-shcore-taskpool-l1-1-0.dll
api-ms-win-shcore-stream-l1-1-0.dll
twinapi.appcore.dll
api-ms-win-core-com-l1-1-0.dll
RPCRT4.dll
api-ms-win-core-winrt-error-l1-1-1.dll
api-ms-win-core-winrt-l1-1-0.dll
api-ms-win-core-com-l1-1-1.dll
api-ms-win-security-sddl-l1-1-0.dll
Cabinet.dll
api-ms-win-shcore-stream-winrt-l1-1-0.dll
wevtapi.dll
ext-ms-win-appmodel-state-ext-l1-2-0.dll
ext-ms-win-kernel32-package-l1-1-0.dll
CRYPTSP.dll
ext-ms-win-core-licensemanager-l1-1-0
ext-ms-win-core-licensemanager-l1-1-1
ext-ms-win-core-licensemanager-l1-1-2
ext-ms-win-core-licensemanager-l1-1-0.dll
ext-ms-win-core-licensemanager-l1-1-2.dll
ext-ms-win-devmgmt-policy-l1-1-0
ext-ms-win-devmgmt-policy-l1-1-1
ext-ms-win-devmgmt-policy-l1-1-2
ext-ms-win-devmgmt-policy-l1-1-3
ext-ms-win-devmgmt-policy-l1-1-0.dll
ext-ms-win-ntuser-keyboard-l1-3-0.dll
ext-ms-win-ntuser-keyboard-l1-1-0.dll
ext-ms-win-rtcore-ntuser-window-ext-l1-1-0.dll
ext-ms-win-session-usermgr-l1-1-0
ext-ms-win-session-usermgr-l1-2-0
ext-ms-win-session-usermgr-l1-1-0.dll
api-ms-win-eventing-legacy-l1-1-0.dll
api-ms-win-security-capability-l1-1-0.dll
api-ms-win-appmodel-runtime-l1-1-1.dll
api-ms-win-appmodel-runtime-l1-1-0.dll
iertutil.dll
WINHTTP.dll
webservices.dll
ntdll.dll
EtwEventRegister
EtwEventUnregister
EtwEventEnabled
EtwEventWrite
Windows.Services.Store.Internal.StoreContextServer
Windows.Services.Store.StoreAvailability
Windows.Foundation.Diagnostics.AsyncCausalityTracer
Windows.Security.Authentication.Web.Core.WebTokenRequest
Windows.Services.Store.Internal.StoreContentIdKeyIdResponse
Windows.Storage.Streams.DataReader
Windows.Services.Store.StoreImage
Windows.UI.Core.CoreWindow
Windows.Storage.Streams.RandomAccessStreamReference
Windows.ApplicationModel.Store.ProductLicense
Windows.Management.Deployment.PackageManager
Windows.System.UserProfile.GlobalizationPreferences
Windows.Services.Store.StoreSku
&OL0O
Windows.Security.Cryptography.CryptographicBuffer
Windows.ApplicationModel.Store.Preview.StoreConfiguration
Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager
Windows.Services.Store.StorePackageLicense
Windows.Foundation.Uri
Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties
Windows.ApplicationModel.Core.CoreApplication
Windows.Web.Http.HttpRequestMessage
Windows.ApplicationModel.AppService.AppServiceConnection
Windows.Services.Store.Internal.StoreContextCallerData
Windows.Web.Http.HttpMethod
Windows.Services.Store.StoreContext
Windows.ApplicationModel.Store.Preview.StorePreview
Windows.Security.Authentication.OnlineId.OnlineIdServiceTicketRequest
Windows.Data.Xml.Dom.XmlDocument
Windows.Services.Store.StoreSendRequestResult
,a$Cs
Windows.Services.Store.StoreAppLicense
Windows.Services.Store.StoreAcquireLicenseResult
Windows.Services.Store.StoreProductPagedQueryResult
Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo
Windows.Services.Store.StorePackageUpdateResult
Windows.Internal.Security.Authentication.Web.TokenBrokerInternal
Windows.UI.Popups.UICommand
Windows.Services.Store.StoreRateAndReviewResult
Windows.Globalization.NumberFormatting.CurrencyFormatter
Windows.Services.Store.Internal.StoreContentIdKeyIdItem
Windows.Services.Store.StoreQueueItemStatus
Windows.Services.Store.StoreQueueItem
Windows.ApplicationModel.Store.CurrentApp
Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager
Windows.ApplicationModel.Store.Preview.StoreHardwareManufacturerInfo
Windows.Services.Store.StoreCollectionData
Windows.Foundation.Collections.ValueSet
Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo
Windows.Networking.Connectivity.NetworkInformation
Windows.Data.Json.JsonValue
Windows.Web.Http.HttpStringContent
Windows.ApplicationModel.Store.PurchaseResults
Windows.ApplicationModel.Store.Internal.AuthenticationExtension
Uo~9@D
Windows.ApplicationModel.Store.ProductListing
Windows.Web.Http.Filters.HttpBaseProtocolFilter
Windows.Services.Store.StoreProductResult
Windows.Internal.Security.WebAuthentication.AuthenticationManager
3SVmn
Windows.ApplicationModel.Store.ListingInformation
Windows.ApplicationModel.Store.Internal.StoreCommerce
Windows.Data.Json.JsonObject
X~{TR
Windows.Services.Store.StoreSubscriptionInfo
Windows.Foundation.PropertyValue
Windows.Web.Http.HttpClient
Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper
Windows.Services.Store.StoreUninstallStorePackageResult
Windows.Services.Store.StoreQueueItemCompletedEventArgs
Windows.Services.Store.StorePurchaseProperties
Windows.ApplicationModel.Store.UnfulfilledConsumable
Windows.Services.Store.StorePackageInstallOptions
Windows.Services.Store.StoreVideo
Windows.Services.Store.StoreProductQueryResult
Windows.Data.Json.JsonArray
Windows.Services.Store.Internal.GetNextStoreProductOperation
Windows.Services.Store.StoreProduct
Windows.Services.Store.StoreLicense
Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults
Windows.Services.Store.StoreProductOptions
Windows.Services.Store.StorePackageUpdate
Windows.Services.Store.StorePrice
Windows.Services.Store.StorePurchaseResult
Windows.Services.Store.StoreConsumableResult
Windows.Services.Store.StoreRequestHelper
Windows.System.Internal.UserManager
(QD)Qj
Windows.ApplicationModel.Store.LicenseInformation
JTk_S/
Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions
Windows.Services.Store.StoreCanAcquireLicenseResult
Exception
ReturnNt
ReturnHr
LogNt
LogHr
FailFast
%hs(%u)\%hs!%p: 
%hs!%p: 
(caller: %p) 
%hs(%d) tid(%x) %08X %ws
Msg:[%ws] 
CallContext:[%hs] 
[%hs(%hs)]
[%hs]
kernelbase.dll
RaiseFailFastException
onecore\internal\sdk\inc\wil\opensource\wil\resource.h
WilError_03
RtlNtStatusToDosErrorNoTeb
RtlDllShutdownInProgress
RtlDisownModuleHeapAllocation
WilFailureNotifyWatchers
Local\SM0:%lu:%lu:%hs
activatibleClassId
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult
Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager
UNKWN
ERROR
 WARN
 info
     
Failed
Assert (%s): %s
LogSimpleMessage
onecoreuap\enduser\winstore\licensing\winrt\dllsrv\windows\log.cpp
%s%hs:%ws
(0x%08x)
[%hs]
%s%hs:%ws
[%hs]
%s%hs:%ws
(0x%08x)
%s%hs:%ws
(QD)Qj
&_*q<|
3SVmn
X~{TR
IAsyncOperationWithProgress`2
AsyncOperationWithProgressCompletedHandler`2
AsyncOperationCompletedHandler`1
AsyncOperationProgressHandler`2
IAsyncAction
Foundation
IAsyncOperation`1
/Z*Px
/Z8@b
&_*q<|
X~{TR
/ZxqL
~/ZxqL
X~{TR
AsyncActionCompletedHandler
AsyncOperationCompletedHandler`1<String>
IAsyncOperation`1<String>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.ListingInformation>
IAsyncOperation`1<Windows.ApplicationModel.Store.ListingInformation>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.FulfillmentResult>
IAsyncOperation`1<Windows.ApplicationModel.Store.FulfillmentResult>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.PurchaseResults>
IAsyncOperation`1<Windows.ApplicationModel.Store.PurchaseResults>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
AsyncOperationCompletedHandler`1<Boolean>
IAsyncOperation`1<Boolean>
AsyncOperationCompletedHandler`1<Windows.UI.Popups.IUICommand>
IAsyncOperation`1<Windows.UI.Popups.IUICommand>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
AsyncOperationProgressHandler`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
AsyncOperationWithProgressCompletedHandler`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
IAsyncOperationWithProgress`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
Windows.ApplicationModel.Store.Internal.IMessageDialogHelper2.ShowDialogWithResultsAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.LoadListingInformationAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.GetAppReceiptAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.GetProductReceiptAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.GetAppPurchaseCampaignIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce2.GetCustomerPurchaseIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce2.GetCustomerCollectionsIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommercePreview.RequestProductPurchaseByProductIdAndSkuIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommercePreview.LoadAddOnProductInfosAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulator.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulator.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulator.LoadListingInformationAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.Internal.AuthenticationExtension.ShowChallengeForUserAsync
Windows.Services.Store.Internal.IStoreContextServer.GetAppAndOptionalStorePackageUpdatesAsync
Windows.Services.Store.Internal.IStoreContextServer.RequestDownloadStorePackageUpdatesAsync
Windows.Services.Store.Internal.IStoreContextServer.RequestDownloadAndInstallStorePackageUpdatesAsync
Windows.Services.Store.Internal.IStoreContextServer.RequestDownloadAndInstallStorePackagesAsync
Windows
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
IAsyncOperation`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager.AddLicenseAsync
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager.GetSatisfactionInfosAsync
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager.RefreshLicensesAsync
/ZsOg<
/ZsOg<
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
AsyncOperationCompletedHandler`1<Windows.Storage.Streams.IRandomAccessStreamReference>
IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStreamReference>
AsyncOperationCompletedHandler`1<Windows.Security.Authentication.Web.Core.WebTokenRequestResult>
IAsyncOperation`1<Windows.Security.Authentication.Web.Core.WebTokenRequestResult>
Windows.ApplicationModel.Store.Preview.StorePreview.RequestProductPurchaseByProductIdAndSkuIdAsync
Windows.ApplicationModel.Store.Preview.StorePreview.LoadAddOnProductInfosAsync
Windows.ApplicationModel.Store.Preview.StoreConfiguration.FilterUnsupportedSystemFeaturesAsync
Windows.ApplicationModel.Store.Preview.StoreConfiguration.GetStoreLogDataAsync
Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper.RequestTokenWithUIElementHostingAsync
Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper.RequestTokenWithUIElementHostingAndWebAccountAsync
/Z-[E
1/Zfj
d/Zc1q
/ZhM{
/ZhM{
UY7i*
,a$Cs
<??YzU
Windows.ApplicationModel.Store.CurrentApp.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.CurrentApp.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.CurrentApp.LoadListingInformationAsync
Windows.ApplicationModel.Store.CurrentApp.GetAppReceiptAsync
Windows.ApplicationModel.Store.CurrentApp.GetProductReceiptAsync
Windows.ApplicationModel.Store.CurrentApp.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.CurrentApp.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.CurrentApp.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.CurrentApp.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.CurrentApp.GetAppPurchaseCampaignIdAsync
Windows.ApplicationModel.Store.CurrentApp.GetCustomerPurchaseIdAsync
Windows.ApplicationModel.Store.CurrentApp.GetCustomerCollectionsIdAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.LoadListingInformationAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetAppReceiptAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetProductReceiptAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.ReloadSimulatorAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetAppPurchaseCampaignIdAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetUnfulfilledConsumablesAsync
<??YzU
/ZeOC
/Z7i*
/ZW^6
/ZW^6
/ZeOC
/ZW^6
Ylp)d_
Fsq^V
&OL0O
e/X4V
Uo~9@D
!*WPq
iR{I<
q}X>N
I'ae#
4-RZKD[
AsyncOperationCompletedHandler`1<Windows.Services.Store.StorePurchaseResult>
IAsyncOperation`1<Windows.Services.Store.StorePurchaseResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductResult>
IAsyncOperation`1<Windows.Services.Store.StoreProductResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
IAsyncOperation`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductQueryResult>
IAsyncOperation`1<Windows.Services.Store.StoreProductQueryResult>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreUninstallStorePackageResult>
IAsyncOperation`1<Windows.Services.Store.StoreUninstallStorePackageResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreRateAndReviewResult>
IAsyncOperation`1<Windows.Services.Store.StoreRateAndReviewResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAppLicense>
IAsyncOperation`1<Windows.Services.Store.StoreAppLicense>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductPagedQueryResult>
IAsyncOperation`1<Windows.Services.Store.StoreProductPagedQueryResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreConsumableResult>
IAsyncOperation`1<Windows.Services.Store.StoreConsumableResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAcquireLicenseResult>
IAsyncOperation`1<Windows.Services.Store.StoreAcquireLicenseResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreSendRequestResult>
IAsyncOperation`1<Windows.Services.Store.StoreSendRequestResult>
Windows.Services.Store.StoreProductPagedQueryResult.GetNextAsync
Windows.Services.Store.StoreProduct.GetIsAnySkuInstalledAsync
Windows.Services.Store.StoreProduct.RequestPurchaseAsync
Windows.Services.Store.StoreProduct.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreSku.GetIsInstalledAsync
Windows.Services.Store.StoreSku.RequestPurchaseAsync
Windows.Services.Store.StoreSku.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreAvailability.RequestPurchaseAsync
Windows.Services.Store.StoreAvailability.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreRequestHelper.SendRequestAsync
Windows.Services.Store.StoreContext.GetCustomerPurchaseIdAsync
Windows.Services.Store.StoreContext.GetCustomerCollectionsIdAsync
Windows.Services.Store.StoreContext.GetAppLicenseAsync
Windows.Services.Store.StoreContext.GetStoreProductForCurrentAppAsync
Windows.Services.Store.StoreContext.GetStoreProductsAsync
Windows.Services.Store.StoreContext.GetAssociatedStoreProductsAsync
Windows.Services.Store.StoreContext.GetAssociatedStoreProductsWithPagingAsync
Windows.Services.Store.StoreContext.GetUserCollectionAsync
Windows.Services.Store.StoreContext.GetUserCollectionWithPagingAsync
Windows.Services.Store.StoreContext.ReportConsumableFulfillmentAsync
Windows.Services.Store.StoreContext.GetConsumableBalanceRemainingAsync
Windows.Services.Store.StoreContext.AcquireStoreLicenseForOptionalPackageAsync
Windows.Services.Store.StoreContext.RequestPurchaseAsync
Windows.Services.Store.StoreContext.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreContext.GetAppAndOptionalStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.RequestDownloadStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.RequestDownloadAndInstallStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.RequestDownloadAndInstallStorePackagesAsync
Windows.Services.Store.StoreContext.FindStoreProductForPackageAsync
Windows.Services.Store.StoreContext.TrySilentDownloadStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.TrySilentDownloadAndInstallStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.CanAcquireStoreLicenseForOptionalPackageAsync
Windows.Services.Store.StoreContext.CanAcquireStoreLicenseAsync
Windows.Services.Store.StoreContext.GetStoreProductsWithOptionsAsync
Windows.Services.Store.StoreContext.GetAssociatedStoreQueueItemsAsync
Windows.Services.Store.StoreContext.GetStoreQueueItemsAsync
Windows.Services.Store.StoreContext.RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync
Windows.Services.Store.StoreContext.DownloadAndInstallStorePackagesAsync
Windows.Services.Store.StoreContext.RequestUninstallStorePackageAsync
Windows.Services.Store.StoreContext.RequestUninstallStorePackageByStoreIdAsync
Windows.Services.Store.StoreContext.UninstallStorePackageAsync
Windows.Services.Store.StoreContext.UninstallStorePackageByStoreIdAsync
Windows.Services.Store.StoreContext.RequestRateAndReviewAppAsync
Windows.Services.Store.StoreContext.SetInstallOrderForAssociatedStoreQueueItemsAsync
Windows.Services.Store.StoreQueueItem.CancelInstallAsync
Windows.Services.Store.StoreQueueItem.PauseInstallAsync
Windows.Services.Store.StoreQueueItem.ResumeInstallAsync
#(#L#p#
$$$H$l$&"J"
+>+b+
 1J1t1
1"2L2|2
0B0f0
!*!N!r!
"&"J"t"
J%n%H
 7J7n7
,L,|,
-N-x-
.2.\.
/ZUo~9@D
&OL0O
e/X4V
/ZW^6
/ZW^6
/ZsOg
_s/Z{I<
C3R/Z
-/Z3l
/Z{I<
P/Z/y<
!*WPq
/Z}7F
`/ZQl
/Z/y<
sW/Zl
q}X>N
Ylp)d_
/Z/y<
6*Z*~*J(
/ZsOg
).)R)
FRtlQueryFeatureConfiguration
RtlRegisterFeatureConfigurationChangeNotification
RtlUnregisterFeatureConfigurationChangeNotification
RtlNotifyFeatureUsage
LogStagedFeatureUsage
NtQueryWnfStateData
NtUpdateWnfStateData
onecore\internal\sdk\inc\wil\Staging.h
WilStaging_02
previewStore
storeConfiguration
storeOptionalPackageInstallManagement
UnmanagedConsumable
Consumable
https://
entitlementId
expiration
packageIdentifier
packageType
SellableBy
addOnParent
__tag
string
number
object
array
goldenBeneficiary
beneficiaryArray
goldenBeneficiaryArray
Products
ChkHr(JsonParser::ParseJSONStringToObject( productJsonString, &results, getProductsByKindsResultsTable))
_ParseGetProductsByKinds
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storecontextserver.cpp
ChkHr(results.Products.CopyTo(products))
ChkHr(GetActivationFactory( NetworkingConnectivityNetworkInformation.Get(), &netInfoStatics))
_IsNetworkMetered
ChkHr(netInfoStatics->GetInternetConnectionProfile(&connectionProfile))
There is no connection profile
ChkHr(connectionProfile->GetConnectionCost(&cost))
ChkHr(cost->get_NetworkCostType(&costType))
ChkHr(cost->get_Roaming(&isRoaming))
ChkHr(pStorePackageUpdates->First(&updateIterator))
_AreAllDownloadsComplete
ChkHr(updateIterator->get_HasCurrent(&hasCurrent))
ChkHr(updateIterator->get_Current(&update))
ChkHr(update.As(&updatePrivate))
ChkHr(updatePrivate->get_StoreQueueItem(&storeQueueItem))
ChkHr(storeQueueItem->GetCurrentStatus(&installStatus))
ChkHr(installStatus->get_PackageInstallExtendedState(&extendedState))
ChkHr(updateIterator->MoveNext(&hasCurrent))
ChkHr(JsonHelpers::CreateJsonObject(&beneficiary))
_BuildBeneficiaryJSON
identityValue
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"identityValue", ::WindowsGetStringRawBuffer(token, nullptr)))
localTicketReference
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"localTicketReference", ::WindowsGetStringRawBuffer(accountId, nullptr)))
identityType
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"identityType", L"Msa"))
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"identityType", L"Aad"))
ChkHr(((HRESULT)0x803F610BL))
ChkHr(WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicket( 0, WinStoreAuth::AuthenticationEndpoint::OneStore, WinStoreAuth::PromptType::Silent, WinStoreAuth::AuthenticationInternal::UseXToken(), user.Get(), authTicket.GetAddressOf(), providerType, spPrimaryAccountTokenRequestResult.GetAddressOf()))
_BuildGoldenBeneficiaryJSON
ChkHr(_BuildBeneficiaryJSON(providerType, authTicket.Get(), DefaultWebAccountIdString.Get(), jsonBeneficiary))
ChkHr(ClientProcessUtils::GetSidForUser(user.Get(), userSid.GetAddressOf()))
_BuildBeneficiaryArrayJSON
ChkHr(JsonHelpers::CreateJsonObject(&userAuth))
ChkHr(JsonHelpers::CreateJsonArray(&authTokensArray))
ChkHr(JsonHelpers::SetNamedArray(userAuth, userSid.GetRawBuffer(nullptr), authTokensArray))
ChkHr(CoSwitchCallContext(nullptr, &pOldCtx))
ChkHr(CoSwitchCallContext(pOldCtx, &pTmpCtx))
ChkHr(hrGetAllAccounts)
ChkHr(_BuildBeneficiaryJSON( tickets[index].m_providerType, tickets[index].m_ticket.Get(), tickets[index].m_webAccountId.Get(), jsonBeneficiary))
ChkHr(JsonHelpers::AppendObject(authTokensArray, jsonBeneficiary))
ChkHr(userAuth->GetNamedArray(userSid.Get(), &jsonBeneficiaries))
ChkHr(JsonHelpers::CreateJsonArray(&jsonBeneficiaries))
_BuildGoldenBeneficiaryArrayJSON
ChkHr(_BuildGoldenBeneficiaryJSON(user, beneficiary))
ChkHr(JsonHelpers::AppendObject(jsonBeneficiaries, beneficiary))
ChkHr(jsonValue->get_ValueType(&valueType))
ChkHr(jsonValue->GetString(value.GetAddressOf()))
ChkHr(jsonValue->GetObjectW(&childObject))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductId", currentProductId.GetAddressOf()))
_ShouldFilterByRelationship
MarketProperties
ChkHr(JsonHelpers::GetNamedArray(product, L"MarketProperties", &marketProperties))
ChkHr(marketProperties->GetObjectAt(0, &marketProperty))
RelatedProducts
ChkHr(JsonHelpers::GetNamedArray(marketProperty, L"RelatedProducts", &relatedProducts))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(relatedProducts, &relatedProductsSize))
ChkHr(relatedProducts->GetObjectAt(relatedIndex, &relatedProduct))
RelationshipType
ChkHr(JsonHelpers::GetNamedString(relatedProduct, L"RelationshipType", type.GetAddressOf()))
RelatedProductId
ChkHr(JsonHelpers::GetNamedString(relatedProduct, L"RelatedProductId", relatedProductId.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(jsonBodyString.GetRawBuffer(nullptr), &jsonResult))
_FilterProductsJson
ChkHr(JsonHelpers::GetNamedArray(jsonResult, L"Products", &products))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(products, &productsSize))
ChkHr(products->GetObjectAt(static_cast<UINT32>(index), &product))
ChkHr(_ShouldFilterByRelationship(product, relationshipType, parentProductId, &remove))
ChkHr(JsonHelpers::RemoveAt(products, static_cast<UINT32>(index)))
ChkHr(JsonHelpers::Stringify(jsonResult, jsonBodyString.GetAddressOf()))
ChkHr(jsonInput.As(&jsonObjectIterable))
_ConstructRequestBody
ChkHr(jsonValue->GetArray(jsonArray.GetAddressOf()))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(jsonArray, &count))
ChkHr(jsonArray->GetObjectAt(i, jsonElement.GetAddressOf()))
ChkHr(_ConstructRequestBody(jsonElement, user, accountProviderType, promptType, hwnd, forceRetailSandbox, jsonParameters))
ChkAlloc(tag)
ChkHr(currentPair->get_Key(tag->destinationKey.GetAddressOf()))
isOptional
defaultValue
ChkHr(JsonParser::ParseJSONToObject( childObject, tag, responseTable))
ChkHr(_ConstructRequestBody(childObject, user, accountProviderType, promptType, hwnd, forceRetailSandbox, jsonParameters))
ChkHr(jsonSubstitutionList->destinationKey.CopyTo(jsonSubstitutionList->sourceKey.GetAddressOf()))
ChkHr(_BuildGoldenBeneficiaryJSON(user, jsonBeneficiary))
ChkHr(JsonHelpers::SetNamedObject(jsonParameters, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), jsonBeneficiary))
ChkHr(_BuildBeneficiaryArrayJSON(user, accountProviderType, promptType, hwnd, forceRetailSandbox, jsonBeneficiaries))
ChkHr(JsonHelpers::SetNamedArray(jsonParameters, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), jsonBeneficiaries))
ChkHr(_BuildGoldenBeneficiaryArrayJSON(user, jsonBeneficiaries))
ChkHr(jsonSubstitutionList->defaultValue->get_ValueType(&defaultValueType))
ChkHr(jsonSubstitutionList->defaultValue->Stringify(defaultValueString.GetAddressOf()))
Failed to find substitute value with key %s and no default value provided.
ChkHr(jsonInput->SetNamedValue(jsonSubstitutionList->destinationKey.Get(), jsonSubstitutionList->defaultValue.Get()))
ChkHr(substituteValue->GetArray(&substituteArray))
ChkHr(JsonHelpers::SetNamedArray(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteArray))
ChkHr(substituteValue->GetObjectW(&substituteObject))
ChkHr(JsonHelpers::SetNamedObject(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteObject))
ChkHr(substituteValue->GetNumber(&substituteNumber))
ChkHr(JsonHelpers::SetNamedNumber(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteNumber))
ChkHr(substituteValue->GetString(substituteString.GetAddressOf()))
ChkHr(JsonHelpers::SetNamedString(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteString.Get()))
Failed to substitute value with key %s because we were given an invalid type!
ChkHr(ClientProcessUtils::GetCallingAppPackage(user.Get(), &parentPackage))
_CheckOptionalPackageIsValid
ChkHr(((HRESULT)0x803F6101L))
ChkHr(parentPackage->get_Dependencies(&dependencies))
ChkHr(dependencies->get_Size(&size))
ChkHr(dependencies->GetAt(index, &package))
ChkHr(package.As(&package4))
ChkHr(package4->get_IsOptional(&isOptional))
ChkHr(package->get_Id(&optionalPackageId))
ChkHr(optionalPackageId->get_FullName(packageFullName.GetAddressOf()))
ChkHr(optionalPackageId->get_FamilyName(packageFamilyName.GetAddressOf()))
ChkBool(found, ((HRESULT)0x80070005L))
Found matching package for %s
ChkHr(ClientProcessUtils::CheckMultipleUserSupport(usedMultiUser))
Windows::Services::Store::Internal::StoreContextServer::Initialize
ChkHr(IAPUtils::IsCallingProcessAppContainer(&_isAppContainer))
ChkAlloc(_releaseLicenseTimer)
ChkHr(ClientProcessUtils::GetCallingAppPackageFullName(_packageFullName.GetAddressOf()))
ChkHr(ClientProcessUtils::IsCallerERA(&_isERA))
Developer
Enterprise
Store
System
ClientProcessUtils::GetCallingAppPackage(_user.Get(), package.GetAddressOf())
package.As(&package4)
package4->get_SignatureKind(&signatureKind)
SignatureKind: %hs
ChkHr(CoCreateInstance( __uuidof(ApplicationLicenseManager), nullptr, (CLSCTX_INPROC_SERVER|CLSCTX_LOCAL_SERVER|CLSCTX_REMOTE_SERVER), __uuidof(**(&spLicenseManager)), IID_PPV_ARGS_Helper(&spLicenseManager)))
ChkHr(AsAgile(spLicenseManager.Get(), &_spLicenseManager))
spLicenseInstance->GetContentInfo(IID_PPV_ARGS(&spAppContentInfo))
ChkHr(hrInfo)
ChkHr(spAppContentInfo->GetCatalogId(&productStoreId))
ChkHr(_productStoreId.Set(productStoreId))
ChkHr(((HRESULT) ((RtlQueryWnfStateData( &initialChangeStamp, WNF_LM_CONTENT_LICENSE_CHANGED, _WnfLicenseStateChangeCallback, nullptr, nullptr)) | 0x10000000)))
ChkHr(((HRESULT) ((RtlSubscribeWnfStateChangeNotification( &_wnfLicenseChanged, WNF_LM_CONTENT_LICENSE_CHANGED, initialChangeStamp, _WnfLicenseStateChangeCallback, context, nullptr, 0, 0x00000001UL)) | 0x10000000)))
false
StoreContextServer::Initialize: packageFullName = %s, productStoreId = %s, isLicensed = %s, isAppContainer = %s
ChkHr(_optionalPackageLicenseWatcher.Initialize())
ChkHr(MakeAndInitialize<StoreContextCallerData>(ppCallerData, appWindowHandle))
Windows::Services::Store::Internal::StoreContextServer::CaptureStoreContextCallerData
ChkAlloc(cv.Get())
Windows::Services::Store::Internal::StoreContextServer::SendStoreRequest
ChkHr(JsonHelpers::ParseToJsonObject(WindowsGetStringRawBuffer(jsonDataString, nullptr), jsonData.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( pCallerData, UriHelperV7::StoreEndpointExtensionUrls, requestKind, cv.Get(), jsonData.Get(), statusCode, jsonResponse))
ChkHr(_LoadLicenseJson(spLicenseInstance))
Windows::Services::Store::Internal::StoreContextServer::GetOfflineLicenses
ChkHr(_cachedLicenseJson.CopyTo(result))
Windows::Services::Store::Internal::StoreContextServer::GetProducts
ChkHr(GetProductsByKinds(productKinds, storeIds, nullptr, cv.Get(), CatalogRelationshipType::SellableBy, productJson))
Windows::Services::Store::Internal::StoreContextServer::GetProduct
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetParentProduct, cv.Get(), nullptr, nullptr, productJsonString.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(productJsonString.GetRawBuffer(nullptr), &productResult))
Product
ChkHr(JsonHelpers::GetNamedObject(productResult, L"Product", &product))
ChkHr(JsonHelpers::CreateJsonArray(&products))
ChkHr(JsonHelpers::CreateJsonObject(&newResults))
ChkHr(JsonHelpers::SetNamedArray(newResults.Get(), L"Products", products))
ChkHr(JsonHelpers::Stringify(newResults, productJsonString.GetAddressOf()))
ChkHr(Vector<HSTRING>::Make(&bigIds))
ChkHr(bigIds->Append(_productStoreId.Get()))
SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetUserCollectionForParentProduct, cv.Get(), nullptr, nullptr, collectionsJsonString.GetAddressOf())
ChkHr(IAPUtils::CombineProductsAndCollectionsJson( productJsonString.Get(), collectionsJsonString.Get(), productJson))
ChkHr(productJsonString.CopyTo(productJson))
ChkBool(_productStoreId.IsValid(), ((HRESULT)0x803F6107L))
Windows::Services::Store::Internal::StoreContextServer::GetUserCollection
ChkHr(MakeAndInitialize<GetNextUserCollection>( &currentOperation, this, _productStoreId.Get(), productKinds, nullptr, maxPageSize, _user.Get(), cv.GetAnsi(), nullptr))
ChkHr(currentOperation->GetNextAsync(productJson, nextOperation))
Windows::Services::Store::Internal::StoreContextServer::ConsumeConsumable
ChkHr(Vector<HSTRING>::Make(&productKinds))
ChkHr(productKinds->Append(UnmanagedConsumableKind.Get()))
ChkHr(productKinds->Append(ConsumableKind.Get()))
ChkHr(Vector<HSTRING>::Make(&productIds))
ChkHr(productIds->Append(productId))
ChkHr(GetProductsByKinds( productKinds.Get(), productIds.Get(), nullptr, cv.Get(), CatalogRelationshipType::AddOnParent, productJsonString.GetAddressOf()))
ChkHr(_ParseGetProductsByKinds(productJsonString.Get(), products.GetAddressOf()))
ChkHr(products->get_Size(&productCount))
ChkBool(productCount > 0, HRESULT_FROM_WIN32(1168L))
ChkHr(products->GetAt(0, spStoreProduct.GetAddressOf()))
ChkHr(spStoreProduct->get_ProductKind(productKind.GetAddressOf()))
ChkBool(productKind.IsValid(), HRESULT_FROM_WIN32(1168L))
ChkBool((quantity > 0), ((HRESULT)0x80070057L))
ChkHr(JsonHelpers::CreateJsonObject(&jsonCollectionsParameters))
consumableProductId
ChkHr(JsonHelpers::SetNamedString(jsonCollectionsParameters, L"consumableProductId", productId))
trackingId
ChkHr(JsonHelpers::SetNamedString(jsonCollectionsParameters, L"trackingId", HStringReference(szTrackingId).Get()))
ChkHr(WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicket( 0, WinStoreAuth::AuthenticationEndpoint::OneStore, WinStoreAuth::PromptType::Silent, WinStoreAuth::AuthenticationInternal::UseXToken(), _user.Get(), authTicket.GetAddressOf(), providerType, spPrimaryAccountTokenRequestResult.GetAddressOf()))
quantity
ChkHr(JsonHelpers::SetNamedNumber(jsonCollectionsParameters, L"quantity", quantity))
ChkHr(spStoreProduct->get_IsInUserCollection(&isInUserCollection))
ChkHr(JsonHelpers::CreateJsonObject(&jsonResultObject))
NewQuantity
ChkHr(JsonHelpers::SetNamedNumber(jsonResultObject, L"NewQuantity", isInUserCollection ? 1 : 0))
ChkHr(JsonHelpers::Stringify(jsonResultObject, jsonResult))
ChkHr(((HRESULT)0x803F6109L))
ChkHr(HRESULT_FROM_WIN32(1168L))
ChkHr(JsonHelpers::SetNamedNumber(jsonResultObject, L"NewQuantity", 0))
ChkHr((static_cast<HRESULT>(__hr)))
Windows::Services::Store::Internal::StoreContextServer::GetConsumableBalanceRemaining
ChkHr(JsonHelpers::CreateJsonObject(&jsonCatalogParameters))
ChkHr(StringHelpers::Join( productKinds.Get(), false, productKindsWithCommas.GetAddressOf()))
productIdsWithCommas
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"productIdsWithCommas", productId))
productKinds
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"productKinds", productKindsWithCommas.Get()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetProductsFromParent, cv.Get(), jsonCatalogParameters.Get(), nullptr, productJsonString.GetAddressOf()))
ChkHr(_FilterProductsJson(productJsonString, CatalogRelationshipType::AddOnParent, _productStoreId.Get()))
ChkHr(JsonHelpers::ParseToJsonObject(productJsonString.GetRawBuffer(nullptr), &spResults))
ChkHr(spResults->GetNamedArray(HStringReference(L"Products").Get(), &storeProductArray))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(storeProductArray, &productCount))
ChkHr(storeProductArray->GetObjectAt(0, storeProductJson.GetAddressOf()))
ChkHr(MakeAndInitialize<StoreProduct>(&spStoreProduct,  storeProductJson))
ChkBool(StringHelpers::AreEqualCaseInsensitive(productKind.Get(), ConsumableKind.Get()) || StringHelpers::AreEqualCaseInsensitive(productKind.Get(), UnmanagedConsumableKind.Get()), HRESULT_FROM_WIN32(1168L))
ChkHr(JsonHelpers::CreateJsonArray(&productSkuIds))
ChkHr(JsonHelpers::CreateJsonObject(&productSku))
productId
ChkHr(JsonHelpers::SetNamedString(productSku, L"productId", productId))
ChkHr(JsonHelpers::AppendObject(productSkuIds, productSku))
productSkuIds
ChkHr(JsonHelpers::SetNamedArray(jsonCollectionsParameters, L"productSkuIds", productSkuIds))
ChkHr(IAPUtils::BuildEntitlementFiltersJSON(jsonEntitlementFilters, productKinds.Get()))
entitlementFilters
ChkHr(JsonHelpers::SetNamedArray(jsonCollectionsParameters, L"entitlementFilters", jsonEntitlementFilters))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetUserCollectionForProducts, cv.Get(), jsonCollectionsParameters.Get(), nullptr, jsonResult))
ChkBool((_productStoreId.IsValid() || ClientProcessUtils::IsDataMartApplication()), ((HRESULT)0x803F6107L))
Windows::Services::Store::Internal::StoreContextServer::GetCustomerPurchaseId
ChkHr(JsonHelpers::CreateJsonObject(&jsonParameters))
serviceTicket
ChkHr(JsonHelpers::SetNamedString(jsonParameters, L"serviceTicket", serviceTicket))
publisherUserId
ChkHr(JsonHelpers::SetNamedString(jsonParameters, L"publisherUserId", publisherUserId))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetCustomerPurchaseId, cv.Get(), jsonParameters.Get(), nullptr, jsonResponseString.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(jsonResponseString.GetRawBuffer(nullptr), &jsonResponse))
ChkHr(JsonHelpers::GetNamedString(jsonResponse, L"key", result))
Windows::Services::Store::Internal::StoreContextServer::GetCustomerCollectionsId
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetCustomerCollectionsId, cv.Get(), jsonParameters.Get(), nullptr, jsonResponseString.GetAddressOf()))
Windows::Services::Store::Internal::StoreContextServer::GetAssociatedStoreProducts
ChkHr(MakeAndInitialize<GetNextAssociatedStoreProducts>( &currentOperation, this, _productStoreId.Get(), productKinds, 0, maxItems, true, _user.Get(), cv.GetAnsi(), nullptr ))
ChkHr(currentOperation->GetNextAsync(productJsonResponse, nextOperation))
{idType}
ChkArg(pLinkUri)
Windows::Services::Store::Internal::StoreContextServer::GetLinkUri
ChkHr(UriHelper::GetUri(UriHelper::LinkUriFormat, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), pLinkUri))
ChkArg(pValue)
Windows::Services::Store::Internal::StoreContextServer::IsStoreProductInstalled
ChkBool(!WindowsIsStringEmpty(storeId), ((HRESULT)0x80070057L))
ChkHr(IAPUtils::ParseStoreId( storeId, productId.GetAddressOf(), nullptr, nullptr))
ChkBool(!WindowsIsStringEmpty(productId.Get()), ((HRESULT)0x80070057L))
ChkHr(Vector<HSTRING>::Make(&spIds))
ChkHr(spIds->Append(productId.Get()))
ChkHr(GetProductsByKinds( nullptr, spIds.Get(), nullptr, cv.Get(), CatalogRelationshipType::SellableBy, hydrateResult.GetAddressOf()))
ChkHr(_ParseGetProductsByKinds(hydrateResult.Get(), products.GetAddressOf()))
ChkHr(spStoreProduct->get_HasDigitalDownload(&hasDigitalDownload))
ChkHr(GetContentIdKeyIdsForProductIds(spIds.Get(), cv.Get(), &response))
ChkHr(response->get_Items(&items))
ChkHr(items->get_Size(&size))
ChkBool(size == 1, ((HRESULT)0x803F6107L))
ChkHr(items->GetAt(0, item.GetAddressOf()))
ChkHr(ActivateInstance(RuntimeClassWindowsXboxSystemInternalDeploymentAvailablePackageProvider.Get(), &packageProvider))
ChkHr(item->get_ContentIds(&contentIds))
ChkHr(contentIds->get_Size(&size))
ChkHr(hrIter)
ChkHr(spStoreProduct.As(&storeProductPrivate))
ChkHr(storeProductPrivate->get_PackageFamilyName(packageFamilyName.GetAddressOf()))
ChkBool(packageFamilyName.IsValid(), ((HRESULT)0x803F6107L))
ChkHr(GetActivationFactory( StateRepositoryUserClassId.Get(), &spUserStatics))
ChkHr(ClientProcessUtils::GetSidForUser(_user.Get(), userSid.GetAddressOf()))
ChkHr(spUserStatics->GetByUserSid(userSid.Get(), &spUser))
ChkHr(GetActivationFactory( StateRepositoryPackageClassId.Get(), &spPackageStatics))
ChkHr(spPackageStatics->ExistsByUserAndPackageFamilyName( spUser.Get(), packageFamilyName.Get(), pValue))
ChkHr(spPackageStatics->ExistsByPackageFamilyName( packageFamilyName.Get(), pValue))
This function is not supported, all calls should now use StoreContextServer::GetAppAndOptionalStorePackageUpdates
Windows::Services::Store::Internal::StoreContextServer::GetAppAndOptionalStorePackageUpdatesAsync
This function is not supported, all calls should now use StoreContextServer::RequestDownloadStorePackageUpdates
Windows::Services::Store::Internal::StoreContextServer::RequestDownloadStorePackageUpdatesAsync
This function is not supported, all calls should now use StoreContextServer::RequestDownloadAndInstallStorePackageUpdatesAsync
Windows::Services::Store::Internal::StoreContextServer::RequestDownloadAndInstallStorePackageUpdatesAsync
ChkHr(ClientProcessUtils::GetCallingAppName(appName.GetAddressOf()))
Windows::Services::Store::Internal::StoreContextServer::RequestDownloadAndInstallStorePackagesAsync
ChkHr(MakeAndInitialize<MessageDialogHelper>(&messageDialogHelper, appName.Get(), (HWND)0 ))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, this, _packageFullName.Get(), pStoreIds, cv.GetAnsi(), messageDialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<BackgroundTaskOperation>(&operation, _user.Get(), jsonRequest, cv.GetHStringReference().Get()))
Windows::Services::Store::Internal::StoreContextServer::BackgroundPurchaseDialogTask
ChkHr(BlockOnCompletionAndGetResults(operation.Get(), jsonResponse))
Windows::Services::Store::Internal::StoreContextServer::_LicenseChanged
hrInfo
spAppContentInfo->GetCatalogId(&productStoreId)
_productStoreId.Set(productStoreId)
ActivateInstance(RuntimeClassAppInstallManager.Get(), &_appInstallManager)
Windows::Services::Store::Internal::StoreContextServer::_GetAppInstallManager
Windows::Services::Store::Internal::StoreContextServer::_GetStoreQueueItems
ChkBool(_productStoreId.IsValid(), ((HRESULT)0x803F6108L))
ChkHr(appInstallManager->get_AppInstallItems(&appInstallItems))
ChkHr(appInstallManager.As(&appInstallManagerInternal))
ChkHr(appInstallManagerInternal->GetAppInstallItemsForUser(_user.Get(), &appInstallItems))
ChkHr(AgileVector<HSTRING>::Make(&productIdsInAppInstallQueue))
ChkHr(appInstallItem->get_ProductId(appInstallItemProductId.GetAddressOf()))
ChkHr(productIdsInAppInstallQueue->Append(appInstallItemProductId.Get()))
ChkHr(IAPUtils::ParseStoreId(storeId.Get(), productId.GetAddressOf(), nullptr , nullptr ))
ChkHr(hrInnerIter)
ChkHr(AgileVector<StoreQueueItem*>::Make(&queuedItemResults))
ChkHr(productIdsInAppInstallQueue->get_Size(&size))
ChkHr(AgileVector<HSTRING>::Make(&foundProductIds))
ChkHr(GetProductsByKinds( nullptr, productIdsInAppInstallQueue.Get(), nullptr, cv.Get(), CatalogRelationshipType::SellableBy, hydrateResult.GetAddressOf()))
ChkHr(products.As(&productsIVector))
ChkHr(product->get_StoreId(productId.GetAddressOf()))
ChkHr(foundProductIds->Append(productId.Get()))
ChkHr(foundProductIds.As(&foundProductIdsIVector))
ChkHr(MakeAndInitialize<StoreQueueItem>(&storeQueueItem, appInstallItem.Get(), cv.GetAnsi()))
ChkHr(queuedItemResults->Append(storeQueueItem.Get()))
ChkHr(queuedItemResults->GetView(queuedItems))
Windows::Services::Store::Internal::StoreContextServer::_RequestPurchase
ChkHr(_RetrieveHWNDFromCallerData(pCallerData, &hwnd))
ChkHr(MakeAndInitialize<PurchaseOperation>( &purchaseOperation, _packageFullName.Get(), _productStoreId.Get(), storeId, storePurchaseProperties, overrideJsonRequest, _user.Get(), cv.GetHStringReference().Get(), hwnd, _hasPreviewCapability, invokedApi ))
ChkHr(BlockOnCompletionAndGetResults(purchaseOperation.Get(), jsonResponse))
ChkHr(_CheckOptionalPackageIsValid(optionalPackageName, _user))
Windows::Services::Store::Internal::StoreContextServer::AcquireStoreLicenseForOptionalPackage
ChkHr(ClientProcessUtils::GetCallerTokenFromComCall(&hToken))
ChkHr(ResultFromLastError())
ChkHr(ClientProcessUtils::GetSidForUser(_user.Get(), sidString.GetAddressOf()))
ChkHr(RpcHelpers::GetRpcHandle(&rpcHandle))
ChkHr(hr)
ChkHr(HRESULT_FROM_RPC(hr))
ChkHr(_optionalPackageLicenseWatcher.AddOptionalPackageToWatch(optionalPackageName, pOptionalPackageLicense))
ChkHr(ComposeLegacyXboxContentIdFromInstalledContentId(WindowsGetStringRawBuffer(packageIdentifier, nullptr), contentId.addressof()))
Windows::Services::Store::Internal::StoreContextServer::GetPreviewLicenseResultForPackage
ChkHr(((HRESULT)0x80004001L))
ChkHr(GetRequiredEkbFromContentId(contentId.get(), keyId.addressof()))
ChkHr(Vector<HSTRING>::Make(&contentIds))
ChkHr(contentIds->Append(packageIdentifier))
ChkHr(Vector<HSTRING>::Make(&keyIds))
ChkHr(keyIds->Append(HStringReference(keyId.get()).Get()))
ChkHr(contentIds->GetView(&contentIdsVectorView))
ChkHr(keyIds->GetView(&keyIdsVectorView))
ChkHr(licenseManager->GetSatisfactionInfos( contentIdsVectorView.Get(), keyIdsVectorView.Get(), &licenseSatisfactionResult))
ChkHr(_CheckOptionalPackageIsValid(packageIdentifier, _user))
ChkHr(GetContentId(WindowsGetStringRawBuffer(packageIdentifier, nullptr), CPT_UNIVERSAL_APP, &guidContentId))
ChkHr(GuidToStringWithoutBraces(&guidContentId, szGuid))
ChkHr(contentIds->Append(HStringReference(szGuid).Get()))
ChkHr(licenseManager->GetSatisfactionInfos( contentIdsVectorView.Get(), nullptr, &licenseSatisfactionResult))
ChkHr(licenseSatisfactionResult->get_ExtendedError(&extendedError))
ChkHr(extendedError)
ChkHr(licenseSatisfactionResult->get_LicenseSatisfactionInfos(&infos))
ChkHr(infos->get_Size(&sizeResult))
ChkBool(sizeResult == 1, ((HRESULT)0x803F6107L))
ChkHr(infos.As(&infosIterable))
ChkHr(infosIterable->First(&infosIterator))
ChkHr(infosIterator->get_HasCurrent(&hasCurrent))
ChkHr(infosIterator->get_Current(&keyValuePair))
ChkHr(keyValuePair->get_Value(&info))
ChkHr(info->get_IsSatisfied(&isSatisfied))
ChkHr(JsonHelpers::CreateJsonObject(&previewResultJson))
ChkHr(licenseSatisfactionResult.As(&licenseSatisfactionResultInternal))
licensableSku
ChkHr(JsonHelpers::SetNamedString(previewResultJson, L"licensableSku", licensableSku.Get()))
Preview license response did not have skuId. (CV:%hs)
ChkHr(((HRESULT)0x803F6108L))
licensableStatus
ChkHr(JsonHelpers::SetNamedNumber(previewResultJson, L"licensableStatus", licenseQueryStatus))
ChkHr(JsonHelpers::Stringify(previewResultJson, licenseSatisfactionResultJson))
ChkHr(IAPUtils::ParseStoreId( productStoreId, productId.GetAddressOf(), nullptr, nullptr))
Windows::Services::Store::Internal::StoreContextServer::GetPreviewLicenseResultForStoreId
ChkHr(productIds->Append(productId.Get()))
ChkHr(productIds.As(&productIdsIter))
ChkHr(GetContentIdKeyIdsForProductIds( productIdsIter.Get(), cv.Get(), &contentIdResponse))
ChkHr(contentIdResponse->get_Items(&items))
ChkHr(items->get_Size(&itemCount))
ChkBool(itemCount != 0, ((HRESULT)0x803F6107L))
ChkHr(items->GetAt(0, &contentIdKeyIdItem))
ChkHr(contentIdKeyIdItem->get_ContentIds(&contentIds))
ChkHr(contentIdKeyIdItem->get_KeyIds(&keyIds))
ChkHr(contentIds->get_Size(&sizeOfContentIds))
ChkHr(licenseManager->GetSatisfactionInfos( contentIds.Get(), keyIds.Get(), &licenseSatisfactionResult))
ChkBool(sizeResult > 0, ((HRESULT)0x803F6107L))
Preview license response did not have skuId. (CV = %hs)
There were items in the collection, however iterator is pointing at the end of the collection...
ChkHr(_optionalPackageLicenseWatcher.RemoveOptionalPackageToWatch(optionalPackageName))
Windows::Services::Store::Internal::StoreContextServer::ReleaseStoreLicenseForOptionalPackage
ChkHr(HRESULT_FROM_RPC(OptionalPackageRundownNotification( rpcHandle, appPfn.GetRawBuffer(nullptr), sessionId, sidString.GetRawBuffer(nullptr), WindowsGetStringRawBuffer(optionalPackageName, nullptr))))
ChkHr(_spLicenseManager.As(&appLicenseManager2))
Windows::Services::Store::Internal::StoreContextServer::GetProductForPackage
ChkHr(AllowImpersonation(appLicenseManager2.Get()))
ChkHr(appLicenseManager2->GetOfflineLicenseForInstalledPackage( WindowsGetStringRawBuffer(packageFullName, nullptr), AppContentType::AppType_Unknown, license.GetAddressOf()))
ChkHr(license->GetContentInfo(__uuidof(**(contentInfo.GetAddressOf())), IID_PPV_ARGS_Helper(contentInfo.GetAddressOf())))
ChkHr(contentInfo->GetCatalogId(&storeIdFromLicense))
ChkHr(Vector<HSTRING>::Make(&storeIds))
ChkHr(storeIds->Append(HStringReference(storeIdFromLicense).Get()))
ChkHr(GetProducts(productKinds, storeIds.Get(), cv.GetHStringReference().Get(), productJson))
ChkHr(VerifyCapability(StoreConfigurationCapability.Get()))
Windows::Services::Store::Internal::StoreContextServer::FocusOnWindow
ChkHr(ClientProcessUtils::GetCallingAppPackage(_user.Get(), spAppmodelPackage.GetAddressOf()))
Windows::Services::Store::Internal::StoreContextServer::GetAppAndOptionalStorePackageUpdates
ChkHr(Vector<Package*>::Make(&appmodelPackages))
ChkHr(appmodelPackages->Append(spAppmodelPackage.Get()))
ChkHr(spAppmodelPackage->get_Id(&packageId))
ChkHr(packageId->get_FamilyName(packageFamilyName.GetAddressOf()))
Adding calling package = %s for productId = %s
ChkHr(spAppmodelPackage->get_Dependencies(supplementalPackages.GetAddressOf()))
ChkHr(supplementalPackages->get_Size(&supplementalPackagesSize))
ChkHr(supplementalPackages->GetAt(i, supplement.GetAddressOf()))
ChkHr(supplement.As(&supplement4))
ChkHr(supplement4->get_IsOptional(&isOptional))
ChkHr(appmodelPackages->Append(supplement.Get()))
ChkHr(supplement->get_Id(packageId.ReleaseAndGetAddressOf()))
ChkHr(packageId->get_FamilyName(packageFamilyName.ReleaseAndGetAddressOf()))
Adding optional package = %s
ChkHr(((HRESULT)0x8000FFFFL))
ChkHr(appmodelPackages->GetView(appModelPackagesVV.GetAddressOf()))
ChkHr(appInstallManagerInternal->SearchForUpdatesWithPausedAddAsync( _user.Get(), appModelPackagesVV.Get(), true , cv.GetHStringReference().Get(), true, appInstallItemsOp.GetAddressOf()))
ChkHr(BlockOnCompletionAndGetResults(appInstallItemsOp.Get(), &appInstallItems))
ChkHr(AgileVector<StorePackageUpdate*>::Make(&updates))
ChkHr(appInstallItems->get_Size(&size))
ChkHr(appInstallItems->GetAt(index, &item))
ChkHr(item->get_PackageFamilyName(packageFamilyName.ReleaseAndGetAddressOf()))
ChkHr(appmodelPackages->get_Size(&packagesSize))
ChkHr(appmodelPackages->GetAt(packagesIndex, &package))
ChkHr(MakeAndInitialize<StoreQueueItem>(&storeQueueItem, item.Get(), cv.GetAnsi()))
ChkHr(MakeAndInitialize<StorePackageUpdate>(&storePackageUpdate, package.Get(), storeQueueItem.Get()))
ChkHr(updates->Append(storePackageUpdate.Get()))
Found update for package = %s
ChkHr(updates->GetView(queuedItems))
Windows::Services::Store::Internal::StoreContextServer::CanSilentlyDownloadStorePackageUpdates
ChkHr(appInstallManager->get_AutoUpdateSetting(&autoUpdates))
ChkHr(_IsNetworkMetered(&onMeteredNetwork))
ChkHr(CanSilentlyDownloadStorePackageUpdates(cv.GetHStringReference().Get(), &canSilentlyDownload))
Windows::Services::Store::Internal::StoreContextServer::DownloadStorePackageUpdates
Prompt required, but not possible, cancel - canSilentlyDownload = %s, install = %s
ChkHr(pMessageDialogHelper->ShowDialogWithResultsAsync( message, nullptr, messageDialogOperation.GetAddressOf()))
ChkHr(BlockOnCompletionAndGetResults(messageDialogOperation.Get(), &command))
User content required, cancel = %s, canSilentlyDownload = %s, install = %s
ChkHr(AgileVector<StoreQueueItem*>::Make(&queueItems))
ChkHr(queueItems->Append(storeQueueItem.Get()))
ChkHr(storeQueueItem->get_ProductId(productId.GetAddressOf()))
ChkHr(appInstallManager.As(&appInstallManager2))
ResumeWithFlags called for productId = %s, setFlags = %d, resetFlags = %d
ChkHr(queueItems->GetView(queuedItems))
Windows::Services::Store::Internal::StoreContextServer::GetProductsWithOptions
ChkHr(GetProductsByKinds(productKinds, storeIds, storeProductOptions, cv.Get(), CatalogRelationshipType::SellableBy, productJson))
Windows::Services::Store::Internal::StoreContextServer::DownloadStorePackages
ChkHr(IAPUtils::ParseStoreId( storeId.Get(), productId.GetAddressOf(), nullptr, nullptr))
ChkHr(Vector<HSTRING>::Make(&licensedProducts))
ChkHr(contentIds->get_Size(&contentIdsSize))
ChkHr(item->get_KeyIds(&keyIds))
ChkHr(item->get_ProductId(productId.GetAddressOf()))
ChkHr(licensedProducts->Append(productId.Get()))
ChkHr(hrInfosIter)
ChkHr(licensedProducts->get_Size(&size))
ChkHr(((HRESULT)0x80070005L))
ChkHr(messageDialogHelper->ShowDialogWithResultsAsync( onMeteredNetwork ? ((HRESULT)0x803F6206L) : ((HRESULT)0x803F6203L), nullptr, messageDialogOperation.GetAddressOf()))
User content required, cancel = %s
ChkHr(appInstallManager.As(&appInstallManager5))
ChkHr(licensedProducts.As(&products))
ChkHr(ActivateInstance(RuntimeClassAppInstallOptions.Get(), &appInstallOptions))
ChkHr(installOptions->get_AllowForcedAppRestart(&allowForcedAppRestart))
ChkHr(appInstallOptions->put_AllowForcedAppRestart(allowForcedAppRestart))
ChkHr(appInstallManager5->StartProductInstallWithOptionsForUserAsync( _user.Get(), productId.Get(), nullptr, nullptr, true, downloadOnAnyNetwork, cv.GetHStringReference().Get(), appInstallOptions.Get(), &asyncOp))
ChkHr(BlockOnCompletionAndGetResults(asyncOp.Get(), &installItemVector))
ChkHr(installItemVector->get_Size(&installVectorSize))
ChkHr(MakeAndInitialize<StoreQueueItem>(&queueItem, installItem.Get(), cv.GetAnsi()))
ChkHr(queueItems->Append(queueItem.Get()))
ChkHr(hrItemIter)
ChkHr(hrProductsIter)
Windows::Services::Store::Internal::StoreContextServer::UninstallStorePackage
ChkBool(productId.IsValid(), ((HRESULT)0x80070057L))
ChkHr(Vector<HSTRING>::Make(&ids))
ChkHr(ids->Append(productId.Get()))
ChkHr(GetProductsByKinds( nullptr, ids.Get(), nullptr, cv.Get(), CatalogRelationshipType::All, hydrateResult.GetAddressOf()))
ChkHr(products->get_Size(&productsLength))
ChkBool(productsLength > 0, HRESULT_FROM_WIN32(1168L))
ChkHr(GetContentIdKeyIdsForProductIds(ids.Get(), cv.Get(), &response))
ChkHr(contentId.CopyTo(packageFamilyNameToUninstall.GetAddressOf()))
ChkHr(storeProductPrivate->get_PackageFamilyName(packageFamilyNameToUninstall.GetAddressOf()))
ChkHr(packageFamilyNameToUninstall.Set(packageFamilyName))
ChkBool(packageFamilyNameToUninstall.IsValid(), ((HRESULT)0x803F6107L))
ChkHr(packageProvider->FindAvailablePackage(packageFamilyNameToUninstall.Get(), AvailablePackageIdentityType_ContentId, &package))
ChkHr(package.As(&package2))
ChkHr(package2->get_PackageFullName(packageFullNameToUninstall.GetAddressOf()))
ChkHr(GetActivationFactory(RuntimeClassWindowsXboxApplicationModelStateInternalStateHelperCache.Get(), cacheStatics.GetAddressOf()))
ChkHr(cacheStatics->GetPackageByFullName(packageFullNameToUninstall.Get(), internalPackage.GetAddressOf()))
ChkHr(internalPackage->get_DisplayName(displayName.GetAddressOf()))
ChkHr(CoCreateInstance(__uuidof(XboxDevelopmentPackageManager), nullptr, CLSCTX_LOCAL_SERVER, __uuidof(**(&packageManager)), IID_PPV_ARGS_Helper(&packageManager)))
ChkHr(packageManager->UninstallPackage(packageFullNameToUninstall.GetRawBuffer(nullptr)))
ChkHr(ActivateInstance(RuntimeClassWindowsManagementDeploymentPackageManager.Get(), &packageManager))
ChkHr(packageManager->FindPackagesByUserSecurityIdPackageFamilyName(userSid.Get(), packageFamilyNameToUninstall.Get(), packages.GetAddressOf()))
ChkHr(packages->First(&packagesIterator))
ChkHr(packagesIterator->get_HasCurrent(&hasCurrent))
ChkHr(packagesIterator->get_Current(&package))
ChkHr(package4->get_SignatureKind(&signatureKind))
ChkHr(package->get_Id(&packageId))
ChkHr(packageId->get_FullName(packageFullName.GetAddressOf()))
ChkHr(package4->get_IsOptional(&isOptionalPackage))
ChkHr(ClientProcessUtils::GetCallingAppPackage(_user.Get(), callingPackage.GetAddressOf()))
ChkHr(callingPackage->get_Dependencies(dependencies.GetAddressOf()))
ChkHr(dependencies.As(&dependenciesIteratable))
ChkHr(dependenciesIteratable->First(&dependenciesIterator))
ChkHr(dependenciesIterator->get_HasCurrent(&hasCurrentDependencies))
ChkHr(dependenciesIterator->get_Current(&dependentPackage))
ChkHr(dependentPackage.As(&dependentPackage4))
ChkHr(dependentPackage4->get_SignatureKind(&signatureKindDependent))
ChkHr(dependentPackage->get_Id(&dependentPackageId))
ChkHr(dependentPackageId->get_FullName(dependentPackageFullName.GetAddressOf()))
ChkHr(dependenciesIterator->MoveNext(&hasCurrentDependencies))
ChkHr(packageId->get_Name(packageName.GetAddressOf()))
ChkHr(packageManager->RemovePackageAsync(packageFullName.Get(), &deploymentOperation))
ChkHr(BlockOnCompletionAndGetResults(deploymentOperation.Get(), &deploymentResult))
ChkHr(deploymentResult->get_ExtendedErrorCode(&deploymentResultCode))
ChkHr(deploymentResultCode)
Trying to remove package %s that isn't related to the calling app
ChkHr(((HRESULT)0x803F610EL))
Trying to remove non-store package %s
ChkHr(((HRESULT)0x803F610DL))
ChkHr(packagesIterator->MoveNext(&hasCurrent))
Trying to remove package %s that isn't installed
ChkHr(((HRESULT)0x803F6103L))
Windows::Services::Store::Internal::StoreContextServer::SetInstallOrderForAssociatedStoreQueueItems
ChkHr(appInstallManager5->SetQueueOrder(cvIn, productIds))
ChkHr(dialogHelper->put_ContextString(packageDisplayName.Get()))
Windows::Services::Store::Internal::StoreContextServer::UserConsentedToUninstall
ChkHr(dialogHelper->ShowDialogWithResultsAsync( ((HRESULT)0x803F6209L), nullptr, messageDialogOperation.GetAddressOf()))
User consent required, cancel = %s
Unable to show consent dialog
ChkHr(UriHelperV7::GetIndexedEntry(slsUri, requestKind, entry.GetAddressOf()))
Windows::Services::Store::Internal::StoreContextServer::SendStoreRequestWithUris
URIBufferMaxSize
DoPost
AuthType
ForcePrompt
UsePromptSettings
BodyBufferMaxSize
InvokePurchaseFlow
UseBackgroundTask
AnonymousRequest
RequiresCapability
RequireAuthToken
RequireValidLicense
RefreshLicenses
ForceRetailSandbox
DoDelete
DoPut
DoHead
DoOptions
DoPatch
UserTokenTypes
BodyForcePrompt
BodyPromptSettings
OmitAuthTokenPrefix
UseAuthIfAvailable
SkipCapabilityCheckIfERA
FallbackToDeviceAuth
ChkHr(JsonParser::ParseJSONToObject( entry, &requestParams, responseTable))
ChkHr(VerifyCapability(requestParams.requiredCapability.Get()))
ChkHr(IAPUtils::GetMarket(market.GetAddressOf()))
ChkHr(IAPUtils::GetLanguagesString(languages.GetAddressOf()))
ChkHr(IAPUtils::GetLanguage(language.GetAddressOf()))
ChkHr(IAPUtils::GetDeviceIds(moid, oemid, scmid))
ChkHr(UriHelperV7::GetRawString(UriHelperV7::DeviceFamily, deviceFamily.GetAddressOf()))
ChkHr(JsonHelpers::CreateJsonObject(&jsonInternalParameters))
StoreId
ChkHr(JsonHelpers::GetNamedString(jsonParameters, L"StoreId", _parentStoreIdFromParam.GetAddressOf()))
parentProductId
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"parentProductId", _parentStoreIdFromParam.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"parentProductId", _productStoreId.GetRawBuffer(nullptr)))
market
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"market", market.GetRawBuffer(nullptr)))
languages
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"languages", languages.GetRawBuffer(nullptr)))
deviceMoid
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceMoid", moid.GetRawBuffer(nullptr)))
deviceOemid
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceOemid", oemid.GetRawBuffer(nullptr)))
deviceScmid
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceScmid", scmid.GetRawBuffer(nullptr)))
deviceFamily
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceFamily", deviceFamily.GetRawBuffer(nullptr)))
locale
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"locale", language.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"PFN", _packageFullName.GetRawBuffer(nullptr)))
ChkHr(IAPUtils::ConstructSlsUri(requestParams.uriToFormat.Get(), requestParams.cchUriMax, jsonInternalParameters, uri.GetAddressOf()))
AuthToken
ChkHr(JsonHelpers::GetNamedString(jsonParameters, L"AuthToken", authToken.GetAddressOf()))
ChkBool(pCallerData != nullptr, ((HRESULT)0x803F610BL))
ChkHr(WinStoreAuth::AuthenticationInternal::GetDeviceTicketWithBroker( true, authToken.GetAddressOf()))
ChkHr(hrGoldenTicket)
requestParams.authType == tickets[0].m_providerType
ChkHr(spWebTokenRequestResults->get_Size(&resultsCount))
ChkHr(spWebTokenRequestResults->GetAt(0, it.GetAddressOf()))
ChkHr(it.As(&spWebTokenRequestResult))
ChkBool(ticketCount == 1, ((HRESULT)0x803F6107L))
ChkHr(WinStoreAuth::AuthenticationInternal::PrefixTicketForMDollar((WinStoreAuth::AccountProviderType)requestParams.authType, authToken.Get(), strAuthTokenPrefixed.GetAddressOf()))
ChkHr(strAuthTokenPrefixed.CopyTo(authToken.ReleaseAndGetAddressOf()))
BodyTemplate
ChkHr(_ConstructRequestBody( jsonBody, _user, static_cast<WinStoreAuth::AccountProviderType>(requestParams.userTokenTypes), userAuthPromptType, hwnd, requestParams.forceRetailSandbox, jsonInternalParameters))
ChkHr(JsonHelpers::Stringify(entry, entryJson.GetAddressOf()))
Entry requires a Body Template: %s
ChkHr(((HRESULT)0x803F6107L))
Entry cannot have a Body Template: %s
ChkHr(JsonHelpers::Stringify(jsonBody.Get(), body.GetAddressOf()))
ChkBool(pCallerData != nullptr, HRESULT_FROM_WIN32(1400L))
ChkHr(_RequestPurchase( pCallerData, nullptr, nullptr, body.Get(), cv.GetHStringReference().Get(), InvokedApi_SendStoreRequest.Get(), jsonResponse))
ChkHr(BackgroundPurchaseDialogTask(body.Get(), cv.GetHStringReference().Get(), jsonResponse))
ChkHr(IAPUtils::CreateHttpClient(httpClient.GetAddressOf()))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader( authToken.Get(), false, httpClient.GetAddressOf()))
ChkHr(IAPUtils::CreateHttpClientWithAuthIfAvailable(_user.Get(), &httpClient, requestParams.forceRetailSandbox))
ChkHr(hrOperation)
This request kind (%d) is invalid or not supported on this release. Request Entry: %s
Windows::Services::Store::Internal::StoreContextServer::GetProductsByKinds
ChkHr(StringHelpers::Join( storeIds, false, storeIdsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join( productKinds, false, productKindsWithCommas.GetAddressOf()))
ChkHr(storeProductOptions->get_ActionFilters(&actionFilters))
ChkHr(actionFilters->get_Size(&filterSize))
ChkBool(filterSize < 2, ((HRESULT)0x80070057L))
ChkHr(actionFilters->GetAt(0, actionFilter.GetAddressOf()))
actionFilter
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"actionFilter", actionFilter.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"productIdsWithCommas", storeIdsWithCommas.Get()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, uriId, cv, jsonCatalogParameters.Get(), nullptr, productJsonString.GetAddressOf()))
ChkHr(_FilterProductsJson(productJsonString, relationshipFilter, _productStoreId.Get()))
ChkHr(JsonHelpers::CreateJsonArray(&jsonProductSkuIds))
ChkHr(JsonHelpers::SetNamedArray(jsonCollectionsParameters, L"productSkuIds", jsonProductSkuIds))
ChkHr(JsonHelpers::SetNamedString(productSku, L"productId", productId.Get()))
ChkHr(JsonHelpers::AppendObject(jsonProductSkuIds, productSku))
ChkHr(IAPUtils::BuildEntitlementFiltersJSON(jsonEntitlementFilters, productKinds))
SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetUserCollectionForProducts, cv, jsonCollectionsParameters.Get(), nullptr, collectionsJsonString.GetAddressOf())
ChkHr(JsonHelpers::CreateJsonObject(&request))
Windows::Services::Store::Internal::StoreContextServer::GetContentIdKeyIdsForProductIds
ChkHr(StringHelpers::Join(productIds, false, productIdsString.GetAddressOf()))
productIds
ChkHr(JsonHelpers::SetNamedString(request, L"productIds", productIdsString.Get()))
ChkHr(JsonHelpers::SetNamedString(request, L"AuthToken", HStringReference(L"").Get()))
ChkHr(JsonHelpers::Stringify(request, requestJson.GetAddressOf()))
ChkHr(SendStoreRequest( nullptr, _hasPreviewCapability ? 14 : 13, cv.GetHStringReference().Get(), requestJson.Get(), &status, responseJson.GetAddressOf()))
ChkHr(MakeAndInitialize<StoreContentIdKeyIdResponse>(response, responseJson.Get()))
ChkHr(IAPUtils::SetMaxDateTime(&expirationDate))
Windows::Services::Store::Internal::StoreContextServer::_LoadLicenseJson
ChkHr(IAPUtils::GetTimeSpanDifference(expirationDate, &trialTimeRemaining))
_ParseLicenseInstance( spLicenseInstance, isActive, isTrial, isTrialOwnedByThisUser, trialUniqueId.GetAddressOf(), isDiscLicense, expirationDate, trialTimeRemaining, package)
ChkHr(_MakeDefaultLicenseResponse(package))
isActive
ChkHr(JsonHelpers::SetNamedBool(package, L"isActive", !!isActive))
isTrial
ChkHr(JsonHelpers::SetNamedBool(package, L"isTrial", !!isTrial))
isTrialOwnedByThisUser
ChkHr(JsonHelpers::SetNamedBool(package, L"isTrialOwnedByThisUser", isTrialOwnedByThisUser))
trialUniqueId
ChkHr(JsonHelpers::SetNamedString(package, L"trialUniqueId", trialUniqueId.Get()))
isDiscLicense
ChkHr(JsonHelpers::SetNamedBool(package, L"isDiscLicense", isDiscLicense))
ChkHr(JsonHelpers::SetNamedDateTime(package, L"expiration", expirationDate))
trialTimeRemaining
ChkHr(JsonHelpers::SetNamedTimeSpan(package, L"trialTimeRemaining", trialTimeRemaining))
ChkHr(JsonHelpers::Stringify(package, _cachedLicenseJson.GetAddressOf()))
ChkBool(spLicenseInstance != nullptr, ((HRESULT)0x803F6107L))
Windows::Services::Store::Internal::StoreContextServer::_ParseLicenseInstance
ChkHr(spLicenseInstance->GetIsTrial(&isTrial))
ChkHr(spLicenseInstance->GetLicenseGrantReason(&grantReason))
ChkHr(spLicenseInstance->GetExpirationDateTime(&ftExpirationTime))
ChkHr(IAPUtils::SetDateTime(ftExpirationTime, &expirationDate))
spLicenseInstance->GetContentInfo(IID_PPV_ARGS(spApplicationContentInfo.GetAddressOf()))
ChkHr(spApplicationContentInfo->GetUserId(&lmUserId))
FALSE
Lookup failed for user's ownership of the trial. isTrialOwnedByThisUser=%s
ChkHr(spApplicationContentInfo->GetEntitlementId(&entitlementId))
ChkHr(hstrEntitlementId.Set(entitlementId))
ChkHr(spApplicationContentInfo->GetTrialTimeRemaining(&ftTrialTimeRemaining))
ChkHr(IAPUtils::SetDateTime(ftTrialTimeRemaining, &dtTrialTimeRemaining))
ChkHr(IAPUtils::GetTimeSpanDifference(dtTrialTimeRemaining, &trialTimeRemaining))
ChkHr(spApplicationContentInfo->GetCustomPolicy(&customPolicyLengthInBytes, reinterpret_cast<BYTE**>(&customPolicyEncoded)))
ChkHr(customPolicyDecoded.Set(customPolicyEncoded))
ChkHr(StringHelpers::DecodeBase64( HStringReference(customPolicyEncoded.GetPtr(), customPolicyLength).Get(), customPolicyDecoded.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(customPolicyDecoded.GetRawBuffer(nullptr), &customPolicyObject))
packages
ChkHr(JsonHelpers::GetNamedArray(customPolicyObject, L"packages", &packages))
ChkHr(packages->GetObjectAt(0, &package))
skuId
ChkHr(JsonHelpers::GetNamedString(package, L"skuId", _skuId.GetAddressOf()))
version
ChkHr(JsonHelpers::GetNamedInteger(customPolicyObject, L"version", &version))
The license for the application is missing information needed to perform Store operations. If you side-loaded the application, uninstall the application and download it from the Store first to get the Store license associated with the application.
productAddOns
ChkHr(JsonHelpers::GetNamedArray(package, L"productAddOns", &productAddOns))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(productAddOns, &addOnSize))
ChkHr(productAddOns->GetObjectAt(i, &productAddOn))
ChkHr(JsonHelpers::GetNamedString(productAddOn, L"productId", addOnProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(productAddOn, L"skuId", addOnSkuId.GetAddressOf()))
ChkHr(spApplicationContentInfo->GetAddOnCount(&nCount))
ChkHr(spApplicationContentInfo->GetAddOnAtPosition(lProduct, spAppAddOn.GetAddressOf()))
ChkHr(spAppAddOn->GetCatalogId(&licenseAddOnCatalogId))
ChkHr(spAppAddOn->GetSKUId(&licenseAddOnSkuId))
ChkHr(spAppAddOn->GetExpireTime(&ftAddOnExpirationTime))
ChkHr(IAPUtils::SetDateTime(ftAddOnExpirationTime, &addOnExpirationTime))
ChkHr(JsonHelpers::SetNamedDateTime(productAddOn, L"expiration", addOnExpirationTime))
ChkHr(JsonHelpers::SetNamedBool(productAddOn, L"isActive", true))
ChkHr(JsonHelpers::CreateJsonObject(&package))
Windows::Services::Store::Internal::StoreContextServer::_MakeDefaultLicenseResponse
ChkHr(JsonHelpers::CreateJsonArray(&addOns))
ChkHr(JsonHelpers::SetNamedArray(package, L"productAddOns", addOns))
ChkHr(JsonHelpers::SetNamedString(package, L"productId", _productStoreId.Get()))
ChkHr(JsonHelpers::SetNamedString(package, L"skuId", _skuId.Get()))
spLicenseManager->RefreshLicenses(RefreshPolicy_NetworkStatusOnline)
Windows::Services::Store::Internal::StoreContextServer::_ForceRefreshLicensesProc
ChkHr(IAPUtils::ParseStoreId(data->storeIdToRefresh.Get(), productId.GetAddressOf(), nullptr, nullptr))
ChkHr(data->pThis->GetContentIdKeyIdsForProductIds(spIds.Get(), cv.Get(), &response))
ChkHr(items->GetAt(index, item.GetAddressOf()))
ChkHr(contentIds->get_Size(&contentIdSize))
ChkHr(contentIds->GetAt(contentIdIndex, contentId.GetAddressOf()))
ChkHr(spLicenseManager->EnsureLicenseForApplicationDeployment(contentId.GetRawBuffer(nullptr), nullptr , nullptr ))
ChkHr(pCallerData->QueryInterface(__uuidof(**(&spCallerDataPrivate)), IID_PPV_ARGS_Helper(&spCallerDataPrivate)))
Windows::Services::Store::Internal::StoreContextServer::_RetrieveHWNDFromCallerData
ChkHr(spCallerDataPrivate->GetAppWindowHandle(&appWindowHandle))
ChkHr(HRESULT_FROM_WIN32(1400L))
WaitForCompletion
onecore\internal\shell\inc\asyncoperationhelper.h
(((HRESULT)(hr)) < 0)
jsonValue->GetNumber(&result)
Windows::Services::Store::JsonParser::ParseInteger
Windows.Foundation.IAsyncOperationWithProgress`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreProduct>
jsonValue->GetBoolean(&value)
Windows::Services::Store::JsonParser::ParseBoolean
=AWindows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct HSTRING__ *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct HSTRING__ *>,0>::DoWorkStub
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreQueueItem>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Package>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Package>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StorePackageUpdate>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>
Windows::Services::Store::AsyncOperationWithProgressBase<struct Windows::Foundation::IAsyncOperationWithProgress<class Windows::Services::Store::StorePackageUpdateResult *,struct Windows::Services::Store::StorePackageUpdateStatus>,struct Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<class Windows::Services::Store::StorePackageUpdateResult *,struct Windows::Services::Store::StorePackageUpdateStatus>,struct Windows::Foundation::IAsyncOperationProgressHandler<class Windows::Services::Store::StorePackageUpdateResult *,struct Windows::Services::Store::StorePackageUpdateStatus>,0>::DoWorkStub
onecoreuap\enduser\winstore\licensing\winrt\lib\AsyncBaseWithProgress.h
Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.Internal.StoreContentIdKeyIdItem>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.Internal.StoreContentIdKeyIdItem>
Vector<T*>::Make(vector.GetAddressOf())
jsonArray->GetObjectAt(i, jsonElement.GetAddressOf())
_productId.CopyTo(value)
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::get_ProductId
_contentIds->GetView(value)
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::get_ContentIds
_keyIds->GetView(value)
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::get_KeyIds
jsonValue->GetString(string.GetAddressOf())
Windows::Services::Store::JsonParser::ParseString
ContentIds
KeyIds
Vector<HSTRING>::Make(vector.GetAddressOf())
JsonHelpers::GetArraySizeFromJsonArray(jsonArray, &count)
E_NOT_SET
jsonArray->GetStringAt(i, text.GetAddressOf())
vector->Append(text.Get())
Windows::Services::Store::JsonParser::ParseArrayToVectorOfHSTRING
ChkHr(JsonParser::ParseJSONToObject( json, this, itemTable))
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\StoreContentIdKeyIdItem.h
MakeAndInitialize<T>(&image, DEBUG_PARSER_PARAMETERS_ARGS jsonElement)
vector->Append(image.Get())
Windows::Services::Store::JsonParser::ParseArrayToVector
ChkHr(JsonParser::ParseJSONStringToObject( jsonString, this, itemsTable))
Windows::Services::Store::Internal::StoreContentIdKeyIdResponse::RuntimeClassInitialize
Items
MYF{m
0Yh"C
Oc7Wa
V:)NM
Json document is missing a required field.
ChkHr(ParseJSONToObject( jsonObject, pObj, entry.pChildren))
ChkHr(jsonValue->GetObjectW(jsonObject.GetAddressOf()))
ChkHr(hrEntry)
Failed to parse property '%s'
ChkHr(jsonValue->get_ValueType(&type))
ChkHr(currentPair->get_Key(keyName.GetAddressOf()))
Windows::Services::Store::JsonParser::ParseJSONToObject
ChkHr(json.As(&jsonObjectIterable))
ChkHr(ParseJSONToObject( jsonObject, pObj, table))
ChkHr(jsonObjectStatics->Parse(jsonString, &jsonObject))
onecoreuap\enduser\winstore\licensing\winrt\lib\ParserJSON.h
Windows::Services::Store::JsonParser::ParseJSONStringToObject
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), &jsonObjectStatics))
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreQueueItem>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Package>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StorePackageUpdate>
onecoreuap\enduser\winstore\licensing\winrt\lib\AsyncBase.h
hModule != nullptr
ChkHr(_pOptionalPfnToCallbackMap->Remove(optionalPackageFullName))
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::RemoveOptionalPackageToWatch
ChkHr(_pOptionalPfnToCallbackMap->HasKey(optionalPackageFullName, &foundOptionalPackage))
ChkHr(_pOptionalPfnToCallbackMap->Insert(optionalPackageFullName, storePackageLicenseCallback, &replaced))
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::AddOptionalPackageToWatch
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.Internal.StoreContentIdKeyIdItem>
_items->GetView(value)
Windows::Services::Store::Internal::StoreContentIdKeyIdResponse::get_Items
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\StoreContentIdKeyIdResponse.h
%08lX-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X
Windows.Foundation.Collections.IVectorView`1<String>
Windows.Foundation.Collections.IVector`1<String>
Windows.Foundation.Collections.IIterator`1<String>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>
&_*q<|
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>
ChkHr((AgileHashMap<HSTRING, IStorePackageLicenseLostCallback*>::Make(&_pOptionalPfnToCallbackMap)))
ChkHr(((HRESULT) ((RtlQueryWnfStateData( &initialChangeStamp, WNF_LM_OPTIONAL_PACKAGE_SUSPEND_REQUIRED, OnEventCallback, nullptr , nullptr )) | 0x10000000)))
ChkHr(pThis->_pOptionalPfnToCallbackMap->Lookup(HStringReference(pData->OptionalPackageFullName).Get(), callback.GetAddressOf()))
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::OnEventCallback
ChkHr(((HRESULT) ((RtlSubscribeWnfStateChangeNotification( &_subscription, WNF_LM_OPTIONAL_PACKAGE_SUSPEND_REQUIRED, initialChangeStamp, OnEventCallback, reinterpret_cast<PVOID>(this), nullptr , 0 , 0x00000004UL)) | 0x10000000)))
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::Initialize
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\StorePackageLicenseWnfWatcher.h
"z}!M
ProductId
ChkHr(jsonObjectIterator->MoveNext(&hasCurrent))
ChkHr(currentPair->get_Value(jsonValue.GetAddressOf()))
ChkHr(jsonObjectIterator->get_Current(&currentPair))
ChkHr(jsonObjectIterator->get_HasCurrent(&hasCurrent))
ChkHr(jsonObjectIterable->First(&jsonObjectIterator))
Windows.Xbox.ApplicationModel.State.Internal.StateHelperCache
Windows.Xbox.System.Internal.Deployment.AvailablePackageProvider
Windows.Foundation.AsyncOperationCompletedHandler`1<String>
Windows.Foundation.IAsyncOperation`1<String>
Windows.Internal.StateRepository.Package
Windows.Internal.StateRepository.User
 ChkAlloc(m_spStoreCommerceFactory)
Windows::ApplicationModel::Store::CurrentAppFactory::Initialize
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\currentappserver.cpp
ClientProcessUtils::GetCallingAppPackageFullName(m_PFN.GetAddressOf())
get_LicenseInformation() invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::get_LicenseInformation
ChkArg(ppAppLicense)
ChkHr(Initialize())
ChkHr(GetStoreCommerce(&spStoreCommerce))
ChkHr(spStoreCommerce->GetLicenseInformation(ppAppLicense))
CurrentApp.LicenseInformation
get_AppId() invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::get_AppId
ChkArg(pAppId)
ChkHr(spStoreCommerce->GetAppId(&m_appID))
CurrentApp.AppId
get_LinkUri() invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::get_LinkUri
ChkArg(ppLinkUri)
ChkHr(spStoreCommerce->GetLinkUri(hstrLinkUri.GetAddressOf()))
ChkHr(IAPUtils::CreateUri(hstrLinkUri.Get(), ppLinkUri))
CurrentApp.LinkUri
RequestAppPurchaseAsync(%s) invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::RequestAppPurchaseAsync
includeReceipt
CurrentApp.RequestAppPurchaseAsync
ChkArg(ppRequestAppPurchaseOperation)
ChkHr(MakeAndInitialize<MessageDialogHelper>(&spMessageDialogHelper, nullptr, hwnd))
ChkHr(spStoreCommerce->RequestAppPurchaseAsync( includeReceipt, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestAppPurchaseOperation))
RequestProductPurchaseAsync(%s, %s) invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::RequestProductPurchaseAsync
productId
CurrentApp.RequestProductPurchaseAsync
ChkArg(ppRequestProductPurchaseOperation)
ChkHr(spStoreCommerce->RequestProductPurchaseAsync(productId, includeReceipt, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestProductPurchaseOperation))
RequestProductPurchaseWithResultsAsync(%s) invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::RequestProductPurchaseWithResultsAsync
CurrentApp.RequestProductPurchaseWithResultsAsync
ChkArg(ppRequestProductPurchaseWithResultsOperation)
ChkHr(GetStoreCommerce(&spStoreCommerceWithConsumables))
ChkHr(spStoreCommerceWithConsumables->RequestProductPurchaseWithResultsAsync( productId, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestProductPurchaseWithResultsOperation))
RequestProductPurchaseWithDisplayPropertiesAsync(%s, %s) invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::RequestProductPurchaseWithDisplayPropertiesAsync
devOfferId
CurrentApp.RequestProductPurchaseWithDisplayPropertiesAsync
ChkHr(spStoreCommerceWithConsumables->RequestProductPurchaseWithDisplayPropertiesAsync( productId, devOfferId, displayProperties, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestProductPurchaseOperation))
LoadListingInformationAsync() invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::LoadListingInformationAsync
CurrentApp.LoadListingInformationAsync
ChkArg(ppLoadListingOperation)
ChkHr(spStoreCommerce->LoadListingInformationAsync(nullptr, nullptr, cv.GetHStringReference().Get(), ppLoadListingOperation))
GetAppReceiptAsync() invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::GetAppReceiptAsync
CurrentApp.GetAppReceiptAsync
ChkArg(getAppReceiptOperation)
ChkHr(spStoreCommerce->GetAppReceiptAsync(cv.GetHStringReference().Get(), getAppReceiptOperation))
GetUnfulfilledConsumablesAsync() invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::GetUnfulfilledConsumablesAsync
CurrentApp.GetUnfulfilledConsumablesAsync
ChkArg(ppGetUnfulfilledConsumablesOperation)
ChkHr(spStoreCommerceWithConsumables->GetUnfulfilledConsumablesAsync( cv.GetHStringReference().Get(), ppGetUnfulfilledConsumablesOperation))
ReportConsumableFulfillmentAsync(%s, %s) invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::ReportConsumableFulfillmentAsync
transactionId
CurrentApp.ReportConsumableFulfillmentAsync
ChkArg(ppReportConsumableFulfillmentOperation)
ChkHr(spStoreCommerceWithConsumables->ReportConsumableFulfillmentAsync( productId, transactionId, cv.GetHStringReference().Get(), ppReportConsumableFulfillmentOperation))
GetProductReceiptAsync(%s) invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::GetProductReceiptAsync
CurrentApp.GetProductReceiptAsync
ChkArg(getProductReceiptOperation)
ChkHr(spStoreCommerce->GetProductReceiptAsync(productId, cv.GetHStringReference().Get(), getProductReceiptOperation))
LoadListingInformationByProductIdsAsync() invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::LoadListingInformationByProductIdsAsync
keywords
productIds
ChkArg(productIds)
ChkHr(spStoreCommerce->LoadListingInformationAsync( productIds, nullptr, cv.GetHStringReference().Get(), ppLoadListingOperation))
LoadListingInformationByKeywordsAsync() invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::LoadListingInformationByKeywordsAsync
ChkArg(keywords)
ChkHr(spStoreCommerce->LoadListingInformationAsync( nullptr, keywords, cv.GetHStringReference().Get(), ppLoadListingOperation))
ReportProductFulfillment(%s) invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::ReportProductFulfillment
CurrentApp.ReportProductFulfillment
ChkHr(spStoreCommerceWithConsumables->ReportConsumableFulfillmentSync(productId, cv.GetHStringReference().Get()))
GetAppPurchaseCampaignIdAsync invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::GetAppPurchaseCampaignIdAsync
CurrentApp.GetAppPurchaseCampaignIdAsync
ChkArg(ppOperation)
ChkHr(spStoreCommerce->GetAppPurchaseCampaignIdAsync(cv.GetHStringReference().Get(), ppOperation))
GetCustomerPurchaseIdAsync() invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::GetCustomerPurchaseIdAsync
publisherUserId
serviceTicket
CurrentApp.GetCustomerPurchaseIdAsync
ChkArg(ppGetPurchaseIdOperation)
ChkHr(spStoreCommerce->GetCustomerPurchaseIdAsync( cv.GetHStringReference().Get(), serviceTicket, publisherUserId, ppGetPurchaseIdOperation))
GetCustomerCollectionsIdAsync() invoked.
Windows::ApplicationModel::Store::CurrentAppFactory::GetCustomerCollectionsIdAsync
CurrentApp.GetCustomerCollectionsIdAsync
ChkArg(ppGetCollectionsIdOperation)
ChkHr(spStoreCommerce->GetCustomerCollectionsIdAsync( cv.GetHStringReference().Get(), serviceTicket, publisherUserId, ppGetCollectionsIdOperation))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_UI_Core_CoreWindow).Get(), &spCoreWindowStatic))
Windows::ApplicationModel::Store::CurrentAppFactory::GetAppWindowHandle
ChkHr(spCoreWindowStatic->GetForCurrentThread(&spCoreWindow))
ChkHr(spCoreWindow.As(&spCoreWinInterop))
ChkHr(spCoreWinInterop->get_WindowHandle(&hwnd))
ChkHr(m_spStoreCommerceFactory->CreateStoreCommerceServer(&spStoreCommerce))
Windows::ApplicationModel::Store::CurrentAppFactory::GetStoreCommerce
ChkHr(spStoreCommerce->Initialize(cv.GetHStringReference().Get()))
ChkHr(m_spStoreCommerce.As(spRef))
ChkHr(temp.Set(InternalGetRuntimeClassName()))
Windows::ApplicationModel::Store::CurrentAppFactory::GetRuntimeClassName
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\CurrentAppServer.h
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::Initialize
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewserver.cpp
RequestProductPurchaseByProductIdAndSkuIdAsync(%s, %s) invoked.
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::RequestProductPurchaseByProductIdAndSkuIdAsync
skuId
StorePreview.RequestProductPurchaseByProductIdAndSkuIdAsync
ChkArg(ppRequestPurchaseBySkuIdOperation)
ChkHr(MakeAndInitialize<MessageDialogHelper>(&spMessageDialogHelper, nullptr , hwnd))
ChkHr(spStoreCommerce->RequestProductPurchaseByProductIdAndSkuIdAsync( productId, skuId, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestPurchaseBySkuIdOperation))
LoadAddOnProductInfosAsync() invoked.
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::LoadAddOnProductInfosAsync
StorePreview.LoadAddOnProductInfosAsync
ChkArg(ppLoadAddOnProductInfosOperation)
ChkHr(spStoreCommerce->LoadAddOnProductInfosAsync(cv.GetHStringReference().Get(), ppLoadAddOnProductInfosOperation))
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::GetStoreCommerce
onecore\internal\onecore\priv_sdk\inc\ConstrainedImpersonationUtil.h
!m_userObject || IsUMgrGetConstrainedUserTokenPresent()
ConstrainedImpersonateLoggedOnUser::GenerateImpersonationToken
storeAppInstallation
ClientProcessUtils::GetCallingAppPackageFullName(_PFN.GetAddressOf())
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::StoreConfigurationServer
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storeconfigurationserver.cpp
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetSystemConfiguration
ChkHr(SetSystemConfigurationInternal(catalogHardwareManufacturerId, catalogStoreContentModifierId, systemConfigurationExpiration, catalogHardwareDescriptor))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetMobileOperatorConfiguration
ChkHr(SetMobileOperatorConfigurationInternal(mobileOperatorId, appDownloadLimitInMegabytes, updateDownloadLimitInMegabytes))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetStoreWebAccountId
ChkHr(ClientProcessUtils::GetCallingAppPackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(SetStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), webAccountId))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsStoreWebAccountId
ChkHr(IsStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), webAccountId, *value))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::get_HardwareManufacturerInfo
ChkHr(GetHardwareManufacturerInfoInternal(value))
ChkHr(FilterUnsupportedFeaturesInternal(spPotentialSystemFeatures.Get(), resultsView))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync::<lambda_9311a7b729964ab4ab27616362cd54ed>::operator ()
ChkHr(results.Set(resultsView.Get()))
StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync
ChkHr(MakeAsyncOperation<CMarshaledInterfaceResult<IVectorView<StoreSystemFeature>>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), operation, TrustLevel::PartialTrust, [spThisKeepAlive, spPotentialSystemFeatures, cv](CMarshaledInterfaceResult<IVectorView<StoreSystemFeature>> & results) mutable -> HRESULT { HRESULT __hr = ((HRESULT)0L);; ComPtr<IVectorView<StoreSystemFeature>> resultsView; { { __hr = (FilterUnsupportedFeaturesInternal(spPotentialSystemFeatures.Get(), resultsView)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 230, __FSTREXP __FUNCTION__  , "ChkHr(FilterUnsupportedFeaturesInternal(spPotentialSystemFeatures.Get(), resultsView))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (results.Set(resultsView.Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 230, __FSTREXP __FUNCTION__  , "ChkHr(results.Set(resultsView.Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit:; Telemetry::EndOperation("StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync", (static_cast<HRESULT>(__hr)), cv.GetAnsi(), spThisKeepAlive->_PFN.Get()); CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::get_PurchasePromptingPolicy
ChkHr(StoreConfigurationServer::GetPurchasePromptingPolicyInternal(nullptr , value))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::put_PurchasePromptingPolicy
ChkHr(StoreConfigurationServer::PutPurchasePromptingPolicyInternal(nullptr , value))
ChkArg(value)
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::HasStoreWebAccount
ChkHr(StoreConfigurationServer::HasStoreWebAccountInternal(nullptr , *value))
ChkArg(user)
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::HasStoreWebAccountForUser
ChkHr(StoreConfigurationServer::HasStoreWebAccountInternal(user, *value))
ChkHr(WSCollector::CollectStoreLog(options, resultsView))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreLogDataAsync::<lambda_067cf6a520b1a8707ec348e80e22e6be>::operator ()
StoreConfigurationServer::GetStoreLogDataAsync
options
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreLogDataAsync
ChkHr(MakeAsyncOperation<CMarshaledInterfaceResult<Windows::Storage::Streams::IRandomAccessStreamReference>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), operation, TrustLevel::PartialTrust, [spThisKeepAlive, options, cv](CMarshaledInterfaceResult<Windows::Storage::Streams::IRandomAccessStreamReference>& results) mutable -> HRESULT { HRESULT __hr = ((HRESULT)0L);; ComPtr<Windows::Storage::Streams::IRandomAccessStreamReference> resultsView; { { __hr = (WSCollector::CollectStoreLog(options, resultsView)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 339, __FSTREXP __FUNCTION__  , "ChkHr(WSCollector::CollectStoreLog(options, resultsView))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (results.Set(resultsView.Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 339, __FSTREXP __FUNCTION__  , "ChkHr(results.Set(resultsView.Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit:; Telemetry::EndOperation("StoreConfigurationServer::GetStoreLogDataAsync", (static_cast<HRESULT>(__hr)), cv.GetAnsi(), spThisKeepAlive->_PFN.Get()); CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetStoreWebAccountIdForUser
ChkHr(SetStoreWebAccountIdInternal(user, packageFamilyName.Get(), webAccountId))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsStoreWebAccountIdForUser
ChkHr(IsStoreWebAccountIdInternal(user, packageFamilyName.Get(), webAccountId, *value))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetPurchasePromptingPolicyForUser
ChkHr(StoreConfigurationServer::GetPurchasePromptingPolicyInternal(user, value))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetPurchasePromptingPolicyForUser
ChkHr(StoreConfigurationServer::PutPurchasePromptingPolicyInternal(user, value))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreWebAccountId
ChkHr(GetStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), pValue))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreWebAccountIdForUser
ChkHr(GetStoreWebAccountIdInternal(user, packageFamilyName.Get(), pValue))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetEnterpriseStoreWebAccountId
ChkHr(SetEnterpriseStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), webAccountId))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetEnterpriseStoreWebAccountIdForUser
ChkHr(SetEnterpriseStoreWebAccountIdInternal(user, packageFamilyName.Get(), webAccountId))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetEnterpriseStoreWebAccountId
ChkHr(GetEnterpriseStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), pValue))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetEnterpriseStoreWebAccountIdForUser
ChkHr(GetEnterpriseStoreWebAccountIdInternal(user, packageFamilyName.Get(), pValue))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::ShouldRestrictToEnterpriseStoreOnly
ChkHr(ShouldRestrictToEnterpriseStoreOnlyInternal(nullptr , value))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::ShouldRestrictToEnterpriseStoreOnlyForUser
ChkHr(ShouldRestrictToEnterpriseStoreOnlyInternal(user, value))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsPinToDesktopSupported
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsPinToTaskbarSupported
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsPinToStartSupported
ChkHr(CoCreateInstance(__uuidof(InstallServiceUserBroker), nullptr, CLSCTX_INPROC_SERVER, __uuidof(**(&pinToHelper)), IID_PPV_ARGS_Helper(&pinToHelper)))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::PinToDesktop
ChkHr(pinToHelper->PinToShell(WindowsGetStringRawBuffer(appPackageFamilyName, nullptr), 0x02000000u))
ChkHr(impersonator.Impersonate())
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::PinToDesktopForUser
OEMID
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"OEMID", WindowsGetStringRawBuffer(catalogHardwareManufacturerId, nullptr)))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetSystemConfigurationInternal
SCMID
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"SCMID", WindowsGetStringRawBuffer(catalogStoreContentModifierId, nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"Hardware", WindowsGetStringRawBuffer(catalogHardwareDescriptor, nullptr)))
OEMDiscoveryTTL
ChkHr(RegistryHelper::SetQwordValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"OEMDiscoveryTTL", systemConfigurationExpiration.UniversalTime))
AppDownloadLimit
UpdateDownloadLimit
ChkHr(RegistryHelper::SetQwordValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"AppDownloadLimit", actualAppDownloadLimit))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetMobileOperatorConfigurationInternal
ChkHr(RegistryHelper::SetQwordValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"UpdateDownloadLimit", actualUpdateDownloadLimit))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"MOID", WindowsGetStringRawBuffer(mobileOperatorId, nullptr)))
ChkHr(ConvertWebAccountIdFromAppToRealIdForUser(user, AccountProviderType::MSA, callingAppPfn, webAccountId, realId.GetAddressOf()))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetStoreWebAccountIdInternal
PrimaryWebAccountId
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000001) ), RegistryHelper::STORE_REGISTRY_PATH, L"PrimaryWebAccountId", realId.GetRawBuffer(nullptr)))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreWebAccountIdInternal
ChkHr(ConvertWebAccountIdFromRealIdToAppForUser(user, AccountProviderType::MSA, callingAppPfn, realId.Get(), pWebAccountId))
ChkHr(ConvertWebAccountIdFromAppToRealIdForUser(user, AccountProviderType::AAD, callingAppPfn, webAccountId, realId.GetAddressOf()))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetEnterpriseStoreWebAccountIdInternal
StoreAADAccountId
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000001) ), RegistryHelper::STORE_CURRENTIDENTITY_REGISTRY_PATH, L"StoreAADAccountId", realId.GetRawBuffer(nullptr)))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetEnterpriseStoreWebAccountIdInternal
ChkHr(ConvertWebAccountIdFromRealIdToAppForUser(user, AccountProviderType::AAD, callingAppPfn, realId.Get(), pWebAccountId))
RequirePrivateStoreOnly
ApplicationManagement
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsStoreWebAccountIdInternal
ChkBool(provider == AccountProviderType::MSA, ((HRESULT)0x8000FFFFL))
ChkAlloc(spManufacturerInfo)
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetHardwareManufacturerInfoInternal
ChkHr(spManufacturerInfo->put_HardwareManufacturerId(buffer.Get()))
StoreContentModifier
ChkHr(spManufacturerInfo->put_StoreContentModifierId(buffer.Get()))
SystemManufacturer
ChkHr(spManufacturerInfo->put_ManufacturerName(buffer.Get()))
SystemProductName
ChkHr(spManufacturerInfo->put_ModelName(buffer.Get()))
ChkHr(BuildKnownFeatureAndGuidArrays(systemFeatures, guidArray, knownFeaturesArray))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::FilterUnsupportedFeaturesInternal
ChkHr(AskWuWhichHardwareIsAvailable(guidArray, availableArray))
ChkHr(Vector<StoreSystemFeature>::Make(&supportedFeaturesVector))
ChkHr(supportedFeaturesVector->GetView(&resultsView))
ChkHr(value->get_Value(&dwValue))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::PutPurchasePromptingPolicyInternal
ChkHr(CoCreateInstance(CLSID_HardwareCapability, nullptr, (CLSCTX_INPROC_SERVER|CLSCTX_LOCAL_SERVER|CLSCTX_REMOTE_SERVER), __uuidof(**(&spHardwareCapability)), IID_PPV_ARGS_Helper(&spHardwareCapability)))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::AskWuWhichHardwareIsAvailable
ChkHr(spHardwareCapability->EvaluateHardwareCapabilities( GUID_WinStoreServiceID, arraySize, rawGuidArray, &wuResults, &hrOnlineCheck))
ChkBool(wuResults != nullptr, ((HRESULT)0x80004003L))
ChkHr(systemFeatures->First(&spIterator))
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::BuildKnownFeatureAndGuidArrays
ChkHr(spIterator->get_HasCurrent(&hasCurrent))
ChkHr(spIterator->get_Current(&feature))
ChkHr(spIterator->MoveNext(&hasCurrent))
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Storage.Streams.IRandomAccessStreamReference>
Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStreamReference>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>
Windows.Foundation.IReference`1<UInt32>
4es`O
Hardware
ChkHr(AgileVector<HSTRING>::Make(&_actionFilters))
Windows::Services::Store::StoreProductOptions::RuntimeClassInitialize
onecoreuap\enduser\winstore\licensing\winrt\lib\storeproductoptions.cpp
ChkHr(ClientProcessUtils::IsCallerERA(&isERA))
VerifyCapability
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storecommerceserver.cpp
ChkHr(IAPUtils::IsCallingProcessAppContainer(&isAppContainer))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::Initialize
ChkHr(ClientProcessUtils::GetAppContentTypeForInstalledPackage(_packageFullName.Get(), &_appType))
ChkHr(LicenseInformationServer::CreateInstance( _packageFullName.Get(), _appType, cv.Get(), &_spLicenseInformationInternal))
ChkHr(InitializeIdsFromLicense())
ChkHr(MakeAndInitialize<ProductIdCache>(&_spProductIdCache))
packageFullName = %s, appType = %d, appId = %s, appCatalogId = %s
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestAppPurchaseAsync
ChkHr(ClientProcessUtils::GetCallingAppWindowHandle(&hwndOwner))
ChkHr(MakeAndInitialize<RequestAppPurchaseOperationServer>( &spRequestAppPurchaseInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestAppPurchaseId), fIncludeReceipt, hwndOwner, pMessageDialogHelper ))
ChkHr(spRequestAppPurchaseInfo.As(&spAsyncInfo))
(((HRESULT)(spAsyncInfo->get_Status(&status))) >= 0)
(((HRESULT)(spAsyncInfo->get_ErrorCode((&(__hr))))) >= 0)
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseAsync
ChkHr(MakeAndInitialize<RequestProductPurchaseOperationServer>( &spRequestProductPurchaseInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, fIncludeReceipt, hwndOwner, pMessageDialogHelper ))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseWithResultsAsync
ChkHr(MakeAndInitialize<RequestProductPurchaseWithResultsOperationServer>( &spRequestProductPurchaseWithResultsInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, hwndOwner, pMessageDialogHelper ))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseWithDisplayPropertiesAsync
ChkAlloc(spRequestProductPurchaseWithDisplayPropertiesInfo)
ChkHr(spRequestProductPurchaseWithDisplayPropertiesInfo->RuntimeClassInitialize( _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, hwndOwner, devOfferId, pDisplayProperties, pMessageDialogHelper ))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::LoadListingInformationAsync
ChkHr(__winrt_hr__)
keywords
ChkHr(hrCommerceOp)
ChkArg(ppAppReceiptOperation)
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppReceiptAsync
ChkHr(MakeAndInitialize<ReceiptRetrievalOperationServer>( &spLoadAsyncInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_receiptRequestId) ))
ChkArg(ppProductReceiptOperation)
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetProductReceiptAsync
ChkHr(MakeAndInitialize<ProductReceiptRetrievalOperationServer>( &spLoadAsyncInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_receiptRequestId), productId ))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetLinkUri
ChkArg(appId)
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppId
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetLicenseInformation
ChkHr(_spLicenseInformationInternal.CopyTo(__uuidof(**(value)), IID_PPV_ARGS_Helper(value)))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetUnfulfilledConsumablesAsync
ChkHr(MakeAndInitialize<GetUnfulfilledConsumablesOperationServer>( &spCheckConsumables, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_receiptRequestId)))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::ReportConsumableFulfillmentAsync
ChkHr(MakeAndInitialize<ReportConsumableFulfillmentOperationServer>( &spReportProdFulfillOp, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_fulfillRequestId), productId, transactionId ))
ChkHr(CollectionsServiceProxyV6::GetUnfulfilledConsumables(GetAppCatalogId(cv.Get()), cv.Get(), items))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::ReportConsumableFulfillmentSync
inAppOfferToken
ChkHr(JsonHelpers::GetNamedString(item, L"inAppOfferToken", itemInAppOfferToken.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"productId", itemProductId.GetAddressOf()))
transactionId
ChkHr(JsonHelpers::GetNamedString(item, L"transactionId", itemTransactionId.GetAddressOf()))
ChkHr(CollectionsServiceProxyV6::ConsumeConsumable(itemProductId.Get(), itemTransactionId.Get(), cv.Get()))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseByProductIdAndSkuIdAsync
ChkHr(MakeAndInitialize<RequestProductPurchaseBySkuIdOperationServer>( &spRequestPurchaseBySkuIdOperation, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, skuId, hasPreviewCapability, hwndOwner, pMessageDialogHelper ))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::LoadAddOnProductInfosAsync
ChkHr(MakeAsyncOperation<CMarshaledInterfaceResult<IVectorView<StorePreviewProductInfo*>>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), ppLoadAddOnProductInfosOperation, BaseTrust, [spThisKeepAlive, cv](CMarshaledInterfaceResult<IVectorView<StorePreviewProductInfo*>>& result) mutable { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); ComPtr<IVectorView<StorePreviewProductInfo*>> spProductInfos; HRESULT hrOperation = spThisKeepAlive->LoadAddOnProductInfos(cvExtend.Get(), &spProductInfos); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(spProductInfos.Get()); } Telemetry::EndOperation("StorePreview.LoadAddOnProductInfosAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get()); return hrOperation; }))
Going to catalog to find BigCatId: QueryCatalogForBigCatIdByPackageFullName
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppCatalogId
Going to catalog again to find BigCatId: QueryCatalogForBigCatIdByPackageFullNameAndType
ChkHr(CatalogServiceProxyV6::QueryCatalogForBigCatIdByPackageFullNameAndType( _packageFullName.Get(), _appType, pCV, _appCatalogId.GetAddressOf()))
Catalog failure looking for BigCatId.
ChkHr(_spLicenseInformationInternal->GetProductId(_appCatalogId.GetAddressOf()))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::InitializeIdsFromLicense
ChkArg(ppValue)
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::LoadAddOnProductInfos
ChkHr(StoreInfoBuilders::BuildStoreAppInfo( this, pCV, nullptr, &spStoreAppInfo))
ChkHr(AgileVector<StorePreviewProductInfo*>::Make(&spProductInfosList))
Add-On Product Infos (CV = %hs):
  <empty list>
ChkAlloc(spProductInfo)
ChkHr(spProductInfo->Initialize( spStoreAppInfo->Locale, spStoreAppInfo->Market, spStoreAppInfo, pInAppOffer))
ChkHr(spProductInfosList->Append(spProductInfo.Get()))
  %02u inAppOfferToken = %s, productId = %s, type = %u, price = %s, name = %s
  <missing list>
ChkHr(spProductInfosList->GetView(&spProductInfos))
ChkHr(CopyToNotNull(spProductInfos, ppValue))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppPurchaseCampaignIdAsync
ChkHr(MakeAsyncOperation<CHSTRINGResult>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), ppOperation, BaseTrust, [spThisKeepAlive, cv](CHSTRINGResult& result) mutable -> HRESULT { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); HString campaignId; HRESULT hrOperation = CollectionsServiceProxyV6::GetCampaignId( spThisKeepAlive->GetAppCatalogId(cvExtend.Get()), cvExtend.Get(), campaignId.GetAddressOf()); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(campaignId.Get()); } Telemetry::EndOperation("CurrentApp.GetAppPurchaseCampaignIdAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get()); return hrOperation; }))
ChkArg(getPurchaseIdOperation)
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetCustomerPurchaseIdAsync
ChkHr(::WindowsDuplicateString(publisherUserId, &publisherUserIdCopy))
ChkHr(::WindowsDuplicateString(serviceTicket, &serviceTicketCopy))
ChkHr(MakeAsyncOperation<CHSTRINGResult>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), getPurchaseIdOperation, BaseTrust, [spThisKeepAlive, serviceTicketCopy, publisherUserIdCopy, cv](CHSTRINGResult& result) mutable -> HRESULT { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); HString purchaseId; HRESULT hrOperation = CatalogServiceProxyV6::GetCustomerPurchaseId( serviceTicketCopy, publisherUserIdCopy, cvExtend.Get(), purchaseId.GetAddressOf()); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(purchaseId.Get()); } Telemetry::EndOperation("CurrentApp.GetCustomerPurchaseIdAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get(), "serviceTicket", serviceTicketCopy, "publisherUserId", publisherUserIdCopy); ::WindowsDeleteString(serviceTicketCopy); ::WindowsDeleteString(publisherUserIdCopy); return hrOperation; }))
ChkArg(getCollectionsIdOperation)
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetCustomerCollectionsIdAsync
ChkHr(MakeAsyncOperation<CHSTRINGResult>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), getCollectionsIdOperation, BaseTrust, [spThisKeepAlive, serviceTicketCopy, publisherUserIdCopy, cv](CHSTRINGResult& result) mutable -> HRESULT { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); HString collectionsId; HRESULT hrOperation = CatalogServiceProxyV6::GetCustomerCollectionsId( serviceTicketCopy, publisherUserIdCopy, cvExtend.Get(), collectionsId.GetAddressOf()); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(collectionsId.Get()); } Telemetry::EndOperation("CurrentApp.GetCustomerCollectionsIdAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get(), "serviceTicket", serviceTicketCopy, "publisherUserId", publisherUserIdCopy); ::WindowsDeleteString(serviceTicketCopy); ::WindowsDeleteString(publisherUserIdCopy); return hrOperation; }))
ChkBool((nullptr != productId), ((HRESULT)0x803F6103L))
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetExclusiveLockForProduct
ChkHr(WindowsCompareStringOrdinal(productId, _currentProductBeingPurchased.Get(), &comparisonResult))
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>
Windows::Services::Store::StorePackageInstallOptions::get_AllowForcedAppRestart
onecoreuap\enduser\winstore\licensing\winrt\lib\storepackageinstalloptions.cpp
ChkHr(_hstrName.Set(hstrName))
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::Initialize
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productpurchasedisplaypropertiesserver.cpp
ChkHr(spDisplayData->Initialize(hstrName))
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesFactory::CreateProductPurchaseDisplayProperties
ChkHr(((HRESULT)0x8007000EL))
ChkHr(spDisplayData->Initialize(nullptr))
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesFactory::ActivateInstance
_fInitialized
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::get_Name
ChkHr(_hstrName.CopyTo(hstrValue))
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::get_Description
ChkHr(_hstrDescription.CopyTo(hstrValue))
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::get_Image
ChkHr(_uriRuntimeClass.CopyTo(ppValue))
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::put_Name
ChkHr(_hstrName.Set(hstrValue))
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::put_Description
ChkHr(_hstrDescription.Set(hstrValue))
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::put_Image
ChkHr(IAPUtils::CreateUri(hstrUri.Get(), &_uriRuntimeClass))
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>>
Windows.Foundation.Collections.IMapView`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>
Windows.Foundation.Collections.IMap`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
storeLicenseManagement
ChkHr(CoCreateInstance(__uuidof(ApplicationLicenseManager), nullptr, CLSCTX_LOCAL_SERVER, __uuidof(**(alm.GetAddressOf())), IID_PPV_ARGS_Helper(alm.GetAddressOf())))
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetALM
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\winrtapi.cpp
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_DataReader).Get(), &dataReaderFactory))
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::AddLicenseAsync::<lambda_e1db209f168b3657ea73613545218e9e>::operator ()
ChkHr(dataReaderFactory->FromBuffer(licenseBuffer.Get(), licenseReader.GetAddressOf()))
ChkHr(licenseReader->get_UnconsumedBufferLength(&licenseBufferLength))
ChkAlloc(licenseBuffer)
ChkHr(licenseReader->ReadBytes(licenseBufferLength, licenseBuffer))
ChkHr(GetALM(alm.GetAddressOf()))
ChkHr(alm->LoadLicenseWithBytes(AppType_UniversalApp, licenseBufferLength, licenseBuffer, L"", licenseInstance.GetAddressOf()))
ChkHr(VerifyCapability(StoreLicenseManagement.Get()))
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::AddLicenseAsync
ChkHr(MakeAsyncAction<AsyncCausalityOptions<AddLicenseAsyncActionName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), Action, TrustLevel::BaseTrust, [licenseBuffer](CNoResult &) -> HRESULT { HRESULT __hr = ((HRESULT)0L);; { ComPtr<IDataReaderStatics> dataReaderFactory; { { __hr = (Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_DataReader).Get(), &dataReaderFactory)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_DataReader).Get(), &dataReaderFactory))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<IDataReader> licenseReader; { { __hr = (dataReaderFactory->FromBuffer(licenseBuffer.Get(), licenseReader.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(dataReaderFactory->FromBuffer(licenseBuffer.Get(), licenseReader.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; UINT32 licenseBufferLength; { { __hr = (licenseReader->get_UnconsumedBufferLength(&licenseBufferLength)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(licenseReader->get_UnconsumedBufferLength(&licenseBufferLength))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; SP_CPP_ARRAY<BYTE> licenseBuffer; licenseBuffer = new BYTE[licenseBufferLength]; { if (!(licenseBuffer)) { Windows::Foundation::Diagnostics::OriginateError(((HRESULT)0x8007000EL), nullptr); } { if (!(licenseBuffer)) { { __hr = (((HRESULT)0x8007000EL)); }; ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkAlloc(licenseBuffer)", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; }; { { __hr = (licenseReader->ReadBytes(licenseBufferLength, licenseBuffer)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(licenseReader->ReadBytes(licenseBufferLength, licenseBuffer))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<IApplicationLicenseManager3> alm; { { __hr = (GetALM(alm.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(GetALM(alm.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<ILicenseInstance> licenseInstance; { { __hr = (alm->LoadLicenseWithBytes(AppType_UniversalApp, licenseBufferLength, licenseBuffer, L"", licenseInstance.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(alm->LoadLicenseWithBytes(AppType_UniversalApp, licenseBufferLength, licenseBuffer, L\"\", licenseInstance.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; } goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(spThis->GetSatisfactionInfos(contentIdsVectorView.Get(), keyIdsVectorView.Get(), licenseSatisfactionResult.GetAddressOf()))
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetSatisfactionInfosAsync::<lambda_9d3e6b609609b628bd3a08f8252fb043>::operator ()
ChkHr(result.Set(licenseSatisfactionResult.Get()))
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetSatisfactionInfosAsync
ChkArg(ContentIdentifiers)
ChkHr(ContentIdentifiers->First(&spContentIdsIter))
ChkHr(spContentIdsIter->get_HasCurrent(&cHasCurrent))
ChkBool(!!cHasCurrent, ((HRESULT)0x80070057L))
ChkHr(AgileVector<HSTRING>::Make(&contentIds))
ChkHr(spContentIdsIter->get_Current(contentId.GetAddressOf()))
ChkHr(contentIds->Append(contentId.Get()))
ChkHr(spContentIdsIter->MoveNext(&cHasCurrent))
ChkHr(AgileVector<HSTRING>::Make(&keyIds))
ChkHr(KeyIdentifiers->First(&spKeyIdsIter))
ChkHr(spKeyIdsIter->get_HasCurrent(&eHasCurrent))
ChkHr(spKeyIdsIter->get_Current(keyId.GetAddressOf()))
ChkHr(keyIds->Append(keyId.Get()))
ChkHr(spKeyIdsIter->MoveNext(&eHasCurrent))
ChkHr(((HRESULT)0x80070057L))
ChkHr(hrOp)
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::RefreshLicensesAsync::<lambda_39b8ab18eb768c77ef40d9104d3429ec>::operator ()
ChkHr(alm->RefreshLicenses(refreshPolicy))
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::RefreshLicensesAsync
ChkHr(MakeAsyncAction<AsyncCausalityOptions<RefreshLicensesAsyncActionName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), Action, TrustLevel::BaseTrust, [refreshPolicy](CNoResult &) -> HRESULT { HRESULT __hr = ((HRESULT)0L);; ComPtr<IApplicationLicenseManager3> alm; { { __hr = (GetALM(alm.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 206, __FSTREXP __FUNCTION__  , "ChkHr(GetALM(alm.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (alm->RefreshLicenses(refreshPolicy)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 206, __FSTREXP __FUNCTION__  , "ChkHr(alm->RefreshLicenses(refreshPolicy))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetSatisfactionInfos
ChkHr(hrMake)
ChkHr(keyIds->get_Size(&keySize))
ChkHr(contentIds->get_Size(&contentSize))
ChkHr(contentIds->GetAt(i, contentId.GetAddressOf()))
ChkHr(keyIds->GetAt(i, keyId.GetAddressOf()))
No Sku Id could be obtained from the preview license response.
No contentInfo could be obtained from the preview license response.
ChkHr(MakeAndInitialize<LicenseSatisfactionInfo>( &leinfo, license))
ChkHr(licenseSatisfactionInfoForAll->Insert(contentId.Get(), leinfo.Get(), &replaced))
ChkHr(licenseSatisfactionInfoForAll->Clear())
ChkHr(licenseSatisfactionInfoForAll->GetView(&licenseSatisfactionInfoReadOnlyForAll))
ChkHr(MakeAndInitialize<LicenseSatisfactionResult>( result, licenseSatisfactionInfoReadOnlyForAll, hrOperation, skuId ? HStringReference(skuId).Get() : nullptr))
Windows.Foundation.IAsyncAction
Windows.ApplicationModel.Store.LicenseManagement.AddLicenseAsync
Windows.ApplicationModel.Store.LicenseManagement.RefreshLicensesAsync
className
Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper::RequestTokenWithUIElementHostingAsync
ChkHr(request->get_ClientId(clientId.GetAddressOf()))
0xABBACAB
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\tokenbrokercomponentuilauncher.cpp
windowTitle
ChkHr(request->get_Scope(scope.GetAddressOf()))
ChkBool(hwnd != 0, HRESULT_FROM_WIN32(1168L))
ChkHr(JsonParser::ParseJSONStringToObject( scope, &requestParams, responseTable))
ChkHr(storeContextServer->Initialize(false, nullptr))
ChkHr(::ActivateInstance(StoreContextServerClassId.Get(), storeContextServer.GetAddressOf()))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Security_Authentication_Web_Core_WebAuthenticationCoreManager).Get(), &componentLauncher))
ChkHr(storeContextServer->FocusOnWindow((UINT64)hwnd))
Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper::RequestTokenWithUIElementHostingAndWebAccountAsync
ChkHr(componentLauncher->RequestTokenWithUIElementHostingAsync(request, uiElement, asyncInfo))
ParseJSONStringToObject(DEBUG_PARSER_PARAMETERS_ARGS jsonString.Get(), pObj, table)
ChkHr(componentLauncher->RequestTokenWithUIElementHostingAndWebAccountAsync(request, account, uiElement, asyncInfo))
Windows::Services::Store::StoreContextFactory::GetDefault() invoked. (CV:%hs)
This function must be called from a UI thread
onecoreuap\enduser\winstore\licensing\winrt\lib\storecontext.cpp
Windows::Services::Store::StoreContextFactory::GetDefault
ChkHr(ClientProcessUtils::GetCallingAppPackageFullName(packageFullName.GetAddressOf()))
ChkArg(ppStoreContext)
Windows::Services::Store::StoreContextFactory::GetForUser() invoked. (CV:%hs)
ChkHr(MakeAndInitialize<StoreContext>(ppStoreContext, cv.GetAnsi(), nullptr, packageFullName.Get()))
ChkArg(pUser)
Windows::Services::Store::StoreContextFactory::GetForUser
ChkHr(::ActivateInstance( StoreContextServerClassId.Get(), storeContextServer.GetAddressOf()))
ChkHr(MakeAndInitialize<StoreContext>(ppStoreContext, cv.GetAnsi(), pUser, packageFullName.Get()))
ChkHr(storeContextServer->SetUser(pUser))
Windows::Services::Store::StoreContext::CreateStoreContextServer
ChkHr(_packageFullName.Set(PFN))
ChkHr(storeContextServer->Initialize(pUser != nullptr, _spLicenseChangedCallback.Get()))
ChkHr(MakeAndInitialize<StoreContextLicenseChangedCallback>(&_spLicenseChangedCallback, this))
Windows::Services::Store::StoreContext::RuntimeClassInitialize
Windows::Services::Store::StoreContext::SendStoreRequestAsync(%u, %s) invoked. (CV:%hs)
ChkHr(CreateStoreContextServer(pUser, _spStoreContextServer))
ChkHr(JsonHelpers::ParseToJsonObject(WindowsGetStringRawBuffer(parametersAsJson, nullptr), &jsonObject))
Windows::Services::Store::StoreContext::SendStoreRequestAsync
Xtoken
UserId
Order
ChkHr(jsonObject->SetNamedValue(HStringReference(g_DoNotLogTheseValues[i]).Get(), nullptr))
onlineIdTicket
ChkHr(_spStoreContextServer->CaptureStoreContextCallerData(reinterpret_cast<UINT64>(hwnd), &callerData))
ChkHr(JsonHelpers::Stringify(jsonObject, cleansedParameterAsJson.GetAddressOf()))
parametersAsJson
ChkHr(MakeAndInitialize<StoreRequestOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), requestKind, parametersAsJson, _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::get_User() invoked. (CV:%hs)
requestKind
Windows::Services::Store::StoreContext::get_User
Windows::Services::Store::StoreContext::GetCustomerPurchaseIdAsync
Windows::Services::Store::StoreContext::GetCustomerPurchaseIdAsync(%s, %s) invoked. (CV:%hs)
ChkArg(serviceTicket)
ChkArg(publisherUserId)
Windows::Services::Store::StoreContext::GetCustomerCollectionsIdAsync(%s, %s) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetCustomerPurchaseIdOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), serviceTicket, publisherUserId, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetCustomerCollectionsIdOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), serviceTicket, publisherUserId, _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::GetCustomerCollectionsIdAsync
Windows::Services::Store::StoreContext::GetAppLicenseAsync
Windows::Services::Store::StoreContext::GetAppLicenseAsync() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetStoreProductForCurrentAppAsync() invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetOfflineLicensesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetStoreProductOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::GetStoreProductForCurrentAppAsync
Windows::Services::Store::StoreContext::GetStoreProductsAsync
Windows::Services::Store::StoreContext::GetStoreProductsAsync([%s, %s]) invoked. (CV:%hs)
productKinds
storeIds
ChkHr(IAPUtils::CheckProductKinds(productKinds))
ChkArg(storeIds)
ChkHr(hrJoin)
ChkHr(hrFamilies)
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsAsync([%s]) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<BulkHydrateOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, storeIds, nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAssociatedStoreProductsOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsAsync
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsWithPagingAsync
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsWithPagingAsync([%s], %u) invoked. (CV:%hs)
ChkBool(maxItemsToRetrieve > 0, ((HRESULT)0x80070057L))
maxItemsToRetrieve
Windows::Services::Store::StoreContext::GetUserCollectionAsync([%s]) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetAssociatedStoreProductsPagedOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, maxItemsToRetrieve, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetUserCollectionOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::GetUserCollectionAsync
Windows::Services::Store::StoreContext::GetUserCollectionWithPagingAsync
Windows::Services::Store::StoreContext::GetUserCollectionWithPagingAsync([%s], %u) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetUserCollectionPagedOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, maxItemsToRetrievePerPage, _InterlockedIncrement(&_asyncIds)))
maxItemsToRetrievePerPage
Windows::Services::Store::StoreContext::GetConsumableBalanceRemainingAsync
Windows::Services::Store::StoreContext::GetConsumableBalanceRemainingAsync(%s) invoked. (CV:%hs)
ChkArg(productStoreId)
productStoreId
Windows::Services::Store::StoreContext::AcquireStoreLicenseForOptionalPackageAsync invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetConsumableBalanceRemainingOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productStoreId, _InterlockedIncrement(&_asyncIds)))
ChkArg(pOptionalPackage)
Windows::Services::Store::StoreContext::AcquireStoreLicenseForOptionalPackageAsync
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseForOptionalPackageAsync invoked. (CV:%hs)
ChkHr(MakeAndInitialize<AcquireStoreLicenseForOptionalPackageOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), pOptionalPackage, _InterlockedIncrement(&_asyncIds)))
ChkHr(GetPackageFamilyNameFromPackage(pOptionalPackage, packageFamilyName))
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseForOptionalPackageAsync
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseAsync
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::add_OfflineLicensesChanged
Windows::Services::Store::StoreContext::add_OfflineLicensesChanged() invoked. (CV:%hs)
ChkArg(pHandler)
ChkArg(pToken)
Windows::Services::Store::StoreContext::remove_OfflineLicensesChanged(%llu) invoked. (CV:%hs)
ChkHr(_offlineLicensesChangedEvent.Add(pHandler, pToken))
ChkHr(_offlineLicensesChangedEvent.Remove(token))
Windows::Services::Store::StoreContext::remove_OfflineLicensesChanged
Windows::Services::Store::StoreContext::ReportConsumableFulfillmentAsync
Windows::Services::Store::StoreContext::ReportConsumableFulfillmentAsync(%s, %u, %s) invoked. (CV:%hs)
quantity
trackingId
Windows::Services::Store::StoreContext::RequestPurchaseAsync(%s) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<ReportConsumableOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productStoreId, quantity, trackingId, _InterlockedIncrement(&_asyncIds)))
storeId
Windows::Services::Store::StoreContext::RequestPurchaseAsync
Windows::Services::Store::StoreContext::RequestPurchaseWithPurchasePropertiesAsync(%s) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<RequestPurchaseOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), storeId, nullptr, nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<RequestPurchaseOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), storeId, storePurchaseProperties, nullptr, _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::RequestPurchaseWithPurchasePropertiesAsync
Windows::Services::Store::StoreContext::GetIsAnySkuInstalledAsync
Windows::Services::Store::StoreContext::GetIsAnySkuInstalledAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAppAndOptionalStorePackageUpdatesAsync invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetIsAnySkuInstalledOperation>( ppOperation, productStoreId, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAppAndSupplementalStorePackageUpdatesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::GetAppAndOptionalStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::RequestDownloadStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::RequestDownloadStorePackageUpdatesAsync invoked. (CV:%hs)
ChkHr(CreateMessageDialogHelper(hwnd, dialogHelper))
ChkArg(pStorePackageUpdates)
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackageUpdatesAsync invoked. (CV:%hs)
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, false, true, false, cv.GetAnsi(), dialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, true, true, false, cv.GetAnsi(), dialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesAsync
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::FindStoreProductForPackageAsync(%s) invoked. (CV:%hs)
ChkHr(_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync(cv, __FSTREXP __FUNCTION__  , pStoreIds, true , false , nullptr , ppOperation))
ChkHr(hrKinds)
Windows::Services::Store::StoreContext::FindStoreProductForPackageAsync
ChkHr(hrPackage)
ChkArg(package)
Windows::Services::Store::StoreContext::get_CanSilentlyDownloadStorePackageUpdates() invoked. (CV:%hs)
ChkHr(MakeAndInitialize<FindStoreProductForPackageOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, package, _InterlockedIncrement(&_asyncIds)))
ChkHr(storeContextServer->CanSilentlyDownloadStorePackageUpdates(cv.GetHStringReference().Get(), value))
Windows::Services::Store::StoreContext::get_CanSilentlyDownloadStorePackageUpdates
Windows::Services::Store::StoreContext::TrySilentDownloadStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::TrySilentDownloadStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::TrySilentDownloadAndInstallStorePackageUpdatesAsync invoked. (CV:%hs)
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, false, false, false, cv.GetAnsi(), nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, true, false, true, cv.GetAnsi(), nullptr, _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::TrySilentDownloadAndInstallStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::GetAssociatedStoreQueueItemsAsync
Windows::Services::Store::StoreContext::GetAssociatedStoreQueueItemsAsync invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetAssociatedStoreQueueItemsOperation>( operation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, nullptr, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkArg(operation)
Windows::Services::Store::StoreContext::GetStoreQueueItemsAsync
Windows::Services::Store::StoreContext::GetStoreQueueItemsAsync([%s]) invoked. (CV:%hs)
ChkHr(MakeAndInitialize<GetStoreQueueItemsOperation>( operation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), storeIds, _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync([%s, %s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetStoreProductsWithOptionsAsync([%s, %s, %s]) invoked. (CV:%hs)
ChkHr(_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync(cv, __FSTREXP __FUNCTION__  , storeIds, true , false , storePackageInstallOptions, operation))
actionFilters
Windows::Services::Store::StoreContext::GetStoreProductsWithOptionsAsync
ChkHr(hrJoinStoreIds)
ChkBool(filterCount < 2, ((HRESULT)0x80070057L))
ChkHr(MakeAndInitialize<BulkHydrateOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, storeIds, storeProductOptions, _InterlockedIncrement(&_asyncIds)))
ChkHr(hrJoinActionFilters)
Windows::Services::Store::StoreContext::DownloadAndInstallStorePackagesAsync
Windows::Services::Store::StoreContext::DownloadAndInstallStorePackagesAsync([%s]) invoked. (CV:%hs)
(invalid)
ChkHr(_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync( cv, __FSTREXP __FUNCTION__  , storeIds, false, false, nullptr, operation))
Windows::Services::Store::StoreContext::RequestUninstallStorePackageAsync
Windows::Services::Store::StoreContext::RequestUninstallStorePackageAsync invoked by %s for %s. (CV:%hs)
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , 0, packageFamilyName.Get(), true , operation))
ChkHr(hrGetPackageFamilyName)
Windows::Services::Store::StoreContext::RequestRateAndReviewAppAsync
Windows::Services::Store::StoreContext::RequestRateAndReviewAppAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::SetInstallOrderForAssociatedStoreQueueItemsAsync invoked. (CV:%hs)
ChkHr(MakeAndInitialize<RequestStoreRateAndReviewOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkArg(items)
Windows::Services::Store::StoreContext::SetInstallOrderForAssociatedStoreQueueItemsAsync
Windows::Services::Store::StoreContext::RequestUninstallStorePackageByStoreIdAsync invoked by %s for %s. (CV:%hs)
ChkHr(MakeAndInitialize<GetAssociatedStoreQueueItemsOperation>( operation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, items, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , storeId, 0, true , operation))
Windows::Services::Store::StoreContext::RequestUninstallStorePackageByStoreIdAsync
Windows::Services::Store::StoreContext::UninstallStorePackageAsync
Windows::Services::Store::StoreContext::UninstallStorePackageAsync invoked by %s for %s. (CV:%hs)
Windows::Services::Store::StoreContext::UninstallStorePackageByStoreIdAsync invoked by %s for %s. (CV:%hs)
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , 0, packageFamilyName.Get(), false , operation))
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , storeId, 0, false , operation))
Windows::Services::Store::StoreContext::UninstallStorePackageByStoreIdAsync
Windows::Services::Store::StoreContext::UninstallStorePackageAsyncHelper
ChkArg(storeId || packageFamilyName)
ChkHr(MakeAndInitialize<UninstallStorePackageOperation>( operation, _packageFullName.Get(), function, storeId, packageFamilyName, shouldPrompt, dialogHelper.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
!(storeId && packageFamilyName)
Windows::Services::Store::StoreContext::GetAppWindowHandle
Windows::Services::Store::StoreContext::GetPackageFamilyNameFromPackage
ChkHr(coreWindowStatic->GetForCurrentThread(coreWindow.GetAddressOf()))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_UI_Core_CoreWindow).Get(), coreWindowStatic.GetAddressOf()))
ChkHr(coreApp->get_MainView(coreAppView.GetAddressOf()))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_ApplicationModel_Core_CoreApplication).Get(), coreApp.GetAddressOf()))
ChkHr(coreWindow.As(&coreWinInterop))
ChkHr(coreAppView->get_CoreWindow(coreWindow.GetAddressOf()))
ChkHr(items->get_Size(&count))
ChkHr(coreWinInterop->get_WindowHandle(&hwnd))
ChkHr(items->GetAt(i, inspectable.GetAddressOf()))
Windows::Services::Store::StoreContext::AssociateWithStoreContext
ChkHr(productPrivate->SetStoreContext(this))
ChkHr(inspectable.As(&productPrivate))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( operation, _packageFullName.Get(), pszOperationName, this, storeIds, storePackageInstallOptions, shouldPromptForConsent, totallySilent, cv.GetAnsi(), dialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
Windows::Services::Store::StoreContext::_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StorePurchaseResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StorePurchaseResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreRateAndReviewResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreRateAndReviewResult *>,0>::DoWorkStub
_spStoreContextServer.As(&result)
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StoreQueueItem *> *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StoreQueueItem *> *>,0>::DoWorkStub
Windows::Services::Store::StoreContext::GetStoreContextServer
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreUninstallStorePackageResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreSendRequestResult>
Windows.Foundation.IAsyncOperation`1<Boolean>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreConsumableResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreProductQueryResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreAcquireLicenseResult>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
zChkHr(AsWeak(pStoreContext, &_wrStoreContext))
Windows::Services::Store::StoreContextLicenseChangedCallback::RuntimeClassInitialize
FWindows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreUninstallStorePackageResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreUninstallStorePackageResult *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreUninstallStorePackageResult>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StorePackageUpdate *> *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StorePackageUpdate *> *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<bool>,struct Windows::Foundation::IAsyncOperationCompletedHandler<bool>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Boolean>
!*WPq
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreCanAcquireLicenseResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreCanAcquireLicenseResult *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreAcquireLicenseResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreAcquireLicenseResult *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAcquireLicenseResult>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreConsumableResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreConsumableResult *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreConsumableResult>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreProductQueryResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreProductQueryResult *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductQueryResult>
!Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreProductResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreProductResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreSendRequestResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreSendRequestResult *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreSendRequestResult>
onecoreuap\enduser\winstore\licensing\winrt\lib\StoreContext.h
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreProductPagedQueryResult>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreProductPagedQueryResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreProductPagedQueryResult *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductPagedQueryResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StorePurchaseResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreRateAndReviewResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreRateAndReviewResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StorePurchaseResult>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreProductResult>
onecoreuap\enduser\winstore\licensing\winrt\lib\storerequesthelper.cpp
Windows::Services::Store::StoreRequestHelperFactory::SendRequestAsync
ChkHr(spStoreContext.As(&spStoreContextPrivate))
ChkArg(context)
ChkHr(spStoreContextPrivate->SendStoreRequestAsync( requestKind, parametersAsJson, ppOperation))
_name.Set(name)
onecoreuap\enduser\winstore\licensing\winrt\lib\purchasedisplayproperties.cpp
Windows::Services::Store::StorePurchaseProperties::RuntimeClassInitialize
Windows::Services::Store::StorePurchaseProperties::get_Name
::WindowsDuplicateString(_name.Get(), pValue)
Windows::Services::Store::StorePurchaseProperties::put_Name
_name.Set(value)
Windows::Services::Store::StorePurchaseProperties::get_ExtendedJsonData
::WindowsDuplicateString(_extendedJsonData.Get(), pValue)
Windows::Services::Store::StorePurchaseProperties::put_ExtendedJsonData
_extendedJsonData.Set(value)
Windows::Services::Store::StorePurchasePropertiesFactory::Create
ChkArg(ppData)
Windows::Services::Store::StorePurchasePropertiesFactory::ActivateInstance
ChkHr(MakeAndInitialize<StorePurchaseProperties>(ppData, name))
ChkHr(MakeAndInitialize<StorePurchaseProperties>(ppData, nullptr))
Windows.UI.Popups.MessageDialog
Windows.Internal.Shell.ModalExperience.ModalExperienceManager
Windows.Internal.Shell.ModalExperience.ModalExperienceOptions
StringHelpers::TrimEnds
length >= (count * 2)
ChkBool(length >= (count * 2), ((HRESULT)0x80070057L))
onecoreuap\enduser\winstore\licensing\winrt\lib\stringhelpers.cpp
ChkHr(::WindowsStringHasEmbeddedNull(inputString, &hasEmbeddedNull))
ChkHr(::WindowsSubstringWithSpecifiedLength( str, count, length - (count * 2), resultString))
ChkBool(!hasEmbeddedNull, ((HRESULT)0x80070057L))
StringHelpers::SplitString
ChkHr(outputs->Append(inputString))
ChkHr(AgileVector<HSTRING>::Make(&outputs))
ChkHr(outputs->Append(output.Get()))
ChkHr(WindowsSubstringWithSpecifiedLength(inputString, lastDelimeterIndex, delimeterIndex - lastDelimeterIndex, output.GetAddressOf()))
ChkHr(outputs->GetView(outputStrings))
ChkHr(WindowsSubstring(inputString, lastDelimeterIndex, output.GetAddressOf()))
StringHelpers::DecodeBase64
ChkHr(GetActivationFactory( CryptographicBufferRuntimeClassName.Get(), &cryptoFactory))
ChkHr(spHashBuffer->get_Length(&decodedBufferLength))
ChkHr(cryptoFactory->DecodeFromBase64String( encodedString, &spHashBuffer))
ChkHr(spBufferAsBytes->Buffer(reinterpret_cast<BYTE**>(&pDecodedBuffer)))
ChkHr(spHashBuffer.As(&spBufferAsBytes))
ChkHr(stringBuffer.Promote(result.GetAddressOf()))
ChkHr(stringBuffer.Preallocate(decodedBufferLength + 1, &pszDecodedString))
ChkHr(TrimString(result.Get(), resultString))
HStringBufferWrapper::Promote
ChkHr(WindowsPromoteStringBuffer(buffer, string))
onecoreuap\enduser\winstore\licensing\winrt\lib\StringHelpers.h
ChkHr(spValue.As(&spJsonValue))
onecoreuap\enduser\winstore\licensing\winrt\lib\jsonhelpers.cpp
JsonHelpers::AppendObject
ChkHr(spJsonVector->Append(spJsonValue.Get()))
ChkHr(spArray.As(&spJsonVector))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonValue).Get(), &spJsonValueStatics))
JsonHelpers::AppendString
ChkHr(spJsonVector->Append(spValue.Get()))
ChkHr(spJsonValueStatics->CreateStringValue(HStringReference(pszValue).Get(), &spValue))
JsonHelpers::SetNamedString
ChkHr(spJsonValueStatics->CreateStringValue(hValue, &spValue))
ChkHr(pValue.As(&spJsonValue))
ChkHr(pObject->SetNamedValue(HStringReference(pszName).Get(), spValue.Get()))
ChkHr(pObject->SetNamedValue(HStringReference(pszName).Get(), spJsonValue.Get()))
JsonHelpers::SetNamedObject
JsonHelpers::SetNamedBool
JsonHelpers::SetNamedArray
JsonHelpers::SetNamedNumber
ChkHr(spJsonValueStatics->CreateBooleanValue(fValue, &spValue))
JsonHelpers::SetNamedNull
ChkHr(spJsonValueStatics->CreateNumberValue(fValue, &spValue))
ChkHr(FileTimeToString(strTime, 200, UINT64_TO_FILETIME(value.UniversalTime)))
ChkHr(spJsonValueStatics->CreateNullValue(&spValue))
ChkHr(spJsonValueStatics->CreateStringValue(HStringReference((const WCHAR*)strTime).Get(), &spValue))
JsonHelpers::SetNamedDateTime
JsonHelpers::SetNamedTimeSpan
ChkHr(IAPUtils::TimeSpanToString(value, timeSpanString.GetAddressOf()))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), &spJsonStatics))
ChkHr(spJsonValueStatics->CreateStringValue(timeSpanString.Get(), &spValue))
ChkHr(spJsonStatics->Parse(HStringReference(pszJson).Get(), &spJsonObject))
JsonHelpers::ParseToJsonObject
JsonHelpers::ParseToJsonArray
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonArray).Get(), &spJsonArrayStatics))
ChkHr(spJsonObject.As(&spJsonValue))
ChkHr(spJsonArrayStatics->Parse(HStringReference(pszJson).Get(), &spJsonArray))
ChkHr(spJsonValue->Stringify(hJsonString))
JsonHelpers::Stringify
JsonHelpers::GetArraySizeFromJsonArray
ChkArg(spJsonArray)
ChkHr(GetNamedString(spJson, pszName, timeString.GetAddressOf()))
ChkHr(spJsonArray.As(&spJsonVector))
ChkHr(StringToFileTime(timeString.GetRawBuffer(nullptr), &ft, 0))
JsonHelpers::GetNamedDateTime
ChkHr(spJsonVector->RemoveAt(index))
JsonHelpers::RemoveAt
####-##-##T##:##:##S
##:##
%04u-%02u-%02u%s%02u:%02u:%02u%s
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\external\inc\eratitleinfo.h
CurrentEraTitleInfo::GetAppId
buffer != nullptr
CurrentEraTitleInfo::GetProxyAppPid
pid != nullptr
onecoreuap\internal\base\inc\userawarecalleridentity.h
IsRpcServerCallOnLocalTransport
result != nullptr
GetCallingProcessPackageFullName
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\clientprocessutils.cpp
ChkHr(GetERAPackageFullNameByAumid(pfnBuff, wil::out_param(callerPackageFullName)))
ChkHr(CurrentEraTitleInfo::GetAppId(pfnBuff, pfnLength))
ChkHr(UserAwareCallerIdentity::GetCallingProcessPackageFullName(packageFullName))
ChkHr(CurrentEraTitleInfo::GetProxyAppPid(&pid))
ChkArg(pCoreWindow)
ClientProcessUtils::IsCallerERA
ChkArg(phWndCurrent)
ClientProcessUtils::GetWindowHandle
ChkHr(CoGetCallerTID(&callerThreadId))
ChkHr(spCoreWinInterop->get_WindowHandle(phWndCurrent))
ChkHr(EnsureWindowFromCallingProcess(*phwndOwner))
ClientProcessUtils::GetCallingAppWindowHandle
ClientProcessUtils::GetCallingAppWindowHandleFromThreadId
ChkWin32(Expr)
ChkHr(spCoreAppPrivate->GetWindowFromThreadId(callerThreadId, &spCoreWindow))
ChkHr(CoreQueryApplicationService(processId, __uuidof(ICoreApplication), __uuidof(**(&spCoreAppPrivate)), IID_PPV_ARGS_Helper(&spCoreAppPrivate)))
ChkReturn(HRESULT_FROM_WIN32(1168L))
ChkHr(GetWindowHandle(spCoreWindow.Get(), &hwnd))
ChkHr(bstr.Initialize(L"", 0))
ClientProcessUtils::GetCallingAppPackageFullName
ChkHr(packageFullName.Set(bstr.Get()))
ChkHr(getProcessPackageResult)
ChkHr(GetCallingAppPackageFullName(fullName.GetAddressOf()))
ChkHr(packageFullName.Set(requestorFullName))
ChkHr(packageFamilyName.Set(requestorFamilyName))
ClientProcessUtils::GetCallingAppPackageFamilyName
ClientProcessUtils::GetCallingAppName
ChkHr(GetCallingAppPackageFullName(packageFullName.GetAddressOf()))
ChkHr(spPackageStatics->GetByPackageFullName(packageFullName.Get(), package.GetAddressOf()))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Internal_StateRepository_Package).Get(), &spPackageStatics))
ClientProcessUtils::GetCallingAppSessionGuid
ChkHr(package->GetDisplayNameLocalized(appName))
ChkHr(HRESULT_FROM_WIN32(RtlNtStatusToDosError(status)))
ChkHr(hrCallContext)
ClientProcessUtils::GetSidForUser
ChkHr(UserAwareCallerIdentity::GetCallingProcessUserContext(&userContextToken))
ChkHr(userMgr.As(&signInMgr))
ChkHr(Windows::Foundation::GetActivationFactory(UserManagerClassId.Get(), &userMgr))
ChkHr(UMgrQueryUserToken(userContextToken, &userToken))
ChkHr(signInMgr->GetHandleForUser(user, &userContextToken))
ChkAlloc(tokenUser)
ChkHr(HRESULT_FROM_WIN32(error))
ClientProcessUtils::GetAppContentTypeForInstalledPackage
ChkHr(WindowsCreateString(sidString, (UINT32)wcslen(sidString), sid))
ChkHr(hrGetPackage)
ChkHr(package->get_PackageType(&packageType))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Internal_StateRepository_TargetDeviceFamily).Get(), &spTargetDeviceFamilyStatics))
ChkHr(package->get_TargetDeviceFamily(&foreignKey))
ChkHr(spTargetDeviceFamily->get_Name(&targetPlatform))
ChkHr(spTargetDeviceFamilyStatics->Get(foreignKey, &spTargetDeviceFamily))
ClientProcessUtils::EnsureWindowFromCallingProcess
ChkHr(HRESULT_FROM_WIN32(50L))
ChkHr(spCallingProcessInfo->OpenCallerProcessHandle((0x1000), &callingProcessHandle))
ChkHr(CoGetCallContext(__uuidof(**(&spCallingProcessInfo)), IID_PPV_ARGS_Helper(&spCallingProcessInfo)))
ClientProcessUtils::GetCallingAppSupportsMultipleUser
ChkBool(callingProcessId == hwndProcessId, ((HRESULT)0x80070005L))
ChkHr(IsCallerERA(&isERA))
ChkHr(package->get_EffectiveSupportedUsers(&supportedUsers))
ChkHr(GetCallingAppSupportsMultipleUser(&supportsMultipleUsers))
ClientProcessUtils::CheckMultipleUserSupport
ClientProcessUtils::GetModalExperienceManager
ChkHr(Windows::Foundation::GetActivationFactory( Microsoft::WRL::Wrappers::HStringReference(RuntimeClass_Windows_Internal_Shell_ModalExperience_ModalExperienceManager).Get(), &memStatics))
ClientProcessUtils::GetCallingAppPackage
ChkHr(memStatics->GetModalExperienceManager(modalExperienceManager))
ChkHr(spPackageManager->FindPackageByPackageFullName(fullName.Get(), ppPackage))
ChkHr(ActivateInstance( HStringReference(RuntimeClass_Windows_Management_Deployment_PackageManager).Get(), &spPackageManager))
ChkHr(spPackageManager->FindPackageByUserSecurityIdPackageFullName(sidString.Get(), fullName.Get(), ppPackage))
ChkHr(GetSidForUser(user, sidString.GetAddressOf()))
S-1-15-2-778011547-1096124574-1799322564-3972718560-253206704-1472347756-15051174
ClientProcessUtils::GetCallerTokenFromComCall
Windows::Internal::NativeString<class Windows::Internal::CoTaskMemPolicy<unsigned short> >::_Initialize
::wcslen(_pszStringData) == _cchStringData
onecore\internal\shell\inc\windowsinternalstring.h
Windows::Internal::NativeString<class Windows::Internal::CoTaskMemPolicy<unsigned short> >::_EnsureCapacity
_pszStringData == nullptr
Windows::Internal::NativeString<class Windows::Internal::CoTaskMemPolicy<unsigned short> >::_EnsureCount
((_pszStringData == nullptr) && (_cchStringData == 0)) || ((_pszStringData == nullptr) && (_cchStringDataCapacity == s_cchUnknown)) || ((_pszStringData != nullptr) && (_cchStringData == ::wcslen(_pszStringData)))
(_cchStringData <= _cchStringDataCapacity) || (_cchStringDataCapacity == s_cchUnknown)
Windows.Internal.StateRepository.TargetDeviceFamily
application/json
OPTIONAL
GetHttpResponse
ChkHr(Windows::Foundation::GetActivationFactory( HStringReference(RuntimeClass_Windows_Foundation_Uri).Get(), &uriFactory))
ChkHr(uriFactory->CreateUri(hstrURL, &uri))
onecoreuap\enduser\winstore\licensing\winrt\lib\iaputils.cpp
ChkHr(headers.As(&headersMap))
ChkHr(pHttpClient->get_DefaultRequestHeaders(&headers))
ChkHr(headersMap->Insert(HStringReference(L"MS-CV").Get(), cv.GetHStringReference().Get(), &replaced))
MS-CV
ChkHr(pHttpClient->PostAsync(uri.Get(), pRequestContent, &requestOperation))
ChkHr(pHttpClient->GetAsync(uri.Get(), &requestOperation))
ChkHr(pHttpClient->PutAsync(uri.Get(), pRequestContent, &requestOperation))
ChkHr(pHttpClient->DeleteAsync(uri.Get(), &requestOperation))
ChkHr(methodStatics->get_Head(&method))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Web_Http_HttpMethod).Get(), &methodStatics))
ChkHr(methodStatics->get_Patch(&method))
ChkHr(methodStatics->get_Options(&method))
ChkHr(requestFactory->Create(method.Get(), uri.Get(), &message))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Web_Http_HttpRequestMessage).Get(), &requestFactory))
ChkHr(pHttpClient->SendRequestAsync(message.Get(), &requestOperation))
ChkHr(message->put_Content(pRequestContent))
ChkHr(responseMessage->get_Content(&responseContent))
ChkHr(BlockOnCompletionAndGetResults(requestOperation.Get(), &responseMessage))
ChkHr(BlockOnCompletionAndGetResults(readOperation.Get(), phstrContent))
ChkHr(responseContent->ReadAsStringAsync(&readOperation))
ChkHr(responseMessage->get_StatusCode(&httpStatusCode))
ChkHr(responseContent->TryComputeLength(&responseSizeBytes, &tryComputeLengthSucceeded))
ChkHr(JsonHelpers::Stringify(pRequest, requestJsonString.GetAddressOf()))
ChkHr(responseMessage->EnsureSuccessStatusCode(&responseSuccess))
ChkHr(Windows::Foundation::GetActivationFactory( HStringReference(RuntimeClass_Windows_Web_Http_HttpStringContent).Get(), &contentFactory))
_SendJsonToURLWithHttpClientForStringResponse
ChkHr(GetHttpResponse( pHttpClient, hstrURL, verb, pCV, requestContent.Get(), pStatusCode, hstrResponse))
ChkHr(contentFactory->CreateFromStringWithEncodingAndMediaType( requestJsonString.Get(), Windows::Storage::Streams::UnicodeEncoding::UnicodeEncoding_Utf8, JsonMediaType.Get(), &requestContent))
IAPUtils::GetDeviceContextId
ChkHr(UrlEscapeW(idValueUnescaped.GetRawBuffer(nullptr), pszIdValue, &cchIdValue, 0))
ChkHr(StringCchCopyW(pszIdValue, cchIdValue, L"Public"))
Public
IAPUtils::GetDeviceContextString
ChkHr(GetDeviceContextId(L"MOID", szEncodedMoId, (sizeof(szEncodedMoId)/sizeof(szEncodedMoId[0]))))
ChkHr(GetDeviceContextId(L"SCMID", szEncodedScmId, (sizeof(szEncodedScmId)/sizeof(szEncodedScmId[0]))))
ChkHr(GetDeviceContextId(L"OEMID", szEncodedOemId, (sizeof(szEncodedOemId)/sizeof(szEncodedOemId[0]))))
ChkAlloc(spszDestBuffer = new WCHAR[cchDestBuffer])
moId=%s&oemId=%s&scmId=%s
ChkHr(WindowsCreateString(spszDestBuffer, (UINT32)wcslen(spszDestBuffer), pDeviceContext))
ChkHr(StringCchPrintfW( spszDestBuffer, cchDestBuffer, pszFormat, szEncodedMoId, szEncodedOemId, szEncodedScmId ))
IAPUtils::GetLanguage
ChkHr(IAPUtils::GetLanguages(&spLanguages))
ChkHr(spLanguages->GetAt(0, pLanguage))
ChkHr(spLanguages->get_Size(&size))
IAPUtils::GetLanguages
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_System_UserProfile_GlobalizationPreferences).Get(), &spGlobalizationPreferences))
IAPUtils::GetLanguagesString
ChkHr(spGlobalizationPreferences->get_Languages(ppLanguages))
ChkHr(StringCchCatExW(pszLanguagesEnd, cchRemaining, L",", &pszLanguagesEnd, &cchRemaining, 0))
ChkHr(spLanguages->GetAt(i, language.GetAddressOf()))
ChkHr(StringCchCatExW(pszLanguagesEnd, cchRemaining, pszLanguage, &pszLanguagesEnd, &cchRemaining, 0))
ChkHr(IAPUtils::GetDeviceContextId(L"MOID", szEncodedMoId, (sizeof(szEncodedMoId)/sizeof(szEncodedMoId[0]))))
ChkHr(moId.Set(szEncodedMoId))
IAPUtils::GetDeviceIds
ChkHr(oemId.Set(szEncodedOemId))
ChkHr(IAPUtils::GetDeviceContextId(L"OEMID", szEncodedOemId, (sizeof(szEncodedOemId)/sizeof(szEncodedOemId[0]))))
ChkHr(scmId.Set(szEncodedScmId))
ChkHr(IAPUtils::GetDeviceContextId(L"SCMID", szEncodedScmId, (sizeof(szEncodedScmId)/sizeof(szEncodedScmId[0]))))
ChkAlloc(pwszUppercaseRegion)
IAPUtils::GetFormattedPrice
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Web_Http_HttpClient).Get(), &factory))
ChkHr(GetFormattedPriceUsingCurrencyFormatter( price, currencyCode, language.Get(), HStringReference((const WCHAR*)pwszUppercaseRegion).Get(), formattedPrice))
ChkHr(ActivateInstance(HStringReference(RuntimeClass_Windows_Web_Http_Filters_HttpBaseProtocolFilter).Get(), &filter))
IAPUtils::CreateHttpClient
ChkHr(filter2->put_MaxVersion(Windows::Web::Http::HttpVersion_Http11))
ChkHr(filter.As(&filter2))
ChkHr(httpClient->get_DefaultRequestHeaders(&headers))
ChkHr(factory->Create(filter.Get(), &httpClient))
WindowsStoreSDK
ChkHr(headers->get_UserAgent(&userAgent))
IAPUtils::CreateHttpClientWithAuthHeader
ChkHr(CreateHttpClient(&httpClient))
ChkHr(WindowsConcatString( HStringReference(L"WLID1.0=").Get(), ticket, formattedAuthToken.GetAddressOf()))
WLID1.0=
ChkHr(headers->TryAppendWithoutValidation( HStringReference(L"Authorization").Get(), formattedAuthToken.Get(), &succeeded))
Authorization
ChkHr(WinStoreAuth::AuthenticationInternal::PrefixTicketForMDollar(providerType, ticket.Get(), strPrefixAuthToken.GetAddressOf()))
ChkHr(headers->TryAppendWithoutValidation( HStringReference(L"Authorization").Get(), ticket, &succeeded))
ChkHr(strPrefixAuthToken.CopyTo(ticket.ReleaseAndGetAddressOf()))
IAPUtils::CreateHttpClientWithAuthIfAvailable
ChkHr(IAPUtils::CreateHttpClient(ppHttpClient))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader( ticket.Get(), false, ppHttpClient))
ChkHr(contentFactory->CreateFromStringWithEncodingAndMediaType( requestJsonString.Get(), Windows::Storage::Streams::UnicodeEncoding::UnicodeEncoding_Utf8, HStringReference(L"application/json").Get(), &requestContent))
IAPUtils::PostJsonToURLWithHttpClient
ChkHr(hrHttp)
ChkHr(jsonObjectStatics->Parse(responseJsonString.Get(), &responseJson))
IAPUtils::GetJsonFromURLWithHttpClient
ChkHr(GetStringFromURLWithHttpClient(pHttpClient, hstrURL, pCV, nullptr, jsonString.GetAddressOf()))
ChkHr(jsonObjectStatics->Parse(jsonString.Get(), &jsonObject))
IAPUtils::GetJsonFromURL
ChkArg(hstrUri)
ChkHr(GetJsonFromURLWithHttpClient(httpClient.Get(), hstrURL, pCV, ppJsonObject))
ChkArg(ppUri)
IAPUtils::CreateUri
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(L"Windows.Foundation.Uri").Get(), &activationFactory))
Windows.Foundation.Uri
ChkHr(SetMaxDateTime(pDateTime))
ChkHr(activationFactory.As(&uriFactory))
ChkHr(RoFileTimeToDateTime(fileTime, pDateTime))
IAPUtils::SetDateTime
IAPUtils::GetTimeSpanDifference
ChkHr(SetMaxDateTime(&maxDateTime))
IAPUtils::ParseTimeSpan
ChkHr(::WindowsTrimStringStart(timeSpanString, Space.Get(), trimmedStart.GetAddressOf()))
ChkBool(*last == ':', ((HRESULT)0x80070057L))
ChkHr(::WindowsTrimStringEnd(trimmedStart.Get(), Space.Get(), trimmedString.GetAddressOf()))
ChkBool(last == pchEnd, ((HRESULT)0x80070057L))
ChkHr(StringCchPrintfW( buffer, (sizeof(*RtlpNumberOf(buffer))), L"%s%02d:%02d:%09.6f", isNegative ? L"-" : L"", hours, minutes, seconds))
%s%02d:%02d:%09.6f
%s%d.%02d:%02d:%09.6f
IAPUtils::TimeSpanToString
ChkHr(StringHelpers::SplitString(storeId, g_pszStoreIdSeparator, &storeIdComponents))
ChkHr(StringCchPrintfW( buffer, (sizeof(*RtlpNumberOf(buffer))), L"%s%d.%02d:%02d:%09.6f", isNegative ? L"-" : L"", static_cast<int>(days), hours, minutes, seconds))
ChkHr(storeIdComponents->get_Size(&size))
IAPUtils::ParseStoreId
ChkHr(storeIdComponents->GetAt(0, pProductId))
ChkBool(size <= 3, ((HRESULT)0x80070057L))
IAPUtils::CheckProductKinds
ChkArg(productKinds)
ChkHr(spIter->get_HasCurrent(&hasCurrent))
ChkHr(productKinds->First(&spIter))
ChkHr(spIter->get_Current(value.GetAddressOf()))
ChkBool(hasCurrent, ((HRESULT)0x80070057L))
ChkBool(colon == nullptr, ((HRESULT)0x80070057L))
ChkBool(asterisk == nullptr, ((HRESULT)0x80070057L))
IAPUtils::BuildStoreId
ChkHr(::WindowsDuplicateString(productId, storeId))
ChkHr(WindowsConcatString( productIdWithSeparator.Get(), skuId, productIdSkuId.GetAddressOf()))
ChkHr(WindowsConcatString( productId, StoreIdSeparator.Get(), productIdWithSeparator.GetAddressOf()))
ChkHr(WindowsConcatString( productIdSkuId.Get(), StoreIdSeparator.Get(), productIdSkuIdWithSeparator.GetAddressOf()))
ChkHr(::WindowsDuplicateString(productIdSkuId.Get(), storeId))
ChkHr(JsonHelpers::CreateJsonArray(&jsonEntitlementFilters))
ChkHr(WindowsConcatString( productIdSkuIdWithSeparator.Get(), availabilityId, storeId))
ChkHr(spIter->get_Current(productKind.GetAddressOf()))
IAPUtils::BuildEntitlementFiltersJSON
ChkHr(JsonHelpers::AppendString(jsonEntitlementFilters, entitlementFilter.Get()))
ChkHr(WindowsConcatString(EntitlementFilterPrefix.Get(), productKind.Get(), entitlementFilter.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(::WindowsGetStringRawBuffer(productsJson, nullptr), &productsResultObject))
ChkHr(spIter->MoveNext(&hasCurrent))
ChkHr(JsonHelpers::GetNamedArray(productsResultObject, L"Products", &productsArray))
IAPUtils::CombineProductsAndCollectionsJson
items
ChkHr(JsonHelpers::ParseToJsonObject(::WindowsGetStringRawBuffer(collectionsJson, nullptr), &collectionData))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(productsArray, &productSize))
ChkHr(JsonHelpers::GetNamedArray(collectionData, L"items", &collectionDataArray))
ChkHr(collectionDataArray->GetObjectAt(collectionIndex, &collectionItem))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(collectionDataArray, &collectionSize))
ChkHr(productsArray->GetObjectAt(productIndex, &product))
ChkHr(JsonHelpers::GetNamedString(collectionItem, L"productId", collectionProductId.GetAddressOf()))
DisplaySkuAvailabilities
ChkHr(JsonHelpers::GetNamedString(product, L"ProductId", productId.GetAddressOf()))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(skuAvailabilities, &skuAvailabilitySize))
ChkHr(JsonHelpers::GetNamedArray(product, L"DisplaySkuAvailabilities", &skuAvailabilities))
ChkHr(skuAvailabilities->GetObjectAt(skuAvailabilityIndex, &skuAvailability))
SkuId
ChkHr(JsonHelpers::GetNamedObject(skuAvailability, L"Sku", &sku))
ChkHr(JsonHelpers::GetNamedString(collectionItem, L"skuId", collectionSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(sku, L"SkuId", skuId.GetAddressOf()))
ChkHr(JsonHelpers::SetNamedObject(sku, L"CollectionData", collectionItem.Get()))
CollectionData
IAPUtils::IsCallingProcessAppContainer
JsonHelpers::Stringify(productsResultObject, pCombinedJson)
CoRevertToSelf()
ChkHr(hrImpersonate)
IAPUtils::ParseUriSubstitutionTag
ChkHr(StringHelpers::TrimEnds(inputTag, 1, rawInputTag.GetAddressOf()))
ChkHr(StringHelpers::SplitString(rawInputTag.Get(), L":", &tagComponents))
ChkBool(tagComponentsSize != 0, ((HRESULT)0x80070057L))
ChkHr(tagComponents->get_Size(&tagComponentsSize))
ChkHr(tagComponents->GetAt(0, outputKey))
ChkBool(tagComponentsSize <= 3, ((HRESULT)0x80070057L))
ChkHr(tagComponents->GetAt(2, outputMeta))
ChkHr(tagComponents->GetAt(1, outputName))
IAPUtils::ConstructSlsUri
ChkHr(outputBuffer.Preallocate(uriBufferMax, &pszDest))
ChkHr(GetActivationFactory(WindowsFoundationUri.Get(), &uriEscapeStatics))
ChkHr(StringCchCopyNExW(pszRemaining, cchRemaining, pszFormatCursor, pszOpenBrace - pszFormatCursor, &pszRemaining, &cchRemaining, 0))
ChkHr(ParseUriSubstitutionTag(tag.Get(), tagKey.GetAddressOf(), tagName.GetAddressOf(), tagMeta.GetAddressOf()))
ChkHr(tag.Set(pszOpenBrace, static_cast<UINT32>(pszCloseBrace - pszOpenBrace) + 1))
ChkHr(substituteValue->get_ValueType(&valueType))
Failed to find substitute value with key %s!
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, tagName.GetRawBuffer(nullptr), &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, seenQuestionMark ? L"&" : L"?", &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, L"=", &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, escapedData.GetRawBuffer(nullptr), &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(uriEscapeStatics->EscapeComponent(substituteString.Get(), escapedData.GetAddressOf()))
ChkHr(outputBuffer.Promote(output.GetAddressOf()))
ChkHr(StringCchCopyW(pszRemaining, cchRemaining, pszFormatCursor))
onecore\internal\shell\inc\AsyncOperationHelper.h
ChkHr(StringHelpers::TrimString(output.Get(), uriOutput))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getnextusercollection.cpp
Windows::Services::Store::Internal::GetNextUserCollection::RuntimeClassInitialize
ChkAlloc(_spCV)
ChkHr(_continuationToken.Set(continuationToken))
maxPageSize
Windows::Services::Store::Internal::GetNextUserCollection::GetNextAsync
continuationToken
ChkHr(JsonHelpers::SetNamedNumber(jsonCollectionsParameters, L"maxPageSize", _maxItems))
ChkHr(IAPUtils::BuildEntitlementFiltersJSON(jsonEntitlementFilters, _productKinds.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonCollectionsParameters, L"continuationToken", _continuationToken.Get()))
relatedProductId
ChkHr(JsonHelpers::CreateJsonObject(&includeRelationship))
relationshipType
ChkHr(JsonHelpers::SetNamedString(includeRelationship, L"relatedProductId", _productStoreId.Get()))
includeRelationship
ChkHr(JsonHelpers::SetNamedString(includeRelationship, L"relationshipType", SellableBy.Get()))
ChkHr(_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetUserCollectionForParentProductByFamily, _spCV, jsonCollectionsParameters.Get(), &statusCode, jsonCollectionsString.GetAddressOf()))
ChkHr(JsonHelpers::SetNamedObject(jsonCollectionsParameters, L"includeRelationship", includeRelationship))
ChkHr(_collectionData->First(&iter))
ChkHr(JsonParser::ParseJSONStringToObject( jsonCollectionsString, this, collectionQueryResultsTable))
ChkHr(iter->get_Current(&collectionData))
ChkHr(iter->get_HasCurrent(&hasCurrent))
ChkHr(collectionDataPrivate->get_ProductId(productId.GetAddressOf()))
ChkHr(collectionData.As(&collectionDataPrivate))
ChkHr(IAPUtils::BuildStoreId( productId.Get(), skuId.Get(), nullptr, storeId.GetAddressOf()))
ChkHr(collectionDataPrivate->get_SkuId(skuId.GetAddressOf()))
ChkHr(iter->MoveNext(&hasCurrent))
ChkHr(storeIds->Append(storeId.Get()))
ChkHr(StringHelpers::Join( storeIds.Get(), false, storeIdsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join( _productKinds.Get(), false, productKindsWithCommas.GetAddressOf()))
ChkHr(JsonHelpers::SetNamedString( jsonCatalogParameters.Get(), L"productIdsWithCommas", storeIdsWithCommas.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString( jsonCatalogParameters.Get(), L"productKinds", productKindsWithCommas.GetRawBuffer(nullptr)))
ChkHr(IAPUtils::CombineProductsAndCollectionsJson( jsonCatalogString.Get(), jsonCollectionsString.Get(), productJsonResponse))
ChkHr(_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetProductsNoParent, _spCV, jsonCatalogParameters.Get(), &statusCode, jsonCatalogString.GetAddressOf()))
ChkHr(MakeAndInitialize<GetNextUserCollection>( &nextOperation, _storeContextServer.Get(), _productStoreId.Get(), _productKinds.Get(), _continuationToken.Get(), _maxItems, _user.Get(), szCV, _httpClient.Get()))
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreCollectionData>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreCollectionData>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreCollectionData>
WindowsUpdate
AddOnKeyword
MSIXVC
InAppOfferToken
ProductTitle
Language
ProductDescription
Videos
Images
PackageFamilyName
SearchTitles
LocalizedProperties
ProductKind
ChkHr(_jsonValue.SetReference(json))
Properties
onecoreuap\enduser\winstore\licensing\winrt\lib\storeproduct.cpp
Windows::Services::Store::StoreProduct::RuntimeClassInitialize
ChkHr(Vector<StoreImage*>::Make(&_images))
ChkHr(Vector<HSTRING>::Make(&_keywords))
ChkHr(JsonParser::ParseJSONToObject( json, this, ProductTable))
ChkHr(Vector<StoreVideo*>::Make(&_videos))
::WindowsDuplicateString(_storeId.Get(), pValue)
ChkHr(_SortSkus())
::WindowsDuplicateString(_language.Get(), pValue)
Windows::Services::Store::StoreProduct::get_StoreId
::WindowsDuplicateString(_title.Get(), pValue)
Windows::Services::Store::StoreProduct::get_Language
::WindowsDuplicateString(_description.Get(), pValue)
Windows::Services::Store::StoreProduct::get_Title
::WindowsDuplicateString(_inAppOfferToken.Get(), pValue)
Windows::Services::Store::StoreProduct::get_Description
::WindowsDuplicateString(_productKind.Get(), pValue)
Windows::Services::Store::StoreProduct::get_InAppOfferToken
Windows::Services::Store::StoreProduct::get_HasDigitalDownload
Windows::Services::Store::StoreProduct::get_ProductKind
ChkHr(_skus->GetAt(i, &sku))
ChkHr(_skus->get_Size(&size))
ChkHr(skuPrivate->get_FulfillmentType(fulfillmentType.GetAddressOf()))
ChkHr(sku.As(&skuPrivate))
Windows::Services::Store::StoreProduct::get_Keywords
_keywords->GetView(ppValue)
Windows::Services::Store::StoreProduct::get_Images
_images->GetView(ppValue)
Windows::Services::Store::StoreProduct::get_Videos
_videos->GetView(ppValue)
Windows::Services::Store::StoreProduct::get_Skus
_skus->GetView(ppValue)
ChkHr(sku->get_IsInUserCollection(&isInCollection))
Windows::Services::Store::StoreProduct::get_IsInUserCollection
ChkHr(_skus->First(&iter))
Windows::Services::Store::StoreProduct::get_Price
ChkHr(sku->get_Price(ppValue))
ChkHr(iter->get_Current(&sku))
ChkBool(nullptr != _storeContext, ((HRESULT)0x803F6107L))
Windows::Services::Store::StoreProduct::get_LinkUri
ChkHr(storeContextServer->GetLinkUri(storeId.Get(), uriString.GetAddressOf()))
ChkHr(get_StoreId(storeId.GetAddressOf()))
Windows::Services::Store::StoreProduct::GetIsAnySkuInstalledAsync
ChkHr(IAPUtils::CreateUri(uriString.Get(), ppValue))
Windows::Services::Store::StoreProduct::RequestPurchaseAsync
ChkHr(_storeContext->GetIsAnySkuInstalledAsync(storeId.Get(), ppOperation))
Windows::Services::Store::StoreProduct::RequestPurchaseWithPurchasePropertiesAsync
ChkHr(_storeContext->RequestPurchaseAsync(storeId.Get(), ppOperation))
ChkHr(_storeContext->RequestPurchaseWithPurchasePropertiesAsync(storeId.Get(), storePurchaseProperties, ppOperation))
ChkArg(storePurchaseProperties)
Windows::Services::Store::StoreProduct::get_PackageFamilyName
::WindowsDuplicateString(_packageFamilyName.Get(), value)
Windows::Services::Store::StoreProduct::SetStoreContext
ChkHr(_skus.As(&inspectableProducts))
ChkHr(Vector<StoreSku*>::Make(&sortedSkus))
ChkHr(_storeContext->AssociateWithStoreContext(inspectableProducts))
ChkHr(_skus->GetAt(index, &currentSku))
Windows::Services::Store::StoreProduct::_SortSkus
ChkHr(currentSkuPrivate->get_Rank(&currentRank))
ChkHr(currentSku.As(&currentSkuPrivate))
ChkHr(skuPrivate->set_ProductId(_storeId.Get()))
ChkHr(bestSku.As(&skuPrivate))
ChkHr(_skus->RemoveAt(bestIndex))
ChkHr(sortedSkus->Append(bestSku.Get()))
SearchTitleType
jsonValue->GetArray(jsonArray.GetAddressOf())
SearchTitleString
JsonHelpers::GetArraySizeFromJsonArray(jsonArray, &len)
Windows::Services::Store::JsonParser::ParseArrayOfOne
ParseJSONToObject(DEBUG_PARSER_PARAMETERS_ARGS jsonElement, pObj, table)
jsonArray->GetObjectAt(0, jsonElement.GetAddressOf())
4-RZKD[
Fsq^V
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreSku>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreSku>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreImage>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreImage>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreVideo>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreVideo>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreImage>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreVideo>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreSku>
ChkArg(pResult)
StringifiedJsonValue::GetStringifiedValue
ChkHr(JsonHelpers::Stringify(_jsonValue, _stringifiedValue.GetAddressOf()))
onecoreuap\enduser\winstore\licensing\winrt\lib\StringifiedJsonValue.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getnextstorelistingforassociatedproducts.cpp
Windows::Services::Store::Internal::GetNextAssociatedStoreProducts::RuntimeClassInitialize
BigIds
ChkHr(Vector<HSTRING>::Make(&_bigIds))
itemCount
Windows::Services::Store::Internal::GetNextAssociatedStoreProducts::GetNextAsync
skipCount
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters.Get(), L"itemCount", maxItemsAsHstring.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters.Get(), L"productKinds", productKindsWithCommas.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters.Get(), L"skipCount", skipCountAsHString.GetRawBuffer(nullptr)))
HasMorePages
ChkHr(_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetProductsByFamilyFromParent, _spCV, jsonCatalogParameters.Get(), nullptr, productJsonString.GetAddressOf()))
ChkHr(_bigIds->get_Size(&size))
ChkHr(JsonParser::ParseJSONStringToObject( productJsonString, this, productQueryResultsTable))
ChkHr(spIter->get_Current(storeId.GetAddressOf()))
ChkHr(_bigIds->First(&spIter))
ChkHr(IAPUtils::CombineProductsAndCollectionsJson( productJsonString.Get(), collectionsJsonString.Get(), productJsonResponse))
_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetUserCollectionForProducts, _spCV, jsonCollectionsParameters.Get(), nullptr, collectionsJsonString.GetAddressOf())
ChkHr(MakeAndInitialize<GetNextAssociatedStoreProducts>( &nextOperation, _storeContextServer.Get(), _productStoreId.Get(), _productKinds.Get(), _skipCount + _maxItems, _maxItems, _hasMorePages, _user.Get(), szCV, _httpClient.Get()))
ChkHr(productJsonString.CopyTo(productJsonResponse))
MDCollections
MDGetAppReceiptsMobile
MDGetAppReceiptsDesktop
OneStoreAuthenticationDomain
MDGetOneProductReceiptMobile
MDDisplayCatalog
LinkUriFormat
DeviceFamily
MDPurchase
InternalStoreEndpointExtensionUrls
StoreEndpointExtensionUrls
JSON_RESPONSE
ModalFlowSizes
RetrieveJsonResponseFromResources
ChkHr(((HRESULT)0x80004005L))
ChkHr(WindowsCreateString(pszResource, cch, jsonString))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\urihelper.cpp
UriHelperInternal::GetUriString
ChkArg(ppszUri)
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), &spJsonObjectStatics))
SLS failed to initialize correctly, falling back to built in values, this may cause problems.
ChkHr(spJsonObjectStatics->Parse(HStringReference(pszJson).Get(), &spJsonObject))
ParseSLSJson
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_ONE_STORE_CLIENT_DATA_URLS", onestoreClientData.GetAddressOf()))
JSON_RESPONSE_ONE_STORE_CLIENT_DATA_URLS
ChkHr(ParseSLSJson(onestoreClientData.GetRawBuffer(nullptr), UriHelper::s_rghstrUris, UriHelper::s_rgpszUriNames, (sizeof(*RtlpNumberOf(UriHelper::s_rghstrUris))), true))
UriHelperInternal::InitOnceCallback
ChkHr(spAnalyticsInfo->get_VersionInfo(&spVersionInfo))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_System_Profile_AnalyticsInfo).Get(), &spAnalyticsInfo))
JSON_RESPONSE_STORE_ENDPOINT_EXTENSION_URLS
ChkHr(spVersionInfo->get_DeviceFamily(deviceFamily.GetAddressOf()))
JSON_RESPONSE_INTERNAL_STORE_ENDPOINT_EXTENSION_URLS
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_STORE_ENDPOINT_EXTENSION_URLS", UriHelperV7::s_rghstrUris[UriHelperV7::StoreEndpointExtensionUrls].GetAddressOf()))
JSON_RESPONSE_MODAL_FLOW_SIZES
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_INTERNAL_STORE_ENDPOINT_EXTENSION_URLS", UriHelperV7::s_rghstrUris[UriHelperV7::InternalStoreEndpointExtensionUrls].GetAddressOf()))
ChkHr(CoCreateInstance(CLSID_SLSClient, nullptr, CLSCTX_INPROC_SERVER, __uuidof(**(&spSLSClient2)), IID_PPV_ARGS_Helper(&spSLSClient2)))
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_MODAL_FLOW_SIZES", UriHelperV7::s_rghstrUris[UriHelperV7::ModalFlowSizes].GetAddressOf()))
ChkHr(spSLSClient2->GetSLSDataChunk(GUID_StoreFrontServiceID, 0, L"//ServiceEnvironment/StoreSDK", &pszJson, &lastModified))
//ServiceEnvironment/StoreSDK
ChkHr(ParseSLSJson(pszJson, UriHelperV7::s_rghstrUrisSLS, UriHelperV7::s_rgpszUriNames, (sizeof(*RtlpNumberOf(UriHelperV7::s_rghstrUrisSLS))), false))
ChkHr(ParseSLSJson(pszJson, UriHelper::s_rghstrUris, UriHelper::s_rgpszUriNames, (sizeof(*RtlpNumberOf(UriHelper::s_rghstrUris))), false))
FormatNameValuePairs
ChkBool(pszCloseBrace != 0, ((HRESULT)0x80004005L))
ChkHr(StringCchCopyExW(pszRemaining, cchRemaining, WindowsGetStringRawBuffer(nameValuePairs[i].value, nullptr), &pszRemaining, &cchRemaining, 0x00000100))
nameValuePairs || (cNameValuePairs == 0)
ChkBool(found, ((HRESULT)0x80070057L))
cNameValuePairs >= 0
UriHelperInternal::GetUriEx
ChkHr(stringBuffer.Preallocate(urlLength, &pszFinalUri))
ChkHr(UriHelperInternal::GetUriString(rghstrUris, index, &pszInitialUri))
ChkHr(StringHelpers::TrimString(result.Get(), hstrUri))
ChkHr(FormatNameValuePairs(pszFinalUri, urlLength, pszInitialUri, nameValuePairs, cNameValuePairs, encodeParameters))
ChkHr(UriHelperInternal::GetUriString(rghstrUris, index, &pszUriBase))
UriHelperInternal::GetUriWithPathAndParametersEx
((wcschr(pszUriBase, L'{')) == 0) && "On this overload, the uri base must be *clean*; no parameters allowed"
ChkHr(StringCchCopyExW(pszRemaining, cchRemaining, pszUriBase, &pszRemaining, &cchRemaining, 0))
ChkHr(StringCchCopyExW(pszRemaining, cchRemaining, L"/", &pszRemaining, &cchRemaining, 0))
cchRemaining < urlLength && "We should have copied *something*"
ChkArg(uri < UriHelper::UriMax)
ChkHr(FormatNameValuePairs(pszRemaining, cchRemaining, pathFormat, nameValuePairs, cNameValuePairs, false))
ChkArg(uri >= 0)
UriHelper::GetUri
ChkHr(UriHelperInternal::GetUriEx(s_rghstrUris, uri, nameValuePairs, cNameValuePairs, false, hstrUri))
ChkHr(UriHelperInternal::GetUriEx(s_rghstrUris, uri, nullptr, 0, false, hstrUri))
UriHelper::GetUriWithPath
ChkArg(uriBase < UriHelper::UriMax)
ChkHr(UriHelperInternal::GetUriWithPathAndParametersEx(s_rghstrUris, uriBase, hstrPath, nullptr, 0, hstrUri))
ChkHr(UriHelperInternal::GetUriWithPathAndParametersEx( s_rghstrUris, uriBase, hstrPath, nameValuePairs, cNameValuePairs, hstrUri))
UriHelper::GetUriWithPathAndParameters
UriHelperV7::GetIndexedEntry
ChkHr(JsonHelpers::ParseToJsonArray(data.GetRawBuffer(nullptr), &spJsonUriArray))
ChkHr(_GetRawStringFromOS(uri, data.GetAddressOf()))
ChkHr(_FindUriWithIndex(requestIndex, spJsonUriArray, entry))
ChkBool(*entry != nullptr, HRESULT_FROM_WIN32(1168L))
ChkHr(JsonHelpers::ParseToJsonArray(data.GetRawBuffer(nullptr), spJsonUriArray.ReleaseAndGetAddressOf()))
UriHelperV7::GetRawString
ChkArg(uri < UriHelperV7::UriMax)
ChkHr(UriHelperInternal::GetUriString(s_rghstrUris, uri, &pszUri))
ChkHr(UriHelperInternal::GetUriString(s_rghstrUrisSLS, uri, &pszUri))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(jsonUriArray, &countUris))
ChkHr(temp.Set(pszUri))
ChkHr(jsonUriArray->GetObjectAt(index, &object))
UriHelperV7::_FindUriWithIndex
Index
UriHelperV7::_GetRawStringFromOS
UriHelperV7::_GetRawStringFromSLS
Windows.System.Profile.AnalyticsInfo
RequestPurchase
SendStoreRequest
Microsoft.StorePurchaseApp_8wekyb3d8bbwe
Microsoft.StorePurchaseApp_8wekyb3d8bbwe!App
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchaseoperation.cpp
Windows::Services::Store::PurchaseOperation::RuntimeClassInitialize
ChkHr(JsonHelpers::CreateJsonObject(&_response))
purchaseStatus
NotPurchased
ChkHr(_PFN.Set(PFN))
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"NotPurchased"))
ChkHr(storePurchaseProperties->get_ExtendedJsonData(tmp.GetAddressOf()))
ChkHr(storeProductId.Set(storeId))
ChkHr(JsonHelpers::CreateJsonObject(&_request))
ChkHr(JsonHelpers::ParseToJsonObject(tmp.GetRawBuffer(nullptr), _request.GetAddressOf()))
ChkHr(storePurchaseProperties->get_Name(tmp.GetAddressOf()))
ChkHr(JsonHelpers::SetNamedString(_request, L"StoreId", storeProductId.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"Name", tmp.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::ParseToJsonObject(WindowsGetStringRawBuffer(overrideJsonRequest, nullptr), &_request))
HasPreviewCapability
!storeProductId.IsValid() && "Shouldn't be a storeId yet in this scenario"
Version
ChkHr(JsonHelpers::SetNamedBool(_request, L"HasPreviewCapability", hasPreviewCapability))
InvokedApi
ChkHr(JsonHelpers::SetNamedString(_request, L"Version", hstrPurchaseAppAPIVersion.GetRawBuffer(nullptr)))
ModalFlow
ChkHr(JsonHelpers::SetNamedString(_request, L"InvokedApi", invokedApi))
ChkHr(JsonHelpers::ParseToJsonObject(modalFlowSizes.GetRawBuffer(nullptr), modalFlowJsonData.GetAddressOf()))
ChkHr(UriHelperV7::GetRawString(UriHelperV7::ModalFlowSizes, modalFlowSizes.GetAddressOf()))
Height
Width
Override ParentProductId
writeRatingsAndReview
ChkHr(JsonHelpers::SetNamedString(_request, L"ParentProductId", WindowsGetStringRawBuffer(appProductId, nullptr)))
ParentProductId
ChkHr(StartOperation(1))
ChkHr(_FillTheRequestWithRequiredParameters())
Windows::Services::Store::PurchaseOperation::GetResults
JsonHelpers::Stringify(_response, jsonResponse)
Windows::Services::Store::PurchaseOperation::_OnModalExperienceEvent
ChkHr(pArgs->get_State(&state))
Windows::Services::Store::PurchaseOperation::_FillTheRequestWithRequiredParameters
ChkHr(CoSwitchCallContext(nullptr, &oldCtx))
ChkHr(WinStoreAuth::ConvertWebAccountIdFromRealIdToAppForUser(_user.Get(), authType, purchaseAppPfn.Get(), userId.Get(), realId.GetAddressOf()))
ChkHr(GetPurchaseAppPfn(_user.Get(), purchaseAppPfn.GetAddressOf()))
ChkHr(IAPUtils::GetDeviceContextString(deviceContextString.GetAddressOf()))
ChkHr(JsonHelpers::SetNamedString(_request, L"UserId", realId.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"DeviceContext", deviceContextString.GetRawBuffer(nullptr)))
DeviceContext
Windows::Services::Store::PurchaseOperation::_BuildModalExperienceOptions
ChkHr(::ActivateInstance(StringReference(RuntimeClass_Windows_Internal_Shell_ModalExperience_ModalExperienceOptions).Get(), &modalExperienceOptions))
ChkHr(modalExperienceOptions->put_ExperienceTitle((nameOverride == nullptr ? HStringReference(L" ").Get() : nameOverride.Get())))
ChkHr(modalExperienceOptions->put_SuspendExemptionType(static_cast<UINT32>(PLM_TASKCOMPLETION_CATEGORY_FLAGS::PT_TC_NONE)))
ChkHr(modalExperienceOptions->put_ExperienceMinimumSize(size))
ChkHr(modalExperienceOptions->put_Centered(true))
ChkHr(modalExperienceOptions->put_ExperienceMaximumSize(size))
ChkHr(modalExperienceOptions->put_ExperienceDefaultSize(size))
Windows::Services::Store::PurchaseOperation::_Purchase
ChkHr(modalExperienceOptions->put_AllowWin32Owner(true))
ChkHr(JsonHelpers::SetNamedString(_request, L"CV", cv.GetUnicode()))
ChkHr(JsonHelpers::Stringify(_request, jsonRequestString.GetAddressOf()))
ChkHr(_BuildModalExperienceOptions(modalExperienceOptions, _size))
jsonRequest: %s
ChkHr(JsonHelpers::Stringify(_response, jsonIntialResponse.GetAddressOf()))
ChkHr(ClientProcessUtils::GetModalExperienceManager(&modalManager))
ChkHr(args->RuntimeClassInitialize( jsonRequestString.Get(), jsonIntialResponse.Get(), _size))
ChkHr(hrModalAsUser)
PurchaseMEM
ChkHr(GetPurchaseAppUserModelId(_user.Get(), purchaseAppUserModelId.GetAddressOf()))
ChkHr(signInMgr->GetHandleForUser(_user.Get(), &userContextToken))
modalManagerAsUser->ShowForContractByAppIDAsUser( purchaseAppUserModelId, StringReference(L"Windows.Launch").Get(), activatedEventArgs.Get(), modalExperienceOptions.Get(), reinterpret_cast<Windows::Internal::Shell::ViewManagerInterop::WindowInstanceId>(_hwnd), handler.Get(), userContextToken, &experienceToken)
Windows.Launch
args->SetMemInfo(experienceToken, modalManager)
modalManager->ShowForContractByAppID( purchaseAppUserModelId, StringReference(L"Windows.Launch").Get(), activatedEventArgs.Get(), modalExperienceOptions.Get(), reinterpret_cast<Windows::Internal::Shell::ViewManagerInterop::WindowInstanceId>(_hwnd), handler.Get(), &experienceToken)
ChkHr(args->get_JsonResponse(jsonResponse.GetAddressOf()))
ChkHr(args->get_ResultCode(&hr))
ChkHr(JsonHelpers::ParseToJsonObject(jsonResponse.GetRawBuffer(nullptr), _response.GetAddressOf()))
jsonResponse: %s
Windows::Services::Store::PurchaseOperation::_FirePurchaseTelemetry
ChkHr(_request->SetNamedValue(HStringReference(g_DoNotLogTheseValues[i]).Get(), nullptr))
ChkHr(JsonHelpers::Stringify(_response, jsonResponse.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(_request, jsonRequest.GetAddressOf()))
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"AlreadyPurchased"))
AlreadyPurchased
NetworkError
Windows::Services::Store::PurchaseOperation::DoWork
ServerError
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"NetworkError"))
error
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"ServerError"))
ChkHr(JsonHelpers::SetNamedNumber(_response, L"error", hrPurchase))
ChkHr(pickle->SetBlanket( punk, 0xFFFFFFFFL, 0xffffffff, ( ( OLECHAR * )( INT_PTR )-1 ), 0, 4, nullptr, EOAC_DEFAULT))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\licenseinformationserver.cpp
AllowImpersonation
Windows::ApplicationModel::Store::LicenseInformationServer::CreateInstance
ChkHr((MakeAndInitialize<LicenseInformationServer, LicenseInformationServer>(spLicenseInformationServerSingleton.GetAddressOf())))
ChkHr(CopyToNotNull(spLicenseInformationServerSingleton, value))
ChkHr(spLicenseInformationServerSingleton->Initialize(lpszPackageFullName, eAppType, pCV))
Windows::ApplicationModel::Store::LicenseInformationServer::Initialize
ChkAlloc(m_timer)
ChkHr(m_spPackageFullName.Set(packageFullName))
ChkHr(Vector<UnfulfilledConsumable*>::Make(&m_spUnfulfilledList))
ChkHr(AllowImpersonation(m_spLicenseManager.Get()))
ChkHr(CoCreateInstance( __uuidof(ApplicationLicenseManager), nullptr, (CLSCTX_INPROC_SERVER|CLSCTX_LOCAL_SERVER|CLSCTX_REMOTE_SERVER), __uuidof(**(&m_spLicenseManager)), IID_PPV_ARGS_Helper(&m_spLicenseManager)))
ChkHr(((HRESULT) ((RtlSubscribeWnfStateChangeNotification( &m_wnfLicenseChanged, WNF_LM_CONTENT_LICENSE_CHANGED, initialChangeStamp, WnfLicenseStateChangeCallback, context, nullptr, 0, 0x00000001UL)) | 0x10000000)))
ChkHr(((HRESULT) ((RtlQueryWnfStateData( &initialChangeStamp, WNF_LM_CONTENT_LICENSE_CHANGED, WnfLicenseStateChangeCallback, nullptr, nullptr)) | 0x10000000)))
refreshConsumablesAsync
ChkHr(RefreshInternalState(true, pCV))
ChkHr(spLicenseInstance->GetContentInfo(__uuidof(**(&spAppContentInfo)), IID_PPV_ARGS_Helper(&spAppContentInfo)))
Windows::ApplicationModel::Store::LicenseInformationServer::RefreshInternalState
ChkHr(m_productId.Set(bigCatId))
ChkHr(spAppContentInfo->GetCatalogId(&bigCatId))
ChkHr(spLicenseInstance->GetIsActive(&m_bActive))
ChkHr(spAppContentInfo->GetWindowsStoreAppId(&m_appId))
ChkHr(IAPUtils::SetDateTime(ftExpirationTime, &m_dtExpiration))
ChkHr(spLicenseInstance->GetIsTrial(&m_bIsTrial))
ChkHr(spProductLicenseMap->Initialize(spLicenseInstance.Get(), spUnfulfilledList.Get()))
RefreshInternalState with refreshConsumables %d, license IsActive %d, IsTrial %d
Windows::ApplicationModel::Store::LicenseInformationServer::_TimerCallback
Timer expired, triggering state refresh
Windows::ApplicationModel::Store::LicenseInformationServer::RefreshConsumables
ChkHr(Vector<UnfulfilledConsumable*>::Make(&spUnfulfilledList))
Windows::ApplicationModel::Store::LicenseInformationServer::get_ProductLicenses
ChkHr(GetUnfulfilledConsumablesOperationServer::GetUnfulfilledConsumablesSync( m_productId.Get(), pCV, nullptr, spUnfulfilledList.Get()))
ChkHr(m_pProductLicenseMap.CopyTo(ppValue))
m_bInitialized
Windows::ApplicationModel::Store::LicenseInformationServer::get_IsTrial
Windows::ApplicationModel::Store::LicenseInformationServer::get_IsActive
ChkHr(m_evtLicenseStatusChangedEvent.Add(pHandler, pCookie))
Windows::ApplicationModel::Store::LicenseInformationServer::get_ExpirationDate
ChkHr(m_evtLicenseStatusChangedEvent.Remove(iCookie))
Windows::ApplicationModel::Store::LicenseInformationServer::add_LicenseChanged
ChkHr(RefreshInternalState(false, pCV))
Windows::ApplicationModel::Store::LicenseInformationServer::remove_LicenseChanged
ChkHr(m_evtLicenseStatusChangedEvent.InvokeAll())
Windows::ApplicationModel::Store::LicenseInformationServer::CheckForChanges
Windows::ApplicationModel::Store::LicenseInformationServer::GetProductId
m_productId.CopyTo(productId)
Windows::ApplicationModel::Store::LicenseInformationServer::DumpLicensesToDebugger
License Info for app %s: (CV = %hs)
false
  ExpirationDateTime: %u/%u/%u %02u:%02u:%02u
  IsActive: %hs, IsTrial: %hs, App type: %u, Listner count: %u
not set
VALID
  Ticks until next check: %u
  LicenseManager: %hs
    <empty list>
  LicenseInstance: %hs
  UnfulfilledList: %hs
    %02u productId = %s, offerId = %s, productType = %u, skuId = %s, isTrial = %hs, catalogId = %s, expires %u/%u/%u
    %02u inAppOfferToken = %s, transId = %s, offerId = %s
Windows.Foundation.Collections.IMapView`2<String, Windows.ApplicationModel.Store.ProductLicense>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>
(PeOC
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>
ncalrpc
RpcHelpers::GetRpcHandle
ChkHr(HRESULT_FROM_RPC(RpcStringBindingComposeW(nullptr, reinterpret_cast<RPC_WSTR>(L"ncalrpc"), nullptr, nullptr, nullptr, &rpcStringBinding)))
ChkHr(HRESULT_FROM_RPC(RpcBindingFromStringBindingW(rpcStringBinding, &rpcHandle)))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\rpchelpers.cpp
ChkHr(HRESULT_FROM_RPC(RpcBindingSetAuthInfoExW( rpcHandle, nullptr, 6, 10, 0, 0, reinterpret_cast<RPC_SECURITY_QOS *>(&qos))))
ChkHr(HRESULT_FROM_WIN32(GetLastError()))
Conversion to UINT64 failed: %s
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\trialownership.cpp
Windows::Services::Store::Internal::ConvertPUIDFromDecToHex
Conversion to hex failed: %s
%016llX
https://login.microsoft.com
StoreContext.RequestDownloadAndInstallStorePackagesAsync
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::RuntimeClassInitialize
ChkHr(_Initialize( packageFullName, "StoreContext.RequestDownloadAndInstallStorePackagesAsync", storeIds, nullptr , nullptr , true , true , false , pszCV, pMessageDialogHelper, asyncId))
ChkHr(_Initialize( packageFullName, pszOperationName, storeIds, storePackageInstallOptions, nullptr , true , shouldPromptForConsent, totallySilent, pszCV, pMessageDialogHelper, asyncId))
onecoreuap\enduser\winstore\licensing\winrt\lib\downloadandinstallstorepackagesoperation.cpp
ChkArg(pStorePackageUpdateResult)
ChkHr(_Initialize( packageFullName, pszOperationName, nullptr , nullptr , pStorePackageUpdates, install, shouldPromptForConsent, totallySilent, pszCV, pMessageDialogHelper, asyncId))
ChkHr(AsyncBase::CheckValidStateForResultsCall())
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::GetResults
ChkHr(_storeIds.As(&storeIds))
ChkHr(MakeAndInitialize<StorePackageUpdateResult>( pStorePackageUpdateResult, _overallState, _updateStatuses.Get(), _queueItems.Get()))
ChkHr(_storePackageUpdates.As(&updates))
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::DoWork
ChkHr(storeContextServer->DownloadStorePackages( storeIds.Get(), _storePackageInstallOptions.Get(), cv.GetHStringReference().Get(), _shouldPromptForConsent, _totallySilent, messageDialogHelper.Get(), &_queueItems, &canceled))
ChkHr(_messageDialogHelper.As(&messageDialogHelper))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Completed, true ))
ChkHr(updates->First(&updateIterator))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Canceled, true ))
ChkHr(storeContextServer->DownloadStorePackageUpdates( updates.Get(), cv.GetHStringReference().Get(), _install, _shouldPromptForConsent, messageDialogHelper.Get(), &_queueItems, &canceled))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_OtherError, false ))
ChkHr(_queueItems->get_Size(&size))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Pending, false ))
No products found
Waiting for installs to complete
ChkHr(_AttachAllEventHandlers(_queueItems.Get()))
ChkHr(StorePackageUpdateStatusVector::Make(&storePackageUpdateStatuses))
Installs to complete, continuing
ChkHr(iterator->get_HasCurrent(&hasCurrent))
ChkHr(_updateStatusMap->First(&iterator))
ChkHr(status->get_Value(&updateStatus))
ChkHr(iterator->get_Current(&status))
ChkHr(iterator->MoveNext(&hasCurrent))
ChkHr(storePackageUpdateStatuses->Append(updateStatus))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Completed, false ))
ChkHr(storePackageUpdateStatuses->GetView(&_updateStatuses))
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_Initialize
ChkHr(_packageFullName.Set(packageFullName))
ChkHr(AsAgile(pStorePackageUpdates, &_storePackageUpdates))
ChkHr(AsAgile(storeIds, &_storeIds))
ChkArg(_messageDialogHelper)
ChkHr(AsAgile(pMessageDialogHelper, &_messageDialogHelper))
ChkHr(StorePackageUpdateStatusHashMap::Make(&_updateStatusMap))
ChkHr(EventTokenHashMap::Make(&_statusChangedTokenMap))
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_RefreshAllStatusesAndOverallState
ChkHr(StartOperation(asyncId))
ChkHr(_RefreshStatus(item.Get(), raiseEvent))
ChkHr(items->GetAt(index, &item))
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_RefreshStatus
ChkHr(item->get_PackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(installStatus->get_PackageInstallState(&queueState))
ChkHr(item->GetCurrentStatus(installStatus.GetAddressOf()))
ChkHr(installStatus->get_UpdateStatus(&newStatus))
ChkHr(installStatus->get_PackageInstallExtendedState(&entendedQueueState))
ChkHr(_updateStatusMap->Insert(packageFamilyName.Get(), newStatus, &replaced))
Moving %s to final state: %d
ChkHr(_statusChangedTokenMap->get_Size(&size))
ChkHr(_ClearEventHandler(item))
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_AttachAllEventHandlers
Status done, remaining installs: %d
ChkHr(_statusChangedTokenMap->Insert(packageFamilyName.Get(), regToken, &replaced))
ChkHr(item->add_StatusChanged( Microsoft::WRL::Callback<ITypedEventHandler<StoreQueueItem*, IInspectable*>>( this, &DownloadAndInstallStorePackagesOperation::_OnStoreQueueItemStatusChanged).Get(), &regToken))
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_ClearAllEventHandlers
Attached event handler for item %s
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_ClearEventHandler
ChkHr(_ClearEventHandler(item.Get()))
Cleared event hander for item %s
ChkHr(_statusChangedTokenMap->HasKey(packageFamilyName.Get(), &hasKey))
ChkHr(item->remove_StatusChanged(regToken))
ChkHr(_statusChangedTokenMap->Lookup(packageFamilyName.Get(), &regToken))
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_OnStoreQueueItemStatusChanged
ChkHr(_statusChangedTokenMap->Remove(packageFamilyName.Get()))
ChkHr(_RefreshStatus(item, true ))
Got event for item with Package Family Name %s after the events were unregistered.
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.EventRegistrationToken>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StorePackageUpdateStatus>>
e/X4V
StorePackageUpdateManagerUtils::StorePackageUpdateStatusEquals::operator ()
ChkHr(StringCaseInsensitiveEquals()(StorePackageUpdateLeft.PackageFamilyName, StorePackageUpdateRight.PackageFamilyName, fEquals))
onecoreuap\enduser\winstore\licensing\winrt\lib\StorePackageUpdateManagerUtils.h
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.EventRegistrationToken>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StorePackageUpdateStatus>>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.EventRegistrationToken>>
Windows.Foundation.Collections.IMapView`2<String, Windows.Foundation.EventRegistrationToken>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IMap`2<String, Windows.Foundation.EventRegistrationToken>
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_UI_Popups_MessageDialog).Get(), &_messageDialogFactory))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\messagedialoghelper.cpp
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::RuntimeClassInitialize
ChkHr(GetText(hr, cv, content.GetAddressOf(), title.GetAddressOf()))
ChkHr(_appName.Set(appName))
ChkHr(_messageDialogFactory->CreateWithTitle(content.Get(), title.Get(), &spMessageDialog))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::ShowDialog
ChkHr(initWithWindow->Initialize(_hwnd))
ChkHr(spMessageDialog.As(&initWithWindow))
ChkHr(spMessageDialog->ShowAsync(&spAsyncOperation))
ChkHr(AddCommands(hr, spMessageDialog.Get()))
ChkBool(pCommand != nullptr, ((HRESULT)0x80004004L))
ChkHr(BlockOnCompletion(spAsyncOperation.Get(), COWAIT_WAITALL))
ChkHr(pCommand->get_Id(&spPropertyValue))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::CheckDialogResults
ChkHr(spPropertyValue->GetInt32(&commandId))
ChkBool(spPropertyValue != nullptr, ((HRESULT)0x80004004L))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::ShowDialogWithResultsAsync
ChkBool(commandId == OkCommandId, ((HRESULT)0x80004004L))
ms-windows-store://signin
ChkHr(spMessageDialog->ShowAsync(ppMessageDialogOperation))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::AddCommands::<lambda_f504bdfa87e9e81d60fb40cb23fa8c33>::operator ()
ChkHr(IAPUtils::CreateUri(HStringReference(L"ms-windows-store://signin").Get(), &spUri))
ChkHr(spLauncherStatics->LaunchUriAsync(spUri.Get(), &spAsyncOperation))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_System_Launcher).Get(), &spLauncherStatics))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::AddCommands
ChkHr(pMessageDialog->get_Commands(&spCommands))
ChkHr(spCommands->Append(spCommand.Get()))
ChkHr(CreateCommand( 1020, Microsoft::WRL::Callback<Windows::UI::Popups::IUICommandInvokedHandler>( [](Windows::UI::Popups::IUICommand *) -> HRESULT { HRESULT __hr = ((HRESULT)0L);; { ComPtr<IUriRuntimeClass> spUri; { { __hr = (IAPUtils::CreateUri(HStringReference(L"ms-windows-store://signin").Get(), &spUri)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\messagedialoghelper.cpp", 138, __FSTREXP __FUNCTION__  , "ChkHr(IAPUtils::CreateUri(HStringReference(L\"ms-windows-store://signin\").Get(), &spUri))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<ILauncherStatics> spLauncherStatics; { { __hr = (GetActivationFactory(StringReference(RuntimeClass_Windows_System_Launcher).Get(), &spLauncherStatics)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\messagedialoghelper.cpp", 138, __FSTREXP __FUNCTION__  , "ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_System_Launcher).Get(), &spLauncherStatics))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<IAsyncOperation<bool>> spAsyncOperation; { { __hr = (spLauncherStatics->LaunchUriAsync(spUri.Get(), &spAsyncOperation)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\messagedialoghelper.cpp", 138, __FSTREXP __FUNCTION__  , "ChkHr(spLauncherStatics->LaunchUriAsync(spUri.Get(), &spAsyncOperation))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; } goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }).Get(), &spCommand))
ChkHr(CreateCommandWithInt32Id( 2002, OkCommandId, nullptr, spCommand.GetAddressOf()))
ChkHr(CreateCommand( 1022, nullptr, &spCommand))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::get_ContextString
ChkHr(CreateCommandWithInt32Id( 2003, DenyCommandId, nullptr, spCommand.GetAddressOf()))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Foundation_PropertyValue).Get(), spPropValueFactory.GetAddressOf()))
ChkHr(_contextString.CopyTo(value))
ChkHr(CreateCommand( uLabelId, pHandler, spCommand.GetAddressOf()))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::CreateCommandWithInt32Id
ChkHr(spCommand->put_Id(spPropertyValue.Get()))
ChkHr(spPropValueFactory->CreateInt32(id, &spPropertyValue))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::CreateCommand
ChkHr(Windows::Foundation::ActivateInstance( HStringReference(RuntimeClass_Windows_UI_Popups_UICommand).Get(), &spCommand))
ChkHr(spCommand->put_Label(HStringReference((const WCHAR*)pszContent).Get()))
ChkHr(LoadFormattedString( uLabelId, nullptr, &pszContent))
ChkArg(pszBuffer)
ChkHr(spCommand->put_Invoked(pHandler))
ChkHr(spCoreAppPrivate->GetAppDisplayName(appName.GetAddressOf()))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::GetAppName
ChkHr(GetActivationFactory( HStringReference(RuntimeClass_Windows_Internal_StateRepository_Package).Get(), &spPackageStatics))
ChkHr(GetPackageFamilyNameFromToken(spProcessToken, &pkgFamilyNameSize, pkgFamilyName))
ChkHr(spPackages->get_Size(&packageCount))
ChkHr(spPackageStatics->FindByPackageFamilyNameAndPackageType( HStringReference(pkgFamilyName).Get(), PackageType_Main | PackageType_Xap, &spPackages))
ChkHr(spPackages->GetAt(0, &spPackage))
ChkBool(packageCount > 0, ((HRESULT)0x80004005L))
ChkHr(spPackageResolverStatics->Create(spPackage.Get(), &spPackageResolver))
ChkHr(GetActivationFactory( HStringReference(RuntimeClass_Windows_Internal_StateRepository_PackageResourceResolver).Get(), &spPackageResolverStatics))
ChkHr(hrCopy)
ChkHr(spPackageResolver->GetDisplayNameLocalized(appName.GetAddressOf()))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::GetText
ChkHr(GetAppName(szArgument, (sizeof(*RtlpNumberOf(szArgument)))))
ChkHr(StringCchPrintfW(szArgument, (sizeof(*RtlpNumberOf(szArgument))), L"0x%X", hr))
ChkHr(LoadFormattedString( uTitleId, nullptr, &pszTitle, &szArgument))
ChkHr(LoadFormattedString(uContentId, cv, &pszContent, &szArgument, &szArgument2))
ChkHr(hstrTitle.Set(pszTitle))
ChkHr(hstrContent.Set(pszContent))
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::LoadFormattedString
ChkBool(LoadStringW(g_hinst, uId, szUnformattedString, (sizeof(*RtlpNumberOf(szUnformattedString)))), HRESULT_FROM_WIN32(GetLastError()))
ChkHr(FormatStrings(L"%1\n[CV:%2]", ppszFormattedString, pszMessage, WindowsGetStringRawBuffer(cv, nullptr)))
[CV:%2]
Windows.Internal.StateRepository.PackageResourceResolver
Windows.System.Launcher
#$QChkHr(_jsonRequest.Set(jsonRequest))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\backgroundtaskoperation.cpp
Windows::Services::Store::BackgroundTaskOperation::RuntimeClassInitialize
Windows::Services::Store::BackgroundTaskOperation::GetResults
ChkHr(_cv.Set(cv))
ChkHr(JsonHelpers::ParseToJsonObject(_jsonRequest.GetRawBuffer(nullptr), jsonDataObj.GetAddressOf()))
ChkHr(_jsonResponse.CopyTo(pValue))
AppServiceName
Windows::Services::Store::BackgroundTaskOperation::DoWork
ChkHr(JsonHelpers::SetNamedString(jsonDataObj, L"CV", _cv.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::GetNamedString(jsonDataObj, L"AppServiceName", appServiceName.GetAddressOf()))
ChkHr(pdConnection->put_AppServiceName(appServiceName.Get()))
ChkHr(ActivateInstance(AppServiceConnectionRef.Get(), &pdConnection))
ChkHr(pdConnection->OpenAsync(&openOperation))
ChkHr(pdConnection->put_PackageFamilyName(purchaseAppPfn.Get()))
ChkHr(((HRESULT)0x80270254L))
ChkHr(BlockOnCompletionAndGetResults(openOperation.Get(), &status))
ChkHr(ActivateInstance(ValueSetRef.Get(), &message))
ChkHr(((HRESULT)0x803F610CL))
ChkHr(pdConnection->SendMessageAsync(message.Get(), sendMessageOperation.GetAddressOf()))
ChkHr(ConvertJsonObjectToPropertySet(jsonDataObj, message))
ChkHr(response->get_Status(&responseStatus))
ChkHr(BlockOnCompletionAndGetResults(sendMessageOperation.Get(), &response))
AppServiceResponseStatus
ChkHr(JsonHelpers::CreateJsonObject(&jsonOutput))
ChkHr(response->get_Message(&responseMessage))
ChkHr(JsonHelpers::SetNamedNumber(jsonOutput, L"AppServiceResponseStatus", responseStatus))
ChkHr(JsonHelpers::Stringify(jsonOutput, _jsonResponse.GetAddressOf()))
ChkHr(ConvertPropertySetToJsonObject(responseMessage, jsonOutput))
Windows::Services::Store::BackgroundTaskOperation::ConvertJsonObjectToPropertySet
ChkHr(propertySet.As(&propertySetMap))
ChkHr(jsonValue->get_ValueType(&jsonType))
ChkHr(GetActivationFactory(PropertyValueRef.Get(), &propertyValueFactory))
ChkHr(jsonValue->GetBoolean(&value))
ChkHr(propertyValueFactory->CreateString(value.Get(), propValue.GetAddressOf()))
ChkHr(propertyValueFactory->CreateEmpty(propValue.GetAddressOf()))
ChkHr(propertyValueFactory->CreateBoolean(value, propValue.GetAddressOf()))
ChkHr(propertyValueFactory->CreateDouble(value, propValue.GetAddressOf()))
ChkHr(jsonValue->GetNumber(&value))
ChkHr(HRESULT_FROM_WIN32(1630L))
ChkHr(jsonValue->Stringify(value.GetAddressOf()))
ChkHr(propertySet.As(&propertySetIterable))
ChkHr(propertySetMap->Insert(keyName.Get(), propValue.Get(), &replaced))
ChkHr(propertySetIterable->First(&propertySetIterator))
Windows::Services::Store::BackgroundTaskOperation::ConvertPropertySetToJsonObject
ChkHr(propertySetIterator->get_Current(&currentPair))
ChkHr(propertySetIterator->get_HasCurrent(&hasCurrent))
ChkHr(value.As(&propValue))
ChkHr(currentPair->get_Value(value.GetAddressOf()))
ChkHr(propValue->GetString(stringValue.GetAddressOf()))
ChkHr(propValue->get_Type(&type))
ChkHr(propValue->GetBoolean(&boolValue))
ChkHr(JsonHelpers::SetNamedString(json, keyName.GetRawBuffer(nullptr), stringValue.GetRawBuffer(nullptr)))
ChkHr(propValue->GetDouble(&doubleValue))
ChkHr(JsonHelpers::SetNamedBool(json, keyName.GetRawBuffer(nullptr), boolValue))
ChkHr(propValue->GetInt16(&int16Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), doubleValue))
ChkHr(propValue->GetInt32(&int32Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), int16Value))
ChkHr(propValue->GetInt64(&int64Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), int32Value))
ChkHr(propValue->GetSingle(&floatValue))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), static_cast<double>(int64Value)))
ChkHr(propValue->GetUInt8(&byteValue))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), floatValue))
ChkHr(propValue->GetUInt16(&uint16Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), byteValue))
ChkHr(propValue->GetUInt32(&uint32Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), uint16Value))
ChkHr(propValue->GetUInt64(&uint64Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), uint32Value))
ChkHr(propertySetIterator->MoveNext(&hasCurrent))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), static_cast<double>(uint64Value)))
ChkHr(((HRESULT)0x8000000BL))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storequeueitem.cpp
_ConvertStoreQueueState
ChkHr(wil::com_weak_query_nothrow(this, &weakThis))
_ConvertAppInstallState
ChkHr(_appInstallItem->add_Completed(completedHandler.Get(), &_completedToken))
Windows::Services::Store::StoreQueueItem::RuntimeClassInitialize
Windows::Services::Store::StoreQueueItem::get_ProductId
ChkHr(_appInstallItem->add_StatusChanged(statusChangedHandler.Get(), &_statusChangedToken))
Windows::Services::Store::StoreQueueItem::get_PackageFamilyName
ChkHr(_appInstallItem->get_ProductId(value))
Windows::Services::Store::StoreQueueItem::get_InstallKind
ChkHr(_appInstallItem->get_PackageFamilyName(value))
false && "AppInstallItem returned an unexpected InstallType!"
ChkHr(_appInstallItem->get_InstallType(&installType))
Windows::Services::Store::StoreQueueItem::GetCurrentStatus
ChkHr(_appInstallItem->GetCurrentStatus(&appInstallStatus))
ChkHr(appInstallStatus.As(&appInstallStatus3))
ChkHr(appInstallStatus->get_InstallState(&appInstallState))
ChkHr(appInstallStatus.As(&appInstallStatusInternal))
ChkHr(appInstallStatus3->get_IsStaged(&isStaged))
ChkHr(_ConvertAppInstallState(appInstallState, isStaged, isDownloaded, &state, &extendedState))
ChkHr(appInstallStatusInternal->get_IsDownloaded(&isDownloaded))
ChkHr(appInstallStatus->get_BytesDownloaded(&packageStatus.PackageBytesDownloaded))
ChkHr(_ConvertStoreQueueState(extendedState, &packageStatus.PackageUpdateState))
ChkHr(_appInstallItem->get_PackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(appInstallStatus->get_DownloadSizeInBytes(&packageStatus.PackageDownloadSizeInBytes))
ChkHr(appInstallStatus->get_PercentComplete(&percentComplete))
Converted Store Queue State for Package %s - AppInstallState: %d and IsStaged: %s and IsDownloaded: %s to StoreQueueItemState: %d and StoreQueueItemExtendedState: %d
ChkHr(MakeAndInitialize<StoreQueueItemStatus>(&status, state, extendedState, packageStatus, errorCode))
ChkHr(appInstallStatus->get_ErrorCode(&errorCode))
ChkHr(_completedEvent.Add(handler, token))
ChkHr(status.CopyTo(result))
ChkHr(_completedEvent.Remove(token))
Windows::Services::Store::StoreQueueItem::add_Completed
ChkHr(_statusChangedEvent.Add(handler, token))
Windows::Services::Store::StoreQueueItem::remove_Completed
ChkHr(_statusChangedEvent.Remove(token))
Windows::Services::Store::StoreQueueItem::add_StatusChanged
ChkHr(spThis->_appInstallItem.As(&appInstallItem2))
Windows::Services::Store::StoreQueueItem::remove_StatusChanged
ChkHr(appInstallItem2->CancelWithTelemetry(cv.GetHStringReference().Get()))
Windows::Services::Store::StoreQueueItem::CancelInstallAsync::<lambda_20c400d788d402156f2f9faf102b2a3b>::operator ()
Windows::Services::Store::StoreQueueItem::CancelInstallAsync
ChkArg(action)
Windows::Services::Store::StoreQueueItem::PauseInstallAsync::<lambda_5459d2b40bfb70f056128d7a36ecade4>::operator ()
ChkHr(MakeAsyncAction<AsyncCausalityOptions<CancelInstallAsyncOperationName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), action, TrustLevel::BaseTrust, [spThis](CNoResult &) -> HRESULT { CVHelperIncrementOnce cv(spThis->_cv); HRESULT __hr = ((HRESULT)0L);; ComPtr<IAppInstallItem2> appInstallItem2; { { __hr = (spThis->_appInstallItem.As(&appInstallItem2)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 392, __FSTREXP __FUNCTION__  , "ChkHr(spThis->_appInstallItem.As(&appInstallItem2))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (appInstallItem2->CancelWithTelemetry(cv.GetHStringReference().Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 392, __FSTREXP __FUNCTION__  , "ChkHr(appInstallItem2->CancelWithTelemetry(cv.GetHStringReference().Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
Windows::Services::Store::StoreQueueItem::PauseInstallAsync
ChkHr(appInstallItem2->PauseWithTelemetry(cv.GetHStringReference().Get()))
Windows::Services::Store::StoreQueueItem::ResumeInstallAsync::<lambda_1142cabf375a7ff171a0635a2149ec61>::operator ()
ChkHr(MakeAsyncAction<AsyncCausalityOptions<PauseInstallAsyncOperationName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), action, TrustLevel::BaseTrust, [spThis](CNoResult &) -> HRESULT { CVHelperIncrementOnce cv(spThis->_cv); HRESULT __hr = ((HRESULT)0L);; ComPtr<IAppInstallItem2> appInstallItem2; { { __hr = (spThis->_appInstallItem.As(&appInstallItem2)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 417, __FSTREXP __FUNCTION__  , "ChkHr(spThis->_appInstallItem.As(&appInstallItem2))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (appInstallItem2->PauseWithTelemetry(cv.GetHStringReference().Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 417, __FSTREXP __FUNCTION__  , "ChkHr(appInstallItem2->PauseWithTelemetry(cv.GetHStringReference().Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
Windows::Services::Store::StoreQueueItem::ResumeInstallAsync
ChkHr(appInstallItem2->RestartWithTelemetry(cv.GetHStringReference().Get()))
ChkHr(_appInstallItem.As(&item2))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<ResumeInstallAsyncOperationName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), action, TrustLevel::BaseTrust, [spThis](CNoResult &) -> HRESULT { CVHelperIncrementOnce cv(spThis->_cv); HRESULT __hr = ((HRESULT)0L);; ComPtr<IAppInstallItem2> appInstallItem2; { { __hr = (spThis->_appInstallItem.As(&appInstallItem2)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 442, __FSTREXP __FUNCTION__  , "ChkHr(spThis->_appInstallItem.As(&appInstallItem2))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (appInstallItem2->RestartWithTelemetry(cv.GetHStringReference().Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 442, __FSTREXP __FUNCTION__  , "ChkHr(appInstallItem2->RestartWithTelemetry(cv.GetHStringReference().Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(item2->get_Mandatory(value))
Windows::Services::Store::StoreQueueItem::get_IsMandatory
Windows::Services::Store::StoreQueueItem::get_IsDownloaded
ChkHr(_appInstallItem->GetCurrentStatus(&status))
ChkHr(statusInternal->get_IsDownloaded(value))
ChkHr(status.As(&statusInternal))
Windows::Services::Store::StoreQueueItem::_OnAppInstallItemStatusChanged
ChkHr(_statusChangedEvent.InvokeAll(this, nullptr))
Windows::Services::Store::StoreQueueItem::_OnAppInstallItemCompleted
ChkHr(GetCurrentStatus(&status))
ChkHr(_completedEvent.InvokeAll(this, args.Get()))
ChkHr(MakeAndInitialize<StoreQueueItemCompletedEventArgs>(&args, status.Get()))
q}X>N
Windows.Services.Store.StoreQueueItem.PauseInstallAsync
Windows.Services.Store.StoreQueueItem.ResumeInstallAsync
Windows.Services.Store.StoreQueueItem.CancelInstallAsync
Windows::Services::Store::StorePackageUpdate::RuntimeClassInitialize
ChkHr(_storeQueueItem->get_IsMandatory(&_mandatory))
ChkArg(ppPackage)
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepackageupdate.cpp
ChkHr(_package.CopyTo(ppPackage))
Windows::Services::Store::StorePackageUpdate::get_Package
Windows::Services::Store::StorePackageUpdate::get_Mandatory
ChkArg(pMandatory)
store.etl
%localappdata%\Packages\Microsoft.WindowsStore_8wekyb3d8bbwe\LocalState\store.etl
ReportingEvents.log
%windir%\SoftwareDistribution\ReportingEvents.log
StoreOperational.etl
C:\data\systemdata\etw\StoreOperational.etl
Microsoft-Windows-AppXDeploymentServer/Operational
\\?\T:\Windows\System32\Logfiles\WMI\RtBackup\StoreOperational.etl
Microsoft-Windows-Store/Operational
Microsoft-Windows-AppXDeploymentServer-Operational.evtx
Microsoft-Windows-WindowsUpdateClient/Operational
Microsoft-Windows-Store-Operational.evtx
Microsoft-Windows-TWinUI/Operational
Microsoft-Windows-WindowsUpdateClient-Operational.evtx
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\SIH
Microsoft-Windows-TWinUI-Operational.evtx
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Dnscache\Parameters\DnsPolicyConfig
registry_SIH.txt
%localappdata%\Microsoft\Windows\WER\ReportArchive
registry_DNSPolicy.txt
%windir%\Logs\WindowsUpdate
%localappdata%\Microsoft\Windows\WER\ReportQueue
%windir%\Logs\SIH
%windir%\ServiceProfiles\NetworkService\AppData\Local\Microsoft\Windows\DeliveryOptimization\logs
%windir%\Logs\dosvc
%windir%\System32\Config\SystemProfile\AppData\Local\packages\Microsoft.GamingServices_8wekyb3d8bbwe\LocalState
*.etl
%windir%\System32\LogFiles\WMI
gaming*.etl
WinStore
\\?\S:\Deployment\DeliveryOptimization\Logs
CABINET
FlushTraces
FlushTrace for %s failed
QueryTrace for %s failed
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\wscollector.cpp
AddFileToCab
ChkHr(StringCchCopyA(szDestFileNameA, (sizeof(*RtlpNumberOf(szDestFileNameA))), pszDest))
winstore
ChkHr(HRESULT_FROM_WIN32(erf.erfOper))
.report.wer.txt
report.wer
WSCollector::CollectStoreLog
GetTempPath2W failed
%WINDIR%\System32\reg.exe
PathAppendW failed
Creating reg.exe process failed
%s export "%s" "%s" /y
reg.exe process did not complete successfully. Exit Code: %d
GetExitCodeProcess failed
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_RandomAccessStreamReference).Get(), &spStreamReferenceStatics))
ChkHr(CreateRandomAccessStreamOverStream(stream, BSOS_OPTIONS::BSOS_DEFAULT, __uuidof(**(&randAccStream)), IID_PPV_ARGS_Helper(&randAccStream)))
ChkHr(spStreamReferenceStatics->CreateFromStream(randAccStream.Get(), result.GetAddressOf()))
Software\Microsoft\Windows\CurrentVersion\Store\Configuration
Software\Microsoft\Windows\CurrentVersion\Store
Software\Microsoft\Windows\CurrentVersion\Store\CurrentIdentity
Software\Microsoft\Windows\CurrentVersion\Store\MultiVariantConfig
SYSTEM\CurrentControlSet\Control\SystemInformation
Software\Policies\Microsoft\WindowsStore
onecoreuap\enduser\winstore\licensing\winrt\lib\registryhelper.cpp
ChkHr(HRESULT_FROM_WIN32(::RegSetKeyValueW(root, subKey, valueName, ( 11ul ), &value, sizeof(value))))
ChkHr(HRESULT_FROM_WIN32(::RegOpenKeyExW(root, subKey, 0, ((((0x00020000L)) | (0x0001) | (0x0008) | (0x0010)) & (~(0x00100000L))), &hKey)))
RegistryHelper::SetQwordValue
ChkHr(LocalAllocBytes(cbData, &pszBuffer))
RegistryHelper::GetStringValue
ChkHr(outValue.Set(pszBuffer))
ChkHr(HRESULT_FROM_WIN32(::RegGetValueW(hKey, nullptr, valueName, 0x00000002, nullptr, pszBuffer, &cbData)))
RegistryHelper::SetStringValue
ChkHr(ULongMult(static_cast<DWORD>(wcslen(value)) + 1, sizeof(*value), &dwSize))
ChkHr(HRESULT_FROM_WIN32(::RegSetKeyValueW(root, subKey, valueName, ( 1ul ), value, dwSize)))
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_HardwareManufacturerId
ChkHr(_hstrHardwareManufacturerId.CopyTo(value))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storehardwaremanufacturerinfoserver.cpp
ChkHr(_hstrStoreContentModifierId.CopyTo(value))
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_StoreContentModifierId
ChkHr(_hstrModelName.CopyTo(value))
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_ModelName
ChkHr(_hstrManufacturerName.CopyTo(value))
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_ManufacturerName
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_HardwareManufacturerId
ChkHr(_hstrHardwareManufacturerId.Set(value))
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_StoreContentModifierId
ChkHr(_hstrStoreContentModifierId.Set(value))
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_ModelName
ChkHr(_hstrModelName.Set(value))
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_ManufacturerName
ChkHr(_hstrManufacturerName.Set(value))
ChkHr(threadContext._PFN.Set(PFN))
ChkHr(threadContext.DoWork())
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\PurchaseSTAHelper.h
ChkHr(threadContext._inAppOfferToken.Set(inAppOfferToken))
ChkHr(threadContext._devOfferId.Set(devOfferId))
CClientSTAHelper::ProductPurchaseViaInAppOfferTokenWithDisplayData
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::RuntimeClassInitialize
ChkHr(threadContext._nameOverride.Set(nameOverride))
ChkHr(_hstrInAppOfferToken.Set(inAppOfferToken))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\requestproductpurchasewithdisplaypropertiesoperationserver.cpp
ChkHr(CoGetCallerTID(&_callerThreadId))
ChkHr(_hstrDevOfferId.Set(devOfferId))
ChkArg(ppPurchaseResults)
ChkHr(StartOperation(iAsyncId))
ChkBool(spLicenseInfoServer != nullptr, ((HRESULT)0x803F6107L))
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::GetResults
ChkHr(nameOverride.Set(L""))
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::DoWork
ChkHr(spLicenseInfoServer.As(&licenseInfo))
ChkHr(_spDisplayProperties->get_Name(nameOverride.GetAddressOf()))
ChkHr(_CreatePurchaseResultsInformation( productPurchaseStatus, transactionId, receipt.Get(), &_spPurchaseResults))
ChkHr(licenseInfo->get_IsTrial(&isTrial))
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::_CreatePurchaseResultsInformation
ChkAlloc(spPurchaseResults)
ChkHr(spPurchaseResults->Initialize( productPurchaseStatus, transactionId, pszReceipt, _hstrDevOfferId.Get()))
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.PurchaseResults>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::ApplicationModel::Store::PurchaseResults *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::ApplicationModel::Store::PurchaseResults *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.PurchaseResults>
ChkHr(JsonHelpers::GetNamedString(pagingInfo, L"continuationToken", ContinuationToken))
pagingInfo
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\collectionsserviceproxy.cpp
GetContinuationToken
ChkHr(JsonHelpers::CreateJsonObject(&spBeneficiary))
CreateGetItemsRequest
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"identityType", L"msa"))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"localTicketReference", L"0"))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"identityValue", MsaTicket))
ChkHr(JsonHelpers::AppendObject(spBeneficiaryArray, spBeneficiary))
ChkHr(JsonHelpers::CreateJsonArray(&spBeneficiaryArray))
beneficiaries
ChkHr(JsonHelpers::CreateJsonObject(&spRequest))
expandSatisfyingItems
ChkHr(JsonHelpers::SetNamedArray(spRequest, L"beneficiaries", spBeneficiaryArray))
ChkHr(JsonHelpers::SetNamedString(spRequest, L"market", market.Get()))
ChkHr(JsonHelpers::SetNamedBool(spRequest, L"expandSatisfyingItems", false))
validityType
Valid
ChkHr(UriHelper::GetUri(UriHelper::MDCollections, collectionsUriBase.GetAddressOf()))
ChkHr(JsonHelpers::SetNamedString(spRequest, L"validityType", L"Valid"))
ChkHr(StringCchCopyW(szQueryUri, (sizeof(*RtlpNumberOf(szQueryUri))), collectionsUriBase.GetRawBuffer(nullptr)))
CollectionsServiceProxyV6::GetCampaignId
ChkHr(StringCchCatW(szQueryUri, (sizeof(*RtlpNumberOf(szQueryUri))), L"v6.0/collections/query"))
v6.0/collections/query
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader(authTicket.Get(), false, &httpClient))
ChkHr(AuthenticationInternal::GetStorePrimaryAccountTicket( 0, AuthenticationEndpoint::OneStore, PromptType::Silent, false, nullptr, authTicket.GetAddressOf(), providerType, spWebTokenRequestResult.GetAddressOf()))
Application
ChkHr(JsonHelpers::CreateJsonArray(&productTypes))
ChkHr(CreateGetItemsRequest(authTicket.GetRawBuffer(nullptr), &request))
ChkHr(JsonHelpers::AppendString(productTypes, L"Application"))
ChkHr(JsonHelpers::SetNamedArray(request, L"productTypes", productTypes))
productTypes
ChkHr(hrPost)
ChkHr(JsonHelpers::SetNamedArray(request, L"productSkuIds", productSkuIds))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(items, &count))
ChkHr(JsonHelpers::GetNamedArray(response, L"items", &items))
ChkHr(items->GetObjectAt(i, &item))
ChkHr(JsonHelpers::GetNamedString(item, L"skuType", skuType.GetAddressOf()))
skuType
CollectionsServiceProxyV6::GetUnfulfilledConsumables
campaignId
ChkHr(JsonHelpers::SetNamedString(request, L"parentProductId", ParentProductId))
ChkHr(JsonHelpers::AppendString(productTypes, L"UnmanagedConsumable"))
ChkHr(((HRESULT)0x83750007L))
ChkHr(JsonHelpers::SetNamedString(request, L"continuationToken", continuationToken.Get()))
CollectionsServiceProxyV6::ConsumeConsumable
ChkHr(Items.Append(item))
ChkHr(StringCchCatW(szQueryUri, (sizeof(*RtlpNumberOf(szQueryUri))), L"v6.0/collections/consume"))
v6.0/collections/consume
beneficiary
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"identityValue", authTicket.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(request, L"productId", catalogProductId))
ChkHr(JsonHelpers::SetNamedObject(request, L"beneficiary", spBeneficiary))
ChkHr(JsonHelpers::SetNamedString(request, L"transactionId", transactionId))
&platformDependencyName=Windows.Windows8x
&platformDependencyName=Windows.Universal
&platformDependencyName=Windows.WindowsPhone8x
{marketCode}
{productId}
{market}
{languages}
v6/products/{productId}?market={marketCode}&languages={languages}&fieldsTemplate=Full
{platformDependencyNameParam}
v6/products?rank=PackageFamilyName&alternateId={productId}&market={marketCode}&languages={languages}&fieldsTemplate=Full
v6/products?rank=ProductSearchApps&market={market}&languages={languages}&addOnParent={productId}&fieldsTemplate=Full{platformDependencyNameParam}
neutral
v6/skus?rank=ContentId&alternateId={productId}&market={marketCode}&languages={languages}&fieldsTemplate=Full
CSP6Internal::CreateCatalogHttpClient
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader(ticket.Get(), true, ppHttpClient))
CatalogServiceProxyV6::GetProduct
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\catalogserviceproxy.cpp
ChkHr(CSP6Internal::CreateCatalogHttpClient(&httpClient))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetProductDetailsPath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrUri.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedObject(spJsonObject, L"Product", ppJsonObject))
ChkHr(IAPUtils::GetJsonFromURLWithHttpClient(httpClient.Get(), hstrUri.Get(), pCV, spJsonObject.GetAddressOf()))
ChkHr(HRESULT_FROM_WIN32(rc))
CatalogServiceProxyV6::QueryCatalogForBigCatIdByPackageFullNameAndType
ChkHr(GuidToStringWithoutBraces(&guidContentId, szContentId))
ChkHr(GetContentId(szPackageFamilyName, cpt, &guidContentId))
ChkHr(IAPUtils::GetJsonFromURL(hstrUri.Get(), pCV, &jsonObject))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetSearchSkusByContentIdPath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrUri.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedObject(jsonObject, L"DisplaySkuSearchResult", &displayProductSearchResult))
DisplaySkuSearchResult
ChkHr(JsonHelpers::GetNamedInteger(displayProductSearchResult, L"TotalResultCount", (int *)&count))
TotalResultCount
ChkHr(products->GetObjectAt(0, &firstProduct))
ChkHr(JsonHelpers::GetNamedArray(displayProductSearchResult, L"Products", &products))
ChkHr(IAPUtils::GetMarket(hstrMarket.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(firstProduct, L"ProductId", bigCatIdOut))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetSearchProductsByPackageFamilyNamePath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrUri.GetAddressOf()))
CatalogServiceProxyV6::QueryCatalogForBigCatIdByPackageFullName
ChkHr(JsonHelpers::GetNamedObject(jsonObject, L"DisplayProductSearchResult", &displayProductSearchResult))
DisplayProductSearchResult
v6.0/users/me/keys
ChkHr(JsonHelpers::GetNamedString(firstProduct, L"ProductId", bigCatId))
CatalogServiceProxyV6::GetCustomerPurchaseId
ChkHr(UriHelper::GetUriWithPath( UriHelper::MDPurchase, HStringReference(L"v6.0/users/me/keys").Get(), purchaseKeysUri.GetAddressOf()))
v6.0/beneficiaries/me/keys
ChkHr(GetB2BKey(purchaseKeysUri.Get(), serviceTicket, publisherUserId, pCV, purchaseId))
CatalogServiceProxyV6::GetCustomerCollectionsId
ChkHr(UriHelper::GetUriWithPath( UriHelper::MDCollections, HStringReference(L"v6.0/beneficiaries/me/keys").Get(), collectionKeysUri.GetAddressOf()))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader(authTicket.Get(), true, &httpClient))
ChkHr(GetB2BKey(collectionKeysUri.Get(), serviceTicket, publisherUserId, pCV, collectionsId))
ChkHr(JsonHelpers::SetNamedString(request, L"serviceTicket", serviceTicket))
CatalogServiceProxyV6::GetB2BKey
ChkHr(JsonHelpers::GetNamedString(response, L"key", key))
ChkHr(JsonHelpers::SetNamedString(request, L"publisherUserId", publisherUserId))
CatalogServiceProxyV6::AddOnsIterator::Initialize
ChkBool(!_hstrUri.IsValid(), HRESULT_FROM_WIN32(1247L))
ChkBool(_hstrUri.IsValid(), HRESULT_FROM_WIN32(1003L))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetSearchAddOnsPath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), _hstrUri.GetAddressOf()))
ChkHr(GetNextBatch())
CatalogServiceProxyV6::AddOnsIterator::GetNext
ChkHr(_currentBatch->GetObjectAt(_currentItemIndex, ppJsonIAP))
CatalogServiceProxyV6::AddOnsIterator::GetNextBatch
ChkHr(CSP6Internal::CreateCatalogHttpClient(&_httpClient))
%ws&$skip=%u
ChkHr(IAPUtils::GetJsonFromURLWithHttpClient( _httpClient.Get(), HStringReference(szNextUrl).Get(), _spCV, &jsonIAPs))
ChkHr(StringCchPrintfW( szNextUrl, (sizeof(*RtlpNumberOf(szNextUrl))), _runningCount == 0 ? L"%ws" : L"%ws&$skip=%u", _hstrUri.GetRawBuffer(nullptr), _runningCount))
ChkHr(JsonHelpers::GetNamedInteger(displayProductSearchResult, L"TotalResultCount", &totalResultCount))
ChkHr(JsonHelpers::GetNamedObject(jsonIAPs, L"DisplayProductSearchResult", &displayProductSearchResult))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(_currentBatch, &_currentBatchCount))
ChkHr(JsonHelpers::GetNamedArray(displayProductSearchResult, L"Products", &_currentBatch))
OrderManagementData
GetPriceInfoFromAvailability
ChkHr(JsonHelpers::GetNamedObject(spAvailability, L"OrderManagementData", &orderManagementData))
Price
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\appinfo.cpp
CurrencyCode
ChkHr(JsonHelpers::GetNamedObject(orderManagementData, L"Price", &price))
CurrencySymbol
ChkHr(JsonHelpers::GetNamedString(price, L"CurrencyCode", &pricingInfo->CurrencyCode))
ChkHr(JsonHelpers::GetNamedValue(price, L"ListPrice", &listPrice))
ListPrice
ChkHr(listPrice->Stringify(&pricingInfo->Price))
ChkHr(basePrice->Stringify(&pricingInfo->BasePrice))
ChkHr(JsonHelpers::GetNamedValue(price, L"MSRP", &basePrice))
ChkHr(JsonHelpers::GetNamedObject(spAvailability, L"Conditions", &conditions))
Conditions
ChkHr(JsonHelpers::GetNamedDateTime(conditions, L"EndDate", &pricingInfo->SaleEndDate))
EndDate
ChkHr(JsonHelpers::GetNamedString(spJson, L"PreferredSkuId", preferredSkuId.GetAddressOf()))
PreferredSkuId
ChkHr(JsonHelpers::GetNamedArray(spJson, L"DisplaySkuAvailabilities", &displaySkuAvailabilities))
GetPriceInfo
ChkHr(displaySkuAvailabilities->GetObjectAt(iSku, &item))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(displaySkuAvailabilities, &count))
ChkHr(JsonHelpers::GetNamedArray(item, L"Availabilities", &availabilities))
Availabilities
ChkHr(availabilities->GetObjectAt(iAvailability, &availability))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(availabilities, &countAvailabilities))
ChkHr(GetPriceInfoFromAvailability(availability, pricingInfo))
ChkHr(JsonHelpers::GetNamedString(availability, L"SkuId", skuId.GetAddressOf()))
ChkAlloc(spInAppSkuInfo)
Durable
ChkHr(JsonHelpers::GetNamedString(sku, L"SkuId", &spInAppSkuInfo->SkuId))
BuildStoreInAppSkuInfo
ChkHr(JsonHelpers::GetNamedString(sku, L"SkuType", &spInAppSkuInfo->SkuType))
SkuType
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(skuLocalizedProperties, &count))
ChkHr(JsonHelpers::GetNamedArray(sku, L"LocalizedProperties", &skuLocalizedProperties))
SkuTitle
ChkHr(skuLocalizedProperties->GetObjectAt(0, &skuFirstLocalizedProperties))
SkuDescription
ChkHr(JsonHelpers::GetNamedString(skuFirstLocalizedProperties, L"SkuTitle", &spInAppSkuInfo->Title))
ChkHr(JsonHelpers::GetNamedObject(sku, L"Properties", &skuProperties))
ChkHr(JsonHelpers::GetNamedString(skuFirstLocalizedProperties, L"SkuDescription", &spInAppSkuInfo->Description))
ChkHr(JsonHelpers::GetNamedObject(skuProperties, L"LicensingData", &skuLicensingData))
LicensingData
CustomDeveloperData
ChkHr(JsonHelpers::GetNamedString(skuLicensingData, L"ProductId", &spInAppSkuInfo->ProductId))
ChkHr(JsonHelpers::GetNamedArray(skuAvailability, L"Availabilities", &availabilities))
ChkHr(JsonHelpers::GetNamedString(skuProperties, L"CustomDeveloperData", &spInAppSkuInfo->CustomDeveloperData))
ChkHr(GetPriceInfoFromAvailability(availability, &spInAppSkuInfo->PricingInfo))
ChkHr(availabilities->GetObjectAt(0, &availability))
ExtendedData
ChkHr(JsonHelpers::GetNamedObject(availability, L"Properties", &availabilityProperties))
BuildStoreInAppInfo
ChkAlloc(spInAppOffer)
ChkHr(JsonHelpers::GetNamedArray(product, L"AlternateIds", &alternateIds))
AlternateIds
ChkHr(alternateIds->GetObjectAt(iId, &altId))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(alternateIds, &count))
ChkHr(JsonHelpers::GetNamedString(altId, L"IdType", type.GetAddressOf()))
IdType
ChkHr(JsonHelpers::GetNamedString(altId, L"Value", &spInAppOffer->InAppOfferToken))
Value
ProductType
ChkHr(JsonHelpers::GetNamedString(product, L"ProductId", &spInAppOffer->InAppProductId))
ChkHr(JsonHelpers::GetNamedArray(product, L"LocalizedProperties", &localizedProperties))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductType", productType.GetAddressOf()))
ChkHr(localizedProperties->GetObjectAt(0, &properties))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(localizedProperties, &count))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductDescription", &spInAppOffer->Description))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductTitle", &spInAppOffer->Name))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(searchTitles, &countTitles))
ChkHr(JsonHelpers::GetNamedArray(properties, L"SearchTitles", &searchTitles))
ChkHr(JsonHelpers::GetNamedString(title, L"SearchTitleType", titleType.GetAddressOf()))
ChkHr(searchTitles->GetObjectAt(iTitle, &title))
ChkHr(JsonHelpers::GetNamedArray(properties, L"Images", &images))
ChkHr(JsonHelpers::GetNamedString(title, L"SearchTitleString", searchTitleString.GetAddressOf()))
ChkHr(images->GetObjectAt(iImage, &image))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(images, &countImages))
ChkHr(JsonHelpers::GetNamedString(image, L"ImagePurpose", purpose.GetAddressOf()))
ImagePurpose
ChkHr(JsonHelpers::GetNamedArray(product, L"DisplaySkuAvailabilities", &displaySkuAvailabilities))
ChkHr(JsonHelpers::GetNamedString(image, L"Uri", &spInAppOffer->ImageUri))
ChkHr(JsonHelpers::GetNamedObject(firstSkuAvail, L"Sku", &firstSkuAvailSku))
ChkHr(displaySkuAvailabilities->GetObjectAt(0, &firstSkuAvail))
ChkHr(JsonHelpers::GetNamedString(firstSkuAvailSkuProperties, L"CustomDeveloperData", &spInAppOffer->ProductTag))
ChkHr(JsonHelpers::GetNamedObject(firstSkuAvailSku, L"Properties", &firstSkuAvailSkuProperties))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(displaySkuAvailabilities, &countSkuAvailabilities))
ChkHr(GetPriceInfo(product, &spInAppOffer->PricingInfo))
ChkHr(displaySkuAvailabilities->GetObjectAt(iSkuAvailability, &skuAvailability))
ChkAlloc(spInAppOffer->pInAppSkuList)
ChkHr(CatalogServiceProxyV6::GetProduct(pStoreCommerceServer->GetAppCatalogId(pCV), pCV, &product))
ChkHr(BuildStoreInAppSkuInfo(skuAvailability.Get(), &spInAppSkuInformation))
ChkAlloc(spStoreAppInfo)
StoreInfoBuilders::BuildStoreAppInfo
ChkHr(temp.Set(wszAppId))
ChkHr(GuidToStringWithoutBraces(&pStoreCommerceServer->GetAppId(), wszAppId))
ChkHr(IAPUtils::GetLanguage(temp.GetAddressOf()))
ChkHr(IAPUtils::GetMarket(temp.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductTitle", &spStoreAppInfo->Name))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductDescription", &spStoreAppInfo->Description))
MinimumUserAge
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(marketProperties, &count))
ChkHr(GetPriceInfo(product, &spStoreAppInfo->PricingInfo))
ChkHr(JsonHelpers::GetNamedInteger(marketProperty, L"MinimumUserAge", &rating))
ChkHr(addOns.GetNext(&jsonIAP))
ChkHr(addOns.Initialize(pStoreCommerceServer, pCV))
ChkAlloc(spStoreAppInfo->pInAppOfferList)
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo>
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::Initialize
ChkArg(pAppInformation)
ChkArg(pInAppInformation)
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewproductinfoserver.cpp
ChkHr(_hstrProductType.Set(L"Durable"))
ChkHr(_hstrProductId.Set(pInAppInformation->InAppProductId))
Unknown
ChkHr(_hstrProductType.Set(L"Consumable"))
ChkHr(_hstrTitle.Set(pInAppInformation->Name))
ChkHr(_hstrProductType.Set(L"Unknown"))
ChkHr(AgileVector<StorePreviewSkuInfo*>::Make(&spSkuInfoList))
ChkHr(_hstrDescription.Set(pInAppInformation->Description))
ChkHr(spSkuInfo->Initialize( locale, market, pAppInformation, pInAppInformation, pInAppSku))
ChkAlloc(spSkuInfo = Make<StorePreviewSkuInfoServer>())
ChkHr(spSkuInfoList->GetView(&_spSkuInfoList))
ChkHr(spSkuInfoList->Append(spSkuInfo.Get()))
ChkHr(_hstrProductId.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_ProductId
ChkHr(_hstrProductType.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_ProductType
ChkHr(_hstrTitle.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_Title
ChkHr(_hstrDescription.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_Description
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_SkuInfoList
ChkHr(ProductIdHashMap::Make(&hashMap))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productidcache.cpp
ProductIdCache::RuntimeClassInitialize
ChkHr(ProductIdFromInAppOfferTokenTable(inAppOfferToken, productId))
ChkHr(hashMap.As(&_productIdTable))
ChkHr(RefreshTableFromService(parentProductId, pCV))
ProductIdCache::ProductIdFromInAppOfferToken
ProductIdCache::AddItem
ChkHr(_productIdTable->Insert(inAppOfferToken, productId, &dontCare))
ProductIdCache::ProductIdFromInAppOfferTokenTable
ChkHr(_productIdTable->HasKey(inAppOfferToken, &hasKey))
ChkHr(CollectionsServiceProxyV6::GetUnfulfilledConsumables(parentProductId, pCV, items))
ChkReturn(_productIdTable->Lookup(inAppOfferToken, productId))
ChkHr(JsonHelpers::GetNamedString(item, L"productId", productId.GetAddressOf()))
ProductIdCache::RefreshTableFromService
ChkHr(AddItem(inAppOfferToken.Get(), productId.Get()))
ChkHr(JsonHelpers::GetNamedString(item, L"inAppOfferToken", inAppOfferToken.GetAddressOf()))
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
Windows.Foundation.Collections.IKeyValuePair`2<String, String>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
Windows.Foundation.Collections.IMapView`2<String, String>
Windows.Foundation.Collections.IMap`2<String, String>
CClientSTAHelper::AppPurchase
Windows::ApplicationModel::Store::RequestAppPurchaseOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::RequestAppPurchaseOperationServer::GetResults
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\apppurchaseoperationserver.cpp
ChkHr(_hstrReceipt.CopyTo(pValue))
CClientSTAHelper::ProductPurchaseViaInAppOfferToken
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productpurchaseoperationserver.cpp
Windows::ApplicationModel::Store::RequestProductPurchaseOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::RequestProductPurchaseOperationServer::DoWork
Windows::ApplicationModel::Store::RequestProductPurchaseOperationServer::GetResults
CClientSTAHelper::ProductPurchaseViaInAppOfferTokenWithResults
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\requestproductpurchasewithresultsoperationserver.cpp
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::DoWork
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::GetResults
ChkHr(spPurchaseResults->Initialize(productPurchaseStatus, transactionId, pszReceipt, nullptr))
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::_CreatePurchaseResultsInformation
UnpackHStringIIterable
ChkHr(AgileVector<HSTRING>::Make(&pVector))
ChkHr(pStrings->First(spIter.GetAddressOf()))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\loadlistingoperationserver.cpp
ChkHr(spIter->get_Current(hstrCurrent.GetAddressOf()))
ChkHr(spIter->get_HasCurrent(&fHasCurrent))
ChkHr(spIter->MoveNext(&fHasCurrent))
ChkHr(pVector->Append(hstrCurrent.Get()))
ChkHr(inAppOfferTokens->get_Size(&cInAppOfferTokens))
ChkHr(pVector.As(&pIVector))
ChkHr(inAppOfferTokens->GetAt(p, temp.GetAddressOf()))
FilterIAPs
ChkHr(pInAppInfo->spKeywords->get_Size(&cInAppOfferListKeywords))
ChkHr(keywords->get_Size(&cKeywords))
ChkHr(pInAppInfo->spKeywords->GetAt(i, inAppKeyword.GetAddressOf()))
ChkHr(keywords->GetAt(k, filterKeyword.GetAddressOf()))
DumpListingToDebugger
Listing Information (after filtering, CV = %hs):
.  AppId: %s, Name: %s
  IsUAP: %hs, Market: %s, Locale: %s, Age Rating: %u
  Description: %s%hs
  IsOnSale: false
  Price: %s, Base Price: %s, Currency Symbol: %s, Currenty Code: %s
  InAppOfferArray: %hs
  IsOnSale: TRUE, Sale End Date: %u/%u/%u %02u:%02u:%02u
      <no sku data>
    %02u offerToken = %s, productId = %s, name = %s, price = %s%s (%s), type = %u, isOnSale = %hs, tag = %s
ChkHr(StoreInfoBuilders::BuildStoreAppInfo( pStoreCommerceServer, pCV, hCancel, &spStoreAppInfo))
      %02u skuType = %s, productId = %s, title = %s, customDeveloperData = %s, price = %s%s (%s), extendedData = %s, description = %s
ChkHr(pKeywords->get_Size(&cKeywords))
CreateListingInformation
ChkAlloc(spListingInformation)
ChkHr(pInAppOfferTokens->get_Size(&cInAppOfferTokens))
Windows::ApplicationModel::Store::LoadListingOperationServer::RuntimeClassInitialize
ChkHr(spListingInformation->Initialize(spStoreAppInfo))
ChkReturn(((HRESULT)0x80040001L))
ChkHr(UnpackHStringIIterable(inAppOfferTokens, &_inAppOfferTokens))
ChkReturn(((HRESULT)0x80040002L))
ChkHr(UnpackHStringIIterable(keywords, &_keywords))
Windows::ApplicationModel::Store::LoadListingOperationServer::GetResults
ChkArg(ppListingInformation)
Windows::ApplicationModel::Store::LoadListingOperationServer::DoWork
ChkHr(CreateListingInformation( _spStoreCommerceServer.Get(), cv.Get(), _hCancelEvent, _inAppOfferTokens.Get(), _keywords.Get(), &_spListingInformation))
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.ListingInformation>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::ApplicationModel::Store::ListingInformation *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::ApplicationModel::Store::ListingInformation *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.ListingInformation>
Windows::ApplicationModel::Store::ReceiptRetrievalOperationServer::RuntimeClassInitialize
ChkArg(pReceipt)
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\receiptretrievaloperationserver.cpp
ChkHr(CopyToNotNull(_receipt, pReceipt))
Windows::ApplicationModel::Store::ReceiptRetrievalOperationServer::GetResults
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), cv.Get(), IAPReceiptType_App, nullptr, authTicket.Get(), spWebTokenRequestResult.Get(), _receipt.GetAddressOf()))
Windows::ApplicationModel::Store::ReceiptRetrievalOperationServer::DoWork
Windows::ApplicationModel::Store::ProductReceiptRetrievalOperationServer::RuntimeClassInitialize
ChkHr(_productId.Set(productId))
Windows::ApplicationModel::Store::ProductReceiptRetrievalOperationServer::GetResults
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productreceiptretrievaloperationserver.cpp
Windows::ApplicationModel::Store::ProductReceiptRetrievalOperationServer::DoWork
ChkHr(CopyToNotNull(_productReceipt, pReceipt))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), cv.Get(), IAPReceiptType_OneProduct, _productId.Get(), authTicket.Get(), spWebTokenRequestResult.Get(), _productReceipt.GetAddressOf()))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getunfulfilledconsumablesoperationserver.cpp
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::RuntimeClassInitialize
ChkArg(pUnfulfilledList)
ChkHr(Vector<UnfulfilledConsumable*>::Make(&_spUnfulfilledList))
ChkHr(_spUnfulfilledList->GetView(pUnfulfilledList))
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::GetResults
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::GetUnfulfilledConsumablesSync
ChkHr(CollectionsServiceProxyV6::GetUnfulfilledConsumables(bigCatId, pCV, items))
ChkHr(JsonHelpers::GetNamedString(item, L"transactionId", transactionIdString.GetAddressOf()))
Unfulfilled Consumables for %s (CV = %hs):
ChkHr(JsonHelpers::GetNamedString(item, L"productId", productIdString.GetAddressOf()))
ChkHr(CMiscHelpers::StringToGuid(transactionIdString.GetRawBuffer(nullptr), &transactionId))
devOfferId
ChkHr(JsonHelpers::GetNamedString(item, L"inAppOfferToken", inAppOfferTokenString.GetAddressOf()))
ChkHr(_CreateUnfulfilledConsumable( inAppOfferTokenString.Get(), transactionId, offerIdString.Get(), &consumable))
ChkHr(pProductIdCache->AddItem(inAppOfferTokenString.Get(), productIdString.Get()))
  %02u inAppOfferToken = %s, productId = %s, transId = %s, offerId = %s
ChkHr(pUnfulfilledList->Append(consumable.Get()))
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::DoWork
ChkHr(GetUnfulfilledConsumablesSync( _spStoreCommerceServer->GetAppCatalogId(cv.Get()), cv.Get(), _spStoreCommerceServer->GetProductIdCache(), _spUnfulfilledList.Get()))
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::_CreateUnfulfilledConsumable
ChkAlloc(spUnfulfilledConsumable)
ChkHr(spUnfulfilledConsumable->Initialize(pszProductId, transactionId, pszDevOfferId))
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct Windows::Foundation::Collections::IVectorView<class Windows::ApplicationModel::Store::UnfulfilledConsumable *> *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct Windows::Foundation::Collections::IVectorView<class Windows::ApplicationModel::Store::UnfulfilledConsumable *> *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
?Windows::ApplicationModel::Store::ReportConsumableFulfillmentOperationServer::RuntimeClassInitialize
ChkHr(_inAppOfferToken.Set(inAppOfferToken))
ChkArg(pFulfillmentResult)
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\reportconsumablefulfillmentoperationserver.cpp
ChkBool(pProductIdCache != nullptr, ((HRESULT)0x803F6107L))
Windows::ApplicationModel::Store::ReportConsumableFulfillmentOperationServer::GetResults
ChkHr(pProductIdCache->ProductIdFromInAppOfferToken( _inAppOfferToken.Get(), _spStoreCommerceServer->GetAppCatalogId(cv.Get()), cv.Get(), productId.GetAddressOf()))
Windows::ApplicationModel::Store::ReportConsumableFulfillmentOperationServer::DoWork
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.FulfillmentResult>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<enum Windows::ApplicationModel::Store::FulfillmentResult>,struct Windows::Foundation::IAsyncOperationCompletedHandler<enum Windows::ApplicationModel::Store::FulfillmentResult>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.FulfillmentResult>
CClientSTAHelper::ProductPurchase
ChkHr(threadContext._inAppProductId.Set(productId))
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::RuntimeClassInitialize
ChkHr(threadContext._inAppProductSkuId.Set(skuId))
ChkHr(_hstrProductId.Set(productId))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\requestproductpurchasebyskuidoperationserver.cpp
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::GetResults
ChkHr(_hstrSkuId.Set(skuId))
ChkHr(StoreInfoBuilders::BuildStoreAppInfo( _spStoreCommerceServer.Get(), cv.Get(), 0, &spStoreAppInfo))
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::DoWork
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::_CreatePurchaseResultsInformation
ChkHr(_CreatePurchaseResultsInformation( productPurchaseStatus, &_spPurchaseResults))
ChkHr(spPurchaseResults->Initialize(static_cast<StorePreviewProductPurchaseStatus>(productPurchaseStatus)))
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
ChkHr(previewLicenses.CopyTo(&_mapView))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\licensesatisfactionresult.cpp
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::RuntimeClassInitialize
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::get_LicenseSatisfactionInfos
ChkHr(_skuId.Set(skuId))
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::get_ExtendedError
ChkHr(_mapView.CopyTo(ppValue))
ChkHr(_skuId.CopyTo(pValue))
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::get_SkuId
ChkHr(License->GetIsTrial(&isTrial))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\licensesatisfactioninfo.cpp
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::RuntimeClassInitialize
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByDevice
ChkHr(License->GetLicenseGrantReason(&_grantReason))
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByTrial
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByOpenLicense
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByInstallMedia
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByPass
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_IsSatisfied
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedBySignedInUser
Windows::Services::Store::StoreRequestOperation::RuntimeClassInitialize
ChkHr(_jsonData.Set(jsonData))
onecoreuap\enduser\winstore\licensing\winrt\lib\storerequestoperation.cpp
Windows::Services::Store::StoreRequestOperation::GetResults
ChkArg(ppResults)
ChkHr(storeContextServer->SendStoreRequest( _storeContextCallerData.Get(), _requestKind, cv.GetHStringReference().Get(), _jsonData.Get(), &_statusCode, _jsonResponse.GetAddressOf()))
ChkHr(MakeAndInitialize<StoreSendRequestResult>( ppResults, _jsonResponse.Get(), _hresultOfOperation, _statusCode))
Windows::Services::Store::StoreRequestOperation::DoWork
Windows::Services::Store::GetCustomerPurchaseIdOperation::RuntimeClassInitialize
ChkHr(_serviceTicket.Set(serviceTicket))
onecoreuap\enduser\winstore\licensing\winrt\lib\getcustomerpurchaseidoperation.cpp
ChkArg(pCustomerPurchaseId)
ChkHr(_publisherUserId.Set(publisherUserId))
ChkHr(::WindowsDuplicateString(_purchaseId.Get(), pCustomerPurchaseId))
Windows::Services::Store::GetCustomerPurchaseIdOperation::GetResults
Windows::Services::Store::GetCustomerPurchaseIdOperation::DoWork
ChkHr(storeContextServer->GetCustomerPurchaseId( _serviceTicket.Get(), _publisherUserId.Get(), cv.GetHStringReference().Get(), _purchaseId.GetAddressOf()))
Windows::Services::Store::GetCustomerCollectionsIdOperation::RuntimeClassInitialize
ChkArg(pCustomerCollectionsId)
onecoreuap\enduser\winstore\licensing\winrt\lib\getcustomercollectionsidoperation.cpp
ChkHr(::WindowsDuplicateString(_collectionsId.Get(), pCustomerCollectionsId))
Windows::Services::Store::GetCustomerCollectionsIdOperation::GetResults
Windows::Services::Store::GetCustomerCollectionsIdOperation::DoWork
ChkHr(storeContextServer->GetCustomerCollectionsId( _serviceTicket.Get(), _publisherUserId.Get(), cv.GetHStringReference().Get(), _collectionsId.GetAddressOf()))
onecoreuap\enduser\winstore\licensing\winrt\lib\getofflinelicensesoperation.cpp
Windows::Services::Store::GetOfflineLicensesOperation::RuntimeClassInitialize
ChkHr(_spAppLicense.CopyTo(ppResults))
Windows::Services::Store::GetOfflineLicensesOperation::GetResults
Windows::Services::Store::GetOfflineLicensesOperation::DoWork
ChkHr(storeContextServer->GetOfflineLicenses( cv.GetHStringReference().Get(), results.GetAddressOf()))
ChkHr(MakeAndInitialize<StoreAppLicense>(&_spAppLicense,  spResults))
ChkHr(JsonHelpers::ParseToJsonObject(results.GetRawBuffer(nullptr), &spResults))
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreAppLicense>
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreAppLicense *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreAppLicense *>,0>::DoWorkStub
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAppLicense>
Windows::Services::Store::GetStoreProductOperation::RuntimeClassInitialize
ChkArg(ppStoreProductResult)
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorelistingoperation.cpp
ChkHr(MakeAndInitialize<StoreProductResult>( ppStoreProductResult, _products, _hResultOfOperation))
Windows::Services::Store::GetStoreProductOperation::GetResults
Windows::Services::Store::GetStoreProductOperation::DoWork
ChkHr(spStoreContextServer->GetProduct( cv.GetHStringReference().Get(), productJson.GetAddressOf()))
ChkHr(_products.As(&inspectableProducts))
ChkHr(JsonParser::ParseJSONStringToObject( productJson, this, queryResultsTable))
ChkHr(AsAgile(productKinds, &_productKinds))
onecoreuap\enduser\winstore\licensing\winrt\lib\bulkhydrateoperation.cpp
Windows::Services::Store::BulkHydrateOperation::RuntimeClassInitialize
ChkAlloc(_results)
Windows::Services::Store::BulkHydrateOperation::GetResults
ChkHr(_productKinds.As(&productKinds))
ChkHr(_results.CopyTo(ppResults))
ChkHr(storeContextServer->GetProductsWithOptions( productKinds.Get(), storeIds.Get(), _storeProductOptions.Get(), cv.GetHStringReference().Get(), productJsonString.GetAddressOf()))
Windows::Services::Store::BulkHydrateOperation::DoWork
MakeAndInitialize<StoreProductQueryResult>( &_results, _products, productKinds.Get(), ChkGetHr())
ChkHr(JsonParser::ParseJSONStringToObject( productJsonString, this, queryResultsTable))
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorelistingsforassociatedproductsoperation.cpp
Windows::Services::Store::GetAssociatedStoreProductsOperation::RuntimeClassInitialize
Windows::Services::Store::GetAssociatedStoreProductsOperation::DoWork
Windows::Services::Store::GetAssociatedStoreProductsOperation::GetResults
ChkHr(BlockOnCompletion(spPagedOperation.Get()))
ChkHr(MakeAndInitialize<GetAssociatedStoreProductsPagedOperation>( spPagedOperation.GetAddressOf(), _PFN.Get(), nullptr, _storeContext.Get(), cv.GetAnsi(), productKinds.Get(), -1, asyncId ))
ChkHr(hresult)
ChkHr(spPagedOperation->GetResults( &hresult, &hasMoreResults, products, spNextQueryOperation))
ChkHr(products.CopyTo(&_products))
ChkBool(_spNextQueryOperation == nullptr, ((HRESULT)0x8000FFFFL))
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorelistingsforassociatedproductspagedoperation.cpp
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::RuntimeClassInitialize
ChkHr(_spNextQueryOperation->HasMorePages(hasMorePages))
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::GetResults
ChkHr(_spNextQueryOperation.CopyTo(spNextPagedOperation.GetAddressOf()))
ChkHr(_products.CopyTo(spProducts.GetAddressOf()))
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::BeginWork
ChkBool(_spNextQueryOperation != nullptr, ((HRESULT)0x8000FFFFL))
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::DoWork
ChkBool(_storeContext == nullptr, ((HRESULT)0x8000FFFFL))
ChkHr(_spNextQueryOperation->GetNextAsync( productJsonString.GetAddressOf(), nextOp.GetAddressOf()))
ChkHr(storeContextServer->GetAssociatedStoreProducts( productKinds.Get(), maxCountPerPage, cv.GetHStringReference().Get(), productJsonString.GetAddressOf(), &_spNextQueryOperation))
ChkHr(_products->get_Size(&countOfProducts))
ChkHr(nextOp.CopyTo(_spNextQueryOperation.ReleaseAndGetAddressOf()))
MakeAndInitialize<StoreProductPagedQueryResult>( &_results, _products, productKinds.Get(), _maxCountPerPage, hasMorePages, _hresultOfOperation, _spNextQueryOperation)
ChkHr(_spNextQueryOperation->HasMorePages(&hasMorePages))
Windows::Services::Store::GetUserCollectionOperation::RuntimeClassInitialize
ChkArg(ppStoreProductQueryResult)
onecoreuap\enduser\winstore\licensing\winrt\lib\getusercollectionoperation.cpp
ChkHr(_results.CopyTo(ppStoreProductQueryResult))
Windows::Services::Store::GetUserCollectionOperation::GetResults
ChkHr(MakeAndInitialize<GetUserCollectionPagedOperation>( spPagedOperation.GetAddressOf(), _PFN.Get(), nullptr, _storeContext.Get(), _szCV, productKinds.Get(), -1, asyncId ))
Windows::Services::Store::GetUserCollectionOperation::DoWork
Windows::Services::Store::GetUserCollectionPagedOperation::RuntimeClassInitialize
ChkBool(_spNextQueryOperation == nullptr, ((HRESULT)0x803F6107L))
Windows::Services::Store::GetUserCollectionPagedOperation::GetResults
onecoreuap\enduser\winstore\licensing\winrt\lib\getusercollectionpagedoperation.cpp
Windows::Services::Store::GetUserCollectionPagedOperation::DoWork
ChkHr(_spNextQueryOperation->GetNextAsync( productJson.GetAddressOf(), nextOp.GetAddressOf()))
ChkHr(storeContextServer->GetUserCollection( productKinds.Get(), maxCountPerPage, cv.GetHStringReference().Get(), productJson.GetAddressOf(), &_spNextQueryOperation))
MakeAndInitialize<StoreProductPagedQueryResult>( &_results, _products, productKinds.Get(), _maxPageSize, hasMorePages, _hresultOfOperation, _spNextQueryOperation)
ChkHr(JsonParser::ParseJSONStringToObject( productJson, this, productQueryResultsTable))
onecoreuap\enduser\winstore\licensing\winrt\lib\getconsumablebalanceremainingoperation.cpp
Windows::Services::Store::GetConsumableBalanceRemainingOperation::RuntimeClassInitialize
ChkHr(MakeAndInitialize<StoreConsumableResult>( ppResults, GUID_NULL, _consumableStatus, _quantity, _hresultOfOperation ))
Windows::Services::Store::GetConsumableBalanceRemainingOperation::GetResults
Windows::Services::Store::GetConsumableBalanceRemainingOperation::DoWork
ChkHr(storeContextServer->GetConsumableBalanceRemaining( _productId.Get(), cv.GetHStringReference().Get(), jsonString.GetAddressOf()))
ChkHr(JsonParser::ParseJSONStringToObject( jsonString, this, queryResultsTable))
onecoreuap\enduser\winstore\licensing\winrt\lib\acquirestorelicenseforoptionalpackageoperation.cpp
Windows::Services::Store::AcquireStoreLicenseForOptionalPackageOperation::RuntimeClassInitialize
ChkHr(MakeAndInitialize<StoreAcquireLicenseResult>( ppResults, _pStorePackageLicense.Get(), _hresultOfOperation ))
Windows::Services::Store::AcquireStoreLicenseForOptionalPackageOperation::GetResults
Windows::Services::Store::AcquireStoreLicenseForOptionalPackageOperation::DoWork
ChkHr(MakeAndInitialize<StorePackageLicense>( &_pStorePackageLicense, _pOptionalPackage.Get(), _storeContext.Get() ))
onecoreuap\enduser\winstore\licensing\winrt\lib\canacquirestorelicenseforoptionalpackageoperation.cpp
Windows::Services::Store::CanAcquireStoreLicenseForOptionalPackageOperation::RuntimeClassInitialize
Windows::Services::Store::CanAcquireStoreLicenseForOptionalPackageOperation::GetResults
ChkHr(_packageIdentifier.Set(packageIdentifier))
ChkHr(storeContextServer->GetPreviewLicenseResultForPackage( _packageIdentifier.Get(), cv.GetHStringReference().Get(), licenseSatisfactionResult.GetAddressOf()))
ChkHr(MakeAndInitialize<StoreCanAcquireLicenseResult>( ppResults, _licenseQueryStatus, _licensableSku.Get(), _hresultOfOperation ))
ChkHr(JsonParser::ParseJSONStringToObject( licenseSatisfactionResult, this, previewLicenseResultsTable))
Windows::Services::Store::CanAcquireStoreLicenseForOptionalPackageOperation::DoWork
onecoreuap\enduser\winstore\licensing\winrt\lib\canacquirestorelicenseoperation.cpp
Windows::Services::Store::CanAcquireStoreLicenseOperation::RuntimeClassInitialize
ChkHr(_pStoreContextServer.As(&storeContextServer2))
Windows::Services::Store::CanAcquireStoreLicenseOperation::GetResults
ChkHr(storeContextServer2->GetPreviewLicenseResultForStoreId( _productStoreId.Get(), cv.GetHStringReference().Get(), licenseSatisfactionResult.GetAddressOf()))
Windows::Services::Store::CanAcquireStoreLicenseOperation::DoWork
InsufficientConsumeQuantity
Windows::Services::Store::ReportConsumableOperation::RuntimeClassInitialize
QuantityAvailable:
Windows::Services::Store::ReportConsumableOperation::GetResults
onecoreuap\enduser\winstore\licensing\winrt\lib\reportconsumableoperation.cpp
ChkHr(MakeAndInitialize<StoreConsumableResult>( ppResults, _trackingId, _consumableStatus, _balanceRemaining, _hresultOfOperation ))
Windows::Services::Store::ReportConsumableOperation::DoWork
storeContextServer->ConsumeConsumable( _productId.Get(), _quantity, _trackingId, cv.GetHStringReference().Get(), jsonString.GetAddressOf())
innererror
ChkHr(_data->GetAt(index, data.GetAddressOf()))
ChkHr(_data->get_Size(&dataSize))
ChkHr(quantityParts->get_Size(&partsSize))
ChkHr(StringHelpers::SplitString(data.Get(), L":", quantityParts.GetAddressOf()))
ChkHr(quantityParts->GetAt(1, newQuantity.GetAddressOf()))
Windows::Services::Store::RequestPurchaseOperation::RuntimeClassInitialize
ChkHr(_storeId.Set(storeId))
onecoreuap\enduser\winstore\licensing\winrt\lib\requestpurchaseoperation.cpp
ChkHr(MakeAndInitialize<StorePurchaseResult>(ppResults, _status, _hresultOfOperation))
Windows::Services::Store::RequestPurchaseOperation::GetResults
ChkHr(storeContextServer->RequestPurchase( _storeContextCallerData.Get(), _storeId.Get(), _storePurchaseProperties.Get(), _jsonData.Get(), cv.GetHStringReference().Get(), _response.GetAddressOf()))
ChkHr(JsonParser::ParseJSONStringToObject( _response, this, purchaseResultsTable))
Windows::Services::Store::RequestPurchaseOperation::DoWork
ChkHr(_hresultOfOperation)
ChkHr(_ChangeStatusStringToEnumValue())
Succeeded
Windows::Services::Store::GetIsAnySkuInstalledOperation::RuntimeClassInitialize
ChkArg(pResults)
onecoreuap\enduser\winstore\licensing\winrt\lib\getisanyskuinstalledoperation.cpp
ChkHr(storeContextServer->IsStoreProductInstalled( _productStoreId.Get(), cv.GetHStringReference().Get(), &_isInstalled))
Windows::Services::Store::GetIsAnySkuInstalledOperation::GetResults
Windows::Services::Store::GetIsAnySkuInstalledOperation::DoWork
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getappandsupplementalstorepackageupdatesoperation.cpp
Windows::Services::Store::GetAppAndSupplementalStorePackageUpdatesOperation::RuntimeClassInitialize
Windows::Services::Store::GetAppAndSupplementalStorePackageUpdatesOperation::GetResults
ChkArg(ppUpdateList)
ChkHr(storeContextServer->GetAppAndOptionalStorePackageUpdates(cv.GetHStringReference().Get(), &queuedItems))
Windows::Services::Store::GetAppAndSupplementalStorePackageUpdatesOperation::DoWork
onecoreuap\enduser\winstore\licensing\winrt\lib\findstoreproductforpackageoperation.cpp
Windows::Services::Store::FindStoreProductForPackageOperation::RuntimeClassInitialize
ChkHr(MakeAndInitialize<StoreProductResult>(ppResults, _products, _hresultOfOperation))
Windows::Services::Store::FindStoreProductForPackageOperation::GetResults
ChkHr(_package->get_Id(packageId.GetAddressOf()))
Windows::Services::Store::FindStoreProductForPackageOperation::DoWork
ChkHr(storeContextServer->GetProductForPackage( productKinds.Get(), packageFullName.Get(), cv.GetHStringReference().Get(), productJson.GetAddressOf()))
Windows::Services::Store::GetAssociatedStoreQueueItemsOperation::RuntimeClassInitialize
ChkHr(_packageFamilyName.Set(packageFamilyName))
ChkHr(AgileVector<HSTRING>::Make(&_newOrder))
onecoreuap\enduser\winstore\licensing\winrt\lib\getassociatedstorequeueitemsoperation.cpp
ChkHr(iter->get_Current(&item))
ChkHr(newOrder->First(&iter))
ChkHr(StringHelpers::Join(_newOrder.Get(), false, productIdList.GetAddressOf()))
ChkHr(_newOrder->Append(productId.Get()))
ChkArg(result)
Attempting to set the install order to: %hs
ChkHr(_queueItems.CopyTo(result))
Windows::Services::Store::GetAssociatedStoreQueueItemsOperation::GetResults
Windows::Services::Store::GetAssociatedStoreQueueItemsOperation::DoWork
ChkHr(spStoreContextServer.As(&spStoreContextServer3))
ChkHr(spStoreContextServer->GetAssociatedStoreQueueItems( cv.GetHStringReference().Get(), &_queueItems))
ChkHr(spStoreContextServer3->SetInstallOrderForAssociatedStoreQueueItems( cv.GetHStringReference().Get(), _newOrder.Get()))
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorequeueitemsoperation.cpp
Windows::Services::Store::GetStoreQueueItemsOperation::RuntimeClassInitialize
Windows::Services::Store::GetStoreQueueItemsOperation::DoWork
Windows::Services::Store::GetStoreQueueItemsOperation::GetResults
ChkHr(spStoreContextServer->GetStoreQueueItems( storeIds.Get(), cv.GetHStringReference().Get(), &_queueItems))
Windows::Services::Store::RequestStoreRateAndReviewOperation::RuntimeClassInitialize
Windows::Services::Store::RequestStoreRateAndReviewOperation::GetResults
onecoreuap\enduser\winstore\licensing\winrt\lib\requeststorerateandreviewoperation.cpp
updated
ChkHr(MakeAndInitialize<StoreRateAndReviewResult>( ppResults, _status, _jsonResponse.Get(), _wasUpdated, _hresultOfOperation))
ChkHr(storeContextServer->SendStoreRequest( _storeContextCallerData.Get(), 16, cv.GetHStringReference().Get(), nullptr, &statusCode, _jsonResponse.GetAddressOf()))
status
ChkHr(JsonParser::ParseJSONStringToObject( _jsonResponse, this, requestStoreRateAndReviewTable))
Windows::Services::Store::RequestStoreRateAndReviewOperation::DoWork
{"status": "aborted"}
Request Rate and Review Operation failed to get any status due to a purchase app not install error.
success
ChkHr(_jsonResponse.Set(LR"({"status": "aborted"})"))
networkError
aborted
Error
Windows::Services::Store::StoreUninstallStorePackageResult::get_ExtendedError
Windows::Services::Store::StoreUninstallStorePackageResult::get_Status
onecoreuap\enduser\winstore\licensing\winrt\lib\storeuninstallstorepackageoperation.cpp
ChkHr(_packageFamilyNameToUninstall.Set(packageFamilyNameToUninstall))
Windows::Services::Store::UninstallStorePackageOperation::RuntimeClassInitialize
Windows::Services::Store::UninstallStorePackageOperation::GetResults
ChkArg(results)
ChkHr(result.CopyTo(results))
ChkHr(MakeAndInitialize<StoreUninstallStorePackageResult>( &result, _resultCode, _resultStatus ))
Windows::Services::Store::UninstallStorePackageOperation::DoWork
ChkHr(storeContextServer->UninstallStorePackage( _storeId.Get(), _packageFamilyNameToUninstall.Get(), cv.GetHStringReference().Get(), _shouldPrompt, _dialogHelper.Get(), &_resultStatus ))
ChkHr(GetFormattedPriceUsingCurrencyFormatter( dblPrice, currencyCode, locale, region, formattedPrice))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\priceformat.cpp
GetFormattedPriceUsingCurrencyFormatter
ChkHr(userLocale.Set(szUserLocale))
ChkHr(userLocale.Set(locale))
ChkHr(spNumberFormatter->FormatDouble(price, formattedPrice))
ChkHr(_GetCurrencyFormatter(currencyCode, userLocale.Get(), region, &spNumberFormatter))
CampaignId
IsTrial
AcquiredDate
DevOfferId
TrialTimeRemaining
StartDate
onecoreuap\enduser\winstore\licensing\winrt\lib\storecollectiondata.cpp
Windows::Services::Store::StoreCollectionData::RuntimeClassInitialize
::WindowsDuplicateString(_campaignId.Get(), pValue)
Windows::Services::Store::StoreCollectionData::get_IsTrial
::WindowsDuplicateString(_devOfferId.Get(), pValue)
Windows::Services::Store::StoreCollectionData::get_CampaignId
Windows::Services::Store::StoreCollectionData::get_AcquiredDate
Windows::Services::Store::StoreCollectionData::get_DeveloperOfferId
Windows::Services::Store::StoreCollectionData::get_EndDate
Windows::Services::Store::StoreCollectionData::get_StartDate
::WindowsDuplicateString(_productId.Get(), pValue)
Windows::Services::Store::StoreCollectionData::get_TrialTimeRemaining
::WindowsDuplicateString(_skuId.Get(), pValue)
Windows::Services::Store::StoreCollectionData::get_ProductId
Windows::Services::Store::StoreCollectionData::get_SkuId
jsonValue->GetString(timeString.GetAddressOf())
StringToFileTime(timeString.GetRawBuffer(nullptr), &ft, FALSE)
Windows::Services::Store::JsonParser::ParseDate
Caption
Windows::Services::Store::StoreImage::RuntimeClassInitialize
ChkHr(JsonParser::ParseJSONToObject( json, this, imageTable))
Windows::Services::Store::StoreImage::get_Uri
onecoreuap\enduser\winstore\licensing\winrt\lib\storeimage.cpp
ChkHr(WindowsConcatString(HStringReference(L"http:").Get(), _ImageUri.Get(), uri.GetAddressOf()))
http:
ChkHr(_spUri.CopyTo(ppValue))
ChkHr(IAPUtils::CreateUri(uri.Get(), &_spUri))
Windows::Services::Store::StoreImage::get_ImagePurposeTag
::WindowsDuplicateString(_Purpose.Get(), pValue)
Windows::Services::Store::StoreImage::get_Height
Windows::Services::Store::StoreImage::get_Width
Windows::Services::Store::StoreImage::get_Caption
::WindowsDuplicateString(_Caption.Get(), pValue)
VideoPurpose
ChkHr(JsonParser::ParseJSONToObject( json, this, videoTable))
PreviewImage
onecoreuap\enduser\winstore\licensing\winrt\lib\storevideo.cpp
Windows::Services::Store::StoreVideo::RuntimeClassInitialize
ChkHr(WindowsConcatString(HStringReference(L"http:").Get(), _VideoUri.Get(), uri.GetAddressOf()))
Windows::Services::Store::StoreVideo::get_Uri
Windows::Services::Store::StoreVideo::get_Width
Windows::Services::Store::StoreVideo::get_VideoPurposeTag
Windows::Services::Store::StoreVideo::get_Caption
Windows::Services::Store::StoreVideo::get_Height
Windows::Services::Store::StoreVideo::get_PreviewImage
_spPreviewImage.CopyTo(ppValue)
Windows::Services::Store::JsonParser::ParseComPtr
jsonValue->GetObject(jsonObject.GetAddressOf())
MakeAndInitialize<T>(obj.GetAddressOf(), DEBUG_PARSER_PARAMETERS_ARGS jsonObject)
SkuDisplayRank
FulfillmentType
RecurrencePolicy
BundledSkus
onecoreuap\enduser\winstore\licensing\winrt\lib\storesku.cpp
Windows::Services::Store::StoreSku::RuntimeClassInitialize
ChkHr(JsonParser::ParseJSONToObject( json, this, DisplaySkuAvailabilitiesTable))
ChkHr(Vector<HSTRING>::Make(&_bundledSkuIds))
ChkHr(_SortAvailabilities())
Windows::Services::Store::StoreSku::get_StoreId
ChkHr(IAPUtils::BuildStoreId( _productId.Get(), _skuId.Get(), nullptr, _storeId.GetAddressOf()))
Windows::Services::Store::StoreSku::get_Language
ChkHr(::WindowsDuplicateString(_storeId.Get(), pValue))
Windows::Services::Store::StoreSku::get_Description
Windows::Services::Store::StoreSku::get_Title
::WindowsDuplicateString(_customDeveloperData.Get(), pValue)
Windows::Services::Store::StoreSku::get_IsTrial
Windows::Services::Store::StoreSku::get_Images
Windows::Services::Store::StoreSku::get_CustomDeveloperData
_availabilities->GetView(ppValue)
Windows::Services::Store::StoreSku::get_Videos
Windows::Services::Store::StoreSku::get_Price
Windows::Services::Store::StoreSku::get_Availabilities
ChkHr(iter->get_Current(&availability))
ChkHr(_availabilities->First(&iter))
Windows::Services::Store::StoreSku::get_IsSubscription
ChkHr(availability->get_Price(ppValue))
ChkHr(_subscriptionInfo.CopyTo(ppValue))
Windows::Services::Store::StoreSku::get_SubscriptionInfo
Windows::Services::Store::StoreSku::get_BundledSkus
Windows::Services::Store::StoreSku::get_IsInUserCollection
Windows::Services::Store::StoreSku::get_CollectionData
ChkHr(_bundledSkuIds->GetView(ppValue))
Windows::Services::Store::StoreSku::GetIsInstalledAsync
ChkHr(_collectionData.CopyTo(ppValue))
Windows::Services::Store::StoreSku::RequestPurchaseAsync
ChkHr(_storeContext->GetIsAnySkuInstalledAsync(_storeId.Get(), ppOperation))
ChkHr(_productId.Set(value))
Windows::Services::Store::StoreSku::RequestPurchaseWithPurchasePropertiesAsync
ChkHr(_availabilities->First(&availabilityIter))
Windows::Services::Store::StoreSku::set_ProductId
ChkHr(availabilityIter->get_Current(&availability))
ChkHr(availabilityIter->get_HasCurrent(&hasCurrent))
ChkHr(availabilityPrivate->set_ProductIdSkuId(_productId.Get(), _skuId.Get()))
ChkHr(availability.As(&availabilityPrivate))
Windows::Services::Store::StoreSku::get_SkuId
ChkHr(availabilityIter->MoveNext(&hasCurrent))
Windows::Services::Store::StoreSku::get_FulfillmentType
::WindowsDuplicateString(_fulfillmentType.Get(), pValue)
Windows::Services::Store::StoreSku::SetStoreContext
ChkHr(_availabilities.As(&inspectableProducts))
Windows::Services::Store::StoreSku::_SortAvailabilities
ChkHr(Vector<StoreAvailability*>::Make(&sortedAvailabilities))
ChkHr(_availabilities->GetAt(index, &currentAvailability))
ChkHr(_availabilities->get_Size(&size))
ChkHr(currentAvailabilityPrivate->get_Rank(&currentRank))
ChkHr(currentAvailability.As(&currentAvailabilityPrivate))
ChkHr(_availabilities->RemoveAt(bestIndex))
ChkHr(sortedAvailabilities->Append(bestAvailability.Get()))
BigId
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreAvailability>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreAvailability>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreAvailability>
ChkHr(_request.Set(jsonRequest))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchaseeventargsredstone.cpp
Windows::Services::Store::PurchaseEventArgsRedstone::RuntimeClassInitialize
_request.CopyTo(json)
ChkHr(_response.Set(jsonInitialResponse))
_response.CopyTo(json)
Windows::Services::Store::PurchaseEventArgsRedstone::get_JsonRequest
_response.Set(json)
Windows::Services::Store::PurchaseEventArgsRedstone::get_JsonResponse
Windows::Services::Store::PurchaseEventArgsRedstone::put_JsonResponse
Windows::Services::Store::PurchaseEventArgsRedstone::SetSize
_modalManager != nullptr
Windows::ApplicationModel::Store::CProductLicenseMap::Initialize
ChkHr(ProductLicenseHashMap::Make(&m_spHashMap))
ChkHr(pLicenseInstance->GetIsActive(&isActive))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productlicensemap.cpp
ChkHr(spProductLicense->Initialize(spAppAddOn.Get()))
ChkAlloc(spProductLicense)
ChkHr(strProductId.Set(pszProductId))
ChkHr(spAppAddOn->GetProductId(&pszProductId))
ChkHr(pUnfulfilledList->get_Size(&size))
ChkHr(m_spHashMap->Insert(strProductId.Get(), spProductLicense.Get(), &replaced))
ChkHr(spProductLicense->Initialize(spUnfulfilledConsumable.Get()))
ChkHr(pUnfulfilledList->GetAt(lProduct, spUnfulfilledConsumable.GetAddressOf()))
ChkHr(m_spHashMap.As(&m_spIterable))
ChkHr(spUnfulfilledConsumable->get_ProductId(strProductId.GetAddressOf()))
Windows::ApplicationModel::Store::CProductLicenseMap::get_Size
ChkHr(m_spHashMap->get_Size(pcItems))
Windows::ApplicationModel::Store::CProductLicenseMap::HasKey
ChkHr(m_spHashMap->HasKey(hstrKey, pfHasKey))
Windows::ApplicationModel::Store::CProductLicenseMap::Lookup
ChkAlloc(spNewProductLicense)
ChkHr(m_spHashMap->GetView(&spHashView))
ChkHr(spNewProductLicense->InitializeInvalid(hstrKey))
ChkHr(spHashView->Split(firstPartition, secondPartition))
Windows::ApplicationModel::Store::CProductLicenseMap::Split
Windows::ApplicationModel::Store::CProductLicenseMap::First
ChkHr(m_spIterable->First(ppIterator))
Windows::ApplicationModel::Store::CProductLicenseMap::GetView
ChkHr(m_spHashMap->GetView(view))
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductLicense>>
<??YzU
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductLicense>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductLicense>>
Windows.Foundation.Collections.IMap`2<String, Windows.ApplicationModel.Store.ProductLicense>
Windows::Services::Store::StorePackageUpdateResult::RuntimeClassInitialize
ChkHr(queueItems->GetView(&_spQueueItems))
onecoreuap\enduser\winstore\licensing\winrt\lib\storepackageupdateresult.cpp
Windows::Services::Store::StorePackageUpdateResult::get_OverallState
ChkArg(pUpdateState)
Windows::Services::Store::StorePackageUpdateResult::get_StorePackageUpdateStatuses
ChkArg(ppUpdateStatuses)
ChkArg(ppQueueItems)
ChkHr(_spQueueItems.CopyTo(ppQueueItems))
Windows::Services::Store::StorePackageUpdateResult::get_StoreQueueItems
onecoreuap\enduser\winstore\licensing\winrt\lib\storequeueitemstatus.cpp
Windows::Services::Store::StoreQueueItemStatus::get_PackageInstallState
Windows::Services::Store::StoreQueueItemStatus::get_UpdateStatus
Windows::Services::Store::StoreQueueItemStatus::get_PackageInstallExtendedState
Windows::Services::Store::StoreQueueItemStatus::get_ExtendedError
ChkHr(StorePackageUpdateManagerUtils::StorePackageUpdateStatusLifetimeTraits::Construct(value, _status))
onecoreuap\enduser\winstore\licensing\winrt\lib\storequeueitemcompletedeventargs.cpp
Windows::Services::Store::StoreQueueItemCompletedEventArgs::get_Status
{client}
ChkHr(CatalogServiceProxyV6::GetProduct( _inAppProductId.Get(), _pCV, &spProduct))
UniversalStoreInApp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchasestahelper.cpp
CClientSTAHelper::GetAddOnProduct
ChkHr(addOns.GetNext(&spProduct))
ChkHr(addOns.Initialize(_spStoreCommerceServer.Get(), _pCV))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spAlternateIds, &alternateIdsSize))
ChkHr(JsonHelpers::GetNamedArray(spProduct, L"AlternateIds", &spAlternateIds))
ChkHr(JsonHelpers::GetNamedString(spAlternateId, L"IdType", alternateIdType.GetAddressOf()))
ChkHr(spAlternateIds->GetObjectAt(i, &spAlternateId))
ChkBool((nullptr != *ppProduct), ((HRESULT)0x803F6102L))
ChkHr(JsonHelpers::GetNamedString(spAlternateId, L"Value", alternateIdValue.GetAddressOf()))
ChkHr(GetAddOnProduct(&spProduct))
Purchase
ChkHr(JsonHelpers::GetNamedString(spProduct, L"ProductId", hstrProductId.GetAddressOf()))
CClientSTAHelper::GetBigCatIds
ChkHr(hstrProductId.Set(_spStoreCommerceServer->GetAppCatalogId(_pCV)))
ChkHr(pProductIdCache->AddItem( _inAppOfferToken.Get(), hstrProductId.Get()))
ChkHr(JsonHelpers::GetNamedString(spProduct, L"ProductType", hstrProductType.GetAddressOf()))
ChkHr((hrGetProduct == ((HRESULT)0x80190194L)) ? ((HRESULT)0x803F6101L) : hrGetProduct)
ChkHr(JsonHelpers::GetNamedString(spProduct, L"PreferredSkuId", hstrPreferredSkuId.GetAddressOf()))
ChkHr(hstrPreferredSkuId.Set(_inAppProductSkuId.Get()))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spDisplaySkuAvailabilities, &displaySkuAvailabilitiesSize))
ChkHr(JsonHelpers::GetNamedArray(spProduct, L"DisplaySkuAvailabilities", &spDisplaySkuAvailabilities))
ChkHr(JsonHelpers::GetNamedObject(spDisplaySkuAvailability, L"Sku", &spSku))
ChkHr(spDisplaySkuAvailabilities->GetObjectAt(i, &spDisplaySkuAvailability))
ChkHr(JsonHelpers::GetNamedArray(spDisplaySkuAvailability, L"Availabilities", &spAvailabilities))
ChkHr(JsonHelpers::GetNamedString(spSku, L"SkuId", hstrSkuId.GetAddressOf()))
ChkHr(spAvailabilities->GetObjectAt(j, &spAvailability))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spAvailabilities, &availabilitiesSize))
ChkHr(JsonHelpers::GetNamedArray(spAvailability, L"Actions", &spActions))
Actions
ChkHr(spActions->GetStringAt(k, action.GetAddressOf()))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spActions, &actionsSize))
ChkHr(JsonHelpers::GetNamedString(spAvailability, L"AvailabilityId", hstrAvailabilityId.GetAddressOf()))
AvailabilityId
orderId
ChkBool(hstrProductId.IsValid() && hstrSkuId.IsValid() && hstrAvailabilityId.IsValid(), (_apiType == ClientApiType_AppPurchase) ? ((HRESULT)0x803F6101L) : ((HRESULT)0x803F6102L))
ChkHr(appProductId.Set(_spStoreCommerceServer->GetAppCatalogId(_pCV)))
CClientSTAHelper::DoWork
ChkHr(_spStoreCommerceServer->GetExclusiveLockForProduct(productId.Get(), &pendingPurchaseOperationForProduct))
ChkHr(GetBigCatIds(productId.GetAddressOf(), skuId.GetAddressOf(), availabilityId.GetAddressOf(), productType.GetAddressOf()))
ChkHr(JsonHelpers::CreateJsonObject(jsonTemp.GetAddressOf()))
ChkHr(IAPUtils::BuildStoreId(productId.Get(), skuId.Get(), availabilityId.Get(), storeId.GetAddressOf()))
ChkHr(JsonHelpers::SetNamedString(jsonTemp, L"StoreId", storeId.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonTemp, L"DevOfferId", _devOfferId.Get()))
ChkHr(storeId.Set(L""))
ChkHr(JsonHelpers::Stringify(jsonTemp, overrideJsonRequest.GetAddressOf()))
ChkHr(MakeAndInitialize<PurchaseOperation>( &purchaseOperation, _PFN.Get(), appProductId.Get(), storeId.Get(), storePurchaseProperties.Get(), overrideJsonRequest.Get(), nullptr, cv.GetHStringReference().Get(), _parentHwnd, _hasPreviewCapability, InvokedApi_RequestPurchase.Get() ))
ChkHr(MakeAndInitialize<StorePurchaseProperties>(&storePurchaseProperties, _nameOverride.Get()))
ChkHr(JsonParser::ParseJSONStringToObject( jsonResponse, this, purchaseResultsTable))
ChkHr(BlockOnCompletionAndGetResults(purchaseOperation.Get(), jsonResponse.GetAddressOf()))
ChkHr(ChangeStatusStringToEnumValue())
_transactionId.IsValid()
ChkHr(UuidFromStringW((PWCHAR)_transactionId.GetRawBuffer(nullptr), _pTransactionId))
_purchaseStatus == ProductPurchaseStatus_NotPurchased
authTicket.IsValid()
ChkHr(WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicket( 0, WinStoreAuth::AuthenticationEndpoint::OneStore, WinStoreAuth::PromptType::Silent, false, nullptr, authTicket.GetAddressOf(), providerType, spWebTokenRequestResult.GetAddressOf()))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), _pCV, IAPReceiptType_OneProduct, _inAppOfferToken.Get(), authTicket.Get(), spWebTokenRequestResult.Get(), _pReceipt))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), _pCV, IAPReceiptType_App, nullptr, authTicket.Get(), spWebTokenRequestResult.Get(), _pReceipt))
Windows::ApplicationModel::Store::PurchaseResultsServer::Initialize
ChkHr(_hstrReceiptXml.Set(receiptXml))
ChkHr(_hstrOfferId.Set(offerId))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchaseresultsserver.cpp
ChkArg(pProductPurchaseStatus)
Windows::ApplicationModel::Store::PurchaseResultsServer::get_Status
ChkArg(transactionId)
Windows::ApplicationModel::Store::PurchaseResultsServer::get_TransactionId
ChkHr(_hstrReceiptXml.CopyTo(hstrReceiptXml))
Windows::ApplicationModel::Store::PurchaseResultsServer::get_ReceiptXml
ChkHr(_hstrOfferId.CopyTo(hstrOfferId))
Windows::ApplicationModel::Store::PurchaseResultsServer::get_OfferId
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewskuinfoserver.cpp
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::Initialize
ChkHr(_hstrSkuId.Set(pInAppSkuInformation->SkuId))
ChkArg(pInAppSkuInformation)
ChkHr(_hstrTitle.Set(pInAppSkuInformation->Title))
ChkHr(_hstrSkuType.Set(pInAppSkuInformation->SkuType))
ChkHr(_hstrCurrencyCode.Set(pInAppSkuInformation->PricingInfo.CurrencyCode))
ChkHr(_hstrDescription.Set(pInAppSkuInformation->Description))
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_ProductId
ChkHr(ReceiptHelpers::GetFormattedPrice( locale, market, &pInAppSkuInformation->PricingInfo, false , _hstrFormattedListPrice.GetAddressOf()))
ChkHr(_hstrSkuId.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_SkuId
ChkHr(_hstrSkuType.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_SkuType
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_Description
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_Title
ChkHr(_hstrCustomDeveloperData.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_CustomDeveloperData
ChkHr(_hstrCurrencyCode.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_CurrencyCode
ChkHr(_hstrFormattedListPrice.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_FormattedListPrice
ChkHr(_hstrExtendedData.CopyTo(pValue))
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_ExtendedData
ChkArg(pAppInfo)
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\listinginformationserver.cpp
Windows::ApplicationModel::Store::ListingInformationServer::Initialize
ChkHr(_hstrCurrentMarket.Set(pAppInfo->Market))
ChkHr(CMiscHelpers::StringToGuid(WindowsGetStringRawBuffer(pAppInfo->Id, nullptr), &_id))
ChkHr(_hstrName.Set(pAppInfo->Name))
ChkHr(_hstrLocale.Set(pAppInfo->Locale))
ChkHr(ReceiptHelpers::GetFormattedPrice(pAppInfo->Locale, pAppInfo->Market, &pAppInfo->PricingInfo, false , _hstrFormattedPrice.GetAddressOf()))
ChkHr(_hstrDescription.Set(pAppInfo->Description))
ChkAlloc(_spInAppOffers)
ChkHr((AgileHashMap<HSTRING, ProductListing*,StringUpperCaseHash, StringCaseInsensitiveEquals>::Make(&_spInAppOffers)))
ChkHr(spProductListing->Initialize(_hstrLocale.Get(), _hstrCurrentMarket.Get(), pAppInfo->IsUAP, pInAppOffer))
ChkReturn(((HRESULT)0x8007000EL))
ChkHr(ReceiptHelpers::GetFormattedPrice(pAppInfo->Locale, pAppInfo->Market, &pAppInfo->PricingInfo, true , _hstrFormattedBasePrice.GetAddressOf()))
ChkHr(_spInAppOffers->Insert( pInAppOffer->InAppOfferToken, spProductListing.Get(), &replaced ))
Windows::ApplicationModel::Store::ListingInformationServer::get_CurrentMarket
ChkHr(_hstrCurrencyCode.Set(pAppInfo->PricingInfo.CurrencyCode))
Windows::ApplicationModel::Store::ListingInformationServer::get_Description
ChkHr(_hstrCurrentMarket.CopyTo(pValue))
ChkHr(_spInAppOffers->GetView(ppValue))
Windows::ApplicationModel::Store::ListingInformationServer::get_ProductListings
ChkHr(_hstrFormattedPrice.CopyTo(pValue))
Windows::ApplicationModel::Store::ListingInformationServer::get_FormattedPrice
ChkHr(_hstrName.CopyTo(pValue))
Windows::ApplicationModel::Store::ListingInformationServer::get_Name
Windows::ApplicationModel::Store::ListingInformationServer::get_FormattedBasePrice
Windows::ApplicationModel::Store::ListingInformationServer::get_AgeRating
Windows::ApplicationModel::Store::ListingInformationServer::get_IsOnSale
Windows::ApplicationModel::Store::ListingInformationServer::get_SaleEndDate
Windows::ApplicationModel::Store::ListingInformationServer::get_CurrencyCode
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductListing>>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductListing>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductListing>>
Windows.Foundation.Collections.IMapView`2<String, Windows.ApplicationModel.Store.ProductListing>
Windows.Foundation.Collections.IMap`2<String, Windows.ApplicationModel.Store.ProductListing>
IAPReceiptType_App
ChkHr(::ParseReceiptResponse(pbResponse, cbResponse, &tmpReceiptData, &cbReceiptData))
IAPReceiptType_OneProduct
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\receipthelpers.cpp
ReceiptHelpers::LicenseParseReceiptResponse
ChkHr(CatalogServiceProxyV6::GetProduct(pStoreCommerceServer->GetAppCatalogId(pCV), pCV, &spJsonObject))
ChkAlloc(spReceiptData)
ChkHr(spJsonObject->GetNamedArray(HStringReference(L"DisplaySkuAvailabilities").Get(), &jsonSKUAvailabilities))
ReceiptHelpers::GetPublisherId
ChkHr(jsonSKUAvailabilities->GetObjectAt(0, &jsonSKUAvailability))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(jsonSKUAvailabilities, &cchSKUAvailablilities))
ChkHr(jsonSKU->GetNamedObject(HStringReference(L"Properties").Get(), &jsonProperties))
ChkHr(jsonSKUAvailability->GetNamedObject(HStringReference(L"Sku").Get(), &jsonSKU))
LegacyWindowsPhoneLicensingData
ChkHr(jsonProperties->GetNamedObject(HStringReference(L"LicensingData").Get(), &jsonLicensingData))
PublisherId
ChkHr(jsonLicensingData->GetNamedObject(HStringReference(L"LegacyWindowsPhoneLicensingData").Get(), &jsonLegacyWindowsPhoneLicensingData))
{receiptType}
ChkHr(jsonLegacyWindowsPhoneLicensingData->GetNamedString(HStringReference(L"PublisherId").Get(), strPublisherId.GetAddressOf()))
ReceiptHelpers::FetchDesktopReceipt
ChkHr(UriHelper::GetUri(UriHelper::MDGetAppReceiptsDesktop, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrServiceUri.GetAddressOf()))
MS-SiteName
ChkHr(CWSHttpHelper::AddTHAdditionalHeaders(arrRequestHeaders))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrRequestHeaders, L"MS-CV", cv.GetUnicode()))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrRequestHeaders, L"MS-SiteName", WindowsGetStringRawBuffer(authDomain, nullptr)))
ChkHr(LicenseParseReceiptResponse(spbReceiptResponse, cbReceiptResponse, &spbReceipt, &cbReceipt))
ChkHr(hrRequest)
ChkHr(temp.Set(shReceipt))
ChkHr(CMiscHelpers::ConvertTextBlob2WideChar(spbReceipt, cbReceipt, &shReceipt))
ReceiptHelpers::GetPackageLocalAppDataPath
ChkArg(cchFolder)
ChkHr(_GetPackageLocalAppDataPath(szPackageFamilyName, pszFolder, cchFolder))
ReceiptHelpers::GetReceiptCacheFolder
ChkHr(PathCchAppendEx(pszFolder, cchFolder, L"_WinStoreSDK_Receipt_Cache", 0))
_WinStoreSDK_Receipt_Cache
ReceiptHelpers::GetReceiptCacheFileName
ChkHr(StringCchPrintfW(szSeedName, (sizeof(*RtlpNumberOf(szSeedName))), L"%s-%s-%d-%s", WindowsGetStringRawBuffer(geoId, nullptr), WindowsGetStringRawBuffer(language, nullptr), static_cast<UINT32>(eReceiptType), WindowsGetStringRawBuffer(featureName, nullptr)))
%s-%s-%d-%s
ChkHr(HRESULT_FROM_WIN32(122L))
Microsoft Enhanced RSA and AES Cryptographic Provider
ChkHr(PathCchAddExtension(pszCacheFileName, cchCacheFileName, L".dat"))
ReceiptHelpers::GetPhoneReceiptFilepath
ChkHr(GetReceiptCacheFileName(geoId, language, eReceiptType, featureName, szCacheFileName, (sizeof(*RtlpNumberOf(szCacheFileName)))))
ChkHr(GetReceiptCacheFolder(packageFullName, pszCacheFilepath, cchCacheFilepath))
ChkHr(GetPhoneReceiptFilepath(geoId, language, eReceiptType, featureName, packageFullName, szCacheFileFullPath, (sizeof(*RtlpNumberOf(szCacheFileFullPath)))))
ChkHr(PathCchAppendEx(pszCacheFilepath, cchCacheFilepath, szCacheFileName, 0))
ReceiptHelpers::GetCachedPhoneReceipt
ReceiptHelpers::CachePhoneReceiptForOffline
ChkHr(WindowsCreateString(reinterpret_cast<PCWSTR>(pbReceipt), cbReceipt / 2, receipt))
ChkHr(LocalAllocBytes(cbReceipt, &pbReceipt))
%04u-%02u-%02uT%02u:%02u:%02uZ
ReceiptHelpers::DeleteCachedPhoneReceipt
ReceiptHelpers::FetchPhoneReceipt
ChkHr(GetPublisherId(pStoreCommerceServer, pCV, hstrPublisherId.GetAddressOf()))
ChkHr(IAPUtils::GetLanguage(hstrLanguage.GetAddressOf()))
ChkHr(IAPUtils::GetMarket(hstrGeoId.GetAddressOf()))
{lang}
{installedPublisherId}
{parentProductId}
{featureName}
{requestTime}
ChkHr(UriHelper::GetUri(UriHelper::MDGetAppReceiptsMobile, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrServiceUri.GetAddressOf()))
ChkHr(UriHelper::GetUri(UriHelper::MDGetOneProductReceiptMobile, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrServiceUri.GetAddressOf()))
ChkHr(headers->TryAppendWithoutValidation(HStringReference(L"Authorization").Get(), authTicket, &b))
ChkHr(IAPUtils::CreateHttpClient(&httpClient))
ChkHr(UuidCreate(&anid))
ChkHr(headers->Append(HStringReference(L"MS-SiteName").Get(), authDomain))
X-WP-ANID
ChkHr(GuidToStringWithoutBraces(&anid, szAnid))
no-cache, max-age=0
ChkHr(headers->Append(HStringReference(L"X-WP-ANID").Get(), HStringReference(szAnid).Get()))
ChkHr(headers->Append(HStringReference(L"Cache-Control").Get(), HStringReference(L"no-cache, max-age=0").Get()))
Cache-Control
ChkHr(spXMLResponse.As(&spXmlDocumentIO))
ChkHr(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Xml_Dom_XmlDocument).Get(), &spXMLResponse))
Receipt
ChkHr(spXmlDocumentIO->LoadXml(hResponse.Get()))
ChkHr(spReceiptNodes->get_Length(&uReceiptNodesLength))
ChkHr(spXMLResponse->GetElementsByTagName(HStringReference(L"Receipt").Get(), &spReceiptNodes))
ChkHr(spReceiptNodes->Item(0, &spReceiptNode))
ChkBool(uReceiptNodesLength > 0, HRESULT_FROM_WIN32(1168L))
ChkHr(spReceiptNodeChildren->get_Length(&uReceiptNodeChildrenLength))
ChkHr(spReceiptNode->get_ChildNodes(&spReceiptNodeChildren))
ChkHr(spReceiptNodeChildren->Item(0, &spReceiptContent))
ChkBool(uReceiptNodeChildrenLength > 0, HRESULT_FROM_WIN32(1168L))
ChkHr(spXmlNodeSerializer->GetXml(hstrReceiptContent.GetAddressOf()))
ChkHr(spReceiptContent.As(&spXmlNodeSerializer))
ChkHr(hrGetString)
ChkHr(WindowsSubstringWithSpecifiedLength(hstrReceiptContent.Get(), 9, WindowsGetStringLen(hstrReceiptContent.Get()) - 12, receipt))
ReceiptHelpers::FetchReceipt
eReceiptType
ChkHr(UriHelper::GetUri(UriHelper::OneStoreAuthenticationDomain, hstrAuthDomain.GetAddressOf()))
ChkHr(GuidToStringWithoutBraces(&pStoreCommerceServer->GetAppId(), szProductIdGuid))
ChkHr(hrFetch)
ChkHr(WindowsConcatString(HStringReference(L"WLID1.0=").Get(), authTicket, hstrAuthTicketWithPrefix.GetAddressOf()))
ChkBool(cchCurrency != 0, LR2HR(GetLastError()))
Receipt fetched: %hs
ChkAlloc(spszFormattedPrice)
ReceiptHelpers::GetFormattedPrice
ChkHr(GetFormattedPriceUsingCurrencyFormatter( priceValue, pStorePricingInfo->CurrencyCode, locale, HStringReference(pwszUppercaseRegion).Get(), formattedPrice))
ChkHr(temp.Set(spszFormattedPrice))
ChkHr(HRESULT_FROM_WIN32(15862L))
ChkHr(HRESULT_FROM_WIN32(15861L))
ChkHr(HRESULT_FROM_WIN32(1244L))
ChkHr(HRESULT_FROM_WIN32(5L))
ChkHr(((HRESULT)0x80190194L))
ChkHr(HRESULT_FROM_WIN32(13L))
WSErrorUtils::ConvertInternalErrorCodeToExternal
ChkReturn(hr)
onecoreuap\enduser\Winstore\licensing\wsinc\WSErrorUtils.h
ChkArg(authResponse)
ChkArg(lpszURL)
ChkArg(pcbResponseData)
ChkArg(ppbResponseData)
ChkHr(httpRequest.Initialize (0))
ChkHr(httpRequest.SetAuthorizationHeader(authResponse))
ChkHr(httpRequest.UploadAndFetchResourceByUrl ( lpszURL, 0, 0, 1, 1 ))
ChkHr(((HRESULT) (((unsigned long)(1)<<31) | ((unsigned long)(25)<<16) | ((unsigned long)(httpRequest.GetRequestStatusCode()))) ))
CWSHttpHelper::FetchURL
ChkAlloc(spbResponseData)
ChkHr(GuidToStringWithoutBraces(&guidCorrelationId, wszCorrelationId))
ChkHr(CreateGuid(&guidCorrelationId))
ChkHr(CreateGuid(&guidRequestId))
MS-CorrelationId
ChkHr(GuidToStringWithoutBraces(&guidRequestId, wszRequestId))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrAdditionalHeaders, L"MS-CorrelationId", wszCorrelationId))
ChkHr(LocalAllocArray(cchBuffer, &pszBuffer))
%s:%s
ChkHr(StringCchPrintfW(pszBuffer, cchBuffer, L"%s:%s", header, value))
ChkHr(STRAPI_Create(pszBuffer, &dhStr))
ChkHr(arrAdditionalHeaders.Append(dhStr))
CWSHttpHelper::AddTHAdditionalRequestHeader
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrAdditionalHeaders, L"MS-RequestId", wszRequestId))
MS-RequestId
onecoreuap\enduser\Winstore\licensing\wsinc\WSHttpHelper.h
CWSHttpHelper::AddTHAdditionalHeaders
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::Initialize
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::get_ProductId
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\unfulfilledconsumableserver.cpp
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::get_TransactionId
ChkHr(_hstrProductId.CopyTo(hstrProductId))
ChkHr(_hstrOfferId.CopyTo(offerId))
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::get_OfferId
Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResultsServer::get_ProductPurchaseStatus
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewpurchaseresultsserver.cpp
Windows::Services::Store::StoreSendRequestResult::RuntimeClassInitialize
ChkHr(_response.Set(response))
::WindowsDuplicateString(_response.Get(), value)
onecoreuap\enduser\winstore\licensing\winrt\lib\sendstorerequestresult.cpp
Windows::Services::Store::StoreSendRequestResult::get_ExtendedError
Windows::Services::Store::StoreSendRequestResult::get_Response
Windows::Services::Store::StoreSendRequestResult::get_HttpStatusCode
Windows::Services::Store::StoreAppLicense::RuntimeClassInitialize
ChkHr(JsonParser::ParseJSONToObject( json, this, AppLicenseTable))
onecoreuap\enduser\winstore\licensing\winrt\lib\storeapplicense.cpp
Windows::Services::Store::StoreAppLicense::get_SkuStoreId
ChkHr(IAPUtils::BuildStoreId( _productId.Get(), _skuId.Get(), nullptr, _skuStoreId.GetAddressOf()))
Windows::Services::Store::StoreAppLicense::get_IsActive
ChkHr(::WindowsDuplicateString(_skuStoreId.Get(), pValue))
Windows::Services::Store::StoreAppLicense::get_ExpirationDate
Windows::Services::Store::StoreAppLicense::get_IsTrial
ChkAlloc(hashMap)
Windows::Services::Store::StoreAppLicense::get_AddOnLicenses
ChkHr(_addOnLicenses->GetAt(i, license.GetAddressOf()))
ChkHr(_addOnLicenses->get_Size(&count))
ChkHr(hashMap->Insert(skuStoreId.Get(), license.Get(), &replaced))
ChkHr(license->get_SkuStoreId(skuStoreId.GetAddressOf()))
ChkHr(hashMap->GetView(&_addOnLicensesMap))
Windows::Services::Store::StoreAppLicense::get_IsTrialOwnedByThisUser
Windows::Services::Store::StoreAppLicense::get_TrialTimeRemaining
Windows::Services::Store::StoreAppLicense::get_TrialUniqueId
::WindowsDuplicateString(_trialUniqueId.Get(), pValue)
Windows::Services::Store::StoreAppLicense::get_IsDiscLicense
IAPUtils::ParseTimeSpan(timeString.Get(), &date)
Windows::Services::Store::JsonParser::ParseTimeSpan
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreLicense>>
AW+Gd
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreLicense>>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreLicense>
Windows::Services::Store::StoreProductResult::RuntimeClassInitialize
ChkHr(products.CopyTo(_products.GetAddressOf()))
Windows::Services::Store::StoreProductResult::get_Product
onecoreuap\enduser\winstore\licensing\winrt\lib\storeproductresult.cpp
ChkHr(_products->GetAt(0, &_product))
ChkHr(_products->get_Size(&count))
Windows::Services::Store::StoreProductResult::get_ExtendedError
Windows::Services::Store::StoreProductQueryResult::RuntimeClassInitialize
ChkHr(StoreProductPagedQueryResult::BuildMap( products, productKinds, &_mapView))
_mapView.CopyTo(ppValue)
onecoreuap\enduser\winstore\licensing\winrt\lib\storelistingqueryresult.cpp
Windows::Services::Store::StoreProductQueryResult::get_ExtendedError
Windows::Services::Store::StoreProductQueryResult::get_Products
Windows::Services::Store::StoreProductPagedQueryResult::RuntimeClassInitialize
ChkHr(spNextQueryOperation.CopyTo(_spNextQueryOperation.GetAddressOf()))
onecoreuap\enduser\winstore\licensing\winrt\lib\storelistingpagedqueryresult.cpp
Windows::Services::Store::StoreProductPagedQueryResult::get_HasMoreResults
Windows::Services::Store::StoreProductPagedQueryResult::get_Products
Windows::Services::Store::StoreProductPagedQueryResult::GetNextAsync
Windows::Services::Store::StoreProductPagedQueryResult::get_ExtendedError
ChkHr(spOperation->BeginWork(1))
ChkAlloc(spOperation)
ChkHr(productKinds->First(&pkIter))
Windows::Services::Store::StoreProductPagedQueryResult::BuildMap
ChkHr(pkIter->get_Current(requestedProductKind.GetAddressOf()))
ChkHr(pkIter->get_HasCurrent(&hasCurrent))
ChkHr(pkIter->MoveNext(&hasCurrent))
ChkHr(productKindHashMap->Insert(requestedProductKind.Get(), true, &replaced))
ChkHr(products->GetAt(i, product.GetAddressOf()))
ChkHr(products->get_Size(&count))
ChkHr(productKindHashMap->HasKey(actualProductKind.Get(), &found))
ChkHr(product->get_ProductKind(actualProductKind.GetAddressOf()))
ChkHr(hashMap->Insert(storeId.Get(), product.Get(), &replaced))
ChkHr(product->get_StoreId(storeId.GetAddressOf()))
ChkHr(hashMap->GetView(ppMapView))
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, UInt8>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreProduct>>
Windows.Foundation.Collections.IKeyValuePair`2<String, UInt8>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreProduct>>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, UInt8>>
Windows.Foundation.Collections.IMapView`2<String, UInt8>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IMap`2<String, UInt8>
Windows::Services::Store::StoreConsumableResult::get_Status
ChkArg(status)
ChkArg(trackingId)
onecoreuap\enduser\winstore\licensing\winrt\lib\storeconsumableresult.cpp
ChkArg(balanceRemaining)
Windows::Services::Store::StoreConsumableResult::get_TrackingId
Windows::Services::Store::StoreConsumableResult::get_ExtendedError
Windows::Services::Store::StoreConsumableResult::get_BalanceRemaining
Windows::Services::Store::StoreAcquireLicenseResult::get_StorePackageLicense
_pPackageLicense.CopyTo(ppValue)
Windows::Services::Store::StoreAcquireLicenseResult::get_ExtendedError
onecoreuap\enduser\winstore\licensing\winrt\lib\storeacquirelicenseresult.cpp
Windows::Services::Store::StorePackageLicense::RuntimeClassInitialize
ChkHr(_pPackage->get_Id(packageId.GetAddressOf()))
ChkHr(packageId->get_FullName(optionalPfn.GetAddressOf()))
onecoreuap\enduser\winstore\licensing\winrt\lib\storepackagelicense.cpp
ChkHr(storeContextServer->AcquireStoreLicenseForOptionalPackage( optionalPfn.Get(), spStorePackageLicenseLostCallback.Get(), &_valid))
ChkHr(MakeAndInitialize<StorePackageLicenseLostCallback>(&spStorePackageLicenseLostCallback, this))
Windows::Services::Store::StorePackageLicense::~StorePackageLicense
ReleaseLicense()
Windows::Services::Store::StorePackageLicense::add_LicenseLost
_licenseLostEvent.Add(pHandler, pToken)
Windows::Services::Store::StorePackageLicense::remove_LicenseLost
_licenseLostEvent.Remove(token)
Windows::Services::Store::StorePackageLicense::get_Package
_pPackage.CopyTo(ppPackage)
Windows::Services::Store::StorePackageLicense::Close
Windows::Services::Store::StorePackageLicense::get_IsValid
Windows::Services::Store::StorePackageLicense::ReleaseLicense
_pPackage->get_Id(packageId.GetAddressOf())
storeContextServer->ReleaseStoreLicenseForOptionalPackage(optionalPfn.Get())
packageId->get_FullName(optionalPfn.GetAddressOf())
Ylp)d_
Windows::Services::Store::StorePackageLicenseLostCallback::RuntimeClassInitialize
ChkHr(AsWeak(pStorePackageLicense, &_wrStorePackageLicense))
onecoreuap\enduser\winstore\licensing\winrt\lib\StorePackageLicense.h
Windows::Services::Store::StoreCanAcquireLicenseResult::RuntimeClassInitialize
ChkHr(_licensableSku.Set(licensableSku))
Windows::Services::Store::StoreCanAcquireLicenseResult::get_Status
onecoreuap\enduser\winstore\licensing\winrt\lib\storecanacquirelicenseresult.cpp
ChkHr(WindowsDuplicateString(_licensableSku.Get(), pValue))
Windows::Services::Store::StoreCanAcquireLicenseResult::get_LicensableSku
Windows::Services::Store::StoreCanAcquireLicenseResult::get_ExtendedError
Windows::Services::Store::StorePurchaseResult::get_Status
ChkArg(pHresult)
onecoreuap\enduser\winstore\licensing\winrt\lib\storepurchaseresult.cpp
Windows::Services::Store::StorePurchaseResult::get_ExtendedError
Windows::Services::Store::StoreRateAndReviewResult::RuntimeClassInitialize
ChkHr(_extendedJsonData.Set(extendedJsonData))
Windows::Services::Store::StoreRateAndReviewResult::get_ExtendedError
onecoreuap\enduser\winstore\licensing\winrt\lib\storerateandreviewresult.cpp
ChkHr(::WindowsDuplicateString(_extendedJsonData.Get(), pValue))
Windows::Services::Store::StoreRateAndReviewResult::get_ExtendedJsonData
Windows::Services::Store::StoreRateAndReviewResult::get_Status
Windows::Services::Store::StoreRateAndReviewResult::get_WasUpdated
Minute
Month
UnitType
Duration
InitialDuration
Units
HasTrial
ChkHr(JsonParser::ParseJSONToObject( json, this, RecurrenceTable))
IsRecurring
onecoreuap\enduser\winstore\licensing\winrt\lib\storesubscriptiondata.cpp
Windows::Services::Store::StoreSubscriptionInfo::RuntimeClassInitialize
ChkHr(_ConvertDuration(_trialPeriodUnitType.Get(), _trialPeriod, &_trialPeriodUnit))
ChkHr(_ConvertDuration(_billingPeriodUnitType.Get(), _billingPeriod, &_billingPeriodUnit))
Windows::Services::Store::StoreSubscriptionInfo::get_BillingPeriodUnit
Windows::Services::Store::StoreSubscriptionInfo::get_BillingPeriod
Windows::Services::Store::StoreSubscriptionInfo::get_TrialPeriod
Windows::Services::Store::StoreSubscriptionInfo::get_HasTrialPeriod
false && "Store service returned an unexpected enum!"
Windows::Services::Store::StoreSubscriptionInfo::get_TrialPeriodUnit
Store service returned an unexpected enum: %hs
Windows::Services::Store::StoreSubscriptionInfo::_ConvertDuration
DisplayRank
onecoreuap\enduser\winstore\licensing\winrt\lib\storeavailability.cpp
Windows::Services::Store::StoreAvailability::RuntimeClassInitialize
ChkHr(JsonParser::ParseJSONToObject( json, this, AvailabilityRootTable))
ChkHr(IAPUtils::BuildStoreId( _productId.Get(), _skuId.Get(), _availabilityId.Get(), _storeId.GetAddressOf()))
Windows::Services::Store::StoreAvailability::get_StoreId
ChkHr(_price.CopyTo(ppValue))
Windows::Services::Store::StoreAvailability::get_EndDate
Windows::Services::Store::StoreAvailability::RequestPurchaseAsync
Windows::Services::Store::StoreAvailability::get_Price
::WindowsDuplicateString(_availabilityId.Get(), pValue)
Windows::Services::Store::StoreAvailability::RequestPurchaseWithPurchasePropertiesAsync
Windows::Services::Store::StoreAvailability::set_ProductIdSkuId
Windows::Services::Store::StoreAvailability::get_AvailabilityId
ChkHr(pAppAddOn->GetProductId(&pszProductId))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productlicenseserver.cpp
Windows::ApplicationModel::Store::ProductLicenseServer::Initialize
ChkHr(pAppAddOn->GetExpireTime(&ftExpireTime))
ChkHr(m_hstrProductId.Set(pszProductId))
ChkHr(IAPUtils::SetDateTime(ftExpireTime, &m_dtExpiration))
ChkHr(pAppAddOn->GetProductType(&m_eAddOnType))
ChkHr(IAPUtils::SetMaxDateTime(&m_dtExpiration))
ChkHr(pUnfulfilledConsumable->get_ProductId(m_hstrProductId.GetAddressOf()))
Windows::ApplicationModel::Store::ProductLicenseServer::InitializeInvalid
ChkHr(m_hstrProductId.Set(featureId))
ChkHr(m_hstrProductId.CopyTo(pValue))
Windows::ApplicationModel::Store::ProductLicenseServer::get_ProductId
Windows::ApplicationModel::Store::ProductLicenseServer::get_ExpirationDate
Windows::ApplicationModel::Store::ProductLicenseServer::get_IsActive
Windows::ApplicationModel::Store::ProductLicenseServer::get_IsConsumable
Windows::ApplicationModel::Store::ProductListingServer::Initialize
ChkArg(pInAppOffer)
ChkHr(_hstrInAppOfferToken.Set(pInAppOffer->InAppOfferToken))
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productlistingserver.cpp
ChkHr(ReceiptHelpers::GetFormattedPrice(locale, market, &pInAppOffer->PricingInfo, false , _hstrFormattedPrice.GetAddressOf()))
ChkHr(_hstrName.Set(pInAppOffer->Name))
ChkHr(_hstrProductTag.Set(pInAppOffer->ProductTag))
ChkHr(_hstrDescription.Set(pInAppOffer->Description))
ChkHr(AgileVector<HSTRING>::Make(&_keywords))
ChkHr(_hstrImageUri.Set(pInAppOffer->ImageUri))
ChkHr(pInAppOffer->spKeywords->GetAt(i, keyword.GetAddressOf()))
ChkHr(pInAppOffer->spKeywords->get_Size(&cKeywords))
ChkHr(ReceiptHelpers::GetFormattedPrice(locale, market, &pInAppOffer->PricingInfo, true , _hstrFormattedBasePrice.GetAddressOf()))
ChkHr(_keywords->Append(keyword.Get()))
Windows::ApplicationModel::Store::ProductListingServer::get_ProductId
ChkHr(_hstrCurrencyCode.Set(pInAppOffer->PricingInfo.CurrencyCode))
Windows::ApplicationModel::Store::ProductListingServer::get_FormattedPrice
ChkHr(_hstrInAppOfferToken.CopyTo(pValue))
Windows::ApplicationModel::Store::ProductListingServer::get_ProductType
Windows::ApplicationModel::Store::ProductListingServer::get_Name
Windows::ApplicationModel::Store::ProductListingServer::get_Keywords
Windows::ApplicationModel::Store::ProductListingServer::get_Description
ChkHr(spVectorView.As(&spIterable))
ChkHr(_keywords->GetView(&spVectorView))
ChkHr(_hstrProductTag.CopyTo(pValue))
Windows::ApplicationModel::Store::ProductListingServer::get_Tag
ChkHr(WindowsConcatString(HStringReference(L"http:").Get(), _hstrImageUri.Get(), uri.GetAddressOf()))
Windows::ApplicationModel::Store::ProductListingServer::get_ImageUri
ChkHr(_spImageUri.CopyTo(pValue))
ChkHr(IAPUtils::CreateUri(_hstrImageUri.Get(), &_spImageUri))
ChkHr(_hstrFormattedBasePrice.CopyTo(pValue))
Windows::ApplicationModel::Store::ProductListingServer::get_FormattedBasePrice
Windows::ApplicationModel::Store::ProductListingServer::get_IsOnSale
Windows::ApplicationModel::Store::ProductListingServer::get_SaleEndDate
Windows::ApplicationModel::Store::ProductListingServer::get_CurrencyCode
Windows::Services::Store::StoreLicense::RuntimeClassInitialize
ChkHr(IAPUtils::SetMaxDateTime(&_expirationDate))
ChkHr(JsonParser::ParseJSONToObject( json, this, LicenseTable))
onecoreuap\enduser\winstore\licensing\winrt\lib\storelicense.cpp
Windows::Services::Store::StoreLicense::get_IsActive
Windows::Services::Store::StoreLicense::get_SkuStoreId
Windows::Services::Store::StoreLicense::get_ExpirationDate
Windows::Services::Store::StoreLicense::get_InAppOfferToken
ChkHr(JsonParser::ParseJSONToObject( json, this, OrderManagementDataTable))
RecurrencePrice
onecoreuap\enduser\winstore\licensing\winrt\lib\storeprice.cpp
Windows::Services::Store::StorePrice::RuntimeClassInitialize
ChkHr(IAPUtils::GetFormattedPrice(_listPrice, _currencyCode.Get(), _formattedPrice.GetAddressOf()))
ChkHr(IAPUtils::GetFormattedPrice(_basePrice, _currencyCode.Get(), _formattedBasePrice.GetAddressOf()))
::WindowsDuplicateString(_formattedBasePrice.Get(), pValue)
ChkHr(IAPUtils::GetFormattedPrice(_recurrencePrice, _currencyCode.Get(), _formattedRecurrencePrice.GetAddressOf()))
::WindowsDuplicateString(_formattedPrice.Get(), pValue)
Windows::Services::Store::StorePrice::get_FormattedBasePrice
Windows::Services::Store::StorePrice::get_IsOnSale
Windows::Services::Store::StorePrice::get_FormattedPrice
::WindowsDuplicateString(_currencyCode.Get(), pValue)
Windows::Services::Store::StorePrice::get_SaleEndDate
::WindowsDuplicateString(_formattedRecurrencePrice.Get(), pValue)
Windows::Services::Store::StorePrice::get_CurrencyCode
jsonValue->GetNumber(&valueAsDouble)
Windows::Services::Store::StorePrice::get_FormattedRecurrencePrice
Windows::Services::Store::JsonParser::ParseDouble
?456789:;<=
 !"#$%&'()*+,-./0123
Windows.PreInstalledConfigTask
Windows.BackgroundTasks
Windows.AppService
Windows.UpdateTask
Windows.ContactDataProvider
Windows.AppointmentDataProvider
Windows.UserDataTaskDataProvider
Windows.EmailDataProvider
Windows.BarcodeScannerProvider
Windows.PrintWorkflowBackgroundTask
Windows.PrintSupportExtension
Windows.PosPaymentConnector
Windows.PrintSupportWorkflow
onecoreuap\shell\lib\activationevents\src\activatedeventargsbase.cpp
Windows.ShareTarget
Windows.Search
Windows.Protocol
Windows.File
Windows.FileSavePicker
Windows.FileOpenPicker
Windows.ContactPicker
Windows.CachedFileUpdater
Windows.PrintTaskSettings
Windows.Device
Windows.CameraSettings
Windows.Print3DWorkflow
Windows.AppointmentsProvider.ReplaceAppointment
Windows.AppointmentsProvider.AddAppointment
Windows.AppointmentsProvider.ShowTimeFrame
Windows.AppointmentsProvider.RemoveAppointment
Windows.Contact.Call
Windows.AppointmentsProvider.ShowAppointmentDetails
Windows.Contact.Map
Windows.Contact.Message
Windows.Contact.VideoCall
Windows.Contact.Post
Windows.ContactsProvider.AddContact
Windows.ContactsProvider.ShowContact
windows.LockScreenCall
Windows.RestrictedLaunch
Windows.WebAccountProvider
Windows.VoiceCommand
windows.lockScreen
Windows.ComponentUI
Windows.PersonalAssistant.Launch
Windows.DialProtocol
Windows.Internal.FilePickerExperience
Windows.UserDataAccountsProvider
Windows.PeoplePane
Windows.AppUriHandler
Windows.ContactPanel
Windows.LockScreenComponent
Windows.PrintWorkflowForegroundTask
Windows.OopWebView
Windows.CommandLineLaunch
Windows.StartupTask
Windows.PhoneCallActivation
Windows.BarcodeScannerPreviewProvider
onecore\shell\lib\calleridentity\calleridentity.cpp
Software\Microsoft\Windows\CurrentVersion\Store\ContentId
win8xappx
wp8xappx
win32
%s:%s:%s
XboxUserId
https://login.windows.local
https://login.windows.net/common
consumers
{d6d5a677-0872-4ab0-9442-bb792fce85c5}
organizations
{268761a2-03f3-40df-8a8b-c3db24145b6b}
S-1-15-2-903380885-3144618533-3326689759-1293738580-1356288723-3824823557-3342340653
S-1-15-2-1609473798-1231923017-684268153-4268514328-882773646-2760585773-1760938157
service::%s::%s
MBI_SSL
AlwaysPromptBeforePurchase
x-xbl-contract-version:2
Accept:application/json
AADAuthority
OneStoreAuthenticationPolicy
MOBillingAuthenticationDomain
AADResource
www.microsoft.com
XboxLiveAuthenticationDomain
https://onestore.microsoft.com
mbi_ssl
user.auth.xboxlive.com
mobilling.microsoft.com
//ServiceEnvironment/Authentication
https://purchase.mp.microsoft.com
onecoreuap\enduser\winstore\auth\lib\winstoreauth.cpp
WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicketForUri
WinStoreAuth::AuthenticationInternal::GetTicketForAccount
WinStoreAuth::GetAccountTicketFromTokenBroker
WinStoreAuth::AuthenticationInternal::GetAllAccountTickets
Failed to get account from accounts vector
WinStoreAuth::GetAccountTicketsFromTokenBroker
WinStoreAuth::GetAADFromRegistry
WinStoreAuth::AuthenticationInternal::GetDeviceTicketWithBroker
authority
resource
WinStoreAuth::AuthenticationInternal::GetAllXTokens
WinStoreAuth::AuthenticationInternal::GetXToken
WinStoreAuth::AuthenticationInternal::PrefixTicketForMDollar
WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountId
MSAHW1.0=
Bearer 
WinStoreAuth::AuthenticationInternal::ConvertWebAccountIdFromRealIdToAppInternal
WinStoreAuth::AuthenticationInternal::ConvertWebAccountIdFromAppToRealIdInternal
WinStoreAuth::AuthenticationInternal::FetchXboxLiveAccountId
WinStoreAuth::AuthenticationInternal::FetchStoreAccountIdFromRegistry
Sandbox
Software\Microsoft\XboxLive
WinStoreAuth::AuthenticationInternal::GetCurrentIUser
RETAIL
WinStoreAuth::AuthenticationInternal::CreateTokenBroker
WinStoreAuth::AuthenticationInternal::CreateAuthenticationManager
WinStoreAuth::AuthenticationInternal::GetAccountProvider
WinStoreAuth::AuthenticationInternal::CreateTokenBrokerInternal
WinStoreAuth::AuthenticationInternal::GetAllTokenBrokerAccounts
WinStoreAuth::AuthenticationInternal::FindAccount
WinStoreAuth::AuthenticationInternal::CreateTokenRequestHelper
WinStoreAuth::AuthenticationInternal::CreateGoldenAccountTokenRequest
WinStoreAuth::AuthenticationInternal::CreateLegacyTicketRequest
Client_ShowSkipForceAuthentication
Device
WinStoreAuth::AuthenticationInternal::ExtractTicketFromTokenResponse
WinStoreAuth::AuthenticationInternal::ManagePropertiesFromTokenResponse
Account Ticket succesfully extracted. Ticket providerType: %ws web: %ws 
WinStoreAuth::AuthenticationInternal::ExtractTicketsFromTokenResult
SkipForceAuthentication
WebTokenRequestStatus: ProviderError
HR: 0x%x
ResponseErrorMessage: %ws
WebTokenRequestStatus: UserInteractionRequired
HR: 0x%x
WAM HR: 0x%x
ResponseErrorMessage: %ws
WinStoreAuth::_SendTokenRequestAndGetTickets
WinStoreAuth::AuthenticationInternal::CaptureStorePrimaryAccountTicket
WinStoreAuth::AuthenticationInternal::CaptureStorePrimaryAccountId
WinStoreAuth::AuthenticationInternal::CaptureGoldenAccountTicket
WinStoreAuth::AuthenticationInternal::ExtractProviderType
WinStoreAuth::AuthenticationInternal::FindCachedStorePrimaryAccount
WinStoreAuth::AuthenticationInternal::ExtractAccountId
WinStoreAuth::AuthenticationInternal::ExtractTicket
WinStoreAuth::SetProxyBlanket
Windows.Foundation.Collections.IIterator`1<Object>
Windows.Foundation.Collections.IVectorView`1<Object>
Windows.Foundation.Collections.IVector`1<Object>
onecoreuap\enduser\winstore\auth\lib\winstoreauthstatics.cpp
WinStoreAuth::GetStorePrimaryAccountIdForUser
WinStoreAuth::ConvertWebAccountIdFromAppToRealIdForUser
WinStoreAuth::ConvertWebAccountIdFromRealIdToAppForUser
CHttpRequest::~CHttpRequest
_hRequest == 0
_pConnection == nullptr
onecoreuap\enduser\winstore\lib\httprequest.cpp
CHttpRequest::Initialize
CreateEvent failed
CHttpRequest::s_WinHttpCompletionCallback
dwContext != 0
CHttpRequest::_WaitForLastAsyncCompletion
WaitForMultipleObjects returned %u
CHttpRequest::_WinHttpCompletionCallback
cbStatus >= sizeof(WINHTTP_ASYNC_RESULT)
cbStatus >= sizeof(DWORD)
Request 0x%08x failed, result %d
_hRequest == hRequest
Canceling redirect for 0x%08x
CHttpRequest::_GetProxyInfoForUrl
pszServerName && pszUrl
ppszProxyList && ppszProxyByPass && pdwAccessType
Proxy list = %s, Proxy bypass = %s, Proxy access type = %i
http%s://%s/%s
CHttpRequest::_SetProxyForCurrentRequest
WinHttpSetOption failed
CHttpRequest::_SendRequestWithRetry
Server: %s, URL %s
_SetProxyForCurrentRequest(pszCurrProxy, pszProxyBypass, dwAccessType)
text/xml
CHttpRequest::_CreateConnectionAndSendRequest
WinHttpSetStatusCallback failed
WinHttpOpenRequest failed
WinHttpSetOption(WINHTTP_OPTION_AUTOLOGON_POLICY) failed
WinHttpSetOption CONTEXT_VALUE failed
Start callback failed
WinHttpSetOption(WINHTTP_ENABLE_SSL_REVOCATION failed
WinHttpReadData failed
_GetProxyInfoForUrl(pszServerName, pszUrl, fUseSecure, &pszProxyList, &pszProxyByPass, &dwAccessType)
WinHttpReadData completion failed
CHttpRequest::_DownloadData
DataDownloaded callback failed
_AppendToDataBuffer failed
WinHttpReceiveResponse failed
_ReceiveResponse failed
Failed to convert systemtime to filetime
CHttpRequest::_ReceiveResponse
Machine
WinHttpQueryHeaders failed, status code = %i
Request 0x%08x has machine %s and RID %s
_hRequest
_WaitForLastAsyncCompletion failed
CHttpRequest::AddRequestHeader
WinHttpAddRequestHeaders(%s) failed
CHttpRequest::UploadAndFetchResource
_CreateConnectionAndSendRequest(pszServerName, pszUrl, fUseSecure, fUsePut ? L"PUT" : L"POST", _GetStreamSize(pUploadDataStream), port, 0, fUseAuthentication)
Request to [%s] failed with connection error. Retrying %d more times
_DownloadData()
CHttpRequest::UploadAndFetchResourceByUrl
pszFullUrl
WinHttpCrackUrl failed
_hCancelInternal
Response buffer overflow
CHttpRequest::AbortRequest
DWordAdd(dwNeeded, 1, &cbSizeToAlloc)
CHttpRequest::_AppendToDataBuffer
CHttpRequest::_LocalAllocHeader
CHttpRequest response header: %s : %s
pszAuthorizationHeader
X-Windows-Store-Debugging-Id:%s
CHttpRequest::SetAuthorizationHeader
CHttpRequest::_AddDebugHeaderIfPresent
Added header %s
!_pszServer
X-Windows-Store-Debugging-Id
!_hInternet
CHttpConnection::_Initialize
WinHttpConnect failed for %s:%d
CHttpConnection::Connect
Windows Store/1.0
CHttpSession::_Initialize
WinHttpSetTimeouts failed
WinHttpSetOption WINHTTP_OPTION_REDIRECT_POLICY failed
DPA_SortedInsertPtr failed on handle 0x%08x for %s:%d
WinHttpOpen failed
CHttpConnectionCache::GetConnection
ntdll.dll
MicrosoftTelemetryAssertTriggeredUM
Version
ReceiptBase64Encoded
ReceiptResponse
ErrorCode
PurchaseOperation
__TlgCV__
Request
Response
HResultOfOperation
Verbose
ErrorMessage
ErrorCode
ErrorLocation
LineNumber
ErrorMethod
OutgoingServiceRequest
__TlgCV__
PartB_Ms.Qos.OutgoingServiceRequest
targetUri
latencyMs
protocolStatusCode
responseSizeBytes
succeeded
Warning
ErrorMessage
ErrorCode
ErrorLocation
LineNumber
ErrorMethod
ErrorMessage
ErrorCode
ErrorLocation
LineNumber
ErrorMethod
Error
PartB_Ms.Telemetry.Error
ErrorMessage
ErrorCode
ErrorLocation
LineNumber
ErrorMethod
EndOperation
__TlgCV__
ErrorCode
ApiInvoked
__TlgCV__
ErrorCode
BeginOperation
__TlgCV__
WinstoreAuth_SendTokenRequestAndGetTickets_Failure
WinstoreAuth_ProviderError
dwErrorCode != 0 ? HRESULT_FROM_WIN32(dwErrorCode) : ((HRESULT)0x80004005L)
WinstoreAuth_UserAuthRequired
HRESULT_FROM_WIN32(1317L)
WinstoreAuth_SLSFailure
GetLastError()
Microsoft.Windows.ApplicationModel.Store.Telemetry
Windows.ApplicationModel.Store.pdb
.rdata$brc
.rdata$T$brc
.CRT$XCA
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIAA
.CRT$XIZ
.CRT$XLA
.CRT$XLZ
.gfids
.giats
.rdata
.rdata$sxdata
.rdata$voltmd
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zzzdbg
.text
.text$di
.text$mn
.text$x
.text$yd
.tls$
.tls$ZZZ
.xdata$x
minATL$__a
minATL$__m
minATL$__r
minATL$__z
.didat$2
.didat$3
.didat$4
.didat$6
.didat$7
.edata
.data$brc
.data
.idata$5
.00cfg
.idata$2
.idata$3
.idata$4
.idata$6
.didat$5
.rsrc$01
.rsrc$02
E(SVW
u$WSQ
j%hpB
j=h`B
j%h8E
j,hh?
VWjbZ
VWjkZ
QQSVW
Pj1h`
Pj*h@
93uHWV
&PWSV
QQSVWh
QQSVWh
QQSVWh
QQSVWh
QQSVWh
QQSVWh
QQSVWh
QQSVWh
QQSVWh
T$pRQ
t$ Ph4!
Pj,h@D
D$(PQ
T$0QQV
L$4^3
XL93uIW
u'h0A
SVPh@
4SVWQQ
y"QVh`E
y'QVh
y'QVh
u#hPF
y$QVh
QQSVW
y'QVh
QVhhG
QVh`H
QVh(H
y'QVh
QVh@I
y:QVh
QVhHK
y"QVh
y'QVh
y'QVh|M
QVhDN
QVhtN
y"QWh
y"QVh
QVhXO
y$QVh
QVh@P
y"QVhxP
y'QVhHQ
y'QVh
y'QVh<R
y'QVh
jQVh8T
QVhHS
y'QVh
QVh`U
y"QVh
QVhHV
y/QWh
y,QWh
QWhxA
y5QWh
QWhxX
QWhdX
QWh@Y
QWh`W
QWh(W
QWhX[
QWh`Z
QWh$Z
QWhx\
QWh(\
QWhh]
QWhP`
QWhL_
QWh@A
y'QVhxa
QVh<b
QVhXc
QVhdb
y'QVh
GdPh0
9_8u+QVh
QVhTe
y#QVhxf
QVhLg
y,QVh
QVh@h
y"QVh
u'QWh
y"QWhxl
y"QWh
y"QVh
u'QVh
QVVPVj
y'QVh
y'QVh
y'QVh
y'QVhXp
y'QVh
y'QVh\q
L$,QVVPj
y<QVh
QVh s
y"QVh
y'QWh$u
QWhPu
y'QWh
y'QWh
y>QWh
D$PPV
9\$Pw&Q
D$ PSV
y0QWhpw
y2QWh
y^QWh`x
QWhPy
L$<QVPQ
y"QWh
L$7QP
QWhp{
8D$;Q
L$XQVPj
y'QWh8}
y'QVh
y'QVh$u
QVhPu
y6QVh
y'QVh
QWVPj
y'QVhx
y'QVh
D$TPj
yHQVh@
L$,QWP
y'QVh
y'QVh@
D$ PV
ywQVh
y'QVh`x
y'QVh`
y-QVh
y"QVh
y'QVh
QSVPj
y'QVh
y"QVh
y'QVh
QSVPj
y'QVh
y"QVh
y"QVh
D$XSV
\$4Pj
D$8Pj
D$PPj
y"QVh
y'QWh
y'QWh@
y6QWh
y-QWh
D$DPV
D$$Pj
y0QWhpw
L$;QP
y0QWh
y9QWh
L$@QP
L$(QSP
y0QWhl
y-QWh
y-QWh
L$@QP
yKQWhd
y0QWht
y3QWh
D$(Ph
y0QWh@
y7QWh
9\$0u/
yPQWhx
y"QWh
y'QVh@
y"QVhP
y"QVh
u'QSh
y0QSh@
y5QSh
D$`98
L$,QP
|$49L$4
L$XCS
y'QShd
D$,PV
y;QSh
y5QSh
y-QSh
yHQShp
L$8QP
D$(PS
L$4CS
y$QShd
y0QSh
L$XCS
L$4CS
y"QSh
y'QVhL
ykQVhx
D$(Pj
y'QVh
yVQVh
y<QVh
y5QVh
y-QVh@
D$4WP
y0QVh
y9QVh
y-QVh4
8F(u:
y'QVh
y0QVh@
y9QVh
L$@Pj
y'QVh
y'QVhx
L$WQP
y'QVh
y'QVh,
L$KQP
y0QVh
D$DPV
y5QVh(
D$dQQ
yyQVh8
y"QVh
y'QVh
y'QVh
y'QVh
y'QVh
y'QVhT
L$pQP
y'QVh
9\$pu&Q
L$(QSP
y'QVh
y'QVh
L$|QP
y9QVh
y0QVh
y9QVhx
L$WQP
y0QVh
y-QVh,
L$VQP
y0QVh
D$LPV
y5QVh(
D$\QQ
y'QVhp
y'QVhx
y3QVh
y2QVh
y'QVh
y'QVh`
y5QVh
y0QVh
y$QVh
y0QShp
y-QSh0
y'QShd
y'QSh
y6QSh
L$(QP
y0QShx
L$PQP
T$89T$P
L$$QRP
L$?QP
T$8;T$P
yBQSh@
D$0PW
y-QSh
L$4Qj
y5QSh,
L$DQP
y5QShd
t$X9T$D
L$0QRP
D$TPV
D$8;D$Tr
T$X;T$D
y"QSh
y'QVh
y-QVh
T$49L$@
y"QVh
y"QVhX
y'QWh
D$tPV
y'QWh
L$pVP
y'QWh
y'QWhT
y'QWh
L$LQP
L$lQP
L$xQP
L$GQP
D$<PV
y6QWhh
D$0P3
y-QWh
y=QWh
L$8Qhl5
y-QWh
D$\PQ
L$,QS
L$dQP
L$HCS
y'QWh(
y"QWh
y5QWh
y-QWh
yNQWh
y-QWh
D$`PV
y0QWh
yPQWh
L$LQP
L$,QSP
y0QWhl
y-QWh
L$LQP
y-QWh
yDQWh@
D$DPSV
y0QWhpw
y-QWht
yxQWh
y>QWh
y-QWhp
L$8Qh
y-QWh
y2QWh
y-QWhh
y-QWh
\$DPV
y2QWh`
y0QWh
y0QWh
y-QWh
L$0QP
y-QWh
L$SQP
L$xQP
L$kQP
L$@QP
L$,QhT*
L$TQP
L$RQP
D$`PV
L$RQP
\$DPV
D$\PS
L$SQP
y"QVh|
y'QVh
y.VhX
y,QVh
y'QShh
y'QShP
y-QSh
y0QSh
y7QShT
yqQSh
y3QSh
y/QSh
y\QShp
y'QSh
y:QSh0
y?QSh
QShtN
QShDN
y'QVh
y'QVh
y'QVh
y/QVhh
y3QVh
y'QVh0
y2QVhp
y'QVh`x
y/QVh<
y*QVhp
y;QVh
QVh s
y'QVh
y:QVhP
y9QVh
y9QVhh
y"QVhP
,SVW3
y'QVh
D$8PV
y"QVhP
y#QVh
yDQWh
y^QWhp
yVQWh
y?QWh
yUQWh
y>QWh(
y,QWh
y/QWh
y"QVh
y6QSh
u0QSh
y-QSh@
y0QVhH
y-QVh
L$8QP
\$(9T$8
L$$QRP
L$4QP
\$09\$4vw
D$0;D$4r
T$(;T$8
y$QVh
PjOhX.
93uHWV
s2SVW
y$QVh
y"QVh
y%QVh
y%QVh
QVhxA
QVh`+
QVh$,
QVhL,
QVh@A
^Wh$E
QQSVW
ti9\$
9X$vC
Z9p,tL3
T$$;E
T$$;]
L$ ;u
_^[Y]
ti9\$
9X$vC
Z9p,tL3
T$$;E
T$$;]
L$ ;u
_^[Y]
^Whd*
PjWh8
PjLhH
@;G(v&
@;G(v&
QQSVW
A0;B@t
;K@t(
;w(s/
;K@t(
;H@t&
A ;B0t
;K0t(
G ;A0t(
;K0t<
;H0t&
;K@t<
P9w0u
P9w u
;Q@t2
;H@t?
;Q@t2
;Q@t3
;Q@tU
;Q0t2
;Q0t2
;Q0t3
;Q0tU
Pj;hP
Pj6h8
Pj#hx
PjQhX
;K0t<
y$QQS
$SVWj
y$QQS
S _^3
Pj3hP
x,SSh 
S _^[
^Wh,#
S$_^[
Pjah@#
QPh@%
y%QVh
y%QVh
QVhxA
L$ QP
L$4QP
L$$QP
QVh`+
QVh$,
QVhL,
QVh@A
y QVh
y%QVh
y%QVh
QVhxA
QVh`+
QVh$,
QVhL,
QVh@A
y$QVh
y"QVh
y QVh
y QVh
y QVh
;Q@t=
;Q@t'
;K@t<
F$9^,u
9V$v)
P9w0u
;Q@t=
9^,t&h
;K@t(
;K0t<
;Q0t=
;Q0t'
;H0t?
;Q0t=
G ;A0t(
x(9s$t#
9_0t'
tw9^,t
@d;A(t
9^0u;
CiWWSP
@d;A(t
QQVW3
y"QWh >
} QVh
x,SSh 
^Wh D
9wHu`
9wHu1VS
9wHu$QSh
YPhHF
QWh$G
QWh<G
QWhPG
y"QWh|G
QShDH
QSh<G
y-QShPG
QShTH
QWh<G
y$QWhPG
QWh I
y"QWh`I
8T$Pu
QQRRRRPhPJ
y'QVh
QVh<G
y-QVhPG
y"QVh
PPPPShPJ
y'QVh
QVh<G
y-QVhPG
y"QVh
T$@QQQQWh|L
y'QVh
QVh<G
y-QVh
y"QVh O
PPPPWh|L
t$0h|L
y'QVh
QVh<G
y"QVh@Q
8D$(u
QQPPPPPPW
QVh<G
QVhPG
ypQVh8S
PPPPPPW
8D$(u
QQPPPPPPW
QVh`T
QVh<G
QVhPG
ypQVh
PPPPPPW
8D$(u
QQPPPPPPW
QVh<G
ypQVh
PPPPPPW
QVh|W
QVh<G
T$0QQQQWh|L
QVh<G
y-QVhPG
yxQVh@Y
PPPPWh|L
T$8QQQh
QVh<G
QVhPG
T$8QQPh
QVh<G
QVhPG
L$ VW
T$0PPPPWh|L
y$QVh<G
y"QVhX]
PPPPWh|L
8D$(u
QQPPPPPPW
QVh<G
QVhPG
ypQVh
PPPPPPW
QVh<G
QVhPG
t$ PV
y~QVh0`
QVh<G
QVhPG
t$ PV
y~QVh
y'QVhXb
QVhXc
QVh8}
y0QVh
y0QVhPd
y QVh
QQSVW
QVh8}
y0QVh
y0QVhPd
y QVh
QVh8}
y0QVh
y0QVhPd
y QVh
693t%
QQSVW
y"QVh
9w4u`
9w4u1VS
9w4u$QSh
YPhHF
VPhHf
QVh|g
y'QVh
QVh<G
y-QVhPG
y"QVh
QQPPPPPPW
QVh<G
QVhPG
ypQVh
PPPPPPW
QVh8}
y0QVh
y0QVhPd
y QVh
Pj3hh
Pj#h8
y QVh8m
y QVh@n
QVh o
QVhDN
y"QVh
QVh o
QVhDN
y"QVh8p
y"QVh
8D$(u
QQPPPPPPV
y)QWh
T$$hP
y"QWh
QQSSSSSSV
QSh0q
y"QSh,r
PPPPPPVW
y"QVh
y"QVh@z
y"QVh
QVhP{
y"QWh
T$8PPPPVh
y"QWhx}
PPPPPPV
y"QSh,r
PPPPPPVW
QVh o
QVhDN
y"QVh
QVh o
QVhDN
y"QVh
y"QVhP
y"QVh
QQSVW
QVh o
QVhDN
y"QVh
QQSVW
QVh o
QVhDN
y"QVh
y'QVh
QVh o
QVhDN
y"QVh8
y'QVh
QVh o
QVhDN
y"QVh
QQSVW
QVh o
QVhDN
y"QVh
QQSVW
QVh o
QVhDN
y"QVh
y"QVhx
y'QVh
y"QVhx
y"QVh
y"QVhx
y(QWh@
y"QWhX
y-QWh
y"QWhp
y(QWh
y"QWh
y-QWh
y"QWh8
y$QVh@
y'QVh
y"QVh
QSVW3
y$QVhL
y$QVh
Pj'h(
Pjch`
G4VVWP
Pjgh`
;K0t<
;H0t*
;H0t*
;H0tES
;Q0tC
x,SSh 
x,SSh 
QQSVW
QQSVW
693t%
SVSPSj
QQSVW
QQSVW
y QVh$
y%QWh
y4QSh
y%QShx
QWPh`
y)QPh
y)QPhx
L$0QP
y$QVh
y$QVh`
t$4WP
y$QVh0
y-QVhX
D$XSV
\$4Pj
D$8Pj
D$PPj
y"QVh
y"QVh
y$QVh
QVh|W
y$QVh
L$4SV
y)QSh
L$$9L$
yMQSh
y2QSh
QVh|g
y$QVh
L$$SV
y"QWhH
QQSSSSSSVP
QQQQQQVP
yQQWh@
QWh8}
y$QVh(
y'QWhH
y:QWh
y QWh
L$$SV
y"QWh
QQSSSSSSVP
SSSSSSVP
y'QSh
PQh@D
y'QShX
PQh@D
y$QShX
PjhhX
ti9\$
9X$vC
Z9p,tL3
T$$;E
T$$;]
L$ ;u
PjlhX
@;G(v&
QQSVW
QQSVW
;K@t<
x,SSh 
QQSVW
y"QVh
WjPSj
Wj[Sj
SjfhH
091t(P
WjxSj
y"QWh
PjHhP
y"QVh
y QVh
y%QWh8
y%QWh`
y%QWh
y"QWh\
L$ Qh
y QWh
y%QSh
y%QSh 
y1QSh
y/QSh
y'QSh
y"QSh
y"QVhl
y"QVh
y"QVh`
y'QSh\
y'QSh
D$LPW
y<QSh
D$HPQ
9D$Lv6
L$(QS
D$8;D$H
y"QSh
QQSVW
CYWWSP
QQSVW
9_ t'
x,SSh 
x,SSh 
x,SSh 
QQSVW
y%QVh
y.QVhXb
y+QVh
y+QVhXc
y4QVh
y<QVh
9\$(t
y.QVhx
D$0PjEh0
y QVh8
D$ PjEh0
y QVh
Pjyh0
y&QWh
y QWh
D$(PhX
y&QWh
y QWh
w\_^[
y"QVh
y"QVh
L$HQP
y0QVh
yGQVh
D$ PQ
QVh8 
D$ Ph
L$0QVPh("
T$0QQj
8T$0u
D$4PQ
ymQWh
L$0QVPh
T$0QQj
8T$0u
D$4PQ
ymQWh
D$ Ph
T$(PPPPPPS
8\$ u
D$ PQ
y_QVhh'
QQSSSSSSW
D$ Ph
T$(PPPPPPS
8\$ u
D$ PQ
y_QVh
QQSSSSSSW
L$8QVPhX)
QVh(*
QWhp*
D$0PQ
y~QVhX+
D$,QQj
L$(QPh
T$0QQQQPh
QVh(*
yjQVh ,
PPPPSh
QVh(*
D$,PQ
yzQVh`/
L$(QPh
T$0QQQQPh
QVh(*
yjQVh@0
PPPPSh
QVh(*
D$(PQ
yzQVh`2
L$ QPh
T$(QQQQWh
QWhl4
8T$ u
D$$PQ
yfQVhh5
PPPPWh
D$ Ph
T$(QQQQQQP
8T$ u
D$$PQ
ybQVhx7
PPPPPPW
D$(Ph
T$0QQQQQQP
QWh06
QVhP8
D$,PQ
ynQVhT
PPPPPPW
L$ QPh@9
T$(QQQQWh
QWhl4
8T$ u
yfQVhT
PPPPWh
D$ Ph@:
y"QWh
QWhl4
8T$`u
D$ PQ
QVhp>
L$8QPh
T$@QQQQWhD?
8D$8u
D$@PQ
y"QVhh@
PPPPWhD?
L$8QPh
T$@QQQQWhD?
D$@PQ
y"QVh@A
PPPPWhD?
L$ QPh
T$(QQQQSh
yfQVh@D
PPPPSh
D$ PhxC
T$(PPPPPPS
8\$ u
D$ PQ
y_QVh
QQSSSSSSW
D$0PhpF
T$8QQQQQQP
QWhlG
QVh4G
D$DPQ
y"QVhhH
PPPPPPW
D$0Ph
T$8QQQQQQP
QWhlG
QVh4G
D$DPQ
y"QVh`I
PPPPPPW
L$ QPh
T$(QQQQSh
QVhp*
yfQVh
PPPPSh
tP!|$
L$8QVPh
T$@PPPPPPV
QVh(*
QPh@M
D$,PQ
yjQVh
jjjjjj
y"QVh`O
D$(Ph
T$0QQQQQQP
8T$(u
D$<PQ
ybQWh(R
PPPPPPV
D$(PhHQ
T$0QQQQQQP
8T$(u
D$<PQ
ybQWh
PPPPPPV
D$ Ph
T$(PPPPPPS
QVh0V
8\$ u
D$$PQ
y_QVhpU
QQSSSSSSW
L$(QPh
T$0QQQQPh
QWh0V
QWh\*
QVhp*
8T$(u
D$ PQ
yjQVhHW
PPPPSh
L$(QVPhhX
T$0QQQQPh
QWhp*
D$,SQj
yjQWhHZ
PPPPVh
L$@QP
L$PQWVPhpY
D$$QQVh
QVh(*
QPhL[
QShl\
D$<PQ
D$8QQWh
D$$Ph
T$(QQQQPh
QWh0V
QWh\*
QVhp*
WQQQP
yqQVh
PPPPWh
D$(Ph
T$(PPPPPPS
y_QVhx_
QQSSSSSSW
D$(PhX`
T$0PPPPPPW
D$(PQ
y"QVh
PPPPPPW
D$ Ph
T$(QQQQQQP
8T$ u
D$$PQ
ybQVh
PPPPPPW
D$ Ph
T$ PPPPPPV
y[QVh
PPPPPPW
D$(Ph
T$(PPPPPPS
y_QVhhg
QQSSSSSSW
D$ Ph
T$ PPPPPPV
y[QVh
PPPPPPW
QWh0V
QVh4G
y"QVh
y"QVh
y'QVh
y/QVh
y,QVh
y,QVh
y,QVh
QVhpl
y/QVhHl
y'QVh
dQVh|m
QWh0V
QWh\*
QVh4G
y"QVh
$SVWj
x,SSh 
$SVWj
x,SSh 
$SVWj
x,SSh 
y$QQS
y$QQS
y$QQS
QQSVW
QQSVW
QQSVW
QQSVW
QQSVW
QQSVW
QQSVW
QQSVW
QQSVW
QQSVW
QQSVW
QQSVW
u@PPW
PjSh@t
PjRhHu
PjVhXw
y"QVh
$SVWj
y$QQS
x,SSh 
$SVWj
y$QQS
x,SSh 
$SVWj
y$QQS
x,SSh 
$SVWj
y$QQS
x,SSh 
$SVWj
y$QQS
x,SSh 
$SVWj
y$QQS
x,SSh 
$SVWj
y$QQS
x,SSh 
$SVWj
y$QQS
$SVWj
y$QQS
x,SSh 
PjYhP
$SVWj
y$QQS
x,SSh 
x,SSh 
y QVhp
y QVh
y QVh
Pj.h@
D$hPQQ
y"QVh
y'QWh
y4QWh
yMQWh
jQWh8
y"QWh
y'QVhX
y'QVh
y"QVh4
RSWVj
y"QVh
y QVh
y QVhh
y QVhh
y QVhp
y QVh
y QVh
y"QVhp
y"QVhp
y"QVhp
y"QVhp
y"QVhp
y$QVh
y$QVh
y"QVh
u$QWht
y$QVh
y"QVh\
tCf;}
r!f;E
v9f;}
/t.f;E
jSXf;
jSXf9E
j.Xf9
rj+_f;
j-_f;
ZuJf9Lr
j;Xf9E
j+Zf;
j-Zf;
j;Zf;
M QRSP
D$pPh
y)Wh$
y6QVh
y QVh
QVhXc
y"QVh
y"QVh
y'QVh
y'QVh
yQQVh
yJQVhD
y8QVh
y-QWh
y*QWh
D$(SV
y+QWh
t$4Pj(h
y-QWh8
y"QWh
y'QWh
y/QVhX
y0QVh
y-QVh
L$ QWP
y'QVh`
t$ Vj
y"QVhH
y'QVh8
y'QVh
y'QVh
y$QVh
y'QWh
y'QWh
y*QSh
y$QWh
y"QVh
y*QSh
y'QShP
y4QSh@
y"QWhT
y'QWh
QSVW3
uW97t*h
y%QVh
y%QVh
y%QVh
y%QVhx
y2QVh
yEQVh,
Pj#hx
y=QVh
y'QVh
y&Vhd
y"QVh
y'QVh8
Pj"h 
y"QVh
yEQVh
y"QVh@
y"QWhP
y5QVhh
Pj3hH
y"QVh
y'QVh<
wQVhh
y"QVh
y9QWh
y"QWhX
y'QWh
y'QWh
y'QWh
y'QWh,
y'QWh
y$QWh
y'QVh
y'QVh
y3QVh
y1QVh
y3QVh
y=QVh
y"QVh
y'QVh8
Pj"h 
y'QVh
y/QVh
y,QVh(
y"QSh
y'QVh
y$QVh
y$QVh
y"QVhx
L$4Pj
y"QVh
yMQVh
y$QVhT
y'QSh
T$<Zf;
9.u1h
j:[f9
\$ t)
t$8QP
T$(j:Yf9
D$,YY9D$
j-Yf9L$8u
ykQVh
y"QVh
y'QWh
y0QVhX
y'QVh
y0QVh
y'QVhx
y'QVh
XQVhp
yBQVh8
y7QVhh
"QVh 
"QVhx
[QVh$
RQVh`
y'QVh
y'QVh
y"QVh
y'QVhl
y'QVh
y"QVh
j+Xf;
u"QSh
y%QVh`x
y.QVh@
y%QVh4
y%QVh
y%QVh
L$'QP
L$DQP
D$4PV
D$0PV
L$4PW
L$'QP
D$(P2
yUQVh
y5QVhX
y-QVh
y|QVh
L$XQRP
PjXh8
PjVhx
;K0t<
y QVh
y'QVh
ZQVh 
y'QVh
3QVh|
y'QVh
y"QVh@
Q9O\u+
y0QVh@
y"QVh
Q9K\u(
y"QVh0
Q9K\u(
y"QVh
Q9K\u(
y"QVh 
y"QVh
y'QSh
PjKhP
I8QWh
PjOh@
PjKhh
;K0t<
C;\$ 
;H0t?
;H0t?
Pj!hP
y"QVhP
QQSVW
u"QSh
y%QVh
y5QVh
y=QVh`
QVhX 
y5QVh
D$DPQ
y.QVh`x
y+QVh<
y@QVh
L$7QP
D$(PV
L$7QP
QVh`"
|$8PW
YPh8#
y\QVh
|$<PQ
y$QVh($
y QWh
QQSVW
y'QShp(
y'QSh
y1QVh(*
\$DPj$hp>
y0QVh
y-QVh
y2QVh
y0QVhX/
y9QVh
QVh@1
L$D_^[3
QVhP4
y"QVh
QVhP5
y"QVh
y"QVh
y"QVh
y"QVh :
y/QWh
QWh|;
y*QWhD;
y*QWh
QWh|;
y'QVh
y'QVh8=
y'QVh
y'QVh
y%QWhd@
y%QWh
y8QWhHA
QWhPB
y'QWhHC
y3QWh8F
y0QWh
y>QWh
y$QVh
y'QSh
y9QSh
y7QShPI
QSh0J
y"QSh
QVhHL
QVhLM
y"QVhxN
y'QVh
y'QVhXO
y'QVh
y'QVh
y'QVhXP
y'QVh
PPPPPPV
y'QPh
y2QVh
y/QVh
QVh8Q
y'QVh
PPPPPPV
QVh`T
QVh$T
y"QVh
yTQVh
QVhXU
y6QVh
QVhHV
y,QVh0W
y1QVh
y.QVh@X
QVhHZ
QQSVW
u'QVh
QVh8[
QVh|[
QVh`]
PPPPWh
y=QSh@^
yCQSh0_
QShd_
yHQShH`
QShH`
QQQQWh
y$QVh@b
y"QVh\c
9wlu&h
9wlu&h
9wlu&h
QSVWhtj
y$QVh<d
y$QVh
QVhXe
y"QVh
PQhhh
QPWhXi
^Wh|l
u@PPW
;H0t?
PSSSSSSSj
QVh@p
RPhtq
Pj#h8
^WhHn
y QVhxr
y QVh8s
y QVh
QVhXt
y QVh
QVh8u
y'QWh
y'QWhhv
y'QWh
y0QWhpx
QWhhG
L$$u(j
D$/PW
D$$t,
D$4PQ
QWh,z
QWhPz
QWh${
y0QWhX{
D$$PV
y-QWh
|$0PV
ykQWh`}
QWhH|
QWhp|
PPPPPP
QVh\~
QVh ~
y"QVh
y'QVh 
y'QWh
y'QWh
L$$QP
L$(QP
L$8QP
y0QWh
L$hQP
y]QWh
QWhH|
QWhp|
y'QVh 
y'QVh 
y"QVh,
y"QVhl
Pj^h8
xv9\$
CiWWSP
WSh|5
xB9t$
CiWWSP
Pjah@
sD+D$
y QSh`
G ;A0t(
;K0t<
tw9^,t
tw9^,t
x(9s$t#
P9w u
&9N<u
;Q0tR
;Q0tR
;Q0t1
;Q0t'
QQSVW
y QVh 
y%QVh
y%QVh@
9_ tv
y-QVh
y QVh
y%QVh
y%QVh@
y-QVh
y QVh
D$(SV3
D$ Pj
y'QVh
D$$Pj
y$QVhX
y"QVh
y"QVhX
y'QWh
y'QVh
Pj8h`
y"QVh
D$ PSW
y$QVh
y(QVh
y QVh
QVh8u
y QVh
y%QWhH
y3QWh
y3QWh0
y+QWh0
y,QWh
y)QWh
t$4VP
y%QWh
L$ QP
y$Whx
D$<PQ
y%QWhT
D$(PQ
y%QWhx
L$8QP
L$4QP
y-QWh0
y'QVh
y'QVh
y'QVh
y'QVh
QVhxA
y2QVh
QVhL,
QVh@A
y'QVh(
y'QVh
QVhL,
Pj+h8
K<9{(t'
y'QVh
C8PVQ
y'QVhH
C0PVQ
y"QVh
y"QVh
y"QVh$
y'QVhP
L$,QP
y'QVh
y'QVh
L$(QP
D$DSP
L$PQP
L$HQP
y'QVh
t$4SWVPh
L$8QP
L$4QP
y$QVh
y"QVh
y"QVhH
y"QVh
y"QVh 
y"QVh
y"QVh(
y"QVh`
y"QVh
y"QVhh
y"QVh
y$QVh|
y"QVh
y"QWhT
y$QVh
y$QVh(
G Ph8
9_ t%
x,SSh 
x,SSh 
x,SSh 
9_$t%
y QVh@
y QVh
y"QVh
SVWh$
jjjjjj
y2QVh
y QVhx
y QVh
y5QVh
y QVh
y QVh@
y QVh
y QVhh
y QVhl
y QVh
y QVh
y QVh0
y"QVh|
QQSVW
y QVht
QWh8u
yXQWhD
y%QWh
L$0QQVW
y"QWhH
$SVWj
y$QQS
x,SSh 
y QVh
y(QWh
y*QWh
y-QWh,
y*QWh
y"QWh@
y%QWh
y%QWh
PQQQQ
y0QWh
wQWhh
y'QSh
PSSSS
y'QWh
PQQQQ
PVVVV
y=QWh
y QWh
y1QSh
y'QSh
y'QSh 
y$QSh
y"QSh
y+QVh
D$ Pj
D$lSP
y9QVh
y-QVh
y-QVh
y0QVh
y"QVh
y+QVhX
D$ Pj
y'QVh
y'QVh
yKQVh
y0QVh
y"QVh
QVhP"
y"QVh
y"QVh
PQQQQ
QWhd%
pQWhX
QWh8$
y-QSh
y"QSh
QVh`'
y'QVh
y'QVh
y$QVh
y:QVhx*
y%QShx+
y-QShH,
y-QSh
QSht-
y-QSh
y-QSh .
0SVW3
y%QVh
y QVhp/
QVh 0
QVh|1
QVh(1
QVhp0
y'QVhx
QVh@2
y'QVhX3
y'QVh
QVh84
y'QVh
y'QVh`5
y'QVh`6
y&Vhx7
QVh(7
y$QVh
y'QVhX8
y;QVh
QVh89
y'QVh
y'QVhp:
QVh`;
y'QVh(;
yKQVh
QVhp<
QVhh=
QVhx>
QVhH?
y;QVh
QVhL>
y'QVhP@
y7QVh
y,QVh
QVhpA
y'QVh
QVh,D
y'QVhp:
QVh`;
y'QVh(;
QVh`D
y'QVh
QVh@E
y/QVh<R
y'QVh8F
QWhdJ
ykQWh
y?QWh
QWh<J
QWhxK
y(QWh8K
ybQWhPL
WjUSj
Wj`Sj
QVh0M
WjkSj
WjvSj
QVh,N
ti9\$
9X$vC
Z9p,tL3
T$$;E
T$$;]
L$ ;u
@;G(v&
;K@t<
Pj>h`
y QWh
QVh$P
y QVh
QVh$Q
y QVh
y%QVh`Q
VQVh|R
QQSVW
CYWWSP
Pj>h T
y QVh|
y QVht
QVh8u
y QVh
\$ WVP
QQQQPhPJ
y QVh|
y QVh
QVh8u
y QVh
L$$QQ
t$@WS
y"QVh|
y QVht
QWh8u
y%QWh
L$(QQVWQ
y QWhH
QVh8[
y%QVh(\
QVhT\
QVhD]
QVhl]
rQWh|^
QWh8^
VSPQh
SWVPh
WVPSh0c
y'QWh
QWh<d
QWh0e
y"QVht
QWh|f
QWh8u
y-QVh
PPPPPP
$SVWj
y$QQS
x,SSh 
^Wh@j
y QVht
y QVh8u
PVVVV
y"QVh8
y QVh
PPPPPP
y QVht
QWhDn
y QVh8u
D$ PSSSS
y"QVh8
y QVhxn
QVh8p
y QVht
y-QVh|p
QVh8u
y%QVh
WjIhPo
juhPo
QVh@t
QVh(u
QVh`s
y"QVh
PPPPPP
yIQVh
j-Xf;F
f;F$u
f;F.u
$SVWj
y$QQS
x,SSh 
^WhH{
y QVht
QVh8u
t$$h|L
$SVWj
y$QQS
x,SSh 
y QVh|
y QVht
QWh8u
L$ Qj
y.QSh
L$$QSQW
y"QShH
$SVWj
y$QQS
x,SSh 
y QVh
y QVh,
y QVhL
QQSVW
y QSh
y QVht
y QVh
QVh8u
y QVh
PPPPPP
y QVh<Q
y QVht
QVh8u
y QVhh
y QVh@
PPPPPP
y QVht
QVh8u
y QVh
y QVh
PPPPPP
y QVht
y QVh
QVh8u
L$0VW
y QVh
PPPPPP
$SVWj
y$QQS
x,SSh 
y QVht
QVh8u
y QVh
y4QVh
y QVh
PPPPPP
y QVh
Pj)h8
QVh\~
y QVht
QVh8u
y QVh
y%QVh
y4QVh
y QVh
PPPPPP
Pj.h 
y QVht
QVh8u
y QVh
T$,RQ
y%QVh
y$Vh@
y QVhp
T$(QQ
D$ 9D$
QQQQQQ
y QVht
QVh8u
y QVh
y QVh0
VWu$Q
y QVh
y'QVh
D$,PQ
@9D$,
QQQQQQ
QQSVW
QQSVW
y QVht
QVh8u
y QVh
y!QVh
PPPPPP
y QVht
QVh8u
y QVh
y QVh0
y%QVh
D$(PQ
@9D$(
9D$ t
QQQQQQ
y QVht
QVh8u
y QVh
L$(VW
y%QVh
PPPPPP
y$QVh
y"QVh
y QVht
y QVh
QVh8u
y QWh
PPPPPP
Pj0h8
y QVht
QVh8u
y QVhX
y"QVh
PPPPPP
y QVht
QVh8u
y QVhX
L$(VW
y%QVhT
y"QVh
PPPPPP
y QVht
QVh8u
y QVh
y%QWh
D$ PQ
D$,PV
D$(;D$ 
y"QVhT
PPPPPP
QQSVW
y QVht
y QVhX
QVh8u
L$ VW
y+QVh
y QVhH
QQPPPPPP
Pj*hh
y QVht
QSh8u
L$(VW
y QVh`
WWWWWW
y QVh
QVh8u
y"QWh
PPPPPP
y QVht
QVh8u
y QVh(
y%QVh
y%QVh
y%QVh
y QVhH
PPPPPP
y-QVh
y QVht
QVh8u
y QVh(
y@QVh
y+QVh
y QVh 
jjjjjj
QVh\~
y QVht
QVh8u
y QVh(
y%QVh
y QVh8
PPPPPP
y QVht
y QVh
QVh8u
L$(VW
y=QVh
y QVhd
QQPPPPPP
y QVh
Pj7h`
QQSVW
y QVht
yFQVh 
QVh8u
y QVh
L$(VW
y"QVh
VVVVVV
y"QVh
ycQVh
y"QVh
y"QVh$
y QVh|
y,QVh0
y QVh
y QVhH
y,QVh(
y QVh
y QVh$
y QVh
y'QVhl
y"QVh
y"QVh
y"QVh
y"QVhd
y"QVh
Q9Ktu(
y"QVh
Q9Ktu(
y"QVh 
y'QVh
y/QVh
(QVh`
y"QVh
y/QShP
y'QSh
;K0t<
x(Qh(Y
Pj,hX
y"QVh(
y-QSh8}
.QSh4
y QSh
y QVh<
y QVh
y"QVh
y"QVhL
y"QVh
Pj\h(
K\!t$ P
xi9t$
Pjeh 
tw9^,t
F$9^(t(
y+QWhh
y QWh4
y QVh
y QVh
y%QVh
0QShp
y3QSh
yoQShh
y5QSh
y9QSh(
y;QSh
yCShH
y2QSh
y2QSh
y6QShx
y5QSh 
u/9wHu*h
w@t*h
PVVVV
y>QSh 
O<VuKj
yYQSh
y"QVh
Sj+h0
WjESj
WjPSj
VWu5j
QVhdJ
y"QVh
Wj9Sj
WjDSj
WjOSj
WjZSj
WjeSj
QVh,N
WjpSj
Wj{Sj
QWhT 
QWh, 
QWhh!
9>u3WP
9>u"QPhH!
yrQWhx"
WjPSj
QVh\$
Wj[Sj
QVh,N
WjfSj
WjtSj
tw9^,t
Pj1hH
y"QSh
y%QVh
y%QVh0.
y%QVh
y%QVh
y%QVhh/
y%QVhX0
y%QVh
y%QVh
y,QSh(2
y<QSh
y%QSh
QSh 3
y:QVht4
y:QSh
y5QSh
y*QSh
u)QWh(5
y"QVh@p
QVh@5
y"QVh@p
VPhp7
y)QVhh6
y"QVh
y"QVh
y'QVhx9
y'QWhx9
y"QWh
y$QVhx9
y5QSh
QShh<
QSh,<
y5QShH=
y'QSh
y=QSh
QSh8?
y'QSh
QShP@
y'QSh
yKQSh
y2QSh
y2QSh`B
y/QSh
y2QShXC
y/QSh(D
y$QSh
QShpD
QVh\D
PPPPVh
y'QVh
y'QVh(E
y5QWh
y"QWh
ywQVh
y QWh
VPj@Z
QVhHL
y QVh
QVh(K
QVhPK
y QVhPM
y"QVh
Wj)Sj
WjASj
y QVh
y QVh\T
D$ PQ
yFQVh
;T$ r
yyQVhHV
QVhdU
PjMh0^
PjOhPZ
;K0t<
tw9^,t
y-QVh
y QVh
QVhHb
y QVh
QVh@d
t$,QQ
yDQShXd
D$,PQ
QSh4e
QSh`e
T$(9T$,
D$ PV
T$(;T$,
y"QSh
QShPf
QQSVW
CiWWSP
Pj8hhm
Pj=hxi
tw9^,t
tw9^,t
Pjih0g
QVhPo
QSh`o
9{ t'
y%QVh
y2QVh<r
y"QVhHs
y QVh
QVhHt
QQSVW
y QVh
y"QVh
y QVh
y QVhx{
QVhH}
y QVh@~
y"QVh$
y QVh
y QVh
Q9KTu&
y QVh
Q9KTu(
y"QVh 
y"QVh
y%QVh
QQSV3
y"QVh
8^)uY
y"QShl
WjhSj
Sjth8
Pj-hH
yOQVh
WjOSj
Wj[Sj
WjfSj
QVh,N
y.QVhh
y"QVh
Pj-hx
y QVhP
y QVh\T
y QVh
t+9O(t&
9~ t(
QQSVW
|$4Pj#h8
L$4_^[3
xcWWW
 SVW3
 SVW3
D$Hl5
L$4Qh
L$XQP
|$lPj
L$l_^[3
scPPhpg
t1SV3
y?Whx
<SVWj
PSVQQ
PVSSS
Pj?hx
Pj#h8
PPPhh
QQQhh
WPQQV
QQSVW
D$<Pj
Pj?hx
Pj?hx
Pj#h8
D$ SVW
PjEh0
D$ SVW
Pj"hH
PjEh 
D$$Pj
Pj0hh
QSVWj@3
xAj@j
Pj2h`
;K0t<
QQSVW
QQSVW3
QQSVW3
 9>t#Sh
f9:t3
t\j;V
t"Phx
r(SP3
PQQSVW
Y__^[
QRPhT2
QRPht2
QRPh43
QRPhT3
QRPht3
QRPh44
QRPhT4
QRPht4
QRPh45
QRPhT5
QRPht5
RoOriginateError
RoOriginateErrorW
WindowsCreateString
WindowsGetStringRawBuffer
WindowsDeleteString
WindowsIsStringEmpty
WindowsStringHasEmbeddedNull
HSTRING_UserSize
HSTRING_UserMarshal
HSTRING_UserFree
HSTRING_UserUnmarshal
SHTaskPoolQueueTask
SHTaskPoolAllowThreadReuse
SHCreateMemStream
CoTaskMemAlloc
CoCreateInstance
CoCreateFreeThreadedMarshaler
UuidCreate
NdrDllGetClassObject
NdrDllCanUnloadNow
NdrOleFree
NdrOleAllocate
NdrStubForwardingFunction
CoGetApartmentType
CoWaitForMultipleHandles
RoReportFailedDelegate
RoGetMatchingRestrictedErrorInfo
RoTransformError
IsErrorPropagationEnabled
WindowsCreateStringReference
RoGetActivationFactory
SetRestrictedErrorInfo
CoSwitchCallContext
WindowsDuplicateString
WindowsCompareStringOrdinal
CoTaskMemFree
CoReleaseMarshalData
RoInitialize
RoUninitialize
CreateStreamOnHGlobal
CoMarshalInterface
GetRestrictedErrorInfo
RoGetAgileReference
RoActivateInstance
CoGetInterfaceAndReleaseStream
CoImpersonateClient
CoRevertToSelf
CoSetProxyBlanket
WindowsGetStringLen
WindowsDeleteStringBuffer
WindowsPreallocateStringBuffer
WindowsPromoteStringBuffer
WindowsSubstringWithSpecifiedLength
WindowsSubstring
I_RpcBindingInqLocalClientPID
CoGetMalloc
ConvertSidToStringSidW
RpcServerInqCallAttributesW
CoGetCallerTID
CoGetCallContext
CoTaskMemRealloc
WindowsConcatString
WindowsTrimStringStart
WindowsTrimStringEnd
RpcStringBindingComposeW
RpcBindingFromStringBindingW
RpcBindingSetAuthInfoExW
RpcStringFreeW
UuidFromStringW
StringFromGUID2
NdrClientCall4
IIDFromString
CreateRandomAccessStreamOverStream
EvtExportLog
OpenStateExplicit
GetStateFolder
CloseState
PackageFamilyNameFromFullName
GetPackageFullName
CryptAcquireContextW
CryptCreateHash
CryptHashData
CryptGetHashParam
CryptDestroyHash
CryptReleaseContext
ComposeLegacyXboxContentIdFromInstalledContentId
GetRequiredEkbFromContentId
GetERAPackageFullNameByAumid
GetPurchaseAppLaunchAumid
GetPurchaseAppPackageFamilyName
PolicyManager_GetPolicyInt
keybd_event
MapVirtualKeyW
SetForegroundWindow
GetForegroundWindow
FindWindowExW
GetWindowThreadProcessId
GetWindowTextW
UMgrGetConstrainedUserToken
UMgrOpenProcessTokenForQuery
UMgrOpenProcessHandleForAccess
UMgrQueryUserContext
UMgrQueryUserToken
QueryTraceW
FlushTraceW
CapabilityCheck
GetPackageFullNameFromToken
GetCurrentPackageFullName
GetPackageFamilyNameFromToken
PackageNameAndPublisherIdFromFamilyName
WinHttpCloseHandle
WinHttpGetDefaultProxyConfiguration
WinHttpGetIEProxyConfigForCurrentUser
WinHttpGetProxyForUrl
WinHttpSetOption
WinHttpSendRequest
WinHttpOpenRequest
WinHttpSetStatusCallback
WinHttpReadData
WinHttpReceiveResponse
WinHttpQueryHeaders
WinHttpAddRequestHeaders
WinHttpCrackUrl
WinHttpConnect
WinHttpOpen
WinHttpSetTimeouts
WsReadChars
WsFindAttribute
WsReadStartAttribute
WsReadEndAttribute
WsFreeError
WsFreeHeap
WsFreeReader
WsCreateError
WsCreateHeap
WsCreateReader
WsReadXmlBufferFromBytes
WsSetInputToBuffer
WsMoveReader
WsReadToStartElement
WsGetReaderPosition
WsReadBytes
WsReadStartElement
Windows.ApplicationModel.Store.dll
DllCanUnloadNow
DllGetActivationFactory
DllGetClassObject
_vsnwprintf
memcpy_s
_purecall
??_V@YAXPAX@Z
wcscpy_s
malloc
_XcptFilter
_amsg_exit
_initterm
_lock
_unlock
__dllonexit
_onexit
msvcrt.dll
__CxxFrameHandler3
_except_handler4_common
_errno
realloc
EtwEventRegister
EtwEventUnregister
EtwEventSetInformation
RtlUnsubscribeWnfStateChangeNotification
EtwEventWriteTransfer
ntdll.dll
api-ms-win-core-kernel32-legacy-l1-1-0.dll
GetModuleHandleExW
GetProcAddress
FormatMessageW
GetCurrentThreadId
HeapAlloc
GetProcessHeap
HeapFree
GetModuleFileNameA
DebugBreak
GetModuleHandleW
GetLastError
IsDebuggerPresent
OutputDebugStringW
SetLastError
CloseHandle
ReleaseSemaphore
ReleaseMutex
WaitForSingleObjectEx
AcquireSRWLockExclusive
AcquireSRWLockShared
WaitForSingleObject
OpenSemaphoreW
DisableThreadLibraryCalls
InitializeSRWLock
ReleaseSRWLockExclusive
DecodePointer
GetCurrentProcessId
CreateMutexExW
InitOnceExecuteOnce
CreateSemaphoreExW
ReleaseSRWLockShared
EncodePointer
CompareStringW
MultiByteToWideChar
RaiseException
Sleep
UnhandledExceptionFilter
SetUnhandledExceptionFilter
GetCurrentProcess
TerminateProcess
QueryPerformanceCounter
GetSystemTimeAsFileTime
GetTickCount
EventActivityIdControl
SetThreadpoolTimer
CreateThreadpoolTimer
LeaveCriticalSection
EnterCriticalSection
DeleteCriticalSection
InitializeCriticalSectionEx
WaitForThreadpoolTimerCallbacks
CloseThreadpoolTimer
GetTokenInformation
SetEvent
FreeLibrary
CreateEventExW
OpenProcess
OpenProcessToken
ImpersonateLoggedOnUser
RevertToSelf
OpenThreadToken
GetCurrentThread
CompareStringOrdinal
EventWriteTransfer
FileTimeToSystemTime
SystemTimeToFileTime
LocalFree
OpenThread
GetProcessIdOfThread
GetProcessId
DuplicateTokenEx
GetUserGeoID
GetGeoInfoW
CompareFileTime
CheckTokenMembershipEx
FindResourceExW
LoadResource
SizeofResource
LockResource
FreeResource
GetTickCount64
CreateEventW
AllocateAndInitializeSid
FreeSid
LocalAlloc
LoadStringW
CreateFileA
ReadFile
WriteFile
SetFilePointer
DeleteFileA
GetTempPathA
GetTempFileNameA
GetFileInformationByHandle
FileTimeToLocalFileTime
ExpandEnvironmentStringsA
FindFirstFileExA
FindNextFileA
FindClose
FindFirstFileA
GetLocalTime
GetTempPath2W
DeleteFileW
ExpandEnvironmentStringsW
CreateProcessW
GetExitCodeProcess
RegGetValueW
RegSetKeyValueW
RegCloseKey
RegOpenKeyExW
RegDeleteKeyValueW
GetLocaleInfoEx
GetUserDefaultLocaleName
CreateDirectoryW
PathCchAppendEx
PathCchAddExtension
CreateFileW
GetFileSize
GetSystemTime
GetCurrencyFormatEx
GetVersionExA
GetLengthSid
CopySid
LCMapStringEx
RegOpenCurrentUser
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-core-localization-l1-2-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-util-l1-1-0.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-string-l1-1-0.dll
api-ms-win-core-processenvironment-l1-1-0.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-eventing-provider-l1-1-0.dll
api-ms-win-core-threadpool-l1-2-0.dll
api-ms-win-security-base-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
api-ms-win-core-timezone-l1-1-0.dll
api-ms-win-core-heap-l2-1-0.dll
api-ms-win-core-file-l1-1-0.dll
api-ms-win-security-base-l1-2-0.dll
api-ms-win-core-file-l1-2-2.dll
api-ms-win-core-file-l1-2-4.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-core-registry-l1-1-1.dll
api-ms-win-core-path-l1-1-0.dll
api-ms-win-core-localization-l2-1-0.dll
sprintf_s
wcstombs
strncpy_s
strtol
_set_errno
strrchr
strchr
memmove_s
mbstowcs_s
_wcsicmp
_itow_s
wcsstr
_wtol
_wcsdup
_wcsupr
_wcstoi64
wcstod
wcsrchr
wcschr
_wcstoui64
_snwprintf_s
_vsnprintf
wcstombs_s
wcstoul
_wtof
wcscspn
_wtoi
_callnewh
RtlUnsubscribeWnfNotificationWaitForCompletion
RtlQueryWnfStateData
RtlSubscribeWnfStateChangeNotification
RtlPublishWnfStateData
RtlGetDeviceFamilyInfoEnum
RtlIsStateSeparationEnabled
NtQueryWnfStateData
NtQueryInformationProcess
RtlNtStatusToDosError
RtlUpcaseUnicodeChar
UrlEscapeW
ResolveDelayLoadedAPI
DelayLoadFailureHook
api-ms-win-core-url-l1-1-0.dll
api-ms-win-core-delayload-l1-1-1.dll
api-ms-win-core-delayload-l1-1-0.dll
QueueUserWorkItem
FileTimeToDosDateTime
PathCombineA
PathRemoveFileSpecA
PathAppendA
PathAppendW
api-ms-win-core-threadpool-legacy-l1-1-0.dll
api-ms-win-core-shlwapi-legacy-l1-1-0.dll
GlobalFree
api-ms-win-core-heap-obsolete-l1-1-0.dll
InitializeCriticalSection
WaitForMultipleObjectsEx
ResetEvent
WakeAllConditionVariable
SleepConditionVariableSRW
GetModuleHandleExA
HeapReAlloc
ApiSetQueryApiSetPresence
api-ms-win-core-apiquery-l1-1-0.dll
_ftol2
_ftol2_sse
floor
memcmp
memcpy
memmove
memset
WEVT_TEMPLATE
JSON_RESPONSE(JSON_RESPONSE_ONE_STORE_CLIENT_DATA_URLS+JSON_RESPONSE_STORE_ENDPOINT_EXTENSION_URLS4JSON_RESPONSE_INTERNAL_STORE_ENDPOINT_EXTENSION_URLS
JSON_RESPONSE_MODAL_FLOW_SIZES
VS_VERSION_INFO
StringFileInfo
040904B0
CompanyName
Microsoft Corporation
FileDescription
Microsoft Store Runtime DLL
FileVersion
10.0.22621.580 (WinBuild.160101.0800)
InternalName
Microsoft Store Runtime DLL
LegalCopyright
 Microsoft Corporation. All rights reserved.
OriginalFilename
Windows.ApplicationModel.Store.dll
ProductName
Microsoft
 Windows
 Operating System
ProductVersion
10.0.22621.580
VarFileInfo
Translation
CHANh
Microsoft-Windows-Store/Operational
TEMPx
EventData
Message
Function
Error Code
Source
Line Number
Message
Function
Error Code
Source
Line Number
TEMPx
EventData
Message
Function
Error Code
Source
Line Number
Message
Function
Error Code
Source
Line Number
EventData
Process Name
Module Name
Build Name
Process Name
Module Name
Build Name
EventData
EventData
Message
Line Number
File Name
Member Name
Message
Line Number
File Name
Member Name
EventData
Message
Line Number
File Name
Function
Error Code
Message
Line Number
File Name
Function
Error Code
EventData
Message
Line Number
File Name
Function
Exception Details
Message
Line Number
File Name
Function
Exception Details
PRVA\
Windows-ApplicationModel-Store-SDK
OPCO 
win:Info
Error
Error
Warning
Warning
Verbose
Verbose
win:Error
win:Warning
win:Informational
win:Verbose
StorefrontClientErrorTask
StorefrontClientExceptionTask
StorefrontClientWarningTask
StorefrontClientInformationTask
StorefrontClientVerboseTask
ModuleLoaded
LogMessage
StorePurchaseAppMessage
StorefrontClient
Messages
StorePurchaseApp
    "MDCollections": "https://collections.mp.microsoft.com/",
    "MDGetAppReceiptsDesktop": "https://licensingwindows.mp.microsoft.com/Licensing/License/AcquireReceipt/6.2/0?productId={productId}&receiptType={receiptType}",
    "MDGetAppReceiptsMobile": "https://licensingphone.mp.microsoft.com/v9/purchases/appreceipts?os=8.10.12400.0&requestTime={requestTime}&cc={cc}&lang={lang}&parentProductId={parentProductId}&installedPublisherId={installedPublisherId}",
    "MDGetOneProductReceiptMobile": "https://licensingphone.mp.microsoft.com/v9/purchases/receipts?os=8.10.12400.0&requestTime={requestTime}&cc={cc}&lang={lang}&parentProductId={parentProductId}&featureName={featureName}&installedPublisherId={installedPublisherId}",
    "OneStoreAuthenticationDomain": "www.microsoft.com",
    "LinkUriFormat": "https://www.microsoft.com/store/{idType}/{id}",
    "MDDisplayCatalog": "https://displaycatalog.mp.microsoft.com/",
    "MDPurchase": "https://purchase.mp.microsoft.com"
    {
        "__COMMENT__": "#0 purchase StoreID with extended response",
        "Index": 0,
        "BodyBufferMaxSize": 300,
        "InvokePurchaseFlow": true,
        "RequiresCapability": "xboxXDK",
        "RequireValidLicense": false,
        "RefreshLicenses": true,
        "BodyTemplate": {
            "StoreId": {
                "__tag": true,
                "key": "StoreId",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#1 invoke background task",
        "Index": 1,
        "BodyBufferMaxSize": 300,
        "UseBackgroundTask": true,
        "AnonymousRequest": true,
        "RequiresCapability": "previewStore",
        "RequireValidLicense": false,
        "BodyTemplate": {
            "AppServiceName": {
                "__tag": true,
                "key": "AppServiceName",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#2 TVOD",
        "Index": 2,
        "BodyBufferMaxSize": 10000,
        "InvokePurchaseFlow": true,
        "RequireValidLicense": false,
        "BodyTemplate": {
            "Offer": {
                "__tag": true,
                "key": "Offer",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#3 purchase StoreID with force retail sandbox without license refresh",
        "Index": 3,
        "BodyBufferMaxSize": 300,
        "InvokePurchaseFlow": true,
        "RequireValidLicense": false,
        "ForceRetailSandbox": true,
        "BodyTemplate": {
            "StoreId": {
                "__tag": true,
                "key": "StoreId",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#4 Force license refresh for all online running licenses",
        "Index": 4,
        "AnonymousRequest": true,
        "RequiresCapability": "storeAppInstallation",
        "RequireValidLicense": false,
        "RefreshLicenses": true
    },
    {
        "__COMMENT__": "#5 Acquire a device license - RS2+ Only",
        "Index": 5,
        "URI": "https://purchase.mp.microsoft.com/v7.0/users/me/orders",
        "DoPost": true,
        "AuthType": 4,
        "BodyBufferMaxSize": 10000,
        "RequiresCapability": "storeAppInstallation",
        "RequireValidLicense": false,
        "RefreshLicenses": true,
        "BodyTemplate": {
            "clientContext": {
                "client": "UniversalStoreInApp",
                "deviceFamily": {
                    "__tag": true,
                    "key": "deviceFamily",
                    "type": "string"
                }
            },
            "language": {
                "__tag": true,
                "key": "locale",
                "type": "string"
            },
            "market": {
                "__tag": true,
                "key": "market",
                "type": "string"
            },
            "orderId": {
                "__tag": true,
                "key": "orderId",
                "type": "string"
            },
            "items": [
                {
                    "productId": {
                        "__tag": true,
                        "key": "productId",
                        "type": "string"
                    },
                    "skuId": {
                        "__tag": true,
                        "key": "skuId",
                        "type": "string"
                    },
                    "availabilityId": {
                        "__tag": true,
                        "key": "availabilityId",
                        "type": "string"
                    },
                    "quantity": "1",
                    "devOfferId": {
                        "__tag": true,
                        "key": "devOfferId",
                        "type": "string"
                    }
                }
            ],
            "orderState": "Purchased",
            "alwaysEnforceDoublePurchasePolicy": true
        }
    },
    {
        "__COMMENT__": "#6 Acquire a license token -  RS2+ Version",
        "Index": 6,
        "URI": "https://licensing.mp.microsoft.com/v8.0/licenseToken",
        "DoPost": true,
        "AuthType": 4,
        "BodyBufferMaxSize": 10000,
        "BodyTemplate": {
            "parentProductId": {
                "__tag": true,
                "key": "parentProductId",
                "type": "string"
            },
            "enforceSellableBy": true,
            "relatedProductIds": {
                "__tag": true,
                "key": "relatedProductIds",
                "type": "string"
            },
            "customDeveloperString": {
                "__tag": true,
                "key": "customDeveloperString",
                "type": "string"
            },
            "beneficiaries": {
                "__tag": true,
                "type": "beneficiaryArray"
            }
        },
        "UserTokenTypes": 3,
        "OmitAuthTokenPrefix": true
    },
    {
        "__COMMENT__": "#7 Device token based monetization apis - RS2+ Only",
        "Index": 7,
        "URI": "https://manage.devcenter.microsoft.com/v1.0/my/storeextension/device",
        "DoPost": true,
        "AuthType": 4,
        "BodyBufferMaxSize": 10000,
        "BodyTemplate": {
            "applicationId": {
                "__tag": true,
                "key": "parentProductId",
                "type": "string"
            },
            "market": {
                "__tag": true,
                "key": "market",
                "type": "string"
            },
            "locale": {
                "__tag": true,
                "key": "locale",
                "type": "string"
            },
            "deviceFamily": {
                "__tag": true,
                "key": "deviceFamily",
                "type": "string"
            },
            "deviceMoid": {
                "__tag": true,
                "key": "deviceMoid",
                "type": "string"
            },
            "deviceOemid": {
                "__tag": true,
                "key": "deviceOemid",
                "type": "string"
            },
            "deviceScmid": {
                "__tag": true,
                "key": "deviceScmid",
                "type": "string"
            },
            "type": {
                "__tag": true,
                "key": "type",
                "type": "string"
            },
            "parameters": {
                "__tag": true,
                "key": "parameters",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#8 Store User token based monetization apis",
        "Index": 8,
        "URI": "https://manage.devcenter.microsoft.com/v1.0/my/storeextension/user",
        "DoPost": true,
        "BodyBufferMaxSize": 10000,
        "BodyTemplate": {
            "applicationId": {
                "__tag": true,
                "key": "parentProductId",
                "type": "string"
            },
            "market": {
                "__tag": true,
                "key": "market",
                "type": "string"
            },
            "locale": {
                "__tag": true,
                "key": "locale",
                "type": "string"
            },
            "deviceFamily": {
                "__tag": true,
                "key": "deviceFamily",
                "type": "string"
            },
            "deviceMoid": {
                "__tag": true,
                "key": "deviceMoid",
                "type": "string"
            },
            "deviceOemid": {
                "__tag": true,
                "key": "deviceOemid",
                "type": "string"
            },
            "deviceScmid": {
                "__tag": true,
                "key": "deviceScmid",
                "type": "string"
            },
            "type": {
                "__tag": true,
                "key": "type",
                "type": "string"
            },
            "parameters": {
                "__tag": true,
                "key": "parameters",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#9 Lookup ProductId from PackageFamilyName",
        "Index": 9,
        "URI": "https://displaycatalog.mp.microsoft.com/v7.0/products/lookup{market:market}{languages:languages}{packageFamilyName:value}&fieldsTemplate=empty&alternateid=PackageFamilyName",
        "URIBufferMaxSize": 1024,
        "AnonymousRequest": true,
        "RequireValidLicense": false
    },
    {
        "__COMMENT__": "#10 StoreList Query",
        "Index": 10,
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/StoreList/{storeListId}{market:market}{languages:languages}{locale:locale}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{top:$top}{continuationToken:continuationToken}{storeListItemTypeFilter:storeListItemTypeFilter}{productKindFilter:productKindFilter}{categoryFilter:categoryFilter}{targetDeviceFamily:targetDeviceFamily}",
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#11 Search for products by query",
        "Index": 11,
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/sdk/search{market:market}{languages:languages}{locale:locale}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{top:$top}{continuationToken:continuationToken}{productKindFilter:productKindFilter}{categoryFilter:categoryFilter}{query:query}",
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#12 Given a set of product IDs, return the average ratings and counts",
        "Index": 12,
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/sdk/products/ratingsAverage{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{productIds:productIds}{displayMode:displayMode}",
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#13 ContentId/KeyId lookup by ProductId for ParentProduct",
        "Index": 13,
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/products/contentId{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{productIds:productIds}",
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#14 ContentId/KeyId lookup by ProductId NO ParentProduct",
        "Index": 14,
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/products/contentId{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{productIds:productIds}&parentProductId=",
        "RequiresCapability": "previewStore",
        "RequireValidLicense": false,
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#15 Invoke In App Redeem using Purchase Flow",
        "Index": 15,
        "BodyBufferMaxSize": 10000,
        "InvokePurchaseFlow": true,
        "AnonymousRequest": true,
        "RequireValidLicense": false,
        "BodyTemplate": {
            "ModalFlow": "redeem",
            "parentProductId": {
                "__tag": true,
                "key": "parentProductId",
                "type": "string"
            },
            "OptionalData": {
                "__tag": true,
                "key": "optionalData",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#16 Invoke In App Rating & Review using Purchase Flow",
        "Index": 16,
        "BodyBufferMaxSize": 10000,
        "InvokePurchaseFlow": true,
        "AnonymousRequest": true,
        "BodyTemplate": {
            "ModalFlow": "writeRatingsAndReview",
            "ParentProductId": {
                "__tag": true,
                "key": "parentProductId",
                "type": "string"
            },
            "PFN": {
                "__tag": true,
                "key": "PFN",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#17 StoreList Query with previewStore",
        "Index": 17,
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/StoreList/{storeListId}{market:market}{languages:languages}{locale:locale}{deviceFamily:deviceFamily}{top:$top}{continuationToken:continuationToken}{storeListItemTypeFilter:storeListItemTypeFilter}{productKindFilter:productKindFilter}{categoryFilter:categoryFilter}{targetDeviceFamily:targetDeviceFamily}&parentProductId=",
        "RequiresCapability": "previewStore",
        "RequireValidLicense": false,
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#18 Given a set of product IDs, return the average ratings and counts (previewStore)",
        "Index": 18,
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/sdk/products/ratingsAverage{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{productIds:productIds}{displayMode:displayMode}&parentProductId=",
        "RequiresCapability": "previewStore",
        "RequireValidLicense": false,
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#19 Ad SDK to get Mixer Ad data for Inline Purchase experience",
        "Index": 19,
        "URI": "https://adbroker.mp.dse.microsoft.com/v1/adbroker/srtb2",
        "DoPost": true,
        "BodyBufferMaxSize": 10000,
        "RequireValidLicense": false,
        "BodyTemplate": {
            "bidRequest": {
                "__tag": true,
                "key": "bidRequest",
                "type": "string"
            },
            "storeSdkAttributes": {
                "languages": {
                    "__tag": true,
                    "key": "languages",
                    "type": "string"
                },
                "market": {
                    "__tag": true,
                    "key": "market",
                    "type": "string"
                },
                "deviceMoId": {
                    "__tag": true,
                    "key": "deviceMoid",
                    "type": "string"
                },
                "deviceScmId": {
                    "__tag": true,
                    "key": "deviceScmid",
                    "type": "string"
                },
                "deviceOemId": {
                    "__tag": true,
                    "key": "deviceOemid",
                    "type": "string"
                },
                "deviceFamily": {
                    "__tag": true,
                    "key": "deviceFamily",
                    "type": "string"
                }
            }
        },
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#20 Get list of PTI devices for a user",
        "Index": 20,
        "URI": "https://pti.store.microsoft.com/v1/pti/devices{market:market}{languages:languages}{productId:productId}{skuId:skuId}",
        "RequiresCapability": "storeAppInstallation",
        "RequireValidLicense": false
    },
    {
        "__COMMENT__": "#21 Push product to device",
        "Index": 21,
        "URI": "https://pti.store.microsoft.com/v1/pti/push{market:market}",
        "DoPost": true,
        "RequiresCapability": "storeAppInstallation",
        "RequireValidLicense": false,
        "BodyTemplate": {
            "ProductId": {
                "__tag": true,
                "key": "ProductId",
                "type": "string"
            },
            "SkuId": {
                "__tag": true,
                "key": "SkuId",
                "type": "string"
            },
            "DeviceId": {
                "__tag": true,
                "key": "DeviceId",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#22 AAD token based monetization apis - RS4+ Only",
        "Index": 22,
        "URI": "https://manage.devcenter.microsoft.com/v1.0/my/storeextension/aad",
        "DoPost": true,
        "AuthType": 2,
        "BodyBufferMaxSize": 10000,
        "BodyTemplate": {
            "applicationId": {
                "__tag": true,
                "key": "parentProductId",
                "type": "string"
            },
            "market": {
                "__tag": true,
                "key": "market",
                "type": "string"
            },
            "locale": {
                "__tag": true,
                "key": "locale",
                "type": "string"
            },
            "deviceFamily": {
                "__tag": true,
                "key": "deviceFamily",
                "type": "string"
            },
            "deviceMoid": {
                "__tag": true,
                "key": "deviceMoid",
                "type": "string"
            },
            "deviceOemid": {
                "__tag": true,
                "key": "deviceOemid",
                "type": "string"
            },
            "deviceScmid": {
                "__tag": true,
                "key": "deviceScmid",
                "type": "string"
            },
            "type": {
                "__tag": true,
                "key": "type",
                "type": "string"
            },
            "parameters": {
                "__tag": true,
                "key": "parameters",
                "type": "string"
            }
        },
        "OmitAuthTokenPrefix": true
    },
    {
        "__COMMENT__": "#23 SFDS Suggestion Service - RS5+ Only",
        "Index": 23,
        "URI": "https://sfdataservice.microsoft.com/smartinstall/v1.0/suggestions/suggest",
        "DoPost": true,
        "AuthType": 1,
        "BodyBufferMaxSize": 20000,
        "RequiresCapability": "storeAppInstallation",
        "RequireValidLicense": false,
        "BodyTemplate": {
            "data": {
                "__tag": true,
                "key": "data",
                "type": "string"
            }
        },
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#24 Invoking PurchaseApp (SXH) for the Smart Install scenario - RS5+ Only",
        "Index": 24,
        "BodyBufferMaxSize": 10000,
        "InvokePurchaseFlow": true,
        "AnonymousRequest": true,
        "RequiresCapability": "storeAppInstallation",
        "RequireValidLicense": false,
        "BodyTemplate": {
            "ModalFlow": "smartInstall",
            "data": {
                "__tag": true,
                "key": "data",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "Get campaign ID for user or device (RS5+)",
        "Index": 25,
        "URI": "https://storeedgefd.dsx.mp.microsoft.com/v8.0/campaigns/cid{parentProductId:productId}",
        "FallbackToDeviceAuth": true
    },
    {
        "__COMMENT__": "Get campaign ID for device (RS4+)",
        "Index": 26,
        "URI": "https://storeedgefd.dsx.mp.microsoft.com/v8.0/campaigns/cid{parentProductId:productId}",
        "AuthType": 4
    },
    {
        "__COMMENT__": "Get Microsoft Accrued for user or device (RS5+)",
        "Index": 27,
        "URI": "https://storeedgefd.dsx.mp.microsoft.com/v8.0/campaigns/isMicrosoftAccrued{parentProductId:productId}",
        "FallbackToDeviceAuth": true
    },
    {
        "__COMMENT__": "Get Microsoft Accrued for device (RS4+)",
        "Index": 28,
        "URI": "https://storeedgefd.dsx.mp.microsoft.com/v8.0/campaigns/isMicrosoftAccrued{parentProductId:productId}",
        "AuthType": 4
    },
    {
        "__COMMENT__": "#29 - Digital attach redeem",
        "Index": 29,
        "BodyBufferMaxSize": 1024,
        "InvokePurchaseFlow": true,
        "RequireValidLicense": false,
        "BodyTemplate": {
          "StoreId": {
            "__tag": true,
            "key": "StoreId",
            "type": "string"
          },
          "isDigitalAttachment": true,
          "attachRecordId": {
            "__tag": true,
            "key": "attachRecordId",
            "type": "string"
          },
          "hostType": {
            "__tag": true,
            "key": "hostType",
            "type": "string"
          }
      }
    }
    {
        "__COMMENT__": "#0 - Get Parent Product",
        "Index": 0,
        "URI": "https://displaycatalog.mp.microsoft.com/v7.0/products/{parentProductId}{market:market}{languages:languages}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}&fieldsTemplate=StoreSDK",
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#1 - Get User Collection for Parent Product",
        "Index": 1,
        "URI": "https://collections.md.mp.microsoft.com/v7.0/collections/sdkQuery",
        "DoPost": true,
        "BodyTemplate": {
            "validityType": "Valid",
            "beneficiaries": {
                "__tag": true,
                "type": "goldenBeneficiaryArray"
            },
            "productSkuIds": [
                {
                    "productId": {
                        "__tag": true,
                        "key": "parentProductId",
                        "type": "string"
                    }
                }
            ]
        },
        "OmitAuthTokenPrefix": true
    },
    {
        "__COMMENT__": "#2 - Get User Collection for Products",
        "Index": 2,
        "URI": "https://collections.md.mp.microsoft.com/v7.0/collections/sdkQuery",
        "DoPost": true,
        "RequireValidLicense": false,
        "BodyTemplate": {
            "validityType": "Valid",
            "beneficiaries": {
                "__tag": true,
                "type": "goldenBeneficiaryArray"
            },
            "productSkuIds": {
                "__tag": true,
                "key": "productSkuIds",
                "type": "array",
                "isOptional": true
            },
            "entitlementFilters": {
                "__tag": true,
                "key": "entitlementFilters",
                "type": "array",
                "isOptional": true
            }
        },
        "OmitAuthTokenPrefix": true
    },
    {
        "__COMMENT__": "#3 - Get Products, No Parent (No license needed)",
        "Index": 3,
        "URI": "https://displaycatalog.mp.microsoft.com/v7/products{productIdsWithCommas:bigIds}{market:market}{languages:languages}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}{actionFilter:actionFilter:OPTIONAL}&fieldsTemplate=StoreSDK",
        "RequireValidLicense": false,
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#4 - Get Products From Parent (Must have a valid license)",
        "Index": 4,
        "URI": "https://displaycatalog.mp.microsoft.com/v7/products{productIdsWithCommas:bigIds}{market:market}{languages:languages}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}{actionFilter:actionFilter:OPTIONAL}&fieldsTemplate=StoreSDK",
        "UseAuthIfAvailable": true
    },
    {
        "__COMMENT__": "#5 - Get User Collection for Parent Product by Family",
        "Index": 5,
        "URI": "https://collections.md.mp.microsoft.com/v7.0/collections/sdkQuery",
        "DoPost": true,
        "BodyTemplate": {
            "validityType": "Valid",
            "beneficiaries": {
                "__tag": true,
                "type": "goldenBeneficiaryArray"
            },
            "maxPageSize": {
                "__tag": true,
                "key": "maxPageSize",
                "type": "number",
                "defaultValue": 25
            },
            "continuationToken": {
                "__tag": true,
                "key": "continuationToken",
                "type": "string",
                "isOptional": true
            },
            "includeRelationship": {
                "__tag": true,
                "key": "includeRelationship",
                "type": "object"
            },
            "entitlementFilters": {
                "__tag": true,
                "key": "entitlementFilters",
                "type": "array",
                "isOptional": true
            }
        },
        "OmitAuthTokenPrefix": true
    },
    {
        "__COMMENT__": "#6 - Consume Consumable",
        "Index": 6,
        "URI": "https://collections.md.mp.microsoft.com/v7.0/collections/consume",
        "DoPost": true,
        "BodyTemplate": {
            "beneficiary": {
                "__tag": true,
                "type": "goldenBeneficiary",
                "isOptional": true
            },
            "productId": {
                "__tag": true,
                "key": "consumableProductId",
                "type": "string"
            },
            "trackingId": {
                "__tag": true,
                "key": "trackingId",
                "type": "string"
            },
            "removeQuantity": {
                "__tag": true,
                "key": "quantity",
                "type": "number",
                "isOptional": true
            }
        },
        "OmitAuthTokenPrefix": true
    },
    {
        "__COMMENT__": "#7 - Get Customer Purchase Id",
        "Index": 7,
        "URI": "https://purchase.mp.microsoft.com/v7.0/users/me/keys",
        "DoPost": true,
        "BodyTemplate": {
            "serviceTicket": {
                "__tag": true,
                "key": "serviceTicket",
                "type": "string"
            },
            "publisherUserId": {
                "__tag": true,
                "key": "publisherUserId",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#8 - Get Customer Collections Id",
        "Index": 8,
        "URI": "https://collections.mp.microsoft.com/v7.0/beneficiaries/me/keys",
        "DoPost": true,
        "BodyTemplate": {
            "serviceTicket": {
                "__tag": true,
                "key": "serviceTicket",
                "type": "string"
            },
            "publisherUserId": {
                "__tag": true,
                "key": "publisherUserId",
                "type": "string"
            }
        }
    },
    {
        "__COMMENT__": "#9 - Get Products by Family from Parent",
        "Index": 9,
        "URI": "https://displaycatalog.mp.microsoft.com/v7/products/lookup{parentProductId:value}{market:market}{languages:languages}{itemCount:$top}{skipCount:$skip}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}&fieldsTemplate=StoreSDK&actionFilter=Purchase&alternateId=SellableBy",
        "UseAuthIfAvailable": true
    }
    "writeRatingsAndReview": {
        "Width": 456,
        "Height": 384
    },
    "smartInstall": {
        "Width": 640,
        "Height": 560
    }
JSON_RESPONSE
WEVT_TEMPLATE
en-US
0$0,040<0D0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7\7`7d7h7p7t7x7|7
8$8(8,80888<8@8D8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:t:x:
;4;8;P;h;
<$<(<@<X<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3@3T3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7x7|7
80848<8D8H8`8h8p8x8
9H9L9P9T9X9`9d9l9p9|9
:$:,:4:<:@:D:P:T:X:l:p:t:x:|:
;$;(;,;0;4;<;@;`;d;h;l;p;|;
< <$<(<,<8<@<D<H<L<d<h<x<|<
<0=4=8=<=d=h=p=t=x=|=
> >(>4>8>@>D>H>L>P>h>l>t>x>|>
? ?$?,?0?D?L?P?T?d?h?p?t?
0(0,000@0D0L0T0X0t0x0
1 141<1@1T1X1d1l1t1|1
2 2,20282<2@2D2H2P2T2h2p2x2
3 3(30383@3D3H3X3\3p3t3|3
4 4$4(4,444<4@4D4H4\4d4h4l4
5 5$5,54585@5D5X5`5d5x5|5
6$6(6064686<6@6P6T6X6\6d6h6p6t6
7(7,707@7H7L7d7l7t7x7|7
8$8(8084888<8@8D8X8`8d8l8p8
90949<9@9l9p9t9x9|9
:<:@:D:H:P:T:`:d:l:p:
;$;(;,;@;H;L;T;X;p;|;
<,<0<4<8<<<P<T<X<\<`<h<p<x<
=(=0=4=L=T=X=\=d=
>(>0>4><>@>T>\>`>x>|>
? ?$?,?0?8?<?L?P?T?d?h?|?
0(0,0D0H0P0T0X0\0`0d0t0x0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2(2D2H2L2P2T2`2d2h2l2|2
3034383<3@3`3d3
4 4$4(4,4044484<4@4D4L4T4X4l4p4x4|4
5 5$5(5,5054585<5@5D5L5P5T5X5`5h5l5p5
6 6(60686<6@6L6P6X6\6p6t6
7 7(7,707@7H7L7`7d7t7x7
888@8D8X8\8`8p8x8|8
9(90949H9L9T9X9h9p9t9
:,:4:8:P:T:X:\:p:x:|:
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
< <$<4<8<@<H<L<`<d<h<x<|<
=(=,=0=@=H=L=`=d=|=
> >$>,>4>8>L>P>X>\>
?$?(?<?@?D?T?\?`?x?|?
0H0L0T0X0l0t0x0
1,101@1D1T1X1d1h1l1t1x1
2 2024282P2T2\2`2d2h2l2p2
30383<3@3D3T3\3`3x3
4 4$484@4D4X4\4l4p4x4|4
5 5$5(5,5054585<5@5D5H5P5T5t5x5|5
6 6$6(6,64686<6@6P6T6X6p6t6|6
7(7,7@7H7L7T7X7p7t7|7
84888<8@8D8L8T8X8l8p8t8
9 9$989@9D9X9\9`9p9t9x9
: :$:8:@:H:P:X:`:d:l:p:
;D;H;L;P;T;X;h;l;|;
<,<0<P<T<X<`<d<p<t<x<
=$=,=0=8=<=P=T=t=x=|=
> >$>4><>@>T>\>`>t>x>|>
?,?0?4?D?H?P?T?X?h?l?t?x?
00040<0@0P0T0X0\0d0l0p0t0|0
1 1(1,1<1@1D1H1P1T1X1h1l1p1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2t2x2|2
3$3(3,303@3D3L3P3`3d3l3p3
4 4(4,4@4D4L4P4`4h4l4
5$5(5054585H5L5\5d5h5|5
6 6(6,64686H6L6T6X6\6l6p6
7 74787<7L7P7`7d7h7x7|7
8 84888<8@8H8P8x8|8
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
; ;$;8;<;L;T;X;l;p;t;
< <$<8<@<D<X<\<h<l<p<
=,=4=8=<=L=P=T=d=l=p=
>$>(>8><>L>P>X>\>p>x>|>
? ?4?8?<?L?T?X?l?p?
004080D0L0P0X0\0p0x0|0
1 1$1,101D1H1P1T1X1h1p1t1
242<2D2H2P2T2h2l2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
5$5(585<5D5H5P5X5\5p5t5|5
6 6(6,6064686<6L6P6T6h6p6t6x6
7 7$7,707D7H7X7`7d7|7
8$8,8084888H8P8T8h8l8|8
9 9$9(9@9D9L9P9T9X9\9h9l9p9|9
:(:0:4:L:P:X:\:p:t:
; ;$;4;8;@;D;H;X;\;d;h;l;
< <$<(<,<0<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<x<|<
=$=(=,=0=4=8=<=@=D=H=L=P=T=X=`=d=h=p=t=x=|=
>,>0>D>H>L>P>d>l>x>|>
?8?<?@?D?H?P?T?X?l?t?x?|?
0$0(080@0D0X0\0l0t0x0
1 1,10141<1D1H1\1`1p1x1|1
2(20242<2@2T2X2`2d2t2|2
30383<3@3H3L3P3`3d3l3p3x3|3
4044484<4D4H4\4d4h4|4
5,54585<5@5T5\5d5l5p5t5x5
6 6$6(60686<6P6X6\6p6t6x6
7 7(7,7074787H7P7T7l7t7x7|7
8 8(8,80888@8D8L8P8d8l8p8
9$9(9,9<9@9P9T9X9h9p9t9
9 :$:(:4:8:<:L:P:T:d:l:p:
; ;$;(;H;L;P;T;d;h;p;t;|;
<(<,<0<D<H<L<T<X<d<l<t<x<|<
=,=0=X=\=`=d=h=p=x=|=
>0>4>8><>@>H>L>T>X>\>l>p>t>x>
? ?$?(?8?@?D?X?\?`?x?|?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
2 2$242<2@2T2X2|2
3 3$3(383<3@3P3X3\3
4$4,40444D4H4L4\4`4p4t4
5 5$5(585@5D5\5`5h5l5
6(6,64686H6L6X6`6d6h6x6|6
7 7$74787D7H7L7\7`7d7t7|7
8$8(8,8<8@8H8P8T8l8p8t8x8
9(9,90949D9H9\9d9
:(:4:8:@:D:H:P:X:`:d:h:p:t:
;8;<;@;D;H;P;T;X;p;t;|;
<,<0<@<D<P<X<`<l<p<x<|<
= =$=(=,=<=@=P=T=X=h=p=t=
> >$>4>8>@>D>H>L>P>\>d>h>l>p>
?,?0?4?<?@?H?L?\?`?h?p?t?
00080<0@0P0X0\0p0t0x0
1 1$141<1@1T1\1`1x1
2$2(2,2<2@2P2T2\2d2h2|2
3 30343D3L3P3d3h3x3
4$4(4<4@4L4T4X4\4l4p4x4|4
5 5$50585<5@5P5T5X5h5l5
5 6$6(6,60686<6@6P6T6h6p6t6x6
7 7$787<7@7P7T7d7h7p7t7
8 8(8,8H8L8T8X8\8`8h8l8
9 9$94989@9H9L9`9h9l9
: :0:4:8:H:L:P:T:\:d:l:t:|:
; ;(;,;@;D;T;X;h;l;t;x;|;
< <$<,<4<8<T<X<`<d<h<p<x<
= =$=<=D=H=L=P=`=d=l=p=
> >(>,>@>D>T>\>`>t>|>
? ?(?,?0?4?<?@?T?X?\?l?p?t?
0 0(00080@0H0P0X0`0h0p0x0
1 1(10181@1H1P1X1`1h1l1p1t1x1|1
1$2(20282P2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
4#4*4C4P4V4\4
8Q9v9
:":&:,:0:6:::R:V:\:`:f:j:p:t:z:~:
;2;6;<;@;F;J;P;T;Z;^;r;v;
<#<3<Q<V<]<c<s<
=#=3=Q=V=]=c=s=
>#>3>Q>V>]>c>s>
?#?3?Q?V?]?c?s?
0#030Q0V0]0c0s0
1#131Q1V1]1c1s1
2#232Q2V2]2c2s2
3#333Q3V3]3c3s3
4#434Q4V4]4c4s4
5#535Q5V5]5c5s5
6!6&6-636C6a6f6m6s6
7!7&7-737C7a7f7m7s7
8!8&8-838C8a8f8m8s8
9,9G9\9q9v9}9
:1:6:=:C:S:q:v:}:
;1;6;=;C;S;u;{;
<!<&<-<3<C<a<f<m<s<
=!=&=-=3=C=a=f=m=s=
>!>&>->3>C>a>f>m>s>
?!?&?-?3?C?a?f?m?s?
0#030Q0q0v0}0
11161=1C1S1q1v1}1
21262=2C2S2q2v2}2
31363=3C3S3r3v3|3
4!4&4-434C4a4f4m4s4
5"5'5_5
6#6+61666>6D6I6Q6W6\6b6j6r6~6
8'8/8<8B8I8
9!9.959B9I9P9e9
:*:A:j:
:3;:;@;M;V;k;t;
="=7===B=I=`=K?
1Q1]1e1u1}1
2#2-2=2G2Q2c2
5&686k6
7C7s7
8b9m9
;#<L<j<
=!=-=5=D=e=n=z=
>2>L>s>|>
>,?1?6?G?
1!111
2)20272>2E2
3Q3l3u3
314L4U4
5.5:5B5I5P5V5\5
5"626N6
7!7<7E7
8"8-8q8
9F9v9
:b;l;~;
;&<8<F<y<
=3=E=
>&>Y>p>
?%?a?s?
162H2V2
2#3-3C3U3
4(464i4
5#555q5
596P6
7A7S7
8D8m8
9$9+9Y9`9
9#:::@:n:6;
<o=v=
0U0m0
1"1/1F1P1d1n1}1
1[3+4
7;8k8
9+:^:
=/===k=
>?>R>
?/?G?
50@0l0
1<1`1p1
1)2@2t2
213C3`3
4A4x4
5'5O5
5,6F6
737D7
7;8U8
9+9<9l9
;-;?;P;X;s;{;
<*<B<o<|<
=6=C=J=P=j=s=|=
>*>7>=>D>^>j>p>w>
?!?*?7?>?
0b1l1~1^:u:
<2<~<
=#=5=C=S=c=x=
=)>@>p>
?!?9?x?
3!313A3d3w3
4*4s4
7'7j7
778U8i8
90989C9H9m9u9
:):H:e:o:
=H=j=v=
4(414:4@4E4J4Q4Y4n4
6.777C7K7Z7
7E8g8
9(9R9
04122e3y3
4'404:4C4M4V4`4i4s4
475@5k5v5
6.6_6
6-7_7u7J8j8
8*9E9Q9c9
99:?:e:
<8<j<q<
=2=8=
>(>N>
?,?6?N?g?x?
1I1h1
1+252M2_2i2
4#4u4
5#5(5-525Y5_5m5z5
6 6/696>6a6p6
7.7?7]7v7
828z8
8'91969
;!;3;E;J;\;
<(<d<~<
=1=L=Y=
=K>Z>d>i>
?$?.?W?{?
0B0U0Z0d0
141p1
1#202]2j2w2|2
3J3`3e3o3
5&5_5d5n5
6 6G6l6
7/8t8
909N9X9]9
:):3:8:`:n:x:}:
:";O;
=4>E>^>|>
?#?-?2?R?`?q?{?
0%070=0H0R0j0t0y0
1(1C1H1M1b1l1q1
2)2-24282>2D2J2N2T2X2]2b2h2l2r2v2{2
2!3+303Y3q3
3#4]4y4
4.53585h5u5
6$6.6C6H6R6g6q6v6
7*7H7k7w7
818X8a8n8z8
929:9B9J9R9u9z9
:>:D:g:p:v:
:3;<;D;I;T;r;};
<#<7<D<J<Q<b<g<
<,=~=
=<>P>U>_>
$0;0H0R0W0n0y0
0-1A1s1}1
122F2K2U2o2
323K3P3Z3
4&474V4
595J5W5b5x5
5Z6_6d6
787G7Q7V7
7&8+808k8u8z8
9 9G9V9f9
:::I:g:l:q:
;";?;D;I;|;
<$<-<@<f<o<
=<=I=z=
>3>O>Y>s>x>
> ?,?F?b?l?
0-0N0
1!1\1a1k1
2*2U2_2d2z2
323<3A3m3
4'41464^4
4"5'515S5f5u5z5
6+6I6v6{6
7 737W7o7
798C8H8y8
:1:::M:[:
<H<R<W<q<z<
=?=U=e={=
>j>o>t>
>4?R?a?k?p?
0%0+0H0N0g0n0
1]1d1n1s1
2K2U2Z2
353^3h3m3
494H4
5W5f5
6]6l6v6{6
6%7f7u7z7
8d8i8s8
9(9.949A9F9P9
:':-:J:v:
;Z;d;j;
<D=_=d=n=
>#>(>G>
>S?s?}?
 0)01060A0Z0h0
0'151T1r1}1
1(252`2r2
52575A5q5{5
777h7r7
8.8E8R8`8e8o8
9L9Q9[9
:K:T:c:h:r:
;4;Z;z;
<;<[<`<j<
=0=W=
>'>,>K>c>t>
090Q0V0`0
0*1U1
1L2v2|2
3S3X3b3
3!434C4[4}4
5$5.5L5d5}5
526>6K6P6Z6{6
7?7N7
7)888=8G8
8=9R9h9m9r9
:7:h:r:w:
;!;r;
<&<0<5<`<o<
=%=4=\=k=p=z=
>@>}>
?-?@?X?y?
1)1.181r1|1
1;2@2J2
3?3D3I3p3
4-424S4b4g4{4
5)5B5x5
656?6D6
7`7o7y7~7
8/8B8d8m8
9#9:9I9X9
;!;&;Q;[;u;
<!<'<B<G<L<a<r<
=.=8===o=
>@>O>T>^>
?,?m?|?
0*0/090[0d0m0y0
2C2R2W2a2
3"3<3I3P3W3a3
5 5*5
6#6(626S6k6t6
6I7X7z7
8!8n8
9r9w9
;H;V;[;e;z;
<P<U<Z<{<
>0>5>M>T>^>
?"?'?1?k?p?z?
2)2.2V2
3#3-3_3}3
3d4x4
5 6R6d6~6
72777A7
7=8G8L8
;.<?<I<N<f<t<~<
="=:=D=I=a=
=1>O>y>
?)?R?d?m?s?z?
-060E0J0T0
3C3n3x3}3
464C4T4e4y4
767E7X7
8>8M8l8
9(92979h9
:J:Y:c:h:
=,=\=t=
>=>Z>_>i>
?"?'?1?X?j?y?~?
"01060@0j0|0
1'1,1Z1d1s1
2I2X2b2g2
3_3|3
4@4I4q4
5`5}5
7<7b7
8-8|8
8&9R9\9a9y9
:':?:D:N:k:q:{:
;=;K;Y;^;h;
< <?<^<h<m<v<
=3>B>G>Q>}>
?"?)?3?V?b?g?
090S0
1?1D1I1\1{1
2'2?2
3#3;3
4/4;4M4X4k4
5(5C5N5a5f5p5
6(6C6N6a6y6
7&797T7_7r7
7k8~8
;E;t;{;
=+=o=
>(>->2>L>
1!1&1C1H1M1e1|1
2+292G2i2z2
2F3}3
4*4B4
5 5*5B5M5
6#6A6F6K6c6l6|6
6'7D7a7m7
8#8)8/85898?8C8I8O8U8Y8_8c8i8o8u8y8
9#9)9/95999?9C9I9O9U9Y9_9c9i9o9u9y9
:#:):/:5:9:?:C:I:O:U:Y:_:c:i:o:u:y:
;$;(;.;4;:;>;D;H;N;T;Z;^;d;j;p;v;
<0<5<?<_<z<
= =>=Y=j=y=
>#>6>W>
?X?b?g?
'0/0a0{0
1%1W1a1f1
2"2-2B2V2b2n2
3 3D3I3S3k3
4+4O4T4^4v4
4"5,515I5]5o5
606N6\6
767M7_7|7
8 8+8F8P8U8l8
959D9N9S9{9
:!:,:L:W:
:5;>;D;J;T;{;
<0<?<Q<q<
=/=R=a=f=p=
>.>A>U>
?#?8?B?G?
0(0@0J0T0m0u0z0
0@1U1`1~1
1&2G2h2
404D4Z4h4
5'5Q5Z5l5
6 626J6Q6d6|6
6I7r7
8)8H8M8W8m8
9$9)9V9e9
:#:Q:`:
;,;J;V;l;
<%<i<y<~<
=9=B=Q=[=`=
=)>\>
>,?5?f?x?
161H1V1b1
2<3E3v3
4-545T5c5
5B6L6^6
9/9>9E9
9#:3:U:Y:^:d:j:p:v:|:
:;;z;
<%<9<F<N=V=]=e=|=
0.0`0
1$1.131
122A2F2N2t2
3K3l3
3+4t4
565D5I5Q5]5b5m5r5|5
686i6p6
7Q7\7
8#8m8
:@;I;
;%<.<9<b<
5C6J6Q6X6
728;8F8r8
0J0Q0X0
:S:Z:a:h:
<0<F<
>!>/>]>s>
?(?5?<?C?I?\?e?n?u?|?
4b5l5~5
6F6X6f6r6
:4;T;n;
<$<Z<n<
=0=`=z=
>#>2>8>M>
?!?4?P?Y?`?
1K2_2
7"7)707B7L7X7_7f7
=;=\=c=j=
= >G>
3L4|4
4P5w5
8>9g9
<1<<<m<v<
T0d0r0
1.1D1p1
2J2`2
3*383f3|3
4 4+4^4e4l4s4
565C5J5Q5W5i5q5}5
6-6@6s6
647Q7
8!9.9
:_;j;
;E<h<
=>=N=
>W>\>m>
>'?.?3?:?I?O?X?_?f?m?
#0.0p0{0
1H1R1]1j1q1x1
2"2)2>2x2
3"3(3:3B3K3R3g3
545a5
626r6
7L7U7`7
8%868;8@8G8Q8l8
9!949G9N9d9k9q9
:9:B:S:X:]:d:n:
;+;8;>;Q;d;k;
;&<R<[<l<q<v<}<
<7=D=Q=W=j=}=
60Y0p0
061Y1p1
1U2Z2d2
3#3(323Q3Y3^3h3
4A4x4
5<5X5
7+7G7p7
7*8Q8m8
869q9y9~9
:O:\:
;<;m;z;
<.<U<b<i<p<
7?8H8
9F9X9f9
:\:e:
;7;V;
>4>E>
?%?V?h?v?
0+0i0
061H1V1
2(262d2z2
4(464B4
485H5V5
6>7g7
9C9]9n9
:":':1:x:
1&12171<1C1M1_1
142>2D2T2_2v2
343;3A3H3
9d:l:x:}:
;$;T;^;d;t;
;&=Z=
1)2A2G2P2U2^2
2B3S3X3^3x3
6$6@6R6i6
6B7`7h7
7<8K8^8m8
9 9'9f9x9
:V:h:v:
;F;\;
;B<{<
=)=4=;=p=
>(>6>
?Z?b?g?o?
0'050c0y0
1#1A1O1W1\1f1
242?2f2y2
2M3R3Z3
3%4B4U4m4
50555:5Y5y5
6Q6^6h6
7'7,787=7E7m7x7
8%8)8.83888=8
8$919|9
:P:X:]:g:
:V;[;c;
;!<=<N<e<~<
=#=B=`=
=(>5>?>l>v>{>
?<?a?l?
0e0q0
1,1j1z1
112b2k2r2
555Q5V5
6Q6[6b6p6
9<:E:
;7;Q;\;
;)<3<><K<R<Y<`<r<}<
<:='>h>
>T?h?
1,2W2k2
5 5'5.5v5
6K7W7j7
</<E<
<2=k=
=F>V>d>
?.?8?D?K?R?
1&282F2R2
3Q3a3o3
404~4
5%5,535H5|5
5*62676?6
8(8L8[8o8
8"9H9Y9
:<:R:
;6;T;_;
<'<\<
0*1>1
263I3
4K4[4i4
4/5_5
5K6W6j6
:':E:
:1;e;r;y;
;+<g<
>:>d>
2%2H2O3X3
3'4C4b4
4g5q5|5
6F6t6
8<9E9
>K?y?
4"4^4
5"5J5Q5X5_5u5
5g6r6
6u7Y9
;<<k<
>d?k?r?y?
1A1{1
262H2V2
4V4h4v4
6(6h6u6
6X7w7
:#:Q:g:
< <.<\<r<f=
111:1F1M1T1[1e1o1
2M2m2
5Y5^5f5
5>6C6S6Y6_6f6w6|6
6D7M7X7
8'8/898G8S8a8i8o8
9.9F9
:%:3:K:
=)=@=^=<>D>
60>0O0W0
1+242r2
2b3w3
4!4k4|4
5s6~6
7A7W7
8:8P8
8A9N9U9\9c9j9q9w9
9.:5:<:C:J:Q:X:d:
;.;3;;;
<5<U<o<~<
=s=z=
='>1>6>`>o>
>O?V?[?z?
0"010P0Z0_0u0
0F1O1U1\1f1}1
2V2`2e2
3!3+3\3
4]4f4p4v4}4
5#5*5/595
5;6J6O6Y6
8c8m8r8
9-929<9
9W:e:l:s:}:
:B;L;Q;w;
<b<k<p<
=!=b=x=
>">,>1>
?%?1?r?
0.080=0
0.151A1
1/2>2H2M2
2s3y3
4%4*4W4}4
4V5a5f5
6&606{6
7Q7`7e7o7
7/8x8
9&9+9O9V9w9|9
:V:\:f:
:%;,;8;F;
<'<,<6<]<
=,>2>Q>[>`>
"080?0I0N0w0
1G2L2R2i2p2z2
3!3&3w3
3<4C4O4
5X5g5q5v5
5,6d6n6s6
7Y7p7
8>8S8q8
9"9]9l9q9y9
9I:R:a:f:n:
;2;M;R;
=#=8=S=X=
?+?[?d?k?
4-4>4O4
5#555q5
6.757<7H7
8O8|8
9)9o9y9~9
9/:>:C:M:
;!;+;2;
<8<G<Q<V<
=:=?=w=
>u>}>
>,?5?f?x?
0W0y0
1*1/141;1B1
2Z2g2n2u2|2
3Q3|3
4!4'4-4\4r4w4
5:5Y5g5|5
5%6=6O6\6
8 8L8g8
:W:j:
;F;M;h;r;w;
=2=:=L=o=
>%?Z?y?
0E0]0o0|0
1)13181g1z1
202>2V2h2u2
3 3%3>3P3^3v3
42474A4Y4q4
52575A5Y5q5
5/666@6E6^6p6~6
7O7V7`7e7~7
8.8l8s8}8
9#9-929I9[9{9
9F:M:R:\:r:
:V;];b;l;
;f<m<r<|<
?'?M?V?\?i?
60<0A0X0k0q0{0
091?1Y1_1y1
2I2T2t2y2
3m3r3|3
4;4F4f4k4u4
5_5d5n5
5:6@6[6a6
7$7:7c7
8J8U8_8d8
9'9A9G9e9
:7:d:
=;=D=
=H>`>n>x>}>
?)?3?=?G?Q?[?e?l?s?z?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
1F1X1f1
1,252f2x2
2P3W3
80979
:%:0:6:b:
<T=h=
?-?X?
1?1O1]1
3&323
494F4S4Z4`4s4
4*575>5E5W5a5l5s5
5W6%797
9=9F9d9@:P:^:
<T<a<h<o<
<!=T=~=
>G>k>
E0g031
102W2
798P8
=O=k=r=y=
V0h0v0
6!818J8
9/969n9w9
9$:|:Z;d;{;
<N<m<}<
0.151
1)222e2s2
3&3-343F3e3k3x3
3[4n4
5'5-5:5A5H5O5V5]5d5
717I7}7
9N?c?t?
2*3X3n3
4[4h4{4
515>5|5
5L6U6
7A7W7
99:t:y:
; ;0;5;E;S;c;h;
<$<+<2<9<@<G<e<x<
</=s={=
>*>/>7>]>b>|>
<0A0K0u0~0
0 1+10151B1
2 2N2
3J4O4Y4
4%5,565;5i5
6@7b7n7s7x7
9A:F:P:
;%;+;H;N;g;n;
< <%</<
=Q=X=]=g=
>.?3?=?
!0>0C0M0{0
0.1o1}1
2$2N2_2m2{2
21383B3G3a3
5s5x5
7<7C7O7]7
8%878<8F8
9D9I9S9}9
;*;;;q;{;
<3<R<W<
=/>{>
0+050:0W0h0
1K1Q1[1m1w1
1_2d2m2}2
2D3K3P3Z3
3#4`4
495{5
6p6u6z6
70797H7e7
868H8V8b8
;4;Q;x;
1?2D3
5-5T5x5
8(868d8~8
9P:z;
>C>p>
212<2m2v2
3'3U3k3
53686I6j6w6
7$7+72797K7V7]7d7k7
9O9q9
:G:N:U:\:c:j:q:x:
<V=h=v=
>\>c>j>q>x>
0F1X1f1r1~1
6Q7k8
:N:W:
;+;9;o;
=C=J=
>">(>5><>C>J>Q>X>_>
?%?c?p?}?
2=2C2I2N2]2c2x2
;*;;;y;
<@<Z<k<
=>=F=T=[=x=
>&>@>I>R>[>p>y>
>S?Z?
4H4O4T4\4
5Q5X5_5m5z5
6*6/6G6L6T6
6;7A7L7Q7V7r7
7<8G8L8Q8[8{8
9/9k9q9|9
:9:K:k:p:z:
:l;u;
<(<6<d<z<
=l=u=
>!>(>6>
>1?>?F?S?X?`?
0E0J0R0
151D1I1Q1y1
2C2H2P2v2
2*31363>3h3o3t3|3
4.434H4N4S4y4~4
575<5D5i5n5v5
626A6b6s6
7)7>7l7q7v7
868j8
919;9@9
:B:~:
;<;z;
<6<R<a<
=2=U=c=z=
=N>v>
?)?9?C?H?o?
E0O0T0q0
263H3V3
3&484F4y4
5N5j5|5
: ;1;;;
;"<-<Z<
<,=B=n=~=
=!>(>/>w>
01080
3 474Q4b4
5P5k5?6H6v6
7.7a7
8G8a8n8u8|8
;;;B;I;^;
<2<B<P<~<
="=I=V=]=c=v=
1"1)1?1
394f4
5_5h5
7#7*7=7
989|9
=2>q>
0&0a0
0>1f1
7B8S8X8^8x8
9b9s9x9~9
><>E>i>s>
4%4T4
4Y5`5g5n5u5|5
7F8X8f8r8~8
=#=*=1=8=?=F=X=w=~=
=4>A>N>U>\>c>j>q>x>
2$262^2x2
4"4(4-4<4B4W4o4
667C7P7W7^7e7l7s7z7
8"9V9\9b9g9v9|9
>B>H>
?P?U?]?
0!010L0X0]0g0y0~0
191>1F1t1
2"21262>2d2
3F3L3o3t3
4A4V4
4,555
7 7/7E7J7R7
9:9A9F9P9f9k9s9
:M:Z:a:h:o:v:}:
<'<6<[<j<t<y<
<1=Z=z=
=\>j>q>{>
?>?I?T?_?j?
0)0:0?0I0_0
2U2[2e2{2
2O3V3`3{3
4=5C5I5c5j5t5y5
5>6C6M6
8$8)8N8U8m8t8
899H9O9
:#:e:}:
<U<m<t<
>Q>_>k>r>|>
?&?4?O?j?
0j0p0}0
282S2
3$3;3
3%434:4D4c4
5;5Q5l5
5?6E6R6m6
7Q7\7c7m7
<0=6=L=S=]=b=
>P>Z>
? ?*?t?
.080=0
0E1L1V1
30464L4S4]4b4
5K5U5
6#6>6E6O6T6s6z6
9!9(929N9
:<:C:
;-;3;:;
<"<,<t<z<
=$>.>
?#?k?q?
1"1v1
1B2H2^2e2
2,363
4E4]4d4
5D6Z6a6k6p6
849J9Q9[9`9
<T<Y<l<
>'>5>o>}>
?&?A?`?n?
0^0t0
02181E1`1g1r1
2D3Z3h3
3*44494
4I5P5Z5
9C:L:f:m:w:|:
:1;;;@;
<>=G=W=\=x=
>&?E?q?z?
0m0s0
111L1c1
1Q2W2]2m2
263W3
4!4M4T4f4k4u4
5%6,666x6
6A7W7
8'8i8
:$;:;H;b;p;
<"=)=3=u=
?H?e?l?~?
1#1e1|1
1O2V2`2e2
4 4-4<4F4K4
5F5U5Z5d5
6$6O6^6
6d7y7
8?8H8b8
8*919;9@9g9n9
9-:7:<:
:(;/;5;<;v;
?8?V?
80?0E0L0
4#4(4.4H4f4
4H5O5U5\5
8"93989>9X9v9
;/;\<t<~<
=)=1=;=@=U=~=
>4>>>F>R>W>\>c>m>
?>?H?_?f?
0"0'0,030=0O0x0
1/161n1w1
4<4G4w4
4 5m5
6*6Z6
7,737:7R7g7r7
8:9O9Z9
9!:n:
;8;M;X;
<N<U<\<c<
=:=A=H=c=x=
=$>A>L>
%0B0O0
1V2m2x2
3L3Q3[3
5\5t5
5.6C6N6~6
6&7i7
8%8U8
:3:I:
:%;5;C;q;
<"<c<s<
=Y=`=
>$>.>A>L>r>
?B?I?P?j?
02090@0Z0~0
1-131R1Y1`1z1
2;2B2I2e2m2t2{2
333:3A3[3
4%4+4P4W4^4z4
4&595L5
9,9y9
:G:Y:k:
=6>X>
?%?<?Y?a?h?o?u?
0,0I0Q0X0_0e0|0
1'1G1Q1~1
2-24292@2O2U2^2e2l2s2
3"343T3^3
4:4A4F4M4\4b4k4r4y4
5!5(5/5A5a5k5
6G6N6S6Z6i6o6x6
7'7.757<7N7n7x7
8'8T8[8`8g8v8|8
=7=D=K=Q=d=m=z=
?&?r?
9(969l9u9
:\:e:
<!<6<G<X<i<z<
<(=8=F=t=
.0H0Y0
1_2f2
2f3#4x4
5"5'5,535=5O5x5
5$6.646D6O6f6
6@7J7a7h7
8(8c8l8w8
9V:h:v:
:/;6;
>H>W>h>
?6?_?o?}?
01080p0y0
031<1G1
2&383F3R3
7'787Y7a7k7p7
8/8?8M8{8
9@9I9
:g;n;t;{;
>\?t?~?
0)010;0@0U0
1K1a1
2b2s2x2~2
374>4D4K4
7,8D8N8V8b8g8l8s8}8
9%9d9n9t9
:2;C;H;N;h;
=o>v>
1&12171<1C1M1_1
142>2D2T2_2v2
3P3Z3q3x3
484s4|4
5f6x6
6?7F7
:/:X:g:x:
;$;/;F;o;
; <*<A<H<
=C=L=W=
1,2D2N2V2b2g2l2s2}2
3%3d3n3t3
3F4X4f4r4
888G8X8y8
9&9O9_9m9
:!:(:`:i:
:#;,;7;
<#=U=
=\>e>
,060c0j0o0v0
2&222
686G6X6y6
7&7O7_7m7
8!8(8`8i8
8#9,979
:";,;>;
<@<I<
?&?2?{?
0"0'0C0R0W0_0
0'1,141a1g1l1t1
2W2^2c2
4\4e4
575M5
636C6V6i6|6
7!767K7`7i7
8#818A8I8
9)9:9
:f:q:
:F;K;w;
;w<|<
<6=]=g=
>2>?>O>u>
?.?8?=?B?I?N?q?
0(0C0H0R0y0
1"171I1V1i1n1s1
1=2Q2W2]2j2o2y2
3)303?3^3m3
4+4S4\4
5:5M5
909L9T9g9r9w9
: :%:=:L:Q:Y:
;D;S;X;p;
<,<2<S<X<}<
<&=J=u=~=
= >/>4><>
?B?e?n?}?
0/050V0
0*1Q1W1x1
2Q2x2~2
3.383=3
4(4>4f4
5'5e5t5~5
646:6[6
687^7j7
7B8k8q8
:9:R:}:
;-;_;
;0<V<
=D=w=
>O>X>c>
0B0S0a0o0}0
3_4h4
5=5R5W5\5c5j5
9<9`9x9
;,;1;6;=;D;x;
;!<&<m<
<t=y=
>5>N>]>g>l>
>7?M?b?g?l?
10@0c0
1r1|1
2'252`2
3,333a3v3
4@4\4i4n4x4
5L5R5u5z5
6*6c6
747:7Q7V7`7
9!9P9_9
:":9:@:J:O:v:
;#;D;g;
<(<2<7<U<Z<d<
=6=E=O=T=w=
=S>]>b>
?&?3?I?N?S?n?
0P0m0r0|0
021T1v1{1
2-2<2F2K2
303:3?3e3
4:4S4X4b4w4
505F5[5m5w5
6-676L6\6c6m6
767[7`7e7l7v7
8-92979=9G9b9g9l9r9|9
:4:S:
>#>F>T>[>h>m>u>
?(?-?5?c?l?{?
0&0{0
1]1p1z1
2,222U2c2j2w2
333B3~3
4X4k4
5;5N5S5
546C6P6
949B9Q9}9
:!:.:?:Q:[:`:u:
<D<Q<[<`<s<
=7=<=A=u=
>E?b?
0#0-020J0Z0m0
1.1N1[1
2%2L2m2
373A3F3
4/494N4
5>5I5P5]5b5l5
676F6s6
7#7-7V7\7l7
8(8\8k8u8z8
9)9/9H9W9\9f9{9
:=:}:
;1;;;@;];
<7<A<F<
=.=3===}=
>P>p>
?5?D?I?S?
1&10151c1u1|1
2 2%2M2
2`3o3v3
3+4b4
5$5,5
7$7)7C7V7w7
788i8
:*:4:9:
;8;=;B;\;l;
<$<9<n<|<
='=1=6=P=`=q=
>L>Q>[>
?)?;?A?p?
111G1Q1V1
2/2;2
223W3r3~3
4/4;4b4
5&52575A5V5b5g5q5
6#686L6Q6[6x6
7%7z7
8<8F8v8|8
9-9@9_9n9
:?:N:X:]:z:
;$;J;U;\;g;
<#<Z<
=N=p=
>9>>>C>Z>h>t>
?%?1???M?W?\?q?}?
0-020<0[0`0e0z0
212b2k2
3`5r5}5
6W6d6k6}6
7E7L7[7h7
7&8R8[8l8q8v8}8
879D9Q9W9j9}9
:?:k:t:
;P;];j;p;
;I<`<
<&=G=x=
B2G2O2q2v2
2I3N3V3|3
454G4L4
5$5)5;5k5p5x5
5#62676?6g6v6{6
7%7G7Z7y7
8-8U8u8z8
9K9U9Z9|9
:*:C:Q:q:
:\;a;k;
<'<2<7<B<G<O<v<{<
=.=2=9===B=G=M=Q=V=[=`=e=
>6>H>V>b>
0D0T0b0
0<1E1v1
2%2V2h2v2
3G3a3l3
4&5<5h5x5
6#686r6
7@7^7c7m7
829v9
:R:`:l:x:
<&<j<
<$=`=l=
>$>B>X>]>k>}>
?!?'?+?1?5?;?A?G?K?Q?U?[?a?g?k?q?u?{?
0)080<0B0F0L0R0X0\0b0f0l0s0y0}0
1A1G1L1T1
2A2G2L2V2
3 343|3
354E4J4T4i4
4:5B5G5Q5
5*62676A6y6
7=7m7{7
7$838=8B8h8w8
8j9q9v9
:>:N:]:{:
:-;2;7;P;a;p;
;-<2<7<P<a<p<
=7=>=_=d=i=
=!>'>,>6>
>'?1?6?\?k?
0 1b1v1
2,2:2H2f2
363H3V3b3
3,454f4x4
4\5e5
6;6w6
7\7c7j7
9B9{9
;/;<;D;I;S;
< <.<\<r<
>6>H>V>b>
?(?6?
0\1e1
1<2E2v2
3(3X3r3
4'4.454G4Q4\4c4
4>5g5
8A8W8
9!9/9]9s9
:-:=:K:y:
;>;K;R;d;o;v;
< <K<X<_<q<|<
=-=X=e=l=~=
>%>:>
1M1x1
2(2-272i2q2v2
2?3D3N3u3
4;4C4H4R4
5M5U5`5q5
6(6-686T6_6
7m7z7
919<9Q9X9v9
:&:1:m:t:{:
:A;N;[;
<$<0<<<H<
060H0V0
1L1U1
2D2Z2
2:3T3e3
3r4|4
4"5,5>5
7"7*7o7
8#8C8
9"989A9T9Y9j9s9
:%:1:6:@:R:W:t:
;A;S;X;
<*<?<
=#=B=R={=
>:>?>I>p>z>
70C0S0W0^0b0h0n0t0x0}0
2.232;2O2_2d2
3%3.3A3f3
4$4.4b4
5'5-5@5M5_5i5n5
6#6-6b6q6v6
7$7)7;7H7N7S7Y7^7p7
8(80868C8H8R8
9&9A9
:#:F:t:
:!;5;:;?;L;_;d;i;v;
<'<7<P<o<y<~<
=&=<=R=g=r=w=|=
=*>/>C>J>O>T>a>
?%?A?O?w?
0F0d0n0s0
141K1U1Z1
2"2'2T2y2~2
343F3n3s3}3
324B4
4 5-5?5D5N5w5|5
6-626<6e6j6t6
7$7+72797@7
748C8]8
:[:`:h:
;';?;^;x;};
<7<><Q<V<n<u<
=)===O=^=d=k=~=
>(>@>[>u>z>
?=?y?
1:1E1]1{1
2A2M2X2
3)323@3k3u3z3
424<4A4V4a4t4
5"5V5\5y5
646C6\6k6u6z6
7-72777q7|7
8A8e8j8t8
9L9Q9[9
:=:F:y:~:
:1;;;@;
<6=>=H=M=
?*?0?7?A?Y?s?}?
R0_0w0
13181B1Z1_1i1
1E2W2
3)3;3[3e3j3
4D5V5c5
7.7S7
8<8R8y8
9g9z9
97:Q:b:
;I;`;
;@>N>
>!?0?5?=?
03080@0{0
1)1T1
20292@2S2
3&353?3D3z3
4%464J4Y4_4f4w4
5D5J5
5(6.6T6
6 7/797>7_7
8)888]8l8
8$9)939w9
:8:=:G:z:
:8;R;
= =:=w=~=
>->^>h>m>r>
?-?4???~?
0 0}0
1/1z1
2"2.2>2b2h2o2z2
2 383H3N3[3t3
3"4;4B4N4
5)5F5c5
6:6A6K6a6m6y6
7 7,7j7
8&8-878M8_8
:&:2:r:
<,<s<
>,>5>F>M>
? ?f?
0&020
141N1}1
1G2W2e2
2!373^3k3q3
4=4J4Q4X4j4u4|4
4;5s5
5/6f6
9J9d9u9
:*;D;U;
;b<l<~<
=$=0=C=H=P=n=
>#>(>@>I>|>
?B?T?c?o?u?
0(0B0P0k0s0|0
1#1r1
2$2q2z2
4I4P4U4]4
5?5w5|5
6_7r7
999H9|9
:!:P:U:_:
:+;Q;
<*<4<9<Z<h<v<
=$=)=0>n>
>(?K?W?
0=0G0L0
131A1K1P1
2A2P2n2}2
3&3q3
4R4u4
5&5+5L5Z5
666O6Y6
7;7L7r7
7 8]8c8j8t8
9;9G9U9Z9d9|9
:A:q:
;=;C;J;T;};
;)<:<I<o<
>">W>
?F?X?f?r?
<0E0v0
1*2C2Y2
:0:h:
;*;k;r;y;
;+<N<U<\<c<
1@2Q2[2
2D3K3
8/8P8
8a9q9
:;:Q:}:
:9;F;M;T;Z;m;v;
;d<k<r<y<
<&=8=F=R=
1E1L1S1Z1
2&222a2h2o2?3
5l6u6
6L7U7
8l9u9
9 :R:{:
;6;H;V;
;.<H<
=)=0=7=I=S=^=e=
0;1K1`1j1u1
254?4J4W4^4e4l4
7\8m8
979Q9\9
<$<R<h<
<"=2=@=n=
>>>N>\>
?.?Z?j?x?
4T5a5n5u5{5
6$666=6^6e6l6s6
7!7(7/7E7v7}7
:@:c:
:.;;;
<T=j=
>>>K>
?8?n?
2+2C2M2X2e2l2s2z2
4U4~4
6*646W6
6!7u7
:3;@;G;N;`;k;r;y;
>0?O?Z?a?h?
0@0c0k0r0y0
1;2D4
4%6I6m6|6
7+7T7
7(8_8
<3=P=
> >T>
>F?e?n?
C0O0t0y0
181G1L1p1u1
2<2A2Z2i2n2v2
233?3e3j3r3
3)484=4a4f4
5!5&5
7Q7~7
8!8.838=8j8y8~8
949A9K9P9}9
:8:J:Y:w:
;;;E;J;w;
<B<t<{<
=)=<=A=K=
=I>^>l>
?,?R?X?
&050d0z0
0#11181E1x1
1L2Z2t2
3d4i4n4
535}5
5k6q6
708>8H8R8
9!979A9F9
9?:H:S:j:
;.;D;
<;<@<e<j<r<
<?=W=\=d=|=
>#>9>H>c>h>p>
?.?=?B?J?w?
0$0)0<0A0N0j0o0w0
0-1<1A1I1q1
2(2-2b2
3a3t3
4(4U4Z4d4
595I5m5
6,6<6`6u6
7<7c7
80858:8O8Y8^8s8
9#9;9@9J9
:$:J:Y:
;9;I;Z;r;~;
<%<A<c<
=$=C=_=
= >B>a>
?/?q?
0*080=0G0\0h0m0w0
101A1R1c1t1
2 2$2(2,2024282<2@2D2H2L2
3*3h3z3
4M4V4]4
595e5n5
6J6W6d6j6}6
6%7R7~7
8#8c8p8}8
8Y9p9
96:W:
;$;I;
<l<u<
<v=|=
>B?j?s?
 0E0T0Y0c0
0N1U1\1c1{1
2+2:2D2I2
3J3Y3w3|3
4?4N4k4t4
4&555d5
6 6/646>6X6]6|6
7 7X7k7x7
7O8T8^8
8_9d9n9
:!:&:0:^:q:
:2;X;g;l;v;
<1<o<t<~<
='=,=6=
=/>4>>>z>
>[?d?s?
0D0]0l0v0{0
1!1+1q1
1:2f2x2
2"3.3j3s3~3
4!4T4s4
4?5T5
636C6Q6
667D7N7a7l7
8"8,8?8J8
869f9
:3;X;
<$<1<8<O<\<i<o<
<I>`>
021C1H1N1h1
2R2c2h2n2
3!3r3
5$5;5B5z5
646>6U6\6
9&939:9A9H9O9V9]9d9v9
9R:_:l:s:z:
<#<*<1<8<><R=
>->3>H>`>
1#1f1m1r1
1@2M2
3(3[3i3
4]4x4
5%525i5
5I6Q6j6r6
6#71767;7R7t7~7
8#8I8U8e8
9,9<9I9W9f9
:):D:`:x:
<$<)<4<;<a<
='=<=J=P=u=
>,>2>>>O>\>f>w>}>
>%?3?D?J?V?
0.030=0j0
1*1<1Q1
2I2X2
4[4r4
5+505P5U5]5p5
6H6S6
7V7]7b7u7
8V8]8b8u8
9'9f9k9s9
9+:n:
:%;3;?;[;g;s;
;2<9<@<G<X<w<
=V=[=~=
=1>E>L>Q>Y>
?9???D?d?t?z?
0*0/070d0s0x0
0^1t1
3I3X3
3"4)4.454D4J4S4Z4a4h4z4
5#5;5j5
:4:>:F:R:W:\:c:m:
;T;^;d;t;
<!<p<z<
<"=3=8=>=X=
?B?Y?n?s?{?
%0*020P0U0g0l0x0
1$1M1R1Z1|1
2 2L2t2
3*3J3O3X3r3w3
5(5I5
6N6s6
6G7\7n7
8#8-8E8h8m8w8
8+909;9@9K9P9[9`9k9p9x9
:':>:J:
;(;B;^;
;0<U<r<}<
?!?+?C?x?
0(0-0[0m0
1"10151?1W1\1f1
2<2\2h2
2B3G3_3j3
595G5U5c5q5
8(8@8E8O8b8q8
9D9I9S9
9%:K:f:p:u:
;S;p;
;0<5<?<q<
=!=&=0=t=
><>[>v>
?$?-?=?C?f?k?u?
0A0W0n0
1!111G1Q1V1
202U2_2d2y2
3.383=3R3
464>4
575E5O5T5i5w5
5;6z6
7"7<7U7b7y7
72878<8m8
9%9*9^9h9o9
9 :%:/:e:
;>;C;M;
<C<Z<_<g<
<$=3=8=T=i=n=v=
=1>6>B>M>Z>i>u>
?7?L?Q?Y?}?
Q0f0r0
1D1h1m1u1
3+3K3`3j3o3
4)484N4n4
535Q5c5h5r5
6.636=6S6
7;7P7Z7_7
80898C8Q8w8
9&9<9I9]9b9l9
:;:@:E:v:
;';,;Y;y;
<E<P<Y<
=)=>=C=M=~=
>O>e>j>t>
?Z?i?n?x?
0!0&0D0Z0
1v1{1
1D2|2
2R3W3\3
4/4G4b4z4
5<5K5U5Z5s5
5!6`6o6y6~6
6K7P7Z7
7H8u8{8
8'<4<;<A<T<_<z<
=>=E=J=R=y=
>$>.>8>>>K>P>s>x>
0[0a0l0q0v0
1[1a1l1q1v1
2`2e2j2q2{2
2l3u3
5]6B7
9o:t;
=@=k={=
=l>u>
0.0h0r0}0
1>3g3
3.4Y4i4w4
535I5
6P6U6f6
7)747A7H7O7V7h7s7z7
9&9x9
9!:z:
:&;+;N;S;o;t;
<L<d<s<x<
=$=R=_=u=
?4?;?B?
304A4K4
4-5C5
6F6X6f6r6
8L9U9
9@:[:
;F;X;f;
<0<:<T<a<h<o<
<N=Z=_>
?8?N?z?
0&0T0j0
3$373@3Q3r3y3
3_4u4D5Z5
6$7C7J7
909=9D9W9
9F:b:
> >'>S>[>b>h>
50_0f0m0
0g1l1}1
2*2/2B2O2T2\2z2
2,3X3n3u3
3F4K4
4+52595s5z5
5E6J6j6o6
7*7/7B7O7T7\7z7
70858X8k8p8
8\9t9
9$:5:::
:';G;Q;V;
<#<4<R<e<
=%=*=E=J=R=
>?>u>
? ?z?
0@0n0s0{0
3>3Q3V3u3
4Q4V4a4f4q4v4
505M5a5z5
6A6U6~6
697B7_7d7n7
8D8n8u8
9'939<9C9L9S9]9s9
9D:J:T:e:o:u:{:
;%;5;E;Q;^;p;
</<?<O<_<o<{<
<j=t=y=
>B>I>S>X>w>
?.?5?<?|?
080e0
0#171>1H1M1
3(3U3\3a3h3w3}3
4\5e5
6(666B6
:(:I:Q:[:`:u:
;/;=;k;
;0<9<
=W>^>d>k>
>)?.?I?N?V?
0!0?0o0
0%1*121Z1
2X2k2~2
3$3)313q3
4O4n4
5G5m5{5
6 6'6.6n6
7)7.767y7
8F8M8R8Z8
9+9W9]9d9l9
:+:H:[:x:
;5;H;W;g;{;
<3<G<Y<k<~<
0"1)1.151D1J1S1Z1a1h1z1
848>8F8R8W8\8c8m8
9T9^9d9t9
:!:p:z:
:";3;8;>;X;
=3=;=B=I=O=f=l=~=
>`>e>
?#?+?~?
60L0Q0Y0t0
1A1u1z1
2#2(2/2>2D2M2T2[2b2t2\3e3
4(464B4
8(8I8Q8[8`8u8
9/9=9k9
90:9:
;W<^<d<k<
</=4=S=X=`=
>[>b>i>p>
><?A?d?i?
#070>0C0K0
1"1?1b1
4=4g4l4
4?5F5P5U5t5
6&6-646;6M6<7E7
:\;t;~;
<)<1<;<@<U<
=K=a=
>b>s>x>~>
70>0D0K0
11161>1
2n2}2
384?4D4L4
6!6A6F6a6f6n6
697>7F7v7}7
7*898>8F8
8"9'9/9N9Y9
9F:X:f:r:
;3;D;
;2<?<F<M<S<f<o<|<
=0=5=P=U=]=
0!0)0g0n0s0{0
192A2H2O2U2l2r2
2:3?3n3s3{3
3'444C4H4P4
5&5+5N5d5i5
696C6p6w6|6
6\7i7
7\8e8
9(969B9
=(=I=Q=[=`=u=
>/>=>k>
>0?9?
0W1^1d1k1
1G2N2S2[2
2.3S3b3g3o3
4D4I4Q4p4
565z5
5f6x6
6a7q7
8#8)8<8H8X8^8k8
9$9E9z9
9(:-:H:Y:^:j:u:
:D;I;Q;
<5<A<F<P<b<g<
<,=1=9=
>#>y>
>L?U?
0'070E0s0
0G1L1g1l1t1
2)2.2:2E2T2Y2a2
494>4F4
5#5c5
5#6S6
6-767Q7
8Y8p8
9':,:O:T:
;#;+;X;];x;
<%<*<L<Q<l<q<y<
=?=|=
>=>p>
&040B0O0Y0^0|0
181b1~1
1*2f2
2&383F3
3$41484>4Q4\4q4
576>6C6K6x6}6
627G7R7[7
7$878_8h8
9,:1:i:n:
;8;I;N;Z;e;t;y;
<.<3<;<
<L=~=
>">;>G>L>V>
>-?2?<?[?y?
1=1I1Y1]1c1h1m1r1
1/242O2T2\2
2@3E3M3
4>4F4W4p4|4
4*565F5J5P5U5Z5_5o5{5
5 6-6T6y6
7"7'7
778?8D8O8p8{8
8V9h9v9
:F:\:
:a;f;
;O<T<\<
?)?2?:?@?L?V?
1"1j1
1$2l2u2
3(363d3z3
485?5D5L5v5{5
5.6Y6h6m6u6
8L8W8
8L9U9
:D:Z:
;);.;T;Y;a;
<'<_<
=6=>=W=c=h=r=
=/>;>K>O>V>Z>`>f>l>p>u>z>
?.?3?N?S?[?
0"0*0_0
1+1<1_1k1p1z1
2%2C2d2
3/3S3X3d3i3q3
5#5(5-52575G5S5c5g5n5r5w5}5
7I7N7n7s7
8y8~8
8"9c9r9w9
:.:3:;:
;-;@;J;a;o;};
<J<W<^<d<w<
<&=8=F=
=a>f>
00?0D0L0
1F1K1S1
232:2?2G2o2
3?4D4m4r4z4
5$5,5o5
666I6X6]6e6
7&787=7E7[7j7
9#9+9Y9h9m9
:8:g:l:t:
;$;7;Z;_;g;
<'=6=;=C=
=q>v>
>7?>?C?K?u?z?
2?3w3
4(4@4K4Q4^4c4{4
5!51555;5@5E5J5Z5f5v5z5
6+6s6
7;7H7O7U7h7q7~7
7\8e8
9&9T9j9
9(:/:4:<:
;8;=;f;k;
;:<A<F<N<
=&=o=
>$>.>
>F?M?
0,0S0`0g0m0
1#1*141>1E1O1Y1_1k1q1}1
2"282D2
283>3a3o3v3
3=4D4e4j4t4
585M5Z5
6!6V6
7-71777;7A7H7N7R7X7\7b7h7n7r7x7|7
8%8+81858;8A8G8M8
8!9'9,949h9o9t9|9
9(:/:4:<:
;A;G;L;V;(<<<D<I<T<k<
=.=:=F=J=Q=U=Z=_=e=i=o=s=y=
>#>(>_>}>
?!?q?w?|?
0$0,0q0w0|0
1*1<1A1I1i1u1
2 2%2*2/242\2|2
3+3L3Q3_3t3y3
4$4,4x4
5&5+535q5y5~5
6%6Q6g6l6
7E7J7R7s7~7
8!8'8-8=8H8U8[8_8e8i8o8u8{8
9 9&9*90949:9A9E9K9Q9U9[9b9h9l9r9v9|9
:7:S:X:g:t:y:
;A;G;L;V;
;*<2<7<A<z<
=!=&=0=d=s=}=
>(>->
?$?.?3?x?
0X0_0z0
101:1?1
2,2;2E2J2_2
3"333B3a3p3z3
4'4,4Z4i4
4 5.5<5J5T5Y5
6u6~6
7%7T7c7h7r7
849H9o9y9~9
=@=V=
=&>8>F>R>
?&?T?n?
0!2)2.232[2
2U3e3s3
4/4E4f4s4z4
5%5,535H5
6-6;6[6
7!7,7=7M7X7
858=8B8L8n8s8}8
: :&:9:B:S:Z:
;=;D;K;R;
>&>|>
?4?E?y?
R0\0n0
1n1s1{1
232:2?2G2z2
3I3a3g3|3
6)6.6U6^6y6~6
7@7}7
8-8>8D8I8c8
909X9m9
:!:,:1:<:A:L:Q:Y:m:s:x:
:,;;;@;H;
<)=8===G=
>%>V>h>v>
3/4g4
5#5q5x5
9l:u:
;G;Q;\;i;p;w;~;
=:=P=|=
>(>V>l>
1!1.151;1N1Y1k1r1
2L2Q2b2
3)4V4
5O5X5x5
7"7)7;7
718N8W8r8|8
81:W:^:e:
; ;q;|;
;-=_=
=8>?>D>L>
?"?A?F?N?
0f0m0r0
071>1C1K1r1
172<2S2
3A3J3T3`3l3
4!4)4>4J4i4n4v4
6'6I6g6
777C7X7v7
878C8
9J9^9w9
90:5:?:T:`:e:o:
;1;?;I;N;k;p;z;
<,<9<F<
<)=k=r=
>6>H>T>`>
?%?/?4?L?p?
020>0I0\0p0{0
1[1`1j1
1E2J2T2w2
3)3;3@3J3b3{3
414C4f4k4p4w4
40555?5b5v5{5
6.6<6N6`6r6
6$717>7D7H7N7T7Z7`7p7|7
7&808r8}8
9 9^9e9l9u9
:<:G:L:Q:[:{:
;[;a;l;q;v;
<(=8=F=t=
>.>5>
>7?>?C?K?r?y?~?
02070T0Y0v0{0
1!1&1B1O1
2!2&2B2O2
3!3&3B3O3
4!4&4B4O4
5!5&5E5R5
5&686F6
6H7X7f7
8#8.8P8W8]8
9'9_9f9k9s9
:<:A:Y:z:
<'<-<2<j<o<
<;=A=L=Q=V=r=
>[>a>l>q>v>
?\?g?l?q?~?
0,030>0X0
0,171<1A1N1n1u1
2$2b2
3F3X3f3r3
8$828`8v8
8L9U9
=l>u>
?G?Q?\?i?p?w?~?
M0]0k0
0'1=1i1y1
3d4q4~4
5?5F5M5c5
7D7c7j7q7
9"9/969=9D9W9s9~9
<=<D<K<
=W=b=~=
0"0j0
0$1u1z1
2"2Z2t2y2
3$3L3[3`3h3
4$494H4M4U4
5'565;5C5e5z5
7<7A7K7
8%8=8J8a8p8
8 9%9/9
: :%:/:`:
<$<9<C<M<Z<t<~<
=5=A=I=V=f=p=}=
>&>1><>]>b>l>
>-?7?L?
0&0<0l0
1J1r1
2&2;2J2_2d2i2
3I3g3r3
4)484B4W4r4
6(6-6E6U6m6
757;7^7d7
7G8o8t8~8!9E9J9T9l9
:g:m:
;*;`;e;o;
;(<.<^<d<
<2=>=e=j=t=
>&>[>a>
?=?L?Q?[?
0 0%0T0c0h0r0
1$1.131M1e1r1
1/2l2
3 3*3[3
4'4,464O4q4v4
636G6
7K7P7U7r7
8&8<8Z8g8n8
<i=p=r>y>
?%?*?=?B?R?W?_?~?
1(1-151O1p1u1
375>5w6~6
8(8-858L8~8
929J9O9q9v9
:!:':::E:W:^:
;?;D;{;
<:<A<F<N<
<,=5=f=x=
=$>:>
?l?w?|?
0%0V0h0v0
1*1q1w1|1
2$2,2l2y2
2J3X3d3p3
4+4/464:4?4D4J4N4T4X4]4b4h4l4r4v4|4
5"5(5,52565<5B5H5L5Q5V5[5`5
5(6/646<6
6n7u7z7
858{8
9*9/999Q9_9m9w9|9
:$:.:
:(;/;4;>;
<"<W<
=F=X=f=r=
='>l>
?J?Q?X?_?
1P3{3
4'4U4k4
4l5u5
9\:e:
;<<E<v<
=(=a=k=v=
1>1T1
2,2Z2p2
6#6*61686N6
6O7e748J8
9(9^95:M:W:b:o:v:}:
<"<,<O<
=)=0=7=I=T=[=b=w=d>
?7???F?M?S?
0t0y0
1 1B1G1Q1p1x1}1
1:2G2
3>3K3R3X3k3v3
7F7X7f7r7
8.8j8
8$9l9u9
:(:6:d:z:
;$;Z;a;f;n;
<.<3<;<R<i<
<.=I=N=V=
=c>h>
?#?X?_?d?l?
0!0&0.0G0
2X2g2
3-323<3]3g3l3
4"4Q4}4
5B5L5Q5g5
767H7V7b7
8(868B8t8{8
0 111;1
232_2o2}2
2A3H3O3V3
4&424a4h4o4?5
7%8,838:8
9A9H9O9
:1;a;
;&<8<F<d=
=,>5>f>x>
040N0
1&1/1;1B1I1P1Z1d1
2'202<2C2J2Q2[2e2
4$4R4h4
4"525@5n5
6>6N6\6
7+9[9@:k:
;D<Q<^<e<k<~<
=7=>=E=L=b=
>O>V>]>s>
0T0s0z0
0/1E1
3D3c3j3q3
5K5"6:6D6O6\6c6j6q6
7 7'7:7V7a7n7u7|7
8G9d9m9
:.:7:R:\:
<7<><E<G=m=t={=
>1><>C>J>v>~>
>,?7?S?\?
X2_2d2l2
3$3,3x3
3+4<4A4J4x4
5/5@5O5T5\5q5
6L6S6Z6a6l6q6y6
7 7(7\7a7i7
778?8D8L8
9+9r9
9$:/:c:
;F;h;
<)<0<6<I<R<_<f<}<
</=8=
>.>D>
?h?o?t?|?
0X0_0d0l0
1$1,1x1
2X2_2d2l2
3'383N3f3k3
4 4&4,42484H4S4`4f4j4p4t4z4
585?5D5L5
6X6_6d6l6
787W7v7
9M9X9h9l9q9v9{9
:6:=:B:J:l:
;X;c;r;w;
;%<+<0<L<]<l<q<
=7=>=_=d=i=
=!>'>,>6>o>
>A?I?N?S?{?
0O0\0c0i0|0
1L1U1
2D2Z2
2N3U3\3c3l3
4,414G4V4[4z4
51565M5
6:6A6R6_6
6,777<7A7N7n7u7
8 8\9e9
9b:l:~:
:);@;t;
<)<0<7<><D<
=)=^=e=j=r=
=1>6>V>[>{>
?A?^?
+010<0A0F0b0o0
0+111<1A1F1b1o1
1;2A2L2Q2V2r2
3N3p3y3
4"4\4z4
5#505:5?5U5
6!6&6M6T6g6t6
7\7g7l7q7~7
8-848G8T8k;
>,>>>k>
>"?'?C?H?V?h?m?u?
0 0&0,02060<0B0H0N0
1$1,1q1w1|1
102;2W2l2q2
3&3+333V3b3q3u3{3
3!4'4,444a4g4l4t4
5$5,5q5w5|5
5P6X6]6g6
767P7
8!8(8/868=8D8K8V8
9D:d:
;);P;g;
<,<B<r<
=&=`=i=
>.>W>]>
>/?=?I?
0;0h0
1*1K1R1
122c2
3q3z3
324^4g4
595t5
7,757>7[7|7
8"8(8.848:8?8F8L8R8X8^8c8j8p8v8|8
9U9d9
:G:t:
;9;A;V;\;
;?<D<
<D=I=W=`=m=|=
=8>=>K>a>
>I?N?w?|?
$0)0p0u0
1N1S1
2A2F2
2(3-3Y3^3
4E4Z4`4e4
555G5
646A6W6\6
7F7S7
8R8W8k8
9?9M9{9
95:s:
;&;A;m;x;~;
;*<l<
<+=0=N=W=
?5?:?R?Y?u?
050:0^0g0}0
0#111G1L1n1{1
2.232O2X2
2(353B3K3\3b3g3t3
3*4W4m4r4
575D5W5f5
6T6e6k6q6z6
7&757F7
8c8h8~8
8 9+919E9P9V9j9u9{9
:%:.:K:P:z:
:;;D;`;i;
=9=>=l=
=>>M>_>o>
0;0F0
1'1S1
2f2q2
3e3k3
484^4m4
5U5k5p5
636F6]6b6}6
727B7]7d7
7A8_8o8
;p;u;
<*</<u<z<
=8=c=h=
?4?\?k?r?
242\2a2r2
2&3,3K3a3f3w3
4O4r4x4
5/545Y5o5t5
666W6\6
7&787Y7`7g7n7u7|7
868<8T8j8o8
9(9u9
:0:=:_:f:n:s:
;%;<;X;
<'</<4<U<
<k=p=
>=>N>
0!0N0S0k0
1Q2V2
3/444g4l4
4Q5_5
6(616\6a6{6
7$7k7
7,858f8x8
8E9M9T9\9s9
;;;w;
?L?e?s?
N0W0b0
2'22272^2t2
3@3P3^3
3<4E4v4
5%5V5h5v5
6$6/666
747g7w7
8A8W8x8
9,979>9E9Z9
92:;:R:
;-;4;J;Q;W;
;-<6<M<~<
=(=/=E=L=R=
=(>1>H>y>
?#?*?@?G?M?
!0*0A0r0{0
1#191@1F1
2"292j2s2
31383>3y3
444e4n4
5,53595
7 7f7
8 8f8
9 9f9
:G:T:y:
;4;e;r;
<&<R<
>A>n>
272<2Z2
3 3>3a3
3?4F4
5Q5W5
6"6)606H6Y6j6v6
797P7V7]7v7
8D8b8o8u8
8D9Y9^9k9
: :J:R:\:
<>=E=W=
>E?T?e?|?
0-1x1
222X2k2r2
3,3@3I3X3`3{3
4#4-474q4~4
5#565c5
6C6P6V6j6p6|6
6(7O7Z7
8,8:8d8r8
9 9U9g9q9
:F:Y:^:h:
: ;/;;;@;E;R;l;
<#<-<^<c<h<o<y<
<!=.=8=
=@>E>J>Q>[>o>}>
?%?\?a?f?m?w?
0+090D0J0P0W0]0f0
03181=1D1N1
3,323Q3k3~3
4!4.494R4W4i4r4w4
5%585>5b5h5m5y5~5
5&6/646@6I6U6[6d6
7#7)7H7P7`7i7
;/;U;q;v;
;F<d<p<
<,=M=i=
>G>L>Q>~>
? ?&?G?O?V?\?b?
000<0D0
1A2Y2
2@3n3
4u4~4
5$5)5/595C5S5c5i5t5z5
5"6.6R6W6m6y6
71777
8'80898N8c8r8z8
9%909=9Q9a9n9
:":-:B:M:Z:n:~:
;";2;B;b;m;
<.<;<O<_<o<
= =0=@=P=`=p=
>!>1>A>Q>a>q>
?"?2?B?R?_?s?
0%0*000E0L0t0|0
1)191F1Z1j1z1
2/2@2M2a2q2
3+3?3L3`3m3
4-4=4M4]4m4z4
525B5R5b5r5
6#636C6S6c6s6
7$747D7T7d7t7
9:9Q9a9s9x9}9
:":2:B:R:b:r:
;";2;B;R;b;r;
<"<2<B<R<b<
="=2=B=X=
>">2>B>R>a>g>
?"?2?B?R?b?r?
0"020B0R0b0r0
1 1$1,10181<1D1H1P1T1\1`1h1l1t1x1
2 2$2(2,2024282<2@2D2H2L2
0T0X0\0`0d0p0
303`3
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5
6(6X6
787h7
:X;`;h;p;x;
<X<x<
<(=,=0=
0 0$0(0004080<0@0D0H0L0P0T0X0\0`0d0l0p0t0x0|0
1$1(1,10141<1@1D1L1P1T1X1`1d1h1l1p1t1x1|1
2$2(20282@2D2H2L2P2X2\2`2d2h2p2t2x2|2
_h!\B
R?)X|
<TQ$`
fCm;]
s(]yC@
vv(F0s
dyAL~
RU#`[N
vO,8o
$2.s[S
o;csk
z(Tys
? Mh,
k&B[7
rKp~M2
H:O4ir%@
6*bnT
\/k#Y
>Su^vL
JvjqThN
)&F~6
'&Lh-\
Fl(,:
wJf+S
P6k?k
4^+ D(J-
Lu`wup
Z)/Z%
u6ipo
4@]TI
4KSbe
]Df35
[\yb?
S@Nc#
s[~PQ
H0[Y0)!
r9C?,
F5>}%
f[0bv(Z
~'$)p|
<3"$o
Washington1
Redmond1
Microsoft Corporation1(0&
Microsoft Code Signing PCA 20100
220512204706Z
230511204706Z0t1
Washington1
Redmond1
Microsoft Corporation1
Microsoft Corporation0
/+I}j
:Z/0T
I0G1-0+
$Microsoft Ireland Operations Limited1
230865+4705630
O0M0K
Ehttp://crl.microsoft.com/pki/crl/products/MicCodSigPCA_2010-07-06.crl0Z
N0L0J
>http://www.microsoft.com/pki/certs/MicCodSigPCA_2010-07-06.crt0
uEA-)
Washington1
Redmond1
Microsoft Corporation1200
)Microsoft Root Certificate Authority 20100
100706204017Z
250706205017Z0~1
Washington1
Redmond1
Microsoft Corporation1(0&
Microsoft Code Signing PCA 20100
KnILk
O0M0K
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
N0L0J
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
1http://www.microsoft.com/PKI/docs/CPS/default.htm0@
Legal_Policy_Statement
% moa
#Vx"&6
7Z>@B1
Washington1
Redmond1
Microsoft Corporation1(0&
Microsoft Code Signing PCA 2010
,ET/KmM6kidqRyWJOlaGtatDN4mJMAZzyPvO4+PuMig4=0Z
"Microsoft Window
 http://www.microsoft.com/windows0
o6!U$
#Gs>:
BW^=oE1p
20220805224351.071Z0
Washington1
Redmond1
Microsoft Corporation1%0#
Microsoft America Operations1&0$
Thales TSS ESN:DD8C-E337-2FAE1%0#
Microsoft Time-Stamp Service
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
211202190519Z
230228190519Z0
Washington1
Redmond1
Microsoft Corporation1%0#
Microsoft America Operations1&0$
Thales TSS ESN:DD8C-E337-2FAE1%0#
Microsoft Time-Stamp Service0
>e-f)2
i_>iQJ
1y;V}
8$i9cw
42Zu.
X0V0T
Nhttp://www.microsoft.com/pkiops/crl/Microsoft%20Time-Stamp%20PCA%202010(1).crl0l
`0^0\
Phttp://www.microsoft.com/pkiops/certs/Microsoft%20Time-Stamp%20PCA%202010(1).crt0
G3Mc,
9O2sI
Washington1
Redmond1
Microsoft Corporation1200
)Microsoft Root Certificate Authority 20100
210930182225Z
300930183225Z0|1
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
q\Q17
&S|9a
!]_0t
U0S0Q
3http://www.microsoft.com/pkiops/Docs/Repository.htm0
O0M0K
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
N0L0J
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
>NGdx
fg:SM
xSu$W
as.,k{n?,
J>f;O
!TkjE
Washington1
Redmond1
Microsoft Corporation1%0#
Microsoft America Operations1&0$
Thales TSS ESN:DD8C-E337-2FAE1%0#
Microsoft Time-Stamp Service
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 20100
20220805185040Z
20220806185040Z0w0=
1/0-0
1(0&0
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 2010
Washington1
Redmond1
Microsoft Corporation1&0$
Microsoft Time-Stamp PCA 2010
uhm.d
<'V{_
G+ECz
GBAx(&[
:!J5M
